/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 118);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(152);
var ieee754 = __webpack_require__(155);
var isArray = __webpack_require__(11);

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () {
        return 42;
      } };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }

  return that;
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }
  return createBuffer(that, size);
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);

  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }
  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0;

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return base64ToBytes(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0;

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
    // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;

        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 2 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}

/***/ }),
/* 3 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var processNextTick = __webpack_require__(7);
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = __webpack_require__(5);
util.inherits = __webpack_require__(2);
/*</replacement>*/

var Readable = __webpack_require__(13);
var Writable = __webpack_require__(15);

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return objectToString(e) === '[object Error]' || e instanceof Error;
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(151);
module.exports = angular;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
    case 0:
    case 1:
      return process.nextTick(fn);
    case 2:
      return process.nextTick(function afterTickOne() {
        fn.call(null, arg1);
      });
    case 3:
      return process.nextTick(function afterTickTwo() {
        fn.call(null, arg1, arg2);
      });
    case 4:
      return process.nextTick(function afterTickThree() {
        fn.call(null, arg1, arg2, arg3);
      });
    default:
      args = new Array(len - 1);
      i = 0;
      while (i < args.length) {
        args[i++] = arguments[i];
      }
      return process.nextTick(function afterTick() {
        fn.apply(null, args);
      });
  }
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(1);
var Buffer = buffer.Buffer;

// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }
  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  var buf = Buffer(size);
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }
  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  return buffer.SlowBuffer(size);
};

/***/ }),
/* 9 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 10 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function (n) {
  if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function (type) {
  var er, handler, len, args, i, listeners;

  if (!this._events) this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler)) return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++) listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function (type, listener) {
  var m;

  if (!isFunction(listener)) throw TypeError('listener must be a function');

  if (!this._events) this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function (type, listener) {
  if (!isFunction(listener)) throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function (type, listener) {
  var list, position, length, i;

  if (!isFunction(listener)) throw TypeError('listener must be a function');

  if (!this._events || !this._events[type]) return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener || isFunction(list.listener) && list.listener === listener) {
    delete this._events[type];
    if (this._events.removeListener) this.emit('removeListener', type, listener);
  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
        position = i;
        break;
      }
    }

    if (position < 0) return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener) this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function (type) {
  var key, listeners;

  if (!this._events) return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length) this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function (type) {
  var ret;
  if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function (type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener)) return 1;else if (evlistener) return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function (emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

/***/ }),
/* 11 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = __webpack_require__(1).Buffer;

var isBufferEncoding = Buffer.isEncoding || function (encoding) {
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function (encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};

// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function (buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function (buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = buffer.length >= 3 ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function (buffer) {
  var res = '';
  if (buffer && buffer.length) res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var processNextTick = __webpack_require__(7);
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(11);
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(10).EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(17);
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = __webpack_require__(8).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(5);
util.inherits = __webpack_require__(2);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(219);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(161);
var destroyImpl = __webpack_require__(16);
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(4);

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(12).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(4);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(12).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(3)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(4);

/*<replacement>*/
var util = __webpack_require__(5);
util.inherits = __webpack_require__(2);
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var processNextTick = __webpack_require__(7);
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(5);
util.inherits = __webpack_require__(2);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(167)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(17);
/*</replacement>*/

/*<replacement>*/
var Buffer = __webpack_require__(8).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = __webpack_require__(16);

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(4);

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(4);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(21).setImmediate, __webpack_require__(0)))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var processNextTick = __webpack_require__(7);
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(10).EventEmitter;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(13);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(15);
exports.Duplex = __webpack_require__(4);
exports.Transform = __webpack_require__(14);
exports.PassThrough = __webpack_require__(160);

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var ClientRequest = __webpack_require__(163);
var extend = __webpack_require__(169);
var statusCodes = __webpack_require__(153);
var url = __webpack_require__(22);

var http = exports;

http.request = function (opts, cb) {
	if (typeof opts === 'string') opts = url.parse(opts);else opts = extend(opts);

	// Normally, the page is loaded from http or https, so not specifying a protocol
	// will result in a (valid) protocol-relative url. However, this won't work if
	// the protocol is something else, like 'file:'
	var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

	var protocol = opts.protocol || defaultProtocol;
	var host = opts.hostname || opts.host;
	var port = opts.port;
	var path = opts.path || '/';

	// Necessary for IPv6 addresses
	if (host && host.indexOf(':') !== -1) host = '[' + host + ']';

	// This may be a relative url. The browser should always be able to interpret it correctly.
	opts.url = (host ? protocol + '//' + host : '') + (port ? ':' + port : '') + path;
	opts.method = (opts.method || 'GET').toUpperCase();
	opts.headers = opts.headers || {};

	// Also valid opts.auth, opts.mode

	var req = new ClientRequest(opts);
	if (cb) req.on('response', cb);
	return req;
};

http.get = function get(opts, cb) {
	var req = http.request(opts, cb);
	req.end();
	return req;
};

http.Agent = function () {};
http.Agent.defaultMaxSockets = 4;

http.STATUS_CODES = statusCodes;

http.METHODS = ['CHECKOUT', 'CONNECT', 'COPY', 'DELETE', 'GET', 'HEAD', 'LOCK', 'M-SEARCH', 'MERGE', 'MKACTIVITY', 'MKCOL', 'MOVE', 'NOTIFY', 'OPTIONS', 'PATCH', 'POST', 'PROPFIND', 'PROPPATCH', 'PURGE', 'PUT', 'REPORT', 'SEARCH', 'SUBSCRIBE', 'TRACE', 'UNLOCK', 'UNSUBSCRIBE'];
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream);

exports.blobConstructor = false;
try {
	new Blob([new ArrayBuffer(1)]);
	exports.blobConstructor = true;
} catch (e) {}

// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var xhr;
function getXHR() {
	// Cache the xhr value
	if (xhr !== undefined) return xhr;

	if (global.XMLHttpRequest) {
		xhr = new global.XMLHttpRequest();
		// If XDomainRequest is available (ie only, where xhr might not work
		// cross domain), use the page location. Otherwise use example.com
		// Note: this doesn't actually make an http request.
		try {
			xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com');
		} catch (e) {
			xhr = null;
		}
	} else {
		// Service workers don't have XHR
		xhr = null;
	}
	return xhr;
}

function checkTypeSupport(type) {
	var xhr = getXHR();
	if (!xhr) return false;
	try {
		xhr.responseType = type;
		return xhr.responseType === type;
	} catch (e) {}
	return false;
}

// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
// Safari 7.1 appears to have fixed this bug.
var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined';
var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice);

// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
exports.arraybuffer = exports.fetch || haveArrayBuffer && checkTypeSupport('arraybuffer');

// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream');
exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer && checkTypeSupport('moz-chunked-arraybuffer');

// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false);

exports.vbArray = isFunction(global.VBArray);

function isFunction(value) {
	return typeof value === 'function';
}

xhr = null; // Help gc
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function () {};
Timeout.prototype.close = function () {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(162);
exports.setImmediate = setImmediate;
exports.clearImmediate = clearImmediate;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(156);
var util = __webpack_require__(166);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,


// Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,


// RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],


// RFC 2396: characters not allowed for various reasons.
unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),


// Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = ['\''].concat(unwise),

// Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,

// protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
  'javascript': true,
  'javascript:': true
},

// protocols that never have a hostname.
hostlessProtocol = {
  'javascript': true,
  'javascript:': true
},

// protocols that always contain a // bit.
slashedProtocol = {
  'http': true,
  'https': true,
  'ftp': true,
  'gopher': true,
  'file': true,
  'http:': true,
  'https:': true,
  'ftp:': true,
  'gopher:': true,
  'file:': true
},
    querystring = __webpack_require__(159);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1) hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1) continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }

  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function () {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || query && '?' + query || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function (relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function (relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol') result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = relative.host || relative.host === '' ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/';

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || result.host && srcPath.length;

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function () {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

/***/ }),
/* 23 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
module.exports = function(src) {
	if (typeof execScript !== "undefined")
		execScript(src);
	else
		eval.call(null, src);
}


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./copy/copy.controller.js": 48,
	"./exhibit/exhibit.controller.js": 49,
	"./home/home.controller.js": 50,
	"./lightbox/cropper.controller.js": 51,
	"./lightbox/lightbox.controller.js": 52,
	"./modal/modal.controller.js": 53,
	"./search/search.controller.js": 54,
	"./showme/showme.controller.js": 55,
	"./staticpage/staticpage.controller.js": 56,
	"./work/work.controller.js": 57
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 24;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./affix/directive.js": 58,
	"./all-known-copies/directive.js": 59,
	"./all-known-related-items/directive.js": 60,
	"./auto-height/directive.js": 61,
	"./auto-width/directive.js": 62,
	"./blake-menu/directive.js": 63,
	"./client-ppi/clientPpi.directive.js": 64,
	"./copy-info-dl/copyInfoDl.directive.js": 65,
	"./copy-information/copyInformation.directive.js": 66,
	"./copy-tabs/copyTabs.directive.js": 67,
	"./cropper/cropper.directive.js": 68,
	"./dpi/dpi.directive.js": 69,
	"./editor-notes/editorNotes.directive.js": 70,
	"./electronic-edition-info-tab/directive.js": 71,
	"./handprint-block/handprintBlock.directive.js": 72,
	"./illustration-description/illustrationDescription.directive.js": 73,
	"./image-tags/imageTags.directive.js": 74,
	"./info-tray/infoTray.directive.js": 75,
	"./left-on-broadcast/directive.js": 76,
	"./magnify-image/directive.js": 77,
	"./menu/directive.js": 78,
	"./object-compare/objectCompare.directive.js": 79,
	"./object-edit-buttons/directive.js": 80,
	"./object-reading/objectReading.directive.js": 81,
	"./object-viewer/objectViewer.directive.js": 82,
	"./object-viewer/previous-next/directive.js": 83,
	"./object-viewer/regular-object-viewer/directive.js": 84,
	"./object-viewer/supplemental-image-viewer/directive.js": 85,
	"./objects-from-same/objectsFromSame.directive.js": 86,
	"./objects-in-copy/directive.js": 87,
	"./ovp-image/directive.js": 88,
	"./parallax/directive.js": 89,
	"./resize/directive.js": 90,
	"./scroll-to-element/directive.js": 91,
	"./scroll-to-top/directive.js": 92,
	"./search-box/directive.js": 93,
	"./search-results/preview-box/copies-in-work/directive.js": 94,
	"./search-results/preview-box/directive.js": 95,
	"./search-results/preview-box/header/directive.js": 96,
	"./search-results/preview-box/object-result-highlight/directive.js": 97,
	"./search-results/preview-box/objects-in-copy/directive.js": 98,
	"./search-results/preview-box/objects-in-virtual-work/directive.js": 99,
	"./search-results/preview-box/preview-selection/directive.js": 100,
	"./search-results/preview-box/previous-next/directive.js": 101,
	"./search-results/searchResults.directive.js": 102,
	"./search/date/directive.js": 103,
	"./search/field/directive.js": 104,
	"./search/medium/directive.js": 105,
	"./show-me/directive.js": 106,
	"./slide-box/slideBox.directive.js": 107,
	"./text-match-tab/directive.js": 108,
	"./text-transcription/textTranscription.directive.js": 109,
	"./textual-reference-tab/directive.js": 110,
	"./to-top-button/directive.js": 111,
	"./to-top-on-broadcast/directive.js": 112,
	"./twitter-share/directive.js": 113,
	"./view-sub-menu/viewSubMenu.directive.js": 114,
	"./work-copies/workCopies.directive.js": 115,
	"./work-title/workTitle.directive.js": 116
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 25;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./highlight.js": 117
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 26;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./alert.factory.js": 126,
	"./alert.service.js": 127,
	"./blake-copy.js": 128,
	"./blake-data.js": 129,
	"./blake-featured-work.js": 130,
	"./blake-fragment-pair.js": 131,
	"./blake-object.js": 132,
	"./blake-work.js": 133,
	"./cartStorage.js": 134,
	"./compare-objects.js": 135,
	"./fabricCrop.js": 136,
	"./format.js": 137,
	"./generic-service.js": 138,
	"./image-manipulation.js": 139,
	"./lightbox.service.js": 140,
	"./object-viewer.js": 141,
	"./search.js": 142,
	"./window-size.js": 143,
	"./worktitle.service.js": 144
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 27;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! Sortable 1.4.2 - MIT | git://github.com/rubaxa/Sortable.git */
!function (a) {
  "use strict";
   true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (a),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "undefined" != typeof module && "undefined" != typeof module.exports ? module.exports = a() : "undefined" != typeof Package ? Sortable = a() : window.Sortable = a();
}(function () {
  "use strict";
  function a(a, b) {
    if (!a || !a.nodeType || 1 !== a.nodeType) throw "Sortable: `el` must be HTMLElement, and not " + {}.toString.call(a);this.el = a, this.options = b = r({}, b), a[L] = this;var c = { group: Math.random(), sort: !0, disabled: !1, store: null, handle: null, scroll: !0, scrollSensitivity: 30, scrollSpeed: 10, draggable: /[uo]l/i.test(a.nodeName) ? "li" : ">*", ghostClass: "sortable-ghost", chosenClass: "sortable-chosen", ignore: "a, img", filter: null, animation: 0, setData: function (a, b) {
        a.setData("Text", b.textContent);
      }, dropBubble: !1, dragoverBubble: !1, dataIdAttr: "data-id", delay: 0, forceFallback: !1, fallbackClass: "sortable-fallback", fallbackOnBody: !1 };for (var d in c) !(d in b) && (b[d] = c[d]);V(b);for (var f in this) "_" === f.charAt(0) && (this[f] = this[f].bind(this));this.nativeDraggable = b.forceFallback ? !1 : P, e(a, "mousedown", this._onTapStart), e(a, "touchstart", this._onTapStart), this.nativeDraggable && (e(a, "dragover", this), e(a, "dragenter", this)), T.push(this._onDragOver), b.store && this.sort(b.store.get(this));
  }function b(a) {
    v && v.state !== a && (h(v, "display", a ? "none" : ""), !a && v.state && w.insertBefore(v, s), v.state = a);
  }function c(a, b, c) {
    if (a) {
      c = c || N, b = b.split(".");var d = b.shift().toUpperCase(),
          e = new RegExp("\\s(" + b.join("|") + ")(?=\\s)", "g");do if (">*" === d && a.parentNode === c || ("" === d || a.nodeName.toUpperCase() == d) && (!b.length || ((" " + a.className + " ").match(e) || []).length == b.length)) return a; while (a !== c && (a = a.parentNode));
    }return null;
  }function d(a) {
    a.dataTransfer && (a.dataTransfer.dropEffect = "move"), a.preventDefault();
  }function e(a, b, c) {
    a.addEventListener(b, c, !1);
  }function f(a, b, c) {
    a.removeEventListener(b, c, !1);
  }function g(a, b, c) {
    if (a) if (a.classList) a.classList[c ? "add" : "remove"](b);else {
      var d = (" " + a.className + " ").replace(K, " ").replace(" " + b + " ", " ");a.className = (d + (c ? " " + b : "")).replace(K, " ");
    }
  }function h(a, b, c) {
    var d = a && a.style;if (d) {
      if (void 0 === c) return N.defaultView && N.defaultView.getComputedStyle ? c = N.defaultView.getComputedStyle(a, "") : a.currentStyle && (c = a.currentStyle), void 0 === b ? c : c[b];b in d || (b = "-webkit-" + b), d[b] = c + ("string" == typeof c ? "" : "px");
    }
  }function i(a, b, c) {
    if (a) {
      var d = a.getElementsByTagName(b),
          e = 0,
          f = d.length;if (c) for (; f > e; e++) c(d[e], e);return d;
    }return [];
  }function j(a, b, c, d, e, f, g) {
    var h = N.createEvent("Event"),
        i = (a || b[L]).options,
        j = "on" + c.charAt(0).toUpperCase() + c.substr(1);h.initEvent(c, !0, !0), h.to = b, h.from = e || b, h.item = d || b, h.clone = v, h.oldIndex = f, h.newIndex = g, b.dispatchEvent(h), i[j] && i[j].call(a, h);
  }function k(a, b, c, d, e, f) {
    var g,
        h,
        i = a[L],
        j = i.options.onMove;return g = N.createEvent("Event"), g.initEvent("move", !0, !0), g.to = b, g.from = a, g.dragged = c, g.draggedRect = d, g.related = e || b, g.relatedRect = f || b.getBoundingClientRect(), a.dispatchEvent(g), j && (h = j.call(i, g)), h;
  }function l(a) {
    a.draggable = !1;
  }function m() {
    R = !1;
  }function n(a, b) {
    var c = a.lastElementChild,
        d = c.getBoundingClientRect();return (b.clientY - (d.top + d.height) > 5 || b.clientX - (d.right + d.width) > 5) && c;
  }function o(a) {
    for (var b = a.tagName + a.className + a.src + a.href + a.textContent, c = b.length, d = 0; c--;) d += b.charCodeAt(c);return d.toString(36);
  }function p(a) {
    var b = 0;if (!a || !a.parentNode) return -1;for (; a && (a = a.previousElementSibling);) "TEMPLATE" !== a.nodeName.toUpperCase() && b++;return b;
  }function q(a, b) {
    var c, d;return function () {
      void 0 === c && (c = arguments, d = this, setTimeout(function () {
        1 === c.length ? a.call(d, c[0]) : a.apply(d, c), c = void 0;
      }, b));
    };
  }function r(a, b) {
    if (a && b) for (var c in b) b.hasOwnProperty(c) && (a[c] = b[c]);return a;
  }var s,
      t,
      u,
      v,
      w,
      x,
      y,
      z,
      A,
      B,
      C,
      D,
      E,
      F,
      G,
      H,
      I,
      J = {},
      K = /\s+/g,
      L = "Sortable" + new Date().getTime(),
      M = window,
      N = M.document,
      O = M.parseInt,
      P = !!("draggable" in N.createElement("div")),
      Q = function (a) {
    return a = N.createElement("x"), a.style.cssText = "pointer-events:auto", "auto" === a.style.pointerEvents;
  }(),
      R = !1,
      S = Math.abs,
      T = ([].slice, []),
      U = q(function (a, b, c) {
    if (c && b.scroll) {
      var d,
          e,
          f,
          g,
          h = b.scrollSensitivity,
          i = b.scrollSpeed,
          j = a.clientX,
          k = a.clientY,
          l = window.innerWidth,
          m = window.innerHeight;if (z !== c && (y = b.scroll, z = c, y === !0)) {
        y = c;do if (y.offsetWidth < y.scrollWidth || y.offsetHeight < y.scrollHeight) break; while (y = y.parentNode);
      }y && (d = y, e = y.getBoundingClientRect(), f = (S(e.right - j) <= h) - (S(e.left - j) <= h), g = (S(e.bottom - k) <= h) - (S(e.top - k) <= h)), f || g || (f = (h >= l - j) - (h >= j), g = (h >= m - k) - (h >= k), (f || g) && (d = M)), (J.vx !== f || J.vy !== g || J.el !== d) && (J.el = d, J.vx = f, J.vy = g, clearInterval(J.pid), d && (J.pid = setInterval(function () {
        d === M ? M.scrollTo(M.pageXOffset + f * i, M.pageYOffset + g * i) : (g && (d.scrollTop += g * i), f && (d.scrollLeft += f * i));
      }, 24)));
    }
  }, 30),
      V = function (a) {
    var b = a.group;b && "object" == typeof b || (b = a.group = { name: b }), ["pull", "put"].forEach(function (a) {
      a in b || (b[a] = !0);
    }), a.groups = " " + b.name + (b.put.join ? " " + b.put.join(" ") : "") + " ";
  };return a.prototype = { constructor: a, _onTapStart: function (a) {
      var b = this,
          d = this.el,
          e = this.options,
          f = a.type,
          g = a.touches && a.touches[0],
          h = (g || a).target,
          i = h,
          k = e.filter;if (!("mousedown" === f && 0 !== a.button || e.disabled) && (h = c(h, e.draggable, d))) {
        if (D = p(h), "function" == typeof k) {
          if (k.call(this, a, h, this)) return j(b, i, "filter", h, d, D), void a.preventDefault();
        } else if (k && (k = k.split(",").some(function (a) {
          return a = c(i, a.trim(), d), a ? (j(b, a, "filter", h, d, D), !0) : void 0;
        }))) return void a.preventDefault();(!e.handle || c(i, e.handle, d)) && this._prepareDragStart(a, g, h);
      }
    }, _prepareDragStart: function (a, b, c) {
      var d,
          f = this,
          h = f.el,
          j = f.options,
          k = h.ownerDocument;c && !s && c.parentNode === h && (G = a, w = h, s = c, t = s.parentNode, x = s.nextSibling, F = j.group, d = function () {
        f._disableDelayedDrag(), s.draggable = !0, g(s, f.options.chosenClass, !0), f._triggerDragStart(b);
      }, j.ignore.split(",").forEach(function (a) {
        i(s, a.trim(), l);
      }), e(k, "mouseup", f._onDrop), e(k, "touchend", f._onDrop), e(k, "touchcancel", f._onDrop), j.delay ? (e(k, "mouseup", f._disableDelayedDrag), e(k, "touchend", f._disableDelayedDrag), e(k, "touchcancel", f._disableDelayedDrag), e(k, "mousemove", f._disableDelayedDrag), e(k, "touchmove", f._disableDelayedDrag), f._dragStartTimer = setTimeout(d, j.delay)) : d());
    }, _disableDelayedDrag: function () {
      var a = this.el.ownerDocument;clearTimeout(this._dragStartTimer), f(a, "mouseup", this._disableDelayedDrag), f(a, "touchend", this._disableDelayedDrag), f(a, "touchcancel", this._disableDelayedDrag), f(a, "mousemove", this._disableDelayedDrag), f(a, "touchmove", this._disableDelayedDrag);
    }, _triggerDragStart: function (a) {
      a ? (G = { target: s, clientX: a.clientX, clientY: a.clientY }, this._onDragStart(G, "touch")) : this.nativeDraggable ? (e(s, "dragend", this), e(w, "dragstart", this._onDragStart)) : this._onDragStart(G, !0);try {
        N.selection ? N.selection.empty() : window.getSelection().removeAllRanges();
      } catch (b) {}
    }, _dragStarted: function () {
      w && s && (g(s, this.options.ghostClass, !0), a.active = this, j(this, w, "start", s, w, D));
    }, _emulateDragOver: function () {
      if (H) {
        if (this._lastX === H.clientX && this._lastY === H.clientY) return;this._lastX = H.clientX, this._lastY = H.clientY, Q || h(u, "display", "none");var a = N.elementFromPoint(H.clientX, H.clientY),
            b = a,
            c = " " + this.options.group.name,
            d = T.length;if (b) do {
          if (b[L] && b[L].options.groups.indexOf(c) > -1) {
            for (; d--;) T[d]({ clientX: H.clientX, clientY: H.clientY, target: a, rootEl: b });break;
          }a = b;
        } while (b = b.parentNode);Q || h(u, "display", "");
      }
    }, _onTouchMove: function (b) {
      if (G) {
        a.active || this._dragStarted(), this._appendGhost();var c = b.touches ? b.touches[0] : b,
            d = c.clientX - G.clientX,
            e = c.clientY - G.clientY,
            f = b.touches ? "translate3d(" + d + "px," + e + "px,0)" : "translate(" + d + "px," + e + "px)";I = !0, H = c, h(u, "webkitTransform", f), h(u, "mozTransform", f), h(u, "msTransform", f), h(u, "transform", f), b.preventDefault();
      }
    }, _appendGhost: function () {
      if (!u) {
        var a,
            b = s.getBoundingClientRect(),
            c = h(s),
            d = this.options;u = s.cloneNode(!0), g(u, d.ghostClass, !1), g(u, d.fallbackClass, !0), h(u, "top", b.top - O(c.marginTop, 10)), h(u, "left", b.left - O(c.marginLeft, 10)), h(u, "width", b.width), h(u, "height", b.height), h(u, "opacity", "0.8"), h(u, "position", "fixed"), h(u, "zIndex", "100000"), h(u, "pointerEvents", "none"), d.fallbackOnBody && N.body.appendChild(u) || w.appendChild(u), a = u.getBoundingClientRect(), h(u, "width", 2 * b.width - a.width), h(u, "height", 2 * b.height - a.height);
      }
    }, _onDragStart: function (a, b) {
      var c = a.dataTransfer,
          d = this.options;this._offUpEvents(), "clone" == F.pull && (v = s.cloneNode(!0), h(v, "display", "none"), w.insertBefore(v, s)), b ? ("touch" === b ? (e(N, "touchmove", this._onTouchMove), e(N, "touchend", this._onDrop), e(N, "touchcancel", this._onDrop)) : (e(N, "mousemove", this._onTouchMove), e(N, "mouseup", this._onDrop)), this._loopId = setInterval(this._emulateDragOver, 50)) : (c && (c.effectAllowed = "move", d.setData && d.setData.call(this, c, s)), e(N, "drop", this), setTimeout(this._dragStarted, 0));
    }, _onDragOver: function (a) {
      var d,
          e,
          f,
          g = this.el,
          i = this.options,
          j = i.group,
          l = j.put,
          o = F === j,
          p = i.sort;if (void 0 !== a.preventDefault && (a.preventDefault(), !i.dragoverBubble && a.stopPropagation()), I = !0, F && !i.disabled && (o ? p || (f = !w.contains(s)) : F.pull && l && (F.name === j.name || l.indexOf && ~l.indexOf(F.name))) && (void 0 === a.rootEl || a.rootEl === this.el)) {
        if (U(a, i, this.el), R) return;if (d = c(a.target, i.draggable, g), e = s.getBoundingClientRect(), f) return b(!0), void (v || x ? w.insertBefore(s, v || x) : p || w.appendChild(s));if (0 === g.children.length || g.children[0] === u || g === a.target && (d = n(g, a))) {
          if (d) {
            if (d.animated) return;r = d.getBoundingClientRect();
          }b(o), k(w, g, s, e, d, r) !== !1 && (s.contains(g) || (g.appendChild(s), t = g), this._animate(e, s), d && this._animate(r, d));
        } else if (d && !d.animated && d !== s && void 0 !== d.parentNode[L]) {
          A !== d && (A = d, B = h(d), C = h(d.parentNode));var q,
              r = d.getBoundingClientRect(),
              y = r.right - r.left,
              z = r.bottom - r.top,
              D = /left|right|inline/.test(B.cssFloat + B.display) || "flex" == C.display && 0 === C["flex-direction"].indexOf("row"),
              E = d.offsetWidth > s.offsetWidth,
              G = d.offsetHeight > s.offsetHeight,
              H = (D ? (a.clientX - r.left) / y : (a.clientY - r.top) / z) > .5,
              J = d.nextElementSibling,
              K = k(w, g, s, e, d, r);if (K !== !1) {
            if (R = !0, setTimeout(m, 30), b(o), 1 === K || -1 === K) q = 1 === K;else if (D) {
              var M = s.offsetTop,
                  N = d.offsetTop;q = M === N ? d.previousElementSibling === s && !E || H && E : N > M;
            } else q = J !== s && !G || H && G;s.contains(g) || (q && !J ? g.appendChild(s) : d.parentNode.insertBefore(s, q ? J : d)), t = s.parentNode, this._animate(e, s), this._animate(r, d);
          }
        }
      }
    }, _animate: function (a, b) {
      var c = this.options.animation;if (c) {
        var d = b.getBoundingClientRect();h(b, "transition", "none"), h(b, "transform", "translate3d(" + (a.left - d.left) + "px," + (a.top - d.top) + "px,0)"), b.offsetWidth, h(b, "transition", "all " + c + "ms"), h(b, "transform", "translate3d(0,0,0)"), clearTimeout(b.animated), b.animated = setTimeout(function () {
          h(b, "transition", ""), h(b, "transform", ""), b.animated = !1;
        }, c);
      }
    }, _offUpEvents: function () {
      var a = this.el.ownerDocument;f(N, "touchmove", this._onTouchMove), f(a, "mouseup", this._onDrop), f(a, "touchend", this._onDrop), f(a, "touchcancel", this._onDrop);
    }, _onDrop: function (b) {
      var c = this.el,
          d = this.options;clearInterval(this._loopId), clearInterval(J.pid), clearTimeout(this._dragStartTimer), f(N, "mousemove", this._onTouchMove), this.nativeDraggable && (f(N, "drop", this), f(c, "dragstart", this._onDragStart)), this._offUpEvents(), b && (I && (b.preventDefault(), !d.dropBubble && b.stopPropagation()), u && u.parentNode.removeChild(u), s && (this.nativeDraggable && f(s, "dragend", this), l(s), g(s, this.options.ghostClass, !1), g(s, this.options.chosenClass, !1), w !== t ? (E = p(s), E >= 0 && (j(null, t, "sort", s, w, D, E), j(this, w, "sort", s, w, D, E), j(null, t, "add", s, w, D, E), j(this, w, "remove", s, w, D, E))) : (v && v.parentNode.removeChild(v), s.nextSibling !== x && (E = p(s), E >= 0 && (j(this, w, "update", s, w, D, E), j(this, w, "sort", s, w, D, E)))), a.active && ((null === E || -1 === E) && (E = D), j(this, w, "end", s, w, D, E), this.save())), w = s = t = u = x = v = y = z = G = H = I = E = A = B = F = a.active = null);
    }, handleEvent: function (a) {
      var b = a.type;"dragover" === b || "dragenter" === b ? s && (this._onDragOver(a), d(a)) : ("drop" === b || "dragend" === b) && this._onDrop(a);
    }, toArray: function () {
      for (var a, b = [], d = this.el.children, e = 0, f = d.length, g = this.options; f > e; e++) a = d[e], c(a, g.draggable, this.el) && b.push(a.getAttribute(g.dataIdAttr) || o(a));return b;
    }, sort: function (a) {
      var b = {},
          d = this.el;this.toArray().forEach(function (a, e) {
        var f = d.children[e];c(f, this.options.draggable, d) && (b[a] = f);
      }, this), a.forEach(function (a) {
        b[a] && (d.removeChild(b[a]), d.appendChild(b[a]));
      });
    }, save: function () {
      var a = this.options.store;a && a.set(this);
    }, closest: function (a, b) {
      return c(a, b || this.options.draggable, this.el);
    }, option: function (a, b) {
      var c = this.options;return void 0 === b ? c[a] : (c[a] = b, void ("group" === a && V(c)));
    }, destroy: function () {
      var a = this.el;a[L] = null, f(a, "mousedown", this._onTapStart), f(a, "touchstart", this._onTapStart), this.nativeDraggable && (f(a, "dragover", this), f(a, "dragenter", this)), Array.prototype.forEach.call(a.querySelectorAll("[draggable]"), function (a) {
        a.removeAttribute("draggable");
      }), T.splice(T.indexOf(this._onDragOver), 1), this._onDrop(), this.el = a = null;
    } }, a.utils = { on: e, off: f, css: h, find: i, is: function (a, b) {
      return !!c(a, b, a);
    }, extend: r, throttle: q, closest: c, toggleClass: g, index: p }, a.create = function (b, c) {
    return new a(b, c);
  }, a.version = "1.4.2", a;
});

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @author RubaXa <trash@rubaxa.org>
 * @licence MIT
 */
(function (c) {
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6), __webpack_require__(119)], __WEBPACK_AMD_DEFINE_FACTORY__ = (c),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "function" === typeof require && "object" === typeof exports && "object" === typeof module ? (require("angular"), c(angular, require("./Sortable")), module.exports = "ng-sortable") : window.angular && window.Sortable && c(angular, Sortable);
})(function (c, p) {
  c.module("ng-sortable", []).constant("ngSortableVersion", "0.4.0").constant("ngSortableConfig", {}).directive("ngSortable", ["$parse", "ngSortableConfig", function (r, t) {
    var d,
        l,
        u = function (c, d) {
      var b = [].filter.call(c.childNodes, function (c) {
        return 8 === c.nodeType && -1 !== c.nodeValue.indexOf("ngRepeat:");
      })[0];if (!b) return function () {
        return null;
      };var b = b.nodeValue.match(/ngRepeat:\s*(?:\(.*?,\s*)?([^\s)]+)[\s)]+in\s+([^\s|]+)/),
          h = r(b[2]);return function () {
        return h(d.$parent) || [];
      };
    };return { restrict: "AC", scope: { ngSortable: "=?" }, link: function (g, q) {
        function b(a, c) {
          var b = "on" + a.type.charAt(0).toUpperCase() + a.type.substr(1),
              d = m();e[b] && e[b]({ model: c || d[a.newIndex], models: d, oldIndex: a.oldIndex, newIndex: a.newIndex });
        }
        function h(a) {
          var b = m();if (b) {
            var e = a.oldIndex,
                h = a.newIndex;if (k !== a.from) {
              var f = a.from["Sortable:ng-sortable"]();d = f[e];a.clone ? (d = c.copy(d), f.splice(p.utils.index(a.clone), 0, f.splice(e, 1)[0]), a.from.removeChild(a.clone)) : f.splice(e, 1);b.splice(h, 0, d);a.from.insertBefore(a.item, l);
            } else b.splice(h, 0, b.splice(e, 1)[0]);g.$apply();
          }
        }var k = q[0],
            e = c.extend(g.ngSortable || {}, t),
            n = [],
            m = u(k, g),
            f;k["Sortable:ng-sortable"] = m;f = p.create(k, Object.keys(e).reduce(function (a, b) {
          a[b] = a[b] || e[b];return a;
        }, { onStart: function (a) {
            l = a.item.nextSibling;b(a);g.$apply();
          }, onEnd: function (a) {
            b(a, d);g.$apply();
          }, onAdd: function (a) {
            h(a);b(a, d);g.$apply();
          }, onUpdate: function (a) {
            h(a);b(a);
          }, onRemove: function (a) {
            b(a, d);
          }, onSort: function (a) {
            b(a);
          } }));q.on("$destroy", function () {
          c.forEach(n, function (a) {
            a();
          });f.destroy();l = f = n = k = k["Sortable:ng-sortable"] = null;
        });c.forEach("sort disabled draggable handle animation group ghostClass filter onStart onEnd onAdd onUpdate onRemove onSort".split(" "), function (a) {
          n.push(g.$watch("ngSortable." + a, function (b) {
            void 0 !== b && (e[a] = b, /^on[A-Z]/.test(a) || f.option(a, b));
          }));
        });
      } };
  }]);
});

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__fabricWindow__ = __webpack_require__(125);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__fabricWindow___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__fabricWindow__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__fabricDirective__ = __webpack_require__(122);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__fabricDirective___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__fabricDirective__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__fabricCanvas__ = __webpack_require__(120);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__fabricCanvas___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__fabricCanvas__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__fabricConstants__ = __webpack_require__(121);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__fabricConstants___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__fabricConstants__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__fabricDirtyStatus__ = __webpack_require__(123);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__fabricDirtyStatus___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__fabricDirtyStatus__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__fabricUtilities__ = __webpack_require__(124);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__fabricUtilities___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__fabricUtilities__);







angular.module('common.fabric', ['common.fabric.window', 'common.fabric.directive', 'common.fabric.canvas', 'common.fabric.dirtyStatus']).factory('Fabric', ['FabricWindow', '$timeout', '$window', 'FabricCanvas', 'FabricDirtyStatus', function (FabricWindow, $timeout, $window, FabricCanvas, FabricDirtyStatus) {

	return function (options) {

		var canvas;
		var JSONObject;
		var self = angular.extend({
			canvas: null, //NOTE: added by TL
			canvasBackgroundColor: '#ffffff',
			canvasWidth: 300,
			canvasHeight: 300,
			canvasOriginalHeight: 300,
			canvasOriginalWidth: 300,
			maxContinuousRenderLoops: 25,
			continuousRenderTimeDelay: 500,
			editable: true,
			JSONExportProperties: [],
			loading: false,
			dirty: false,
			initialized: false,
			userHasClickedCanvas: false,
			downloadMultipler: 2,
			imageDefaults: {},
			textDefaults: {},
			shapeDefaults: {},
			windowDefaults: {
				transparentCorners: false,
				rotatingPointOffset: 25,
				padding: 0
			},
			canvasDefaults: {
				selection: false
			}
		}, options);

		function capitalize(string) {
			if (typeof string !== 'string') {
				return '';
			}

			return string.charAt(0).toUpperCase() + string.slice(1);
		}

		function getActiveStyle(styleName, object) {
			object = object || canvas.getActiveObject();

			if (typeof object !== 'object' || object === null) {
				return '';
			}

			return object.getSelectionStyles && object.isEditing ? object.getSelectionStyles()[styleName] || '' : object[styleName] || '';
		}

		function setActiveStyle(styleName, value, object) {
			object = object || canvas.getActiveObject();

			if (object.setSelectionStyles && object.isEditing) {
				var style = {};
				style[styleName] = value;
				object.setSelectionStyles(style);
			} else {
				object[styleName] = value;
			}

			self.render();
		}

		function getActiveProp(name) {
			var object = canvas.getActiveObject();

			return typeof object === 'object' && object !== null ? object[name] : '';
		}

		function setActiveProp(name, value) {
			var object = canvas.getActiveObject();
			object.set(name, value);
			self.render();
		}

		function b64toBlob(b64Data, contentType, sliceSize) {
			contentType = contentType || '';
			sliceSize = sliceSize || 512;

			var byteCharacters = atob(b64Data);
			var byteArrays = [];

			for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
				var slice = byteCharacters.slice(offset, offset + sliceSize);

				var byteNumbers = new Array(slice.length);
				for (var i = 0; i < slice.length; i++) {
					byteNumbers[i] = slice.charCodeAt(i);
				}

				var byteArray = new Uint8Array(byteNumbers);

				byteArrays.push(byteArray);
			}

			var blob = new Blob(byteArrays, { type: contentType });
			return blob;
		}

		function isHex(str) {
			return (/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/gi.test(str)
			);
		}

		//
		// Canvas
		// ==============================================================
		self.renderCount = 0;
		self.render = function () {
			var objects = canvas.getObjects();
			for (var i in objects) {
				objects[i].setCoords();
			}

			canvas.calcOffset();
			canvas.renderAll();
			self.renderCount++;
			//console.log('Render cycle:', self.renderCount);
		};

		self.setCanvas = function (newCanvas) {
			canvas = newCanvas;
			canvas.selection = self.canvasDefaults.selection;
		};

		self.setTextDefaults = function (textDefaults) {
			self.textDefaults = textDefaults;
		};

		self.setJSONExportProperties = function (JSONExportProperties) {
			self.JSONExportProperties = JSONExportProperties;
		};

		self.setCanvasBackgroundColor = function (color) {
			self.canvasBackgroundColor = color;
			canvas.setBackgroundColor(color);
			self.render();
		};

		self.setCanvasWidth = function (width) {
			self.canvasWidth = width;
			canvas.setWidth(width);
			self.render();
		};

		self.setCanvasHeight = function (height) {
			self.canvasHeight = height;
			canvas.setHeight(height);
			self.render();
		};

		self.setCanvasSize = function (width, height) {
			self.stopContinuousRendering();
			var initialCanvasScale = self.canvasScale;
			self.resetZoom();

			self.canvasWidth = width;
			self.canvasOriginalWidth = width;
			canvas.originalWidth = width;
			canvas.setWidth(width);

			self.canvasHeight = height;
			self.canvasOriginalHeight = height;
			canvas.originalHeight = height;
			canvas.setHeight(height);

			self.canvasScale = initialCanvasScale;
			self.render();
			self.setZoom();
			self.render();
			self.setZoom();
		};

		self.isLoading = function () {
			return self.isLoading;
		};

		self.deactivateAll = function () {
			canvas.deactivateAll();
			self.deselectActiveObject();
			self.render();
		};

		self.clearCanvas = function () {
			canvas.clear();
			canvas.setBackgroundColor('#ffffff');
			self.render();
		};

		//
		// Creating Objects
		// ==============================================================
		self.addObjectToCanvas = function (object) {
			object.originalScaleX = object.scaleX;
			object.originalScaleY = object.scaleY;
			object.originalLeft = object.left;
			object.originalTop = object.top;

			canvas.add(object);
			self.setObjectZoom(object);
			canvas.setActiveObject(object);
			object.bringToFront();
			self.center();
			self.render();
		};

		//
		// Image
		// ==============================================================
		// TL: I added this method, it is not part of the fabric libary
		// that was downloaded.  'imageOptions' doesn't seem to work
		// this method allows me to add images at a certain width
		self.addImageScaledToWidth = function (imageURL, scaleToWidth) {
			fabric.Image.fromURL(imageURL, function (object) {
				object.id = self.createId();

				for (var p in self.imageOptions) {
					object[p] = self.imageOptions[p];
				}

				object.lockUniScaling = true;

				// Add a filter that can be used to turn the image
				// into a solid colored shape.
				var filter = new fabric.Image.filters.Tint({
					color: '#ffffff',
					opacity: 0
				});
				object.filters.push(filter);
				object.applyFilters(canvas.renderAll.bind(canvas));
				if (scaleToWidth > 0) {
					object.scaleToWidth(scaleToWidth);
				};
				self.addObjectToCanvas(object);
			});
		};

		// TL: I externalized the code to addImageScaledToWidth... see above
		self.addImage = function (imageURL) {
			self.addImageScaledToWidth(imageURL, -1);
		};

		//
		// Shape
		// ==============================================================
		self.addShape = function (svgURL) {
			fabric.loadSVGFromURL(svgURL, function (objects) {
				var object = fabric.util.groupSVGElements(objects, self.shapeDefaults);
				object.id = self.createId();

				for (var p in self.shapeDefaults) {
					object[p] = self.shapeDefaults[p];
				}

				if (object.isSameColor && object.isSameColor() || !object.paths) {
					object.setFill('#0088cc');
				} else if (object.paths) {
					for (var i = 0; i < object.paths.length; i++) {
						object.paths[i].setFill('#0088cc');
					}
				}

				self.addObjectToCanvas(object);
			});
		};

		//
		// Text
		// ==============================================================
		self.addText = function (str) {
			str = str || 'New Text';
			var object = new FabricWindow.Text(str, self.textDefaults);
			object.id = self.createId();

			self.addObjectToCanvas(object);
		};

		self.getText = function () {
			return getActiveProp('text');
		};

		self.setText = function (value) {
			setActiveProp('text', value);
		};

		//
		// Font Size
		// ==============================================================
		self.getFontSize = function () {
			return getActiveStyle('fontSize');
		};

		self.setFontSize = function (value) {
			setActiveStyle('fontSize', parseInt(value, 10));
			self.render();
		};

		//
		// Text Align
		// ==============================================================
		self.getTextAlign = function () {
			return capitalize(getActiveProp('textAlign'));
		};

		self.setTextAlign = function (value) {
			setActiveProp('textAlign', value.toLowerCase());
		};

		//
		// Font Family
		// ==============================================================
		self.getFontFamily = function () {
			var fontFamily = getActiveProp('fontFamily');
			return fontFamily ? fontFamily.toLowerCase() : '';
		};

		self.setFontFamily = function (value) {
			setActiveProp('fontFamily', value.toLowerCase());
		};

		//
		// Lineheight
		// ==============================================================
		self.getLineHeight = function () {
			return getActiveStyle('lineHeight');
		};

		self.setLineHeight = function (value) {
			setActiveStyle('lineHeight', parseFloat(value, 10));
			self.render();
		};

		//
		// Bold
		// ==============================================================
		self.isBold = function () {
			return getActiveStyle('fontWeight') === 'bold';
		};

		self.toggleBold = function () {
			setActiveStyle('fontWeight', getActiveStyle('fontWeight') === 'bold' ? '' : 'bold');
			self.render();
		};

		//
		// Italic
		// ==============================================================
		self.isItalic = function () {
			return getActiveStyle('fontStyle') === 'italic';
		};

		self.toggleItalic = function () {
			setActiveStyle('fontStyle', getActiveStyle('fontStyle') === 'italic' ? '' : 'italic');
			self.render();
		};

		//
		// Underline
		// ==============================================================
		self.isUnderline = function () {
			return getActiveStyle('textDecoration').indexOf('underline') > -1;
		};

		self.toggleUnderline = function () {
			var value = self.isUnderline() ? getActiveStyle('textDecoration').replace('underline', '') : getActiveStyle('textDecoration') + ' underline';

			setActiveStyle('textDecoration', value);
			self.render();
		};

		//
		// Linethrough
		// ==============================================================
		self.isLinethrough = function () {
			return getActiveStyle('textDecoration').indexOf('line-through') > -1;
		};

		self.toggleLinethrough = function () {
			var value = self.isLinethrough() ? getActiveStyle('textDecoration').replace('line-through', '') : getActiveStyle('textDecoration') + ' line-through';

			setActiveStyle('textDecoration', value);
			self.render();
		};

		//
		// Text Align
		// ==============================================================
		self.getTextAlign = function () {
			return getActiveProp('textAlign');
		};

		self.setTextAlign = function (value) {
			setActiveProp('textAlign', value);
		};

		//
		// Opacity
		// ==============================================================
		self.getOpacity = function () {
			return getActiveStyle('opacity');
		};

		self.setOpacity = function (value) {
			setActiveStyle('opacity', value);
		};

		//
		// FlipX
		// ==============================================================
		self.getFlipX = function () {
			return getActiveProp('flipX');
		};

		self.setFlipX = function (value) {
			setActiveProp('flipX', value);
		};

		self.toggleFlipX = function () {
			var value = self.getFlipX() ? false : true;
			self.setFlipX(value);
			self.render();
		};

		//
		// Align Active Object
		// ==============================================================
		self.center = function () {
			var activeObject = canvas.getActiveObject();
			if (activeObject) {
				activeObject.center();
				self.updateActiveObjectOriginals();
				self.render();
			}
		};

		self.centerH = function () {
			var activeObject = canvas.getActiveObject();
			if (activeObject) {
				activeObject.centerH();
				self.updateActiveObjectOriginals();
				self.render();
			}
		};

		self.centerV = function () {
			var activeObject = canvas.getActiveObject();
			if (activeObject) {
				activeObject.centerV();
				self.updateActiveObjectOriginals();
				self.render();
			}
		};

		//
		// Active Object Layer Position
		// ==============================================================
		self.sendBackwards = function () {
			var activeObject = canvas.getActiveObject();
			if (activeObject) {
				canvas.sendBackwards(activeObject);
				self.render();
			}
		};

		self.sendToBack = function () {
			var activeObject = canvas.getActiveObject();
			if (activeObject) {
				canvas.sendToBack(activeObject);
				self.render();
			}
		};

		self.bringForward = function () {
			var activeObject = canvas.getActiveObject();
			if (activeObject) {
				canvas.bringForward(activeObject);
				self.render();
			}
		};

		self.bringToFront = function () {
			var activeObject = canvas.getActiveObject();
			if (activeObject) {
				canvas.bringToFront(activeObject);
				self.render();
			}
		};

		//
		// Active Object Tint Color
		// ==============================================================
		self.isTinted = function () {
			return getActiveProp('isTinted');
		};

		self.toggleTint = function () {
			var activeObject = canvas.getActiveObject();
			activeObject.isTinted = !activeObject.isTinted;
			activeObject.filters[0].opacity = activeObject.isTinted ? 1 : 0;
			activeObject.applyFilters(canvas.renderAll.bind(canvas));
		};

		self.getTint = function () {
			var object = canvas.getActiveObject();

			if (typeof object !== 'object' || object === null) {
				return '';
			}

			if (object.filters !== undefined) {
				if (object.filters[0] !== undefined) {
					return object.filters[0].color;
				}
			}
		};

		self.setTint = function (tint) {
			if (!isHex(tint)) {
				return;
			}

			var activeObject = canvas.getActiveObject();
			if (activeObject.filters !== undefined) {
				if (activeObject.filters[0] !== undefined) {
					activeObject.filters[0].color = tint;
					activeObject.applyFilters(canvas.renderAll.bind(canvas));
				}
			}
		};

		//
		// Active Object Fill Color
		// ==============================================================
		self.getFill = function () {
			return getActiveStyle('fill');
		};

		self.setFill = function (value) {
			var object = canvas.getActiveObject();
			if (object) {
				if (object.type === 'text') {
					setActiveStyle('fill', value);
				} else {
					self.setFillPath(object, value);
				}
			}
		};

		self.setFillPath = function (object, value) {
			if (object.isSameColor && object.isSameColor() || !object.paths) {
				object.setFill(value);
			} else if (object.paths) {
				for (var i = 0; i < object.paths.length; i++) {
					object.paths[i].setFill(value);
				}
			}
		};

		//
		// Canvas Zoom
		// ==============================================================
		self.resetZoom = function () {
			self.canvasScale = 1;
			self.setZoom();
		};

		self.setZoom = function () {
			var objects = canvas.getObjects();
			for (var i in objects) {
				objects[i].originalScaleX = objects[i].originalScaleX ? objects[i].originalScaleX : objects[i].scaleX;
				objects[i].originalScaleY = objects[i].originalScaleY ? objects[i].originalScaleY : objects[i].scaleY;
				objects[i].originalLeft = objects[i].originalLeft ? objects[i].originalLeft : objects[i].left;
				objects[i].originalTop = objects[i].originalTop ? objects[i].originalTop : objects[i].top;
				self.setObjectZoom(objects[i]);
			}

			self.setCanvasZoom();
			self.render();
		};

		self.setObjectZoom = function (object) {
			var scaleX = object.originalScaleX;
			var scaleY = object.originalScaleY;
			var left = object.originalLeft;
			var top = object.originalTop;

			var tempScaleX = scaleX * self.canvasScale;
			var tempScaleY = scaleY * self.canvasScale;
			var tempLeft = left * self.canvasScale;
			var tempTop = top * self.canvasScale;

			object.scaleX = tempScaleX;
			object.scaleY = tempScaleY;
			object.left = tempLeft;
			object.top = tempTop;

			object.setCoords();
		};

		self.setCanvasZoom = function () {
			var width = self.canvasOriginalWidth;
			var height = self.canvasOriginalHeight;

			var tempWidth = width * self.canvasScale;
			var tempHeight = height * self.canvasScale;

			canvas.setWidth(tempWidth);
			canvas.setHeight(tempHeight);
		};

		self.updateActiveObjectOriginals = function () {
			var object = canvas.getActiveObject();
			if (object) {
				object.originalScaleX = object.scaleX / self.canvasScale;
				object.originalScaleY = object.scaleY / self.canvasScale;
				object.originalLeft = object.left / self.canvasScale;
				object.originalTop = object.top / self.canvasScale;
			}
		};

		//
		// Active Object Lock
		// ==============================================================
		self.toggleLockActiveObject = function () {
			var activeObject = canvas.getActiveObject();
			if (activeObject) {
				activeObject.lockMovementX = !activeObject.lockMovementX;
				activeObject.lockMovementY = !activeObject.lockMovementY;
				activeObject.lockScalingX = !activeObject.lockScalingX;
				activeObject.lockScalingY = !activeObject.lockScalingY;
				activeObject.lockUniScaling = !activeObject.lockUniScaling;
				activeObject.lockRotation = !activeObject.lockRotation;
				activeObject.lockObject = !activeObject.lockObject;
				self.render();
			}
		};

		//
		// Active Object
		// ==============================================================
		self.selectActiveObject = function () {
			var activeObject = canvas.getActiveObject();
			if (!activeObject) {
				return;
			}

			self.selectedObject = activeObject;
			self.selectedObject.text = self.getText();
			self.selectedObject.fontSize = self.getFontSize();
			self.selectedObject.lineHeight = self.getLineHeight();
			self.selectedObject.textAlign = self.getTextAlign();
			self.selectedObject.opacity = self.getOpacity();
			self.selectedObject.fontFamily = self.getFontFamily();
			self.selectedObject.fill = self.getFill();
			self.selectedObject.tint = self.getTint();
		};

		self.deselectActiveObject = function () {
			self.selectedObject = false;
		};

		self.deleteActiveObject = function () {
			var activeObject = canvas.getActiveObject();
			canvas.remove(activeObject);
			self.render();
		};

		//
		// State Managers
		// ==============================================================
		self.isLoading = function () {
			return self.loading;
		};

		self.setLoading = function (value) {
			self.loading = value;
		};

		self.setDirty = function (value) {
			FabricDirtyStatus.setDirty(value);
		};

		self.isDirty = function () {
			return FabricDirtyStatus.isDirty();
		};

		self.setInitalized = function (value) {
			self.initialized = value;
		};

		self.isInitalized = function () {
			return self.initialized;
		};

		//
		// JSON
		// ==============================================================
		self.getJSON = function () {
			var initialCanvasScale = self.canvasScale;
			self.canvasScale = 1;
			self.resetZoom();

			var json = JSON.stringify(canvas.toJSON(self.JSONExportProperties));

			self.canvasScale = initialCanvasScale;
			self.setZoom();

			return json;
		};

		self.loadJSON = function (json) {
			self.setLoading(true);
			canvas.loadFromJSON(json, function () {
				$timeout(function () {
					self.setLoading(false);

					if (!self.editable) {
						self.disableEditing();
					}

					self.render();
				});
			});
		};

		//
		// Download Canvas
		// ==============================================================
		self.getCanvasData = function () {
			var data = canvas.toDataURL({
				width: canvas.getWidth(),
				height: canvas.getHeight(),
				multiplier: self.downloadMultipler
			});

			return data;
		};

		self.getCanvasBlob = function () {
			var base64Data = self.getCanvasData();
			var data = base64Data.replace('data:image/png;base64,', '');
			var blob = b64toBlob(data, 'image/png');
			var blobUrl = URL.createObjectURL(blob);

			return blobUrl;
		};

		self.download = function (name) {
			// Stops active object outline from showing in image
			self.deactivateAll();

			var initialCanvasScale = self.canvasScale;
			self.resetZoom();

			// Click an artifical anchor to 'force' download.
			var link = document.createElement('a');
			var filename = name + '.png';
			link.download = filename;
			link.href = self.getCanvasBlob();
			link.click();

			self.canvasScale = initialCanvasScale;
			self.setZoom();
		};

		//
		// Continuous Rendering
		// ==============================================================
		// Upon initialization re render the canvas
		// to account for fonts loaded from CDN's
		// or other lazy loaded items.

		// Prevent infinite rendering loop
		self.continuousRenderCounter = 0;
		self.continuousRenderHandle;

		self.stopContinuousRendering = function () {
			$timeout.cancel(self.continuousRenderHandle);
			self.continuousRenderCounter = self.maxContinuousRenderLoops;
		};

		self.startContinuousRendering = function () {
			self.continuousRenderCounter = 0;
			self.continuousRender();
		};

		// Prevents the "not fully rendered up upon init for a few seconds" bug.
		self.continuousRender = function () {
			if (self.userHasClickedCanvas || self.continuousRenderCounter > self.maxContinuousRenderLoops) {
				return;
			}

			self.continuousRenderHandle = $timeout(function () {
				self.setZoom();
				self.render();
				self.continuousRenderCounter++;
				self.continuousRender();
			}, self.continuousRenderTimeDelay);
		};

		//
		// Utility
		// ==============================================================
		self.setUserHasClickedCanvas = function (value) {
			self.userHasClickedCanvas = value;
		};

		self.createId = function () {
			return Math.floor(Math.random() * 10000);
		};

		//
		// Toggle Object Selectability
		// ==============================================================
		self.disableEditing = function () {
			canvas.selection = false;
			canvas.forEachObject(function (object) {
				object.selectable = false;
			});
		};

		self.enableEditing = function () {
			canvas.selection = true;
			canvas.forEachObject(function (object) {
				object.selectable = true;
			});
		};

		//
		// Set Global Defaults
		// ==============================================================
		self.setCanvasDefaults = function () {
			canvas.selection = self.canvasDefaults.selection;
		};

		self.setWindowDefaults = function () {
			FabricWindow.Object.prototype.transparentCorners = self.windowDefaults.transparentCorners;
			FabricWindow.Object.prototype.rotatingPointOffset = self.windowDefaults.rotatingPointOffset;
			FabricWindow.Object.prototype.padding = self.windowDefaults.padding;
		};

		//
		// Canvas Listeners
		// ============================================================
		self.startCanvasListeners = function () {
			canvas.on('object:selected', function () {
				self.stopContinuousRendering();
				$timeout(function () {
					self.selectActiveObject();
					self.setDirty(true);
				});
			});

			canvas.on('selection:created', function () {
				self.stopContinuousRendering();
			});

			canvas.on('selection:cleared', function () {
				$timeout(function () {
					self.deselectActiveObject();
				});
			});

			canvas.on('after:render', function () {
				canvas.calcOffset();
			});

			canvas.on('object:modified', function () {
				self.stopContinuousRendering();
				$timeout(function () {
					self.updateActiveObjectOriginals();
					self.setDirty(true);
				});
			});
		};

		//
		// Constructor
		// ==============================================================
		self.init = function () {
			canvas = FabricCanvas.getCanvas();
			self.canvasId = FabricCanvas.getCanvasId();
			self.canvas = canvas; // NOTE: added by TL
			canvas.clear();

			// For easily accessing the json
			JSONObject = angular.fromJson(self.json);
			self.loadJSON(self.json);

			JSONObject = JSONObject || {};

			self.canvasScale = 1;

			JSONObject.background = JSONObject.background || '#ffffff';
			self.setCanvasBackgroundColor(JSONObject.background);

			// Set the size of the canvas
			JSONObject.width = JSONObject.width || 300;
			self.canvasOriginalWidth = JSONObject.width;

			JSONObject.height = JSONObject.height || 300;
			self.canvasOriginalHeight = JSONObject.height;

			self.setCanvasSize(self.canvasOriginalWidth, self.canvasOriginalHeight);

			self.render();
			self.setDirty(false);
			self.setInitalized(true);

			self.setCanvasDefaults();
			self.setWindowDefaults();
			self.startCanvasListeners();
			self.startContinuousRendering();
			FabricDirtyStatus.startListening();
		};

		self.init();

		return self;
	};
}]);

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (l) {
  var k = function (g) {
    var h = g.module("FBAngular", []);h.factory("Fullscreen", ["$document", "$rootScope", function (c, d) {
      var a = c[0],
          e = "undefined" !== typeof Element && "ALLOW_KEYBOARD_INPUT" in Element && Element.ALLOW_KEYBOARD_INPUT,
          f = d.$new();c.on("fullscreenchange webkitfullscreenchange mozfullscreenchange MSFullscreenChange", function () {
        f.$emit("FBFullscreen.change", b.isEnabled());
      });var b = { $on: g.bind(f, f.$on), all: function () {
          b.enable(a.documentElement);
        }, enable: function (a) {
          a.requestFullScreen ? a.requestFullScreen() : a.mozRequestFullScreen ? a.mozRequestFullScreen() : a.webkitRequestFullscreen ? /Version\/[\d]{1,2}(\.[\d]{1,2}){1}(\.(\d){1,2}){0,1} Safari/.test(navigator.userAgent) ? a.webkitRequestFullscreen() : a.webkitRequestFullscreen(e) : a.msRequestFullscreen && a.msRequestFullscreen();
        }, cancel: function () {
          a.cancelFullScreen ? a.cancelFullScreen() : a.mozCancelFullScreen ? a.mozCancelFullScreen() : a.webkitExitFullscreen ? a.webkitExitFullscreen() : a.msExitFullscreen && a.msExitFullscreen();
        }, isEnabled: function () {
          return a.fullscreenElement || a.mozFullScreenElement || a.webkitFullscreenElement || a.msFullscreenElement ? !0 : !1;
        }, toggleAll: function () {
          b.isEnabled() ? b.cancel() : b.all();
        }, isSupported: function () {
          var b = a.documentElement;return b.requestFullScreen || b.mozRequestFullScreen || b.webkitRequestFullscreen || b.msRequestFullscreen ? !0 : !1;
        } };return b;
    }]);h.directive("fullscreen", ["Fullscreen", function (c) {
      return { link: function (d, a, e) {
          if (e.fullscreen) {
            d.$watch(e.fullscreen, function (b) {
              var d = c.isEnabled();b && !d ? (c.enable(a[0]), a.addClass("isInFullScreen")) : !b && d && (c.cancel(), a.removeClass("isInFullScreen"));
            });var f = c.$on("FBFullscreen.change", function (b, c) {
              c || d.$evalAsync(function () {
                d.$eval(e.fullscreen + "= false");a.removeClass("isInFullScreen");
              });
            });d.$on("$destroy", function () {
              f();
            });
          } else if (void 0 === e.onlyWatchedProperty) a.on("click", function (b) {
            c.enable(a[0]);
          });
        } };
    }]);return h;
  }; true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (g) {
    return k(g);
  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : k(l.angular);
})(window);

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


angular.module('markdown', []).provider('markdown', [function () {
  var opts = {};
  return {
    config: function (newOpts) {
      opts = newOpts;
    },
    $get: function () {
      var constructor = window.markdownit || markdownit;
      if (angular.isFunction(constructor)) {
        return new constructor();
      }
      console.log('markdownit not found');
    }
  };
}]).filter('markdown', ['markdown', function (markdown) {
  return function (text) {
    if (typeof text == 'string') {
      return markdown.render(text || '');
    } else {
      return text;
    }
  };
}]);

/***/ }),
/* 33 */
/***/ (function(module, exports) {

/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 0.12.1 - 2015-02-20
 * License: MIT
 */
angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.transition", "ui.bootstrap.collapse", "ui.bootstrap.accordion", "ui.bootstrap.alert", "ui.bootstrap.bindHtml", "ui.bootstrap.buttons", "ui.bootstrap.carousel", "ui.bootstrap.dateparser", "ui.bootstrap.position", "ui.bootstrap.datepicker", "ui.bootstrap.dropdown", "ui.bootstrap.modal", "ui.bootstrap.pagination", "ui.bootstrap.tooltip", "ui.bootstrap.popover", "ui.bootstrap.progressbar", "ui.bootstrap.rating", "ui.bootstrap.tabs", "ui.bootstrap.timepicker", "ui.bootstrap.typeahead"]), angular.module("ui.bootstrap.tpls", ["template/accordion/accordion-group.html", "template/accordion/accordion.html", "template/alert/alert.html", "template/carousel/carousel.html", "template/carousel/slide.html", "template/datepicker/datepicker.html", "template/datepicker/day.html", "template/datepicker/month.html", "template/datepicker/popup.html", "template/datepicker/year.html", "template/modal/backdrop.html", "template/modal/window.html", "template/pagination/pager.html", "template/pagination/pagination.html", "template/tooltip/tooltip-html-unsafe-popup.html", "template/tooltip/tooltip-popup.html", "template/popover/popover.html", "template/progressbar/bar.html", "template/progressbar/progress.html", "template/progressbar/progressbar.html", "template/rating/rating.html", "template/tabs/tab.html", "template/tabs/tabset.html", "template/timepicker/timepicker.html", "template/typeahead/typeahead-match.html", "template/typeahead/typeahead-popup.html"]), angular.module("ui.bootstrap.transition", []).factory("$transition", ["$q", "$timeout", "$rootScope", function (a, b, c) {
  function d(a) {
    for (var b in a) if (void 0 !== f.style[b]) return a[b];
  }var e = function (d, f, g) {
    g = g || {};var h = a.defer(),
        i = e[g.animation ? "animationEndEventName" : "transitionEndEventName"],
        j = function () {
      c.$apply(function () {
        d.unbind(i, j), h.resolve(d);
      });
    };return i && d.bind(i, j), b(function () {
      angular.isString(f) ? d.addClass(f) : angular.isFunction(f) ? f(d) : angular.isObject(f) && d.css(f), i || h.resolve(d);
    }), h.promise.cancel = function () {
      i && d.unbind(i, j), h.reject("Transition cancelled");
    }, h.promise;
  },
      f = document.createElement("trans"),
      g = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd", transition: "transitionend" },
      h = { WebkitTransition: "webkitAnimationEnd", MozTransition: "animationend", OTransition: "oAnimationEnd", transition: "animationend" };return e.transitionEndEventName = d(g), e.animationEndEventName = d(h), e;
}]), angular.module("ui.bootstrap.collapse", ["ui.bootstrap.transition"]).directive("collapse", ["$transition", function (a) {
  return { link: function (b, c, d) {
      function e(b) {
        function d() {
          j === e && (j = void 0);
        }var e = a(c, b);return j && j.cancel(), j = e, e.then(d, d), e;
      }function f() {
        k ? (k = !1, g()) : (c.removeClass("collapse").addClass("collapsing"), e({ height: c[0].scrollHeight + "px" }).then(g));
      }function g() {
        c.removeClass("collapsing"), c.addClass("collapse in"), c.css({ height: "auto" });
      }function h() {
        if (k) k = !1, i(), c.css({ height: 0 });else {
          c.css({ height: c[0].scrollHeight + "px" });{
            c[0].offsetWidth;
          }c.removeClass("collapse in").addClass("collapsing"), e({ height: 0 }).then(i);
        }
      }function i() {
        c.removeClass("collapsing"), c.addClass("collapse");
      }var j,
          k = !0;b.$watch(d.collapse, function (a) {
        a ? h() : f();
      });
    } };
}]), angular.module("ui.bootstrap.accordion", ["ui.bootstrap.collapse"]).constant("accordionConfig", { closeOthers: !0 }).controller("AccordionController", ["$scope", "$attrs", "accordionConfig", function (a, b, c) {
  this.groups = [], this.closeOthers = function (d) {
    var e = angular.isDefined(b.closeOthers) ? a.$eval(b.closeOthers) : c.closeOthers;e && angular.forEach(this.groups, function (a) {
      a !== d && (a.isOpen = !1);
    });
  }, this.addGroup = function (a) {
    var b = this;this.groups.push(a), a.$on("$destroy", function () {
      b.removeGroup(a);
    });
  }, this.removeGroup = function (a) {
    var b = this.groups.indexOf(a);-1 !== b && this.groups.splice(b, 1);
  };
}]).directive("accordion", function () {
  return { restrict: "EA", controller: "AccordionController", transclude: !0, replace: !1, templateUrl: "template/accordion/accordion.html" };
}).directive("accordionGroup", function () {
  return { require: "^accordion", restrict: "EA", transclude: !0, replace: !0, templateUrl: "template/accordion/accordion-group.html", scope: { heading: "@", isOpen: "=?", isDisabled: "=?" }, controller: function () {
      this.setHeading = function (a) {
        this.heading = a;
      };
    }, link: function (a, b, c, d) {
      d.addGroup(a), a.$watch("isOpen", function (b) {
        b && d.closeOthers(a);
      }), a.toggleOpen = function () {
        a.isDisabled || (a.isOpen = !a.isOpen);
      };
    } };
}).directive("accordionHeading", function () {
  return { restrict: "EA", transclude: !0, template: "", replace: !0, require: "^accordionGroup", link: function (a, b, c, d, e) {
      d.setHeading(e(a, function () {}));
    } };
}).directive("accordionTransclude", function () {
  return { require: "^accordionGroup", link: function (a, b, c, d) {
      a.$watch(function () {
        return d[c.accordionTransclude];
      }, function (a) {
        a && (b.html(""), b.append(a));
      });
    } };
}), angular.module("ui.bootstrap.alert", []).controller("AlertController", ["$scope", "$attrs", function (a, b) {
  a.closeable = "close" in b, this.close = a.close;
}]).directive("alert", function () {
  return { restrict: "EA", controller: "AlertController", templateUrl: "template/alert/alert.html", transclude: !0, replace: !0, scope: { type: "@", close: "&" } };
}).directive("dismissOnTimeout", ["$timeout", function (a) {
  return { require: "alert", link: function (b, c, d, e) {
      a(function () {
        e.close();
      }, parseInt(d.dismissOnTimeout, 10));
    } };
}]), angular.module("ui.bootstrap.bindHtml", []).directive("bindHtmlUnsafe", function () {
  return function (a, b, c) {
    b.addClass("ng-binding").data("$binding", c.bindHtmlUnsafe), a.$watch(c.bindHtmlUnsafe, function (a) {
      b.html(a || "");
    });
  };
}), angular.module("ui.bootstrap.buttons", []).constant("buttonConfig", { activeClass: "active", toggleEvent: "click" }).controller("ButtonsController", ["buttonConfig", function (a) {
  this.activeClass = a.activeClass || "active", this.toggleEvent = a.toggleEvent || "click";
}]).directive("btnRadio", function () {
  return { require: ["btnRadio", "ngModel"], controller: "ButtonsController", link: function (a, b, c, d) {
      var e = d[0],
          f = d[1];f.$render = function () {
        b.toggleClass(e.activeClass, angular.equals(f.$modelValue, a.$eval(c.btnRadio)));
      }, b.bind(e.toggleEvent, function () {
        var d = b.hasClass(e.activeClass);(!d || angular.isDefined(c.uncheckable)) && a.$apply(function () {
          f.$setViewValue(d ? null : a.$eval(c.btnRadio)), f.$render();
        });
      });
    } };
}).directive("btnCheckbox", function () {
  return { require: ["btnCheckbox", "ngModel"], controller: "ButtonsController", link: function (a, b, c, d) {
      function e() {
        return g(c.btnCheckboxTrue, !0);
      }function f() {
        return g(c.btnCheckboxFalse, !1);
      }function g(b, c) {
        var d = a.$eval(b);return angular.isDefined(d) ? d : c;
      }var h = d[0],
          i = d[1];i.$render = function () {
        b.toggleClass(h.activeClass, angular.equals(i.$modelValue, e()));
      }, b.bind(h.toggleEvent, function () {
        a.$apply(function () {
          i.$setViewValue(b.hasClass(h.activeClass) ? f() : e()), i.$render();
        });
      });
    } };
}), angular.module("ui.bootstrap.carousel", ["ui.bootstrap.transition"]).controller("CarouselController", ["$scope", "$timeout", "$interval", "$transition", function (a, b, c, d) {
  function e() {
    f();var b = +a.interval;!isNaN(b) && b > 0 && (h = c(g, b));
  }function f() {
    h && (c.cancel(h), h = null);
  }function g() {
    var b = +a.interval;i && !isNaN(b) && b > 0 ? a.next() : a.pause();
  }var h,
      i,
      j = this,
      k = j.slides = a.slides = [],
      l = -1;j.currentSlide = null;var m = !1;j.select = a.select = function (c, f) {
    function g() {
      if (!m) {
        if (j.currentSlide && angular.isString(f) && !a.noTransition && c.$element) {
          c.$element.addClass(f);{
            c.$element[0].offsetWidth;
          }angular.forEach(k, function (a) {
            angular.extend(a, { direction: "", entering: !1, leaving: !1, active: !1 });
          }), angular.extend(c, { direction: f, active: !0, entering: !0 }), angular.extend(j.currentSlide || {}, { direction: f, leaving: !0 }), a.$currentTransition = d(c.$element, {}), function (b, c) {
            a.$currentTransition.then(function () {
              h(b, c);
            }, function () {
              h(b, c);
            });
          }(c, j.currentSlide);
        } else h(c, j.currentSlide);j.currentSlide = c, l = i, e();
      }
    }function h(b, c) {
      angular.extend(b, { direction: "", active: !0, leaving: !1, entering: !1 }), angular.extend(c || {}, { direction: "", active: !1, leaving: !1, entering: !1 }), a.$currentTransition = null;
    }var i = k.indexOf(c);void 0 === f && (f = i > l ? "next" : "prev"), c && c !== j.currentSlide && (a.$currentTransition ? (a.$currentTransition.cancel(), b(g)) : g());
  }, a.$on("$destroy", function () {
    m = !0;
  }), j.indexOfSlide = function (a) {
    return k.indexOf(a);
  }, a.next = function () {
    var b = (l + 1) % k.length;return a.$currentTransition ? void 0 : j.select(k[b], "next");
  }, a.prev = function () {
    var b = 0 > l - 1 ? k.length - 1 : l - 1;return a.$currentTransition ? void 0 : j.select(k[b], "prev");
  }, a.isActive = function (a) {
    return j.currentSlide === a;
  }, a.$watch("interval", e), a.$on("$destroy", f), a.play = function () {
    i || (i = !0, e());
  }, a.pause = function () {
    a.noPause || (i = !1, f());
  }, j.addSlide = function (b, c) {
    b.$element = c, k.push(b), 1 === k.length || b.active ? (j.select(k[k.length - 1]), 1 == k.length && a.play()) : b.active = !1;
  }, j.removeSlide = function (a) {
    var b = k.indexOf(a);k.splice(b, 1), k.length > 0 && a.active ? j.select(b >= k.length ? k[b - 1] : k[b]) : l > b && l--;
  };
}]).directive("carousel", [function () {
  return { restrict: "EA", transclude: !0, replace: !0, controller: "CarouselController", require: "carousel", templateUrl: "template/carousel/carousel.html", scope: { interval: "=", noTransition: "=", noPause: "=" } };
}]).directive("slide", function () {
  return { require: "^carousel", restrict: "EA", transclude: !0, replace: !0, templateUrl: "template/carousel/slide.html", scope: { active: "=?" }, link: function (a, b, c, d) {
      d.addSlide(a, b), a.$on("$destroy", function () {
        d.removeSlide(a);
      }), a.$watch("active", function (b) {
        b && d.select(a);
      });
    } };
}), angular.module("ui.bootstrap.dateparser", []).service("dateParser", ["$locale", "orderByFilter", function (a, b) {
  function c(a) {
    var c = [],
        d = a.split("");return angular.forEach(e, function (b, e) {
      var f = a.indexOf(e);if (f > -1) {
        a = a.split(""), d[f] = "(" + b.regex + ")", a[f] = "$";for (var g = f + 1, h = f + e.length; h > g; g++) d[g] = "", a[g] = "$";a = a.join(""), c.push({ index: f, apply: b.apply });
      }
    }), { regex: new RegExp("^" + d.join("") + "$"), map: b(c, "index") };
  }function d(a, b, c) {
    return 1 === b && c > 28 ? 29 === c && (a % 4 === 0 && a % 100 !== 0 || a % 400 === 0) : 3 === b || 5 === b || 8 === b || 10 === b ? 31 > c : !0;
  }this.parsers = {};var e = { yyyy: { regex: "\\d{4}", apply: function (a) {
        this.year = +a;
      } }, yy: { regex: "\\d{2}", apply: function (a) {
        this.year = +a + 2e3;
      } }, y: { regex: "\\d{1,4}", apply: function (a) {
        this.year = +a;
      } }, MMMM: { regex: a.DATETIME_FORMATS.MONTH.join("|"), apply: function (b) {
        this.month = a.DATETIME_FORMATS.MONTH.indexOf(b);
      } }, MMM: { regex: a.DATETIME_FORMATS.SHORTMONTH.join("|"), apply: function (b) {
        this.month = a.DATETIME_FORMATS.SHORTMONTH.indexOf(b);
      } }, MM: { regex: "0[1-9]|1[0-2]", apply: function (a) {
        this.month = a - 1;
      } }, M: { regex: "[1-9]|1[0-2]", apply: function (a) {
        this.month = a - 1;
      } }, dd: { regex: "[0-2][0-9]{1}|3[0-1]{1}", apply: function (a) {
        this.date = +a;
      } }, d: { regex: "[1-2]?[0-9]{1}|3[0-1]{1}", apply: function (a) {
        this.date = +a;
      } }, EEEE: { regex: a.DATETIME_FORMATS.DAY.join("|") }, EEE: { regex: a.DATETIME_FORMATS.SHORTDAY.join("|") } };this.parse = function (b, e) {
    if (!angular.isString(b) || !e) return b;e = a.DATETIME_FORMATS[e] || e, this.parsers[e] || (this.parsers[e] = c(e));var f = this.parsers[e],
        g = f.regex,
        h = f.map,
        i = b.match(g);if (i && i.length) {
      for (var j, k = { year: 1900, month: 0, date: 1, hours: 0 }, l = 1, m = i.length; m > l; l++) {
        var n = h[l - 1];n.apply && n.apply.call(k, i[l]);
      }return d(k.year, k.month, k.date) && (j = new Date(k.year, k.month, k.date, k.hours)), j;
    }
  };
}]), angular.module("ui.bootstrap.position", []).factory("$position", ["$document", "$window", function (a, b) {
  function c(a, c) {
    return a.currentStyle ? a.currentStyle[c] : b.getComputedStyle ? b.getComputedStyle(a)[c] : a.style[c];
  }function d(a) {
    return "static" === (c(a, "position") || "static");
  }var e = function (b) {
    for (var c = a[0], e = b.offsetParent || c; e && e !== c && d(e);) e = e.offsetParent;return e || c;
  };return { position: function (b) {
      var c = this.offset(b),
          d = { top: 0, left: 0 },
          f = e(b[0]);f != a[0] && (d = this.offset(angular.element(f)), d.top += f.clientTop - f.scrollTop, d.left += f.clientLeft - f.scrollLeft);var g = b[0].getBoundingClientRect();return { width: g.width || b.prop("offsetWidth"), height: g.height || b.prop("offsetHeight"), top: c.top - d.top, left: c.left - d.left };
    }, offset: function (c) {
      var d = c[0].getBoundingClientRect();return { width: d.width || c.prop("offsetWidth"), height: d.height || c.prop("offsetHeight"), top: d.top + (b.pageYOffset || a[0].documentElement.scrollTop), left: d.left + (b.pageXOffset || a[0].documentElement.scrollLeft) };
    }, positionElements: function (a, b, c, d) {
      var e,
          f,
          g,
          h,
          i = c.split("-"),
          j = i[0],
          k = i[1] || "center";e = d ? this.offset(a) : this.position(a), f = b.prop("offsetWidth"), g = b.prop("offsetHeight");var l = { center: function () {
          return e.left + e.width / 2 - f / 2;
        }, left: function () {
          return e.left;
        }, right: function () {
          return e.left + e.width;
        } },
          m = { center: function () {
          return e.top + e.height / 2 - g / 2;
        }, top: function () {
          return e.top;
        }, bottom: function () {
          return e.top + e.height;
        } };switch (j) {case "right":
          h = { top: m[k](), left: l[j]() };break;case "left":
          h = { top: m[k](), left: e.left - f };break;case "bottom":
          h = { top: m[j](), left: l[k]() };break;default:
          h = { top: e.top - g, left: l[k]() };}return h;
    } };
}]), angular.module("ui.bootstrap.datepicker", ["ui.bootstrap.dateparser", "ui.bootstrap.position"]).constant("datepickerConfig", { formatDay: "dd", formatMonth: "MMMM", formatYear: "yyyy", formatDayHeader: "EEE", formatDayTitle: "MMMM yyyy", formatMonthTitle: "yyyy", datepickerMode: "day", minMode: "day", maxMode: "year", showWeeks: !0, startingDay: 0, yearRange: 20, minDate: null, maxDate: null }).controller("DatepickerController", ["$scope", "$attrs", "$parse", "$interpolate", "$timeout", "$log", "dateFilter", "datepickerConfig", function (a, b, c, d, e, f, g, h) {
  var i = this,
      j = { $setViewValue: angular.noop };this.modes = ["day", "month", "year"], angular.forEach(["formatDay", "formatMonth", "formatYear", "formatDayHeader", "formatDayTitle", "formatMonthTitle", "minMode", "maxMode", "showWeeks", "startingDay", "yearRange"], function (c, e) {
    i[c] = angular.isDefined(b[c]) ? 8 > e ? d(b[c])(a.$parent) : a.$parent.$eval(b[c]) : h[c];
  }), angular.forEach(["minDate", "maxDate"], function (d) {
    b[d] ? a.$parent.$watch(c(b[d]), function (a) {
      i[d] = a ? new Date(a) : null, i.refreshView();
    }) : i[d] = h[d] ? new Date(h[d]) : null;
  }), a.datepickerMode = a.datepickerMode || h.datepickerMode, a.uniqueId = "datepicker-" + a.$id + "-" + Math.floor(1e4 * Math.random()), this.activeDate = angular.isDefined(b.initDate) ? a.$parent.$eval(b.initDate) : new Date(), a.isActive = function (b) {
    return 0 === i.compare(b.date, i.activeDate) ? (a.activeDateId = b.uid, !0) : !1;
  }, this.init = function (a) {
    j = a, j.$render = function () {
      i.render();
    };
  }, this.render = function () {
    if (j.$modelValue) {
      var a = new Date(j.$modelValue),
          b = !isNaN(a);b ? this.activeDate = a : f.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.'), j.$setValidity("date", b);
    }this.refreshView();
  }, this.refreshView = function () {
    if (this.element) {
      this._refreshView();var a = j.$modelValue ? new Date(j.$modelValue) : null;j.$setValidity("date-disabled", !a || this.element && !this.isDisabled(a));
    }
  }, this.createDateObject = function (a, b) {
    var c = j.$modelValue ? new Date(j.$modelValue) : null;return { date: a, label: g(a, b), selected: c && 0 === this.compare(a, c), disabled: this.isDisabled(a), current: 0 === this.compare(a, new Date()) };
  }, this.isDisabled = function (c) {
    return this.minDate && this.compare(c, this.minDate) < 0 || this.maxDate && this.compare(c, this.maxDate) > 0 || b.dateDisabled && a.dateDisabled({ date: c, mode: a.datepickerMode });
  }, this.split = function (a, b) {
    for (var c = []; a.length > 0;) c.push(a.splice(0, b));return c;
  }, a.select = function (b) {
    if (a.datepickerMode === i.minMode) {
      var c = j.$modelValue ? new Date(j.$modelValue) : new Date(0, 0, 0, 0, 0, 0, 0);c.setFullYear(b.getFullYear(), b.getMonth(), b.getDate()), j.$setViewValue(c), j.$render();
    } else i.activeDate = b, a.datepickerMode = i.modes[i.modes.indexOf(a.datepickerMode) - 1];
  }, a.move = function (a) {
    var b = i.activeDate.getFullYear() + a * (i.step.years || 0),
        c = i.activeDate.getMonth() + a * (i.step.months || 0);i.activeDate.setFullYear(b, c, 1), i.refreshView();
  }, a.toggleMode = function (b) {
    b = b || 1, a.datepickerMode === i.maxMode && 1 === b || a.datepickerMode === i.minMode && -1 === b || (a.datepickerMode = i.modes[i.modes.indexOf(a.datepickerMode) + b]);
  }, a.keys = { 13: "enter", 32: "space", 33: "pageup", 34: "pagedown", 35: "end", 36: "home", 37: "left", 38: "up", 39: "right", 40: "down" };var k = function () {
    e(function () {
      i.element[0].focus();
    }, 0, !1);
  };a.$on("datepicker.focus", k), a.keydown = function (b) {
    var c = a.keys[b.which];if (c && !b.shiftKey && !b.altKey) if (b.preventDefault(), b.stopPropagation(), "enter" === c || "space" === c) {
      if (i.isDisabled(i.activeDate)) return;a.select(i.activeDate), k();
    } else !b.ctrlKey || "up" !== c && "down" !== c ? (i.handleKeyDown(c, b), i.refreshView()) : (a.toggleMode("up" === c ? 1 : -1), k());
  };
}]).directive("datepicker", function () {
  return { restrict: "EA", replace: !0, templateUrl: "template/datepicker/datepicker.html", scope: { datepickerMode: "=?", dateDisabled: "&" }, require: ["datepicker", "?^ngModel"], controller: "DatepickerController", link: function (a, b, c, d) {
      var e = d[0],
          f = d[1];f && e.init(f);
    } };
}).directive("daypicker", ["dateFilter", function (a) {
  return { restrict: "EA", replace: !0, templateUrl: "template/datepicker/day.html", require: "^datepicker", link: function (b, c, d, e) {
      function f(a, b) {
        return 1 !== b || a % 4 !== 0 || a % 100 === 0 && a % 400 !== 0 ? i[b] : 29;
      }function g(a, b) {
        var c = new Array(b),
            d = new Date(a),
            e = 0;for (d.setHours(12); b > e;) c[e++] = new Date(d), d.setDate(d.getDate() + 1);return c;
      }function h(a) {
        var b = new Date(a);b.setDate(b.getDate() + 4 - (b.getDay() || 7));var c = b.getTime();return b.setMonth(0), b.setDate(1), Math.floor(Math.round((c - b) / 864e5) / 7) + 1;
      }b.showWeeks = e.showWeeks, e.step = { months: 1 }, e.element = c;var i = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];e._refreshView = function () {
        var c = e.activeDate.getFullYear(),
            d = e.activeDate.getMonth(),
            f = new Date(c, d, 1),
            i = e.startingDay - f.getDay(),
            j = i > 0 ? 7 - i : -i,
            k = new Date(f);j > 0 && k.setDate(-j + 1);for (var l = g(k, 42), m = 0; 42 > m; m++) l[m] = angular.extend(e.createDateObject(l[m], e.formatDay), { secondary: l[m].getMonth() !== d, uid: b.uniqueId + "-" + m });b.labels = new Array(7);for (var n = 0; 7 > n; n++) b.labels[n] = { abbr: a(l[n].date, e.formatDayHeader), full: a(l[n].date, "EEEE") };if (b.title = a(e.activeDate, e.formatDayTitle), b.rows = e.split(l, 7), b.showWeeks) {
          b.weekNumbers = [];for (var o = h(b.rows[0][0].date), p = b.rows.length; b.weekNumbers.push(o++) < p;);
        }
      }, e.compare = function (a, b) {
        return new Date(a.getFullYear(), a.getMonth(), a.getDate()) - new Date(b.getFullYear(), b.getMonth(), b.getDate());
      }, e.handleKeyDown = function (a) {
        var b = e.activeDate.getDate();if ("left" === a) b -= 1;else if ("up" === a) b -= 7;else if ("right" === a) b += 1;else if ("down" === a) b += 7;else if ("pageup" === a || "pagedown" === a) {
          var c = e.activeDate.getMonth() + ("pageup" === a ? -1 : 1);e.activeDate.setMonth(c, 1), b = Math.min(f(e.activeDate.getFullYear(), e.activeDate.getMonth()), b);
        } else "home" === a ? b = 1 : "end" === a && (b = f(e.activeDate.getFullYear(), e.activeDate.getMonth()));e.activeDate.setDate(b);
      }, e.refreshView();
    } };
}]).directive("monthpicker", ["dateFilter", function (a) {
  return { restrict: "EA", replace: !0, templateUrl: "template/datepicker/month.html", require: "^datepicker", link: function (b, c, d, e) {
      e.step = { years: 1 }, e.element = c, e._refreshView = function () {
        for (var c = new Array(12), d = e.activeDate.getFullYear(), f = 0; 12 > f; f++) c[f] = angular.extend(e.createDateObject(new Date(d, f, 1), e.formatMonth), { uid: b.uniqueId + "-" + f });b.title = a(e.activeDate, e.formatMonthTitle), b.rows = e.split(c, 3);
      }, e.compare = function (a, b) {
        return new Date(a.getFullYear(), a.getMonth()) - new Date(b.getFullYear(), b.getMonth());
      }, e.handleKeyDown = function (a) {
        var b = e.activeDate.getMonth();if ("left" === a) b -= 1;else if ("up" === a) b -= 3;else if ("right" === a) b += 1;else if ("down" === a) b += 3;else if ("pageup" === a || "pagedown" === a) {
          var c = e.activeDate.getFullYear() + ("pageup" === a ? -1 : 1);e.activeDate.setFullYear(c);
        } else "home" === a ? b = 0 : "end" === a && (b = 11);e.activeDate.setMonth(b);
      }, e.refreshView();
    } };
}]).directive("yearpicker", ["dateFilter", function () {
  return { restrict: "EA", replace: !0, templateUrl: "template/datepicker/year.html", require: "^datepicker", link: function (a, b, c, d) {
      function e(a) {
        return parseInt((a - 1) / f, 10) * f + 1;
      }var f = d.yearRange;d.step = { years: f }, d.element = b, d._refreshView = function () {
        for (var b = new Array(f), c = 0, g = e(d.activeDate.getFullYear()); f > c; c++) b[c] = angular.extend(d.createDateObject(new Date(g + c, 0, 1), d.formatYear), { uid: a.uniqueId + "-" + c });a.title = [b[0].label, b[f - 1].label].join(" - "), a.rows = d.split(b, 5);
      }, d.compare = function (a, b) {
        return a.getFullYear() - b.getFullYear();
      }, d.handleKeyDown = function (a) {
        var b = d.activeDate.getFullYear();"left" === a ? b -= 1 : "up" === a ? b -= 5 : "right" === a ? b += 1 : "down" === a ? b += 5 : "pageup" === a || "pagedown" === a ? b += ("pageup" === a ? -1 : 1) * d.step.years : "home" === a ? b = e(d.activeDate.getFullYear()) : "end" === a && (b = e(d.activeDate.getFullYear()) + f - 1), d.activeDate.setFullYear(b);
      }, d.refreshView();
    } };
}]).constant("datepickerPopupConfig", { datepickerPopup: "yyyy-MM-dd", currentText: "Today", clearText: "Clear", closeText: "Done", closeOnDateSelection: !0, appendToBody: !1, showButtonBar: !0 }).directive("datepickerPopup", ["$compile", "$parse", "$document", "$position", "dateFilter", "dateParser", "datepickerPopupConfig", function (a, b, c, d, e, f, g) {
  return { restrict: "EA", require: "ngModel", scope: { isOpen: "=?", currentText: "@", clearText: "@", closeText: "@", dateDisabled: "&" }, link: function (h, i, j, k) {
      function l(a) {
        return a.replace(/([A-Z])/g, function (a) {
          return "-" + a.toLowerCase();
        });
      }function m(a) {
        if (a) {
          if (angular.isDate(a) && !isNaN(a)) return k.$setValidity("date", !0), a;if (angular.isString(a)) {
            var b = f.parse(a, n) || new Date(a);return isNaN(b) ? void k.$setValidity("date", !1) : (k.$setValidity("date", !0), b);
          }return void k.$setValidity("date", !1);
        }return k.$setValidity("date", !0), null;
      }var n,
          o = angular.isDefined(j.closeOnDateSelection) ? h.$parent.$eval(j.closeOnDateSelection) : g.closeOnDateSelection,
          p = angular.isDefined(j.datepickerAppendToBody) ? h.$parent.$eval(j.datepickerAppendToBody) : g.appendToBody;h.showButtonBar = angular.isDefined(j.showButtonBar) ? h.$parent.$eval(j.showButtonBar) : g.showButtonBar, h.getText = function (a) {
        return h[a + "Text"] || g[a + "Text"];
      }, j.$observe("datepickerPopup", function (a) {
        n = a || g.datepickerPopup, k.$render();
      });var q = angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");q.attr({ "ng-model": "date", "ng-change": "dateSelection()" });var r = angular.element(q.children()[0]);j.datepickerOptions && angular.forEach(h.$parent.$eval(j.datepickerOptions), function (a, b) {
        r.attr(l(b), a);
      }), h.watchData = {}, angular.forEach(["minDate", "maxDate", "datepickerMode"], function (a) {
        if (j[a]) {
          var c = b(j[a]);if (h.$parent.$watch(c, function (b) {
            h.watchData[a] = b;
          }), r.attr(l(a), "watchData." + a), "datepickerMode" === a) {
            var d = c.assign;h.$watch("watchData." + a, function (a, b) {
              a !== b && d(h.$parent, a);
            });
          }
        }
      }), j.dateDisabled && r.attr("date-disabled", "dateDisabled({ date: date, mode: mode })"), k.$parsers.unshift(m), h.dateSelection = function (a) {
        angular.isDefined(a) && (h.date = a), k.$setViewValue(h.date), k.$render(), o && (h.isOpen = !1, i[0].focus());
      }, i.bind("input change keyup", function () {
        h.$apply(function () {
          h.date = k.$modelValue;
        });
      }), k.$render = function () {
        var a = k.$viewValue ? e(k.$viewValue, n) : "";i.val(a), h.date = m(k.$modelValue);
      };var s = function (a) {
        h.isOpen && a.target !== i[0] && h.$apply(function () {
          h.isOpen = !1;
        });
      },
          t = function (a) {
        h.keydown(a);
      };i.bind("keydown", t), h.keydown = function (a) {
        27 === a.which ? (a.preventDefault(), a.stopPropagation(), h.close()) : 40 !== a.which || h.isOpen || (h.isOpen = !0);
      }, h.$watch("isOpen", function (a) {
        a ? (h.$broadcast("datepicker.focus"), h.position = p ? d.offset(i) : d.position(i), h.position.top = h.position.top + i.prop("offsetHeight"), c.bind("click", s)) : c.unbind("click", s);
      }), h.select = function (a) {
        if ("today" === a) {
          var b = new Date();angular.isDate(k.$modelValue) ? (a = new Date(k.$modelValue), a.setFullYear(b.getFullYear(), b.getMonth(), b.getDate())) : a = new Date(b.setHours(0, 0, 0, 0));
        }h.dateSelection(a);
      }, h.close = function () {
        h.isOpen = !1, i[0].focus();
      };var u = a(q)(h);q.remove(), p ? c.find("body").append(u) : i.after(u), h.$on("$destroy", function () {
        u.remove(), i.unbind("keydown", t), c.unbind("click", s);
      });
    } };
}]).directive("datepickerPopupWrap", function () {
  return { restrict: "EA", replace: !0, transclude: !0, templateUrl: "template/datepicker/popup.html", link: function (a, b) {
      b.bind("click", function (a) {
        a.preventDefault(), a.stopPropagation();
      });
    } };
}), angular.module("ui.bootstrap.dropdown", []).constant("dropdownConfig", { openClass: "open" }).service("dropdownService", ["$document", function (a) {
  var b = null;this.open = function (e) {
    b || (a.bind("click", c), a.bind("keydown", d)), b && b !== e && (b.isOpen = !1), b = e;
  }, this.close = function (e) {
    b === e && (b = null, a.unbind("click", c), a.unbind("keydown", d));
  };var c = function (a) {
    if (b) {
      var c = b.getToggleElement();a && c && c[0].contains(a.target) || b.$apply(function () {
        b.isOpen = !1;
      });
    }
  },
      d = function (a) {
    27 === a.which && (b.focusToggleElement(), c());
  };
}]).controller("DropdownController", ["$scope", "$attrs", "$parse", "dropdownConfig", "dropdownService", "$animate", function (a, b, c, d, e, f) {
  var g,
      h = this,
      i = a.$new(),
      j = d.openClass,
      k = angular.noop,
      l = b.onToggle ? c(b.onToggle) : angular.noop;this.init = function (d) {
    h.$element = d, b.isOpen && (g = c(b.isOpen), k = g.assign, a.$watch(g, function (a) {
      i.isOpen = !!a;
    }));
  }, this.toggle = function (a) {
    return i.isOpen = arguments.length ? !!a : !i.isOpen;
  }, this.isOpen = function () {
    return i.isOpen;
  }, i.getToggleElement = function () {
    return h.toggleElement;
  }, i.focusToggleElement = function () {
    h.toggleElement && h.toggleElement[0].focus();
  }, i.$watch("isOpen", function (b, c) {
    f[b ? "addClass" : "removeClass"](h.$element, j), b ? (i.focusToggleElement(), e.open(i)) : e.close(i), k(a, b), angular.isDefined(b) && b !== c && l(a, { open: !!b });
  }), a.$on("$locationChangeSuccess", function () {
    i.isOpen = !1;
  }), a.$on("$destroy", function () {
    i.$destroy();
  });
}]).directive("dropdown", function () {
  return { controller: "DropdownController", link: function (a, b, c, d) {
      d.init(b);
    } };
}).directive("dropdownToggle", function () {
  return { require: "?^dropdown", link: function (a, b, c, d) {
      if (d) {
        d.toggleElement = b;var e = function (e) {
          e.preventDefault(), b.hasClass("disabled") || c.disabled || a.$apply(function () {
            d.toggle();
          });
        };b.bind("click", e), b.attr({ "aria-haspopup": !0, "aria-expanded": !1 }), a.$watch(d.isOpen, function (a) {
          b.attr("aria-expanded", !!a);
        }), a.$on("$destroy", function () {
          b.unbind("click", e);
        });
      }
    } };
}), angular.module("ui.bootstrap.modal", ["ui.bootstrap.transition"]).factory("$$stackedMap", function () {
  return { createNew: function () {
      var a = [];return { add: function (b, c) {
          a.push({ key: b, value: c });
        }, get: function (b) {
          for (var c = 0; c < a.length; c++) if (b == a[c].key) return a[c];
        }, keys: function () {
          for (var b = [], c = 0; c < a.length; c++) b.push(a[c].key);return b;
        }, top: function () {
          return a[a.length - 1];
        }, remove: function (b) {
          for (var c = -1, d = 0; d < a.length; d++) if (b == a[d].key) {
            c = d;break;
          }return a.splice(c, 1)[0];
        }, removeTop: function () {
          return a.splice(a.length - 1, 1)[0];
        }, length: function () {
          return a.length;
        } };
    } };
}).directive("modalBackdrop", ["$timeout", function (a) {
  return { restrict: "EA", replace: !0, templateUrl: "template/modal/backdrop.html", link: function (b, c, d) {
      b.backdropClass = d.backdropClass || "", b.animate = !1, a(function () {
        b.animate = !0;
      });
    } };
}]).directive("modalWindow", ["$modalStack", "$timeout", function (a, b) {
  return { restrict: "EA", scope: { index: "@", animate: "=" }, replace: !0, transclude: !0, templateUrl: function (a, b) {
      return b.templateUrl || "template/modal/window.html";
    }, link: function (c, d, e) {
      d.addClass(e.windowClass || ""), c.size = e.size, b(function () {
        c.animate = !0, d[0].querySelectorAll("[autofocus]").length || d[0].focus();
      }), c.close = function (b) {
        var c = a.getTop();c && c.value.backdrop && "static" != c.value.backdrop && b.target === b.currentTarget && (b.preventDefault(), b.stopPropagation(), a.dismiss(c.key, "backdrop click"));
      };
    } };
}]).directive("modalTransclude", function () {
  return { link: function (a, b, c, d, e) {
      e(a.$parent, function (a) {
        b.empty(), b.append(a);
      });
    } };
}).factory("$modalStack", ["$transition", "$timeout", "$document", "$compile", "$rootScope", "$$stackedMap", function (a, b, c, d, e, f) {
  function g() {
    for (var a = -1, b = n.keys(), c = 0; c < b.length; c++) n.get(b[c]).value.backdrop && (a = c);return a;
  }function h(a) {
    var b = c.find("body").eq(0),
        d = n.get(a).value;n.remove(a), j(d.modalDomEl, d.modalScope, 300, function () {
      d.modalScope.$destroy(), b.toggleClass(m, n.length() > 0), i();
    });
  }function i() {
    if (k && -1 == g()) {
      var a = l;j(k, l, 150, function () {
        a.$destroy(), a = null;
      }), k = void 0, l = void 0;
    }
  }function j(c, d, e, f) {
    function g() {
      g.done || (g.done = !0, c.remove(), f && f());
    }d.animate = !1;var h = a.transitionEndEventName;if (h) {
      var i = b(g, e);c.bind(h, function () {
        b.cancel(i), g(), d.$apply();
      });
    } else b(g);
  }var k,
      l,
      m = "modal-open",
      n = f.createNew(),
      o = {};return e.$watch(g, function (a) {
    l && (l.index = a);
  }), c.bind("keydown", function (a) {
    var b;27 === a.which && (b = n.top(), b && b.value.keyboard && (a.preventDefault(), e.$apply(function () {
      o.dismiss(b.key, "escape key press");
    })));
  }), o.open = function (a, b) {
    n.add(a, { deferred: b.deferred, modalScope: b.scope, backdrop: b.backdrop, keyboard: b.keyboard });var f = c.find("body").eq(0),
        h = g();if (h >= 0 && !k) {
      l = e.$new(!0), l.index = h;var i = angular.element("<div modal-backdrop></div>");i.attr("backdrop-class", b.backdropClass), k = d(i)(l), f.append(k);
    }var j = angular.element("<div modal-window></div>");j.attr({ "template-url": b.windowTemplateUrl, "window-class": b.windowClass, size: b.size, index: n.length() - 1, animate: "animate" }).html(b.content);var o = d(j)(b.scope);n.top().value.modalDomEl = o, f.append(o), f.addClass(m);
  }, o.close = function (a, b) {
    var c = n.get(a);c && (c.value.deferred.resolve(b), h(a));
  }, o.dismiss = function (a, b) {
    var c = n.get(a);c && (c.value.deferred.reject(b), h(a));
  }, o.dismissAll = function (a) {
    for (var b = this.getTop(); b;) this.dismiss(b.key, a), b = this.getTop();
  }, o.getTop = function () {
    return n.top();
  }, o;
}]).provider("$modal", function () {
  var a = { options: { backdrop: !0, keyboard: !0 }, $get: ["$injector", "$rootScope", "$q", "$http", "$templateCache", "$controller", "$modalStack", function (b, c, d, e, f, g, h) {
      function i(a) {
        return a.template ? d.when(a.template) : e.get(angular.isFunction(a.templateUrl) ? a.templateUrl() : a.templateUrl, { cache: f }).then(function (a) {
          return a.data;
        });
      }function j(a) {
        var c = [];return angular.forEach(a, function (a) {
          (angular.isFunction(a) || angular.isArray(a)) && c.push(d.when(b.invoke(a)));
        }), c;
      }var k = {};return k.open = function (b) {
        var e = d.defer(),
            f = d.defer(),
            k = { result: e.promise, opened: f.promise, close: function (a) {
            h.close(k, a);
          }, dismiss: function (a) {
            h.dismiss(k, a);
          } };if (b = angular.extend({}, a.options, b), b.resolve = b.resolve || {}, !b.template && !b.templateUrl) throw new Error("One of template or templateUrl options is required.");var l = d.all([i(b)].concat(j(b.resolve)));return l.then(function (a) {
          var d = (b.scope || c).$new();d.$close = k.close, d.$dismiss = k.dismiss;var f,
              i = {},
              j = 1;b.controller && (i.$scope = d, i.$modalInstance = k, angular.forEach(b.resolve, function (b, c) {
            i[c] = a[j++];
          }), f = g(b.controller, i), b.controllerAs && (d[b.controllerAs] = f)), h.open(k, { scope: d, deferred: e, content: a[0], backdrop: b.backdrop, keyboard: b.keyboard, backdropClass: b.backdropClass, windowClass: b.windowClass, windowTemplateUrl: b.windowTemplateUrl, size: b.size });
        }, function (a) {
          e.reject(a);
        }), l.then(function () {
          f.resolve(!0);
        }, function () {
          f.reject(!1);
        }), k;
      }, k;
    }] };return a;
}), angular.module("ui.bootstrap.pagination", []).controller("PaginationController", ["$scope", "$attrs", "$parse", function (a, b, c) {
  var d = this,
      e = { $setViewValue: angular.noop },
      f = b.numPages ? c(b.numPages).assign : angular.noop;this.init = function (f, g) {
    e = f, this.config = g, e.$render = function () {
      d.render();
    }, b.itemsPerPage ? a.$parent.$watch(c(b.itemsPerPage), function (b) {
      d.itemsPerPage = parseInt(b, 10), a.totalPages = d.calculateTotalPages();
    }) : this.itemsPerPage = g.itemsPerPage;
  }, this.calculateTotalPages = function () {
    var b = this.itemsPerPage < 1 ? 1 : Math.ceil(a.totalItems / this.itemsPerPage);return Math.max(b || 0, 1);
  }, this.render = function () {
    a.page = parseInt(e.$viewValue, 10) || 1;
  }, a.selectPage = function (b) {
    a.page !== b && b > 0 && b <= a.totalPages && (e.$setViewValue(b), e.$render());
  }, a.getText = function (b) {
    return a[b + "Text"] || d.config[b + "Text"];
  }, a.noPrevious = function () {
    return 1 === a.page;
  }, a.noNext = function () {
    return a.page === a.totalPages;
  }, a.$watch("totalItems", function () {
    a.totalPages = d.calculateTotalPages();
  }), a.$watch("totalPages", function (b) {
    f(a.$parent, b), a.page > b ? a.selectPage(b) : e.$render();
  });
}]).constant("paginationConfig", { itemsPerPage: 10, boundaryLinks: !1, directionLinks: !0, firstText: "First", previousText: "Previous", nextText: "Next", lastText: "Last", rotate: !0 }).directive("pagination", ["$parse", "paginationConfig", function (a, b) {
  return { restrict: "EA", scope: { totalItems: "=", firstText: "@", previousText: "@", nextText: "@", lastText: "@" }, require: ["pagination", "?ngModel"], controller: "PaginationController", templateUrl: "template/pagination/pagination.html", replace: !0, link: function (c, d, e, f) {
      function g(a, b, c) {
        return { number: a, text: b, active: c };
      }function h(a, b) {
        var c = [],
            d = 1,
            e = b,
            f = angular.isDefined(k) && b > k;f && (l ? (d = Math.max(a - Math.floor(k / 2), 1), e = d + k - 1, e > b && (e = b, d = e - k + 1)) : (d = (Math.ceil(a / k) - 1) * k + 1, e = Math.min(d + k - 1, b)));for (var h = d; e >= h; h++) {
          var i = g(h, h, h === a);c.push(i);
        }if (f && !l) {
          if (d > 1) {
            var j = g(d - 1, "...", !1);c.unshift(j);
          }if (b > e) {
            var m = g(e + 1, "...", !1);c.push(m);
          }
        }return c;
      }var i = f[0],
          j = f[1];if (j) {
        var k = angular.isDefined(e.maxSize) ? c.$parent.$eval(e.maxSize) : b.maxSize,
            l = angular.isDefined(e.rotate) ? c.$parent.$eval(e.rotate) : b.rotate;c.boundaryLinks = angular.isDefined(e.boundaryLinks) ? c.$parent.$eval(e.boundaryLinks) : b.boundaryLinks, c.directionLinks = angular.isDefined(e.directionLinks) ? c.$parent.$eval(e.directionLinks) : b.directionLinks, i.init(j, b), e.maxSize && c.$parent.$watch(a(e.maxSize), function (a) {
          k = parseInt(a, 10), i.render();
        });var m = i.render;i.render = function () {
          m(), c.page > 0 && c.page <= c.totalPages && (c.pages = h(c.page, c.totalPages));
        };
      }
    } };
}]).constant("pagerConfig", { itemsPerPage: 10, previousText: "« Previous", nextText: "Next »", align: !0 }).directive("pager", ["pagerConfig", function (a) {
  return { restrict: "EA", scope: { totalItems: "=", previousText: "@", nextText: "@" }, require: ["pager", "?ngModel"], controller: "PaginationController", templateUrl: "template/pagination/pager.html", replace: !0, link: function (b, c, d, e) {
      var f = e[0],
          g = e[1];g && (b.align = angular.isDefined(d.align) ? b.$parent.$eval(d.align) : a.align, f.init(g, a));
    } };
}]), angular.module("ui.bootstrap.tooltip", ["ui.bootstrap.position", "ui.bootstrap.bindHtml"]).provider("$tooltip", function () {
  function a(a) {
    var b = /[A-Z]/g,
        c = "-";return a.replace(b, function (a, b) {
      return (b ? c : "") + a.toLowerCase();
    });
  }var b = { placement: "top", animation: !0, popupDelay: 0 },
      c = { mouseenter: "mouseleave", click: "click", focus: "blur" },
      d = {};this.options = function (a) {
    angular.extend(d, a);
  }, this.setTriggers = function (a) {
    angular.extend(c, a);
  }, this.$get = ["$window", "$compile", "$timeout", "$document", "$position", "$interpolate", function (e, f, g, h, i, j) {
    return function (e, k, l) {
      function m(a) {
        var b = a || n.trigger || l,
            d = c[b] || b;return { show: b, hide: d };
      }var n = angular.extend({}, b, d),
          o = a(e),
          p = j.startSymbol(),
          q = j.endSymbol(),
          r = "<div " + o + '-popup title="' + p + "title" + q + '" content="' + p + "content" + q + '" placement="' + p + "placement" + q + '" animation="animation" is-open="isOpen"></div>';return { restrict: "EA", compile: function () {
          var a = f(r);return function (b, c, d) {
            function f() {
              D.isOpen ? l() : j();
            }function j() {
              (!C || b.$eval(d[k + "Enable"])) && (s(), D.popupDelay ? z || (z = g(o, D.popupDelay, !1), z.then(function (a) {
                a();
              })) : o()());
            }function l() {
              b.$apply(function () {
                p();
              });
            }function o() {
              return z = null, y && (g.cancel(y), y = null), D.content ? (q(), w.css({ top: 0, left: 0, display: "block" }), D.$digest(), E(), D.isOpen = !0, D.$digest(), E) : angular.noop;
            }function p() {
              D.isOpen = !1, g.cancel(z), z = null, D.animation ? y || (y = g(r, 500)) : r();
            }function q() {
              w && r(), x = D.$new(), w = a(x, function (a) {
                A ? h.find("body").append(a) : c.after(a);
              });
            }function r() {
              y = null, w && (w.remove(), w = null), x && (x.$destroy(), x = null);
            }function s() {
              t(), u();
            }function t() {
              var a = d[k + "Placement"];D.placement = angular.isDefined(a) ? a : n.placement;
            }function u() {
              var a = d[k + "PopupDelay"],
                  b = parseInt(a, 10);D.popupDelay = isNaN(b) ? n.popupDelay : b;
            }function v() {
              var a = d[k + "Trigger"];F(), B = m(a), B.show === B.hide ? c.bind(B.show, f) : (c.bind(B.show, j), c.bind(B.hide, l));
            }var w,
                x,
                y,
                z,
                A = angular.isDefined(n.appendToBody) ? n.appendToBody : !1,
                B = m(void 0),
                C = angular.isDefined(d[k + "Enable"]),
                D = b.$new(!0),
                E = function () {
              var a = i.positionElements(c, w, D.placement, A);a.top += "px", a.left += "px", w.css(a);
            };D.isOpen = !1, d.$observe(e, function (a) {
              D.content = a, !a && D.isOpen && p();
            }), d.$observe(k + "Title", function (a) {
              D.title = a;
            });var F = function () {
              c.unbind(B.show, j), c.unbind(B.hide, l);
            };v();var G = b.$eval(d[k + "Animation"]);D.animation = angular.isDefined(G) ? !!G : n.animation;var H = b.$eval(d[k + "AppendToBody"]);A = angular.isDefined(H) ? H : A, A && b.$on("$locationChangeSuccess", function () {
              D.isOpen && p();
            }), b.$on("$destroy", function () {
              g.cancel(y), g.cancel(z), F(), r(), D = null;
            });
          };
        } };
    };
  }];
}).directive("tooltipPopup", function () {
  return { restrict: "EA", replace: !0, scope: { content: "@", placement: "@", animation: "&", isOpen: "&" }, templateUrl: "template/tooltip/tooltip-popup.html" };
}).directive("tooltip", ["$tooltip", function (a) {
  return a("tooltip", "tooltip", "mouseenter");
}]).directive("tooltipHtmlUnsafePopup", function () {
  return { restrict: "EA", replace: !0, scope: { content: "@", placement: "@", animation: "&", isOpen: "&" }, templateUrl: "template/tooltip/tooltip-html-unsafe-popup.html" };
}).directive("tooltipHtmlUnsafe", ["$tooltip", function (a) {
  return a("tooltipHtmlUnsafe", "tooltip", "mouseenter");
}]), angular.module("ui.bootstrap.popover", ["ui.bootstrap.tooltip"]).directive("popoverPopup", function () {
  return { restrict: "EA", replace: !0, scope: { title: "@", content: "@", placement: "@", animation: "&", isOpen: "&" }, templateUrl: "template/popover/popover.html" };
}).directive("popover", ["$tooltip", function (a) {
  return a("popover", "popover", "click");
}]), angular.module("ui.bootstrap.progressbar", []).constant("progressConfig", { animate: !0, max: 100 }).controller("ProgressController", ["$scope", "$attrs", "progressConfig", function (a, b, c) {
  var d = this,
      e = angular.isDefined(b.animate) ? a.$parent.$eval(b.animate) : c.animate;this.bars = [], a.max = angular.isDefined(b.max) ? a.$parent.$eval(b.max) : c.max, this.addBar = function (b, c) {
    e || c.css({ transition: "none" }), this.bars.push(b), b.$watch("value", function (c) {
      b.percent = +(100 * c / a.max).toFixed(2);
    }), b.$on("$destroy", function () {
      c = null, d.removeBar(b);
    });
  }, this.removeBar = function (a) {
    this.bars.splice(this.bars.indexOf(a), 1);
  };
}]).directive("progress", function () {
  return { restrict: "EA", replace: !0, transclude: !0, controller: "ProgressController", require: "progress", scope: {}, templateUrl: "template/progressbar/progress.html" };
}).directive("bar", function () {
  return { restrict: "EA", replace: !0, transclude: !0, require: "^progress", scope: { value: "=", type: "@" }, templateUrl: "template/progressbar/bar.html", link: function (a, b, c, d) {
      d.addBar(a, b);
    } };
}).directive("progressbar", function () {
  return { restrict: "EA", replace: !0, transclude: !0, controller: "ProgressController", scope: { value: "=", type: "@" }, templateUrl: "template/progressbar/progressbar.html", link: function (a, b, c, d) {
      d.addBar(a, angular.element(b.children()[0]));
    } };
}), angular.module("ui.bootstrap.rating", []).constant("ratingConfig", { max: 5, stateOn: null, stateOff: null }).controller("RatingController", ["$scope", "$attrs", "ratingConfig", function (a, b, c) {
  var d = { $setViewValue: angular.noop };this.init = function (e) {
    d = e, d.$render = this.render, this.stateOn = angular.isDefined(b.stateOn) ? a.$parent.$eval(b.stateOn) : c.stateOn, this.stateOff = angular.isDefined(b.stateOff) ? a.$parent.$eval(b.stateOff) : c.stateOff;var f = angular.isDefined(b.ratingStates) ? a.$parent.$eval(b.ratingStates) : new Array(angular.isDefined(b.max) ? a.$parent.$eval(b.max) : c.max);a.range = this.buildTemplateObjects(f);
  }, this.buildTemplateObjects = function (a) {
    for (var b = 0, c = a.length; c > b; b++) a[b] = angular.extend({ index: b }, { stateOn: this.stateOn, stateOff: this.stateOff }, a[b]);return a;
  }, a.rate = function (b) {
    !a.readonly && b >= 0 && b <= a.range.length && (d.$setViewValue(b), d.$render());
  }, a.enter = function (b) {
    a.readonly || (a.value = b), a.onHover({ value: b });
  }, a.reset = function () {
    a.value = d.$viewValue, a.onLeave();
  }, a.onKeydown = function (b) {
    /(37|38|39|40)/.test(b.which) && (b.preventDefault(), b.stopPropagation(), a.rate(a.value + (38 === b.which || 39 === b.which ? 1 : -1)));
  }, this.render = function () {
    a.value = d.$viewValue;
  };
}]).directive("rating", function () {
  return { restrict: "EA", require: ["rating", "ngModel"], scope: { readonly: "=?", onHover: "&", onLeave: "&" }, controller: "RatingController", templateUrl: "template/rating/rating.html", replace: !0, link: function (a, b, c, d) {
      var e = d[0],
          f = d[1];f && e.init(f);
    } };
}), angular.module("ui.bootstrap.tabs", []).controller("TabsetController", ["$scope", function (a) {
  var b = this,
      c = b.tabs = a.tabs = [];b.select = function (a) {
    angular.forEach(c, function (b) {
      b.active && b !== a && (b.active = !1, b.onDeselect());
    }), a.active = !0, a.onSelect();
  }, b.addTab = function (a) {
    c.push(a), 1 === c.length ? a.active = !0 : a.active && b.select(a);
  }, b.removeTab = function (a) {
    var e = c.indexOf(a);if (a.active && c.length > 1 && !d) {
      var f = e == c.length - 1 ? e - 1 : e + 1;b.select(c[f]);
    }c.splice(e, 1);
  };var d;a.$on("$destroy", function () {
    d = !0;
  });
}]).directive("tabset", function () {
  return { restrict: "EA", transclude: !0, replace: !0, scope: { type: "@" }, controller: "TabsetController", templateUrl: "template/tabs/tabset.html", link: function (a, b, c) {
      a.vertical = angular.isDefined(c.vertical) ? a.$parent.$eval(c.vertical) : !1, a.justified = angular.isDefined(c.justified) ? a.$parent.$eval(c.justified) : !1;
    } };
}).directive("tab", ["$parse", function (a) {
  return { require: "^tabset", restrict: "EA", replace: !0, templateUrl: "template/tabs/tab.html", transclude: !0, scope: { active: "=?", heading: "@", onSelect: "&select", onDeselect: "&deselect" }, controller: function () {}, compile: function (b, c, d) {
      return function (b, c, e, f) {
        b.$watch("active", function (a) {
          a && f.select(b);
        }), b.disabled = !1, e.disabled && b.$parent.$watch(a(e.disabled), function (a) {
          b.disabled = !!a;
        }), b.select = function () {
          b.disabled || (b.active = !0);
        }, f.addTab(b), b.$on("$destroy", function () {
          f.removeTab(b);
        }), b.$transcludeFn = d;
      };
    } };
}]).directive("tabHeadingTransclude", [function () {
  return { restrict: "A", require: "^tab", link: function (a, b) {
      a.$watch("headingElement", function (a) {
        a && (b.html(""), b.append(a));
      });
    } };
}]).directive("tabContentTransclude", function () {
  function a(a) {
    return a.tagName && (a.hasAttribute("tab-heading") || a.hasAttribute("data-tab-heading") || "tab-heading" === a.tagName.toLowerCase() || "data-tab-heading" === a.tagName.toLowerCase());
  }return { restrict: "A", require: "^tabset", link: function (b, c, d) {
      var e = b.$eval(d.tabContentTransclude);e.$transcludeFn(e.$parent, function (b) {
        angular.forEach(b, function (b) {
          a(b) ? e.headingElement = b : c.append(b);
        });
      });
    } };
}), angular.module("ui.bootstrap.timepicker", []).constant("timepickerConfig", { hourStep: 1, minuteStep: 1, showMeridian: !0, meridians: null, readonlyInput: !1, mousewheel: !0 }).controller("TimepickerController", ["$scope", "$attrs", "$parse", "$log", "$locale", "timepickerConfig", function (a, b, c, d, e, f) {
  function g() {
    var b = parseInt(a.hours, 10),
        c = a.showMeridian ? b > 0 && 13 > b : b >= 0 && 24 > b;return c ? (a.showMeridian && (12 === b && (b = 0), a.meridian === p[1] && (b += 12)), b) : void 0;
  }function h() {
    var b = parseInt(a.minutes, 10);return b >= 0 && 60 > b ? b : void 0;
  }function i(a) {
    return angular.isDefined(a) && a.toString().length < 2 ? "0" + a : a;
  }function j(a) {
    k(), o.$setViewValue(new Date(n)), l(a);
  }function k() {
    o.$setValidity("time", !0), a.invalidHours = !1, a.invalidMinutes = !1;
  }function l(b) {
    var c = n.getHours(),
        d = n.getMinutes();a.showMeridian && (c = 0 === c || 12 === c ? 12 : c % 12), a.hours = "h" === b ? c : i(c), a.minutes = "m" === b ? d : i(d), a.meridian = n.getHours() < 12 ? p[0] : p[1];
  }function m(a) {
    var b = new Date(n.getTime() + 6e4 * a);n.setHours(b.getHours(), b.getMinutes()), j();
  }var n = new Date(),
      o = { $setViewValue: angular.noop },
      p = angular.isDefined(b.meridians) ? a.$parent.$eval(b.meridians) : f.meridians || e.DATETIME_FORMATS.AMPMS;this.init = function (c, d) {
    o = c, o.$render = this.render;var e = d.eq(0),
        g = d.eq(1),
        h = angular.isDefined(b.mousewheel) ? a.$parent.$eval(b.mousewheel) : f.mousewheel;h && this.setupMousewheelEvents(e, g), a.readonlyInput = angular.isDefined(b.readonlyInput) ? a.$parent.$eval(b.readonlyInput) : f.readonlyInput, this.setupInputEvents(e, g);
  };var q = f.hourStep;b.hourStep && a.$parent.$watch(c(b.hourStep), function (a) {
    q = parseInt(a, 10);
  });var r = f.minuteStep;b.minuteStep && a.$parent.$watch(c(b.minuteStep), function (a) {
    r = parseInt(a, 10);
  }), a.showMeridian = f.showMeridian, b.showMeridian && a.$parent.$watch(c(b.showMeridian), function (b) {
    if (a.showMeridian = !!b, o.$error.time) {
      var c = g(),
          d = h();angular.isDefined(c) && angular.isDefined(d) && (n.setHours(c), j());
    } else l();
  }), this.setupMousewheelEvents = function (b, c) {
    var d = function (a) {
      a.originalEvent && (a = a.originalEvent);var b = a.wheelDelta ? a.wheelDelta : -a.deltaY;return a.detail || b > 0;
    };b.bind("mousewheel wheel", function (b) {
      a.$apply(d(b) ? a.incrementHours() : a.decrementHours()), b.preventDefault();
    }), c.bind("mousewheel wheel", function (b) {
      a.$apply(d(b) ? a.incrementMinutes() : a.decrementMinutes()), b.preventDefault();
    });
  }, this.setupInputEvents = function (b, c) {
    if (a.readonlyInput) return a.updateHours = angular.noop, void (a.updateMinutes = angular.noop);var d = function (b, c) {
      o.$setViewValue(null), o.$setValidity("time", !1), angular.isDefined(b) && (a.invalidHours = b), angular.isDefined(c) && (a.invalidMinutes = c);
    };a.updateHours = function () {
      var a = g();angular.isDefined(a) ? (n.setHours(a), j("h")) : d(!0);
    }, b.bind("blur", function () {
      !a.invalidHours && a.hours < 10 && a.$apply(function () {
        a.hours = i(a.hours);
      });
    }), a.updateMinutes = function () {
      var a = h();angular.isDefined(a) ? (n.setMinutes(a), j("m")) : d(void 0, !0);
    }, c.bind("blur", function () {
      !a.invalidMinutes && a.minutes < 10 && a.$apply(function () {
        a.minutes = i(a.minutes);
      });
    });
  }, this.render = function () {
    var a = o.$modelValue ? new Date(o.$modelValue) : null;isNaN(a) ? (o.$setValidity("time", !1), d.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')) : (a && (n = a), k(), l());
  }, a.incrementHours = function () {
    m(60 * q);
  }, a.decrementHours = function () {
    m(60 * -q);
  }, a.incrementMinutes = function () {
    m(r);
  }, a.decrementMinutes = function () {
    m(-r);
  }, a.toggleMeridian = function () {
    m(720 * (n.getHours() < 12 ? 1 : -1));
  };
}]).directive("timepicker", function () {
  return { restrict: "EA", require: ["timepicker", "?^ngModel"], controller: "TimepickerController", replace: !0, scope: {}, templateUrl: "template/timepicker/timepicker.html", link: function (a, b, c, d) {
      var e = d[0],
          f = d[1];f && e.init(f, b.find("input"));
    } };
}), angular.module("ui.bootstrap.typeahead", ["ui.bootstrap.position", "ui.bootstrap.bindHtml"]).factory("typeaheadParser", ["$parse", function (a) {
  var b = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return { parse: function (c) {
      var d = c.match(b);if (!d) throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "' + c + '".');return { itemName: d[3], source: a(d[4]), viewMapper: a(d[2] || d[1]), modelMapper: a(d[1]) };
    } };
}]).directive("typeahead", ["$compile", "$parse", "$q", "$timeout", "$document", "$position", "typeaheadParser", function (a, b, c, d, e, f, g) {
  var h = [9, 13, 27, 38, 40];return { require: "ngModel", link: function (i, j, k, l) {
      var m,
          n = i.$eval(k.typeaheadMinLength) || 1,
          o = i.$eval(k.typeaheadWaitMs) || 0,
          p = i.$eval(k.typeaheadEditable) !== !1,
          q = b(k.typeaheadLoading).assign || angular.noop,
          r = b(k.typeaheadOnSelect),
          s = k.typeaheadInputFormatter ? b(k.typeaheadInputFormatter) : void 0,
          t = k.typeaheadAppendToBody ? i.$eval(k.typeaheadAppendToBody) : !1,
          u = i.$eval(k.typeaheadFocusFirst) !== !1,
          v = b(k.ngModel).assign,
          w = g.parse(k.typeahead),
          x = i.$new();i.$on("$destroy", function () {
        x.$destroy();
      });var y = "typeahead-" + x.$id + "-" + Math.floor(1e4 * Math.random());j.attr({ "aria-autocomplete": "list", "aria-expanded": !1, "aria-owns": y });var z = angular.element("<div typeahead-popup></div>");z.attr({ id: y, matches: "matches", active: "activeIdx", select: "select(activeIdx)", query: "query", position: "position" }), angular.isDefined(k.typeaheadTemplateUrl) && z.attr("template-url", k.typeaheadTemplateUrl);var A = function () {
        x.matches = [], x.activeIdx = -1, j.attr("aria-expanded", !1);
      },
          B = function (a) {
        return y + "-option-" + a;
      };x.$watch("activeIdx", function (a) {
        0 > a ? j.removeAttr("aria-activedescendant") : j.attr("aria-activedescendant", B(a));
      });var C = function (a) {
        var b = { $viewValue: a };q(i, !0), c.when(w.source(i, b)).then(function (c) {
          var d = a === l.$viewValue;if (d && m) if (c.length > 0) {
            x.activeIdx = u ? 0 : -1, x.matches.length = 0;for (var e = 0; e < c.length; e++) b[w.itemName] = c[e], x.matches.push({ id: B(e), label: w.viewMapper(x, b), model: c[e] });x.query = a, x.position = t ? f.offset(j) : f.position(j), x.position.top = x.position.top + j.prop("offsetHeight"), j.attr("aria-expanded", !0);
          } else A();d && q(i, !1);
        }, function () {
          A(), q(i, !1);
        });
      };A(), x.query = void 0;var D,
          E = function (a) {
        D = d(function () {
          C(a);
        }, o);
      },
          F = function () {
        D && d.cancel(D);
      };l.$parsers.unshift(function (a) {
        return m = !0, a && a.length >= n ? o > 0 ? (F(), E(a)) : C(a) : (q(i, !1), F(), A()), p ? a : a ? void l.$setValidity("editable", !1) : (l.$setValidity("editable", !0), a);
      }), l.$formatters.push(function (a) {
        var b,
            c,
            d = {};return s ? (d.$model = a, s(i, d)) : (d[w.itemName] = a, b = w.viewMapper(i, d), d[w.itemName] = void 0, c = w.viewMapper(i, d), b !== c ? b : a);
      }), x.select = function (a) {
        var b,
            c,
            e = {};e[w.itemName] = c = x.matches[a].model, b = w.modelMapper(i, e), v(i, b), l.$setValidity("editable", !0), r(i, { $item: c, $model: b, $label: w.viewMapper(i, e) }), A(), d(function () {
          j[0].focus();
        }, 0, !1);
      }, j.bind("keydown", function (a) {
        0 !== x.matches.length && -1 !== h.indexOf(a.which) && (-1 != x.activeIdx || 13 !== a.which && 9 !== a.which) && (a.preventDefault(), 40 === a.which ? (x.activeIdx = (x.activeIdx + 1) % x.matches.length, x.$digest()) : 38 === a.which ? (x.activeIdx = (x.activeIdx > 0 ? x.activeIdx : x.matches.length) - 1, x.$digest()) : 13 === a.which || 9 === a.which ? x.$apply(function () {
          x.select(x.activeIdx);
        }) : 27 === a.which && (a.stopPropagation(), A(), x.$digest()));
      }), j.bind("blur", function () {
        m = !1;
      });var G = function (a) {
        j[0] !== a.target && (A(), x.$digest());
      };e.bind("click", G), i.$on("$destroy", function () {
        e.unbind("click", G), t && H.remove();
      });var H = a(z)(x);t ? e.find("body").append(H) : j.after(H);
    } };
}]).directive("typeaheadPopup", function () {
  return { restrict: "EA", scope: { matches: "=", query: "=", active: "=", position: "=", select: "&" }, replace: !0, templateUrl: "template/typeahead/typeahead-popup.html", link: function (a, b, c) {
      a.templateUrl = c.templateUrl, a.isOpen = function () {
        return a.matches.length > 0;
      }, a.isActive = function (b) {
        return a.active == b;
      }, a.selectActive = function (b) {
        a.active = b;
      }, a.selectMatch = function (b) {
        a.select({ activeIdx: b });
      };
    } };
}).directive("typeaheadMatch", ["$http", "$templateCache", "$compile", "$parse", function (a, b, c, d) {
  return { restrict: "EA", scope: { index: "=", match: "=", query: "=" }, link: function (e, f, g) {
      var h = d(g.templateUrl)(e.$parent) || "template/typeahead/typeahead-match.html";a.get(h, { cache: b }).success(function (a) {
        f.replaceWith(c(a.trim())(e));
      });
    } };
}]).filter("typeaheadHighlight", function () {
  function a(a) {
    return a.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
  }return function (b, c) {
    return c ? ("" + b).replace(new RegExp(a(c), "gi"), "<strong>$&</strong>") : b;
  };
}), angular.module("template/accordion/accordion-group.html", []).run(["$templateCache", function (a) {
  a.put("template/accordion/accordion-group.html", '<div class="panel panel-default">\n  <div class="panel-heading">\n    <h4 class="panel-title">\n      <a href class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse" collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>\n');
}]), angular.module("template/accordion/accordion.html", []).run(["$templateCache", function (a) {
  a.put("template/accordion/accordion.html", '<div class="panel-group" ng-transclude></div>');
}]), angular.module("template/alert/alert.html", []).run(["$templateCache", function (a) {
  a.put("template/alert/alert.html", '<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissable\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close()">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n');
}]), angular.module("template/carousel/carousel.html", []).run(["$templateCache", function (a) {
  a.put("template/carousel/carousel.html", '<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n');
}]), angular.module("template/carousel/slide.html", []).run(["$templateCache", function (a) {
  a.put("template/carousel/slide.html", "<div ng-class=\"{\n    'active': leaving || (active && !entering),\n    'prev': (next || active) && direction=='prev',\n    'next': (next || active) && direction=='next',\n    'right': direction=='prev',\n    'left': direction=='next'\n  }\" class=\"item text-center\" ng-transclude></div>\n");
}]), angular.module("template/datepicker/datepicker.html", []).run(["$templateCache", function (a) {
  a.put("template/datepicker/datepicker.html", '<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>');
}]), angular.module("template/datepicker/day.html", []).run(["$templateCache", function (a) {
  a.put("template/datepicker/day.html", '<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{5 + showWeeks}}"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-show="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in labels track by $index" class="text-center"><small aria-label="{{label.full}}">{{label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-show="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n');
}]), angular.module("template/datepicker/month.html", []).run(["$templateCache", function (a) {
  a.put("template/datepicker/month.html", '<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n');
}]), angular.module("template/datepicker/popup.html", []).run(["$templateCache", function (a) {
  a.put("template/datepicker/popup.html", '<ul class="dropdown-menu" ng-style="{display: (isOpen && \'block\') || \'none\', top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)">\n	<li ng-transclude></li>\n	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group pull-left">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n');
}]), angular.module("template/datepicker/year.html", []).run(["$templateCache", function (a) {
  a.put("template/datepicker/year.html", '<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n');
}]), angular.module("template/modal/backdrop.html", []).run(["$templateCache", function (a) {
  a.put("template/modal/backdrop.html", '<div class="modal-backdrop fade {{ backdropClass }}"\n     ng-class="{in: animate}"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n');
}]), angular.module("template/modal/window.html", []).run(["$templateCache", function (a) {
  a.put("template/modal/window.html", '<div tabindex="-1" role="dialog" class="modal fade" ng-class="{in: animate}" ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="{\'modal-sm\': size == \'sm\', \'modal-lg\': size == \'lg\'}"><div class="modal-content" modal-transclude></div></div>\n</div>');
}]), angular.module("template/pagination/pager.html", []).run(["$templateCache", function (a) {
  a.put("template/pagination/pager.html", '<ul class="pager">\n  <li ng-class="{disabled: noPrevious(), previous: align}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext(), next: align}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n</ul>');
}]), angular.module("template/pagination/pagination.html", []).run(["$templateCache", function (a) {
  a.put("template/pagination/pagination.html", '<ul class="pagination">\n  <li ng-if="boundaryLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(1)">{{getText(\'first\')}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active}"><a href ng-click="selectPage(page.number)">{{page.text}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n  <li ng-if="boundaryLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(totalPages)">{{getText(\'last\')}}</a></li>\n</ul>');
}]), angular.module("template/tooltip/tooltip-html-unsafe-popup.html", []).run(["$templateCache", function (a) {
  a.put("template/tooltip/tooltip-html-unsafe-popup.html", '<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n');
}]), angular.module("template/tooltip/tooltip-popup.html", []).run(["$templateCache", function (a) {
  a.put("template/tooltip/tooltip-popup.html", '<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n');
}]), angular.module("template/popover/popover.html", []).run(["$templateCache", function (a) {
  a.put("template/popover/popover.html", '<div class="popover {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-show="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n');
}]), angular.module("template/progressbar/bar.html", []).run(["$templateCache", function (a) {
  a.put("template/progressbar/bar.html", '<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>');
}]), angular.module("template/progressbar/progress.html", []).run(["$templateCache", function (a) {
  a.put("template/progressbar/progress.html", '<div class="progress" ng-transclude></div>');
}]), angular.module("template/progressbar/progressbar.html", []).run(["$templateCache", function (a) {
  a.put("template/progressbar/progressbar.html", '<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\n</div>');
}]), angular.module("template/rating/rating.html", []).run(["$templateCache", function (a) {
  a.put("template/rating/rating.html", '<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <i ng-repeat="r in range track by $index" ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')">\n        <span class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    </i>\n</span>');
}]), angular.module("template/tabs/tab.html", []).run(["$templateCache", function (a) {
  a.put("template/tabs/tab.html", '<li ng-class="{active: active, disabled: disabled}">\n  <a href ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n');
}]), angular.module("template/tabs/tabset.html", []).run(["$templateCache", function (a) {
  a.put("template/tabs/tabset.html", '<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n');
}]), angular.module("template/timepicker/timepicker.html", []).run(["$templateCache", function (a) {
  a.put("template/timepicker/timepicker.html", '<table>\n	<tbody>\n		<tr class="text-center">\n			<td><a ng-click="incrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="incrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n		<tr>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidHours}">\n				<input type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-mousewheel="incrementHours()" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td>:</td>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n				<input type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td ng-show="showMeridian"><button type="button" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n		</tr>\n		<tr class="text-center">\n			<td><a ng-click="decrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="decrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n	</tbody>\n</table>\n');
}]), angular.module("template/typeahead/typeahead-match.html", []).run(["$templateCache", function (a) {
  a.put("template/typeahead/typeahead-match.html", '<a tabindex="-1" bind-html-unsafe="match.label | typeaheadHighlight:query"></a>');
}]), angular.module("template/typeahead/typeahead-popup.html", []).run(["$templateCache", function (a) {
  a.put("template/typeahead/typeahead-popup.html", '<ul class="dropdown-menu" ng-show="isOpen()" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n');
}]);

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
    'use strict';

    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(6)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (root.hasOwnProperty('angular')) {
        // Browser globals (root is window), we don't register it.
        factory(root.angular);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('angular'));
    }
})(this, function (angular) {
    'use strict';

    // In cases where Angular does not get passed or angular is a truthy value
    // but misses .module we can fall back to using window.

    angular = angular && angular.module ? angular : window.angular;

    /**
     * @ngdoc overview
     * @name ngStorage
     */

    return angular.module('ngStorage', [])

    /**
     * @ngdoc object
     * @name ngStorage.$localStorage
     * @requires $rootScope
     * @requires $window
     */

    .provider('$localStorage', _storageProvider('localStorage'))

    /**
     * @ngdoc object
     * @name ngStorage.$sessionStorage
     * @requires $rootScope
     * @requires $window
     */

    .provider('$sessionStorage', _storageProvider('sessionStorage'));

    function _storageProvider(storageType) {
        return function () {
            var storageKeyPrefix = 'ngStorage-';

            this.setKeyPrefix = function (prefix) {
                if (typeof prefix !== 'string') {
                    throw new TypeError('[ngStorage] - ' + storageType + 'Provider.setKeyPrefix() expects a String.');
                }
                storageKeyPrefix = prefix;
            };

            var serializer = angular.toJson;
            var deserializer = angular.fromJson;

            this.setSerializer = function (s) {
                if (typeof s !== 'function') {
                    throw new TypeError('[ngStorage] - ' + storageType + 'Provider.setSerializer expects a function.');
                }

                serializer = s;
            };

            this.setDeserializer = function (d) {
                if (typeof d !== 'function') {
                    throw new TypeError('[ngStorage] - ' + storageType + 'Provider.setDeserializer expects a function.');
                }

                deserializer = d;
            };

            // Note: This is not very elegant at all.
            this.get = function (key) {
                return deserializer(window[storageType].getItem(storageKeyPrefix + key));
            };

            // Note: This is not very elegant at all.
            this.set = function (key, value) {
                return window[storageType].setItem(storageKeyPrefix + key, serializer(value));
            };

            this.$get = ['$rootScope', '$window', '$log', '$timeout', '$document', function ($rootScope, $window, $log, $timeout, $document) {
                function isStorageSupported(storageType) {

                    // Some installations of IE, for an unknown reason, throw "SCRIPT5: Error: Access is denied"
                    // when accessing window.localStorage. This happens before you try to do anything with it. Catch
                    // that error and allow execution to continue.

                    // fix 'SecurityError: DOM Exception 18' exception in Desktop Safari, Mobile Safari
                    // when "Block cookies": "Always block" is turned on
                    var supported;
                    try {
                        supported = $window[storageType];
                    } catch (err) {
                        supported = false;
                    }

                    // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage
                    // is available, but trying to call .setItem throws an exception below:
                    // "QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage that exceeded the quota."
                    if (supported && storageType === 'localStorage') {
                        var key = '__' + Math.round(Math.random() * 1e7);

                        try {
                            localStorage.setItem(key, key);
                            localStorage.removeItem(key);
                        } catch (err) {
                            supported = false;
                        }
                    }

                    return supported;
                }

                // The magic number 10 is used which only works for some keyPrefixes...
                // See https://github.com/gsklee/ngStorage/issues/137
                var prefixLength = storageKeyPrefix.length;

                // #9: Assign a placeholder object if Web Storage is unavailable to prevent breaking the entire AngularJS app
                var webStorage = isStorageSupported(storageType) || ($log.warn('This browser does not support Web Storage!'), { setItem: angular.noop, getItem: angular.noop, removeItem: angular.noop }),
                    $storage = {
                    $default: function (items) {
                        for (var k in items) {
                            angular.isDefined($storage[k]) || ($storage[k] = angular.copy(items[k]));
                        }

                        $storage.$sync();
                        return $storage;
                    },
                    $reset: function (items) {
                        for (var k in $storage) {
                            '$' === k[0] || delete $storage[k] && webStorage.removeItem(storageKeyPrefix + k);
                        }

                        return $storage.$default(items);
                    },
                    $sync: function () {
                        for (var i = 0, l = webStorage.length, k; i < l; i++) {
                            // #8, #10: `webStorage.key(i)` may be an empty string (or throw an exception in IE9 if `webStorage` is empty)
                            (k = webStorage.key(i)) && storageKeyPrefix === k.slice(0, prefixLength) && ($storage[k.slice(prefixLength)] = deserializer(webStorage.getItem(k)));
                        }
                    },
                    $apply: function () {
                        var temp$storage;

                        _debounce = null;

                        if (!angular.equals($storage, _last$storage)) {
                            temp$storage = angular.copy(_last$storage);
                            angular.forEach($storage, function (v, k) {
                                if (angular.isDefined(v) && '$' !== k[0]) {
                                    webStorage.setItem(storageKeyPrefix + k, serializer(v));
                                    delete temp$storage[k];
                                }
                            });

                            for (var k in temp$storage) {
                                webStorage.removeItem(storageKeyPrefix + k);
                            }

                            _last$storage = angular.copy($storage);
                        }
                    }
                },
                    _last$storage,
                    _debounce;

                $storage.$sync();

                _last$storage = angular.copy($storage);

                $rootScope.$watch(function () {
                    _debounce || (_debounce = $timeout($storage.$apply, 100, false));
                });

                // #6: Use `$window.addEventListener` instead of `angular.element` to avoid the jQuery-specific `event.originalEvent`
                $window.addEventListener && $window.addEventListener('storage', function (event) {
                    if (!event.key) {
                        return;
                    }

                    // Reference doc.
                    var doc = $document[0];

                    if ((!doc.hasFocus || !doc.hasFocus()) && storageKeyPrefix === event.key.slice(0, prefixLength)) {
                        event.newValue ? $storage[event.key.slice(prefixLength)] = deserializer(event.newValue) : delete $storage[event.key.slice(prefixLength)];

                        _last$storage = angular.copy($storage);

                        $rootScope.$apply();
                    }
                });

                $window.addEventListener && $window.addEventListener('beforeunload', function () {
                    $storage.$apply();
                });

                return $storage;
            }];
        };
    }
});

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(145);
module.exports = 'ngAnimate';

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(146);
module.exports = 'ngCookies';

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(147);
module.exports = 'angular-loading-bar';

/***/ }),
/* 38 */
/***/ (function(module, exports) {

/*
 *  Angular RangeSlider Directive
 * 
 *  Version: 0.0.13
 *
 *  Author: Daniel Crisp, danielcrisp.com
 *
 *  The rangeSlider has been styled to match the default styling
 *  of form elements styled using Twitter's Bootstrap
 *
 *  Originally forked from https://github.com/leongersen/noUiSlider
 *

    This code is released under the MIT Licence - http://opensource.org/licenses/MIT

    Copyright (c) 2013 Daniel Crisp

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.

*/

(function () {
    'use strict';

    // check if we need to support legacy angular

    var legacySupport = angular.version.major === 1 && angular.version.minor === 0;

    /**
     * RangeSlider, allows user to define a range of values using a slider
     * Touch friendly.
     * @directive
     */
    angular.module('ui-rangeSlider', []).directive('rangeSlider', ['$document', '$filter', '$log', function ($document, $filter, $log) {

        // test for mouse, pointer or touch
        var eventNamespace = '.rangeSlider',
            defaults = {
            disabled: false,
            orientation: 'horizontal',
            step: 0,
            decimalPlaces: 0,
            showValues: true,
            preventEqualMinMax: false,
            attachHandleValues: false
        },


        // Determine the events to bind. IE11 implements pointerEvents without
        // a prefix, which breaks compatibility with the IE10 implementation.
        /** @const */
        actions = window.navigator.pointerEnabled ? {
            start: 'pointerdown',
            move: 'pointermove',
            end: 'pointerup',
            over: 'pointerdown',
            out: 'mouseout'
        } : window.navigator.msPointerEnabled ? {
            start: 'MSPointerDown',
            move: 'MSPointerMove',
            end: 'MSPointerUp',
            over: 'MSPointerDown',
            out: 'mouseout'
        } : {
            start: 'mousedown touchstart',
            move: 'mousemove touchmove',
            end: 'mouseup touchend',
            over: 'mouseover touchstart',
            out: 'mouseout'
        },
            onEvent = actions.start + eventNamespace,
            moveEvent = actions.move + eventNamespace,
            offEvent = actions.end + eventNamespace,
            overEvent = actions.over + eventNamespace,
            outEvent = actions.out + eventNamespace,


        // get standarised clientX and clientY
        client = function (f) {
            try {
                return [f.clientX || f.originalEvent.clientX || f.originalEvent.touches[0].clientX, f.clientY || f.originalEvent.clientY || f.originalEvent.touches[0].clientY];
            } catch (e) {
                return ['x', 'y'];
            }
        },
            restrict = function (value) {

            // normalize so it can't move out of bounds
            return value < 0 ? 0 : value > 100 ? 100 : value;
        },
            isNumber = function (n) {
            // console.log(n);
            return !isNaN(parseFloat(n)) && isFinite(n);
        },
            scopeOptions = {
            disabled: '=?',
            min: '=',
            max: '=',
            modelMin: '=?',
            modelMax: '=?',
            onHandleDown: '&', // calls optional function when handle is grabbed
            onHandleUp: '&', // calls optional function when handle is released
            orientation: '@', // options: horizontal | vertical | vertical left | vertical right
            step: '@',
            decimalPlaces: '@',
            filter: '@',
            filterOptions: '@',
            showValues: '@',
            pinHandle: '@',
            preventEqualMinMax: '@',
            attachHandleValues: '@',
            getterSetter: '@' // Allow the use of getterSetters for model values
        };

        if (legacySupport) {
            // make optional properties required
            scopeOptions.disabled = '=';
            scopeOptions.modelMin = '=';
            scopeOptions.modelMax = '=';
        }

        // if (EVENT < 4) {
        //     // some sort of touch has been detected
        //     angular.element('html').addClass('ngrs-touch');
        // } else {
        //     angular.element('html').addClass('ngrs-no-touch');
        // }


        return {
            restrict: 'A',
            replace: true,
            template: ['<div class="ngrs-range-slider">', '<div class="ngrs-runner">', '<div class="ngrs-handle ngrs-handle-min"><i></i></div>', '<div class="ngrs-handle ngrs-handle-max"><i></i></div>', '<div class="ngrs-join"></div>', '</div>', '<div class="ngrs-value-runner">', '<div class="ngrs-value ngrs-value-min" ng-show="showValues"><div>{{filteredModelMin}}</div></div>', '<div class="ngrs-value ngrs-value-max" ng-show="showValues"><div>{{filteredModelMax}}</div></div>', '</div>', '</div>'].join(''),
            scope: scopeOptions,
            link: function (scope, element, attrs, controller) {

                /**
                 *  FIND ELEMENTS
                 */

                var $slider = angular.element(element),
                    handles = [element.find('.ngrs-handle-min'), element.find('.ngrs-handle-max')],
                    values = [element.find('.ngrs-value-min'), element.find('.ngrs-value-max')],
                    join = element.find('.ngrs-join'),
                    pos = 'left',
                    posOpp = 'right',
                    orientation = 0,
                    allowedRange = [0, 0],
                    range = 0,
                    down = false;

                // filtered
                scope.filteredModelMin = modelMin();
                scope.filteredModelMax = modelMax();

                /**
                 *  FALL BACK TO DEFAULTS FOR SOME ATTRIBUTES
                 */

                attrs.$observe('disabled', function (val) {
                    if (!angular.isDefined(val)) {
                        scope.disabled = defaults.disabled;
                    }

                    scope.$watch('disabled', setDisabledStatus);
                });

                attrs.$observe('orientation', function (val) {
                    if (!angular.isDefined(val)) {
                        scope.orientation = defaults.orientation;
                    }

                    var classNames = scope.orientation.split(' '),
                        useClass;

                    for (var i = 0, l = classNames.length; i < l; i++) {
                        classNames[i] = 'ngrs-' + classNames[i];
                    }

                    useClass = classNames.join(' ');

                    // add class to element
                    $slider.addClass(useClass);

                    // update pos
                    if (scope.orientation === 'vertical' || scope.orientation === 'vertical left' || scope.orientation === 'vertical right') {
                        pos = 'top';
                        posOpp = 'bottom';
                        orientation = 1;
                    }
                });

                attrs.$observe('step', function (val) {
                    if (!angular.isDefined(val)) {
                        scope.step = defaults.step;
                    }
                });

                attrs.$observe('decimalPlaces', function (val) {
                    if (!angular.isDefined(val)) {
                        scope.decimalPlaces = defaults.decimalPlaces;
                    }
                });

                attrs.$observe('showValues', function (val) {
                    if (!angular.isDefined(val)) {
                        scope.showValues = defaults.showValues;
                    } else {
                        if (val === 'false') {
                            scope.showValues = false;
                        } else {
                            scope.showValues = true;
                        }
                    }
                });

                attrs.$observe('pinHandle', function (val) {
                    if (!angular.isDefined(val)) {
                        scope.pinHandle = null;
                    } else {
                        if (val === 'min' || val === 'max') {
                            scope.pinHandle = val;
                        } else {
                            scope.pinHandle = null;
                        }
                    }

                    scope.$watch('pinHandle', setPinHandle);
                });

                attrs.$observe('preventEqualMinMax', function (val) {
                    if (!angular.isDefined(val)) {
                        scope.preventEqualMinMax = defaults.preventEqualMinMax;
                    } else {
                        if (val === 'false') {
                            scope.preventEqualMinMax = false;
                        } else {
                            scope.preventEqualMinMax = true;
                        }
                    }
                });

                attrs.$observe('attachHandleValues', function (val) {
                    if (!angular.isDefined(val)) {
                        scope.attachHandleValues = defaults.attachHandleValues;
                    } else {
                        if (val === 'true' || val === '') {
                            // flag as true
                            scope.attachHandleValues = true;
                            // add class to runner
                            element.find('.ngrs-value-runner').addClass('ngrs-attached-handles');
                        } else {
                            scope.attachHandleValues = false;
                        }
                    }
                });

                // GetterSetters for model values

                function modelMin(newValue) {
                    if (scope.getterSetter) {
                        return arguments.length ? scope.modelMin(newValue) : scope.modelMin();
                    } else {
                        return arguments.length ? scope.modelMin = newValue : scope.modelMin;
                    }
                }

                function modelMax(newValue) {
                    if (scope.getterSetter) {
                        return arguments.length ? scope.modelMax(newValue) : scope.modelMax();
                    } else {
                        return arguments.length ? scope.modelMax = newValue : scope.modelMax;
                    }
                }

                // listen for changes to values
                scope.$watch('min', setMinMax);
                scope.$watch('max', setMinMax);

                scope.$watch(function () {
                    return modelMin();
                }, setModelMinMax);
                scope.$watch(function () {
                    return modelMax();
                }, setModelMinMax);

                /**
                 * HANDLE CHANGES
                 */

                function setPinHandle(status) {
                    if (status === "min") {
                        angular.element(handles[0]).css('display', 'none');
                        angular.element(handles[1]).css('display', 'block');
                    } else if (status === "max") {
                        angular.element(handles[0]).css('display', 'block');
                        angular.element(handles[1]).css('display', 'none');
                    } else {
                        angular.element(handles[0]).css('display', 'block');
                        angular.element(handles[1]).css('display', 'block');
                    }
                }

                function setDisabledStatus(status) {
                    if (status) {
                        $slider.addClass('ngrs-disabled');
                    } else {
                        $slider.removeClass('ngrs-disabled');
                    }
                }

                function setMinMax() {

                    if (scope.min > scope.max) {
                        throwError('min must be less than or equal to max');
                    }

                    // only do stuff when both values are ready
                    if (angular.isDefined(scope.min) && angular.isDefined(scope.max)) {

                        // make sure they are numbers
                        if (!isNumber(scope.min)) {
                            throwError('min must be a number');
                        }

                        if (!isNumber(scope.max)) {
                            throwError('max must be a number');
                        }

                        range = scope.max - scope.min;
                        allowedRange = [scope.min, scope.max];

                        // update models too
                        setModelMinMax();
                    }
                }

                function setModelMinMax() {

                    if (modelMin() > modelMax()) {
                        throwWarning('modelMin must be less than or equal to modelMax');
                        // reset values to correct
                        modelMin(modelMax());
                    }

                    // only do stuff when both values are ready
                    if ((angular.isDefined(modelMin()) || scope.pinHandle === 'min') && (angular.isDefined(modelMax()) || scope.pinHandle === 'max')) {

                        // make sure they are numbers
                        if (!isNumber(modelMin())) {
                            if (scope.pinHandle !== 'min') {
                                throwWarning('modelMin must be a number');
                            }
                            modelMin(scope.min);
                        }

                        if (!isNumber(modelMax())) {
                            if (scope.pinHandle !== 'max') {
                                throwWarning('modelMax must be a number');
                            }
                            modelMax(scope.max);
                        }

                        var handle1pos = restrict((modelMin() - scope.min) / range * 100),
                            handle2pos = restrict((modelMax() - scope.min) / range * 100),
                            value1pos,
                            value2pos;

                        if (scope.attachHandleValues) {
                            value1pos = handle1pos;
                            value2pos = handle2pos;
                        }

                        // make sure the model values are within the allowed range
                        modelMin(Math.max(scope.min, modelMin()));
                        modelMax(Math.min(scope.max, modelMax()));

                        if (scope.filter && scope.filterOptions) {
                            scope.filteredModelMin = $filter(scope.filter)(modelMin(), scope.filterOptions);
                            scope.filteredModelMax = $filter(scope.filter)(modelMax(), scope.filterOptions);
                        } else if (scope.filter) {

                            var filterTokens = scope.filter.split(':'),
                                filterName = scope.filter.split(':')[0],
                                filterOptions = filterTokens.slice().slice(1),
                                modelMinOptions,
                                modelMaxOptions;

                            // properly parse string and number args
                            filterOptions = filterOptions.map(function (arg) {
                                if (isNumber(arg)) {
                                    return +arg;
                                } else if (arg[0] == "\"" && arg[arg.length - 1] == "\"" || arg[0] == "\'" && arg[arg.length - 1] == "\'") {
                                    return arg.slice(1, -1);
                                }
                            });

                            modelMinOptions = filterOptions.slice();
                            modelMaxOptions = filterOptions.slice();
                            modelMinOptions.unshift(modelMin());
                            modelMaxOptions.unshift(modelMax());

                            scope.filteredModelMin = $filter(filterName).apply(null, modelMinOptions);
                            scope.filteredModelMax = $filter(filterName).apply(null, modelMaxOptions);
                        } else {
                            scope.filteredModelMin = modelMin();
                            scope.filteredModelMax = modelMax();
                        }

                        // check for no range
                        if (scope.min === scope.max && modelMin() == modelMax()) {

                            // reposition handles
                            angular.element(handles[0]).css(pos, '0%');
                            angular.element(handles[1]).css(pos, '100%');

                            if (scope.attachHandleValues) {
                                // reposition values
                                angular.element(values[0]).css(pos, '0%');
                                angular.element(values[1]).css(pos, '100%');
                            }

                            // reposition join
                            angular.element(join).css(pos, '0%').css(posOpp, '0%');
                        } else {

                            // reposition handles
                            angular.element(handles[0]).css(pos, handle1pos + '%');
                            angular.element(handles[1]).css(pos, handle2pos + '%');

                            if (scope.attachHandleValues) {
                                // reposition values
                                angular.element(values[0]).css(pos, value1pos + '%');
                                angular.element(values[1]).css(pos, value2pos + '%');
                                angular.element(values[1]).css(posOpp, 'auto');
                            }

                            // reposition join
                            angular.element(join).css(pos, handle1pos + '%').css(posOpp, 100 - handle2pos + '%');

                            // ensure min handle can't be hidden behind max handle
                            if (handle1pos > 95) {
                                angular.element(handles[0]).css('z-index', 3);
                            }
                        }
                    }
                }

                function handleMove(index) {

                    var $handle = handles[index];

                    // on mousedown / touchstart
                    $handle.bind(onEvent + 'X', function (event) {

                        var handleDownClass = (index === 0 ? 'ngrs-handle-min' : 'ngrs-handle-max') + '-down',

                        //unbind = $handle.add($document).add('body'),
                        modelValue = (index === 0 ? modelMin() : modelMax()) - scope.min,
                            originalPosition = modelValue / range * 100,
                            originalClick = client(event),
                            previousClick = originalClick,
                            previousProposal = false;

                        if (angular.isFunction(scope.onHandleDown)) {
                            scope.onHandleDown();
                        }

                        // stop user accidentally selecting stuff
                        angular.element('body').bind('selectstart' + eventNamespace, function () {
                            return false;
                        });

                        // only do stuff if we are disabled
                        if (!scope.disabled) {

                            // flag as down
                            down = true;

                            // add down class
                            $handle.addClass('ngrs-down');

                            $slider.addClass('ngrs-focus ' + handleDownClass);

                            // add touch class for MS styling
                            angular.element('body').addClass('ngrs-touching');

                            // listen for mousemove / touchmove document events
                            $document.bind(moveEvent, function (e) {
                                // prevent default
                                e.preventDefault();

                                var currentClick = client(e),
                                    movement,
                                    proposal,
                                    other,
                                    per = scope.step / range * 100,
                                    otherModelPosition = ((index === 0 ? modelMax() : modelMin()) - scope.min) / range * 100;

                                if (currentClick[0] === "x") {
                                    return;
                                }

                                // calculate deltas
                                currentClick[0] -= originalClick[0];
                                currentClick[1] -= originalClick[1];

                                // has movement occurred on either axis?
                                movement = [previousClick[0] !== currentClick[0], previousClick[1] !== currentClick[1]];

                                // propose a movement
                                proposal = originalPosition + currentClick[orientation] * 100 / (orientation ? $slider.height() : $slider.width());

                                // normalize so it can't move out of bounds
                                proposal = restrict(proposal);

                                if (scope.preventEqualMinMax) {

                                    if (per === 0) {
                                        per = 1 / range * 100; // restrict to 1
                                    }

                                    if (index === 0) {
                                        otherModelPosition = otherModelPosition - per;
                                    } else if (index === 1) {
                                        otherModelPosition = otherModelPosition + per;
                                    }
                                }

                                // check which handle is being moved and add / remove margin
                                if (index === 0) {
                                    proposal = proposal > otherModelPosition ? otherModelPosition : proposal;
                                } else if (index === 1) {
                                    proposal = proposal < otherModelPosition ? otherModelPosition : proposal;
                                }

                                if (scope.step > 0) {
                                    // only change if we are within the extremes, otherwise we get strange rounding
                                    if (proposal < 100 && proposal > 0) {
                                        proposal = Math.round(proposal / per) * per;
                                    }
                                }

                                if (proposal > 95 && index === 0) {
                                    $handle.css('z-index', 3);
                                } else {
                                    $handle.css('z-index', '');
                                }

                                if (movement[orientation] && proposal != previousProposal) {

                                    if (index === 0) {

                                        // update model as we slide
                                        modelMin(parseFloat(parseFloat(proposal * range / 100 + scope.min).toFixed(scope.decimalPlaces)));
                                    } else if (index === 1) {

                                        modelMax(parseFloat(parseFloat(proposal * range / 100 + scope.min).toFixed(scope.decimalPlaces)));
                                    }

                                    // update angular
                                    scope.$apply();

                                    previousProposal = proposal;
                                }

                                previousClick = currentClick;
                            }).bind(offEvent, function () {

                                if (angular.isFunction(scope.onHandleUp)) {
                                    scope.onHandleUp();
                                }

                                // unbind listeners
                                $document.off(moveEvent);
                                $document.off(offEvent);

                                angular.element('body').removeClass('ngrs-touching');

                                // cancel down flag
                                down = false;

                                // remove down and over class
                                $handle.removeClass('ngrs-down');
                                $handle.removeClass('ngrs-over');

                                // remove active class
                                $slider.removeClass('ngrs-focus ' + handleDownClass);
                            });
                        }
                    }).on(overEvent, function () {
                        $handle.addClass('ngrs-over');
                    }).on(outEvent, function () {
                        if (!down) {
                            $handle.removeClass('ngrs-over');
                        }
                    });
                }

                function throwError(message) {
                    scope.disabled = true;
                    throw new Error('RangeSlider: ' + message);
                }

                function throwWarning(message) {
                    $log.warn(message);
                }

                /**
                 * DESTROY
                 */

                scope.$on('$destroy', function () {

                    // unbind event from slider
                    $slider.off(eventNamespace);

                    // unbind from body
                    angular.element('body').off(eventNamespace);

                    // unbind from document
                    $document.off(eventNamespace);

                    // unbind from handles
                    for (var i = 0, l = handles.length; i < l; i++) {
                        handles[i].off(eventNamespace);
                        handles[i].off(eventNamespace + 'X');
                    }
                });

                /**
                 * INIT
                 */

                $slider
                // disable selection
                .bind('selectstart' + eventNamespace, function (event) {
                    return false;
                })
                // stop propagation
                .bind('click', function (event) {
                    event.stopPropagation();
                });

                // bind events to each handle
                handleMove(0);
                handleMove(1);
            }
        };
    }]);

    // requestAnimationFramePolyFill
    // http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
    // shim layer with setTimeout fallback
    window.requestAnimFrame = function () {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
            window.setTimeout(callback, 1000 / 60);
        };
    }();
})();

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(148);
module.exports = 'ngRoute';

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(149);
module.exports = 'ngSanitize';

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(150);
module.exports = 'ngTouch';

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, setImmediate) {(function (global, factory) {
     true ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Dexie = factory();
})(this, function () {
    'use strict';

    // By default, debug will be true only if platform is a web platform and its page is served from localhost.
    // When debug = true, error's stacks will contain asyncronic long stacks.

    var debug = typeof location !== 'undefined' &&
    // By default, use debug mode if served from localhost.
    /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);

    function setDebug(value, filter) {
        debug = value;
        libraryFilter = filter;
    }

    var libraryFilter = function () {
        return true;
    };

    var NEEDS_THROW_FOR_STACK = !new Error("").stack;

    function getErrorWithStack() {
        "use strict";

        if (NEEDS_THROW_FOR_STACK) try {
            // Doing something naughty in strict mode here to trigger a specific error
            // that can be explicitely ignored in debugger's exception settings.
            // If we'd just throw new Error() here, IE's debugger's exception settings
            // will just consider it as "exception thrown by javascript code" which is
            // something you wouldn't want it to ignore.
            getErrorWithStack.arguments;
            throw new Error(); // Fallback if above line don't throw.
        } catch (e) {
            return e;
        }
        return new Error();
    }

    function prettyStack(exception, numIgnoredFrames) {
        var stack = exception.stack;
        if (!stack) return "";
        numIgnoredFrames = numIgnoredFrames || 0;
        if (stack.indexOf(exception.name) === 0) numIgnoredFrames += (exception.name + exception.message).split('\n').length;
        return stack.split('\n').slice(numIgnoredFrames).filter(libraryFilter).map(function (frame) {
            return "\n" + frame;
        }).join('');
    }

    function nop() {}
    function mirror(val) {
        return val;
    }
    function pureFunctionChain(f1, f2) {
        // Enables chained events that takes ONE argument and returns it to the next function in chain.
        // This pattern is used in the hook("reading") event.
        if (f1 == null || f1 === mirror) return f2;
        return function (val) {
            return f2(f1(val));
        };
    }

    function callBoth(on1, on2) {
        return function () {
            on1.apply(this, arguments);
            on2.apply(this, arguments);
        };
    }

    function hookCreatingChain(f1, f2) {
        // Enables chained events that takes several arguments and may modify first argument by making a modification and then returning the same instance.
        // This pattern is used in the hook("creating") event.
        if (f1 === nop) return f2;
        return function () {
            var res = f1.apply(this, arguments);
            if (res !== undefined) arguments[0] = res;
            var onsuccess = this.onsuccess,

            // In case event listener has set this.onsuccess
            onerror = this.onerror; // In case event listener has set this.onerror
            this.onsuccess = null;
            this.onerror = null;
            var res2 = f2.apply(this, arguments);
            if (onsuccess) this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror) this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
            return res2 !== undefined ? res2 : res;
        };
    }

    function hookDeletingChain(f1, f2) {
        if (f1 === nop) return f2;
        return function () {
            f1.apply(this, arguments);
            var onsuccess = this.onsuccess,

            // In case event listener has set this.onsuccess
            onerror = this.onerror; // In case event listener has set this.onerror
            this.onsuccess = this.onerror = null;
            f2.apply(this, arguments);
            if (onsuccess) this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror) this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
        };
    }

    function hookUpdatingChain(f1, f2) {
        if (f1 === nop) return f2;
        return function (modifications) {
            var res = f1.apply(this, arguments);
            extend(modifications, res); // If f1 returns new modifications, extend caller's modifications with the result before calling next in chain.
            var onsuccess = this.onsuccess,

            // In case event listener has set this.onsuccess
            onerror = this.onerror; // In case event listener has set this.onerror
            this.onsuccess = null;
            this.onerror = null;
            var res2 = f2.apply(this, arguments);
            if (onsuccess) this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror) this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
            return res === undefined ? res2 === undefined ? undefined : res2 : extend(res, res2);
        };
    }

    function reverseStoppableEventChain(f1, f2) {
        if (f1 === nop) return f2;
        return function () {
            if (f2.apply(this, arguments) === false) return false;
            return f1.apply(this, arguments);
        };
    }

    function promisableChain(f1, f2) {
        if (f1 === nop) return f2;
        return function () {
            var res = f1.apply(this, arguments);
            if (res && typeof res.then === 'function') {
                var thiz = this,
                    i = arguments.length,
                    args = new Array(i);
                while (i--) {
                    args[i] = arguments[i];
                }return res.then(function () {
                    return f2.apply(thiz, args);
                });
            }
            return f2.apply(this, arguments);
        };
    }

    var keys = Object.keys;
    var isArray = Array.isArray;
    var _global = typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : global;

    function extend(obj, extension) {
        if (typeof extension !== 'object') return obj;
        keys(extension).forEach(function (key) {
            obj[key] = extension[key];
        });
        return obj;
    }

    var getProto = Object.getPrototypeOf;
    var _hasOwn = {}.hasOwnProperty;
    function hasOwn(obj, prop) {
        return _hasOwn.call(obj, prop);
    }

    function props(proto, extension) {
        if (typeof extension === 'function') extension = extension(getProto(proto));
        keys(extension).forEach(function (key) {
            setProp(proto, key, extension[key]);
        });
    }

    function setProp(obj, prop, functionOrGetSet, options) {
        Object.defineProperty(obj, prop, extend(functionOrGetSet && hasOwn(functionOrGetSet, "get") && typeof functionOrGetSet.get === 'function' ? { get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true } : { value: functionOrGetSet, configurable: true, writable: true }, options));
    }

    function derive(Child) {
        return {
            from: function (Parent) {
                Child.prototype = Object.create(Parent.prototype);
                setProp(Child.prototype, "constructor", Child);
                return {
                    extend: props.bind(null, Child.prototype)
                };
            }
        };
    }

    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

    function getPropertyDescriptor(obj, prop) {
        var pd = getOwnPropertyDescriptor(obj, prop),
            proto;
        return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);
    }

    var _slice = [].slice;
    function slice(args, start, end) {
        return _slice.call(args, start, end);
    }

    function override(origFunc, overridedFactory) {
        return overridedFactory(origFunc);
    }

    function doFakeAutoComplete(fn) {
        var to = setTimeout(fn, 1000);
        clearTimeout(to);
    }

    function assert(b) {
        if (!b) throw new exceptions.Internal("Assertion failed");
    }

    function asap(fn) {
        if (_global.setImmediate) setImmediate(fn);else setTimeout(fn, 0);
    }

    /** Generate an object (hash map) based on given array.
     * @param extractor Function taking an array item and its index and returning an array of 2 items ([key, value]) to
     *        instert on the resulting object for each item in the array. If this function returns a falsy value, the
     *        current item wont affect the resulting object.
     */
    function arrayToObject(array, extractor) {
        return array.reduce(function (result, item, i) {
            var nameAndValue = extractor(item, i);
            if (nameAndValue) result[nameAndValue[0]] = nameAndValue[1];
            return result;
        }, {});
    }

    function trycatcher(fn, reject) {
        return function () {
            try {
                fn.apply(this, arguments);
            } catch (e) {
                reject(e);
            }
        };
    }

    function tryCatch(fn, onerror, args) {
        try {
            fn.apply(null, args);
        } catch (ex) {
            onerror && onerror(ex);
        }
    }

    function rejection(err, uncaughtHandler) {
        // Get the call stack and return a rejected promise.
        var rv = Promise.reject(err);
        return uncaughtHandler ? rv.uncaught(uncaughtHandler) : rv;
    }

    function getByKeyPath(obj, keyPath) {
        // http://www.w3.org/TR/IndexedDB/#steps-for-extracting-a-key-from-a-value-using-a-key-path
        if (hasOwn(obj, keyPath)) return obj[keyPath]; // This line is moved from last to first for optimization purpose.
        if (!keyPath) return obj;
        if (typeof keyPath !== 'string') {
            var rv = [];
            for (var i = 0, l = keyPath.length; i < l; ++i) {
                var val = getByKeyPath(obj, keyPath[i]);
                rv.push(val);
            }
            return rv;
        }
        var period = keyPath.indexOf('.');
        if (period !== -1) {
            var innerObj = obj[keyPath.substr(0, period)];
            return innerObj === undefined ? undefined : getByKeyPath(innerObj, keyPath.substr(period + 1));
        }
        return undefined;
    }

    function setByKeyPath(obj, keyPath, value) {
        if (!obj || keyPath === undefined) return;
        if ('isFrozen' in Object && Object.isFrozen(obj)) return;
        if (typeof keyPath !== 'string' && 'length' in keyPath) {
            assert(typeof value !== 'string' && 'length' in value);
            for (var i = 0, l = keyPath.length; i < l; ++i) {
                setByKeyPath(obj, keyPath[i], value[i]);
            }
        } else {
            var period = keyPath.indexOf('.');
            if (period !== -1) {
                var currentKeyPath = keyPath.substr(0, period);
                var remainingKeyPath = keyPath.substr(period + 1);
                if (remainingKeyPath === "") {
                    if (value === undefined) delete obj[currentKeyPath];else obj[currentKeyPath] = value;
                } else {
                    var innerObj = obj[currentKeyPath];
                    if (!innerObj) innerObj = obj[currentKeyPath] = {};
                    setByKeyPath(innerObj, remainingKeyPath, value);
                }
            } else {
                if (value === undefined) delete obj[keyPath];else obj[keyPath] = value;
            }
        }
    }

    function delByKeyPath(obj, keyPath) {
        if (typeof keyPath === 'string') setByKeyPath(obj, keyPath, undefined);else if ('length' in keyPath) [].map.call(keyPath, function (kp) {
            setByKeyPath(obj, kp, undefined);
        });
    }

    function shallowClone(obj) {
        var rv = {};
        for (var m in obj) {
            if (hasOwn(obj, m)) rv[m] = obj[m];
        }
        return rv;
    }

    function deepClone(any) {
        if (!any || typeof any !== 'object') return any;
        var rv;
        if (isArray(any)) {
            rv = [];
            for (var i = 0, l = any.length; i < l; ++i) {
                rv.push(deepClone(any[i]));
            }
        } else if (any instanceof Date) {
            rv = new Date();
            rv.setTime(any.getTime());
        } else {
            rv = any.constructor ? Object.create(any.constructor.prototype) : {};
            for (var prop in any) {
                if (hasOwn(any, prop)) {
                    rv[prop] = deepClone(any[prop]);
                }
            }
        }
        return rv;
    }

    function getObjectDiff(a, b, rv, prfx) {
        // Compares objects a and b and produces a diff object.
        rv = rv || {};
        prfx = prfx || '';
        keys(a).forEach(function (prop) {
            if (!hasOwn(b, prop)) rv[prfx + prop] = undefined; // Property removed
            else {
                    var ap = a[prop],
                        bp = b[prop];
                    if (typeof ap === 'object' && typeof bp === 'object' && ap && bp && ap.constructor === bp.constructor)
                        // Same type of object but its properties may have changed
                        getObjectDiff(ap, bp, rv, prfx + prop + ".");else if (ap !== bp) rv[prfx + prop] = b[prop]; // Primitive value changed
                }
        });
        keys(b).forEach(function (prop) {
            if (!hasOwn(a, prop)) {
                rv[prfx + prop] = b[prop]; // Property added
            }
        });
        return rv;
    }

    // If first argument is iterable or array-like, return it as an array
    var iteratorSymbol = typeof Symbol !== 'undefined' && Symbol.iterator;
    var getIteratorOf = iteratorSymbol ? function (x) {
        var i;
        return x != null && (i = x[iteratorSymbol]) && i.apply(x);
    } : function () {
        return null;
    };

    var NO_CHAR_ARRAY = {};
    // Takes one or several arguments and returns an array based on the following criteras:
    // * If several arguments provided, return arguments converted to an array in a way that
    //   still allows javascript engine to optimize the code.
    // * If single argument is an array, return a clone of it.
    // * If this-pointer equals NO_CHAR_ARRAY, don't accept strings as valid iterables as a special
    //   case to the two bullets below.
    // * If single argument is an iterable, convert it to an array and return the resulting array.
    // * If single argument is array-like (has length of type number), convert it to an array.
    function getArrayOf(arrayLike) {
        var i, a, x, it;
        if (arguments.length === 1) {
            if (isArray(arrayLike)) return arrayLike.slice();
            if (this === NO_CHAR_ARRAY && typeof arrayLike === 'string') return [arrayLike];
            if (it = getIteratorOf(arrayLike)) {
                a = [];
                while (x = it.next(), !x.done) {
                    a.push(x.value);
                }return a;
            }
            if (arrayLike == null) return [arrayLike];
            i = arrayLike.length;
            if (typeof i === 'number') {
                a = new Array(i);
                while (i--) {
                    a[i] = arrayLike[i];
                }return a;
            }
            return [arrayLike];
        }
        i = arguments.length;
        a = new Array(i);
        while (i--) {
            a[i] = arguments[i];
        }return a;
    }

    var concat = [].concat;
    function flatten(a) {
        return concat.apply([], a);
    }

    var dexieErrorNames = ['Modify', 'Bulk', 'OpenFailed', 'VersionChange', 'Schema', 'Upgrade', 'InvalidTable', 'MissingAPI', 'NoSuchDatabase', 'InvalidArgument', 'SubTransaction', 'Unsupported', 'Internal', 'DatabaseClosed', 'IncompatiblePromise'];

    var idbDomErrorNames = ['Unknown', 'Constraint', 'Data', 'TransactionInactive', 'ReadOnly', 'Version', 'NotFound', 'InvalidState', 'InvalidAccess', 'Abort', 'Timeout', 'QuotaExceeded', 'Syntax', 'DataClone'];

    var errorList = dexieErrorNames.concat(idbDomErrorNames);

    var defaultTexts = {
        VersionChanged: "Database version changed by other database connection",
        DatabaseClosed: "Database has been closed",
        Abort: "Transaction aborted",
        TransactionInactive: "Transaction has already completed or failed"
    };

    //
    // DexieError - base class of all out exceptions.
    //
    function DexieError(name, msg) {
        // Reason we don't use ES6 classes is because:
        // 1. It bloats transpiled code and increases size of minified code.
        // 2. It doesn't give us much in this case.
        // 3. It would require sub classes to call super(), which
        //    is not needed when deriving from Error.
        this._e = getErrorWithStack();
        this.name = name;
        this.message = msg;
    }

    derive(DexieError).from(Error).extend({
        stack: {
            get: function () {
                return this._stack || (this._stack = this.name + ": " + this.message + prettyStack(this._e, 2));
            }
        },
        toString: function () {
            return this.name + ": " + this.message;
        }
    });

    function getMultiErrorMessage(msg, failures) {
        return msg + ". Errors: " + failures.map(function (f) {
            return f.toString();
        }).filter(function (v, i, s) {
            return s.indexOf(v) === i;
        }) // Only unique error strings
        .join('\n');
    }

    //
    // ModifyError - thrown in WriteableCollection.modify()
    // Specific constructor because it contains members failures and failedKeys.
    //
    function ModifyError(msg, failures, successCount, failedKeys) {
        this._e = getErrorWithStack();
        this.failures = failures;
        this.failedKeys = failedKeys;
        this.successCount = successCount;
    }
    derive(ModifyError).from(DexieError);

    function BulkError(msg, failures) {
        this._e = getErrorWithStack();
        this.name = "BulkError";
        this.failures = failures;
        this.message = getMultiErrorMessage(msg, failures);
    }
    derive(BulkError).from(DexieError);

    //
    //
    // Dynamically generate error names and exception classes based
    // on the names in errorList.
    //
    //

    // Map of {ErrorName -> ErrorName + "Error"}
    var errnames = errorList.reduce(function (obj, name) {
        return obj[name] = name + "Error", obj;
    }, {});

    // Need an alias for DexieError because we're gonna create subclasses with the same name.
    var BaseException = DexieError;
    // Map of {ErrorName -> exception constructor}
    var exceptions = errorList.reduce(function (obj, name) {
        // Let the name be "DexieError" because this name may
        // be shown in call stack and when debugging. DexieError is
        // the most true name because it derives from DexieError,
        // and we cannot change Function.name programatically without
        // dynamically create a Function object, which would be considered
        // 'eval-evil'.
        var fullName = name + "Error";
        function DexieError(msgOrInner, inner) {
            this._e = getErrorWithStack();
            this.name = fullName;
            if (!msgOrInner) {
                this.message = defaultTexts[name] || fullName;
                this.inner = null;
            } else if (typeof msgOrInner === 'string') {
                this.message = msgOrInner;
                this.inner = inner || null;
            } else if (typeof msgOrInner === 'object') {
                this.message = msgOrInner.name + ' ' + msgOrInner.message;
                this.inner = msgOrInner;
            }
        }
        derive(DexieError).from(BaseException);
        obj[name] = DexieError;
        return obj;
    }, {});

    // Use ECMASCRIPT standard exceptions where applicable:
    exceptions.Syntax = SyntaxError;
    exceptions.Type = TypeError;
    exceptions.Range = RangeError;

    var exceptionMap = idbDomErrorNames.reduce(function (obj, name) {
        obj[name + "Error"] = exceptions[name];
        return obj;
    }, {});

    function mapError(domError, message) {
        if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name]) return domError;
        var rv = new exceptionMap[domError.name](message || domError.message, domError);
        if ("stack" in domError) {
            // Derive stack from inner exception if it has a stack
            setProp(rv, "stack", { get: function () {
                    return this.inner.stack;
                } });
        }
        return rv;
    }

    var fullNameExceptions = errorList.reduce(function (obj, name) {
        if (["Syntax", "Type", "Range"].indexOf(name) === -1) obj[name + "Error"] = exceptions[name];
        return obj;
    }, {});

    fullNameExceptions.ModifyError = ModifyError;
    fullNameExceptions.DexieError = DexieError;
    fullNameExceptions.BulkError = BulkError;

    function Events(ctx) {
        var evs = {};
        var rv = function (eventName, subscriber) {
            if (subscriber) {
                // Subscribe. If additional arguments than just the subscriber was provided, forward them as well.
                var i = arguments.length,
                    args = new Array(i - 1);
                while (--i) {
                    args[i - 1] = arguments[i];
                }evs[eventName].subscribe.apply(null, args);
                return ctx;
            } else if (typeof eventName === 'string') {
                // Return interface allowing to fire or unsubscribe from event
                return evs[eventName];
            }
        };
        rv.addEventType = add;

        for (var i = 1, l = arguments.length; i < l; ++i) {
            add(arguments[i]);
        }

        return rv;

        function add(eventName, chainFunction, defaultFunction) {
            if (typeof eventName === 'object') return addConfiguredEvents(eventName);
            if (!chainFunction) chainFunction = reverseStoppableEventChain;
            if (!defaultFunction) defaultFunction = nop;

            var context = {
                subscribers: [],
                fire: defaultFunction,
                subscribe: function (cb) {
                    if (context.subscribers.indexOf(cb) === -1) {
                        context.subscribers.push(cb);
                        context.fire = chainFunction(context.fire, cb);
                    }
                },
                unsubscribe: function (cb) {
                    context.subscribers = context.subscribers.filter(function (fn) {
                        return fn !== cb;
                    });
                    context.fire = context.subscribers.reduce(chainFunction, defaultFunction);
                }
            };
            evs[eventName] = rv[eventName] = context;
            return context;
        }

        function addConfiguredEvents(cfg) {
            // events(this, {reading: [functionChain, nop]});
            keys(cfg).forEach(function (eventName) {
                var args = cfg[eventName];
                if (isArray(args)) {
                    add(eventName, cfg[eventName][0], cfg[eventName][1]);
                } else if (args === 'asap') {
                    // Rather than approaching event subscription using a functional approach, we here do it in a for-loop where subscriber is executed in its own stack
                    // enabling that any exception that occur wont disturb the initiator and also not nescessary be catched and forgotten.
                    var context = add(eventName, mirror, function fire() {
                        // Optimazation-safe cloning of arguments into args.
                        var i = arguments.length,
                            args = new Array(i);
                        while (i--) {
                            args[i] = arguments[i];
                        } // All each subscriber:
                        context.subscribers.forEach(function (fn) {
                            asap(function fireEvent() {
                                fn.apply(null, args);
                            });
                        });
                    });
                } else throw new exceptions.InvalidArgument("Invalid event config");
            });
        }
    }

    //
    // Promise Class for Dexie library
    //
    // I started out writing this Promise class by copying promise-light (https://github.com/taylorhakes/promise-light) by
    // https://github.com/taylorhakes - an A+ and ECMASCRIPT 6 compliant Promise implementation.
    //
    // Modifications needed to be done to support indexedDB because it wont accept setTimeout()
    // (See discussion: https://github.com/promises-aplus/promises-spec/issues/45) .
    // This topic was also discussed in the following thread: https://github.com/promises-aplus/promises-spec/issues/45
    //
    // This implementation will not use setTimeout or setImmediate when it's not needed. The behavior is 100% Promise/A+ compliant since
    // the caller of new Promise() can be certain that the promise wont be triggered the lines after constructing the promise.
    //
    // In previous versions this was fixed by not calling setTimeout when knowing that the resolve() or reject() came from another
    // tick. In Dexie v1.4.0, I've rewritten the Promise class entirely. Just some fragments of promise-light is left. I use
    // another strategy now that simplifies everything a lot: to always execute callbacks in a new tick, but have an own microTick
    // engine that is used instead of setImmediate() or setTimeout().
    // Promise class has also been optimized a lot with inspiration from bluebird - to avoid closures as much as possible.
    // Also with inspiration from bluebird, asyncronic stacks in debug mode.
    //
    // Specific non-standard features of this Promise class:
    // * Async static context support (Promise.PSD)
    // * Promise.follow() method built upon PSD, that allows user to track all promises created from current stack frame
    //   and below + all promises that those promises creates or awaits.
    // * Detect any unhandled promise in a PSD-scope (PSD.onunhandled).
    //
    // David Fahlander, https://github.com/dfahlander
    //

    // Just a pointer that only this module knows about.
    // Used in Promise constructor to emulate a private constructor.
    var INTERNAL = {};

    // Async stacks (long stacks) must not grow infinitely.
    var LONG_STACKS_CLIP_LIMIT = 100;
    var MAX_LONG_STACKS = 20;
    var stack_being_generated = false;
    /* The default "nextTick" function used only for the very first promise in a promise chain.
       As soon as then promise is resolved or rejected, all next tasks will be executed in micro ticks
       emulated in this module. For indexedDB compatibility, this means that every method needs to 
       execute at least one promise before doing an indexedDB operation. Dexie will always call 
       db.ready().then() for every operation to make sure the indexedDB event is started in an
       emulated micro tick.
    */
    var schedulePhysicalTick = _global.setImmediate ?
    // setImmediate supported. Those modern platforms also supports Function.bind().
    setImmediate.bind(null, physicalTick) : _global.MutationObserver ?
    // MutationObserver supported
    function () {
        var hiddenDiv = document.createElement("div");
        new MutationObserver(function () {
            physicalTick();
            hiddenDiv = null;
        }).observe(hiddenDiv, { attributes: true });
        hiddenDiv.setAttribute('i', '1');
    } :
    // No support for setImmediate or MutationObserver. No worry, setTimeout is only called
    // once time. Every tick that follows will be our emulated micro tick.
    // Could have uses setTimeout.bind(null, 0, physicalTick) if it wasnt for that FF13 and below has a bug
    function () {
        setTimeout(physicalTick, 0);
    };

    // Confifurable through Promise.scheduler.
    // Don't export because it would be unsafe to let unknown
    // code call it unless they do try..catch within their callback.
    // This function can be retrieved through getter of Promise.scheduler though,
    // but users must not do Promise.scheduler (myFuncThatThrows exception)!
    var asap$1 = function (callback, args) {
        microtickQueue.push([callback, args]);
        if (needsNewPhysicalTick) {
            schedulePhysicalTick();
            needsNewPhysicalTick = false;
        }
    };

    var isOutsideMicroTick = true;
    var needsNewPhysicalTick = true;
    var unhandledErrors = [];
    var rejectingErrors = [];
    var currentFulfiller = null;
    var rejectionMapper = mirror;
    // Remove in next major when removing error mapping of DOMErrors and DOMExceptions

    var globalPSD = {
        global: true,
        ref: 0,
        unhandleds: [],
        onunhandled: globalError,
        //env: null, // Will be set whenever leaving a scope using wrappers.snapshot()
        finalize: function () {
            this.unhandleds.forEach(function (uh) {
                try {
                    globalError(uh[0], uh[1]);
                } catch (e) {}
            });
        }
    };

    var PSD = globalPSD;

    var microtickQueue = []; // Callbacks to call in this or next physical tick.
    var numScheduledCalls = 0; // Number of listener-calls left to do in this physical tick.
    var tickFinalizers = []; // Finalizers to call when there are no more async calls scheduled within current physical tick.

    // Wrappers are not being used yet. Their framework is functioning and can be used
    // to replace environment during a PSD scope (a.k.a. 'zone').
    /* **KEEP** export var wrappers = (() => {
        var wrappers = [];
          return {
            snapshot: () => {
                var i = wrappers.length,
                    result = new Array(i);
                while (i--) result[i] = wrappers[i].snapshot();
                return result;
            },
            restore: values => {
                var i = wrappers.length;
                while (i--) wrappers[i].restore(values[i]);
            },
            wrap: () => wrappers.map(w => w.wrap()),
            add: wrapper => {
                wrappers.push(wrapper);
            }
        };
    })();
    */

    function Promise(fn) {
        if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');
        this._listeners = [];
        this.onuncatched = nop; // Deprecate in next major. Not needed. Better to use global error handler.

        // A library may set `promise._lib = true;` after promise is created to make resolve() or reject()
        // execute the microtask engine implicitely within the call to resolve() or reject().
        // To remain A+ compliant, a library must only set `_lib=true` if it can guarantee that the stack
        // only contains library code when calling resolve() or reject().
        // RULE OF THUMB: ONLY set _lib = true for promises explicitely resolving/rejecting directly from
        // global scope (event handler, timer etc)!
        this._lib = false;
        // Current async scope
        var psd = this._PSD = PSD;

        if (debug) {
            this._stackHolder = getErrorWithStack();
            this._prev = null;
            this._numPrev = 0; // Number of previous promises (for long stacks)
            linkToPreviousPromise(this, currentFulfiller);
        }

        if (typeof fn !== 'function') {
            if (fn !== INTERNAL) throw new TypeError('Not a function');
            // Private constructor (INTERNAL, state, value).
            // Used internally by Promise.resolve() and Promise.reject().
            this._state = arguments[1];
            this._value = arguments[2];
            if (this._state === false) handleRejection(this, this._value); // Map error, set stack and addPossiblyUnhandledError().
            return;
        }

        this._state = null; // null (=pending), false (=rejected) or true (=resolved)
        this._value = null; // error or result
        ++psd.ref; // Refcounting current scope
        executePromiseTask(this, fn);
    }

    props(Promise.prototype, {

        then: function (onFulfilled, onRejected) {
            var _this = this;

            var rv = new Promise(function (resolve, reject) {
                propagateToListener(_this, new Listener(onFulfilled, onRejected, resolve, reject));
            });
            debug && (!this._prev || this._state === null) && linkToPreviousPromise(rv, this);
            return rv;
        },

        _then: function (onFulfilled, onRejected) {
            // A little tinier version of then() that don't have to create a resulting promise.
            propagateToListener(this, new Listener(null, null, onFulfilled, onRejected));
        },

        catch: function (onRejected) {
            if (arguments.length === 1) return this.then(null, onRejected);
            // First argument is the Error type to catch
            var type = arguments[0],
                handler = arguments[1];
            return typeof type === 'function' ? this.then(null, function (err) {
                return (
                    // Catching errors by its constructor type (similar to java / c++ / c#)
                    // Sample: promise.catch(TypeError, function (e) { ... });
                    err instanceof type ? handler(err) : PromiseReject(err)
                );
            }) : this.then(null, function (err) {
                return (
                    // Catching errors by the error.name property. Makes sense for indexedDB where error type
                    // is always DOMError but where e.name tells the actual error type.
                    // Sample: promise.catch('ConstraintError', function (e) { ... });
                    err && err.name === type ? handler(err) : PromiseReject(err)
                );
            });
        },

        finally: function (onFinally) {
            return this.then(function (value) {
                onFinally();
                return value;
            }, function (err) {
                onFinally();
                return PromiseReject(err);
            });
        },

        // Deprecate in next major. Needed only for db.on.error.
        uncaught: function (uncaughtHandler) {
            var _this2 = this;

            // Be backward compatible and use "onuncatched" as the event name on this.
            // Handle multiple subscribers through reverseStoppableEventChain(). If a handler returns `false`, bubbling stops.
            this.onuncatched = reverseStoppableEventChain(this.onuncatched, uncaughtHandler);
            // In case caller does this on an already rejected promise, assume caller wants to point out the error to this promise and not
            // a previous promise. Reason: the prevous promise may lack onuncatched handler.
            if (this._state === false && unhandledErrors.indexOf(this) === -1) {
                // Replace unhandled error's destinaion promise with this one!
                unhandledErrors.some(function (p, i, l) {
                    return p._value === _this2._value && (l[i] = _this2);
                });
                // Actually we do this shit because we need to support db.on.error() correctly during db.open(). If we deprecate db.on.error, we could
                // take away this piece of code as well as the onuncatched and uncaught() method.
            }
            return this;
        },

        stack: {
            get: function () {
                if (this._stack) return this._stack;
                try {
                    stack_being_generated = true;
                    var stacks = getStack(this, [], MAX_LONG_STACKS);
                    var stack = stacks.join("\nFrom previous: ");
                    if (this._state !== null) this._stack = stack; // Stack may be updated on reject.
                    return stack;
                } finally {
                    stack_being_generated = false;
                }
            }
        }
    });

    function Listener(onFulfilled, onRejected, resolve, reject) {
        this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
        this.onRejected = typeof onRejected === 'function' ? onRejected : null;
        this.resolve = resolve;
        this.reject = reject;
        this.psd = PSD;
    }

    // Promise Static Properties
    props(Promise, {
        all: function () {
            var values = getArrayOf.apply(null, arguments); // Supports iterables, implicit arguments and array-like.
            return new Promise(function (resolve, reject) {
                if (values.length === 0) resolve([]);
                var remaining = values.length;
                values.forEach(function (a, i) {
                    return Promise.resolve(a).then(function (x) {
                        values[i] = x;
                        if (! --remaining) resolve(values);
                    }, reject);
                });
            });
        },

        resolve: function (value) {
            if (value && typeof value.then === 'function') return value;
            return new Promise(INTERNAL, true, value);
        },

        reject: PromiseReject,

        race: function () {
            var values = getArrayOf.apply(null, arguments);
            return new Promise(function (resolve, reject) {
                values.map(function (value) {
                    return Promise.resolve(value).then(resolve, reject);
                });
            });
        },

        PSD: {
            get: function () {
                return PSD;
            },
            set: function (value) {
                return PSD = value;
            }
        },

        newPSD: newScope,

        usePSD: usePSD,

        scheduler: {
            get: function () {
                return asap$1;
            },
            set: function (value) {
                asap$1 = value;
            }
        },

        rejectionMapper: {
            get: function () {
                return rejectionMapper;
            },
            set: function (value) {
                rejectionMapper = value;
            } // Map reject failures
        },

        follow: function (fn) {
            return new Promise(function (resolve, reject) {
                return newScope(function (resolve, reject) {
                    var psd = PSD;
                    psd.unhandleds = []; // For unhandled standard- or 3rd party Promises. Checked at psd.finalize()
                    psd.onunhandled = reject; // Triggered directly on unhandled promises of this library.
                    psd.finalize = callBoth(function () {
                        var _this3 = this;

                        // Unhandled standard or 3rd part promises are put in PSD.unhandleds and
                        // examined upon scope completion while unhandled rejections in this Promise
                        // will trigger directly through psd.onunhandled
                        run_at_end_of_this_or_next_physical_tick(function () {
                            _this3.unhandleds.length === 0 ? resolve() : reject(_this3.unhandleds[0]);
                        });
                    }, psd.finalize);
                    fn();
                }, resolve, reject);
            });
        },

        on: Events(null, { "error": [reverseStoppableEventChain, defaultErrorHandler] // Default to defaultErrorHandler
        })

    });

    /**
    * Take a potentially misbehaving resolver function and make sure
    * onFulfilled and onRejected are only called once.
    *
    * Makes no guarantees about asynchrony.
    */
    function executePromiseTask(promise, fn) {
        // Promise Resolution Procedure:
        // https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
        try {
            fn(function (value) {
                if (promise._state !== null) return;
                if (value === promise) throw new TypeError('A promise cannot be resolved with itself.');
                var shouldExecuteTick = promise._lib && beginMicroTickScope();
                if (value && typeof value.then === 'function') {
                    executePromiseTask(promise, function (resolve, reject) {
                        value instanceof Promise ? value._then(resolve, reject) : value.then(resolve, reject);
                    });
                } else {
                    promise._state = true;
                    promise._value = value;
                    propagateAllListeners(promise);
                }
                if (shouldExecuteTick) endMicroTickScope();
            }, handleRejection.bind(null, promise)); // If Function.bind is not supported. Exception is handled in catch below
        } catch (ex) {
            handleRejection(promise, ex);
        }
    }

    function handleRejection(promise, reason) {
        rejectingErrors.push(reason);
        if (promise._state !== null) return;
        var shouldExecuteTick = promise._lib && beginMicroTickScope();
        reason = rejectionMapper(reason);
        promise._state = false;
        promise._value = reason;
        debug && reason !== null && typeof reason === 'object' && !reason._promise && tryCatch(function () {
            var origProp = getPropertyDescriptor(reason, "stack");
            reason._promise = promise;
            setProp(reason, "stack", {
                get: function () {
                    return stack_being_generated ? origProp && (origProp.get ? origProp.get.apply(reason) : origProp.value) : promise.stack;
                }
            });
        });
        // Add the failure to a list of possibly uncaught errors
        addPossiblyUnhandledError(promise);
        propagateAllListeners(promise);
        if (shouldExecuteTick) endMicroTickScope();
    }

    function propagateAllListeners(promise) {
        //debug && linkToPreviousPromise(promise);
        var listeners = promise._listeners;
        promise._listeners = [];
        for (var i = 0, len = listeners.length; i < len; ++i) {
            propagateToListener(promise, listeners[i]);
        }
        var psd = promise._PSD;
        --psd.ref || psd.finalize(); // if psd.ref reaches zero, call psd.finalize();
        if (numScheduledCalls === 0) {
            // If numScheduledCalls is 0, it means that our stack is not in a callback of a scheduled call,
            // and that no deferreds where listening to this rejection or success.
            // Since there is a risk that our stack can contain application code that may
            // do stuff after this code is finished that may generate new calls, we cannot
            // call finalizers here.
            ++numScheduledCalls;
            asap$1(function () {
                if (--numScheduledCalls === 0) finalizePhysicalTick(); // Will detect unhandled errors
            }, []);
        }
    }

    function propagateToListener(promise, listener) {
        if (promise._state === null) {
            promise._listeners.push(listener);
            return;
        }

        var cb = promise._state ? listener.onFulfilled : listener.onRejected;
        if (cb === null) {
            // This Listener doesnt have a listener for the event being triggered (onFulfilled or onReject) so lets forward the event to any eventual listeners on the Promise instance returned by then() or catch()
            return (promise._state ? listener.resolve : listener.reject)(promise._value);
        }
        var psd = listener.psd;
        ++psd.ref;
        ++numScheduledCalls;
        asap$1(callListener, [cb, promise, listener]);
    }

    function callListener(cb, promise, listener) {
        var outerScope = PSD;
        var psd = listener.psd;
        try {
            if (psd !== outerScope) {
                // **KEEP** outerScope.env = wrappers.snapshot(); // Snapshot outerScope's environment.
                PSD = psd;
                // **KEEP** wrappers.restore(psd.env); // Restore PSD's environment.
            }

            // Set static variable currentFulfiller to the promise that is being fullfilled,
            // so that we connect the chain of promises (for long stacks support)
            currentFulfiller = promise;

            // Call callback and resolve our listener with it's return value.
            var value = promise._value,
                ret;
            if (promise._state) {
                ret = cb(value);
            } else {
                if (rejectingErrors.length) rejectingErrors = [];
                ret = cb(value);
                if (rejectingErrors.indexOf(value) === -1) markErrorAsHandled(promise); // Callback didnt do Promise.reject(err) nor reject(err) onto another promise.
            }
            listener.resolve(ret);
        } catch (e) {
            // Exception thrown in callback. Reject our listener.
            listener.reject(e);
        } finally {
            // Restore PSD, env and currentFulfiller.
            if (psd !== outerScope) {
                PSD = outerScope;
                // **KEEP** wrappers.restore(outerScope.env); // Restore outerScope's environment
            }
            currentFulfiller = null;
            if (--numScheduledCalls === 0) finalizePhysicalTick();
            --psd.ref || psd.finalize();
        }
    }

    function getStack(promise, stacks, limit) {
        if (stacks.length === limit) return stacks;
        var stack = "";
        if (promise._state === false) {
            var failure = promise._value,
                errorName,
                message;

            if (failure != null) {
                errorName = failure.name || "Error";
                message = failure.message || failure;
                stack = prettyStack(failure, 0);
            } else {
                errorName = failure; // If error is undefined or null, show that.
                message = "";
            }
            stacks.push(errorName + (message ? ": " + message : "") + stack);
        }
        if (debug) {
            stack = prettyStack(promise._stackHolder, 2);
            if (stack && stacks.indexOf(stack) === -1) stacks.push(stack);
            if (promise._prev) getStack(promise._prev, stacks, limit);
        }
        return stacks;
    }

    function linkToPreviousPromise(promise, prev) {
        // Support long stacks by linking to previous completed promise.
        var numPrev = prev ? prev._numPrev + 1 : 0;
        if (numPrev < LONG_STACKS_CLIP_LIMIT) {
            // Prohibit infinite Promise loops to get an infinite long memory consuming "tail".
            promise._prev = prev;
            promise._numPrev = numPrev;
        }
    }

    /* The callback to schedule with setImmediate() or setTimeout().
       It runs a virtual microtick and executes any callback registered in microtickQueue.
     */
    function physicalTick() {
        beginMicroTickScope() && endMicroTickScope();
    }

    function beginMicroTickScope() {
        var wasRootExec = isOutsideMicroTick;
        isOutsideMicroTick = false;
        needsNewPhysicalTick = false;
        return wasRootExec;
    }

    /* Executes micro-ticks without doing try..catch.
       This can be possible because we only use this internally and
       the registered functions are exception-safe (they do try..catch
       internally before calling any external method). If registering
       functions in the microtickQueue that are not exception-safe, this
       would destroy the framework and make it instable. So we don't export
       our asap method.
    */
    function endMicroTickScope() {
        var callbacks, i, l;
        do {
            while (microtickQueue.length > 0) {
                callbacks = microtickQueue;
                microtickQueue = [];
                l = callbacks.length;
                for (i = 0; i < l; ++i) {
                    var item = callbacks[i];
                    item[0].apply(null, item[1]);
                }
            }
        } while (microtickQueue.length > 0);
        isOutsideMicroTick = true;
        needsNewPhysicalTick = true;
    }

    function finalizePhysicalTick() {
        var unhandledErrs = unhandledErrors;
        unhandledErrors = [];
        unhandledErrs.forEach(function (p) {
            p._PSD.onunhandled.call(null, p._value, p);
        });
        var finalizers = tickFinalizers.slice(0); // Clone first because finalizer may remove itself from list.
        var i = finalizers.length;
        while (i) {
            finalizers[--i]();
        }
    }

    function run_at_end_of_this_or_next_physical_tick(fn) {
        function finalizer() {
            fn();
            tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);
        }
        tickFinalizers.push(finalizer);
        ++numScheduledCalls;
        asap$1(function () {
            if (--numScheduledCalls === 0) finalizePhysicalTick();
        }, []);
    }

    function addPossiblyUnhandledError(promise) {
        // Only add to unhandledErrors if not already there. The first one to add to this list
        // will be upon the first rejection so that the root cause (first promise in the
        // rejection chain) is the one listed.
        if (!unhandledErrors.some(function (p) {
            return p._value === promise._value;
        })) unhandledErrors.push(promise);
    }

    function markErrorAsHandled(promise) {
        // Called when a reject handled is actually being called.
        // Search in unhandledErrors for any promise whos _value is this promise_value (list
        // contains only rejected promises, and only one item per error)
        var i = unhandledErrors.length;
        while (i) {
            if (unhandledErrors[--i]._value === promise._value) {
                // Found a promise that failed with this same error object pointer,
                // Remove that since there is a listener that actually takes care of it.
                unhandledErrors.splice(i, 1);
                return;
            }
        }
    }

    // By default, log uncaught errors to the console
    function defaultErrorHandler(e) {
        console.warn('Unhandled rejection: ' + (e.stack || e));
    }

    function PromiseReject(reason) {
        return new Promise(INTERNAL, false, reason);
    }

    function wrap(fn, errorCatcher) {
        var psd = PSD;
        return function () {
            var wasRootExec = beginMicroTickScope(),
                outerScope = PSD;

            try {
                if (outerScope !== psd) {
                    // **KEEP** outerScope.env = wrappers.snapshot(); // Snapshot outerScope's environment
                    PSD = psd;
                    // **KEEP** wrappers.restore(psd.env); // Restore PSD's environment.
                }
                return fn.apply(this, arguments);
            } catch (e) {
                errorCatcher && errorCatcher(e);
            } finally {
                if (outerScope !== psd) {
                    PSD = outerScope;
                    // **KEEP** wrappers.restore(outerScope.env); // Restore outerScope's environment
                }
                if (wasRootExec) endMicroTickScope();
            }
        };
    }

    function newScope(fn, a1, a2, a3) {
        var parent = PSD,
            psd = Object.create(parent);
        psd.parent = parent;
        psd.ref = 0;
        psd.global = false;
        // **KEEP** psd.env = wrappers.wrap(psd);

        // unhandleds and onunhandled should not be specifically set here.
        // Leave them on parent prototype.
        // unhandleds.push(err) will push to parent's prototype
        // onunhandled() will call parents onunhandled (with this scope's this-pointer though!)
        ++parent.ref;
        psd.finalize = function () {
            --this.parent.ref || this.parent.finalize();
        };
        var rv = usePSD(psd, fn, a1, a2, a3);
        if (psd.ref === 0) psd.finalize();
        return rv;
    }

    function usePSD(psd, fn, a1, a2, a3) {
        var outerScope = PSD;
        try {
            if (psd !== outerScope) {
                // **KEEP** outerScope.env = wrappers.snapshot(); // snapshot outerScope's environment.
                PSD = psd;
                // **KEEP** wrappers.restore(psd.env); // Restore PSD's environment.
            }
            return fn(a1, a2, a3);
        } finally {
            if (psd !== outerScope) {
                PSD = outerScope;
                // **KEEP** wrappers.restore(outerScope.env); // Restore outerScope's environment.
            }
        }
    }

    function globalError(err, promise) {
        var rv;
        try {
            rv = promise.onuncatched(err);
        } catch (e) {}
        if (rv !== false) try {
            Promise.on.error.fire(err, promise); // TODO: Deprecated and use same global handler as bluebird.
        } catch (e) {}
    }

    /* **KEEP** 
      export function wrapPromise(PromiseClass) {
        var proto = PromiseClass.prototype;
        var origThen = proto.then;
        
        wrappers.add({
            snapshot: () => proto.then,
            restore: value => {proto.then = value;},
            wrap: () => patchedThen
        });
          function patchedThen (onFulfilled, onRejected) {
            var promise = this;
            var onFulfilledProxy = wrap(function(value){
                var rv = value;
                if (onFulfilled) {
                    rv = onFulfilled(rv);
                    if (rv && typeof rv.then === 'function') rv.then(); // Intercept that promise as well.
                }
                --PSD.ref || PSD.finalize();
                return rv;
            });
            var onRejectedProxy = wrap(function(err){
                promise._$err = err;
                var unhandleds = PSD.unhandleds;
                var idx = unhandleds.length,
                    rv;
                while (idx--) if (unhandleds[idx]._$err === err) break;
                if (onRejected) {
                    if (idx !== -1) unhandleds.splice(idx, 1); // Mark as handled.
                    rv = onRejected(err);
                    if (rv && typeof rv.then === 'function') rv.then(); // Intercept that promise as well.
                } else {
                    if (idx === -1) unhandleds.push(promise);
                    rv = PromiseClass.reject(err);
                    rv._$nointercept = true; // Prohibit eternal loop.
                }
                --PSD.ref || PSD.finalize();
                return rv;
            });
            
            if (this._$nointercept) return origThen.apply(this, arguments);
            ++PSD.ref;
            return origThen.call(this, onFulfilledProxy, onRejectedProxy);
        }
    }
      // Global Promise wrapper
    if (_global.Promise) wrapPromise(_global.Promise);
      */

    doFakeAutoComplete(function () {
        // Simplify the job for VS Intellisense. This piece of code is one of the keys to the new marvellous intellisense support in Dexie.
        asap$1 = function (fn, args) {
            setTimeout(function () {
                fn.apply(null, args);
            }, 0);
        };
    });

    var DEXIE_VERSION = '1.4.2';
    var maxString = String.fromCharCode(65535);
    var maxKey = function () {
        try {
            IDBKeyRange.only([[]]);return [[]];
        } catch (e) {
            return maxString;
        }
    }();
    var INVALID_KEY_ARGUMENT = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.";
    var STRING_EXPECTED = "String expected.";
    var connections = [];
    var isIEOrEdge = typeof navigator !== 'undefined' && /(MSIE|Trident|Edge)/.test(navigator.userAgent);
    var hasIEDeleteObjectStoreBug = isIEOrEdge;
    var hangsOnDeleteLargeKeyRange = isIEOrEdge;
    var dexieStackFrameFilter = function (frame) {
        return !/(dexie\.js|dexie\.min\.js)/.test(frame);
    };
    setDebug(debug, dexieStackFrameFilter);

    function Dexie(dbName, options) {
        /// <param name="options" type="Object" optional="true">Specify only if you wich to control which addons that should run on this instance</param>
        var deps = Dexie.dependencies;
        var opts = extend({
            // Default Options
            addons: Dexie.addons, // Pick statically registered addons by default
            autoOpen: true, // Don't require db.open() explicitely.
            indexedDB: deps.indexedDB, // Backend IndexedDB api. Default to IDBShim or browser env.
            IDBKeyRange: deps.IDBKeyRange // Backend IDBKeyRange api. Default to IDBShim or browser env.
        }, options);
        var addons = opts.addons,
            autoOpen = opts.autoOpen,
            indexedDB = opts.indexedDB,
            IDBKeyRange = opts.IDBKeyRange;

        var globalSchema = this._dbSchema = {};
        var versions = [];
        var dbStoreNames = [];
        var allTables = {};
        ///<var type="IDBDatabase" />
        var idbdb = null; // Instance of IDBDatabase
        var dbOpenError = null;
        var isBeingOpened = false;
        var openComplete = false;
        var READONLY = "readonly",
            READWRITE = "readwrite";
        var db = this;
        var dbReadyResolve,
            dbReadyPromise = new Promise(function (resolve) {
            dbReadyResolve = resolve;
        }),
            cancelOpen,
            openCanceller = new Promise(function (_, reject) {
            cancelOpen = reject;
        });
        var autoSchema = true;
        var hasNativeGetDatabaseNames = !!getNativeGetDatabaseNamesFn(indexedDB),
            hasGetAll;

        function init() {
            // Default subscribers to "versionchange" and "blocked".
            // Can be overridden by custom handlers. If custom handlers return false, these default
            // behaviours will be prevented.
            db.on("versionchange", function (ev) {
                // Default behavior for versionchange event is to close database connection.
                // Caller can override this behavior by doing db.on("versionchange", function(){ return false; });
                // Let's not block the other window from making it's delete() or open() call.
                // NOTE! This event is never fired in IE,Edge or Safari.
                if (ev.newVersion > 0) console.warn('Another connection wants to upgrade database \'' + db.name + '\'. Closing db now to resume the upgrade.');else console.warn('Another connection wants to delete database \'' + db.name + '\'. Closing db now to resume the delete request.');
                db.close();
                // In many web applications, it would be recommended to force window.reload()
                // when this event occurs. To do that, subscribe to the versionchange event
                // and call window.location.reload(true) if ev.newVersion > 0 (not a deletion)
                // The reason for this is that your current web app obviously has old schema code that needs
                // to be updated. Another window got a newer version of the app and needs to upgrade DB but
                // your window is blocking it unless we close it here.
            });
            db.on("blocked", function (ev) {
                if (!ev.newVersion || ev.newVersion < ev.oldVersion) console.warn('Dexie.delete(\'' + db.name + '\') was blocked');else console.warn('Upgrade \'' + db.name + '\' blocked by other connection holding version ' + ev.oldVersion / 10);
            });
        }

        //
        //
        //
        // ------------------------- Versioning Framework---------------------------
        //
        //
        //

        this.version = function (versionNumber) {
            /// <param name="versionNumber" type="Number"></param>
            /// <returns type="Version"></returns>
            if (idbdb || isBeingOpened) throw new exceptions.Schema("Cannot add version when database is open");
            this.verno = Math.max(this.verno, versionNumber);
            var versionInstance = versions.filter(function (v) {
                return v._cfg.version === versionNumber;
            })[0];
            if (versionInstance) return versionInstance;
            versionInstance = new Version(versionNumber);
            versions.push(versionInstance);
            versions.sort(lowerVersionFirst);
            return versionInstance;
        };

        function Version(versionNumber) {
            this._cfg = {
                version: versionNumber,
                storesSource: null,
                dbschema: {},
                tables: {},
                contentUpgrade: null
            };
            this.stores({}); // Derive earlier schemas by default.
        }

        extend(Version.prototype, {
            stores: function (stores) {
                /// <summary>
                ///   Defines the schema for a particular version
                /// </summary>
                /// <param name="stores" type="Object">
                /// Example: <br/>
                ///   {users: "id++,first,last,&amp;username,*email", <br/>
                ///   passwords: "id++,&amp;username"}<br/>
                /// <br/>
                /// Syntax: {Table: "[primaryKey][++],[&amp;][*]index1,[&amp;][*]index2,..."}<br/><br/>
                /// Special characters:<br/>
                ///  "&amp;"  means unique key, <br/>
                ///  "*"  means value is multiEntry, <br/>
                ///  "++" means auto-increment and only applicable for primary key <br/>
                /// </param>
                this._cfg.storesSource = this._cfg.storesSource ? extend(this._cfg.storesSource, stores) : stores;

                // Derive stores from earlier versions if they are not explicitely specified as null or a new syntax.
                var storesSpec = {};
                versions.forEach(function (version) {
                    // 'versions' is always sorted by lowest version first.
                    extend(storesSpec, version._cfg.storesSource);
                });

                var dbschema = this._cfg.dbschema = {};
                this._parseStoresSpec(storesSpec, dbschema);
                // Update the latest schema to this version
                // Update API
                globalSchema = db._dbSchema = dbschema;
                removeTablesApi([allTables, db, Transaction.prototype]);
                setApiOnPlace([allTables, db, Transaction.prototype, this._cfg.tables], keys(dbschema), READWRITE, dbschema);
                dbStoreNames = keys(dbschema);
                return this;
            },
            upgrade: function (upgradeFunction) {
                /// <param name="upgradeFunction" optional="true">Function that performs upgrading actions.</param>
                var self = this;
                fakeAutoComplete(function () {
                    upgradeFunction(db._createTransaction(READWRITE, keys(self._cfg.dbschema), self._cfg.dbschema)); // BUGBUG: No code completion for prev version's tables wont appear.
                });
                this._cfg.contentUpgrade = upgradeFunction;
                return this;
            },
            _parseStoresSpec: function (stores, outSchema) {
                keys(stores).forEach(function (tableName) {
                    if (stores[tableName] !== null) {
                        var instanceTemplate = {};
                        var indexes = parseIndexSyntax(stores[tableName]);
                        var primKey = indexes.shift();
                        if (primKey.multi) throw new exceptions.Schema("Primary key cannot be multi-valued");
                        if (primKey.keyPath) setByKeyPath(instanceTemplate, primKey.keyPath, primKey.auto ? 0 : primKey.keyPath);
                        indexes.forEach(function (idx) {
                            if (idx.auto) throw new exceptions.Schema("Only primary key can be marked as autoIncrement (++)");
                            if (!idx.keyPath) throw new exceptions.Schema("Index must have a name and cannot be an empty string");
                            setByKeyPath(instanceTemplate, idx.keyPath, idx.compound ? idx.keyPath.map(function () {
                                return "";
                            }) : "");
                        });
                        outSchema[tableName] = new TableSchema(tableName, primKey, indexes, instanceTemplate);
                    }
                });
            }
        });

        function runUpgraders(oldVersion, idbtrans, reject) {
            var trans = db._createTransaction(READWRITE, dbStoreNames, globalSchema);
            trans.create(idbtrans);
            trans._completion.catch(reject);
            var rejectTransaction = trans._reject.bind(trans);
            newScope(function () {
                PSD.trans = trans;
                if (oldVersion === 0) {
                    // Create tables:
                    keys(globalSchema).forEach(function (tableName) {
                        createTable(idbtrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);
                    });
                    Promise.follow(function () {
                        return db.on.populate.fire(trans);
                    }).catch(rejectTransaction);
                } else updateTablesAndIndexes(oldVersion, trans, idbtrans).catch(rejectTransaction);
            });
        }

        function updateTablesAndIndexes(oldVersion, trans, idbtrans) {
            // Upgrade version to version, step-by-step from oldest to newest version.
            // Each transaction object will contain the table set that was current in that version (but also not-yet-deleted tables from its previous version)
            var queue = [];
            var oldVersionStruct = versions.filter(function (version) {
                return version._cfg.version === oldVersion;
            })[0];
            if (!oldVersionStruct) throw new exceptions.Upgrade("Dexie specification of currently installed DB version is missing");
            globalSchema = db._dbSchema = oldVersionStruct._cfg.dbschema;
            var anyContentUpgraderHasRun = false;

            var versToRun = versions.filter(function (v) {
                return v._cfg.version > oldVersion;
            });
            versToRun.forEach(function (version) {
                /// <param name="version" type="Version"></param>
                queue.push(function () {
                    var oldSchema = globalSchema;
                    var newSchema = version._cfg.dbschema;
                    adjustToExistingIndexNames(oldSchema, idbtrans);
                    adjustToExistingIndexNames(newSchema, idbtrans);
                    globalSchema = db._dbSchema = newSchema;
                    var diff = getSchemaDiff(oldSchema, newSchema);
                    // Add tables          
                    diff.add.forEach(function (tuple) {
                        createTable(idbtrans, tuple[0], tuple[1].primKey, tuple[1].indexes);
                    });
                    // Change tables
                    diff.change.forEach(function (change) {
                        if (change.recreate) {
                            throw new exceptions.Upgrade("Not yet support for changing primary key");
                        } else {
                            var store = idbtrans.objectStore(change.name);
                            // Add indexes
                            change.add.forEach(function (idx) {
                                addIndex(store, idx);
                            });
                            // Update indexes
                            change.change.forEach(function (idx) {
                                store.deleteIndex(idx.name);
                                addIndex(store, idx);
                            });
                            // Delete indexes
                            change.del.forEach(function (idxName) {
                                store.deleteIndex(idxName);
                            });
                        }
                    });
                    if (version._cfg.contentUpgrade) {
                        anyContentUpgraderHasRun = true;
                        return Promise.follow(function () {
                            version._cfg.contentUpgrade(trans);
                        });
                    }
                });
                queue.push(function (idbtrans) {
                    if (!anyContentUpgraderHasRun || !hasIEDeleteObjectStoreBug) {
                        // Dont delete old tables if ieBug is present and a content upgrader has run. Let tables be left in DB so far. This needs to be taken care of.
                        var newSchema = version._cfg.dbschema;
                        // Delete old tables
                        deleteRemovedTables(newSchema, idbtrans);
                    }
                });
            });

            // Now, create a queue execution engine
            function runQueue() {
                return queue.length ? Promise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) : Promise.resolve();
            }

            return runQueue().then(function () {
                createMissingTables(globalSchema, idbtrans); // At last, make sure to create any missing tables. (Needed by addons that add stores to DB without specifying version)
            });
        }

        function getSchemaDiff(oldSchema, newSchema) {
            var diff = {
                del: [], // Array of table names
                add: [], // Array of [tableName, newDefinition]
                change: [] // Array of {name: tableName, recreate: newDefinition, del: delIndexNames, add: newIndexDefs, change: changedIndexDefs}
            };
            for (var table in oldSchema) {
                if (!newSchema[table]) diff.del.push(table);
            }
            for (table in newSchema) {
                var oldDef = oldSchema[table],
                    newDef = newSchema[table];
                if (!oldDef) {
                    diff.add.push([table, newDef]);
                } else {
                    var change = {
                        name: table,
                        def: newDef,
                        recreate: false,
                        del: [],
                        add: [],
                        change: []
                    };
                    if (oldDef.primKey.src !== newDef.primKey.src) {
                        // Primary key has changed. Remove and re-add table.
                        change.recreate = true;
                        diff.change.push(change);
                    } else {
                        // Same primary key. Just find out what differs:
                        var oldIndexes = oldDef.idxByName;
                        var newIndexes = newDef.idxByName;
                        for (var idxName in oldIndexes) {
                            if (!newIndexes[idxName]) change.del.push(idxName);
                        }
                        for (idxName in newIndexes) {
                            var oldIdx = oldIndexes[idxName],
                                newIdx = newIndexes[idxName];
                            if (!oldIdx) change.add.push(newIdx);else if (oldIdx.src !== newIdx.src) change.change.push(newIdx);
                        }
                        if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {
                            diff.change.push(change);
                        }
                    }
                }
            }
            return diff;
        }

        function createTable(idbtrans, tableName, primKey, indexes) {
            /// <param name="idbtrans" type="IDBTransaction"></param>
            var store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ? { keyPath: primKey.keyPath, autoIncrement: primKey.auto } : { autoIncrement: primKey.auto });
            indexes.forEach(function (idx) {
                addIndex(store, idx);
            });
            return store;
        }

        function createMissingTables(newSchema, idbtrans) {
            keys(newSchema).forEach(function (tableName) {
                if (!idbtrans.db.objectStoreNames.contains(tableName)) {
                    createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);
                }
            });
        }

        function deleteRemovedTables(newSchema, idbtrans) {
            for (var i = 0; i < idbtrans.db.objectStoreNames.length; ++i) {
                var storeName = idbtrans.db.objectStoreNames[i];
                if (newSchema[storeName] == null) {
                    idbtrans.db.deleteObjectStore(storeName);
                }
            }
        }

        function addIndex(store, idx) {
            store.createIndex(idx.name, idx.keyPath, { unique: idx.unique, multiEntry: idx.multi });
        }

        function dbUncaught(err) {
            return db.on.error.fire(err);
        }

        //
        //
        //      Dexie Protected API
        //
        //

        this._allTables = allTables;

        this._tableFactory = function createTable(mode, tableSchema) {
            /// <param name="tableSchema" type="TableSchema"></param>
            if (mode === READONLY) return new Table(tableSchema.name, tableSchema, Collection);else return new WriteableTable(tableSchema.name, tableSchema);
        };

        this._createTransaction = function (mode, storeNames, dbschema, parentTransaction) {
            return new Transaction(mode, storeNames, dbschema, parentTransaction);
        };

        /* Generate a temporary transaction when db operations are done outside a transactino scope.
        */
        function tempTransaction(mode, storeNames, fn) {
            // Last argument is "writeLocked". But this doesnt apply to oneshot direct db operations, so we ignore it.
            if (!openComplete && !PSD.letThrough) {
                if (!isBeingOpened) {
                    if (!autoOpen) return rejection(new exceptions.DatabaseClosed(), dbUncaught);
                    db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.
                }
                return dbReadyPromise.then(function () {
                    return tempTransaction(mode, storeNames, fn);
                });
            } else {
                var trans = db._createTransaction(mode, storeNames, globalSchema);
                return trans._promise(mode, function (resolve, reject) {
                    newScope(function () {
                        // OPTIMIZATION POSSIBLE? newScope() not needed because it's already done in _promise.
                        PSD.trans = trans;
                        fn(resolve, reject, trans);
                    });
                }).then(function (result) {
                    // Instead of resolving value directly, wait with resolving it until transaction has completed.
                    // Otherwise the data would not be in the DB if requesting it in the then() operation.
                    // Specifically, to ensure that the following expression will work:
                    //
                    //   db.friends.put({name: "Arne"}).then(function () {
                    //       db.friends.where("name").equals("Arne").count(function(count) {
                    //           assert (count === 1);
                    //       });
                    //   });
                    //
                    return trans._completion.then(function () {
                        return result;
                    });
                }); /*.catch(err => { // Don't do this as of now. If would affect bulk- and modify methods in a way that could be more intuitive. But wait! Maybe change in next major.
                     trans._reject(err);
                     return rejection(err);
                    });*/
            }
        }

        this._whenReady = function (fn) {
            return new Promise(fake || openComplete || PSD.letThrough ? fn : function (resolve, reject) {
                if (!isBeingOpened) {
                    if (!autoOpen) {
                        reject(new exceptions.DatabaseClosed());
                        return;
                    }
                    db.open().catch(nop); // Open in background. If if fails, it will be catched by the final promise anyway.
                }
                dbReadyPromise.then(function () {
                    fn(resolve, reject);
                });
            }).uncaught(dbUncaught);
        };

        //
        //
        //
        //
        //      Dexie API
        //
        //
        //

        this.verno = 0;

        this.open = function () {
            if (isBeingOpened || idbdb) return dbReadyPromise.then(function () {
                return dbOpenError ? rejection(dbOpenError, dbUncaught) : db;
            });
            debug && (openCanceller._stackHolder = getErrorWithStack()); // Let stacks point to when open() was called rather than where new Dexie() was called.
            isBeingOpened = true;
            dbOpenError = null;
            openComplete = false;

            // Function pointers to call when the core opening process completes.
            var resolveDbReady = dbReadyResolve,


            // upgradeTransaction to abort on failure.
            upgradeTransaction = null;

            return Promise.race([openCanceller, new Promise(function (resolve, reject) {
                doFakeAutoComplete(function () {
                    return resolve();
                });

                // Make sure caller has specified at least one version
                if (versions.length > 0) autoSchema = false;

                // Multiply db.verno with 10 will be needed to workaround upgrading bug in IE:
                // IE fails when deleting objectStore after reading from it.
                // A future version of Dexie.js will stopover an intermediate version to workaround this.
                // At that point, we want to be backward compatible. Could have been multiplied with 2, but by using 10, it is easier to map the number to the real version number.

                // If no API, throw!
                if (!indexedDB) throw new exceptions.MissingAPI("indexedDB API not found. If using IE10+, make sure to run your code on a server URL " + "(not locally). If using old Safari versions, make sure to include indexedDB polyfill.");

                var req = autoSchema ? indexedDB.open(dbName) : indexedDB.open(dbName, Math.round(db.verno * 10));
                if (!req) throw new exceptions.MissingAPI("IndexedDB API not available"); // May happen in Safari private mode, see https://github.com/dfahlander/Dexie.js/issues/134
                req.onerror = wrap(eventRejectHandler(reject));
                req.onblocked = wrap(fireOnBlocked);
                req.onupgradeneeded = wrap(function (e) {
                    upgradeTransaction = req.transaction;
                    if (autoSchema && !db._allowEmptyDB) {
                        // Unless an addon has specified db._allowEmptyDB, lets make the call fail.
                        // Caller did not specify a version or schema. Doing that is only acceptable for opening alread existing databases.
                        // If onupgradeneeded is called it means database did not exist. Reject the open() promise and make sure that we
                        // do not create a new database by accident here.
                        req.onerror = preventDefault; // Prohibit onabort error from firing before we're done!
                        upgradeTransaction.abort(); // Abort transaction (would hope that this would make DB disappear but it doesnt.)
                        // Close database and delete it.
                        req.result.close();
                        var delreq = indexedDB.deleteDatabase(dbName); // The upgrade transaction is atomic, and javascript is single threaded - meaning that there is no risk that we delete someone elses database here!
                        delreq.onsuccess = delreq.onerror = wrap(function () {
                            reject(new exceptions.NoSuchDatabase('Database ' + dbName + ' doesnt exist'));
                        });
                    } else {
                        upgradeTransaction.onerror = wrap(eventRejectHandler(reject));
                        var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion; // Safari 8 fix.
                        runUpgraders(oldVer / 10, upgradeTransaction, reject, req);
                    }
                }, reject);

                req.onsuccess = wrap(function () {
                    // Core opening procedure complete. Now let's just record some stuff.
                    upgradeTransaction = null;
                    idbdb = req.result;
                    connections.push(db); // Used for emulating versionchange event on IE/Edge/Safari.

                    if (autoSchema) readGlobalSchema();else if (idbdb.objectStoreNames.length > 0) {
                        try {
                            adjustToExistingIndexNames(globalSchema, idbdb.transaction(safariMultiStoreFix(idbdb.objectStoreNames), READONLY));
                        } catch (e) {
                            // Safari may bail out if > 1 store names. However, this shouldnt be a showstopper. Issue #120.
                        }
                    }

                    idbdb.onversionchange = wrap(function (ev) {
                        db._vcFired = true; // detect implementations that not support versionchange (IE/Edge/Safari)
                        db.on("versionchange").fire(ev);
                    });

                    if (!hasNativeGetDatabaseNames) {
                        // Update localStorage with list of database names
                        globalDatabaseList(function (databaseNames) {
                            if (databaseNames.indexOf(dbName) === -1) return databaseNames.push(dbName);
                        });
                    }

                    resolve();
                }, reject);
            })]).then(function () {
                // Before finally resolving the dbReadyPromise and this promise,
                // call and await all on('ready') subscribers:
                // Dexie.vip() makes subscribers able to use the database while being opened.
                // This is a must since these subscribers take part of the opening procedure.
                return Dexie.vip(db.on.ready.fire);
            }).then(function () {
                // Resolve the db.open() with the db instance.
                isBeingOpened = false;
                return db;
            }).catch(function (err) {
                try {
                    // Did we fail within onupgradeneeded? Make sure to abort the upgrade transaction so it doesnt commit.
                    upgradeTransaction && upgradeTransaction.abort();
                } catch (e) {}
                isBeingOpened = false; // Set before calling db.close() so that it doesnt reject openCanceller again (leads to unhandled rejection event).
                db.close(); // Closes and resets idbdb, removes connections, resets dbReadyPromise and openCanceller so that a later db.open() is fresh.
                // A call to db.close() may have made on-ready subscribers fail. Use dbOpenError if set, since err could be a follow-up error on that.
                dbOpenError = err; // Record the error. It will be used to reject further promises of db operations.
                return rejection(dbOpenError, dbUncaught); // dbUncaught will make sure any error that happened in any operation before will now bubble to db.on.error() thanks to the special handling in Promise.uncaught().
            }).finally(function () {
                openComplete = true;
                resolveDbReady(); // dbReadyPromise is resolved no matter if open() rejects or resolved. It's just to wake up waiters.
            });
        };

        this.close = function () {
            var idx = connections.indexOf(db);
            if (idx >= 0) connections.splice(idx, 1);
            if (idbdb) {
                try {
                    idbdb.close();
                } catch (e) {}
                idbdb = null;
            }
            autoOpen = false;
            dbOpenError = new exceptions.DatabaseClosed();
            if (isBeingOpened) cancelOpen(dbOpenError);
            // Reset dbReadyPromise promise:
            dbReadyPromise = new Promise(function (resolve) {
                dbReadyResolve = resolve;
            });
            openCanceller = new Promise(function (_, reject) {
                cancelOpen = reject;
            });
        };

        this.delete = function () {
            var hasArguments = arguments.length > 0;
            return new Promise(function (resolve, reject) {
                if (hasArguments) throw new exceptions.InvalidArgument("Arguments not allowed in db.delete()");
                if (isBeingOpened) {
                    dbReadyPromise.then(doDelete);
                } else {
                    doDelete();
                }
                function doDelete() {
                    db.close();
                    var req = indexedDB.deleteDatabase(dbName);
                    req.onsuccess = wrap(function () {
                        if (!hasNativeGetDatabaseNames) {
                            globalDatabaseList(function (databaseNames) {
                                var pos = databaseNames.indexOf(dbName);
                                if (pos >= 0) return databaseNames.splice(pos, 1);
                            });
                        }
                        resolve();
                    });
                    req.onerror = wrap(eventRejectHandler(reject));
                    req.onblocked = fireOnBlocked;
                }
            }).uncaught(dbUncaught);
        };

        this.backendDB = function () {
            return idbdb;
        };

        this.isOpen = function () {
            return idbdb !== null;
        };
        this.hasFailed = function () {
            return dbOpenError !== null;
        };
        this.dynamicallyOpened = function () {
            return autoSchema;
        };

        //
        // Properties
        //
        this.name = dbName;

        // db.tables - an array of all Table instances.
        setProp(this, "tables", {
            get: function () {
                /// <returns type="Array" elementType="WriteableTable" />
                return keys(allTables).map(function (name) {
                    return allTables[name];
                });
            }
        });

        //
        // Events
        //
        this.on = Events(this, "error", "populate", "blocked", "versionchange", { ready: [promisableChain, nop] });

        this.on.ready.subscribe = override(this.on.ready.subscribe, function (subscribe) {
            return function (subscriber, bSticky) {
                Dexie.vip(function () {
                    if (openComplete) {
                        // Database already open. Call subscriber asap.
                        Promise.resolve().then(subscriber);
                        // bSticky: Also subscribe to future open sucesses (after close / reopen)
                        if (bSticky) subscribe(subscriber);
                    } else {
                        // Database not yet open. Subscribe to it.
                        subscribe(subscriber);
                        // If bSticky is falsy, make sure to unsubscribe subscriber when fired once.
                        if (!bSticky) subscribe(function unsubscribe() {
                            db.on.ready.unsubscribe(subscriber);
                            db.on.ready.unsubscribe(unsubscribe);
                        });
                    }
                });
            };
        });

        fakeAutoComplete(function () {
            db.on("populate").fire(db._createTransaction(READWRITE, dbStoreNames, globalSchema));
            db.on("error").fire(new Error());
        });

        this.transaction = function (mode, tableInstances, scopeFunc) {
            /// <summary>
            ///
            /// </summary>
            /// <param name="mode" type="String">"r" for readonly, or "rw" for readwrite</param>
            /// <param name="tableInstances">Table instance, Array of Table instances, String or String Array of object stores to include in the transaction</param>
            /// <param name="scopeFunc" type="Function">Function to execute with transaction</param>

            // Let table arguments be all arguments between mode and last argument.
            var i = arguments.length;
            if (i < 2) throw new exceptions.InvalidArgument("Too few arguments");
            // Prevent optimzation killer (https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments)
            // and clone arguments except the first one into local var 'args'.
            var args = new Array(i - 1);
            while (--i) {
                args[i - 1] = arguments[i];
            } // Let scopeFunc be the last argument and pop it so that args now only contain the table arguments.
            scopeFunc = args.pop();
            var tables = flatten(args); // Support using array as middle argument, or a mix of arrays and non-arrays.
            var parentTransaction = PSD.trans;
            // Check if parent transactions is bound to this db instance, and if caller wants to reuse it
            if (!parentTransaction || parentTransaction.db !== db || mode.indexOf('!') !== -1) parentTransaction = null;
            var onlyIfCompatible = mode.indexOf('?') !== -1;
            mode = mode.replace('!', '').replace('?', ''); // Ok. Will change arguments[0] as well but we wont touch arguments henceforth.

            try {
                //
                // Get storeNames from arguments. Either through given table instances, or through given table names.
                //
                var storeNames = tables.map(function (table) {
                    var storeName = table instanceof Table ? table.name : table;
                    if (typeof storeName !== 'string') throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
                    return storeName;
                });

                //
                // Resolve mode. Allow shortcuts "r" and "rw".
                //
                if (mode == "r" || mode == READONLY) mode = READONLY;else if (mode == "rw" || mode == READWRITE) mode = READWRITE;else throw new exceptions.InvalidArgument("Invalid transaction mode: " + mode);

                if (parentTransaction) {
                    // Basic checks
                    if (parentTransaction.mode === READONLY && mode === READWRITE) {
                        if (onlyIfCompatible) {
                            // Spawn new transaction instead.
                            parentTransaction = null;
                        } else throw new exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
                    }
                    if (parentTransaction) {
                        storeNames.forEach(function (storeName) {
                            if (!hasOwn(parentTransaction.tables, storeName)) {
                                if (onlyIfCompatible) {
                                    // Spawn new transaction instead.
                                    parentTransaction = null;
                                } else throw new exceptions.SubTransaction("Table " + storeName + " not included in parent transaction.");
                            }
                        });
                    }
                }
            } catch (e) {
                return parentTransaction ? parentTransaction._promise(null, function (_, reject) {
                    reject(e);
                }) : rejection(e, dbUncaught);
            }
            // If this is a sub-transaction, lock the parent and then launch the sub-transaction.
            return parentTransaction ? parentTransaction._promise(mode, enterTransactionScope, "lock") : db._whenReady(enterTransactionScope);

            function enterTransactionScope(resolve) {
                var parentPSD = PSD;
                resolve(Promise.resolve().then(function () {
                    return newScope(function () {
                        // Keep a pointer to last non-transactional PSD to use if someone calls Dexie.ignoreTransaction().
                        PSD.transless = PSD.transless || parentPSD;
                        // Our transaction.
                        //return new Promise((resolve, reject) => {
                        var trans = db._createTransaction(mode, storeNames, globalSchema, parentTransaction);
                        // Let the transaction instance be part of a Promise-specific data (PSD) value.
                        PSD.trans = trans;

                        if (parentTransaction) {
                            // Emulate transaction commit awareness for inner transaction (must 'commit' when the inner transaction has no more operations ongoing)
                            trans.idbtrans = parentTransaction.idbtrans;
                        } else {
                            trans.create(); // Create the backend transaction so that complete() or error() will trigger even if no operation is made upon it.
                        }

                        // Provide arguments to the scope function (for backward compatibility)
                        var tableArgs = storeNames.map(function (name) {
                            return trans.tables[name];
                        });
                        tableArgs.push(trans);

                        var returnValue;
                        return Promise.follow(function () {
                            // Finally, call the scope function with our table and transaction arguments.
                            returnValue = scopeFunc.apply(trans, tableArgs); // NOTE: returnValue is used in trans.on.complete() not as a returnValue to this func.
                            if (returnValue) {
                                if (typeof returnValue.next === 'function' && typeof returnValue.throw === 'function') {
                                    // scopeFunc returned an iterator with throw-support. Handle yield as await.
                                    returnValue = awaitIterator(returnValue);
                                } else if (typeof returnValue.then === 'function' && !hasOwn(returnValue, '_PSD')) {
                                    throw new exceptions.IncompatiblePromise("Incompatible Promise returned from transaction scope (read more at http://tinyurl.com/znyqjqc). Transaction scope: " + scopeFunc.toString());
                                }
                            }
                        }).uncaught(dbUncaught).then(function () {
                            if (parentTransaction) trans._resolve(); // sub transactions don't react to idbtrans.oncomplete. We must trigger a acompletion.
                            return trans._completion; // Even if WE believe everything is fine. Await IDBTransaction's oncomplete or onerror as well.
                        }).then(function () {
                            return returnValue;
                        }).catch(function (e) {
                            //reject(e);
                            trans._reject(e); // Yes, above then-handler were maybe not called because of an unhandled rejection in scopeFunc!
                            return rejection(e);
                        });
                        //});
                    });
                }));
            }
        };

        this.table = function (tableName) {
            /// <returns type="WriteableTable"></returns>
            if (fake && autoSchema) return new WriteableTable(tableName);
            if (!hasOwn(allTables, tableName)) {
                throw new exceptions.InvalidTable('Table ' + tableName + ' does not exist');
            }
            return allTables[tableName];
        };

        //
        //
        //
        // Table Class
        //
        //
        //
        function Table(name, tableSchema, collClass) {
            /// <param name="name" type="String"></param>
            this.name = name;
            this.schema = tableSchema;
            this.hook = allTables[name] ? allTables[name].hook : Events(null, {
                "creating": [hookCreatingChain, nop],
                "reading": [pureFunctionChain, mirror],
                "updating": [hookUpdatingChain, nop],
                "deleting": [hookDeletingChain, nop]
            });
            this._collClass = collClass || Collection;
        }

        props(Table.prototype, {

            //
            // Table Protected Methods
            //

            _trans: function getTransaction(mode, fn, writeLocked) {
                var trans = PSD.trans;
                return trans && trans.db === db ? trans._promise(mode, fn, writeLocked) : tempTransaction(mode, [this.name], fn);
            },
            _idbstore: function getIDBObjectStore(mode, fn, writeLocked) {
                if (fake) return new Promise(fn); // Simplify the work for Intellisense/Code completion.
                var trans = PSD.trans,
                    tableName = this.name;
                function supplyIdbStore(resolve, reject, trans) {
                    fn(resolve, reject, trans.idbtrans.objectStore(tableName), trans);
                }
                return trans && trans.db === db ? trans._promise(mode, supplyIdbStore, writeLocked) : tempTransaction(mode, [this.name], supplyIdbStore);
            },

            //
            // Table Public Methods
            //
            get: function (key, cb) {
                var self = this;
                return this._idbstore(READONLY, function (resolve, reject, idbstore) {
                    fake && resolve(self.schema.instanceTemplate);
                    var req = idbstore.get(key);
                    req.onerror = eventRejectHandler(reject);
                    req.onsuccess = function () {
                        resolve(self.hook.reading.fire(req.result));
                    };
                }).then(cb);
            },
            where: function (indexName) {
                return new WhereClause(this, indexName);
            },
            count: function (cb) {
                return this.toCollection().count(cb);
            },
            offset: function (offset) {
                return this.toCollection().offset(offset);
            },
            limit: function (numRows) {
                return this.toCollection().limit(numRows);
            },
            reverse: function () {
                return this.toCollection().reverse();
            },
            filter: function (filterFunction) {
                return this.toCollection().and(filterFunction);
            },
            each: function (fn) {
                return this.toCollection().each(fn);
            },
            toArray: function (cb) {
                return this.toCollection().toArray(cb);
            },
            orderBy: function (index) {
                return new this._collClass(new WhereClause(this, index));
            },

            toCollection: function () {
                return new this._collClass(new WhereClause(this));
            },

            mapToClass: function (constructor, structure) {
                /// <summary>
                ///     Map table to a javascript constructor function. Objects returned from the database will be instances of this class, making
                ///     it possible to the instanceOf operator as well as extending the class using constructor.prototype.method = function(){...}.
                /// </summary>
                /// <param name="constructor">Constructor function representing the class.</param>
                /// <param name="structure" optional="true">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also
                /// know what type each member has. Example: {name: String, emailAddresses: [String], password}</param>
                this.schema.mappedClass = constructor;
                var instanceTemplate = Object.create(constructor.prototype);
                if (structure) {
                    // structure and instanceTemplate is for IDE code competion only while constructor.prototype is for actual inheritance.
                    applyStructure(instanceTemplate, structure);
                }
                this.schema.instanceTemplate = instanceTemplate;

                // Now, subscribe to the when("reading") event to make all objects that come out from this table inherit from given class
                // no matter which method to use for reading (Table.get() or Table.where(...)... )
                var readHook = function (obj) {
                    if (!obj) return obj; // No valid object. (Value is null). Return as is.
                    // Create a new object that derives from constructor:
                    var res = Object.create(constructor.prototype);
                    // Clone members:
                    for (var m in obj) {
                        if (hasOwn(obj, m)) res[m] = obj[m];
                    }return res;
                };

                if (this.schema.readHook) {
                    this.hook.reading.unsubscribe(this.schema.readHook);
                }
                this.schema.readHook = readHook;
                this.hook("reading", readHook);
                return constructor;
            },
            defineClass: function (structure) {
                /// <summary>
                ///     Define all members of the class that represents the table. This will help code completion of when objects are read from the database
                ///     as well as making it possible to extend the prototype of the returned constructor function.
                /// </summary>
                /// <param name="structure">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also
                /// know what type each member has. Example: {name: String, emailAddresses: [String], properties: {shoeSize: Number}}</param>
                return this.mapToClass(Dexie.defineClass(structure), structure);
            }
        });

        //
        //
        //
        // WriteableTable Class (extends Table)
        //
        //
        //
        function WriteableTable(name, tableSchema, collClass) {
            Table.call(this, name, tableSchema, collClass || WriteableCollection);
        }

        function BulkErrorHandlerCatchAll(errorList, done, supportHooks) {
            return (supportHooks ? hookedEventRejectHandler : eventRejectHandler)(function (e) {
                errorList.push(e);
                done && done();
            });
        }

        function bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook) {
            // If hasDeleteHook, keysOrTuples must be an array of tuples: [[key1, value2],[key2,value2],...],
            // else keysOrTuples must be just an array of keys: [key1, key2, ...].
            return new Promise(function (resolve, reject) {
                var len = keysOrTuples.length,
                    lastItem = len - 1;
                if (len === 0) return resolve();
                if (!hasDeleteHook) {
                    for (var i = 0; i < len; ++i) {
                        var req = idbstore.delete(keysOrTuples[i]);
                        req.onerror = wrap(eventRejectHandler(reject));
                        if (i === lastItem) req.onsuccess = wrap(function () {
                            return resolve();
                        });
                    }
                } else {
                    var hookCtx,
                        errorHandler = hookedEventRejectHandler(reject),
                        successHandler = hookedEventSuccessHandler(null);
                    tryCatch(function () {
                        for (var i = 0; i < len; ++i) {
                            hookCtx = { onsuccess: null, onerror: null };
                            var tuple = keysOrTuples[i];
                            deletingHook.call(hookCtx, tuple[0], tuple[1], trans);
                            var req = idbstore.delete(tuple[0]);
                            req._hookCtx = hookCtx;
                            req.onerror = errorHandler;
                            if (i === lastItem) req.onsuccess = hookedEventSuccessHandler(resolve);else req.onsuccess = successHandler;
                        }
                    }, function (err) {
                        hookCtx.onerror && hookCtx.onerror(err);
                        throw err;
                    });
                }
            }).uncaught(dbUncaught);
        }

        derive(WriteableTable).from(Table).extend({
            bulkDelete: function (keys) {
                if (this.hook.deleting.fire === nop) {
                    return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {
                        resolve(bulkDelete(idbstore, trans, keys, false, nop));
                    });
                } else {
                    return this.where(':id').anyOf(keys).delete().then(function () {}); // Resolve with undefined.
                }
            },
            bulkPut: function (objects, keys) {
                var _this = this;

                return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                    if (!idbstore.keyPath && !_this.schema.primKey.auto && !keys) throw new exceptions.InvalidArgument("bulkPut() with non-inbound keys requires keys array in second argument");
                    if (idbstore.keyPath && keys) throw new exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
                    if (keys && keys.length !== objects.length) throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
                    if (objects.length === 0) return resolve(); // Caller provided empty list.
                    var done = function (result) {
                        if (errorList.length === 0) resolve(result);else reject(new BulkError(_this.name + '.bulkPut(): ' + errorList.length + ' of ' + numObjs + ' operations failed', errorList));
                    };
                    var req,
                        errorList = [],
                        errorHandler,
                        numObjs = objects.length,
                        table = _this;
                    if (_this.hook.creating.fire === nop && _this.hook.updating.fire === nop) {
                        //
                        // Standard Bulk (no 'creating' or 'updating' hooks to care about)
                        //
                        errorHandler = BulkErrorHandlerCatchAll(errorList);
                        for (var i = 0, l = objects.length; i < l; ++i) {
                            req = keys ? idbstore.put(objects[i], keys[i]) : idbstore.put(objects[i]);
                            req.onerror = errorHandler;
                        }
                        // Only need to catch success or error on the last operation
                        // according to the IDB spec.
                        req.onerror = BulkErrorHandlerCatchAll(errorList, done);
                        req.onsuccess = eventSuccessHandler(done);
                    } else {
                        var effectiveKeys = keys || idbstore.keyPath && objects.map(function (o) {
                            return getByKeyPath(o, idbstore.keyPath);
                        });
                        // Generate map of {[key]: object}
                        var objectLookup = effectiveKeys && arrayToObject(effectiveKeys, function (key, i) {
                            return key != null && [key, objects[i]];
                        });
                        var promise = !effectiveKeys ?

                        // Auto-incremented key-less objects only without any keys argument.
                        table.bulkAdd(objects) :

                        // Keys provided. Either as inbound in provided objects, or as a keys argument.
                        // Begin with updating those that exists in DB:
                        table.where(':id').anyOf(effectiveKeys.filter(function (key) {
                            return key != null;
                        })).modify(function () {
                            this.value = objectLookup[this.primKey];
                            objectLookup[this.primKey] = null; // Mark as "don't add this"
                        }).catch(ModifyError, function (e) {
                            errorList = e.failures; // No need to concat here. These are the first errors added.
                        }).then(function () {
                            // Now, let's examine which items didnt exist so we can add them:
                            var objsToAdd = [],
                                keysToAdd = keys && [];
                            // Iterate backwards. Why? Because if same key was used twice, just add the last one.
                            for (var i = effectiveKeys.length - 1; i >= 0; --i) {
                                var key = effectiveKeys[i];
                                if (key == null || objectLookup[key]) {
                                    objsToAdd.push(objects[i]);
                                    keys && keysToAdd.push(key);
                                    if (key != null) objectLookup[key] = null; // Mark as "dont add again"
                                }
                            }
                            // The items are in reverse order so reverse them before adding.
                            // Could be important in order to get auto-incremented keys the way the caller
                            // would expect. Could have used unshift instead of push()/reverse(),
                            // but: http://jsperf.com/unshift-vs-reverse
                            objsToAdd.reverse();
                            keys && keysToAdd.reverse();
                            return table.bulkAdd(objsToAdd, keysToAdd);
                        }).then(function (lastAddedKey) {
                            // Resolve with key of the last object in given arguments to bulkPut():
                            var lastEffectiveKey = effectiveKeys[effectiveKeys.length - 1]; // Key was provided.
                            return lastEffectiveKey != null ? lastEffectiveKey : lastAddedKey;
                        });

                        promise.then(done).catch(BulkError, function (e) {
                            // Concat failure from ModifyError and reject using our 'done' method.
                            errorList = errorList.concat(e.failures);
                            done();
                        }).catch(reject);
                    }
                }, "locked"); // If called from transaction scope, lock transaction til all steps are done.
            },
            bulkAdd: function (objects, keys) {
                var self = this,
                    creatingHook = this.hook.creating.fire;
                return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {
                    if (!idbstore.keyPath && !self.schema.primKey.auto && !keys) throw new exceptions.InvalidArgument("bulkAdd() with non-inbound keys requires keys array in second argument");
                    if (idbstore.keyPath && keys) throw new exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
                    if (keys && keys.length !== objects.length) throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
                    if (objects.length === 0) return resolve(); // Caller provided empty list.
                    function done(result) {
                        if (errorList.length === 0) resolve(result);else reject(new BulkError(self.name + '.bulkAdd(): ' + errorList.length + ' of ' + numObjs + ' operations failed', errorList));
                    }
                    var req,
                        errorList = [],
                        errorHandler,
                        successHandler,
                        numObjs = objects.length;
                    if (creatingHook !== nop) {
                        //
                        // There are subscribers to hook('creating')
                        // Must behave as documented.
                        //
                        var keyPath = idbstore.keyPath,
                            hookCtx;
                        errorHandler = BulkErrorHandlerCatchAll(errorList, null, true);
                        successHandler = hookedEventSuccessHandler(null);

                        tryCatch(function () {
                            for (var i = 0, l = objects.length; i < l; ++i) {
                                hookCtx = { onerror: null, onsuccess: null };
                                var key = keys && keys[i];
                                var obj = objects[i],
                                    effectiveKey = keys ? key : keyPath ? getByKeyPath(obj, keyPath) : undefined,
                                    keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans);
                                if (effectiveKey == null && keyToUse != null) {
                                    if (keyPath) {
                                        obj = deepClone(obj);
                                        setByKeyPath(obj, keyPath, keyToUse);
                                    } else {
                                        key = keyToUse;
                                    }
                                }
                                req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);
                                req._hookCtx = hookCtx;
                                if (i < l - 1) {
                                    req.onerror = errorHandler;
                                    if (hookCtx.onsuccess) req.onsuccess = successHandler;
                                }
                            }
                        }, function (err) {
                            hookCtx.onerror && hookCtx.onerror(err);
                            throw err;
                        });

                        req.onerror = BulkErrorHandlerCatchAll(errorList, done, true);
                        req.onsuccess = hookedEventSuccessHandler(done);
                    } else {
                        //
                        // Standard Bulk (no 'creating' hook to care about)
                        //
                        errorHandler = BulkErrorHandlerCatchAll(errorList);
                        for (var i = 0, l = objects.length; i < l; ++i) {
                            req = keys ? idbstore.add(objects[i], keys[i]) : idbstore.add(objects[i]);
                            req.onerror = errorHandler;
                        }
                        // Only need to catch success or error on the last operation
                        // according to the IDB spec.
                        req.onerror = BulkErrorHandlerCatchAll(errorList, done);
                        req.onsuccess = eventSuccessHandler(done);
                    }
                });
            },
            add: function (obj, key) {
                /// <summary>
                ///   Add an object to the database. In case an object with same primary key already exists, the object will not be added.
                /// </summary>
                /// <param name="obj" type="Object">A javascript object to insert</param>
                /// <param name="key" optional="true">Primary key</param>
                var creatingHook = this.hook.creating.fire;
                return this._idbstore(READWRITE, function (resolve, reject, idbstore, trans) {
                    var hookCtx = { onsuccess: null, onerror: null };
                    if (creatingHook !== nop) {
                        var effectiveKey = key != null ? key : idbstore.keyPath ? getByKeyPath(obj, idbstore.keyPath) : undefined;
                        var keyToUse = creatingHook.call(hookCtx, effectiveKey, obj, trans); // Allow subscribers to when("creating") to generate the key.
                        if (effectiveKey == null && keyToUse != null) {
                            // Using "==" and "!=" to check for either null or undefined!
                            if (idbstore.keyPath) setByKeyPath(obj, idbstore.keyPath, keyToUse);else key = keyToUse;
                        }
                    }
                    try {
                        var req = key != null ? idbstore.add(obj, key) : idbstore.add(obj);
                        req._hookCtx = hookCtx;
                        req.onerror = hookedEventRejectHandler(reject);
                        req.onsuccess = hookedEventSuccessHandler(function (result) {
                            // TODO: Remove these two lines in next major release (2.0?)
                            // It's no good practice to have side effects on provided parameters
                            var keyPath = idbstore.keyPath;
                            if (keyPath) setByKeyPath(obj, keyPath, result);
                            resolve(result);
                        });
                    } catch (e) {
                        if (hookCtx.onerror) hookCtx.onerror(e);
                        throw e;
                    }
                });
            },

            put: function (obj, key) {
                /// <summary>
                ///   Add an object to the database but in case an object with same primary key alread exists, the existing one will get updated.
                /// </summary>
                /// <param name="obj" type="Object">A javascript object to insert or update</param>
                /// <param name="key" optional="true">Primary key</param>
                var self = this,
                    creatingHook = this.hook.creating.fire,
                    updatingHook = this.hook.updating.fire;
                if (creatingHook !== nop || updatingHook !== nop) {
                    //
                    // People listens to when("creating") or when("updating") events!
                    // We must know whether the put operation results in an CREATE or UPDATE.
                    //
                    return this._trans(READWRITE, function (resolve, reject, trans) {
                        // Since key is optional, make sure we get it from obj if not provided
                        var effectiveKey = key !== undefined ? key : self.schema.primKey.keyPath && getByKeyPath(obj, self.schema.primKey.keyPath);
                        if (effectiveKey == null) {
                            // "== null" means checking for either null or undefined.
                            // No primary key. Must use add().
                            trans.tables[self.name].add(obj).then(resolve, reject);
                        } else {
                            // Primary key exist. Lock transaction and try modifying existing. If nothing modified, call add().
                            trans._lock(); // Needed because operation is splitted into modify() and add().
                            // clone obj before this async call. If caller modifies obj the line after put(), the IDB spec requires that it should not affect operation.
                            obj = deepClone(obj);
                            trans.tables[self.name].where(":id").equals(effectiveKey).modify(function () {
                                // Replace extisting value with our object
                                // CRUD event firing handled in WriteableCollection.modify()
                                this.value = obj;
                            }).then(function (count) {
                                if (count === 0) {
                                    // Object's key was not found. Add the object instead.
                                    // CRUD event firing will be done in add()
                                    return trans.tables[self.name].add(obj, key); // Resolving with another Promise. Returned Promise will then resolve with the new key.
                                } else {
                                    return effectiveKey; // Resolve with the provided key.
                                }
                            }).finally(function () {
                                trans._unlock();
                            }).then(resolve, reject);
                        }
                    });
                } else {
                    // Use the standard IDB put() method.
                    return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                        var req = key !== undefined ? idbstore.put(obj, key) : idbstore.put(obj);
                        req.onerror = eventRejectHandler(reject);
                        req.onsuccess = function (ev) {
                            var keyPath = idbstore.keyPath;
                            if (keyPath) setByKeyPath(obj, keyPath, ev.target.result);
                            resolve(req.result);
                        };
                    });
                }
            },

            'delete': function (key) {
                /// <param name="key">Primary key of the object to delete</param>
                if (this.hook.deleting.subscribers.length) {
                    // People listens to when("deleting") event. Must implement delete using WriteableCollection.delete() that will
                    // call the CRUD event. Only WriteableCollection.delete() will know whether an object was actually deleted.
                    return this.where(":id").equals(key).delete();
                } else {
                    // No one listens. Use standard IDB delete() method.
                    return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                        var req = idbstore.delete(key);
                        req.onerror = eventRejectHandler(reject);
                        req.onsuccess = function () {
                            resolve(req.result);
                        };
                    });
                }
            },

            clear: function () {
                if (this.hook.deleting.subscribers.length) {
                    // People listens to when("deleting") event. Must implement delete using WriteableCollection.delete() that will
                    // call the CRUD event. Only WriteableCollection.delete() will knows which objects that are actually deleted.
                    return this.toCollection().delete();
                } else {
                    return this._idbstore(READWRITE, function (resolve, reject, idbstore) {
                        var req = idbstore.clear();
                        req.onerror = eventRejectHandler(reject);
                        req.onsuccess = function () {
                            resolve(req.result);
                        };
                    });
                }
            },

            update: function (keyOrObject, modifications) {
                if (typeof modifications !== 'object' || isArray(modifications)) throw new exceptions.InvalidArgument("Modifications must be an object.");
                if (typeof keyOrObject === 'object' && !isArray(keyOrObject)) {
                    // object to modify. Also modify given object with the modifications:
                    keys(modifications).forEach(function (keyPath) {
                        setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);
                    });
                    var key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);
                    if (key === undefined) return rejection(new exceptions.InvalidArgument("Given object does not contain its primary key"), dbUncaught);
                    return this.where(":id").equals(key).modify(modifications);
                } else {
                    // key to modify
                    return this.where(":id").equals(keyOrObject).modify(modifications);
                }
            }
        });

        //
        //
        //
        // Transaction Class
        //
        //
        //
        function Transaction(mode, storeNames, dbschema, parent) {
            var _this2 = this;

            /// <summary>
            ///    Transaction class. Represents a database transaction. All operations on db goes through a Transaction.
            /// </summary>
            /// <param name="mode" type="String">Any of "readwrite" or "readonly"</param>
            /// <param name="storeNames" type="Array">Array of table names to operate on</param>
            this.db = db;
            this.mode = mode;
            this.storeNames = storeNames;
            this.idbtrans = null;
            this.on = Events(this, "complete", "error", "abort");
            this.parent = parent || null;
            this.active = true;
            this._tables = null;
            this._reculock = 0;
            this._blockedFuncs = [];
            this._psd = null;
            this._dbschema = dbschema;
            this._resolve = null;
            this._reject = null;
            this._completion = new Promise(function (resolve, reject) {
                _this2._resolve = resolve;
                _this2._reject = reject;
            }).uncaught(dbUncaught);

            this._completion.then(function () {
                _this2.on.complete.fire();
            }, function (e) {
                _this2.on.error.fire(e);
                _this2.parent ? _this2.parent._reject(e) : _this2.active && _this2.idbtrans && _this2.idbtrans.abort();
                _this2.active = false;
                return rejection(e); // Indicate we actually DO NOT catch this error.
            });
        }

        props(Transaction.prototype, {
            //
            // Transaction Protected Methods (not required by API users, but needed internally and eventually by dexie extensions)
            //
            _lock: function () {
                assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.
                // Temporary set all requests into a pending queue if they are called before database is ready.
                ++this._reculock; // Recursive read/write lock pattern using PSD (Promise Specific Data) instead of TLS (Thread Local Storage)
                if (this._reculock === 1 && !PSD.global) PSD.lockOwnerFor = this;
                return this;
            },
            _unlock: function () {
                assert(!PSD.global); // Locking and unlocking reuires to be within a PSD scope.
                if (--this._reculock === 0) {
                    if (!PSD.global) PSD.lockOwnerFor = null;
                    while (this._blockedFuncs.length > 0 && !this._locked()) {
                        var fn = this._blockedFuncs.shift();
                        try {
                            fn();
                        } catch (e) {}
                    }
                }
                return this;
            },
            _locked: function () {
                // Checks if any write-lock is applied on this transaction.
                // To simplify the Dexie API for extension implementations, we support recursive locks.
                // This is accomplished by using "Promise Specific Data" (PSD).
                // PSD data is bound to a Promise and any child Promise emitted through then() or resolve( new Promise() ).
                // PSD is local to code executing on top of the call stacks of any of any code executed by Promise():
                //         * callback given to the Promise() constructor  (function (resolve, reject){...})
                //         * callbacks given to then()/catch()/finally() methods (function (value){...})
                // If creating a new independant Promise instance from within a Promise call stack, the new Promise will derive the PSD from the call stack of the parent Promise.
                // Derivation is done so that the inner PSD __proto__ points to the outer PSD.
                // PSD.lockOwnerFor will point to current transaction object if the currently executing PSD scope owns the lock.
                return this._reculock && PSD.lockOwnerFor !== this;
            },
            create: function (idbtrans) {
                var _this3 = this;

                assert(!this.idbtrans);
                if (!idbtrans && !idbdb) {
                    switch (dbOpenError && dbOpenError.name) {
                        case "DatabaseClosedError":
                            // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()
                            throw new exceptions.DatabaseClosed(dbOpenError);
                        case "MissingAPIError":
                            // Errors where it is no difference whether it was caused by the user operation or an earlier call to db.open()
                            throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);
                        default:
                            // Make it clear that the user operation was not what caused the error - the error had occurred earlier on db.open()!
                            throw new exceptions.OpenFailed(dbOpenError);
                    }
                }
                if (!this.active) throw new exceptions.TransactionInactive();
                assert(this._completion._state === null);

                idbtrans = this.idbtrans = idbtrans || idbdb.transaction(safariMultiStoreFix(this.storeNames), this.mode);
                idbtrans.onerror = wrap(function (ev) {
                    preventDefault(ev); // Prohibit default bubbling to window.error
                    _this3._reject(idbtrans.error);
                });
                idbtrans.onabort = wrap(function (ev) {
                    preventDefault(ev);
                    _this3.active && _this3._reject(new exceptions.Abort());
                    _this3.active = false;
                    _this3.on("abort").fire(ev);
                });
                idbtrans.oncomplete = wrap(function () {
                    _this3.active = false;
                    _this3._resolve();
                });
                return this;
            },
            _promise: function (mode, fn, bWriteLock) {
                var self = this;
                return newScope(function () {
                    var p;
                    // Read lock always
                    if (!self._locked()) {
                        p = self.active ? new Promise(function (resolve, reject) {
                            if (mode === READWRITE && self.mode !== READWRITE) throw new exceptions.ReadOnly("Transaction is readonly");
                            if (!self.idbtrans && mode) self.create();
                            if (bWriteLock) self._lock(); // Write lock if write operation is requested
                            fn(resolve, reject, self);
                        }) : rejection(new exceptions.TransactionInactive());
                        if (self.active && bWriteLock) p.finally(function () {
                            self._unlock();
                        });
                    } else {
                        // Transaction is write-locked. Wait for mutex.
                        p = new Promise(function (resolve, reject) {
                            self._blockedFuncs.push(function () {
                                self._promise(mode, fn, bWriteLock).then(resolve, reject);
                            });
                        });
                    }
                    p._lib = true;
                    return p.uncaught(dbUncaught);
                });
            },

            //
            // Transaction Public Properties and Methods
            //
            abort: function () {
                this.active && this._reject(new exceptions.Abort());
                this.active = false;
            },

            // Deprecate:
            tables: {
                get: function () {
                    if (this._tables) return this._tables;
                    return this._tables = arrayToObject(this.storeNames, function (name) {
                        return [name, allTables[name]];
                    });
                }
            },

            // Deprecate:
            complete: function (cb) {
                return this.on("complete", cb);
            },

            // Deprecate:
            error: function (cb) {
                return this.on("error", cb);
            },

            // Deprecate
            table: function (name) {
                if (this.storeNames.indexOf(name) === -1) throw new exceptions.InvalidTable("Table " + name + " not in transaction");
                return allTables[name];
            }
        });

        //
        //
        //
        // WhereClause
        //
        //
        //
        function WhereClause(table, index, orCollection) {
            /// <param name="table" type="Table"></param>
            /// <param name="index" type="String" optional="true"></param>
            /// <param name="orCollection" type="Collection" optional="true"></param>
            this._ctx = {
                table: table,
                index: index === ":id" ? null : index,
                collClass: table._collClass,
                or: orCollection
            };
        }

        props(WhereClause.prototype, function () {

            // WhereClause private methods

            function fail(collectionOrWhereClause, err, T) {
                var collection = collectionOrWhereClause instanceof WhereClause ? new collectionOrWhereClause._ctx.collClass(collectionOrWhereClause) : collectionOrWhereClause;

                collection._ctx.error = T ? new T(err) : new TypeError(err);
                return collection;
            }

            function emptyCollection(whereClause) {
                return new whereClause._ctx.collClass(whereClause, function () {
                    return IDBKeyRange.only("");
                }).limit(0);
            }

            function upperFactory(dir) {
                return dir === "next" ? function (s) {
                    return s.toUpperCase();
                } : function (s) {
                    return s.toLowerCase();
                };
            }
            function lowerFactory(dir) {
                return dir === "next" ? function (s) {
                    return s.toLowerCase();
                } : function (s) {
                    return s.toUpperCase();
                };
            }
            function nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {
                var length = Math.min(key.length, lowerNeedle.length);
                var llp = -1;
                for (var i = 0; i < length; ++i) {
                    var lwrKeyChar = lowerKey[i];
                    if (lwrKeyChar !== lowerNeedle[i]) {
                        if (cmp(key[i], upperNeedle[i]) < 0) return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);
                        if (cmp(key[i], lowerNeedle[i]) < 0) return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);
                        if (llp >= 0) return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);
                        return null;
                    }
                    if (cmp(key[i], lwrKeyChar) < 0) llp = i;
                }
                if (length < lowerNeedle.length && dir === "next") return key + upperNeedle.substr(key.length);
                if (length < key.length && dir === "prev") return key.substr(0, upperNeedle.length);
                return llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1);
            }

            function addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {
                /// <param name="needles" type="Array" elementType="String"></param>
                var upper,
                    lower,
                    compare,
                    upperNeedles,
                    lowerNeedles,
                    direction,
                    nextKeySuffix,
                    needlesLen = needles.length;
                if (!needles.every(function (s) {
                    return typeof s === 'string';
                })) {
                    return fail(whereClause, STRING_EXPECTED);
                }
                function initDirection(dir) {
                    upper = upperFactory(dir);
                    lower = lowerFactory(dir);
                    compare = dir === "next" ? simpleCompare : simpleCompareReverse;
                    var needleBounds = needles.map(function (needle) {
                        return { lower: lower(needle), upper: upper(needle) };
                    }).sort(function (a, b) {
                        return compare(a.lower, b.lower);
                    });
                    upperNeedles = needleBounds.map(function (nb) {
                        return nb.upper;
                    });
                    lowerNeedles = needleBounds.map(function (nb) {
                        return nb.lower;
                    });
                    direction = dir;
                    nextKeySuffix = dir === "next" ? "" : suffix;
                }
                initDirection("next");

                var c = new whereClause._ctx.collClass(whereClause, function () {
                    return IDBKeyRange.bound(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix);
                });

                c._ondirectionchange = function (direction) {
                    // This event onlys occur before filter is called the first time.
                    initDirection(direction);
                };

                var firstPossibleNeedle = 0;

                c._addAlgorithm(function (cursor, advance, resolve) {
                    /// <param name="cursor" type="IDBCursor"></param>
                    /// <param name="advance" type="Function"></param>
                    /// <param name="resolve" type="Function"></param>
                    var key = cursor.key;
                    if (typeof key !== 'string') return false;
                    var lowerKey = lower(key);
                    if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) {
                        return true;
                    } else {
                        var lowestPossibleCasing = null;
                        for (var i = firstPossibleNeedle; i < needlesLen; ++i) {
                            var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);
                            if (casing === null && lowestPossibleCasing === null) firstPossibleNeedle = i + 1;else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {
                                lowestPossibleCasing = casing;
                            }
                        }
                        if (lowestPossibleCasing !== null) {
                            advance(function () {
                                cursor.continue(lowestPossibleCasing + nextKeySuffix);
                            });
                        } else {
                            advance(resolve);
                        }
                        return false;
                    }
                });
                return c;
            }

            //
            // WhereClause public methods
            //
            return {
                between: function (lower, upper, includeLower, includeUpper) {
                    /// <summary>
                    ///     Filter out records whose where-field lays between given lower and upper values. Applies to Strings, Numbers and Dates.
                    /// </summary>
                    /// <param name="lower"></param>
                    /// <param name="upper"></param>
                    /// <param name="includeLower" optional="true">Whether items that equals lower should be included. Default true.</param>
                    /// <param name="includeUpper" optional="true">Whether items that equals upper should be included. Default false.</param>
                    /// <returns type="Collection"></returns>
                    includeLower = includeLower !== false; // Default to true
                    includeUpper = includeUpper === true; // Default to false
                    try {
                        if (cmp(lower, upper) > 0 || cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper)) return emptyCollection(this); // Workaround for idiotic W3C Specification that DataError must be thrown if lower > upper. The natural result would be to return an empty collection.
                        return new this._ctx.collClass(this, function () {
                            return IDBKeyRange.bound(lower, upper, !includeLower, !includeUpper);
                        });
                    } catch (e) {
                        return fail(this, INVALID_KEY_ARGUMENT);
                    }
                },
                equals: function (value) {
                    return new this._ctx.collClass(this, function () {
                        return IDBKeyRange.only(value);
                    });
                },
                above: function (value) {
                    return new this._ctx.collClass(this, function () {
                        return IDBKeyRange.lowerBound(value, true);
                    });
                },
                aboveOrEqual: function (value) {
                    return new this._ctx.collClass(this, function () {
                        return IDBKeyRange.lowerBound(value);
                    });
                },
                below: function (value) {
                    return new this._ctx.collClass(this, function () {
                        return IDBKeyRange.upperBound(value, true);
                    });
                },
                belowOrEqual: function (value) {
                    return new this._ctx.collClass(this, function () {
                        return IDBKeyRange.upperBound(value);
                    });
                },
                startsWith: function (str) {
                    /// <param name="str" type="String"></param>
                    if (typeof str !== 'string') return fail(this, STRING_EXPECTED);
                    return this.between(str, str + maxString, true, true);
                },
                startsWithIgnoreCase: function (str) {
                    /// <param name="str" type="String"></param>
                    if (str === "") return this.startsWith(str);
                    return addIgnoreCaseAlgorithm(this, function (x, a) {
                        return x.indexOf(a[0]) === 0;
                    }, [str], maxString);
                },
                equalsIgnoreCase: function (str) {
                    /// <param name="str" type="String"></param>
                    return addIgnoreCaseAlgorithm(this, function (x, a) {
                        return x === a[0];
                    }, [str], "");
                },
                anyOfIgnoreCase: function () {
                    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                    if (set.length === 0) return emptyCollection(this);
                    return addIgnoreCaseAlgorithm(this, function (x, a) {
                        return a.indexOf(x) !== -1;
                    }, set, "");
                },
                startsWithAnyOfIgnoreCase: function () {
                    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                    if (set.length === 0) return emptyCollection(this);
                    return addIgnoreCaseAlgorithm(this, function (x, a) {
                        return a.some(function (n) {
                            return x.indexOf(n) === 0;
                        });
                    }, set, maxString);
                },
                anyOf: function () {
                    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                    var compare = ascending;
                    try {
                        set.sort(compare);
                    } catch (e) {
                        return fail(this, INVALID_KEY_ARGUMENT);
                    }
                    if (set.length === 0) return emptyCollection(this);
                    var c = new this._ctx.collClass(this, function () {
                        return IDBKeyRange.bound(set[0], set[set.length - 1]);
                    });

                    c._ondirectionchange = function (direction) {
                        compare = direction === "next" ? ascending : descending;
                        set.sort(compare);
                    };
                    var i = 0;
                    c._addAlgorithm(function (cursor, advance, resolve) {
                        var key = cursor.key;
                        while (compare(key, set[i]) > 0) {
                            // The cursor has passed beyond this key. Check next.
                            ++i;
                            if (i === set.length) {
                                // There is no next. Stop searching.
                                advance(resolve);
                                return false;
                            }
                        }
                        if (compare(key, set[i]) === 0) {
                            // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.
                            return true;
                        } else {
                            // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.
                            advance(function () {
                                cursor.continue(set[i]);
                            });
                            return false;
                        }
                    });
                    return c;
                },

                notEqual: function (value) {
                    return this.inAnyRange([[-Infinity, value], [value, maxKey]], { includeLowers: false, includeUppers: false });
                },

                noneOf: function () {
                    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
                    if (set.length === 0) return new this._ctx.collClass(this); // Return entire collection.
                    try {
                        set.sort(ascending);
                    } catch (e) {
                        return fail(this, INVALID_KEY_ARGUMENT);
                    }
                    // Transform ["a","b","c"] to a set of ranges for between/above/below: [[-Infinity,"a"], ["a","b"], ["b","c"], ["c",maxKey]]
                    var ranges = set.reduce(function (res, val) {
                        return res ? res.concat([[res[res.length - 1][1], val]]) : [[-Infinity, val]];
                    }, null);
                    ranges.push([set[set.length - 1], maxKey]);
                    return this.inAnyRange(ranges, { includeLowers: false, includeUppers: false });
                },

                /** Filter out values withing given set of ranges.
                * Example, give children and elders a rebate of 50%:
                *
                *   db.friends.where('age').inAnyRange([[0,18],[65,Infinity]]).modify({Rebate: 1/2});
                *
                * @param {(string|number|Date|Array)[][]} ranges
                * @param {{includeLowers: boolean, includeUppers: boolean}} options
                */
                inAnyRange: function (ranges, options) {
                    var ctx = this._ctx;
                    if (ranges.length === 0) return emptyCollection(this);
                    if (!ranges.every(function (range) {
                        return range[0] !== undefined && range[1] !== undefined && ascending(range[0], range[1]) <= 0;
                    })) {
                        return fail(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", exceptions.InvalidArgument);
                    }
                    var includeLowers = !options || options.includeLowers !== false; // Default to true
                    var includeUppers = options && options.includeUppers === true; // Default to false

                    function addRange(ranges, newRange) {
                        for (var i = 0, l = ranges.length; i < l; ++i) {
                            var range = ranges[i];
                            if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {
                                range[0] = min(range[0], newRange[0]);
                                range[1] = max(range[1], newRange[1]);
                                break;
                            }
                        }
                        if (i === l) ranges.push(newRange);
                        return ranges;
                    }

                    var sortDirection = ascending;
                    function rangeSorter(a, b) {
                        return sortDirection(a[0], b[0]);
                    }

                    // Join overlapping ranges
                    var set;
                    try {
                        set = ranges.reduce(addRange, []);
                        set.sort(rangeSorter);
                    } catch (ex) {
                        return fail(this, INVALID_KEY_ARGUMENT);
                    }

                    var i = 0;
                    var keyIsBeyondCurrentEntry = includeUppers ? function (key) {
                        return ascending(key, set[i][1]) > 0;
                    } : function (key) {
                        return ascending(key, set[i][1]) >= 0;
                    };

                    var keyIsBeforeCurrentEntry = includeLowers ? function (key) {
                        return descending(key, set[i][0]) > 0;
                    } : function (key) {
                        return descending(key, set[i][0]) >= 0;
                    };

                    function keyWithinCurrentRange(key) {
                        return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);
                    }

                    var checkKey = keyIsBeyondCurrentEntry;

                    var c = new ctx.collClass(this, function () {
                        return IDBKeyRange.bound(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers);
                    });

                    c._ondirectionchange = function (direction) {
                        if (direction === "next") {
                            checkKey = keyIsBeyondCurrentEntry;
                            sortDirection = ascending;
                        } else {
                            checkKey = keyIsBeforeCurrentEntry;
                            sortDirection = descending;
                        }
                        set.sort(rangeSorter);
                    };

                    c._addAlgorithm(function (cursor, advance, resolve) {
                        var key = cursor.key;
                        while (checkKey(key)) {
                            // The cursor has passed beyond this key. Check next.
                            ++i;
                            if (i === set.length) {
                                // There is no next. Stop searching.
                                advance(resolve);
                                return false;
                            }
                        }
                        if (keyWithinCurrentRange(key)) {
                            // The current cursor value should be included and we should continue a single step in case next item has the same key or possibly our next key in set.
                            return true;
                        } else if (cmp(key, set[i][1]) === 0 || cmp(key, set[i][0]) === 0) {
                            // includeUpper or includeLower is false so keyWithinCurrentRange() returns false even though we are at range border.
                            // Continue to next key but don't include this one.
                            return false;
                        } else {
                            // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.
                            advance(function () {
                                if (sortDirection === ascending) cursor.continue(set[i][0]);else cursor.continue(set[i][1]);
                            });
                            return false;
                        }
                    });
                    return c;
                },
                startsWithAnyOf: function () {
                    var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);

                    if (!set.every(function (s) {
                        return typeof s === 'string';
                    })) {
                        return fail(this, "startsWithAnyOf() only works with strings");
                    }
                    if (set.length === 0) return emptyCollection(this);

                    return this.inAnyRange(set.map(function (str) {
                        return [str, str + maxString];
                    }));
                }
            };
        });

        //
        //
        //
        // Collection Class
        //
        //
        //
        function Collection(whereClause, keyRangeGenerator) {
            /// <summary>
            ///
            /// </summary>
            /// <param name="whereClause" type="WhereClause">Where clause instance</param>
            /// <param name="keyRangeGenerator" value="function(){ return IDBKeyRange.bound(0,1);}" optional="true"></param>
            var keyRange = null,
                error = null;
            if (keyRangeGenerator) try {
                keyRange = keyRangeGenerator();
            } catch (ex) {
                error = ex;
            }

            var whereCtx = whereClause._ctx,
                table = whereCtx.table;
            this._ctx = {
                table: table,
                index: whereCtx.index,
                isPrimKey: !whereCtx.index || table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name,
                range: keyRange,
                keysOnly: false,
                dir: "next",
                unique: "",
                algorithm: null,
                filter: null,
                replayFilter: null,
                justLimit: true, // True if a replayFilter is just a filter that performs a "limit" operation (or none at all)
                isMatch: null,
                offset: 0,
                limit: Infinity,
                error: error, // If set, any promise must be rejected with this error
                or: whereCtx.or,
                valueMapper: table.hook.reading.fire
            };
        }

        function isPlainKeyRange(ctx, ignoreLimitFilter) {
            return !(ctx.filter || ctx.algorithm || ctx.or) && (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);
        }

        props(Collection.prototype, function () {

            //
            // Collection Private Functions
            //

            function addFilter(ctx, fn) {
                ctx.filter = combine(ctx.filter, fn);
            }

            function addReplayFilter(ctx, factory, isLimitFilter) {
                var curr = ctx.replayFilter;
                ctx.replayFilter = curr ? function () {
                    return combine(curr(), factory());
                } : factory;
                ctx.justLimit = isLimitFilter && !curr;
            }

            function addMatchFilter(ctx, fn) {
                ctx.isMatch = combine(ctx.isMatch, fn);
            }

            /** @param ctx {
             *      isPrimKey: boolean,
             *      table: Table,
             *      index: string
             * }
             * @param store IDBObjectStore
             **/
            function getIndexOrStore(ctx, store) {
                if (ctx.isPrimKey) return store;
                var indexSpec = ctx.table.schema.idxByName[ctx.index];
                if (!indexSpec) throw new exceptions.Schema("KeyPath " + ctx.index + " on object store " + store.name + " is not indexed");
                return store.index(indexSpec.name);
            }

            /** @param ctx {
             *      isPrimKey: boolean,
             *      table: Table,
             *      index: string,
             *      keysOnly: boolean,
             *      range?: IDBKeyRange,
             *      dir: "next" | "prev"
             * }
             */
            function openCursor(ctx, store) {
                var idxOrStore = getIndexOrStore(ctx, store);
                return ctx.keysOnly && 'openKeyCursor' in idxOrStore ? idxOrStore.openKeyCursor(ctx.range || null, ctx.dir + ctx.unique) : idxOrStore.openCursor(ctx.range || null, ctx.dir + ctx.unique);
            }

            function iter(ctx, fn, resolve, reject, idbstore) {
                var filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;
                if (!ctx.or) {
                    iterate(openCursor(ctx, idbstore), combine(ctx.algorithm, filter), fn, resolve, reject, !ctx.keysOnly && ctx.valueMapper);
                } else (function () {
                    var set = {};
                    var resolved = 0;

                    function resolveboth() {
                        if (++resolved === 2) resolve(); // Seems like we just support or btwn max 2 expressions, but there are no limit because we do recursion.
                    }

                    function union(item, cursor, advance) {
                        if (!filter || filter(cursor, advance, resolveboth, reject)) {
                            var key = cursor.primaryKey.toString(); // Converts any Date to String, String to String, Number to String and Array to comma-separated string
                            if (!hasOwn(set, key)) {
                                set[key] = true;
                                fn(item, cursor, advance);
                            }
                        }
                    }

                    ctx.or._iterate(union, resolveboth, reject, idbstore);
                    iterate(openCursor(ctx, idbstore), ctx.algorithm, union, resolveboth, reject, !ctx.keysOnly && ctx.valueMapper);
                })();
            }
            function getInstanceTemplate(ctx) {
                return ctx.table.schema.instanceTemplate;
            }

            return {

                //
                // Collection Protected Functions
                //

                _read: function (fn, cb) {
                    var ctx = this._ctx;
                    if (ctx.error) return ctx.table._trans(null, function rejector(resolve, reject) {
                        reject(ctx.error);
                    });else return ctx.table._idbstore(READONLY, fn).then(cb);
                },
                _write: function (fn) {
                    var ctx = this._ctx;
                    if (ctx.error) return ctx.table._trans(null, function rejector(resolve, reject) {
                        reject(ctx.error);
                    });else return ctx.table._idbstore(READWRITE, fn, "locked"); // When doing write operations on collections, always lock the operation so that upcoming operations gets queued.
                },
                _addAlgorithm: function (fn) {
                    var ctx = this._ctx;
                    ctx.algorithm = combine(ctx.algorithm, fn);
                },

                _iterate: function (fn, resolve, reject, idbstore) {
                    return iter(this._ctx, fn, resolve, reject, idbstore);
                },

                clone: function (props) {
                    var rv = Object.create(this.constructor.prototype),
                        ctx = Object.create(this._ctx);
                    if (props) extend(ctx, props);
                    rv._ctx = ctx;
                    return rv;
                },

                raw: function () {
                    this._ctx.valueMapper = null;
                    return this;
                },

                //
                // Collection Public methods
                //

                each: function (fn) {
                    var ctx = this._ctx;

                    if (fake) {
                        var item = getInstanceTemplate(ctx),
                            primKeyPath = ctx.table.schema.primKey.keyPath,
                            key = getByKeyPath(item, ctx.index ? ctx.table.schema.idxByName[ctx.index].keyPath : primKeyPath),
                            primaryKey = getByKeyPath(item, primKeyPath);
                        fn(item, { key: key, primaryKey: primaryKey });
                    }

                    return this._read(function (resolve, reject, idbstore) {
                        iter(ctx, fn, resolve, reject, idbstore);
                    });
                },

                count: function (cb) {
                    if (fake) return Promise.resolve(0).then(cb);
                    var ctx = this._ctx;

                    if (isPlainKeyRange(ctx, true)) {
                        // This is a plain key range. We can use the count() method if the index.
                        return this._read(function (resolve, reject, idbstore) {
                            var idx = getIndexOrStore(ctx, idbstore);
                            var req = ctx.range ? idx.count(ctx.range) : idx.count();
                            req.onerror = eventRejectHandler(reject);
                            req.onsuccess = function (e) {
                                resolve(Math.min(e.target.result, ctx.limit));
                            };
                        }, cb);
                    } else {
                        // Algorithms, filters or expressions are applied. Need to count manually.
                        var count = 0;
                        return this._read(function (resolve, reject, idbstore) {
                            iter(ctx, function () {
                                ++count;return false;
                            }, function () {
                                resolve(count);
                            }, reject, idbstore);
                        }, cb);
                    }
                },

                sortBy: function (keyPath, cb) {
                    /// <param name="keyPath" type="String"></param>
                    var parts = keyPath.split('.').reverse(),
                        lastPart = parts[0],
                        lastIndex = parts.length - 1;
                    function getval(obj, i) {
                        if (i) return getval(obj[parts[i]], i - 1);
                        return obj[lastPart];
                    }
                    var order = this._ctx.dir === "next" ? 1 : -1;

                    function sorter(a, b) {
                        var aVal = getval(a, lastIndex),
                            bVal = getval(b, lastIndex);
                        return aVal < bVal ? -order : aVal > bVal ? order : 0;
                    }
                    return this.toArray(function (a) {
                        return a.sort(sorter);
                    }).then(cb);
                },

                toArray: function (cb) {
                    var ctx = this._ctx;
                    return this._read(function (resolve, reject, idbstore) {
                        fake && resolve([getInstanceTemplate(ctx)]);
                        if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                            // Special optimation if we could use IDBObjectStore.getAll() or
                            // IDBKeyRange.getAll():
                            var readingHook = ctx.table.hook.reading.fire;
                            var idxOrStore = getIndexOrStore(ctx, idbstore);
                            var req = ctx.limit < Infinity ? idxOrStore.getAll(ctx.range, ctx.limit) : idxOrStore.getAll(ctx.range);
                            req.onerror = eventRejectHandler(reject);
                            req.onsuccess = readingHook === mirror ? eventSuccessHandler(resolve) : wrap(eventSuccessHandler(function (res) {
                                resolve(res.map(readingHook));
                            }));
                        } else {
                            // Getting array through a cursor.
                            var a = [];
                            iter(ctx, function (item) {
                                a.push(item);
                            }, function arrayComplete() {
                                resolve(a);
                            }, reject, idbstore);
                        }
                    }, cb);
                },

                offset: function (offset) {
                    var ctx = this._ctx;
                    if (offset <= 0) return this;
                    ctx.offset += offset; // For count()
                    if (isPlainKeyRange(ctx)) {
                        addReplayFilter(ctx, function () {
                            var offsetLeft = offset;
                            return function (cursor, advance) {
                                if (offsetLeft === 0) return true;
                                if (offsetLeft === 1) {
                                    --offsetLeft;return false;
                                }
                                advance(function () {
                                    cursor.advance(offsetLeft);
                                    offsetLeft = 0;
                                });
                                return false;
                            };
                        });
                    } else {
                        addReplayFilter(ctx, function () {
                            var offsetLeft = offset;
                            return function () {
                                return --offsetLeft < 0;
                            };
                        });
                    }
                    return this;
                },

                limit: function (numRows) {
                    this._ctx.limit = Math.min(this._ctx.limit, numRows); // For count()
                    addReplayFilter(this._ctx, function () {
                        var rowsLeft = numRows;
                        return function (cursor, advance, resolve) {
                            if (--rowsLeft <= 0) advance(resolve); // Stop after this item has been included
                            return rowsLeft >= 0; // If numRows is already below 0, return false because then 0 was passed to numRows initially. Otherwise we wouldnt come here.
                        };
                    }, true);
                    return this;
                },

                until: function (filterFunction, bIncludeStopEntry) {
                    var ctx = this._ctx;
                    fake && filterFunction(getInstanceTemplate(ctx));
                    addFilter(this._ctx, function (cursor, advance, resolve) {
                        if (filterFunction(cursor.value)) {
                            advance(resolve);
                            return bIncludeStopEntry;
                        } else {
                            return true;
                        }
                    });
                    return this;
                },

                first: function (cb) {
                    return this.limit(1).toArray(function (a) {
                        return a[0];
                    }).then(cb);
                },

                last: function (cb) {
                    return this.reverse().first(cb);
                },

                filter: function (filterFunction) {
                    /// <param name="jsFunctionFilter" type="Function">function(val){return true/false}</param>
                    fake && filterFunction(getInstanceTemplate(this._ctx));
                    addFilter(this._ctx, function (cursor) {
                        return filterFunction(cursor.value);
                    });
                    // match filters not used in Dexie.js but can be used by 3rd part libraries to test a
                    // collection for a match without querying DB. Used by Dexie.Observable.
                    addMatchFilter(this._ctx, filterFunction);
                    return this;
                },

                and: function (filterFunction) {
                    return this.filter(filterFunction);
                },

                or: function (indexName) {
                    return new WhereClause(this._ctx.table, indexName, this);
                },

                reverse: function () {
                    this._ctx.dir = this._ctx.dir === "prev" ? "next" : "prev";
                    if (this._ondirectionchange) this._ondirectionchange(this._ctx.dir);
                    return this;
                },

                desc: function () {
                    return this.reverse();
                },

                eachKey: function (cb) {
                    var ctx = this._ctx;
                    ctx.keysOnly = !ctx.isMatch;
                    return this.each(function (val, cursor) {
                        cb(cursor.key, cursor);
                    });
                },

                eachUniqueKey: function (cb) {
                    this._ctx.unique = "unique";
                    return this.eachKey(cb);
                },

                eachPrimaryKey: function (cb) {
                    var ctx = this._ctx;
                    ctx.keysOnly = !ctx.isMatch;
                    return this.each(function (val, cursor) {
                        cb(cursor.primaryKey, cursor);
                    });
                },

                keys: function (cb) {
                    var ctx = this._ctx;
                    ctx.keysOnly = !ctx.isMatch;
                    var a = [];
                    return this.each(function (item, cursor) {
                        a.push(cursor.key);
                    }).then(function () {
                        return a;
                    }).then(cb);
                },

                primaryKeys: function (cb) {
                    var ctx = this._ctx;
                    if (hasGetAll && ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                        // Special optimation if we could use IDBObjectStore.getAllKeys() or
                        // IDBKeyRange.getAllKeys():
                        return this._read(function (resolve, reject, idbstore) {
                            var idxOrStore = getIndexOrStore(ctx, idbstore);
                            var req = ctx.limit < Infinity ? idxOrStore.getAllKeys(ctx.range, ctx.limit) : idxOrStore.getAllKeys(ctx.range);
                            req.onerror = eventRejectHandler(reject);
                            req.onsuccess = eventSuccessHandler(resolve);
                        }).then(cb);
                    }
                    ctx.keysOnly = !ctx.isMatch;
                    var a = [];
                    return this.each(function (item, cursor) {
                        a.push(cursor.primaryKey);
                    }).then(function () {
                        return a;
                    }).then(cb);
                },

                uniqueKeys: function (cb) {
                    this._ctx.unique = "unique";
                    return this.keys(cb);
                },

                firstKey: function (cb) {
                    return this.limit(1).keys(function (a) {
                        return a[0];
                    }).then(cb);
                },

                lastKey: function (cb) {
                    return this.reverse().firstKey(cb);
                },

                distinct: function () {
                    var ctx = this._ctx,
                        idx = ctx.index && ctx.table.schema.idxByName[ctx.index];
                    if (!idx || !idx.multi) return this; // distinct() only makes differencies on multiEntry indexes.
                    var set = {};
                    addFilter(this._ctx, function (cursor) {
                        var strKey = cursor.primaryKey.toString(); // Converts any Date to String, String to String, Number to String and Array to comma-separated string
                        var found = hasOwn(set, strKey);
                        set[strKey] = true;
                        return !found;
                    });
                    return this;
                }
            };
        });

        //
        //
        // WriteableCollection Class
        //
        //
        function WriteableCollection() {
            Collection.apply(this, arguments);
        }

        derive(WriteableCollection).from(Collection).extend({

            //
            // WriteableCollection Public Methods
            //

            modify: function (changes) {
                var self = this,
                    ctx = this._ctx,
                    hook = ctx.table.hook,
                    updatingHook = hook.updating.fire,
                    deletingHook = hook.deleting.fire;

                fake && typeof changes === 'function' && changes.call({ value: ctx.table.schema.instanceTemplate }, ctx.table.schema.instanceTemplate);

                return this._write(function (resolve, reject, idbstore, trans) {
                    var modifyer;
                    if (typeof changes === 'function') {
                        // Changes is a function that may update, add or delete propterties or even require a deletion the object itself (delete this.item)
                        if (updatingHook === nop && deletingHook === nop) {
                            // Noone cares about what is being changed. Just let the modifier function be the given argument as is.
                            modifyer = changes;
                        } else {
                            // People want to know exactly what is being modified or deleted.
                            // Let modifyer be a proxy function that finds out what changes the caller is actually doing
                            // and call the hooks accordingly!
                            modifyer = function (item) {
                                var origItem = deepClone(item); // Clone the item first so we can compare laters.
                                if (changes.call(this, item, this) === false) return false; // Call the real modifyer function (If it returns false explicitely, it means it dont want to modify anyting on this object)
                                if (!hasOwn(this, "value")) {
                                    // The real modifyer function requests a deletion of the object. Inform the deletingHook that a deletion is taking place.
                                    deletingHook.call(this, this.primKey, item, trans);
                                } else {
                                    // No deletion. Check what was changed
                                    var objectDiff = getObjectDiff(origItem, this.value);
                                    var additionalChanges = updatingHook.call(this, objectDiff, this.primKey, origItem, trans);
                                    if (additionalChanges) {
                                        // Hook want to apply additional modifications. Make sure to fullfill the will of the hook.
                                        item = this.value;
                                        keys(additionalChanges).forEach(function (keyPath) {
                                            setByKeyPath(item, keyPath, additionalChanges[keyPath]); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath
                                        });
                                    }
                                }
                            };
                        }
                    } else if (updatingHook === nop) {
                        // changes is a set of {keyPath: value} and no one is listening to the updating hook.
                        var keyPaths = keys(changes);
                        var numKeys = keyPaths.length;
                        modifyer = function (item) {
                            var anythingModified = false;
                            for (var i = 0; i < numKeys; ++i) {
                                var keyPath = keyPaths[i],
                                    val = changes[keyPath];
                                if (getByKeyPath(item, keyPath) !== val) {
                                    setByKeyPath(item, keyPath, val); // Adding {keyPath: undefined} means that the keyPath should be deleted. Handled by setByKeyPath
                                    anythingModified = true;
                                }
                            }
                            return anythingModified;
                        };
                    } else {
                        // changes is a set of {keyPath: value} and people are listening to the updating hook so we need to call it and
                        // allow it to add additional modifications to make.
                        var origChanges = changes;
                        changes = shallowClone(origChanges); // Let's work with a clone of the changes keyPath/value set so that we can restore it in case a hook extends it.
                        modifyer = function (item) {
                            var anythingModified = false;
                            var additionalChanges = updatingHook.call(this, changes, this.primKey, deepClone(item), trans);
                            if (additionalChanges) extend(changes, additionalChanges);
                            keys(changes).forEach(function (keyPath) {
                                var val = changes[keyPath];
                                if (getByKeyPath(item, keyPath) !== val) {
                                    setByKeyPath(item, keyPath, val);
                                    anythingModified = true;
                                }
                            });
                            if (additionalChanges) changes = shallowClone(origChanges); // Restore original changes for next iteration
                            return anythingModified;
                        };
                    }

                    var count = 0;
                    var successCount = 0;
                    var iterationComplete = false;
                    var failures = [];
                    var failKeys = [];
                    var currentKey = null;

                    function modifyItem(item, cursor) {
                        currentKey = cursor.primaryKey;
                        var thisContext = {
                            primKey: cursor.primaryKey,
                            value: item,
                            onsuccess: null,
                            onerror: null
                        };

                        function onerror(e) {
                            failures.push(e);
                            failKeys.push(thisContext.primKey);
                            checkFinished();
                            return true; // Catch these errors and let a final rejection decide whether or not to abort entire transaction
                        }

                        if (modifyer.call(thisContext, item, thisContext) !== false) {
                            // If a callback explicitely returns false, do not perform the update!
                            var bDelete = !hasOwn(thisContext, "value");
                            ++count;
                            tryCatch(function () {
                                var req = bDelete ? cursor.delete() : cursor.update(thisContext.value);
                                req._hookCtx = thisContext;
                                req.onerror = hookedEventRejectHandler(onerror);
                                req.onsuccess = hookedEventSuccessHandler(function () {
                                    ++successCount;
                                    checkFinished();
                                });
                            }, onerror);
                        } else if (thisContext.onsuccess) {
                            // Hook will expect either onerror or onsuccess to always be called!
                            thisContext.onsuccess(thisContext.value);
                        }
                    }

                    function doReject(e) {
                        if (e) {
                            failures.push(e);
                            failKeys.push(currentKey);
                        }
                        return reject(new ModifyError("Error modifying one or more objects", failures, successCount, failKeys));
                    }

                    function checkFinished() {
                        if (iterationComplete && successCount + failures.length === count) {
                            if (failures.length > 0) doReject();else resolve(successCount);
                        }
                    }
                    self.clone().raw()._iterate(modifyItem, function () {
                        iterationComplete = true;
                        checkFinished();
                    }, doReject, idbstore);
                });
            },

            'delete': function () {
                var _this4 = this;

                var ctx = this._ctx,
                    range = ctx.range,
                    deletingHook = ctx.table.hook.deleting.fire,
                    hasDeleteHook = deletingHook !== nop;
                if (!hasDeleteHook && isPlainKeyRange(ctx) && (ctx.isPrimKey && !hangsOnDeleteLargeKeyRange || !range)) // if no range, we'll use clear().
                    {
                        // May use IDBObjectStore.delete(IDBKeyRange) in this case (Issue #208)
                        // For chromium, this is the way most optimized version.
                        // For IE/Edge, this could hang the indexedDB engine and make operating system instable
                        // (https://gist.github.com/dfahlander/5a39328f029de18222cf2125d56c38f7)
                        return this._write(function (resolve, reject, idbstore) {
                            // Our API contract is to return a count of deleted items, so we have to count() before delete().
                            var onerror = eventRejectHandler(reject),
                                countReq = range ? idbstore.count(range) : idbstore.count();
                            countReq.onerror = onerror;
                            countReq.onsuccess = function () {
                                var count = countReq.result;
                                tryCatch(function () {
                                    var delReq = range ? idbstore.delete(range) : idbstore.clear();
                                    delReq.onerror = onerror;
                                    delReq.onsuccess = function () {
                                        return resolve(count);
                                    };
                                }, function (err) {
                                    return reject(err);
                                });
                            };
                        });
                    }

                // Default version to use when collection is not a vanilla IDBKeyRange on the primary key.
                // Divide into chunks to not starve RAM.
                // If has delete hook, we will have to collect not just keys but also objects, so it will use
                // more memory and need lower chunk size.
                var CHUNKSIZE = hasDeleteHook ? 2000 : 10000;

                return this._write(function (resolve, reject, idbstore, trans) {
                    var totalCount = 0;
                    // Clone collection and change its table and set a limit of CHUNKSIZE on the cloned Collection instance.
                    var collection = _this4.clone({
                        keysOnly: !ctx.isMatch && !hasDeleteHook }) // load just keys (unless filter() or and() or deleteHook has subscribers)
                    .distinct() // In case multiEntry is used, never delete same key twice because resulting count
                    // would become larger than actual delete count.
                    .limit(CHUNKSIZE).raw(); // Don't filter through reading-hooks (like mapped classes etc)

                    var keysOrTuples = [];

                    // We're gonna do things on as many chunks that are needed.
                    // Use recursion of nextChunk function:
                    var nextChunk = function () {
                        return collection.each(hasDeleteHook ? function (val, cursor) {
                            // Somebody subscribes to hook('deleting'). Collect all primary keys and their values,
                            // so that the hook can be called with its values in bulkDelete().
                            keysOrTuples.push([cursor.primaryKey, cursor.value]);
                        } : function (val, cursor) {
                            // No one subscribes to hook('deleting'). Collect only primary keys:
                            keysOrTuples.push(cursor.primaryKey);
                        }).then(function () {
                            // Chromium deletes faster when doing it in sort order.
                            hasDeleteHook ? keysOrTuples.sort(function (a, b) {
                                return ascending(a[0], b[0]);
                            }) : keysOrTuples.sort(ascending);
                            return bulkDelete(idbstore, trans, keysOrTuples, hasDeleteHook, deletingHook);
                        }).then(function () {
                            var count = keysOrTuples.length;
                            totalCount += count;
                            keysOrTuples = [];
                            return count < CHUNKSIZE ? totalCount : nextChunk();
                        });
                    };

                    resolve(nextChunk());
                });
            }
        });

        //
        //
        //
        // ------------------------- Help functions ---------------------------
        //
        //
        //

        function lowerVersionFirst(a, b) {
            return a._cfg.version - b._cfg.version;
        }

        function setApiOnPlace(objs, tableNames, mode, dbschema) {
            tableNames.forEach(function (tableName) {
                var tableInstance = db._tableFactory(mode, dbschema[tableName]);
                objs.forEach(function (obj) {
                    tableName in obj || (obj[tableName] = tableInstance);
                });
            });
        }

        function removeTablesApi(objs) {
            objs.forEach(function (obj) {
                for (var key in obj) {
                    if (obj[key] instanceof Table) delete obj[key];
                }
            });
        }

        function iterate(req, filter, fn, resolve, reject, valueMapper) {

            // Apply valueMapper (hook('reading') or mappped class)
            var mappedFn = valueMapper ? function (x, c, a) {
                return fn(valueMapper(x), c, a);
            } : fn;
            // Wrap fn with PSD and microtick stuff from Promise.
            var wrappedFn = wrap(mappedFn, reject);

            if (!req.onerror) req.onerror = eventRejectHandler(reject);
            if (filter) {
                req.onsuccess = trycatcher(function filter_record() {
                    var cursor = req.result;
                    if (cursor) {
                        var c = function () {
                            cursor.continue();
                        };
                        if (filter(cursor, function (advancer) {
                            c = advancer;
                        }, resolve, reject)) wrappedFn(cursor.value, cursor, function (advancer) {
                            c = advancer;
                        });
                        c();
                    } else {
                        resolve();
                    }
                }, reject);
            } else {
                req.onsuccess = trycatcher(function filter_record() {
                    var cursor = req.result;
                    if (cursor) {
                        var c = function () {
                            cursor.continue();
                        };
                        wrappedFn(cursor.value, cursor, function (advancer) {
                            c = advancer;
                        });
                        c();
                    } else {
                        resolve();
                    }
                }, reject);
            }
        }

        function parseIndexSyntax(indexes) {
            /// <param name="indexes" type="String"></param>
            /// <returns type="Array" elementType="IndexSpec"></returns>
            var rv = [];
            indexes.split(',').forEach(function (index) {
                index = index.trim();
                var name = index.replace(/([&*]|\+\+)/g, ""); // Remove "&", "++" and "*"
                // Let keyPath of "[a+b]" be ["a","b"]:
                var keyPath = /^\[/.test(name) ? name.match(/^\[(.*)\]$/)[1].split('+') : name;

                rv.push(new IndexSpec(name, keyPath || null, /\&/.test(index), /\*/.test(index), /\+\+/.test(index), isArray(keyPath), /\./.test(index)));
            });
            return rv;
        }

        function cmp(key1, key2) {
            return indexedDB.cmp(key1, key2);
        }

        function min(a, b) {
            return cmp(a, b) < 0 ? a : b;
        }

        function max(a, b) {
            return cmp(a, b) > 0 ? a : b;
        }

        function ascending(a, b) {
            return indexedDB.cmp(a, b);
        }

        function descending(a, b) {
            return indexedDB.cmp(b, a);
        }

        function simpleCompare(a, b) {
            return a < b ? -1 : a === b ? 0 : 1;
        }

        function simpleCompareReverse(a, b) {
            return a > b ? -1 : a === b ? 0 : 1;
        }

        function combine(filter1, filter2) {
            return filter1 ? filter2 ? function () {
                return filter1.apply(this, arguments) && filter2.apply(this, arguments);
            } : filter1 : filter2;
        }

        function readGlobalSchema() {
            db.verno = idbdb.version / 10;
            db._dbSchema = globalSchema = {};
            dbStoreNames = slice(idbdb.objectStoreNames, 0);
            if (dbStoreNames.length === 0) return; // Database contains no stores.
            var trans = idbdb.transaction(safariMultiStoreFix(dbStoreNames), 'readonly');
            dbStoreNames.forEach(function (storeName) {
                var store = trans.objectStore(storeName),
                    keyPath = store.keyPath,
                    dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;
                var primKey = new IndexSpec(keyPath, keyPath || "", false, false, !!store.autoIncrement, keyPath && typeof keyPath !== 'string', dotted);
                var indexes = [];
                for (var j = 0; j < store.indexNames.length; ++j) {
                    var idbindex = store.index(store.indexNames[j]);
                    keyPath = idbindex.keyPath;
                    dotted = keyPath && typeof keyPath === 'string' && keyPath.indexOf('.') !== -1;
                    var index = new IndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== 'string', dotted);
                    indexes.push(index);
                }
                globalSchema[storeName] = new TableSchema(storeName, primKey, indexes, {});
            });
            setApiOnPlace([allTables, Transaction.prototype], keys(globalSchema), READWRITE, globalSchema);
        }

        function adjustToExistingIndexNames(schema, idbtrans) {
            /// <summary>
            /// Issue #30 Problem with existing db - adjust to existing index names when migrating from non-dexie db
            /// </summary>
            /// <param name="schema" type="Object">Map between name and TableSchema</param>
            /// <param name="idbtrans" type="IDBTransaction"></param>
            var storeNames = idbtrans.db.objectStoreNames;
            for (var i = 0; i < storeNames.length; ++i) {
                var storeName = storeNames[i];
                var store = idbtrans.objectStore(storeName);
                hasGetAll = 'getAll' in store;
                for (var j = 0; j < store.indexNames.length; ++j) {
                    var indexName = store.indexNames[j];
                    var keyPath = store.index(indexName).keyPath;
                    var dexieName = typeof keyPath === 'string' ? keyPath : "[" + slice(keyPath).join('+') + "]";
                    if (schema[storeName]) {
                        var indexSpec = schema[storeName].idxByName[dexieName];
                        if (indexSpec) indexSpec.name = indexName;
                    }
                }
            }
        }

        function fireOnBlocked(ev) {
            db.on("blocked").fire(ev);
            // Workaround (not fully*) for missing "versionchange" event in IE,Edge and Safari:
            connections.filter(function (c) {
                return c.name === db.name && c !== db && !c._vcFired;
            }).map(function (c) {
                return c.on("versionchange").fire(ev);
            });
        }

        extend(this, {
            Collection: Collection,
            Table: Table,
            Transaction: Transaction,
            Version: Version,
            WhereClause: WhereClause,
            WriteableCollection: WriteableCollection,
            WriteableTable: WriteableTable
        });

        init();

        addons.forEach(function (fn) {
            fn(db);
        });
    }

    var fakeAutoComplete = function () {}; // Will never be changed. We just fake for the IDE that we change it (see doFakeAutoComplete())
    var fake = false; // Will never be changed. We just fake for the IDE that we change it (see doFakeAutoComplete())

    function parseType(type) {
        if (typeof type === 'function') {
            return new type();
        } else if (isArray(type)) {
            return [parseType(type[0])];
        } else if (type && typeof type === 'object') {
            var rv = {};
            applyStructure(rv, type);
            return rv;
        } else {
            return type;
        }
    }

    function applyStructure(obj, structure) {
        keys(structure).forEach(function (member) {
            var value = parseType(structure[member]);
            obj[member] = value;
        });
        return obj;
    }

    function eventSuccessHandler(done) {
        return function (ev) {
            done(ev.target.result);
        };
    }

    function hookedEventSuccessHandler(resolve) {
        // wrap() is needed when calling hooks because the rare scenario of:
        //  * hook does a db operation that fails immediately (IDB throws exception)
        //    For calling db operations on correct transaction, wrap makes sure to set PSD correctly.
        //    wrap() will also execute in a virtual tick.
        //  * If not wrapped in a virtual tick, direct exception will launch a new physical tick.
        //  * If this was the last event in the bulk, the promise will resolve after a physical tick
        //    and the transaction will have committed already.
        // If no hook, the virtual tick will be executed in the reject()/resolve of the final promise,
        // because it is always marked with _lib = true when created using Transaction._promise().
        return wrap(function (event) {
            var req = event.target,
                result = req.result,
                ctx = req._hookCtx,

            // Contains the hook error handler. Put here instead of closure to boost performance.
            hookSuccessHandler = ctx && ctx.onsuccess;
            hookSuccessHandler && hookSuccessHandler(result);
            resolve && resolve(result);
        }, resolve);
    }

    function eventRejectHandler(reject) {
        return function (event) {
            preventDefault(event);
            reject(event.target.error);
            return false;
        };
    }

    function hookedEventRejectHandler(reject) {
        return wrap(function (event) {
            // See comment on hookedEventSuccessHandler() why wrap() is needed only when supporting hooks.

            var req = event.target,
                err = req.error,
                ctx = req._hookCtx,

            // Contains the hook error handler. Put here instead of closure to boost performance.
            hookErrorHandler = ctx && ctx.onerror;
            hookErrorHandler && hookErrorHandler(err);
            preventDefault(event);
            reject(err);
            return false;
        });
    }

    function preventDefault(event) {
        if (event.stopPropagation) // IndexedDBShim doesnt support this on Safari 8 and below.
            event.stopPropagation();
        if (event.preventDefault) // IndexedDBShim doesnt support this on Safari 8 and below.
            event.preventDefault();
    }

    function globalDatabaseList(cb) {
        var val,
            localStorage = Dexie.dependencies.localStorage;
        if (!localStorage) return cb([]); // Envs without localStorage support
        try {
            val = JSON.parse(localStorage.getItem('Dexie.DatabaseNames') || "[]");
        } catch (e) {
            val = [];
        }
        if (cb(val)) {
            localStorage.setItem('Dexie.DatabaseNames', JSON.stringify(val));
        }
    }

    function awaitIterator(iterator) {
        var callNext = function (result) {
            return iterator.next(result);
        },
            doThrow = function (error) {
            return iterator.throw(error);
        },
            onSuccess = step(callNext),
            onError = step(doThrow);

        function step(getNext) {
            return function (val) {
                var next = getNext(val),
                    value = next.value;

                return next.done ? value : !value || typeof value.then !== 'function' ? isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) : value.then(onSuccess, onError);
            };
        }

        return step(callNext)();
    }

    //
    // IndexSpec struct
    //
    function IndexSpec(name, keyPath, unique, multi, auto, compound, dotted) {
        /// <param name="name" type="String"></param>
        /// <param name="keyPath" type="String"></param>
        /// <param name="unique" type="Boolean"></param>
        /// <param name="multi" type="Boolean"></param>
        /// <param name="auto" type="Boolean"></param>
        /// <param name="compound" type="Boolean"></param>
        /// <param name="dotted" type="Boolean"></param>
        this.name = name;
        this.keyPath = keyPath;
        this.unique = unique;
        this.multi = multi;
        this.auto = auto;
        this.compound = compound;
        this.dotted = dotted;
        var keyPathSrc = typeof keyPath === 'string' ? keyPath : keyPath && '[' + [].join.call(keyPath, '+') + ']';
        this.src = (unique ? '&' : '') + (multi ? '*' : '') + (auto ? "++" : "") + keyPathSrc;
    }

    //
    // TableSchema struct
    //
    function TableSchema(name, primKey, indexes, instanceTemplate) {
        /// <param name="name" type="String"></param>
        /// <param name="primKey" type="IndexSpec"></param>
        /// <param name="indexes" type="Array" elementType="IndexSpec"></param>
        /// <param name="instanceTemplate" type="Object"></param>
        this.name = name;
        this.primKey = primKey || new IndexSpec();
        this.indexes = indexes || [new IndexSpec()];
        this.instanceTemplate = instanceTemplate;
        this.mappedClass = null;
        this.idxByName = arrayToObject(indexes, function (index) {
            return [index.name, index];
        });
    }

    // Used in when defining dependencies later...
    // (If IndexedDBShim is loaded, prefer it before standard indexedDB)
    var idbshim = _global.idbModules && _global.idbModules.shimIndexedDB ? _global.idbModules : {};

    function safariMultiStoreFix(storeNames) {
        return storeNames.length === 1 ? storeNames[0] : storeNames;
    }

    function getNativeGetDatabaseNamesFn(indexedDB) {
        var fn = indexedDB && (indexedDB.getDatabaseNames || indexedDB.webkitGetDatabaseNames);
        return fn && fn.bind(indexedDB);
    }

    // Export Error classes
    props(Dexie, fullNameExceptions); // Dexie.XXXError = class XXXError {...};

    //
    // Static methods and properties
    //
    props(Dexie, {

        //
        // Static delete() method.
        //
        delete: function (databaseName) {
            var db = new Dexie(databaseName),
                promise = db.delete();
            promise.onblocked = function (fn) {
                db.on("blocked", fn);
                return this;
            };
            return promise;
        },

        //
        // Static exists() method.
        //
        exists: function (name) {
            return new Dexie(name).open().then(function (db) {
                db.close();
                return true;
            }).catch(Dexie.NoSuchDatabaseError, function () {
                return false;
            });
        },

        //
        // Static method for retrieving a list of all existing databases at current host.
        //
        getDatabaseNames: function (cb) {
            return new Promise(function (resolve, reject) {
                var getDatabaseNames = getNativeGetDatabaseNamesFn(indexedDB);
                if (getDatabaseNames) {
                    // In case getDatabaseNames() becomes standard, let's prepare to support it:
                    var req = getDatabaseNames();
                    req.onsuccess = function (event) {
                        resolve(slice(event.target.result, 0)); // Converst DOMStringList to Array<String>
                    };
                    req.onerror = eventRejectHandler(reject);
                } else {
                    globalDatabaseList(function (val) {
                        resolve(val);
                        return false;
                    });
                }
            }).then(cb);
        },

        defineClass: function (structure) {
            /// <summary>
            ///     Create a javascript constructor based on given template for which properties to expect in the class.
            ///     Any property that is a constructor function will act as a type. So {name: String} will be equal to {name: new String()}.
            /// </summary>
            /// <param name="structure">Helps IDE code completion by knowing the members that objects contain and not just the indexes. Also
            /// know what type each member has. Example: {name: String, emailAddresses: [String], properties: {shoeSize: Number}}</param>

            // Default constructor able to copy given properties into this object.
            function Class(properties) {
                /// <param name="properties" type="Object" optional="true">Properties to initialize object with.
                /// </param>
                properties ? extend(this, properties) : fake && applyStructure(this, structure);
            }
            return Class;
        },

        applyStructure: applyStructure,

        ignoreTransaction: function (scopeFunc) {
            // In case caller is within a transaction but needs to create a separate transaction.
            // Example of usage:
            //
            // Let's say we have a logger function in our app. Other application-logic should be unaware of the
            // logger function and not need to include the 'logentries' table in all transaction it performs.
            // The logging should always be done in a separate transaction and not be dependant on the current
            // running transaction context. Then you could use Dexie.ignoreTransaction() to run code that starts a new transaction.
            //
            //     Dexie.ignoreTransaction(function() {
            //         db.logentries.add(newLogEntry);
            //     });
            //
            // Unless using Dexie.ignoreTransaction(), the above example would try to reuse the current transaction
            // in current Promise-scope.
            //
            // An alternative to Dexie.ignoreTransaction() would be setImmediate() or setTimeout(). The reason we still provide an
            // API for this because
            //  1) The intention of writing the statement could be unclear if using setImmediate() or setTimeout().
            //  2) setTimeout() would wait unnescessary until firing. This is however not the case with setImmediate().
            //  3) setImmediate() is not supported in the ES standard.
            //  4) You might want to keep other PSD state that was set in a parent PSD, such as PSD.letThrough.
            return PSD.trans ? usePSD(PSD.transless, scopeFunc) : // Use the closest parent that was non-transactional.
            scopeFunc(); // No need to change scope because there is no ongoing transaction.
        },

        vip: function (fn) {
            // To be used by subscribers to the on('ready') event.
            // This will let caller through to access DB even when it is blocked while the db.ready() subscribers are firing.
            // This would have worked automatically if we were certain that the Provider was using Dexie.Promise for all asyncronic operations. The promise PSD
            // from the provider.connect() call would then be derived all the way to when provider would call localDatabase.applyChanges(). But since
            // the provider more likely is using non-promise async APIs or other thenable implementations, we cannot assume that.
            // Note that this method is only useful for on('ready') subscribers that is returning a Promise from the event. If not using vip()
            // the database could deadlock since it wont open until the returned Promise is resolved, and any non-VIPed operation started by
            // the caller will not resolve until database is opened.
            return newScope(function () {
                PSD.letThrough = true; // Make sure we are let through if still blocking db due to onready is firing.
                return fn();
            });
        },

        async: function (generatorFn) {
            return function () {
                try {
                    var rv = awaitIterator(generatorFn.apply(this, arguments));
                    if (!rv || typeof rv.then !== 'function') return Promise.resolve(rv);
                    return rv;
                } catch (e) {
                    return rejection(e);
                }
            };
        },

        spawn: function (generatorFn, args, thiz) {
            try {
                var rv = awaitIterator(generatorFn.apply(thiz, args || []));
                if (!rv || typeof rv.then !== 'function') return Promise.resolve(rv);
                return rv;
            } catch (e) {
                return rejection(e);
            }
        },

        // Dexie.currentTransaction property
        currentTransaction: {
            get: function () {
                return PSD.trans || null;
            }
        },

        // Export our Promise implementation since it can be handy as a standalone Promise implementation
        Promise: Promise,

        // Dexie.debug proptery:
        // Dexie.debug = false
        // Dexie.debug = true
        // Dexie.debug = "dexie" - don't hide dexie's stack frames.
        debug: {
            get: function () {
                return debug;
            },
            set: function (value) {
                setDebug(value, value === 'dexie' ? function () {
                    return true;
                } : dexieStackFrameFilter);
            }
        },

        // Export our derive/extend/override methodology
        derive: derive,
        extend: extend,
        props: props,
        override: override,
        // Export our Events() function - can be handy as a toolkit
        Events: Events,
        events: Events, // Backward compatible lowercase version. Deprecate.
        // Utilities
        getByKeyPath: getByKeyPath,
        setByKeyPath: setByKeyPath,
        delByKeyPath: delByKeyPath,
        shallowClone: shallowClone,
        deepClone: deepClone,
        getObjectDiff: getObjectDiff,
        asap: asap,
        maxKey: maxKey,
        // Addon registry
        addons: [],
        // Global DB connection list
        connections: connections,

        MultiModifyError: exceptions.Modify, // Backward compatibility 0.9.8. Deprecate.
        errnames: errnames,

        // Export other static classes
        IndexSpec: IndexSpec,
        TableSchema: TableSchema,

        //
        // Dependencies
        //
        // These will automatically work in browsers with indexedDB support, or where an indexedDB polyfill has been included.
        //
        // In node.js, however, these properties must be set "manually" before instansiating a new Dexie().
        // For node.js, you need to require indexeddb-js or similar and then set these deps.
        //
        dependencies: {
            // Required:
            indexedDB: idbshim.shimIndexedDB || _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,
            IDBKeyRange: idbshim.IDBKeyRange || _global.IDBKeyRange || _global.webkitIDBKeyRange
        },

        // API Version Number: Type Number, make sure to always set a version number that can be comparable correctly. Example: 0.9, 0.91, 0.92, 1.0, 1.01, 1.1, 1.2, 1.21, etc.
        semVer: DEXIE_VERSION,
        version: DEXIE_VERSION.split('.').map(function (n) {
            return parseInt(n);
        }).reduce(function (p, c, i) {
            return p + c / Math.pow(10, i * 2);
        }),
        fakeAutoComplete: fakeAutoComplete,

        // https://github.com/dfahlander/Dexie.js/issues/186
        // typescript compiler tsc in mode ts-->es5 & commonJS, will expect require() to return
        // x.default. Workaround: Set Dexie.default = Dexie.
        default: Dexie
    });

    tryCatch(function () {
        // Optional dependencies
        // localStorage
        Dexie.dependencies.localStorage = (typeof chrome !== "undefined" && chrome !== null ? chrome.storage : void 0) != null ? null : _global.localStorage;
    });

    // Map DOMErrors and DOMExceptions to corresponding Dexie errors. May change in Dexie v2.0.
    Promise.rejectionMapper = mapError;

    // Fool IDE to improve autocomplete. Tested with Visual Studio 2013 and 2015.
    doFakeAutoComplete(function () {
        Dexie.fakeAutoComplete = fakeAutoComplete = doFakeAutoComplete;
        Dexie.fake = fake = true;
    });

    return Dexie;
});
//# sourceMappingURL=dexie.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(21).setImmediate))

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer, process) {/* build: `node build.js modules=ALL exclude=json,gestures minifier=uglifyjs` *//*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */var fabric=fabric||{version:"1.7.19"};if(true){exports.fabric=fabric;}if(typeof document!=='undefined'&&typeof window!=='undefined'){fabric.document=document;fabric.window=window;// ensure globality even if entire library were function wrapped (as in Meteor.js packaging system)
window.fabric=fabric;}else{// assume we're running under node.js when document/window are not present
fabric.document=__webpack_require__(217).jsdom(decodeURIComponent("%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E"));if(fabric.document.createWindow){fabric.window=fabric.document.createWindow();}else{fabric.window=fabric.document.parentWindow;}}/**
 * True when in environment that supports touch events
 * @type boolean
 */fabric.isTouchSupported='ontouchstart'in fabric.window;/**
 * True when in environment that's probably Node.js
 * @type boolean
 */fabric.isLikelyNode=typeof Buffer!=='undefined'&&typeof window==='undefined';/* _FROM_SVG_START_ *//**
 * Attributes parsed from all SVG elements
 * @type array
 */fabric.SHARED_ATTRIBUTES=["display","transform","fill","fill-opacity","fill-rule","opacity","stroke","stroke-dasharray","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","id"];/* _FROM_SVG_END_ *//**
 * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.
 */fabric.DPI=96;fabric.reNum='(?:[-+]?(?:\\d+|\\d*\\.\\d+)(?:e[-+]?\\d+)?)';fabric.fontPaths={};fabric.iMatrix=[1,0,0,1,0,0];fabric.canvasModule='canvas';/**
 * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.
 * @since 1.7.14
 * @type Number
 * @default
 */fabric.perfLimitSizeTotal=2097152;/**
 * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000
 * @since 1.7.14
 * @type Number
 * @default
 */fabric.maxCacheSideLimit=4096;/**
 * Lowest pixel limit for cache canvases, set at 256PX
 * @since 1.7.14
 * @type Number
 * @default
 */fabric.minCacheSideLimit=256;/**
 * Cache Object for widths of chars in text rendering.
 */fabric.charWidthsCache={};/**
 * Device Pixel Ratio
 * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html
 */fabric.devicePixelRatio=fabric.window.devicePixelRatio||fabric.window.webkitDevicePixelRatio||fabric.window.mozDevicePixelRatio||1;(function(){/**
   * @private
   * @param {String} eventName
   * @param {Function} handler
   */function _removeEventListener(eventName,handler){if(!this.__eventListeners[eventName]){return;}var eventListener=this.__eventListeners[eventName];if(handler){eventListener[eventListener.indexOf(handler)]=false;}else{fabric.util.array.fill(eventListener,false);}}/**
   * Observes specified event
   * @deprecated `observe` deprecated since 0.8.34 (use `on` instead)
   * @memberOf fabric.Observable
   * @alias on
   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})
   * @param {Function} handler Function that receives a notification when an event of the specified type occurs
   * @return {Self} thisArg
   * @chainable
   */function observe(eventName,handler){if(!this.__eventListeners){this.__eventListeners={};}// one object with key/value pairs was passed
if(arguments.length===1){for(var prop in eventName){this.on(prop,eventName[prop]);}}else{if(!this.__eventListeners[eventName]){this.__eventListeners[eventName]=[];}this.__eventListeners[eventName].push(handler);}return this;}/**
   * Stops event observing for a particular event handler. Calling this method
   * without arguments removes all handlers for all events
   * @deprecated `stopObserving` deprecated since 0.8.34 (use `off` instead)
   * @memberOf fabric.Observable
   * @alias off
   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})
   * @param {Function} handler Function to be deleted from EventListeners
   * @return {Self} thisArg
   * @chainable
   */function stopObserving(eventName,handler){if(!this.__eventListeners){return;}// remove all key/value pairs (event name -> event handler)
if(arguments.length===0){for(eventName in this.__eventListeners){_removeEventListener.call(this,eventName);}}// one object with key/value pairs was passed
else if(arguments.length===1&&typeof arguments[0]==='object'){for(var prop in eventName){_removeEventListener.call(this,prop,eventName[prop]);}}else{_removeEventListener.call(this,eventName,handler);}return this;}/**
   * Fires event with an optional options object
   * @deprecated `fire` deprecated since 1.0.7 (use `trigger` instead)
   * @memberOf fabric.Observable
   * @alias trigger
   * @param {String} eventName Event name to fire
   * @param {Object} [options] Options object
   * @return {Self} thisArg
   * @chainable
   */function fire(eventName,options){if(!this.__eventListeners){return;}var listenersForEvent=this.__eventListeners[eventName];if(!listenersForEvent){return;}for(var i=0,len=listenersForEvent.length;i<len;i++){listenersForEvent[i]&&listenersForEvent[i].call(this,options||{});}this.__eventListeners[eventName]=listenersForEvent.filter(function(value){return value!==false;});return this;}/**
   * @namespace fabric.Observable
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}
   * @see {@link http://fabricjs.com/events|Events demo}
   */fabric.Observable={observe:observe,stopObserving:stopObserving,fire:fire,on:observe,off:stopObserving,trigger:fire};})();/**
 * @namespace fabric.Collection
 */fabric.Collection={_objects:[],/**
   * Adds objects to collection, Canvas or Group, then renders canvas
   * (if `renderOnAddRemove` is not `false`).
   * in case of Group no changes to bounding box are made.
   * Objects should be instances of (or inherit from) fabric.Object
   * Use of this function is highly discouraged for groups.
   * you can add a bunch of objects with the add method but then you NEED
   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.
   * @param {...fabric.Object} object Zero or more fabric instances
   * @return {Self} thisArg
   * @chainable
   */add:function(){this._objects.push.apply(this._objects,arguments);if(this._onObjectAdded){for(var i=0,length=arguments.length;i<length;i++){this._onObjectAdded(arguments[i]);}}this.renderOnAddRemove&&this.renderAll();return this;},/**
   * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)
   * An object should be an instance of (or inherit from) fabric.Object
   * Use of this function is highly discouraged for groups.
   * you can add a bunch of objects with the insertAt method but then you NEED
   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.
   * @param {Object} object Object to insert
   * @param {Number} index Index to insert object at
   * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs
   * @return {Self} thisArg
   * @chainable
   */insertAt:function(object,index,nonSplicing){var objects=this.getObjects();if(nonSplicing){objects[index]=object;}else{objects.splice(index,0,object);}this._onObjectAdded&&this._onObjectAdded(object);this.renderOnAddRemove&&this.renderAll();return this;},/**
   * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)
   * @param {...fabric.Object} object Zero or more fabric instances
   * @return {Self} thisArg
   * @chainable
   */remove:function(){var objects=this.getObjects(),index,somethingRemoved=false;for(var i=0,length=arguments.length;i<length;i++){index=objects.indexOf(arguments[i]);// only call onObjectRemoved if an object was actually removed
if(index!==-1){somethingRemoved=true;objects.splice(index,1);this._onObjectRemoved&&this._onObjectRemoved(arguments[i]);}}this.renderOnAddRemove&&somethingRemoved&&this.renderAll();return this;},/**
   * Executes given function for each object in this group
   * @param {Function} callback
   *                   Callback invoked with current object as first argument,
   *                   index - as second and an array of all objects - as third.
   *                   Callback is invoked in a context of Global Object (e.g. `window`)
   *                   when no `context` argument is given
   *
   * @param {Object} context Context (aka thisObject)
   * @return {Self} thisArg
   * @chainable
   */forEachObject:function(callback,context){var objects=this.getObjects();for(var i=0,len=objects.length;i<len;i++){callback.call(context,objects[i],i,objects);}return this;},/**
   * Returns an array of children objects of this instance
   * Type parameter introduced in 1.3.10
   * @param {String} [type] When specified, only objects of this type are returned
   * @return {Array}
   */getObjects:function(type){if(typeof type==='undefined'){return this._objects;}return this._objects.filter(function(o){return o.type===type;});},/**
   * Returns object at specified index
   * @param {Number} index
   * @return {Self} thisArg
   */item:function(index){return this.getObjects()[index];},/**
   * Returns true if collection contains no objects
   * @return {Boolean} true if collection is empty
   */isEmpty:function(){return this.getObjects().length===0;},/**
   * Returns a size of a collection (i.e: length of an array containing its objects)
   * @return {Number} Collection size
   */size:function(){return this.getObjects().length;},/**
   * Returns true if collection contains an object
   * @param {Object} object Object to check against
   * @return {Boolean} `true` if collection contains an object
   */contains:function(object){return this.getObjects().indexOf(object)>-1;},/**
   * Returns number representation of a collection complexity
   * @return {Number} complexity
   */complexity:function(){return this.getObjects().reduce(function(memo,current){memo+=current.complexity?current.complexity():0;return memo;},0);}};/**
 * @namespace fabric.CommonMethods
 */fabric.CommonMethods={/**
   * Sets object's properties from options
   * @param {Object} [options] Options object
   */_setOptions:function(options){for(var prop in options){this.set(prop,options[prop]);}},/**
   * @private
   * @param {Object} [filler] Options object
   * @param {String} [property] property to set the Gradient to
   */_initGradient:function(filler,property){if(filler&&filler.colorStops&&!(filler instanceof fabric.Gradient)){this.set(property,new fabric.Gradient(filler));}},/**
   * @private
   * @param {Object} [filler] Options object
   * @param {String} [property] property to set the Pattern to
   * @param {Function} [callback] callback to invoke after pattern load
   */_initPattern:function(filler,property,callback){if(filler&&filler.source&&!(filler instanceof fabric.Pattern)){this.set(property,new fabric.Pattern(filler,callback));}else{callback&&callback();}},/**
   * @private
   * @param {Object} [options] Options object
   */_initClipping:function(options){if(!options.clipTo||typeof options.clipTo!=='string'){return;}var functionBody=fabric.util.getFunctionBody(options.clipTo);if(typeof functionBody!=='undefined'){this.clipTo=new Function('ctx',functionBody);}},/**
   * @private
   */_setObject:function(obj){for(var prop in obj){this._set(prop,obj[prop]);}},/**
   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.
   * @param {String|Object} key Property name or object (if object, iterate over the object properties)
   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)
   * @return {fabric.Object} thisArg
   * @chainable
   */set:function(key,value){if(typeof key==='object'){this._setObject(key);}else{if(typeof value==='function'&&key!=='clipTo'){this._set(key,value(this.get(key)));}else{this._set(key,value);}}return this;},_set:function(key,value){this[key]=value;},/**
   * Toggles specified property from `true` to `false` or from `false` to `true`
   * @param {String} property Property to toggle
   * @return {fabric.Object} thisArg
   * @chainable
   */toggle:function(property){var value=this.get(property);if(typeof value==='boolean'){this.set(property,!value);}return this;},/**
   * Basic getter
   * @param {String} property Property name
   * @return {*} value of a property
   */get:function(property){return this[property];}};(function(global){var sqrt=Math.sqrt,atan2=Math.atan2,pow=Math.pow,abs=Math.abs,PiBy180=Math.PI/180;/**
   * @namespace fabric.util
   */fabric.util={/**
     * Removes value from an array.
     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`
     * @static
     * @memberOf fabric.util
     * @param {Array} array
     * @param {*} value
     * @return {Array} original array
     */removeFromArray:function(array,value){var idx=array.indexOf(value);if(idx!==-1){array.splice(idx,1);}return array;},/**
     * Returns random number between 2 specified ones.
     * @static
     * @memberOf fabric.util
     * @param {Number} min lower limit
     * @param {Number} max upper limit
     * @return {Number} random value (between min and max)
     */getRandomInt:function(min,max){return Math.floor(Math.random()*(max-min+1))+min;},/**
     * Transforms degrees to radians.
     * @static
     * @memberOf fabric.util
     * @param {Number} degrees value in degrees
     * @return {Number} value in radians
     */degreesToRadians:function(degrees){return degrees*PiBy180;},/**
     * Transforms radians to degrees.
     * @static
     * @memberOf fabric.util
     * @param {Number} radians value in radians
     * @return {Number} value in degrees
     */radiansToDegrees:function(radians){return radians/PiBy180;},/**
     * Rotates `point` around `origin` with `radians`
     * @static
     * @memberOf fabric.util
     * @param {fabric.Point} point The point to rotate
     * @param {fabric.Point} origin The origin of the rotation
     * @param {Number} radians The radians of the angle for the rotation
     * @return {fabric.Point} The new rotated point
     */rotatePoint:function(point,origin,radians){point.subtractEquals(origin);var v=fabric.util.rotateVector(point,radians);return new fabric.Point(v.x,v.y).addEquals(origin);},/**
     * Rotates `vector` with `radians`
     * @static
     * @memberOf fabric.util
     * @param {Object} vector The vector to rotate (x and y)
     * @param {Number} radians The radians of the angle for the rotation
     * @return {Object} The new rotated point
     */rotateVector:function(vector,radians){var sin=Math.sin(radians),cos=Math.cos(radians),rx=vector.x*cos-vector.y*sin,ry=vector.x*sin+vector.y*cos;return{x:rx,y:ry};},/**
     * Apply transform t to point p
     * @static
     * @memberOf fabric.util
     * @param  {fabric.Point} p The point to transform
     * @param  {Array} t The transform
     * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied
     * @return {fabric.Point} The transformed point
     */transformPoint:function(p,t,ignoreOffset){if(ignoreOffset){return new fabric.Point(t[0]*p.x+t[2]*p.y,t[1]*p.x+t[3]*p.y);}return new fabric.Point(t[0]*p.x+t[2]*p.y+t[4],t[1]*p.x+t[3]*p.y+t[5]);},/**
     * Returns coordinates of points's bounding rectangle (left, top, width, height)
     * @param {Array} points 4 points array
     * @return {Object} Object with left, top, width, height properties
     */makeBoundingBoxFromPoints:function(points){var xPoints=[points[0].x,points[1].x,points[2].x,points[3].x],minX=fabric.util.array.min(xPoints),maxX=fabric.util.array.max(xPoints),width=Math.abs(minX-maxX),yPoints=[points[0].y,points[1].y,points[2].y,points[3].y],minY=fabric.util.array.min(yPoints),maxY=fabric.util.array.max(yPoints),height=Math.abs(minY-maxY);return{left:minX,top:minY,width:width,height:height};},/**
     * Invert transformation t
     * @static
     * @memberOf fabric.util
     * @param {Array} t The transform
     * @return {Array} The inverted transform
     */invertTransform:function(t){var a=1/(t[0]*t[3]-t[1]*t[2]),r=[a*t[3],-a*t[1],-a*t[2],a*t[0]],o=fabric.util.transformPoint({x:t[4],y:t[5]},r,true);r[4]=-o.x;r[5]=-o.y;return r;},/**
     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.
     * @static
     * @memberOf fabric.util
     * @param {Number|String} number number to operate on
     * @param {Number} fractionDigits number of fraction digits to "leave"
     * @return {Number}
     */toFixed:function(number,fractionDigits){return parseFloat(Number(number).toFixed(fractionDigits));},/**
     * Converts from attribute value to pixel value if applicable.
     * Returns converted pixels or original value not converted.
     * @param {Number|String} value number to operate on
     * @param {Number} fontSize
     * @return {Number|String}
     */parseUnit:function(value,fontSize){var unit=/\D{0,2}$/.exec(value),number=parseFloat(value);if(!fontSize){fontSize=fabric.Text.DEFAULT_SVG_FONT_SIZE;}switch(unit[0]){case'mm':return number*fabric.DPI/25.4;case'cm':return number*fabric.DPI/2.54;case'in':return number*fabric.DPI;case'pt':return number*fabric.DPI/72;// or * 4 / 3
case'pc':return number*fabric.DPI/72*12;// or * 16
case'em':return number*fontSize;default:return number;}},/**
     * Function which always returns `false`.
     * @static
     * @memberOf fabric.util
     * @return {Boolean}
     */falseFunction:function(){return false;},/**
     * Returns klass "Class" object of given namespace
     * @memberOf fabric.util
     * @param {String} type Type of object (eg. 'circle')
     * @param {String} namespace Namespace to get klass "Class" object from
     * @return {Object} klass "Class"
     */getKlass:function(type,namespace){// capitalize first letter only
type=fabric.util.string.camelize(type.charAt(0).toUpperCase()+type.slice(1));return fabric.util.resolveNamespace(namespace)[type];},/**
     * Returns object of given namespace
     * @memberOf fabric.util
     * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'
     * @return {Object} Object for given namespace (default fabric)
     */resolveNamespace:function(namespace){if(!namespace){return fabric;}var parts=namespace.split('.'),len=parts.length,i,obj=global||fabric.window;for(i=0;i<len;++i){obj=obj[parts[i]];}return obj;},/**
     * Loads image element from given url and passes it to a callback
     * @memberOf fabric.util
     * @param {String} url URL representing an image
     * @param {Function} callback Callback; invoked with loaded image
     * @param {*} [context] Context to invoke callback in
     * @param {Object} [crossOrigin] crossOrigin value to set image element to
     */loadImage:function(url,callback,context,crossOrigin){if(!url){callback&&callback.call(context,url);return;}var img=fabric.util.createImage();/** @ignore */img.onload=function(){callback&&callback.call(context,img);img=img.onload=img.onerror=null;};/** @ignore */img.onerror=function(){fabric.log('Error loading '+img.src);callback&&callback.call(context,null,true);img=img.onload=img.onerror=null;};// data-urls appear to be buggy with crossOrigin
// https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767
// see https://code.google.com/p/chromium/issues/detail?id=315152
//     https://bugzilla.mozilla.org/show_bug.cgi?id=935069
if(url.indexOf('data')!==0&&crossOrigin){img.crossOrigin=crossOrigin;}img.src=url;},/**
     * Creates corresponding fabric instances from their object representations
     * @static
     * @memberOf fabric.util
     * @param {Array} objects Objects to enliven
     * @param {Function} callback Callback to invoke when all objects are created
     * @param {String} namespace Namespace to get klass "Class" object from
     * @param {Function} reviver Method for further parsing of object elements,
     * called after each fabric object created.
     */enlivenObjects:function(objects,callback,namespace,reviver){objects=objects||[];function onLoaded(){if(++numLoadedObjects===numTotalObjects){callback&&callback(enlivenedObjects);}}var enlivenedObjects=[],numLoadedObjects=0,numTotalObjects=objects.length,forceAsync=true;if(!numTotalObjects){callback&&callback(enlivenedObjects);return;}objects.forEach(function(o,index){// if sparse array
if(!o||!o.type){onLoaded();return;}var klass=fabric.util.getKlass(o.type,namespace);klass.fromObject(o,function(obj,error){error||(enlivenedObjects[index]=obj);reviver&&reviver(o,obj,error);onLoaded();},forceAsync);});},/**
     * Create and wait for loading of patterns
     * @static
     * @memberOf fabric.util
     * @param {Array} objects Objects to enliven
     * @param {Function} callback Callback to invoke when all objects are created
     * @param {String} namespace Namespace to get klass "Class" object from
     * @param {Function} reviver Method for further parsing of object elements,
     * called after each fabric object created.
     */enlivenPatterns:function(patterns,callback){patterns=patterns||[];function onLoaded(){if(++numLoadedPatterns===numPatterns){callback&&callback(enlivenedPatterns);}}var enlivenedPatterns=[],numLoadedPatterns=0,numPatterns=patterns.length;if(!numPatterns){callback&&callback(enlivenedPatterns);return;}patterns.forEach(function(p,index){if(p&&p.source){new fabric.Pattern(p,function(pattern){enlivenedPatterns[index]=pattern;onLoaded();});}else{enlivenedPatterns[index]=p;onLoaded();}});},/**
     * Groups SVG elements (usually those retrieved from SVG document)
     * @static
     * @memberOf fabric.util
     * @param {Array} elements SVG elements to group
     * @param {Object} [options] Options object
     * @param {String} path Value to set sourcePath to
     * @return {fabric.Object|fabric.PathGroup}
     */groupSVGElements:function(elements,options,path){var object;object=new fabric.PathGroup(elements,options);if(typeof path!=='undefined'){object.sourcePath=path;}return object;},/**
     * Populates an object with properties of another object
     * @static
     * @memberOf fabric.util
     * @param {Object} source Source object
     * @param {Object} destination Destination object
     * @return {Array} properties Propertie names to include
     */populateWithProperties:function(source,destination,properties){if(properties&&Object.prototype.toString.call(properties)==='[object Array]'){for(var i=0,len=properties.length;i<len;i++){if(properties[i]in source){destination[properties[i]]=source[properties[i]];}}}},/**
     * Draws a dashed line between two points
     *
     * This method is used to draw dashed line around selection area.
     * See <a href="http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas">dotted stroke in canvas</a>
     *
     * @param {CanvasRenderingContext2D} ctx context
     * @param {Number} x  start x coordinate
     * @param {Number} y start y coordinate
     * @param {Number} x2 end x coordinate
     * @param {Number} y2 end y coordinate
     * @param {Array} da dash array pattern
     */drawDashedLine:function(ctx,x,y,x2,y2,da){var dx=x2-x,dy=y2-y,len=sqrt(dx*dx+dy*dy),rot=atan2(dy,dx),dc=da.length,di=0,draw=true;ctx.save();ctx.translate(x,y);ctx.moveTo(0,0);ctx.rotate(rot);x=0;while(len>x){x+=da[di++%dc];if(x>len){x=len;}ctx[draw?'lineTo':'moveTo'](x,0);draw=!draw;}ctx.restore();},/**
     * Creates canvas element and initializes it via excanvas if necessary
     * @static
     * @memberOf fabric.util
     * @param {CanvasElement} [canvasEl] optional canvas element to initialize;
     * when not given, element is created implicitly
     * @return {CanvasElement} initialized canvas element
     */createCanvasElement:function(canvasEl){canvasEl||(canvasEl=fabric.document.createElement('canvas'));/* eslint-disable camelcase */if(!canvasEl.getContext&&typeof G_vmlCanvasManager!=='undefined'){G_vmlCanvasManager.initElement(canvasEl);}/* eslint-enable camelcase */return canvasEl;},/**
     * Creates image element (works on client and node)
     * @static
     * @memberOf fabric.util
     * @return {HTMLImageElement} HTML image element
     */createImage:function(){return fabric.isLikelyNode?new(__webpack_require__(9).Image)():fabric.document.createElement('img');},/**
     * Creates accessors (getXXX, setXXX) for a "class", based on "stateProperties" array
     * @static
     * @memberOf fabric.util
     * @param {Object} klass "Class" to create accessors for
     */createAccessors:function(klass){var proto=klass.prototype,i,propName,capitalizedPropName,setterName,getterName;for(i=proto.stateProperties.length;i--;){propName=proto.stateProperties[i];capitalizedPropName=propName.charAt(0).toUpperCase()+propName.slice(1);setterName='set'+capitalizedPropName;getterName='get'+capitalizedPropName;// using `new Function` for better introspection
if(!proto[getterName]){proto[getterName]=function(property){return new Function('return this.get("'+property+'")');}(propName);}if(!proto[setterName]){proto[setterName]=function(property){return new Function('value','return this.set("'+property+'", value)');}(propName);}}},/**
     * @static
     * @memberOf fabric.util
     * @param {fabric.Object} receiver Object implementing `clipTo` method
     * @param {CanvasRenderingContext2D} ctx Context to clip
     */clipContext:function(receiver,ctx){ctx.save();ctx.beginPath();receiver.clipTo(ctx);ctx.clip();},/**
     * Multiply matrix A by matrix B to nest transformations
     * @static
     * @memberOf fabric.util
     * @param  {Array} a First transformMatrix
     * @param  {Array} b Second transformMatrix
     * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices
     * @return {Array} The product of the two transform matrices
     */multiplyTransformMatrices:function(a,b,is2x2){// Matrix multiply a * b
return[a[0]*b[0]+a[2]*b[1],a[1]*b[0]+a[3]*b[1],a[0]*b[2]+a[2]*b[3],a[1]*b[2]+a[3]*b[3],is2x2?0:a[0]*b[4]+a[2]*b[5]+a[4],is2x2?0:a[1]*b[4]+a[3]*b[5]+a[5]];},/**
     * Decomposes standard 2x2 matrix into transform componentes
     * @static
     * @memberOf fabric.util
     * @param  {Array} a transformMatrix
     * @return {Object} Components of transform
     */qrDecompose:function(a){var angle=atan2(a[1],a[0]),denom=pow(a[0],2)+pow(a[1],2),scaleX=sqrt(denom),scaleY=(a[0]*a[3]-a[2]*a[1])/scaleX,skewX=atan2(a[0]*a[2]+a[1]*a[3],denom);return{angle:angle/PiBy180,scaleX:scaleX,scaleY:scaleY,skewX:skewX/PiBy180,skewY:0,translateX:a[4],translateY:a[5]};},customTransformMatrix:function(scaleX,scaleY,skewX){var skewMatrixX=[1,0,abs(Math.tan(skewX*PiBy180)),1],scaleMatrix=[abs(scaleX),0,0,abs(scaleY)];return fabric.util.multiplyTransformMatrices(scaleMatrix,skewMatrixX,true);},resetObjectTransform:function(target){target.scaleX=1;target.scaleY=1;target.skewX=0;target.skewY=0;target.flipX=false;target.flipY=false;target.setAngle(0);},/**
     * Returns string representation of function body
     * @param {Function} fn Function to get body of
     * @return {String} Function body
     */getFunctionBody:function(fn){return(String(fn).match(/function[^{]*\{([\s\S]*)\}/)||{})[1];},/**
     * Returns true if context has transparent pixel
     * at specified location (taking tolerance into account)
     * @param {CanvasRenderingContext2D} ctx context
     * @param {Number} x x coordinate
     * @param {Number} y y coordinate
     * @param {Number} tolerance Tolerance
     */isTransparent:function(ctx,x,y,tolerance){// If tolerance is > 0 adjust start coords to take into account.
// If moves off Canvas fix to 0
if(tolerance>0){if(x>tolerance){x-=tolerance;}else{x=0;}if(y>tolerance){y-=tolerance;}else{y=0;}}var _isTransparent=true,i,temp,imageData=ctx.getImageData(x,y,tolerance*2||1,tolerance*2||1),l=imageData.data.length;// Split image data - for tolerance > 1, pixelDataSize = 4;
for(i=3;i<l;i+=4){temp=imageData.data[i];_isTransparent=temp<=0;if(_isTransparent===false){break;// Stop if colour found
}}imageData=null;return _isTransparent;},/**
     * Parse preserveAspectRatio attribute from element
     * @param {string} attribute to be parsed
     * @return {Object} an object containing align and meetOrSlice attribute
     */parsePreserveAspectRatioAttribute:function(attribute){var meetOrSlice='meet',alignX='Mid',alignY='Mid',aspectRatioAttrs=attribute.split(' '),align;if(aspectRatioAttrs&&aspectRatioAttrs.length){meetOrSlice=aspectRatioAttrs.pop();if(meetOrSlice!=='meet'&&meetOrSlice!=='slice'){align=meetOrSlice;meetOrSlice='meet';}else if(aspectRatioAttrs.length){align=aspectRatioAttrs.pop();}}//divide align in alignX and alignY
alignX=align!=='none'?align.slice(1,4):'none';alignY=align!=='none'?align.slice(5,8):'none';return{meetOrSlice:meetOrSlice,alignX:alignX,alignY:alignY};},/**
     * Clear char widths cache for a font family.
     * @memberOf fabric.util
     * @param {String} [fontFamily] font family to clear
     */clearFabricFontCache:function(fontFamily){if(!fontFamily){fabric.charWidthsCache={};}else if(fabric.charWidthsCache[fontFamily]){delete fabric.charWidthsCache[fontFamily];}},/**
     * Clear char widths cache for a font family.
     * @memberOf fabric.util
     * @param {Number} ar aspect ratio
     * @param {Number} maximumArea Maximum area you want to achieve
     * @param {Number} maximumSide biggest side allowed
     * @return {Object.x} Limited dimensions by X
     * @return {Object.y} Limited dimensions by Y
     */limitDimsByArea:function(ar,maximumArea){var roughWidth=Math.sqrt(maximumArea*ar),perfLimitSizeY=Math.floor(maximumArea/roughWidth);return{x:Math.floor(roughWidth),y:perfLimitSizeY};},capValue:function(min,value,max){return Math.max(min,Math.min(value,max));}};})( true?exports:this);(function(){var arcToSegmentsCache={},segmentToBezierCache={},boundsOfCurveCache={},_join=Array.prototype.join;/* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp
   * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here
   * http://mozilla.org/MPL/2.0/
   */function arcToSegments(toX,toY,rx,ry,large,sweep,rotateX){var argsString=_join.call(arguments);if(arcToSegmentsCache[argsString]){return arcToSegmentsCache[argsString];}var PI=Math.PI,th=rotateX*PI/180,sinTh=Math.sin(th),cosTh=Math.cos(th),fromX=0,fromY=0;rx=Math.abs(rx);ry=Math.abs(ry);var px=-cosTh*toX*0.5-sinTh*toY*0.5,py=-cosTh*toY*0.5+sinTh*toX*0.5,rx2=rx*rx,ry2=ry*ry,py2=py*py,px2=px*px,pl=rx2*ry2-rx2*py2-ry2*px2,root=0;if(pl<0){var s=Math.sqrt(1-pl/(rx2*ry2));rx*=s;ry*=s;}else{root=(large===sweep?-1.0:1.0)*Math.sqrt(pl/(rx2*py2+ry2*px2));}var cx=root*rx*py/ry,cy=-root*ry*px/rx,cx1=cosTh*cx-sinTh*cy+toX*0.5,cy1=sinTh*cx+cosTh*cy+toY*0.5,mTheta=calcVectorAngle(1,0,(px-cx)/rx,(py-cy)/ry),dtheta=calcVectorAngle((px-cx)/rx,(py-cy)/ry,(-px-cx)/rx,(-py-cy)/ry);if(sweep===0&&dtheta>0){dtheta-=2*PI;}else if(sweep===1&&dtheta<0){dtheta+=2*PI;}// Convert into cubic bezier segments <= 90deg
var segments=Math.ceil(Math.abs(dtheta/PI*2)),result=[],mDelta=dtheta/segments,mT=8/3*Math.sin(mDelta/4)*Math.sin(mDelta/4)/Math.sin(mDelta/2),th3=mTheta+mDelta;for(var i=0;i<segments;i++){result[i]=segmentToBezier(mTheta,th3,cosTh,sinTh,rx,ry,cx1,cy1,mT,fromX,fromY);fromX=result[i][4];fromY=result[i][5];mTheta=th3;th3+=mDelta;}arcToSegmentsCache[argsString]=result;return result;}function segmentToBezier(th2,th3,cosTh,sinTh,rx,ry,cx1,cy1,mT,fromX,fromY){var argsString2=_join.call(arguments);if(segmentToBezierCache[argsString2]){return segmentToBezierCache[argsString2];}var costh2=Math.cos(th2),sinth2=Math.sin(th2),costh3=Math.cos(th3),sinth3=Math.sin(th3),toX=cosTh*rx*costh3-sinTh*ry*sinth3+cx1,toY=sinTh*rx*costh3+cosTh*ry*sinth3+cy1,cp1X=fromX+mT*(-cosTh*rx*sinth2-sinTh*ry*costh2),cp1Y=fromY+mT*(-sinTh*rx*sinth2+cosTh*ry*costh2),cp2X=toX+mT*(cosTh*rx*sinth3+sinTh*ry*costh3),cp2Y=toY+mT*(sinTh*rx*sinth3-cosTh*ry*costh3);segmentToBezierCache[argsString2]=[cp1X,cp1Y,cp2X,cp2Y,toX,toY];return segmentToBezierCache[argsString2];}/*
   * Private
   */function calcVectorAngle(ux,uy,vx,vy){var ta=Math.atan2(uy,ux),tb=Math.atan2(vy,vx);if(tb>=ta){return tb-ta;}else{return 2*Math.PI-(ta-tb);}}/**
   * Draws arc
   * @param {CanvasRenderingContext2D} ctx
   * @param {Number} fx
   * @param {Number} fy
   * @param {Array} coords
   */fabric.util.drawArc=function(ctx,fx,fy,coords){var rx=coords[0],ry=coords[1],rot=coords[2],large=coords[3],sweep=coords[4],tx=coords[5],ty=coords[6],segs=[[],[],[],[]],segsNorm=arcToSegments(tx-fx,ty-fy,rx,ry,large,sweep,rot);for(var i=0,len=segsNorm.length;i<len;i++){segs[i][0]=segsNorm[i][0]+fx;segs[i][1]=segsNorm[i][1]+fy;segs[i][2]=segsNorm[i][2]+fx;segs[i][3]=segsNorm[i][3]+fy;segs[i][4]=segsNorm[i][4]+fx;segs[i][5]=segsNorm[i][5]+fy;ctx.bezierCurveTo.apply(ctx,segs[i]);}};/**
   * Calculate bounding box of a elliptic-arc
   * @param {Number} fx start point of arc
   * @param {Number} fy
   * @param {Number} rx horizontal radius
   * @param {Number} ry vertical radius
   * @param {Number} rot angle of horizontal axe
   * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points
   * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction
   * @param {Number} tx end point of arc
   * @param {Number} ty
   */fabric.util.getBoundsOfArc=function(fx,fy,rx,ry,rot,large,sweep,tx,ty){var fromX=0,fromY=0,bound,bounds=[],segs=arcToSegments(tx-fx,ty-fy,rx,ry,large,sweep,rot);for(var i=0,len=segs.length;i<len;i++){bound=getBoundsOfCurve(fromX,fromY,segs[i][0],segs[i][1],segs[i][2],segs[i][3],segs[i][4],segs[i][5]);bounds.push({x:bound[0].x+fx,y:bound[0].y+fy});bounds.push({x:bound[1].x+fx,y:bound[1].y+fy});fromX=segs[i][4];fromY=segs[i][5];}return bounds;};/**
   * Calculate bounding box of a beziercurve
   * @param {Number} x0 starting point
   * @param {Number} y0
   * @param {Number} x1 first control point
   * @param {Number} y1
   * @param {Number} x2 secondo control point
   * @param {Number} y2
   * @param {Number} x3 end of beizer
   * @param {Number} y3
   */// taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.
function getBoundsOfCurve(x0,y0,x1,y1,x2,y2,x3,y3){var argsString=_join.call(arguments);if(boundsOfCurveCache[argsString]){return boundsOfCurveCache[argsString];}var sqrt=Math.sqrt,min=Math.min,max=Math.max,abs=Math.abs,tvalues=[],bounds=[[],[]],a,b,c,t,t1,t2,b2ac,sqrtb2ac;b=6*x0-12*x1+6*x2;a=-3*x0+9*x1-9*x2+3*x3;c=3*x1-3*x0;for(var i=0;i<2;++i){if(i>0){b=6*y0-12*y1+6*y2;a=-3*y0+9*y1-9*y2+3*y3;c=3*y1-3*y0;}if(abs(a)<1e-12){if(abs(b)<1e-12){continue;}t=-c/b;if(0<t&&t<1){tvalues.push(t);}continue;}b2ac=b*b-4*c*a;if(b2ac<0){continue;}sqrtb2ac=sqrt(b2ac);t1=(-b+sqrtb2ac)/(2*a);if(0<t1&&t1<1){tvalues.push(t1);}t2=(-b-sqrtb2ac)/(2*a);if(0<t2&&t2<1){tvalues.push(t2);}}var x,y,j=tvalues.length,jlen=j,mt;while(j--){t=tvalues[j];mt=1-t;x=mt*mt*mt*x0+3*mt*mt*t*x1+3*mt*t*t*x2+t*t*t*x3;bounds[0][j]=x;y=mt*mt*mt*y0+3*mt*mt*t*y1+3*mt*t*t*y2+t*t*t*y3;bounds[1][j]=y;}bounds[0][jlen]=x0;bounds[1][jlen]=y0;bounds[0][jlen+1]=x3;bounds[1][jlen+1]=y3;var result=[{x:min.apply(null,bounds[0]),y:min.apply(null,bounds[1])},{x:max.apply(null,bounds[0]),y:max.apply(null,bounds[1])}];boundsOfCurveCache[argsString]=result;return result;}fabric.util.getBoundsOfCurve=getBoundsOfCurve;})();(function(){var slice=Array.prototype.slice;/* _ES5_COMPAT_START_ */if(!Array.prototype.indexOf){/**
     * Finds index of an element in an array
     * @param {*} searchElement
     * @return {Number}
     */Array.prototype.indexOf=function(searchElement/*, fromIndex */){if(this===void 0||this===null){throw new TypeError();}var t=Object(this),len=t.length>>>0;if(len===0){return-1;}var n=0;if(arguments.length>0){n=Number(arguments[1]);if(n!==n){// shortcut for verifying if it's NaN
n=0;}else if(n!==0&&n!==Number.POSITIVE_INFINITY&&n!==Number.NEGATIVE_INFINITY){n=(n>0||-1)*Math.floor(Math.abs(n));}}if(n>=len){return-1;}var k=n>=0?n:Math.max(len-Math.abs(n),0);for(;k<len;k++){if(k in t&&t[k]===searchElement){return k;}}return-1;};}if(!Array.prototype.forEach){/**
     * Iterates an array, invoking callback for each element
     * @param {Function} fn Callback to invoke for each element
     * @param {Object} [context] Context to invoke callback in
     * @return {Array}
     */Array.prototype.forEach=function(fn,context){for(var i=0,len=this.length>>>0;i<len;i++){if(i in this){fn.call(context,this[i],i,this);}}};}if(!Array.prototype.map){/**
     * Returns a result of iterating over an array, invoking callback for each element
     * @param {Function} fn Callback to invoke for each element
     * @param {Object} [context] Context to invoke callback in
     * @return {Array}
     */Array.prototype.map=function(fn,context){var result=[];for(var i=0,len=this.length>>>0;i<len;i++){if(i in this){result[i]=fn.call(context,this[i],i,this);}}return result;};}if(!Array.prototype.every){/**
     * Returns true if a callback returns truthy value for all elements in an array
     * @param {Function} fn Callback to invoke for each element
     * @param {Object} [context] Context to invoke callback in
     * @return {Boolean}
     */Array.prototype.every=function(fn,context){for(var i=0,len=this.length>>>0;i<len;i++){if(i in this&&!fn.call(context,this[i],i,this)){return false;}}return true;};}if(!Array.prototype.some){/**
     * Returns true if a callback returns truthy value for at least one element in an array
     * @param {Function} fn Callback to invoke for each element
     * @param {Object} [context] Context to invoke callback in
     * @return {Boolean}
     */Array.prototype.some=function(fn,context){for(var i=0,len=this.length>>>0;i<len;i++){if(i in this&&fn.call(context,this[i],i,this)){return true;}}return false;};}if(!Array.prototype.filter){/**
     * Returns the result of iterating over elements in an array
     * @param {Function} fn Callback to invoke for each element
     * @param {Object} [context] Context to invoke callback in
     * @return {Array}
     */Array.prototype.filter=function(fn,context){var result=[],val;for(var i=0,len=this.length>>>0;i<len;i++){if(i in this){val=this[i];// in case fn mutates this
if(fn.call(context,val,i,this)){result.push(val);}}}return result;};}if(!Array.prototype.reduce){/**
     * Returns "folded" (reduced) result of iterating over elements in an array
     * @param {Function} fn Callback to invoke for each element
     * @return {*}
     */Array.prototype.reduce=function(fn/*, initial*/){var len=this.length>>>0,i=0,rv;if(arguments.length>1){rv=arguments[1];}else{do{if(i in this){rv=this[i++];break;}// if array contains no values, no initial value to return
if(++i>=len){throw new TypeError();}}while(true);}for(;i<len;i++){if(i in this){rv=fn.call(null,rv,this[i],i,this);}}return rv;};}/* _ES5_COMPAT_END_ *//**
   * Invokes method on all items in a given array
   * @memberOf fabric.util.array
   * @param {Array} array Array to iterate over
   * @param {String} method Name of a method to invoke
   * @return {Array}
   */function invoke(array,method){var args=slice.call(arguments,2),result=[];for(var i=0,len=array.length;i<len;i++){result[i]=args.length?array[i][method].apply(array[i],args):array[i][method].call(array[i]);}return result;}/**
   * Finds maximum value in array (not necessarily "first" one)
   * @memberOf fabric.util.array
   * @param {Array} array Array to iterate over
   * @param {String} byProperty
   * @return {*}
   */function max(array,byProperty){return find(array,byProperty,function(value1,value2){return value1>=value2;});}/**
   * Finds minimum value in array (not necessarily "first" one)
   * @memberOf fabric.util.array
   * @param {Array} array Array to iterate over
   * @param {String} byProperty
   * @return {*}
   */function min(array,byProperty){return find(array,byProperty,function(value1,value2){return value1<value2;});}/**
   * @private
   */function fill(array,value){var k=array.length;while(k--){array[k]=value;}return array;}/**
   * @private
   */function find(array,byProperty,condition){if(!array||array.length===0){return;}var i=array.length-1,result=byProperty?array[i][byProperty]:array[i];if(byProperty){while(i--){if(condition(array[i][byProperty],result)){result=array[i][byProperty];}}}else{while(i--){if(condition(array[i],result)){result=array[i];}}}return result;}/**
   * @namespace fabric.util.array
   */fabric.util.array={fill:fill,invoke:invoke,min:min,max:max};})();(function(){/**
   * Copies all enumerable properties of one js object to another
   * Does not clone or extend fabric.Object subclasses.
   * @memberOf fabric.util.object
   * @param {Object} destination Where to copy to
   * @param {Object} source Where to copy from
   * @return {Object}
   */function extend(destination,source,deep){// JScript DontEnum bug is not taken care of
// the deep clone is for internal use, is not meant to avoid
// javascript traps or cloning html element or self referenced objects.
if(deep){if(!fabric.isLikelyNode&&source instanceof Element){// avoid cloning deep images, canvases,
destination=source;}else if(source instanceof Array){destination=[];for(var i=0,len=source.length;i<len;i++){destination[i]=extend({},source[i],deep);}}else if(source&&typeof source==='object'){for(var property in source){if(source.hasOwnProperty(property)){destination[property]=extend({},source[property],deep);}}}else{// this sounds odd for an extend but is ok for recursive use
destination=source;}}else{for(var property in source){destination[property]=source[property];}}return destination;}/**
   * Creates an empty object and copies all enumerable properties of another object to it
   * @memberOf fabric.util.object
   * @param {Object} object Object to clone
   * @return {Object}
   */function clone(object,deep){return extend({},object,deep);}/** @namespace fabric.util.object */fabric.util.object={extend:extend,clone:clone};})();(function(){/* _ES5_COMPAT_START_ */if(!String.prototype.trim){/**
     * Trims a string (removing whitespace from the beginning and the end)
     * @function external:String#trim
     * @see <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/Trim">String#trim on MDN</a>
     */String.prototype.trim=function(){// this trim is not fully ES3 or ES5 compliant, but it should cover most cases for now
return this.replace(/^[\s\xA0]+/,'').replace(/[\s\xA0]+$/,'');};}/* _ES5_COMPAT_END_ *//**
   * Camelizes a string
   * @memberOf fabric.util.string
   * @param {String} string String to camelize
   * @return {String} Camelized version of a string
   */function camelize(string){return string.replace(/-+(.)?/g,function(match,character){return character?character.toUpperCase():'';});}/**
   * Capitalizes a string
   * @memberOf fabric.util.string
   * @param {String} string String to capitalize
   * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized
   * and other letters stay untouched, if false first letter is capitalized
   * and other letters are converted to lowercase.
   * @return {String} Capitalized version of a string
   */function capitalize(string,firstLetterOnly){return string.charAt(0).toUpperCase()+(firstLetterOnly?string.slice(1):string.slice(1).toLowerCase());}/**
   * Escapes XML in a string
   * @memberOf fabric.util.string
   * @param {String} string String to escape
   * @return {String} Escaped version of a string
   */function escapeXml(string){return string.replace(/&/g,'&amp;').replace(/"/g,'&quot;').replace(/'/g,'&apos;').replace(/</g,'&lt;').replace(/>/g,'&gt;');}/**
   * String utilities
   * @namespace fabric.util.string
   */fabric.util.string={camelize:camelize,capitalize:capitalize,escapeXml:escapeXml};})();/* _ES5_COMPAT_START_ */(function(){var slice=Array.prototype.slice,apply=Function.prototype.apply,Dummy=function(){};if(!Function.prototype.bind){/**
     * Cross-browser approximation of ES5 Function.prototype.bind (not fully spec conforming)
     * @see <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind">Function#bind on MDN</a>
     * @param {Object} thisArg Object to bind function to
     * @param {Any[]} Values to pass to a bound function
     * @return {Function}
     */Function.prototype.bind=function(thisArg){var _this=this,args=slice.call(arguments,1),bound;if(args.length){bound=function(){return apply.call(_this,this instanceof Dummy?this:thisArg,args.concat(slice.call(arguments)));};}else{/** @ignore */bound=function(){return apply.call(_this,this instanceof Dummy?this:thisArg,arguments);};}Dummy.prototype=this.prototype;bound.prototype=new Dummy();return bound;};}})();/* _ES5_COMPAT_END_ */(function(){var slice=Array.prototype.slice,emptyFunction=function(){},IS_DONTENUM_BUGGY=function(){for(var p in{toString:1}){if(p==='toString'){return false;}}return true;}(),/** @ignore */addMethods=function(klass,source,parent){for(var property in source){if(property in klass.prototype&&typeof klass.prototype[property]==='function'&&(source[property]+'').indexOf('callSuper')>-1){klass.prototype[property]=function(property){return function(){var superclass=this.constructor.superclass;this.constructor.superclass=parent;var returnValue=source[property].apply(this,arguments);this.constructor.superclass=superclass;if(property!=='initialize'){return returnValue;}};}(property);}else{klass.prototype[property]=source[property];}if(IS_DONTENUM_BUGGY){if(source.toString!==Object.prototype.toString){klass.prototype.toString=source.toString;}if(source.valueOf!==Object.prototype.valueOf){klass.prototype.valueOf=source.valueOf;}}}};function Subclass(){}function callSuper(methodName){var parentMethod=null,_this=this;// climb prototype chain to find method not equal to callee's method
while(_this.constructor.superclass){var superClassMethod=_this.constructor.superclass.prototype[methodName];if(_this[methodName]!==superClassMethod){parentMethod=superClassMethod;break;}// eslint-disable-next-line
_this=_this.constructor.superclass.prototype;}if(!parentMethod){return console.log('tried to callSuper '+methodName+', method not found in prototype chain',this);}return arguments.length>1?parentMethod.apply(this,slice.call(arguments,1)):parentMethod.call(this);}/**
   * Helper for creation of "classes".
   * @memberOf fabric.util
   * @param {Function} [parent] optional "Class" to inherit from
   * @param {Object} [properties] Properties shared by all instances of this class
   *                  (be careful modifying objects defined here as this would affect all instances)
   */function createClass(){var parent=null,properties=slice.call(arguments,0);if(typeof properties[0]==='function'){parent=properties.shift();}function klass(){this.initialize.apply(this,arguments);}klass.superclass=parent;klass.subclasses=[];if(parent){Subclass.prototype=parent.prototype;klass.prototype=new Subclass();parent.subclasses.push(klass);}for(var i=0,length=properties.length;i<length;i++){addMethods(klass,properties[i],parent);}if(!klass.prototype.initialize){klass.prototype.initialize=emptyFunction;}klass.prototype.constructor=klass;klass.prototype.callSuper=callSuper;return klass;}fabric.util.createClass=createClass;})();(function(){var unknown='unknown';/* EVENT HANDLING */function areHostMethods(object){var methodNames=Array.prototype.slice.call(arguments,1),t,i,len=methodNames.length;for(i=0;i<len;i++){t=typeof object[methodNames[i]];if(!/^(?:function|object|unknown)$/.test(t)){return false;}}return true;}/** @ignore */var getElement,setElement,getUniqueId=function(){var uid=0;return function(element){return element.__uniqueID||(element.__uniqueID='uniqueID__'+uid++);};}();(function(){var elements={};/** @ignore */getElement=function(uid){return elements[uid];};/** @ignore */setElement=function(uid,element){elements[uid]=element;};})();function createListener(uid,handler){return{handler:handler,wrappedHandler:createWrappedHandler(uid,handler)};}function createWrappedHandler(uid,handler){return function(e){handler.call(getElement(uid),e||fabric.window.event);};}function createDispatcher(uid,eventName){return function(e){if(handlers[uid]&&handlers[uid][eventName]){var handlersForEvent=handlers[uid][eventName];for(var i=0,len=handlersForEvent.length;i<len;i++){handlersForEvent[i].call(this,e||fabric.window.event);}}};}var shouldUseAddListenerRemoveListener=areHostMethods(fabric.document.documentElement,'addEventListener','removeEventListener')&&areHostMethods(fabric.window,'addEventListener','removeEventListener'),shouldUseAttachEventDetachEvent=areHostMethods(fabric.document.documentElement,'attachEvent','detachEvent')&&areHostMethods(fabric.window,'attachEvent','detachEvent'),// IE branch
listeners={},// DOM L0 branch
handlers={},addListener,removeListener;if(shouldUseAddListenerRemoveListener){/** @ignore */addListener=function(element,eventName,handler,options){// since ie10 or ie9 can use addEventListener but they do not support options, i need to check
element&&element.addEventListener(eventName,handler,shouldUseAttachEventDetachEvent?false:options);};/** @ignore */removeListener=function(element,eventName,handler,options){element&&element.removeEventListener(eventName,handler,shouldUseAttachEventDetachEvent?false:options);};}else if(shouldUseAttachEventDetachEvent){/** @ignore */addListener=function(element,eventName,handler){if(!element){return;}var uid=getUniqueId(element);setElement(uid,element);if(!listeners[uid]){listeners[uid]={};}if(!listeners[uid][eventName]){listeners[uid][eventName]=[];}var listener=createListener(uid,handler);listeners[uid][eventName].push(listener);element.attachEvent('on'+eventName,listener.wrappedHandler);};/** @ignore */removeListener=function(element,eventName,handler){if(!element){return;}var uid=getUniqueId(element),listener;if(listeners[uid]&&listeners[uid][eventName]){for(var i=0,len=listeners[uid][eventName].length;i<len;i++){listener=listeners[uid][eventName][i];if(listener&&listener.handler===handler){element.detachEvent('on'+eventName,listener.wrappedHandler);listeners[uid][eventName][i]=null;}}}};}else{/** @ignore */addListener=function(element,eventName,handler){if(!element){return;}var uid=getUniqueId(element);if(!handlers[uid]){handlers[uid]={};}if(!handlers[uid][eventName]){handlers[uid][eventName]=[];var existingHandler=element['on'+eventName];if(existingHandler){handlers[uid][eventName].push(existingHandler);}element['on'+eventName]=createDispatcher(uid,eventName);}handlers[uid][eventName].push(handler);};/** @ignore */removeListener=function(element,eventName,handler){if(!element){return;}var uid=getUniqueId(element);if(handlers[uid]&&handlers[uid][eventName]){var handlersForEvent=handlers[uid][eventName];for(var i=0,len=handlersForEvent.length;i<len;i++){if(handlersForEvent[i]===handler){handlersForEvent.splice(i,1);}}}};}/**
   * Adds an event listener to an element
   * @function
   * @memberOf fabric.util
   * @param {HTMLElement} element
   * @param {String} eventName
   * @param {Function} handler
   */fabric.util.addListener=addListener;/**
   * Removes an event listener from an element
   * @function
   * @memberOf fabric.util
   * @param {HTMLElement} element
   * @param {String} eventName
   * @param {Function} handler
   */fabric.util.removeListener=removeListener;/**
   * Cross-browser wrapper for getting event's coordinates
   * @memberOf fabric.util
   * @param {Event} event Event object
   */function getPointer(event){event||(event=fabric.window.event);var element=event.target||(typeof event.srcElement!==unknown?event.srcElement:null),scroll=fabric.util.getScrollLeftTop(element);return{x:pointerX(event)+scroll.left,y:pointerY(event)+scroll.top};}var pointerX=function(event){// looks like in IE (<9) clientX at certain point (apparently when mouseup fires on VML element)
// is represented as COM object, with all the consequences, like "unknown" type and error on [[Get]]
// need to investigate later
return typeof event.clientX!==unknown?event.clientX:0;},pointerY=function(event){return typeof event.clientY!==unknown?event.clientY:0;};function _getPointer(event,pageProp,clientProp){var touchProp=event.type==='touchend'?'changedTouches':'touches';return event[touchProp]&&event[touchProp][0]?event[touchProp][0][pageProp]-(event[touchProp][0][pageProp]-event[touchProp][0][clientProp])||event[clientProp]:event[clientProp];}if(fabric.isTouchSupported){pointerX=function(event){return _getPointer(event,'pageX','clientX');};pointerY=function(event){return _getPointer(event,'pageY','clientY');};}fabric.util.getPointer=getPointer;fabric.util.object.extend(fabric.util,fabric.Observable);})();(function(){/**
   * Cross-browser wrapper for setting element's style
   * @memberOf fabric.util
   * @param {HTMLElement} element
   * @param {Object} styles
   * @return {HTMLElement} Element that was passed as a first argument
   */function setStyle(element,styles){var elementStyle=element.style;if(!elementStyle){return element;}if(typeof styles==='string'){element.style.cssText+=';'+styles;return styles.indexOf('opacity')>-1?setOpacity(element,styles.match(/opacity:\s*(\d?\.?\d*)/)[1]):element;}for(var property in styles){if(property==='opacity'){setOpacity(element,styles[property]);}else{var normalizedProperty=property==='float'||property==='cssFloat'?typeof elementStyle.styleFloat==='undefined'?'cssFloat':'styleFloat':property;elementStyle[normalizedProperty]=styles[property];}}return element;}var parseEl=fabric.document.createElement('div'),supportsOpacity=typeof parseEl.style.opacity==='string',supportsFilters=typeof parseEl.style.filter==='string',reOpacity=/alpha\s*\(\s*opacity\s*=\s*([^\)]+)\)/,/** @ignore */setOpacity=function(element){return element;};if(supportsOpacity){/** @ignore */setOpacity=function(element,value){element.style.opacity=value;return element;};}else if(supportsFilters){/** @ignore */setOpacity=function(element,value){var es=element.style;if(element.currentStyle&&!element.currentStyle.hasLayout){es.zoom=1;}if(reOpacity.test(es.filter)){value=value>=0.9999?'':'alpha(opacity='+value*100+')';es.filter=es.filter.replace(reOpacity,value);}else{es.filter+=' alpha(opacity='+value*100+')';}return element;};}fabric.util.setStyle=setStyle;})();(function(){var _slice=Array.prototype.slice;/**
   * Takes id and returns an element with that id (if one exists in a document)
   * @memberOf fabric.util
   * @param {String|HTMLElement} id
   * @return {HTMLElement|null}
   */function getById(id){return typeof id==='string'?fabric.document.getElementById(id):id;}var sliceCanConvertNodelists,/**
       * Converts an array-like object (e.g. arguments or NodeList) to an array
       * @memberOf fabric.util
       * @param {Object} arrayLike
       * @return {Array}
       */toArray=function(arrayLike){return _slice.call(arrayLike,0);};try{sliceCanConvertNodelists=toArray(fabric.document.childNodes)instanceof Array;}catch(err){}if(!sliceCanConvertNodelists){toArray=function(arrayLike){var arr=new Array(arrayLike.length),i=arrayLike.length;while(i--){arr[i]=arrayLike[i];}return arr;};}/**
   * Creates specified element with specified attributes
   * @memberOf fabric.util
   * @param {String} tagName Type of an element to create
   * @param {Object} [attributes] Attributes to set on an element
   * @return {HTMLElement} Newly created element
   */function makeElement(tagName,attributes){var el=fabric.document.createElement(tagName);for(var prop in attributes){if(prop==='class'){el.className=attributes[prop];}else if(prop==='for'){el.htmlFor=attributes[prop];}else{el.setAttribute(prop,attributes[prop]);}}return el;}/**
   * Adds class to an element
   * @memberOf fabric.util
   * @param {HTMLElement} element Element to add class to
   * @param {String} className Class to add to an element
   */function addClass(element,className){if(element&&(' '+element.className+' ').indexOf(' '+className+' ')===-1){element.className+=(element.className?' ':'')+className;}}/**
   * Wraps element with another element
   * @memberOf fabric.util
   * @param {HTMLElement} element Element to wrap
   * @param {HTMLElement|String} wrapper Element to wrap with
   * @param {Object} [attributes] Attributes to set on a wrapper
   * @return {HTMLElement} wrapper
   */function wrapElement(element,wrapper,attributes){if(typeof wrapper==='string'){wrapper=makeElement(wrapper,attributes);}if(element.parentNode){element.parentNode.replaceChild(wrapper,element);}wrapper.appendChild(element);return wrapper;}/**
   * Returns element scroll offsets
   * @memberOf fabric.util
   * @param {HTMLElement} element Element to operate on
   * @return {Object} Object with left/top values
   */function getScrollLeftTop(element){var left=0,top=0,docElement=fabric.document.documentElement,body=fabric.document.body||{scrollLeft:0,scrollTop:0};// While loop checks (and then sets element to) .parentNode OR .host
//  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,
//  but the .parentNode of a root ShadowDOM node will always be null, instead
//  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938
while(element&&(element.parentNode||element.host)){// Set element to element parent, or 'host' in case of ShadowDOM
element=element.parentNode||element.host;if(element===fabric.document){left=body.scrollLeft||docElement.scrollLeft||0;top=body.scrollTop||docElement.scrollTop||0;}else{left+=element.scrollLeft||0;top+=element.scrollTop||0;}if(element.nodeType===1&&fabric.util.getElementStyle(element,'position')==='fixed'){break;}}return{left:left,top:top};}/**
   * Returns offset for a given element
   * @function
   * @memberOf fabric.util
   * @param {HTMLElement} element Element to get offset for
   * @return {Object} Object with "left" and "top" properties
   */function getElementOffset(element){var docElem,doc=element&&element.ownerDocument,box={left:0,top:0},offset={left:0,top:0},scrollLeftTop,offsetAttributes={borderLeftWidth:'left',borderTopWidth:'top',paddingLeft:'left',paddingTop:'top'};if(!doc){return offset;}for(var attr in offsetAttributes){offset[offsetAttributes[attr]]+=parseInt(getElementStyle(element,attr),10)||0;}docElem=doc.documentElement;if(typeof element.getBoundingClientRect!=='undefined'){box=element.getBoundingClientRect();}scrollLeftTop=getScrollLeftTop(element);return{left:box.left+scrollLeftTop.left-(docElem.clientLeft||0)+offset.left,top:box.top+scrollLeftTop.top-(docElem.clientTop||0)+offset.top};}/**
   * Returns style attribute value of a given element
   * @memberOf fabric.util
   * @param {HTMLElement} element Element to get style attribute for
   * @param {String} attr Style attribute to get for element
   * @return {String} Style attribute value of the given element.
   */var getElementStyle;if(fabric.document.defaultView&&fabric.document.defaultView.getComputedStyle){getElementStyle=function(element,attr){var style=fabric.document.defaultView.getComputedStyle(element,null);return style?style[attr]:undefined;};}else{getElementStyle=function(element,attr){var value=element.style[attr];if(!value&&element.currentStyle){value=element.currentStyle[attr];}return value;};}(function(){var style=fabric.document.documentElement.style,selectProp='userSelect'in style?'userSelect':'MozUserSelect'in style?'MozUserSelect':'WebkitUserSelect'in style?'WebkitUserSelect':'KhtmlUserSelect'in style?'KhtmlUserSelect':'';/**
     * Makes element unselectable
     * @memberOf fabric.util
     * @param {HTMLElement} element Element to make unselectable
     * @return {HTMLElement} Element that was passed in
     */function makeElementUnselectable(element){if(typeof element.onselectstart!=='undefined'){element.onselectstart=fabric.util.falseFunction;}if(selectProp){element.style[selectProp]='none';}else if(typeof element.unselectable==='string'){element.unselectable='on';}return element;}/**
     * Makes element selectable
     * @memberOf fabric.util
     * @param {HTMLElement} element Element to make selectable
     * @return {HTMLElement} Element that was passed in
     */function makeElementSelectable(element){if(typeof element.onselectstart!=='undefined'){element.onselectstart=null;}if(selectProp){element.style[selectProp]='';}else if(typeof element.unselectable==='string'){element.unselectable='';}return element;}fabric.util.makeElementUnselectable=makeElementUnselectable;fabric.util.makeElementSelectable=makeElementSelectable;})();(function(){/**
     * Inserts a script element with a given url into a document; invokes callback, when that script is finished loading
     * @memberOf fabric.util
     * @param {String} url URL of a script to load
     * @param {Function} callback Callback to execute when script is finished loading
     */function getScript(url,callback){var headEl=fabric.document.getElementsByTagName('head')[0],scriptEl=fabric.document.createElement('script'),loading=true;/** @ignore */scriptEl.onload=/** @ignore */scriptEl.onreadystatechange=function(e){if(loading){if(typeof this.readyState==='string'&&this.readyState!=='loaded'&&this.readyState!=='complete'){return;}loading=false;callback(e||fabric.window.event);scriptEl=scriptEl.onload=scriptEl.onreadystatechange=null;}};scriptEl.src=url;headEl.appendChild(scriptEl);// causes issue in Opera
// headEl.removeChild(scriptEl);
}fabric.util.getScript=getScript;})();fabric.util.getById=getById;fabric.util.toArray=toArray;fabric.util.makeElement=makeElement;fabric.util.addClass=addClass;fabric.util.wrapElement=wrapElement;fabric.util.getScrollLeftTop=getScrollLeftTop;fabric.util.getElementOffset=getElementOffset;fabric.util.getElementStyle=getElementStyle;})();(function(){function addParamToUrl(url,param){return url+(/\?/.test(url)?'&':'?')+param;}var makeXHR=function(){var factories=[function(){return new ActiveXObject('Microsoft.XMLHTTP');},function(){return new ActiveXObject('Msxml2.XMLHTTP');},function(){return new ActiveXObject('Msxml2.XMLHTTP.3.0');},function(){return new XMLHttpRequest();}];for(var i=factories.length;i--;){try{var req=factories[i]();if(req){return factories[i];}}catch(err){}}}();function emptyFn(){}/**
   * Cross-browser abstraction for sending XMLHttpRequest
   * @memberOf fabric.util
   * @param {String} url URL to send XMLHttpRequest to
   * @param {Object} [options] Options object
   * @param {String} [options.method="GET"]
   * @param {String} [options.parameters] parameters to append to url in GET or in body
   * @param {String} [options.body] body to send with POST or PUT request
   * @param {Function} options.onComplete Callback to invoke when request is completed
   * @return {XMLHttpRequest} request
   */function request(url,options){options||(options={});var method=options.method?options.method.toUpperCase():'GET',onComplete=options.onComplete||function(){},xhr=makeXHR(),body=options.body||options.parameters;/** @ignore */xhr.onreadystatechange=function(){if(xhr.readyState===4){onComplete(xhr);xhr.onreadystatechange=emptyFn;}};if(method==='GET'){body=null;if(typeof options.parameters==='string'){url=addParamToUrl(url,options.parameters);}}xhr.open(method,url,true);if(method==='POST'||method==='PUT'){xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded');}xhr.send(body);return xhr;}fabric.util.request=request;})();/**
 * Wrapper around `console.log` (when available)
 * @param {*} [values] Values to log
 */fabric.log=function(){};/**
 * Wrapper around `console.warn` (when available)
 * @param {*} [values] Values to log as a warning
 */fabric.warn=function(){};/* eslint-disable */if(typeof console!=='undefined'){['log','warn'].forEach(function(methodName){if(typeof console[methodName]!=='undefined'&&typeof console[methodName].apply==='function'){fabric[methodName]=function(){return console[methodName].apply(console,arguments);};}});}/* eslint-enable */(function(){function noop(){return false;}/**
   * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.
   * @memberOf fabric.util
   * @param {Object} [options] Animation options
   * @param {Function} [options.onChange] Callback; invoked on every value change
   * @param {Function} [options.onComplete] Callback; invoked when value change is completed
   * @param {Number} [options.startValue=0] Starting value
   * @param {Number} [options.endValue=100] Ending value
   * @param {Number} [options.byValue=100] Value to modify the property by
   * @param {Function} [options.easing] Easing function
   * @param {Number} [options.duration=500] Duration of change (in ms)
   */function animate(options){requestAnimFrame(function(timestamp){options||(options={});var start=timestamp||+new Date(),duration=options.duration||500,finish=start+duration,time,onChange=options.onChange||noop,abort=options.abort||noop,onComplete=options.onComplete||noop,easing=options.easing||function(t,b,c,d){return-c*Math.cos(t/d*(Math.PI/2))+c+b;},startValue='startValue'in options?options.startValue:0,endValue='endValue'in options?options.endValue:100,byValue=options.byValue||endValue-startValue;options.onStart&&options.onStart();(function tick(ticktime){if(abort()){onComplete(endValue,1,1);return;}time=ticktime||+new Date();var currentTime=time>finish?duration:time-start,timePerc=currentTime/duration,current=easing(currentTime,startValue,byValue,duration),valuePerc=Math.abs((current-startValue)/byValue);onChange(current,valuePerc,timePerc);if(time>finish){options.onComplete&&options.onComplete();return;}requestAnimFrame(tick);})(start);});}var _requestAnimFrame=fabric.window.requestAnimationFrame||fabric.window.webkitRequestAnimationFrame||fabric.window.mozRequestAnimationFrame||fabric.window.oRequestAnimationFrame||fabric.window.msRequestAnimationFrame||function(callback){fabric.window.setTimeout(callback,1000/60);};/**
   * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/
   * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method
   * @memberOf fabric.util
   * @param {Function} callback Callback to invoke
   * @param {DOMElement} element optional Element to associate with animation
   */function requestAnimFrame(){return _requestAnimFrame.apply(fabric.window,arguments);}fabric.util.animate=animate;fabric.util.requestAnimFrame=requestAnimFrame;})();(function(){// Calculate an in-between color. Returns a "rgba()" string.
// Credit: Edwin Martin <edwin@bitstorm.org>
//         http://www.bitstorm.org/jquery/color-animation/jquery.animate-colors.js
function calculateColor(begin,end,pos){var color='rgba('+parseInt(begin[0]+pos*(end[0]-begin[0]),10)+','+parseInt(begin[1]+pos*(end[1]-begin[1]),10)+','+parseInt(begin[2]+pos*(end[2]-begin[2]),10);color+=','+(begin&&end?parseFloat(begin[3]+pos*(end[3]-begin[3])):1);color+=')';return color;}/**
   * Changes the color from one to another within certain period of time, invoking callbacks as value is being changed.
   * @memberOf fabric.util
   * @param {String} fromColor The starting color in hex or rgb(a) format.
   * @param {String} toColor The starting color in hex or rgb(a) format.
   * @param {Number} [duration] Duration of change (in ms).
   * @param {Object} [options] Animation options
   * @param {Function} [options.onChange] Callback; invoked on every value change
   * @param {Function} [options.onComplete] Callback; invoked when value change is completed
   * @param {Function} [options.colorEasing] Easing function. Note that this function only take two arguments (currentTime, duration). Thus the regular animation easing functions cannot be used.
   */function animateColor(fromColor,toColor,duration,options){var startColor=new fabric.Color(fromColor).getSource(),endColor=new fabric.Color(toColor).getSource();options=options||{};fabric.util.animate(fabric.util.object.extend(options,{duration:duration||500,startValue:startColor,endValue:endColor,byValue:endColor,easing:function(currentTime,startValue,byValue,duration){var posValue=options.colorEasing?options.colorEasing(currentTime,duration):1-Math.cos(currentTime/duration*(Math.PI/2));return calculateColor(startValue,byValue,posValue);}}));}fabric.util.animateColor=animateColor;})();(function(){function normalize(a,c,p,s){if(a<Math.abs(c)){a=c;s=p/4;}else{//handle the 0/0 case:
if(c===0&&a===0){s=p/(2*Math.PI)*Math.asin(1);}else{s=p/(2*Math.PI)*Math.asin(c/a);}}return{a:a,c:c,p:p,s:s};}function elastic(opts,t,d){return opts.a*Math.pow(2,10*(t-=1))*Math.sin((t*d-opts.s)*(2*Math.PI)/opts.p);}/**
   * Cubic easing out
   * @memberOf fabric.util.ease
   */function easeOutCubic(t,b,c,d){return c*((t=t/d-1)*t*t+1)+b;}/**
   * Cubic easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutCubic(t,b,c,d){t/=d/2;if(t<1){return c/2*t*t*t+b;}return c/2*((t-=2)*t*t+2)+b;}/**
   * Quartic easing in
   * @memberOf fabric.util.ease
   */function easeInQuart(t,b,c,d){return c*(t/=d)*t*t*t+b;}/**
   * Quartic easing out
   * @memberOf fabric.util.ease
   */function easeOutQuart(t,b,c,d){return-c*((t=t/d-1)*t*t*t-1)+b;}/**
   * Quartic easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutQuart(t,b,c,d){t/=d/2;if(t<1){return c/2*t*t*t*t+b;}return-c/2*((t-=2)*t*t*t-2)+b;}/**
   * Quintic easing in
   * @memberOf fabric.util.ease
   */function easeInQuint(t,b,c,d){return c*(t/=d)*t*t*t*t+b;}/**
   * Quintic easing out
   * @memberOf fabric.util.ease
   */function easeOutQuint(t,b,c,d){return c*((t=t/d-1)*t*t*t*t+1)+b;}/**
   * Quintic easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutQuint(t,b,c,d){t/=d/2;if(t<1){return c/2*t*t*t*t*t+b;}return c/2*((t-=2)*t*t*t*t+2)+b;}/**
   * Sinusoidal easing in
   * @memberOf fabric.util.ease
   */function easeInSine(t,b,c,d){return-c*Math.cos(t/d*(Math.PI/2))+c+b;}/**
   * Sinusoidal easing out
   * @memberOf fabric.util.ease
   */function easeOutSine(t,b,c,d){return c*Math.sin(t/d*(Math.PI/2))+b;}/**
   * Sinusoidal easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutSine(t,b,c,d){return-c/2*(Math.cos(Math.PI*t/d)-1)+b;}/**
   * Exponential easing in
   * @memberOf fabric.util.ease
   */function easeInExpo(t,b,c,d){return t===0?b:c*Math.pow(2,10*(t/d-1))+b;}/**
   * Exponential easing out
   * @memberOf fabric.util.ease
   */function easeOutExpo(t,b,c,d){return t===d?b+c:c*(-Math.pow(2,-10*t/d)+1)+b;}/**
   * Exponential easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutExpo(t,b,c,d){if(t===0){return b;}if(t===d){return b+c;}t/=d/2;if(t<1){return c/2*Math.pow(2,10*(t-1))+b;}return c/2*(-Math.pow(2,-10*--t)+2)+b;}/**
   * Circular easing in
   * @memberOf fabric.util.ease
   */function easeInCirc(t,b,c,d){return-c*(Math.sqrt(1-(t/=d)*t)-1)+b;}/**
   * Circular easing out
   * @memberOf fabric.util.ease
   */function easeOutCirc(t,b,c,d){return c*Math.sqrt(1-(t=t/d-1)*t)+b;}/**
   * Circular easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutCirc(t,b,c,d){t/=d/2;if(t<1){return-c/2*(Math.sqrt(1-t*t)-1)+b;}return c/2*(Math.sqrt(1-(t-=2)*t)+1)+b;}/**
   * Elastic easing in
   * @memberOf fabric.util.ease
   */function easeInElastic(t,b,c,d){var s=1.70158,p=0,a=c;if(t===0){return b;}t/=d;if(t===1){return b+c;}if(!p){p=d*0.3;}var opts=normalize(a,c,p,s);return-elastic(opts,t,d)+b;}/**
   * Elastic easing out
   * @memberOf fabric.util.ease
   */function easeOutElastic(t,b,c,d){var s=1.70158,p=0,a=c;if(t===0){return b;}t/=d;if(t===1){return b+c;}if(!p){p=d*0.3;}var opts=normalize(a,c,p,s);return opts.a*Math.pow(2,-10*t)*Math.sin((t*d-opts.s)*(2*Math.PI)/opts.p)+opts.c+b;}/**
   * Elastic easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutElastic(t,b,c,d){var s=1.70158,p=0,a=c;if(t===0){return b;}t/=d/2;if(t===2){return b+c;}if(!p){p=d*(0.3*1.5);}var opts=normalize(a,c,p,s);if(t<1){return-0.5*elastic(opts,t,d)+b;}return opts.a*Math.pow(2,-10*(t-=1))*Math.sin((t*d-opts.s)*(2*Math.PI)/opts.p)*0.5+opts.c+b;}/**
   * Backwards easing in
   * @memberOf fabric.util.ease
   */function easeInBack(t,b,c,d,s){if(s===undefined){s=1.70158;}return c*(t/=d)*t*((s+1)*t-s)+b;}/**
   * Backwards easing out
   * @memberOf fabric.util.ease
   */function easeOutBack(t,b,c,d,s){if(s===undefined){s=1.70158;}return c*((t=t/d-1)*t*((s+1)*t+s)+1)+b;}/**
   * Backwards easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutBack(t,b,c,d,s){if(s===undefined){s=1.70158;}t/=d/2;if(t<1){return c/2*(t*t*(((s*=1.525)+1)*t-s))+b;}return c/2*((t-=2)*t*(((s*=1.525)+1)*t+s)+2)+b;}/**
   * Bouncing easing in
   * @memberOf fabric.util.ease
   */function easeInBounce(t,b,c,d){return c-easeOutBounce(d-t,0,c,d)+b;}/**
   * Bouncing easing out
   * @memberOf fabric.util.ease
   */function easeOutBounce(t,b,c,d){if((t/=d)<1/2.75){return c*(7.5625*t*t)+b;}else if(t<2/2.75){return c*(7.5625*(t-=1.5/2.75)*t+0.75)+b;}else if(t<2.5/2.75){return c*(7.5625*(t-=2.25/2.75)*t+0.9375)+b;}else{return c*(7.5625*(t-=2.625/2.75)*t+0.984375)+b;}}/**
   * Bouncing easing in and out
   * @memberOf fabric.util.ease
   */function easeInOutBounce(t,b,c,d){if(t<d/2){return easeInBounce(t*2,0,c,d)*0.5+b;}return easeOutBounce(t*2-d,0,c,d)*0.5+c*0.5+b;}/**
   * Easing functions
   * See <a href="http://gizma.com/easing/">Easing Equations by Robert Penner</a>
   * @namespace fabric.util.ease
   */fabric.util.ease={/**
     * Quadratic easing in
     * @memberOf fabric.util.ease
     */easeInQuad:function(t,b,c,d){return c*(t/=d)*t+b;},/**
     * Quadratic easing out
     * @memberOf fabric.util.ease
     */easeOutQuad:function(t,b,c,d){return-c*(t/=d)*(t-2)+b;},/**
     * Quadratic easing in and out
     * @memberOf fabric.util.ease
     */easeInOutQuad:function(t,b,c,d){t/=d/2;if(t<1){return c/2*t*t+b;}return-c/2*(--t*(t-2)-1)+b;},/**
     * Cubic easing in
     * @memberOf fabric.util.ease
     */easeInCubic:function(t,b,c,d){return c*(t/=d)*t*t+b;},easeOutCubic:easeOutCubic,easeInOutCubic:easeInOutCubic,easeInQuart:easeInQuart,easeOutQuart:easeOutQuart,easeInOutQuart:easeInOutQuart,easeInQuint:easeInQuint,easeOutQuint:easeOutQuint,easeInOutQuint:easeInOutQuint,easeInSine:easeInSine,easeOutSine:easeOutSine,easeInOutSine:easeInOutSine,easeInExpo:easeInExpo,easeOutExpo:easeOutExpo,easeInOutExpo:easeInOutExpo,easeInCirc:easeInCirc,easeOutCirc:easeOutCirc,easeInOutCirc:easeInOutCirc,easeInElastic:easeInElastic,easeOutElastic:easeOutElastic,easeInOutElastic:easeInOutElastic,easeInBack:easeInBack,easeOutBack:easeOutBack,easeInOutBack:easeInOutBack,easeInBounce:easeInBounce,easeOutBounce:easeOutBounce,easeInOutBounce:easeInOutBounce};})();(function(global){'use strict';/**
   * @name fabric
   * @namespace
   */var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,clone=fabric.util.object.clone,toFixed=fabric.util.toFixed,parseUnit=fabric.util.parseUnit,multiplyTransformMatrices=fabric.util.multiplyTransformMatrices,reAllowedSVGTagNames=/^(path|circle|polygon|polyline|ellipse|rect|line|image|text)$/i,reViewBoxTagNames=/^(symbol|image|marker|pattern|view|svg)$/i,reNotAllowedAncestors=/^(?:pattern|defs|symbol|metadata|clipPath|mask)$/i,reAllowedParents=/^(symbol|g|a|svg)$/i,attributesMap={cx:'left',x:'left',r:'radius',cy:'top',y:'top',display:'visible',visibility:'visible',transform:'transformMatrix','fill-opacity':'fillOpacity','fill-rule':'fillRule','font-family':'fontFamily','font-size':'fontSize','font-style':'fontStyle','font-weight':'fontWeight','stroke-dasharray':'strokeDashArray','stroke-linecap':'strokeLineCap','stroke-linejoin':'strokeLineJoin','stroke-miterlimit':'strokeMiterLimit','stroke-opacity':'strokeOpacity','stroke-width':'strokeWidth','text-decoration':'textDecoration','text-anchor':'originX',opacity:'opacity'},colorAttributes={stroke:'strokeOpacity',fill:'fillOpacity'};fabric.cssRules={};fabric.gradientDefs={};function normalizeAttr(attr){// transform attribute names
if(attr in attributesMap){return attributesMap[attr];}return attr;}function normalizeValue(attr,value,parentAttributes,fontSize){var isArray=Object.prototype.toString.call(value)==='[object Array]',parsed;if((attr==='fill'||attr==='stroke')&&value==='none'){value='';}else if(attr==='strokeDashArray'){if(value==='none'){value=null;}else{value=value.replace(/,/g,' ').split(/\s+/).map(function(n){return parseFloat(n);});}}else if(attr==='transformMatrix'){if(parentAttributes&&parentAttributes.transformMatrix){value=multiplyTransformMatrices(parentAttributes.transformMatrix,fabric.parseTransformAttribute(value));}else{value=fabric.parseTransformAttribute(value);}}else if(attr==='visible'){value=value==='none'||value==='hidden'?false:true;// display=none on parent element always takes precedence over child element
if(parentAttributes&&parentAttributes.visible===false){value=false;}}else if(attr==='opacity'){value=parseFloat(value);if(parentAttributes&&typeof parentAttributes.opacity!=='undefined'){value*=parentAttributes.opacity;}}else if(attr==='originX'/* text-anchor */){value=value==='start'?'left':value==='end'?'right':'center';}else{parsed=isArray?value.map(parseUnit):parseUnit(value,fontSize);}return!isArray&&isNaN(parsed)?value:parsed;}/**
   * @private
   * @param {Object} attributes Array of attributes to parse
   */function _setStrokeFillOpacity(attributes){for(var attr in colorAttributes){if(typeof attributes[colorAttributes[attr]]==='undefined'||attributes[attr]===''){continue;}if(typeof attributes[attr]==='undefined'){if(!fabric.Object.prototype[attr]){continue;}attributes[attr]=fabric.Object.prototype[attr];}if(attributes[attr].indexOf('url(')===0){continue;}var color=new fabric.Color(attributes[attr]);attributes[attr]=color.setAlpha(toFixed(color.getAlpha()*attributes[colorAttributes[attr]],2)).toRgba();}return attributes;}/**
   * @private
   */function _getMultipleNodes(doc,nodeNames){var nodeName,nodeArray=[],nodeList;for(var i=0;i<nodeNames.length;i++){nodeName=nodeNames[i];nodeList=doc.getElementsByTagName(nodeName);nodeArray=nodeArray.concat(Array.prototype.slice.call(nodeList));}return nodeArray;}/**
   * Parses "transform" attribute, returning an array of values
   * @static
   * @function
   * @memberOf fabric
   * @param {String} attributeValue String containing attribute value
   * @return {Array} Array of 6 elements representing transformation matrix
   */fabric.parseTransformAttribute=function(){function rotateMatrix(matrix,args){var cos=Math.cos(args[0]),sin=Math.sin(args[0]),x=0,y=0;if(args.length===3){x=args[1];y=args[2];}matrix[0]=cos;matrix[1]=sin;matrix[2]=-sin;matrix[3]=cos;matrix[4]=x-(cos*x-sin*y);matrix[5]=y-(sin*x+cos*y);}function scaleMatrix(matrix,args){var multiplierX=args[0],multiplierY=args.length===2?args[1]:args[0];matrix[0]=multiplierX;matrix[3]=multiplierY;}function skewMatrix(matrix,args,pos){matrix[pos]=Math.tan(fabric.util.degreesToRadians(args[0]));}function translateMatrix(matrix,args){matrix[4]=args[0];if(args.length===2){matrix[5]=args[1];}}// identity matrix
var iMatrix=[1,// a
0,// b
0,// c
1,// d
0,// e
0// f
],// == begin transform regexp
number=fabric.reNum,commaWsp='(?:\\s+,?\\s*|,\\s*)',skewX='(?:(skewX)\\s*\\(\\s*('+number+')\\s*\\))',skewY='(?:(skewY)\\s*\\(\\s*('+number+')\\s*\\))',rotate='(?:(rotate)\\s*\\(\\s*('+number+')(?:'+commaWsp+'('+number+')'+commaWsp+'('+number+'))?\\s*\\))',scale='(?:(scale)\\s*\\(\\s*('+number+')(?:'+commaWsp+'('+number+'))?\\s*\\))',translate='(?:(translate)\\s*\\(\\s*('+number+')(?:'+commaWsp+'('+number+'))?\\s*\\))',matrix='(?:(matrix)\\s*\\(\\s*'+'('+number+')'+commaWsp+'('+number+')'+commaWsp+'('+number+')'+commaWsp+'('+number+')'+commaWsp+'('+number+')'+commaWsp+'('+number+')'+'\\s*\\))',transform='(?:'+matrix+'|'+translate+'|'+scale+'|'+rotate+'|'+skewX+'|'+skewY+')',transforms='(?:'+transform+'(?:'+commaWsp+'*'+transform+')*'+')',transformList='^\\s*(?:'+transforms+'?)\\s*$',// http://www.w3.org/TR/SVG/coords.html#TransformAttribute
reTransformList=new RegExp(transformList),// == end transform regexp
reTransform=new RegExp(transform,'g');return function(attributeValue){// start with identity matrix
var matrix=iMatrix.concat(),matrices=[];// return if no argument was given or
// an argument does not match transform attribute regexp
if(!attributeValue||attributeValue&&!reTransformList.test(attributeValue)){return matrix;}attributeValue.replace(reTransform,function(match){var m=new RegExp(transform).exec(match).filter(function(match){// match !== '' && match != null
return!!match;}),operation=m[1],args=m.slice(2).map(parseFloat);switch(operation){case'translate':translateMatrix(matrix,args);break;case'rotate':args[0]=fabric.util.degreesToRadians(args[0]);rotateMatrix(matrix,args);break;case'scale':scaleMatrix(matrix,args);break;case'skewX':skewMatrix(matrix,args,2);break;case'skewY':skewMatrix(matrix,args,1);break;case'matrix':matrix=args;break;}// snapshot current matrix into matrices array
matrices.push(matrix.concat());// reset
matrix=iMatrix.concat();});var combinedMatrix=matrices[0];while(matrices.length>1){matrices.shift();combinedMatrix=fabric.util.multiplyTransformMatrices(combinedMatrix,matrices[0]);}return combinedMatrix;};}();/**
   * @private
   */function parseStyleString(style,oStyle){var attr,value;style.replace(/;\s*$/,'').split(';').forEach(function(chunk){var pair=chunk.split(':');attr=pair[0].trim().toLowerCase();value=pair[1].trim();oStyle[attr]=value;});}/**
   * @private
   */function parseStyleObject(style,oStyle){var attr,value;for(var prop in style){if(typeof style[prop]==='undefined'){continue;}attr=prop.toLowerCase();value=style[prop];oStyle[attr]=value;}}/**
   * @private
   */function getGlobalStylesForElement(element,svgUid){var styles={};for(var rule in fabric.cssRules[svgUid]){if(elementMatchesRule(element,rule.split(' '))){for(var property in fabric.cssRules[svgUid][rule]){styles[property]=fabric.cssRules[svgUid][rule][property];}}}return styles;}/**
   * @private
   */function elementMatchesRule(element,selectors){var firstMatching,parentMatching=true;//start from rightmost selector.
firstMatching=selectorMatches(element,selectors.pop());if(firstMatching&&selectors.length){parentMatching=doesSomeParentMatch(element,selectors);}return firstMatching&&parentMatching&&selectors.length===0;}function doesSomeParentMatch(element,selectors){var selector,parentMatching=true;while(element.parentNode&&element.parentNode.nodeType===1&&selectors.length){if(parentMatching){selector=selectors.pop();}element=element.parentNode;parentMatching=selectorMatches(element,selector);}return selectors.length===0;}/**
   * @private
   */function selectorMatches(element,selector){var nodeName=element.nodeName,classNames=element.getAttribute('class'),id=element.getAttribute('id'),matcher;// i check if a selector matches slicing away part from it.
// if i get empty string i should match
matcher=new RegExp('^'+nodeName,'i');selector=selector.replace(matcher,'');if(id&&selector.length){matcher=new RegExp('#'+id+'(?![a-zA-Z\\-]+)','i');selector=selector.replace(matcher,'');}if(classNames&&selector.length){classNames=classNames.split(' ');for(var i=classNames.length;i--;){matcher=new RegExp('\\.'+classNames[i]+'(?![a-zA-Z\\-]+)','i');selector=selector.replace(matcher,'');}}return selector.length===0;}/**
   * @private
   * to support IE8 missing getElementById on SVGdocument
   */function elementById(doc,id){var el;doc.getElementById&&(el=doc.getElementById(id));if(el){return el;}var node,i,nodelist=doc.getElementsByTagName('*');for(i=0;i<nodelist.length;i++){node=nodelist[i];if(id===node.getAttribute('id')){return node;}}}/**
   * @private
   */function parseUseDirectives(doc){var nodelist=_getMultipleNodes(doc,['use','svg:use']),i=0;while(nodelist.length&&i<nodelist.length){var el=nodelist[i],xlink=el.getAttribute('xlink:href').substr(1),x=el.getAttribute('x')||0,y=el.getAttribute('y')||0,el2=elementById(doc,xlink).cloneNode(true),currentTrans=(el2.getAttribute('transform')||'')+' translate('+x+', '+y+')',parentNode,oldLength=nodelist.length,attr,j,attrs,l;applyViewboxTransform(el2);if(/^svg$/i.test(el2.nodeName)){var el3=el2.ownerDocument.createElement('g');for(j=0,attrs=el2.attributes,l=attrs.length;j<l;j++){attr=attrs.item(j);el3.setAttribute(attr.nodeName,attr.nodeValue);}// el2.firstChild != null
while(el2.firstChild){el3.appendChild(el2.firstChild);}el2=el3;}for(j=0,attrs=el.attributes,l=attrs.length;j<l;j++){attr=attrs.item(j);if(attr.nodeName==='x'||attr.nodeName==='y'||attr.nodeName==='xlink:href'){continue;}if(attr.nodeName==='transform'){currentTrans=attr.nodeValue+' '+currentTrans;}else{el2.setAttribute(attr.nodeName,attr.nodeValue);}}el2.setAttribute('transform',currentTrans);el2.setAttribute('instantiated_by_use','1');el2.removeAttribute('id');parentNode=el.parentNode;parentNode.replaceChild(el2,el);// some browsers do not shorten nodelist after replaceChild (IE8)
if(nodelist.length===oldLength){i++;}}}// http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute
// matches, e.g.: +14.56e-12, etc.
var reViewBoxAttrValue=new RegExp('^'+'\\s*('+fabric.reNum+'+)\\s*,?'+'\\s*('+fabric.reNum+'+)\\s*,?'+'\\s*('+fabric.reNum+'+)\\s*,?'+'\\s*('+fabric.reNum+'+)\\s*'+'$');/**
   * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements
   */function applyViewboxTransform(element){var viewBoxAttr=element.getAttribute('viewBox'),scaleX=1,scaleY=1,minX=0,minY=0,viewBoxWidth,viewBoxHeight,matrix,el,widthAttr=element.getAttribute('width'),heightAttr=element.getAttribute('height'),x=element.getAttribute('x')||0,y=element.getAttribute('y')||0,preserveAspectRatio=element.getAttribute('preserveAspectRatio')||'',missingViewBox=!viewBoxAttr||!reViewBoxTagNames.test(element.nodeName)||!(viewBoxAttr=viewBoxAttr.match(reViewBoxAttrValue)),missingDimAttr=!widthAttr||!heightAttr||widthAttr==='100%'||heightAttr==='100%',toBeParsed=missingViewBox&&missingDimAttr,parsedDim={},translateMatrix='';parsedDim.width=0;parsedDim.height=0;parsedDim.toBeParsed=toBeParsed;if(toBeParsed){return parsedDim;}if(missingViewBox){parsedDim.width=parseUnit(widthAttr);parsedDim.height=parseUnit(heightAttr);return parsedDim;}minX=-parseFloat(viewBoxAttr[1]);minY=-parseFloat(viewBoxAttr[2]);viewBoxWidth=parseFloat(viewBoxAttr[3]);viewBoxHeight=parseFloat(viewBoxAttr[4]);if(!missingDimAttr){parsedDim.width=parseUnit(widthAttr);parsedDim.height=parseUnit(heightAttr);scaleX=parsedDim.width/viewBoxWidth;scaleY=parsedDim.height/viewBoxHeight;}else{parsedDim.width=viewBoxWidth;parsedDim.height=viewBoxHeight;}// default is to preserve aspect ratio
preserveAspectRatio=fabric.util.parsePreserveAspectRatioAttribute(preserveAspectRatio);if(preserveAspectRatio.alignX!=='none'){//translate all container for the effect of Mid, Min, Max
scaleY=scaleX=scaleX>scaleY?scaleY:scaleX;}if(scaleX===1&&scaleY===1&&minX===0&&minY===0&&x===0&&y===0){return parsedDim;}if(x||y){translateMatrix=' translate('+parseUnit(x)+' '+parseUnit(y)+') ';}matrix=translateMatrix+' matrix('+scaleX+' 0'+' 0 '+scaleY+' '+minX*scaleX+' '+minY*scaleY+') ';if(element.nodeName==='svg'){el=element.ownerDocument.createElement('g');// element.firstChild != null
while(element.firstChild){el.appendChild(element.firstChild);}element.appendChild(el);}else{el=element;matrix=el.getAttribute('transform')+matrix;}el.setAttribute('transform',matrix);return parsedDim;}function hasAncestorWithNodeName(element,nodeName){while(element&&(element=element.parentNode)){if(element.nodeName&&nodeName.test(element.nodeName.replace('svg:',''))&&!element.getAttribute('instantiated_by_use')){return true;}}return false;}/**
   * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback
   * @static
   * @function
   * @memberOf fabric
   * @param {SVGDocument} doc SVG document to parse
   * @param {Function} callback Callback to call when parsing is finished;
   * It's being passed an array of elements (parsed from a document).
   * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
   * @param {Object} [parsingOptions] options for parsing document
   * @param {String} [parsingOptions.crossOrigin] crossOrigin settings
   */fabric.parseSVGDocument=function(doc,callback,reviver,parsingOptions){if(!doc){return;}parseUseDirectives(doc);var svgUid=fabric.Object.__uid++,options=applyViewboxTransform(doc),descendants=fabric.util.toArray(doc.getElementsByTagName('*'));options.crossOrigin=parsingOptions&&parsingOptions.crossOrigin;options.svgUid=svgUid;if(descendants.length===0&&fabric.isLikelyNode){// we're likely in node, where "o3-xml" library fails to gEBTN("*")
// https://github.com/ajaxorg/node-o3-xml/issues/21
descendants=doc.selectNodes('//*[name(.)!="svg"]');var arr=[];for(var i=0,len=descendants.length;i<len;i++){arr[i]=descendants[i];}descendants=arr;}var elements=descendants.filter(function(el){applyViewboxTransform(el);return reAllowedSVGTagNames.test(el.nodeName.replace('svg:',''))&&!hasAncestorWithNodeName(el,reNotAllowedAncestors);// http://www.w3.org/TR/SVG/struct.html#DefsElement
});if(!elements||elements&&!elements.length){callback&&callback([],{});return;}fabric.gradientDefs[svgUid]=fabric.getGradientDefs(doc);fabric.cssRules[svgUid]=fabric.getCSSRules(doc);// Precedence of rules:   style > class > attribute
fabric.parseElements(elements,function(instances){if(callback){callback(instances,options);}},clone(options),reviver,parsingOptions);};var reFontDeclaration=new RegExp('(normal|italic)?\\s*(normal|small-caps)?\\s*'+'(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\s*('+fabric.reNum+'(?:px|cm|mm|em|pt|pc|in)*)(?:\\/(normal|'+fabric.reNum+'))?\\s+(.*)');extend(fabric,{/**
     * Parses a short font declaration, building adding its properties to a style object
     * @static
     * @function
     * @memberOf fabric
     * @param {String} value font declaration
     * @param {Object} oStyle definition
     */parseFontDeclaration:function(value,oStyle){var match=value.match(reFontDeclaration);if(!match){return;}var fontStyle=match[1],// font variant is not used
// fontVariant = match[2],
fontWeight=match[3],fontSize=match[4],lineHeight=match[5],fontFamily=match[6];if(fontStyle){oStyle.fontStyle=fontStyle;}if(fontWeight){oStyle.fontWeight=isNaN(parseFloat(fontWeight))?fontWeight:parseFloat(fontWeight);}if(fontSize){oStyle.fontSize=parseUnit(fontSize);}if(fontFamily){oStyle.fontFamily=fontFamily;}if(lineHeight){oStyle.lineHeight=lineHeight==='normal'?1:lineHeight;}},/**
     * Parses an SVG document, returning all of the gradient declarations found in it
     * @static
     * @function
     * @memberOf fabric
     * @param {SVGDocument} doc SVG document to parse
     * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element
     */getGradientDefs:function(doc){var tagArray=['linearGradient','radialGradient','svg:linearGradient','svg:radialGradient'],elList=_getMultipleNodes(doc,tagArray),el,j=0,id,xlink,gradientDefs={},idsToXlinkMap={};j=elList.length;while(j--){el=elList[j];xlink=el.getAttribute('xlink:href');id=el.getAttribute('id');if(xlink){idsToXlinkMap[id]=xlink.substr(1);}gradientDefs[id]=el;}for(id in idsToXlinkMap){var el2=gradientDefs[idsToXlinkMap[id]].cloneNode(true);el=gradientDefs[id];while(el2.firstChild){el.appendChild(el2.firstChild);}}return gradientDefs;},/**
     * Returns an object of attributes' name/value, given element and an array of attribute names;
     * Parses parent "g" nodes recursively upwards.
     * @static
     * @memberOf fabric
     * @param {DOMElement} element Element to parse
     * @param {Array} attributes Array of attributes to parse
     * @return {Object} object containing parsed attributes' names/values
     */parseAttributes:function(element,attributes,svgUid){if(!element){return;}var value,parentAttributes={},fontSize;if(typeof svgUid==='undefined'){svgUid=element.getAttribute('svgUid');}// if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards
if(element.parentNode&&reAllowedParents.test(element.parentNode.nodeName)){parentAttributes=fabric.parseAttributes(element.parentNode,attributes,svgUid);}fontSize=parentAttributes&&parentAttributes.fontSize||element.getAttribute('font-size')||fabric.Text.DEFAULT_SVG_FONT_SIZE;var ownAttributes=attributes.reduce(function(memo,attr){value=element.getAttribute(attr);if(value){// eslint-disable-line
memo[attr]=value;}return memo;},{});// add values parsed from style, which take precedence over attributes
// (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)
ownAttributes=extend(ownAttributes,extend(getGlobalStylesForElement(element,svgUid),fabric.parseStyleAttribute(element)));var normalizedAttr,normalizedValue,normalizedStyle={};for(var attr in ownAttributes){normalizedAttr=normalizeAttr(attr);normalizedValue=normalizeValue(normalizedAttr,ownAttributes[attr],parentAttributes,fontSize);normalizedStyle[normalizedAttr]=normalizedValue;}if(normalizedStyle&&normalizedStyle.font){fabric.parseFontDeclaration(normalizedStyle.font,normalizedStyle);}var mergedAttrs=extend(parentAttributes,normalizedStyle);return reAllowedParents.test(element.nodeName)?mergedAttrs:_setStrokeFillOpacity(mergedAttrs);},/**
     * Transforms an array of svg elements to corresponding fabric.* instances
     * @static
     * @memberOf fabric
     * @param {Array} elements Array of elements to parse
     * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)
     * @param {Object} [options] Options object
     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
     */parseElements:function(elements,callback,options,reviver,parsingOptions){new fabric.ElementsParser(elements,callback,options,reviver,parsingOptions).parse();},/**
     * Parses "style" attribute, retuning an object with values
     * @static
     * @memberOf fabric
     * @param {SVGElement} element Element to parse
     * @return {Object} Objects with values parsed from style attribute of an element
     */parseStyleAttribute:function(element){var oStyle={},style=element.getAttribute('style');if(!style){return oStyle;}if(typeof style==='string'){parseStyleString(style,oStyle);}else{parseStyleObject(style,oStyle);}return oStyle;},/**
     * Parses "points" attribute, returning an array of values
     * @static
     * @memberOf fabric
     * @param {String} points points attribute string
     * @return {Array} array of points
     */parsePointsAttribute:function(points){// points attribute is required and must not be empty
if(!points){return null;}// replace commas with whitespace and remove bookending whitespace
points=points.replace(/,/g,' ').trim();points=points.split(/\s+/);var parsedPoints=[],i,len;i=0;len=points.length;for(;i<len;i+=2){parsedPoints.push({x:parseFloat(points[i]),y:parseFloat(points[i+1])});}// odd number of points is an error
// if (parsedPoints.length % 2 !== 0) {
//   return null;
// }
return parsedPoints;},/**
     * Returns CSS rules for a given SVG document
     * @static
     * @function
     * @memberOf fabric
     * @param {SVGDocument} doc SVG document to parse
     * @return {Object} CSS rules of this document
     */getCSSRules:function(doc){var styles=doc.getElementsByTagName('style'),allRules={},rules;// very crude parsing of style contents
for(var i=0,len=styles.length;i<len;i++){// IE9 doesn't support textContent, but provides text instead.
var styleContents=styles[i].textContent||styles[i].text;// remove comments
styleContents=styleContents.replace(/\/\*[\s\S]*?\*\//g,'');if(styleContents.trim()===''){continue;}rules=styleContents.match(/[^{]*\{[\s\S]*?\}/g);rules=rules.map(function(rule){return rule.trim();});rules.forEach(function(rule){var match=rule.match(/([\s\S]*?)\s*\{([^}]*)\}/),ruleObj={},declaration=match[2].trim(),propertyValuePairs=declaration.replace(/;$/,'').split(/\s*;\s*/);for(var i=0,len=propertyValuePairs.length;i<len;i++){var pair=propertyValuePairs[i].split(/\s*:\s*/),property=pair[0],value=pair[1];ruleObj[property]=value;}rule=match[1];rule.split(',').forEach(function(_rule){_rule=_rule.replace(/^svg/i,'').trim();if(_rule===''){return;}if(allRules[_rule]){fabric.util.object.extend(allRules[_rule],ruleObj);}else{allRules[_rule]=fabric.util.object.clone(ruleObj);}});});}return allRules;},/**
     * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.
     * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)
     * @memberOf fabric
     * @param {String} url
     * @param {Function} callback
     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
     * @param {Object} [options] Object containing options for parsing
     * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources
     */loadSVGFromURL:function(url,callback,reviver,options){url=url.replace(/^\n\s*/,'').trim();new fabric.util.request(url,{method:'get',onComplete:onComplete});function onComplete(r){var xml=r.responseXML;if(xml&&!xml.documentElement&&fabric.window.ActiveXObject&&r.responseText){xml=new ActiveXObject('Microsoft.XMLDOM');xml.async='false';//IE chokes on DOCTYPE
xml.loadXML(r.responseText.replace(/<!DOCTYPE[\s\S]*?(\[[\s\S]*\])*?>/i,''));}if(!xml||!xml.documentElement){callback&&callback(null);}fabric.parseSVGDocument(xml.documentElement,function(results,_options){callback&&callback(results,_options);},reviver,options);}},/**
     * Takes string corresponding to an SVG document, and parses it into a set of fabric objects
     * @memberOf fabric
     * @param {String} string
     * @param {Function} callback
     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
     * @param {Object} [options] Object containing options for parsing
     * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources
     */loadSVGFromString:function(string,callback,reviver,options){string=string.trim();var doc;if(typeof DOMParser!=='undefined'){var parser=new DOMParser();if(parser&&parser.parseFromString){doc=parser.parseFromString(string,'text/xml');}}else if(fabric.window.ActiveXObject){doc=new ActiveXObject('Microsoft.XMLDOM');doc.async='false';// IE chokes on DOCTYPE
doc.loadXML(string.replace(/<!DOCTYPE[\s\S]*?(\[[\s\S]*\])*?>/i,''));}fabric.parseSVGDocument(doc.documentElement,function(results,_options){callback(results,_options);},reviver,options);}});})( true?exports:this);fabric.ElementsParser=function(elements,callback,options,reviver,parsingOptions){this.elements=elements;this.callback=callback;this.options=options;this.reviver=reviver;this.svgUid=options&&options.svgUid||0;this.parsingOptions=parsingOptions;};fabric.ElementsParser.prototype.parse=function(){this.instances=new Array(this.elements.length);this.numElements=this.elements.length;this.createObjects();};fabric.ElementsParser.prototype.createObjects=function(){for(var i=0,len=this.elements.length;i<len;i++){this.elements[i].setAttribute('svgUid',this.svgUid);(function(_obj,i){setTimeout(function(){_obj.createObject(_obj.elements[i],i);},0);})(this,i);}};fabric.ElementsParser.prototype.createObject=function(el,index){var klass=fabric[fabric.util.string.capitalize(el.tagName.replace('svg:',''))];if(klass&&klass.fromElement){try{this._createObject(klass,el,index);}catch(err){fabric.log(err);}}else{this.checkIfDone();}};fabric.ElementsParser.prototype._createObject=function(klass,el,index){if(klass.async){klass.fromElement(el,this.createCallback(index,el),this.options);}else{var obj=klass.fromElement(el,this.options);this.resolveGradient(obj,'fill');this.resolveGradient(obj,'stroke');this.reviver&&this.reviver(el,obj);this.instances[index]=obj;this.checkIfDone();}};fabric.ElementsParser.prototype.createCallback=function(index,el){var _this=this;return function(obj){_this.resolveGradient(obj,'fill');_this.resolveGradient(obj,'stroke');_this.reviver&&_this.reviver(el,obj);_this.instances[index]=obj;_this.checkIfDone();};};fabric.ElementsParser.prototype.resolveGradient=function(obj,property){var instanceFillValue=obj.get(property);if(!/^url\(/.test(instanceFillValue)){return;}var gradientId=instanceFillValue.slice(5,instanceFillValue.length-1);if(fabric.gradientDefs[this.svgUid][gradientId]){obj.set(property,fabric.Gradient.fromElement(fabric.gradientDefs[this.svgUid][gradientId],obj));}};fabric.ElementsParser.prototype.checkIfDone=function(){if(--this.numElements===0){this.instances=this.instances.filter(function(el){// eslint-disable-next-line no-eq-null, eqeqeq
return el!=null;});this.callback(this.instances);}};(function(global){'use strict';/* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */var fabric=global.fabric||(global.fabric={});if(fabric.Point){fabric.warn('fabric.Point is already defined');return;}fabric.Point=Point;/**
   * Point class
   * @class fabric.Point
   * @memberOf fabric
   * @constructor
   * @param {Number} x
   * @param {Number} y
   * @return {fabric.Point} thisArg
   */function Point(x,y){this.x=x;this.y=y;}Point.prototype=/** @lends fabric.Point.prototype */{type:'point',constructor:Point,/**
     * Adds another point to this one and returns another one
     * @param {fabric.Point} that
     * @return {fabric.Point} new Point instance with added values
     */add:function(that){return new Point(this.x+that.x,this.y+that.y);},/**
     * Adds another point to this one
     * @param {fabric.Point} that
     * @return {fabric.Point} thisArg
     * @chainable
     */addEquals:function(that){this.x+=that.x;this.y+=that.y;return this;},/**
     * Adds value to this point and returns a new one
     * @param {Number} scalar
     * @return {fabric.Point} new Point with added value
     */scalarAdd:function(scalar){return new Point(this.x+scalar,this.y+scalar);},/**
     * Adds value to this point
     * @param {Number} scalar
     * @return {fabric.Point} thisArg
     * @chainable
     */scalarAddEquals:function(scalar){this.x+=scalar;this.y+=scalar;return this;},/**
     * Subtracts another point from this point and returns a new one
     * @param {fabric.Point} that
     * @return {fabric.Point} new Point object with subtracted values
     */subtract:function(that){return new Point(this.x-that.x,this.y-that.y);},/**
     * Subtracts another point from this point
     * @param {fabric.Point} that
     * @return {fabric.Point} thisArg
     * @chainable
     */subtractEquals:function(that){this.x-=that.x;this.y-=that.y;return this;},/**
     * Subtracts value from this point and returns a new one
     * @param {Number} scalar
     * @return {fabric.Point}
     */scalarSubtract:function(scalar){return new Point(this.x-scalar,this.y-scalar);},/**
     * Subtracts value from this point
     * @param {Number} scalar
     * @return {fabric.Point} thisArg
     * @chainable
     */scalarSubtractEquals:function(scalar){this.x-=scalar;this.y-=scalar;return this;},/**
     * Miltiplies this point by a value and returns a new one
     * TODO: rename in scalarMultiply in 2.0
     * @param {Number} scalar
     * @return {fabric.Point}
     */multiply:function(scalar){return new Point(this.x*scalar,this.y*scalar);},/**
     * Miltiplies this point by a value
     * TODO: rename in scalarMultiplyEquals in 2.0
     * @param {Number} scalar
     * @return {fabric.Point} thisArg
     * @chainable
     */multiplyEquals:function(scalar){this.x*=scalar;this.y*=scalar;return this;},/**
     * Divides this point by a value and returns a new one
     * TODO: rename in scalarDivide in 2.0
     * @param {Number} scalar
     * @return {fabric.Point}
     */divide:function(scalar){return new Point(this.x/scalar,this.y/scalar);},/**
     * Divides this point by a value
     * TODO: rename in scalarDivideEquals in 2.0
     * @param {Number} scalar
     * @return {fabric.Point} thisArg
     * @chainable
     */divideEquals:function(scalar){this.x/=scalar;this.y/=scalar;return this;},/**
     * Returns true if this point is equal to another one
     * @param {fabric.Point} that
     * @return {Boolean}
     */eq:function(that){return this.x===that.x&&this.y===that.y;},/**
     * Returns true if this point is less than another one
     * @param {fabric.Point} that
     * @return {Boolean}
     */lt:function(that){return this.x<that.x&&this.y<that.y;},/**
     * Returns true if this point is less than or equal to another one
     * @param {fabric.Point} that
     * @return {Boolean}
     */lte:function(that){return this.x<=that.x&&this.y<=that.y;},/**

     * Returns true if this point is greater another one
     * @param {fabric.Point} that
     * @return {Boolean}
     */gt:function(that){return this.x>that.x&&this.y>that.y;},/**
     * Returns true if this point is greater than or equal to another one
     * @param {fabric.Point} that
     * @return {Boolean}
     */gte:function(that){return this.x>=that.x&&this.y>=that.y;},/**
     * Returns new point which is the result of linear interpolation with this one and another one
     * @param {fabric.Point} that
     * @param {Number} t , position of interpolation, between 0 and 1 default 0.5
     * @return {fabric.Point}
     */lerp:function(that,t){if(typeof t==='undefined'){t=0.5;}t=Math.max(Math.min(1,t),0);return new Point(this.x+(that.x-this.x)*t,this.y+(that.y-this.y)*t);},/**
     * Returns distance from this point and another one
     * @param {fabric.Point} that
     * @return {Number}
     */distanceFrom:function(that){var dx=this.x-that.x,dy=this.y-that.y;return Math.sqrt(dx*dx+dy*dy);},/**
     * Returns the point between this point and another one
     * @param {fabric.Point} that
     * @return {fabric.Point}
     */midPointFrom:function(that){return this.lerp(that);},/**
     * Returns a new point which is the min of this and another one
     * @param {fabric.Point} that
     * @return {fabric.Point}
     */min:function(that){return new Point(Math.min(this.x,that.x),Math.min(this.y,that.y));},/**
     * Returns a new point which is the max of this and another one
     * @param {fabric.Point} that
     * @return {fabric.Point}
     */max:function(that){return new Point(Math.max(this.x,that.x),Math.max(this.y,that.y));},/**
     * Returns string representation of this point
     * @return {String}
     */toString:function(){return this.x+','+this.y;},/**
     * Sets x/y of this point
     * @param {Number} x
     * @param {Number} y
     * @chainable
     */setXY:function(x,y){this.x=x;this.y=y;return this;},/**
     * Sets x of this point
     * @param {Number} x
     * @chainable
     */setX:function(x){this.x=x;return this;},/**
     * Sets y of this point
     * @param {Number} y
     * @chainable
     */setY:function(y){this.y=y;return this;},/**
     * Sets x/y of this point from another point
     * @param {fabric.Point} that
     * @chainable
     */setFromPoint:function(that){this.x=that.x;this.y=that.y;return this;},/**
     * Swaps x/y of this point and another point
     * @param {fabric.Point} that
     */swap:function(that){var x=this.x,y=this.y;this.x=that.x;this.y=that.y;that.x=x;that.y=y;},/**
     * return a cloned instance of the point
     * @return {fabric.Point}
     */clone:function(){return new Point(this.x,this.y);}};})( true?exports:this);(function(global){'use strict';/* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */var fabric=global.fabric||(global.fabric={});if(fabric.Intersection){fabric.warn('fabric.Intersection is already defined');return;}/**
   * Intersection class
   * @class fabric.Intersection
   * @memberOf fabric
   * @constructor
   */function Intersection(status){this.status=status;this.points=[];}fabric.Intersection=Intersection;fabric.Intersection.prototype=/** @lends fabric.Intersection.prototype */{constructor:Intersection,/**
     * Appends a point to intersection
     * @param {fabric.Point} point
     * @return {fabric.Intersection} thisArg
     * @chainable
     */appendPoint:function(point){this.points.push(point);return this;},/**
     * Appends points to intersection
     * @param {Array} points
     * @return {fabric.Intersection} thisArg
     * @chainable
     */appendPoints:function(points){this.points=this.points.concat(points);return this;}};/**
   * Checks if one line intersects another
   * TODO: rename in intersectSegmentSegment
   * @static
   * @param {fabric.Point} a1
   * @param {fabric.Point} a2
   * @param {fabric.Point} b1
   * @param {fabric.Point} b2
   * @return {fabric.Intersection}
   */fabric.Intersection.intersectLineLine=function(a1,a2,b1,b2){var result,uaT=(b2.x-b1.x)*(a1.y-b1.y)-(b2.y-b1.y)*(a1.x-b1.x),ubT=(a2.x-a1.x)*(a1.y-b1.y)-(a2.y-a1.y)*(a1.x-b1.x),uB=(b2.y-b1.y)*(a2.x-a1.x)-(b2.x-b1.x)*(a2.y-a1.y);if(uB!==0){var ua=uaT/uB,ub=ubT/uB;if(0<=ua&&ua<=1&&0<=ub&&ub<=1){result=new Intersection('Intersection');result.appendPoint(new fabric.Point(a1.x+ua*(a2.x-a1.x),a1.y+ua*(a2.y-a1.y)));}else{result=new Intersection();}}else{if(uaT===0||ubT===0){result=new Intersection('Coincident');}else{result=new Intersection('Parallel');}}return result;};/**
   * Checks if line intersects polygon
   * TODO: rename in intersectSegmentPolygon
   * fix detection of coincident
   * @static
   * @param {fabric.Point} a1
   * @param {fabric.Point} a2
   * @param {Array} points
   * @return {fabric.Intersection}
   */fabric.Intersection.intersectLinePolygon=function(a1,a2,points){var result=new Intersection(),length=points.length,b1,b2,inter;for(var i=0;i<length;i++){b1=points[i];b2=points[(i+1)%length];inter=Intersection.intersectLineLine(a1,a2,b1,b2);result.appendPoints(inter.points);}if(result.points.length>0){result.status='Intersection';}return result;};/**
   * Checks if polygon intersects another polygon
   * @static
   * @param {Array} points1
   * @param {Array} points2
   * @return {fabric.Intersection}
   */fabric.Intersection.intersectPolygonPolygon=function(points1,points2){var result=new Intersection(),length=points1.length;for(var i=0;i<length;i++){var a1=points1[i],a2=points1[(i+1)%length],inter=Intersection.intersectLinePolygon(a1,a2,points2);result.appendPoints(inter.points);}if(result.points.length>0){result.status='Intersection';}return result;};/**
   * Checks if polygon intersects rectangle
   * @static
   * @param {Array} points
   * @param {fabric.Point} r1
   * @param {fabric.Point} r2
   * @return {fabric.Intersection}
   */fabric.Intersection.intersectPolygonRectangle=function(points,r1,r2){var min=r1.min(r2),max=r1.max(r2),topRight=new fabric.Point(max.x,min.y),bottomLeft=new fabric.Point(min.x,max.y),inter1=Intersection.intersectLinePolygon(min,topRight,points),inter2=Intersection.intersectLinePolygon(topRight,max,points),inter3=Intersection.intersectLinePolygon(max,bottomLeft,points),inter4=Intersection.intersectLinePolygon(bottomLeft,min,points),result=new Intersection();result.appendPoints(inter1.points);result.appendPoints(inter2.points);result.appendPoints(inter3.points);result.appendPoints(inter4.points);if(result.points.length>0){result.status='Intersection';}return result;};})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={});if(fabric.Color){fabric.warn('fabric.Color is already defined.');return;}/**
   * Color class
   * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;
   * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.
   *
   * @class fabric.Color
   * @param {String} color optional in hex or rgb(a) or hsl format or from known color list
   * @return {fabric.Color} thisArg
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}
   */function Color(color){if(!color){this.setSource([0,0,0,1]);}else{this._tryParsingColor(color);}}fabric.Color=Color;fabric.Color.prototype=/** @lends fabric.Color.prototype */{/**
     * @private
     * @param {String|Array} color Color value to parse
     */_tryParsingColor:function(color){var source;if(color in Color.colorNameMap){color=Color.colorNameMap[color];}if(color==='transparent'){source=[255,255,255,0];}if(!source){source=Color.sourceFromHex(color);}if(!source){source=Color.sourceFromRgb(color);}if(!source){source=Color.sourceFromHsl(color);}if(!source){//if color is not recognize let's make black as canvas does
source=[0,0,0,1];}if(source){this.setSource(source);}},/**
     * Adapted from <a href="https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html">https://github.com/mjijackson</a>
     * @private
     * @param {Number} r Red color value
     * @param {Number} g Green color value
     * @param {Number} b Blue color value
     * @return {Array} Hsl color
     */_rgbToHsl:function(r,g,b){r/=255;g/=255;b/=255;var h,s,l,max=fabric.util.array.max([r,g,b]),min=fabric.util.array.min([r,g,b]);l=(max+min)/2;if(max===min){h=s=0;// achromatic
}else{var d=max-min;s=l>0.5?d/(2-max-min):d/(max+min);switch(max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break;}h/=6;}return[Math.round(h*360),Math.round(s*100),Math.round(l*100)];},/**
     * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])
     * @return {Array}
     */getSource:function(){return this._source;},/**
     * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])
     * @param {Array} source
     */setSource:function(source){this._source=source;},/**
     * Returns color representation in RGB format
     * @return {String} ex: rgb(0-255,0-255,0-255)
     */toRgb:function(){var source=this.getSource();return'rgb('+source[0]+','+source[1]+','+source[2]+')';},/**
     * Returns color representation in RGBA format
     * @return {String} ex: rgba(0-255,0-255,0-255,0-1)
     */toRgba:function(){var source=this.getSource();return'rgba('+source[0]+','+source[1]+','+source[2]+','+source[3]+')';},/**
     * Returns color representation in HSL format
     * @return {String} ex: hsl(0-360,0%-100%,0%-100%)
     */toHsl:function(){var source=this.getSource(),hsl=this._rgbToHsl(source[0],source[1],source[2]);return'hsl('+hsl[0]+','+hsl[1]+'%,'+hsl[2]+'%)';},/**
     * Returns color representation in HSLA format
     * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)
     */toHsla:function(){var source=this.getSource(),hsl=this._rgbToHsl(source[0],source[1],source[2]);return'hsla('+hsl[0]+','+hsl[1]+'%,'+hsl[2]+'%,'+source[3]+')';},/**
     * Returns color representation in HEX format
     * @return {String} ex: FF5555
     */toHex:function(){var source=this.getSource(),r,g,b;r=source[0].toString(16);r=r.length===1?'0'+r:r;g=source[1].toString(16);g=g.length===1?'0'+g:g;b=source[2].toString(16);b=b.length===1?'0'+b:b;return r.toUpperCase()+g.toUpperCase()+b.toUpperCase();},/**
     * Returns color representation in HEXA format
     * @return {String} ex: FF5555CC
     */toHexa:function(){var source=this.getSource(),a;a=source[3]*255;a=a.toString(16);a=a.length===1?'0'+a:a;return this.toHex()+a.toUpperCase();},/**
     * Gets value of alpha channel for this color
     * @return {Number} 0-1
     */getAlpha:function(){return this.getSource()[3];},/**
     * Sets value of alpha channel for this color
     * @param {Number} alpha Alpha value 0-1
     * @return {fabric.Color} thisArg
     */setAlpha:function(alpha){var source=this.getSource();source[3]=alpha;this.setSource(source);return this;},/**
     * Transforms color to its grayscale representation
     * @return {fabric.Color} thisArg
     */toGrayscale:function(){var source=this.getSource(),average=parseInt((source[0]*0.3+source[1]*0.59+source[2]*0.11).toFixed(0),10),currentAlpha=source[3];this.setSource([average,average,average,currentAlpha]);return this;},/**
     * Transforms color to its black and white representation
     * @param {Number} threshold
     * @return {fabric.Color} thisArg
     */toBlackWhite:function(threshold){var source=this.getSource(),average=(source[0]*0.3+source[1]*0.59+source[2]*0.11).toFixed(0),currentAlpha=source[3];threshold=threshold||127;average=Number(average)<Number(threshold)?0:255;this.setSource([average,average,average,currentAlpha]);return this;},/**
     * Overlays color with another color
     * @param {String|fabric.Color} otherColor
     * @return {fabric.Color} thisArg
     */overlayWith:function(otherColor){if(!(otherColor instanceof Color)){otherColor=new Color(otherColor);}var result=[],alpha=this.getAlpha(),otherAlpha=0.5,source=this.getSource(),otherSource=otherColor.getSource();for(var i=0;i<3;i++){result.push(Math.round(source[i]*(1-otherAlpha)+otherSource[i]*otherAlpha));}result[3]=alpha;this.setSource(result);return this;}};/**
   * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))
   * @static
   * @field
   * @memberOf fabric.Color
   */// eslint-disable-next-line max-len
fabric.Color.reRGBa=/^rgba?\(\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*(?:\s*,\s*((?:\d*\.?\d+)?)\s*)?\)$/;/**
   * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))
   * @static
   * @field
   * @memberOf fabric.Color
   */fabric.Color.reHSLa=/^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3}\%)\s*,\s*(\d{1,3}\%)\s*(?:\s*,\s*(\d+(?:\.\d+)?)\s*)?\)$/;/**
   * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)
   * @static
   * @field
   * @memberOf fabric.Color
   */fabric.Color.reHex=/^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;/**
   * Map of the 17 basic color names with HEX code
   * @static
   * @field
   * @memberOf fabric.Color
   * @see: http://www.w3.org/TR/CSS2/syndata.html#color-units
   */fabric.Color.colorNameMap={aqua:'#00FFFF',black:'#000000',blue:'#0000FF',fuchsia:'#FF00FF',gray:'#808080',grey:'#808080',green:'#008000',lime:'#00FF00',maroon:'#800000',navy:'#000080',olive:'#808000',orange:'#FFA500',purple:'#800080',red:'#FF0000',silver:'#C0C0C0',teal:'#008080',white:'#FFFFFF',yellow:'#FFFF00'};/**
   * @private
   * @param {Number} p
   * @param {Number} q
   * @param {Number} t
   * @return {Number}
   */function hue2rgb(p,q,t){if(t<0){t+=1;}if(t>1){t-=1;}if(t<1/6){return p+(q-p)*6*t;}if(t<1/2){return q;}if(t<2/3){return p+(q-p)*(2/3-t)*6;}return p;}/**
   * Returns new color object, when given a color in RGB format
   * @memberOf fabric.Color
   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)
   * @return {fabric.Color}
   */fabric.Color.fromRgb=function(color){return Color.fromSource(Color.sourceFromRgb(color));};/**
   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format
   * @memberOf fabric.Color
   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)
   * @return {Array} source
   */fabric.Color.sourceFromRgb=function(color){var match=color.match(Color.reRGBa);if(match){var r=parseInt(match[1],10)/(/%$/.test(match[1])?100:1)*(/%$/.test(match[1])?255:1),g=parseInt(match[2],10)/(/%$/.test(match[2])?100:1)*(/%$/.test(match[2])?255:1),b=parseInt(match[3],10)/(/%$/.test(match[3])?100:1)*(/%$/.test(match[3])?255:1);return[parseInt(r,10),parseInt(g,10),parseInt(b,10),match[4]?parseFloat(match[4]):1];}};/**
   * Returns new color object, when given a color in RGBA format
   * @static
   * @function
   * @memberOf fabric.Color
   * @param {String} color
   * @return {fabric.Color}
   */fabric.Color.fromRgba=Color.fromRgb;/**
   * Returns new color object, when given a color in HSL format
   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)
   * @memberOf fabric.Color
   * @return {fabric.Color}
   */fabric.Color.fromHsl=function(color){return Color.fromSource(Color.sourceFromHsl(color));};/**
   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.
   * Adapted from <a href="https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html">https://github.com/mjijackson</a>
   * @memberOf fabric.Color
   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)
   * @return {Array} source
   * @see http://http://www.w3.org/TR/css3-color/#hsl-color
   */fabric.Color.sourceFromHsl=function(color){var match=color.match(Color.reHSLa);if(!match){return;}var h=(parseFloat(match[1])%360+360)%360/360,s=parseFloat(match[2])/(/%$/.test(match[2])?100:1),l=parseFloat(match[3])/(/%$/.test(match[3])?100:1),r,g,b;if(s===0){r=g=b=l;}else{var q=l<=0.5?l*(s+1):l+s-l*s,p=l*2-q;r=hue2rgb(p,q,h+1/3);g=hue2rgb(p,q,h);b=hue2rgb(p,q,h-1/3);}return[Math.round(r*255),Math.round(g*255),Math.round(b*255),match[4]?parseFloat(match[4]):1];};/**
   * Returns new color object, when given a color in HSLA format
   * @static
   * @function
   * @memberOf fabric.Color
   * @param {String} color
   * @return {fabric.Color}
   */fabric.Color.fromHsla=Color.fromHsl;/**
   * Returns new color object, when given a color in HEX format
   * @static
   * @memberOf fabric.Color
   * @param {String} color Color value ex: FF5555
   * @return {fabric.Color}
   */fabric.Color.fromHex=function(color){return Color.fromSource(Color.sourceFromHex(color));};/**
   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format
   * @static
   * @memberOf fabric.Color
   * @param {String} color ex: FF5555 or FF5544CC (RGBa)
   * @return {Array} source
   */fabric.Color.sourceFromHex=function(color){if(color.match(Color.reHex)){var value=color.slice(color.indexOf('#')+1),isShortNotation=value.length===3||value.length===4,isRGBa=value.length===8||value.length===4,r=isShortNotation?value.charAt(0)+value.charAt(0):value.substring(0,2),g=isShortNotation?value.charAt(1)+value.charAt(1):value.substring(2,4),b=isShortNotation?value.charAt(2)+value.charAt(2):value.substring(4,6),a=isRGBa?isShortNotation?value.charAt(3)+value.charAt(3):value.substring(6,8):'FF';return[parseInt(r,16),parseInt(g,16),parseInt(b,16),parseFloat((parseInt(a,16)/255).toFixed(2))];}};/**
   * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])
   * @static
   * @memberOf fabric.Color
   * @param {Array} source
   * @return {fabric.Color}
   */fabric.Color.fromSource=function(source){var oColor=new Color();oColor.setSource(source);return oColor;};})( true?exports:this);(function(){/* _FROM_SVG_START_ */function getColorStop(el){var style=el.getAttribute('style'),offset=el.getAttribute('offset')||0,color,colorAlpha,opacity;// convert percents to absolute values
offset=parseFloat(offset)/(/%$/.test(offset)?100:1);offset=offset<0?0:offset>1?1:offset;if(style){var keyValuePairs=style.split(/\s*;\s*/);if(keyValuePairs[keyValuePairs.length-1]===''){keyValuePairs.pop();}for(var i=keyValuePairs.length;i--;){var split=keyValuePairs[i].split(/\s*:\s*/),key=split[0].trim(),value=split[1].trim();if(key==='stop-color'){color=value;}else if(key==='stop-opacity'){opacity=value;}}}if(!color){color=el.getAttribute('stop-color')||'rgb(0,0,0)';}if(!opacity){opacity=el.getAttribute('stop-opacity');}color=new fabric.Color(color);colorAlpha=color.getAlpha();opacity=isNaN(parseFloat(opacity))?1:parseFloat(opacity);opacity*=colorAlpha;return{offset:offset,color:color.toRgb(),opacity:opacity};}function getLinearCoords(el){return{x1:el.getAttribute('x1')||0,y1:el.getAttribute('y1')||0,x2:el.getAttribute('x2')||'100%',y2:el.getAttribute('y2')||0};}function getRadialCoords(el){return{x1:el.getAttribute('fx')||el.getAttribute('cx')||'50%',y1:el.getAttribute('fy')||el.getAttribute('cy')||'50%',r1:0,x2:el.getAttribute('cx')||'50%',y2:el.getAttribute('cy')||'50%',r2:el.getAttribute('r')||'50%'};}/* _FROM_SVG_END_ */var clone=fabric.util.object.clone;/**
   * Gradient class
   * @class fabric.Gradient
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}
   * @see {@link fabric.Gradient#initialize} for constructor definition
   */fabric.Gradient=fabric.util.createClass(/** @lends fabric.Gradient.prototype */{/**
     * Horizontal offset for aligning gradients coming from SVG when outside pathgroups
     * @type Number
     * @default 0
     */offsetX:0,/**
     * Vertical offset for aligning gradients coming from SVG when outside pathgroups
     * @type Number
     * @default 0
     */offsetY:0,/**
     * Constructor
     * @param {Object} [options] Options object with type, coords, gradientUnits and colorStops
     * @return {fabric.Gradient} thisArg
     */initialize:function(options){options||(options={});var coords={};this.id=fabric.Object.__uid++;this.type=options.type||'linear';coords={x1:options.coords.x1||0,y1:options.coords.y1||0,x2:options.coords.x2||0,y2:options.coords.y2||0};if(this.type==='radial'){coords.r1=options.coords.r1||0;coords.r2=options.coords.r2||0;}this.coords=coords;this.colorStops=options.colorStops.slice();if(options.gradientTransform){this.gradientTransform=options.gradientTransform;}this.offsetX=options.offsetX||this.offsetX;this.offsetY=options.offsetY||this.offsetY;},/**
     * Adds another colorStop
     * @param {Object} colorStop Object with offset and color
     * @return {fabric.Gradient} thisArg
     */addColorStop:function(colorStops){for(var position in colorStops){var color=new fabric.Color(colorStops[position]);this.colorStops.push({offset:parseFloat(position),color:color.toRgb(),opacity:color.getAlpha()});}return this;},/**
     * Returns object representation of a gradient
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object}
     */toObject:function(propertiesToInclude){var object={type:this.type,coords:this.coords,colorStops:this.colorStops,offsetX:this.offsetX,offsetY:this.offsetY,gradientTransform:this.gradientTransform?this.gradientTransform.concat():this.gradientTransform};fabric.util.populateWithProperties(this,object,propertiesToInclude);return object;},/* _TO_SVG_START_ *//**
     * Returns SVG representation of an gradient
     * @param {Object} object Object to create a gradient for
     * @return {String} SVG representation of an gradient (linear/radial)
     */toSVG:function(object){var coords=clone(this.coords,true),markup,commonAttributes,colorStops=clone(this.colorStops,true),needsSwap=coords.r1>coords.r2;// colorStops must be sorted ascending
colorStops.sort(function(a,b){return a.offset-b.offset;});if(!(object.group&&object.group.type==='path-group')){for(var prop in coords){if(prop==='x1'||prop==='x2'){coords[prop]+=this.offsetX-object.width/2;}else if(prop==='y1'||prop==='y2'){coords[prop]+=this.offsetY-object.height/2;}}}commonAttributes='id="SVGID_'+this.id+'" gradientUnits="userSpaceOnUse"';if(this.gradientTransform){commonAttributes+=' gradientTransform="matrix('+this.gradientTransform.join(' ')+')" ';}if(this.type==='linear'){markup=['<linearGradient ',commonAttributes,' x1="',coords.x1,'" y1="',coords.y1,'" x2="',coords.x2,'" y2="',coords.y2,'">\n'];}else if(this.type==='radial'){// svg radial gradient has just 1 radius. the biggest.
markup=['<radialGradient ',commonAttributes,' cx="',needsSwap?coords.x1:coords.x2,'" cy="',needsSwap?coords.y1:coords.y2,'" r="',needsSwap?coords.r1:coords.r2,'" fx="',needsSwap?coords.x2:coords.x1,'" fy="',needsSwap?coords.y2:coords.y1,'">\n'];}if(this.type==='radial'){if(needsSwap){// svg goes from internal to external radius. if radius are inverted, swap color stops.
colorStops=colorStops.concat();colorStops.reverse();for(var i=0;i<colorStops.length;i++){colorStops[i].offset=1-colorStops[i].offset;}}var minRadius=Math.min(coords.r1,coords.r2);if(minRadius>0){// i have to shift all colorStops and add new one in 0.
var maxRadius=Math.max(coords.r1,coords.r2),percentageShift=minRadius/maxRadius;for(var i=0;i<colorStops.length;i++){colorStops[i].offset+=percentageShift*(1-colorStops[i].offset);}}}for(var i=0;i<colorStops.length;i++){var colorStop=colorStops[i];markup.push('<stop ','offset="',colorStop.offset*100+'%','" style="stop-color:',colorStop.color,colorStop.opacity!==null?';stop-opacity: '+colorStop.opacity:';','"/>\n');}markup.push(this.type==='linear'?'</linearGradient>\n':'</radialGradient>\n');return markup.join('');},/* _TO_SVG_END_ *//**
     * Returns an instance of CanvasGradient
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Object} object
     * @return {CanvasGradient}
     */toLive:function(ctx,object){var gradient,prop,coords=fabric.util.object.clone(this.coords);if(!this.type){return;}if(object.group&&object.group.type==='path-group'){for(prop in coords){if(prop==='x1'||prop==='x2'){coords[prop]+=-this.offsetX+object.width/2;}else if(prop==='y1'||prop==='y2'){coords[prop]+=-this.offsetY+object.height/2;}}}if(this.type==='linear'){gradient=ctx.createLinearGradient(coords.x1,coords.y1,coords.x2,coords.y2);}else if(this.type==='radial'){gradient=ctx.createRadialGradient(coords.x1,coords.y1,coords.r1,coords.x2,coords.y2,coords.r2);}for(var i=0,len=this.colorStops.length;i<len;i++){var color=this.colorStops[i].color,opacity=this.colorStops[i].opacity,offset=this.colorStops[i].offset;if(typeof opacity!=='undefined'){color=new fabric.Color(color).setAlpha(opacity).toRgba();}gradient.addColorStop(offset,color);}return gradient;}});fabric.util.object.extend(fabric.Gradient,{/* _FROM_SVG_START_ *//**
     * Returns {@link fabric.Gradient} instance from an SVG element
     * @static
     * @memberOf fabric.Gradient
     * @param {SVGGradientElement} el SVG gradient element
     * @param {fabric.Object} instance
     * @return {fabric.Gradient} Gradient instance
     * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement
     * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement
     */fromElement:function(el,instance){/**
       *  @example:
       *
       *  <linearGradient id="linearGrad1">
       *    <stop offset="0%" stop-color="white"/>
       *    <stop offset="100%" stop-color="black"/>
       *  </linearGradient>
       *
       *  OR
       *
       *  <linearGradient id="linearGrad2">
       *    <stop offset="0" style="stop-color:rgb(255,255,255)"/>
       *    <stop offset="1" style="stop-color:rgb(0,0,0)"/>
       *  </linearGradient>
       *
       *  OR
       *
       *  <radialGradient id="radialGrad1">
       *    <stop offset="0%" stop-color="white" stop-opacity="1" />
       *    <stop offset="50%" stop-color="black" stop-opacity="0.5" />
       *    <stop offset="100%" stop-color="white" stop-opacity="1" />
       *  </radialGradient>
       *
       *  OR
       *
       *  <radialGradient id="radialGrad2">
       *    <stop offset="0" stop-color="rgb(255,255,255)" />
       *    <stop offset="0.5" stop-color="rgb(0,0,0)" />
       *    <stop offset="1" stop-color="rgb(255,255,255)" />
       *  </radialGradient>
       *
       */var colorStopEls=el.getElementsByTagName('stop'),type,gradientUnits=el.getAttribute('gradientUnits')||'objectBoundingBox',gradientTransform=el.getAttribute('gradientTransform'),colorStops=[],coords,ellipseMatrix;if(el.nodeName==='linearGradient'||el.nodeName==='LINEARGRADIENT'){type='linear';}else{type='radial';}if(type==='linear'){coords=getLinearCoords(el);}else if(type==='radial'){coords=getRadialCoords(el);}for(var i=colorStopEls.length;i--;){colorStops.push(getColorStop(colorStopEls[i]));}ellipseMatrix=_convertPercentUnitsToValues(instance,coords,gradientUnits);var gradient=new fabric.Gradient({type:type,coords:coords,colorStops:colorStops,offsetX:-instance.left,offsetY:-instance.top});if(gradientTransform||ellipseMatrix!==''){gradient.gradientTransform=fabric.parseTransformAttribute((gradientTransform||'')+ellipseMatrix);}return gradient;},/* _FROM_SVG_END_ *//**
     * Returns {@link fabric.Gradient} instance from its object representation
     * @static
     * @memberOf fabric.Gradient
     * @param {Object} obj
     * @param {Object} [options] Options object
     */forObject:function(obj,options){options||(options={});_convertPercentUnitsToValues(obj,options.coords,'userSpaceOnUse');return new fabric.Gradient(options);}});/**
   * @private
   */function _convertPercentUnitsToValues(object,options,gradientUnits){var propValue,addFactor=0,multFactor=1,ellipseMatrix='';for(var prop in options){if(options[prop]==='Infinity'){options[prop]=1;}else if(options[prop]==='-Infinity'){options[prop]=0;}propValue=parseFloat(options[prop],10);if(typeof options[prop]==='string'&&/^\d+%$/.test(options[prop])){multFactor=0.01;}else{multFactor=1;}if(prop==='x1'||prop==='x2'||prop==='r2'){multFactor*=gradientUnits==='objectBoundingBox'?object.width:1;addFactor=gradientUnits==='objectBoundingBox'?object.left||0:0;}else if(prop==='y1'||prop==='y2'){multFactor*=gradientUnits==='objectBoundingBox'?object.height:1;addFactor=gradientUnits==='objectBoundingBox'?object.top||0:0;}options[prop]=propValue*multFactor+addFactor;}if(object.type==='ellipse'&&options.r2!==null&&gradientUnits==='objectBoundingBox'&&object.rx!==object.ry){var scaleFactor=object.ry/object.rx;ellipseMatrix=' scale(1, '+scaleFactor+')';if(options.y1){options.y1/=scaleFactor;}if(options.y2){options.y2/=scaleFactor;}}return ellipseMatrix;}})();(function(){'use strict';var toFixed=fabric.util.toFixed;/**
   * Pattern class
   * @class fabric.Pattern
   * @see {@link http://fabricjs.com/patterns|Pattern demo}
   * @see {@link http://fabricjs.com/dynamic-patterns|DynamicPattern demo}
   * @see {@link fabric.Pattern#initialize} for constructor definition
   */fabric.Pattern=fabric.util.createClass(/** @lends fabric.Pattern.prototype */{/**
     * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)
     * @type String
     * @default
     */repeat:'repeat',/**
     * Pattern horizontal offset from object's left/top corner
     * @type Number
     * @default
     */offsetX:0,/**
     * Pattern vertical offset from object's left/top corner
     * @type Number
     * @default
     */offsetY:0,/**
     * Constructor
     * @param {Object} [options] Options object
     * @param {Function} [callback] function to invoke after callback init.
     * @return {fabric.Pattern} thisArg
     */initialize:function(options,callback){options||(options={});this.id=fabric.Object.__uid++;this.setOptions(options);if(!options.source||options.source&&typeof options.source!=='string'){callback&&callback(this);return;}// function string
if(typeof fabric.util.getFunctionBody(options.source)!=='undefined'){this.source=new Function(fabric.util.getFunctionBody(options.source));callback&&callback(this);}else{// img src string
var _this=this;this.source=fabric.util.createImage();fabric.util.loadImage(options.source,function(img){_this.source=img;callback&&callback(_this);});}},/**
     * Returns object representation of a pattern
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of a pattern instance
     */toObject:function(propertiesToInclude){var NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS,source,object;// callback
if(typeof this.source==='function'){source=String(this.source);}// <img> element
else if(typeof this.source.src==='string'){source=this.source.src;}// <canvas> element
else if(typeof this.source==='object'&&this.source.toDataURL){source=this.source.toDataURL();}object={type:'pattern',source:source,repeat:this.repeat,offsetX:toFixed(this.offsetX,NUM_FRACTION_DIGITS),offsetY:toFixed(this.offsetY,NUM_FRACTION_DIGITS)};fabric.util.populateWithProperties(this,object,propertiesToInclude);return object;},/* _TO_SVG_START_ *//**
     * Returns SVG representation of a pattern
     * @param {fabric.Object} object
     * @return {String} SVG representation of a pattern
     */toSVG:function(object){var patternSource=typeof this.source==='function'?this.source():this.source,patternWidth=patternSource.width/object.width,patternHeight=patternSource.height/object.height,patternOffsetX=this.offsetX/object.width,patternOffsetY=this.offsetY/object.height,patternImgSrc='';if(this.repeat==='repeat-x'||this.repeat==='no-repeat'){patternHeight=1;}if(this.repeat==='repeat-y'||this.repeat==='no-repeat'){patternWidth=1;}if(patternSource.src){patternImgSrc=patternSource.src;}else if(patternSource.toDataURL){patternImgSrc=patternSource.toDataURL();}return'<pattern id="SVGID_'+this.id+'" x="'+patternOffsetX+'" y="'+patternOffsetY+'" width="'+patternWidth+'" height="'+patternHeight+'">\n'+'<image x="0" y="0"'+' width="'+patternSource.width+'" height="'+patternSource.height+'" xlink:href="'+patternImgSrc+'"></image>\n'+'</pattern>\n';},/* _TO_SVG_END_ */setOptions:function(options){for(var prop in options){this[prop]=options[prop];}},/**
     * Returns an instance of CanvasPattern
     * @param {CanvasRenderingContext2D} ctx Context to create pattern
     * @return {CanvasPattern}
     */toLive:function(ctx){var source=typeof this.source==='function'?this.source():this.source;// if the image failed to load, return, and allow rest to continue loading
if(!source){return'';}// if an image
if(typeof source.src!=='undefined'){if(!source.complete){return'';}if(source.naturalWidth===0||source.naturalHeight===0){return'';}}return ctx.createPattern(source,this.repeat);}});})();(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),toFixed=fabric.util.toFixed;if(fabric.Shadow){fabric.warn('fabric.Shadow is already defined.');return;}/**
   * Shadow class
   * @class fabric.Shadow
   * @see {@link http://fabricjs.com/shadows|Shadow demo}
   * @see {@link fabric.Shadow#initialize} for constructor definition
   */fabric.Shadow=fabric.util.createClass(/** @lends fabric.Shadow.prototype */{/**
     * Shadow color
     * @type String
     * @default
     */color:'rgb(0,0,0)',/**
     * Shadow blur
     * @type Number
     */blur:0,/**
     * Shadow horizontal offset
     * @type Number
     * @default
     */offsetX:0,/**
     * Shadow vertical offset
     * @type Number
     * @default
     */offsetY:0,/**
     * Whether the shadow should affect stroke operations
     * @type Boolean
     * @default
     */affectStroke:false,/**
     * Indicates whether toObject should include default values
     * @type Boolean
     * @default
     */includeDefaultValues:true,/**
     * Constructor
     * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetX properties or string (e.g. "rgba(0,0,0,0.2) 2px 2px 10px, "2px 2px 10px rgba(0,0,0,0.2)")
     * @return {fabric.Shadow} thisArg
     */initialize:function(options){if(typeof options==='string'){options=this._parseShadow(options);}for(var prop in options){this[prop]=options[prop];}this.id=fabric.Object.__uid++;},/**
     * @private
     * @param {String} shadow Shadow value to parse
     * @return {Object} Shadow object with color, offsetX, offsetY and blur
     */_parseShadow:function(shadow){var shadowStr=shadow.trim(),offsetsAndBlur=fabric.Shadow.reOffsetsAndBlur.exec(shadowStr)||[],color=shadowStr.replace(fabric.Shadow.reOffsetsAndBlur,'')||'rgb(0,0,0)';return{color:color.trim(),offsetX:parseInt(offsetsAndBlur[1],10)||0,offsetY:parseInt(offsetsAndBlur[2],10)||0,blur:parseInt(offsetsAndBlur[3],10)||0};},/**
     * Returns a string representation of an instance
     * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow
     * @return {String} Returns CSS3 text-shadow declaration
     */toString:function(){return[this.offsetX,this.offsetY,this.blur,this.color].join('px ');},/* _TO_SVG_START_ *//**
     * Returns SVG representation of a shadow
     * @param {fabric.Object} object
     * @return {String} SVG representation of a shadow
     */toSVG:function(object){var fBoxX=40,fBoxY=40,NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS,offset=fabric.util.rotateVector({x:this.offsetX,y:this.offsetY},fabric.util.degreesToRadians(-object.angle)),BLUR_BOX=20;if(object.width&&object.height){//http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion
// we add some extra space to filter box to contain the blur ( 20 )
fBoxX=toFixed((Math.abs(offset.x)+this.blur)/object.width,NUM_FRACTION_DIGITS)*100+BLUR_BOX;fBoxY=toFixed((Math.abs(offset.y)+this.blur)/object.height,NUM_FRACTION_DIGITS)*100+BLUR_BOX;}if(object.flipX){offset.x*=-1;}if(object.flipY){offset.y*=-1;}return'<filter id="SVGID_'+this.id+'" y="-'+fBoxY+'%" height="'+(100+2*fBoxY)+'%" '+'x="-'+fBoxX+'%" width="'+(100+2*fBoxX)+'%" '+'>\n'+'\t<feGaussianBlur in="SourceAlpha" stdDeviation="'+toFixed(this.blur?this.blur/2:0,NUM_FRACTION_DIGITS)+'"></feGaussianBlur>\n'+'\t<feOffset dx="'+toFixed(offset.x,NUM_FRACTION_DIGITS)+'" dy="'+toFixed(offset.y,NUM_FRACTION_DIGITS)+'" result="oBlur" ></feOffset>\n'+'\t<feFlood flood-color="'+this.color+'"/>\n'+'\t<feComposite in2="oBlur" operator="in" />\n'+'\t<feMerge>\n'+'\t\t<feMergeNode></feMergeNode>\n'+'\t\t<feMergeNode in="SourceGraphic"></feMergeNode>\n'+'\t</feMerge>\n'+'</filter>\n';},/* _TO_SVG_END_ *//**
     * Returns object representation of a shadow
     * @return {Object} Object representation of a shadow instance
     */toObject:function(){if(this.includeDefaultValues){return{color:this.color,blur:this.blur,offsetX:this.offsetX,offsetY:this.offsetY,affectStroke:this.affectStroke};}var obj={},proto=fabric.Shadow.prototype;['color','blur','offsetX','offsetY','affectStroke'].forEach(function(prop){if(this[prop]!==proto[prop]){obj[prop]=this[prop];}},this);return obj;}});/**
   * Regex matching shadow offsetX, offsetY and blur (ex: "2px 2px 10px rgba(0,0,0,0.2)", "rgb(0,255,0) 2px 2px")
   * @static
   * @field
   * @memberOf fabric.Shadow
   */// eslint-disable-next-line max-len
fabric.Shadow.reOffsetsAndBlur=/(?:\s|^)(-?\d+(?:px)?(?:\s?|$))?(-?\d+(?:px)?(?:\s?|$))?(\d+(?:px)?)?(?:\s?|$)(?:$|\s)/;})( true?exports:this);(function(){'use strict';if(fabric.StaticCanvas){fabric.warn('fabric.StaticCanvas is already defined.');return;}// aliases for faster resolution
var extend=fabric.util.object.extend,getElementOffset=fabric.util.getElementOffset,removeFromArray=fabric.util.removeFromArray,toFixed=fabric.util.toFixed,transformPoint=fabric.util.transformPoint,invertTransform=fabric.util.invertTransform,CANVAS_INIT_ERROR=new Error('Could not initialize `canvas` element');/**
   * Static canvas class
   * @class fabric.StaticCanvas
   * @mixes fabric.Collection
   * @mixes fabric.Observable
   * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}
   * @see {@link fabric.StaticCanvas#initialize} for constructor definition
   * @fires before:render
   * @fires after:render
   * @fires canvas:cleared
   * @fires object:added
   * @fires object:removed
   */fabric.StaticCanvas=fabric.util.createClass(fabric.CommonMethods,/** @lends fabric.StaticCanvas.prototype */{/**
     * Constructor
     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
     * @param {Object} [options] Options object
     * @return {Object} thisArg
     */initialize:function(el,options){options||(options={});this._initStatic(el,options);},/**
     * Background color of canvas instance.
     * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.
     * @type {(String|fabric.Pattern)}
     * @default
     */backgroundColor:'',/**
     * Background image of canvas instance.
     * Should be set via {@link fabric.StaticCanvas#setBackgroundImage}.
     * <b>Backwards incompatibility note:</b> The "backgroundImageOpacity"
     * and "backgroundImageStretch" properties are deprecated since 1.3.9.
     * Use {@link fabric.Image#opacity}, {@link fabric.Image#width} and {@link fabric.Image#height}.
     * @type fabric.Image
     * @default
     */backgroundImage:null,/**
     * Overlay color of canvas instance.
     * Should be set via {@link fabric.StaticCanvas#setOverlayColor}
     * @since 1.3.9
     * @type {(String|fabric.Pattern)}
     * @default
     */overlayColor:'',/**
     * Overlay image of canvas instance.
     * Should be set via {@link fabric.StaticCanvas#setOverlayImage}.
     * <b>Backwards incompatibility note:</b> The "overlayImageLeft"
     * and "overlayImageTop" properties are deprecated since 1.3.9.
     * Use {@link fabric.Image#left} and {@link fabric.Image#top}.
     * @type fabric.Image
     * @default
     */overlayImage:null,/**
     * Indicates whether toObject/toDatalessObject should include default values
     * @type Boolean
     * @default
     */includeDefaultValues:true,/**
     * Indicates whether objects' state should be saved
     * @type Boolean
     * @default
     */stateful:false,/**
     * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove} should also re-render canvas.
     * Disabling this option could give a great performance boost when adding/removing a lot of objects to/from canvas at once
     * (followed by a manual rendering after addition/deletion)
     * @type Boolean
     * @default
     */renderOnAddRemove:true,/**
     * Function that determines clipping of entire canvas area
     * Being passed context as first argument. See clipping canvas area in {@link https://github.com/kangax/fabric.js/wiki/FAQ}
     * @type Function
     * @default
     */clipTo:null,/**
     * Indicates whether object controls (borders/controls) are rendered above overlay image
     * @type Boolean
     * @default
     */controlsAboveOverlay:false,/**
     * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas
     * @type Boolean
     * @default
     */allowTouchScrolling:false,/**
     * Indicates whether this canvas will use image smoothing, this is on by default in browsers
     * @type Boolean
     * @default
     */imageSmoothingEnabled:true,/**
     * The transformation (in the format of Canvas transform) which focuses the viewport
     * @type Array
     * @default
     */viewportTransform:fabric.iMatrix.concat(),/**
     * if set to false background image is not affected by viewport transform
     * @since 1.6.3
     * @type Boolean
     * @default
     */backgroundVpt:true,/**
     * if set to false overlya image is not affected by viewport transform
     * @since 1.6.3
     * @type Boolean
     * @default
     */overlayVpt:true,/**
     * Callback; invoked right before object is about to be scaled/rotated
     */onBeforeScaleRotate:function(){/* NOOP */},/**
     * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens
     */enableRetinaScaling:true,/**
     * Describe canvas element extension over design
     * properties are tl,tr,bl,br.
     * if canvas is not zoomed/panned those points are the four corner of canvas
     * if canvas is viewportTransformed you those points indicate the extension
     * of canvas element in plain untrasformed coordinates
     * The coordinates get updated with @method calcViewportBoundaries.
     * @memberOf fabric.StaticCanvas.prototype
     */vptCoords:{},/**
     * Based on vptCoords and object.aCoords, skip rendering of objects that
     * are not included in current viewport.
     * May greatly help in applications with crowded canvas and use of zoom/pan
     * If One of the corner of the bounding box of the object is on the canvas
     * the objects get rendered.
     * @memberOf fabric.StaticCanvas.prototype
     */skipOffscreen:false,/**
     * @private
     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
     * @param {Object} [options] Options object
     */_initStatic:function(el,options){var cb=fabric.StaticCanvas.prototype.renderAll.bind(this);this._objects=[];this._createLowerCanvas(el);this._initOptions(options);this._setImageSmoothing();// only initialize retina scaling once
if(!this.interactive){this._initRetinaScaling();}if(options.overlayImage){this.setOverlayImage(options.overlayImage,cb);}if(options.backgroundImage){this.setBackgroundImage(options.backgroundImage,cb);}if(options.backgroundColor){this.setBackgroundColor(options.backgroundColor,cb);}if(options.overlayColor){this.setOverlayColor(options.overlayColor,cb);}this.calcOffset();},/**
     * @private
     */_isRetinaScaling:function(){return fabric.devicePixelRatio!==1&&this.enableRetinaScaling;},/**
     * @private
     * @return {Number} retinaScaling if applied, otherwise 1;
     */getRetinaScaling:function(){return this._isRetinaScaling()?fabric.devicePixelRatio:1;},/**
     * @private
     */_initRetinaScaling:function(){if(!this._isRetinaScaling()){return;}this.lowerCanvasEl.setAttribute('width',this.width*fabric.devicePixelRatio);this.lowerCanvasEl.setAttribute('height',this.height*fabric.devicePixelRatio);this.contextContainer.scale(fabric.devicePixelRatio,fabric.devicePixelRatio);},/**
     * Calculates canvas element offset relative to the document
     * This method is also attached as "resize" event handler of window
     * @return {fabric.Canvas} instance
     * @chainable
     */calcOffset:function(){this._offset=getElementOffset(this.lowerCanvasEl);return this;},/**
     * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas
     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to
     * @param {Function} callback callback to invoke when image is loaded and set as an overlay
     * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.
     * @return {fabric.Canvas} thisArg
     * @chainable
     * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}
     * @example <caption>Normal overlayImage with left/top = 0</caption>
     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
     *   // Needed to position overlayImage at 0/0
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>overlayImage with different properties</caption>
     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
     *   opacity: 0.5,
     *   angle: 45,
     *   left: 400,
     *   top: 400,
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>
     * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img) {
     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});
     *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));
     * });
     * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>
     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
     *   width: canvas.width,
     *   height: canvas.height,
     *   // Needed to position overlayImage at 0/0
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>overlayImage loaded from cross-origin</caption>
     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
     *   opacity: 0.5,
     *   angle: 45,
     *   left: 400,
     *   top: 400,
     *   originX: 'left',
     *   originY: 'top',
     *   crossOrigin: 'anonymous'
     * });
     */setOverlayImage:function(image,callback,options){return this.__setBgOverlayImage('overlayImage',image,callback,options);},/**
     * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas
     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to
     * @param {Function} callback Callback to invoke when image is loaded and set as background
     * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.
     * @return {fabric.Canvas} thisArg
     * @chainable
     * @see {@link http://jsfiddle.net/fabricjs/YH9yD/|jsFiddle demo}
     * @example <caption>Normal backgroundImage with left/top = 0</caption>
     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
     *   // Needed to position backgroundImage at 0/0
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>backgroundImage with different properties</caption>
     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
     *   opacity: 0.5,
     *   angle: 45,
     *   left: 400,
     *   top: 400,
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>
     * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img) {
     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});
     *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
     * });
     * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>
     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
     *   width: canvas.width,
     *   height: canvas.height,
     *   // Needed to position backgroundImage at 0/0
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>backgroundImage loaded from cross-origin</caption>
     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
     *   opacity: 0.5,
     *   angle: 45,
     *   left: 400,
     *   top: 400,
     *   originX: 'left',
     *   originY: 'top',
     *   crossOrigin: 'anonymous'
     * });
     */setBackgroundImage:function(image,callback,options){return this.__setBgOverlayImage('backgroundImage',image,callback,options);},/**
     * Sets {@link fabric.StaticCanvas#overlayColor|background color} for this canvas
     * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set background color to
     * @param {Function} callback Callback to invoke when background color is set
     * @return {fabric.Canvas} thisArg
     * @chainable
     * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}
     * @example <caption>Normal overlayColor - color value</caption>
     * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));
     * @example <caption>fabric.Pattern used as overlayColor</caption>
     * canvas.setOverlayColor({
     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'
     * }, canvas.renderAll.bind(canvas));
     * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>
     * canvas.setOverlayColor({
     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
     *   repeat: 'repeat',
     *   offsetX: 200,
     *   offsetY: 100
     * }, canvas.renderAll.bind(canvas));
     */setOverlayColor:function(overlayColor,callback){return this.__setBgOverlayColor('overlayColor',overlayColor,callback);},/**
     * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas
     * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to
     * @param {Function} callback Callback to invoke when background color is set
     * @return {fabric.Canvas} thisArg
     * @chainable
     * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}
     * @example <caption>Normal backgroundColor - color value</caption>
     * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));
     * @example <caption>fabric.Pattern used as backgroundColor</caption>
     * canvas.setBackgroundColor({
     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'
     * }, canvas.renderAll.bind(canvas));
     * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>
     * canvas.setBackgroundColor({
     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
     *   repeat: 'repeat',
     *   offsetX: 200,
     *   offsetY: 100
     * }, canvas.renderAll.bind(canvas));
     */setBackgroundColor:function(backgroundColor,callback){return this.__setBgOverlayColor('backgroundColor',backgroundColor,callback);},/**
     * @private
     * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-imagesmoothingenabled|WhatWG Canvas Standard}
     */_setImageSmoothing:function(){var ctx=this.getContext();ctx.imageSmoothingEnabled=ctx.imageSmoothingEnabled||ctx.webkitImageSmoothingEnabled||ctx.mozImageSmoothingEnabled||ctx.msImageSmoothingEnabled||ctx.oImageSmoothingEnabled;ctx.imageSmoothingEnabled=this.imageSmoothingEnabled;},/**
     * @private
     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}
     * or {@link fabric.StaticCanvas#overlayImage|overlayImage})
     * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to
     * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay
     * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.
     */__setBgOverlayImage:function(property,image,callback,options){if(typeof image==='string'){fabric.util.loadImage(image,function(img){img&&(this[property]=new fabric.Image(img,options));callback&&callback(img);},this,options&&options.crossOrigin);}else{options&&image.setOptions(options);this[property]=image;callback&&callback(image);}return this;},/**
     * @private
     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}
     * or {@link fabric.StaticCanvas#overlayColor|overlayColor})
     * @param {(Object|String|null)} color Object with pattern information, color value or null
     * @param {Function} [callback] Callback is invoked when color is set
     */__setBgOverlayColor:function(property,color,callback){this[property]=color;this._initGradient(color,property);this._initPattern(color,property,callback);return this;},/**
     * @private
     */_createCanvasElement:function(canvasEl){var element=fabric.util.createCanvasElement(canvasEl);if(!element.style){element.style={};}if(!element){throw CANVAS_INIT_ERROR;}if(typeof element.getContext==='undefined'){throw CANVAS_INIT_ERROR;}return element;},/**
     * @private
     * @param {Object} [options] Options object
     */_initOptions:function(options){this._setOptions(options);this.width=this.width||parseInt(this.lowerCanvasEl.width,10)||0;this.height=this.height||parseInt(this.lowerCanvasEl.height,10)||0;if(!this.lowerCanvasEl.style){return;}this.lowerCanvasEl.width=this.width;this.lowerCanvasEl.height=this.height;this.lowerCanvasEl.style.width=this.width+'px';this.lowerCanvasEl.style.height=this.height+'px';this.viewportTransform=this.viewportTransform.slice();},/**
     * Creates a bottom canvas
     * @private
     * @param {HTMLElement} [canvasEl]
     */_createLowerCanvas:function(canvasEl){this.lowerCanvasEl=fabric.util.getById(canvasEl)||this._createCanvasElement(canvasEl);fabric.util.addClass(this.lowerCanvasEl,'lower-canvas');if(this.interactive){this._applyCanvasStyle(this.lowerCanvasEl);}this.contextContainer=this.lowerCanvasEl.getContext('2d');},/**
     * Returns canvas width (in px)
     * @return {Number}
     */getWidth:function(){return this.width;},/**
     * Returns canvas height (in px)
     * @return {Number}
     */getHeight:function(){return this.height;},/**
     * Sets width of this canvas instance
     * @param {Number|String} value                         Value to set width to
     * @param {Object}        [options]                     Options object
     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
     * @return {fabric.Canvas} instance
     * @chainable true
     */setWidth:function(value,options){return this.setDimensions({width:value},options);},/**
     * Sets height of this canvas instance
     * @param {Number|String} value                         Value to set height to
     * @param {Object}        [options]                     Options object
     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
     * @return {fabric.Canvas} instance
     * @chainable true
     */setHeight:function(value,options){return this.setDimensions({height:value},options);},/**
     * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)
     * @param {Object}        dimensions                    Object with width/height properties
     * @param {Number|String} [dimensions.width]            Width of canvas element
     * @param {Number|String} [dimensions.height]           Height of canvas element
     * @param {Object}        [options]                     Options object
     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
     * @return {fabric.Canvas} thisArg
     * @chainable
     */setDimensions:function(dimensions,options){var cssValue;options=options||{};for(var prop in dimensions){cssValue=dimensions[prop];if(!options.cssOnly){this._setBackstoreDimension(prop,dimensions[prop]);cssValue+='px';}if(!options.backstoreOnly){this._setCssDimension(prop,cssValue);}}this._initRetinaScaling();this._setImageSmoothing();this.calcOffset();if(!options.cssOnly){this.renderAll();}return this;},/**
     * Helper for setting width/height
     * @private
     * @param {String} prop property (width|height)
     * @param {Number} value value to set property to
     * @return {fabric.Canvas} instance
     * @chainable true
     */_setBackstoreDimension:function(prop,value){this.lowerCanvasEl[prop]=value;if(this.upperCanvasEl){this.upperCanvasEl[prop]=value;}if(this.cacheCanvasEl){this.cacheCanvasEl[prop]=value;}this[prop]=value;return this;},/**
     * Helper for setting css width/height
     * @private
     * @param {String} prop property (width|height)
     * @param {String} value value to set property to
     * @return {fabric.Canvas} instance
     * @chainable true
     */_setCssDimension:function(prop,value){this.lowerCanvasEl.style[prop]=value;if(this.upperCanvasEl){this.upperCanvasEl.style[prop]=value;}if(this.wrapperEl){this.wrapperEl.style[prop]=value;}return this;},/**
     * Returns canvas zoom level
     * @return {Number}
     */getZoom:function(){return this.viewportTransform[0];},/**
     * Sets viewport transform of this canvas instance
     * @param {Array} vpt the transform in the form of context.transform
     * @return {fabric.Canvas} instance
     * @chainable true
     */setViewportTransform:function(vpt){var activeGroup=this._activeGroup,object,ignoreVpt=false,skipAbsolute=true;this.viewportTransform=vpt;for(var i=0,len=this._objects.length;i<len;i++){object=this._objects[i];object.group||object.setCoords(ignoreVpt,skipAbsolute);}if(activeGroup){activeGroup.setCoords(ignoreVpt,skipAbsolute);}this.calcViewportBoundaries();this.renderAll();return this;},/**
     * Sets zoom level of this canvas instance, zoom centered around point
     * @param {fabric.Point} point to zoom with respect to
     * @param {Number} value to set zoom to, less than 1 zooms out
     * @return {fabric.Canvas} instance
     * @chainable true
     */zoomToPoint:function(point,value){// TODO: just change the scale, preserve other transformations
var before=point,vpt=this.viewportTransform.slice(0);point=transformPoint(point,invertTransform(this.viewportTransform));vpt[0]=value;vpt[3]=value;var after=transformPoint(point,vpt);vpt[4]+=before.x-after.x;vpt[5]+=before.y-after.y;return this.setViewportTransform(vpt);},/**
     * Sets zoom level of this canvas instance
     * @param {Number} value to set zoom to, less than 1 zooms out
     * @return {fabric.Canvas} instance
     * @chainable true
     */setZoom:function(value){this.zoomToPoint(new fabric.Point(0,0),value);return this;},/**
     * Pan viewport so as to place point at top left corner of canvas
     * @param {fabric.Point} point to move to
     * @return {fabric.Canvas} instance
     * @chainable true
     */absolutePan:function(point){var vpt=this.viewportTransform.slice(0);vpt[4]=-point.x;vpt[5]=-point.y;return this.setViewportTransform(vpt);},/**
     * Pans viewpoint relatively
     * @param {fabric.Point} point (position vector) to move by
     * @return {fabric.Canvas} instance
     * @chainable true
     */relativePan:function(point){return this.absolutePan(new fabric.Point(-point.x-this.viewportTransform[4],-point.y-this.viewportTransform[5]));},/**
     * Returns &lt;canvas> element corresponding to this instance
     * @return {HTMLCanvasElement}
     */getElement:function(){return this.lowerCanvasEl;},/**
     * @private
     * @param {fabric.Object} obj Object that was added
     */_onObjectAdded:function(obj){this.stateful&&obj.setupState();obj._set('canvas',this);obj.setCoords();this.fire('object:added',{target:obj});obj.fire('added');},/**
     * @private
     * @param {fabric.Object} obj Object that was removed
     */_onObjectRemoved:function(obj){this.fire('object:removed',{target:obj});obj.fire('removed');delete obj.canvas;},/**
     * Clears specified context of canvas element
     * @param {CanvasRenderingContext2D} ctx Context to clear
     * @return {fabric.Canvas} thisArg
     * @chainable
     */clearContext:function(ctx){ctx.clearRect(0,0,this.width,this.height);return this;},/**
     * Returns context of canvas where objects are drawn
     * @return {CanvasRenderingContext2D}
     */getContext:function(){return this.contextContainer;},/**
     * Clears all contexts (background, main, top) of an instance
     * @return {fabric.Canvas} thisArg
     * @chainable
     */clear:function(){this._objects.length=0;this.backgroundImage=null;this.overlayImage=null;this.backgroundColor='';this.overlayColor='';if(this._hasITextHandlers){this.off('mouse:up',this._mouseUpITextHandler);this._iTextInstances=null;this._hasITextHandlers=false;}this.clearContext(this.contextContainer);this.fire('canvas:cleared');this.renderAll();return this;},/**
     * Renders the canvas
     * @return {fabric.Canvas} instance
     * @chainable
     */renderAll:function(){var canvasToDrawOn=this.contextContainer;this.renderCanvas(canvasToDrawOn,this._objects);return this;},/**
     * Calculate the position of the 4 corner of canvas with current viewportTransform.
     * helps to determinate when an object is in the current rendering viewport using
     * object absolute coordinates ( aCoords )
     * @return {Object} points.tl
     * @chainable
     */calcViewportBoundaries:function(){var points={},width=this.getWidth(),height=this.getHeight(),iVpt=invertTransform(this.viewportTransform);points.tl=transformPoint({x:0,y:0},iVpt);points.br=transformPoint({x:width,y:height},iVpt);points.tr=new fabric.Point(points.br.x,points.tl.y);points.bl=new fabric.Point(points.tl.x,points.br.y);this.vptCoords=points;return points;},/**
     * Renders background, objects, overlay and controls.
     * @param {CanvasRenderingContext2D} ctx
     * @param {Array} objects to render
     * @return {fabric.Canvas} instance
     * @chainable
     */renderCanvas:function(ctx,objects){this.calcViewportBoundaries();this.clearContext(ctx);this.fire('before:render');if(this.clipTo){fabric.util.clipContext(this,ctx);}this._renderBackground(ctx);ctx.save();//apply viewport transform once for all rendering process
ctx.transform.apply(ctx,this.viewportTransform);this._renderObjects(ctx,objects);ctx.restore();if(!this.controlsAboveOverlay&&this.interactive){this.drawControls(ctx);}if(this.clipTo){ctx.restore();}this._renderOverlay(ctx);if(this.controlsAboveOverlay&&this.interactive){this.drawControls(ctx);}this.fire('after:render');},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Array} objects to render
     */_renderObjects:function(ctx,objects){for(var i=0,length=objects.length;i<length;++i){objects[i]&&objects[i].render(ctx);}},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {string} property 'background' or 'overlay'
     */_renderBackgroundOrOverlay:function(ctx,property){var object=this[property+'Color'];if(object){ctx.fillStyle=object.toLive?object.toLive(ctx,this):object;ctx.fillRect(object.offsetX||0,object.offsetY||0,this.width,this.height);}object=this[property+'Image'];if(object){if(this[property+'Vpt']){ctx.save();ctx.transform.apply(ctx,this.viewportTransform);}object.render(ctx);this[property+'Vpt']&&ctx.restore();}},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderBackground:function(ctx){this._renderBackgroundOrOverlay(ctx,'background');},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderOverlay:function(ctx){this._renderBackgroundOrOverlay(ctx,'overlay');},/**
     * Returns coordinates of a center of canvas.
     * Returned value is an object with top and left properties
     * @return {Object} object with "top" and "left" number values
     */getCenter:function(){return{top:this.getHeight()/2,left:this.getWidth()/2};},/**
     * Centers object horizontally in the canvas
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @param {fabric.Object} object Object to center horizontally
     * @return {fabric.Canvas} thisArg
     */centerObjectH:function(object){return this._centerObject(object,new fabric.Point(this.getCenter().left,object.getCenterPoint().y));},/**
     * Centers object vertically in the canvas
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @param {fabric.Object} object Object to center vertically
     * @return {fabric.Canvas} thisArg
     * @chainable
     */centerObjectV:function(object){return this._centerObject(object,new fabric.Point(object.getCenterPoint().x,this.getCenter().top));},/**
     * Centers object vertically and horizontally in the canvas
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @param {fabric.Object} object Object to center vertically and horizontally
     * @return {fabric.Canvas} thisArg
     * @chainable
     */centerObject:function(object){var center=this.getCenter();return this._centerObject(object,new fabric.Point(center.left,center.top));},/**
     * Centers object vertically and horizontally in the viewport
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @param {fabric.Object} object Object to center vertically and horizontally
     * @return {fabric.Canvas} thisArg
     * @chainable
     */viewportCenterObject:function(object){var vpCenter=this.getVpCenter();return this._centerObject(object,vpCenter);},/**
     * Centers object horizontally in the viewport, object.top is unchanged
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @param {fabric.Object} object Object to center vertically and horizontally
     * @return {fabric.Canvas} thisArg
     * @chainable
     */viewportCenterObjectH:function(object){var vpCenter=this.getVpCenter();this._centerObject(object,new fabric.Point(vpCenter.x,object.getCenterPoint().y));return this;},/**
     * Centers object Vertically in the viewport, object.top is unchanged
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @param {fabric.Object} object Object to center vertically and horizontally
     * @return {fabric.Canvas} thisArg
     * @chainable
     */viewportCenterObjectV:function(object){var vpCenter=this.getVpCenter();return this._centerObject(object,new fabric.Point(object.getCenterPoint().x,vpCenter.y));},/**
     * Calculate the point in canvas that correspond to the center of actual viewport.
     * @return {fabric.Point} vpCenter, viewport center
     * @chainable
     */getVpCenter:function(){var center=this.getCenter(),iVpt=invertTransform(this.viewportTransform);return transformPoint({x:center.left,y:center.top},iVpt);},/**
     * @private
     * @param {fabric.Object} object Object to center
     * @param {fabric.Point} center Center point
     * @return {fabric.Canvas} thisArg
     * @chainable
     */_centerObject:function(object,center){object.setPositionByOrigin(center,'center','center');this.renderAll();return this;},/**
     * Returs dataless JSON representation of canvas
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {String} json string
     */toDatalessJSON:function(propertiesToInclude){return this.toDatalessObject(propertiesToInclude);},/**
     * Returns object representation of canvas
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */toObject:function(propertiesToInclude){return this._toObjectMethod('toObject',propertiesToInclude);},/**
     * Returns dataless object representation of canvas
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */toDatalessObject:function(propertiesToInclude){return this._toObjectMethod('toDatalessObject',propertiesToInclude);},/**
     * @private
     */_toObjectMethod:function(methodName,propertiesToInclude){var data={objects:this._toObjects(methodName,propertiesToInclude)};extend(data,this.__serializeBgOverlay(methodName,propertiesToInclude));fabric.util.populateWithProperties(this,data,propertiesToInclude);return data;},/**
     * @private
     */_toObjects:function(methodName,propertiesToInclude){return this.getObjects().filter(function(object){return!object.excludeFromExport;}).map(function(instance){return this._toObject(instance,methodName,propertiesToInclude);},this);},/**
     * @private
     */_toObject:function(instance,methodName,propertiesToInclude){var originalValue;if(!this.includeDefaultValues){originalValue=instance.includeDefaultValues;instance.includeDefaultValues=false;}var object=instance[methodName](propertiesToInclude);if(!this.includeDefaultValues){instance.includeDefaultValues=originalValue;}return object;},/**
     * @private
     */__serializeBgOverlay:function(methodName,propertiesToInclude){var data={},bgImage=this.backgroundImage,overlay=this.overlayImage;if(this.backgroundColor){data.background=this.backgroundColor.toObject?this.backgroundColor.toObject(propertiesToInclude):this.backgroundColor;}if(this.overlayColor){data.overlay=this.overlayColor.toObject?this.overlayColor.toObject(propertiesToInclude):this.overlayColor;}if(bgImage&&!bgImage.excludeFromExport){data.backgroundImage=this._toObject(bgImage,methodName,propertiesToInclude);}if(overlay&&!overlay.excludeFromExport){data.overlayImage=this._toObject(overlay,methodName,propertiesToInclude);}return data;},/* _TO_SVG_START_ *//**
     * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,
     * a zoomed canvas will then produce zoomed SVG output.
     * @type Boolean
     * @default
     */svgViewportTransformation:true,/**
     * Returns SVG representation of canvas
     * @function
     * @param {Object} [options] Options object for SVG output
     * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included
     * @param {Object} [options.viewBox] SVG viewbox object
     * @param {Number} [options.viewBox.x] x-cooridnate of viewbox
     * @param {Number} [options.viewBox.y] y-coordinate of viewbox
     * @param {Number} [options.viewBox.width] Width of viewbox
     * @param {Number} [options.viewBox.height] Height of viewbox
     * @param {String} [options.encoding=UTF-8] Encoding of SVG output
     * @param {String} [options.width] desired width of svg with or without units
     * @param {String} [options.height] desired height of svg with or without units
     * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.
     * @return {String} SVG string
     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}
     * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}
     * @example <caption>Normal SVG output</caption>
     * var svg = canvas.toSVG();
     * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>
     * var svg = canvas.toSVG({suppressPreamble: true});
     * @example <caption>SVG output with viewBox attribute</caption>
     * var svg = canvas.toSVG({
     *   viewBox: {
     *     x: 100,
     *     y: 100,
     *     width: 200,
     *     height: 300
     *   }
     * });
     * @example <caption>SVG output with different encoding (default: UTF-8)</caption>
     * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});
     * @example <caption>Modify SVG output with reviver function</caption>
     * var svg = canvas.toSVG(null, function(svg) {
     *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');
     * });
     */toSVG:function(options,reviver){options||(options={});var markup=[];this._setSVGPreamble(markup,options);this._setSVGHeader(markup,options);this._setSVGBgOverlayColor(markup,'backgroundColor');this._setSVGBgOverlayImage(markup,'backgroundImage',reviver);this._setSVGObjects(markup,reviver);this._setSVGBgOverlayColor(markup,'overlayColor');this._setSVGBgOverlayImage(markup,'overlayImage',reviver);markup.push('</svg>');return markup.join('');},/**
     * @private
     */_setSVGPreamble:function(markup,options){if(options.suppressPreamble){return;}markup.push('<?xml version="1.0" encoding="',options.encoding||'UTF-8','" standalone="no" ?>\n','<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" ','"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n');},/**
     * @private
     */_setSVGHeader:function(markup,options){var width=options.width||this.width,height=options.height||this.height,vpt,viewBox='viewBox="0 0 '+this.width+' '+this.height+'" ',NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS;if(options.viewBox){viewBox='viewBox="'+options.viewBox.x+' '+options.viewBox.y+' '+options.viewBox.width+' '+options.viewBox.height+'" ';}else{if(this.svgViewportTransformation){vpt=this.viewportTransform;viewBox='viewBox="'+toFixed(-vpt[4]/vpt[0],NUM_FRACTION_DIGITS)+' '+toFixed(-vpt[5]/vpt[3],NUM_FRACTION_DIGITS)+' '+toFixed(this.width/vpt[0],NUM_FRACTION_DIGITS)+' '+toFixed(this.height/vpt[3],NUM_FRACTION_DIGITS)+'" ';}}markup.push('<svg ','xmlns="http://www.w3.org/2000/svg" ','xmlns:xlink="http://www.w3.org/1999/xlink" ','version="1.1" ','width="',width,'" ','height="',height,'" ',viewBox,'xml:space="preserve">\n','<desc>Created with Fabric.js ',fabric.version,'</desc>\n','<defs>\n',this.createSVGFontFacesMarkup(),this.createSVGRefElementsMarkup(),'</defs>\n');},/**
     * Creates markup containing SVG referenced elements like patterns, gradients etc.
     * @return {String}
     */createSVGRefElementsMarkup:function(){var _this=this,markup=['backgroundColor','overlayColor'].map(function(prop){var fill=_this[prop];if(fill&&fill.toLive){return fill.toSVG(_this,false);}});return markup.join('');},/**
     * Creates markup containing SVG font faces,
     * font URLs for font faces must be collected by developers
     * and are not extracted from the DOM by fabricjs
     * @param {Array} objects Array of fabric objects
     * @return {String}
     */createSVGFontFacesMarkup:function(){var markup='',fontList={},obj,fontFamily,style,row,rowIndex,_char,charIndex,fontPaths=fabric.fontPaths,objects=this.getObjects();for(var i=0,len=objects.length;i<len;i++){obj=objects[i];fontFamily=obj.fontFamily;if(obj.type.indexOf('text')===-1||fontList[fontFamily]||!fontPaths[fontFamily]){continue;}fontList[fontFamily]=true;if(!obj.styles){continue;}style=obj.styles;for(rowIndex in style){row=style[rowIndex];for(charIndex in row){_char=row[charIndex];fontFamily=_char.fontFamily;if(!fontList[fontFamily]&&fontPaths[fontFamily]){fontList[fontFamily]=true;}}}}for(var j in fontList){markup+=['\t\t@font-face {\n','\t\t\tfont-family: \'',j,'\';\n','\t\t\tsrc: url(\'',fontPaths[j],'\');\n','\t\t}\n'].join('');}if(markup){markup=['\t<style type="text/css">','<![CDATA[\n',markup,']]>','</style>\n'].join('');}return markup;},/**
     * @private
     */_setSVGObjects:function(markup,reviver){var instance;for(var i=0,objects=this.getObjects(),len=objects.length;i<len;i++){instance=objects[i];if(instance.excludeFromExport){continue;}this._setSVGObject(markup,instance,reviver);}},/**
     * push single object svg representation in the markup
     * @private
     */_setSVGObject:function(markup,instance,reviver){markup.push(instance.toSVG(reviver));},/**
     * @private
     */_setSVGBgOverlayImage:function(markup,property,reviver){if(this[property]&&this[property].toSVG){markup.push(this[property].toSVG(reviver));}},/**
     * @private
     */_setSVGBgOverlayColor:function(markup,property){var filler=this[property];if(!filler){return;}if(filler.toLive){var repeat=filler.repeat;markup.push('<rect transform="translate(',this.width/2,',',this.height/2,')"',' x="',filler.offsetX-this.width/2,'" y="',filler.offsetY-this.height/2,'" ','width="',repeat==='repeat-y'||repeat==='no-repeat'?filler.source.width:this.width,'" height="',repeat==='repeat-x'||repeat==='no-repeat'?filler.source.height:this.height,'" fill="url(#SVGID_'+filler.id+')"','></rect>\n');}else{markup.push('<rect x="0" y="0" ','width="',this.width,'" height="',this.height,'" fill="',this[property],'"','></rect>\n');}},/* _TO_SVG_END_ *//**
     * Moves an object or the objects of a multiple selection
     * to the bottom of the stack of drawn objects
     * @param {fabric.Object} object Object to send to back
     * @return {fabric.Canvas} thisArg
     * @chainable
     */sendToBack:function(object){if(!object){return this;}var activeGroup=this._activeGroup,i,obj,objs;if(object===activeGroup){objs=activeGroup._objects;for(i=objs.length;i--;){obj=objs[i];removeFromArray(this._objects,obj);this._objects.unshift(obj);}}else{removeFromArray(this._objects,object);this._objects.unshift(object);}return this.renderAll&&this.renderAll();},/**
     * Moves an object or the objects of a multiple selection
     * to the top of the stack of drawn objects
     * @param {fabric.Object} object Object to send
     * @return {fabric.Canvas} thisArg
     * @chainable
     */bringToFront:function(object){if(!object){return this;}var activeGroup=this._activeGroup,i,obj,objs;if(object===activeGroup){objs=activeGroup._objects;for(i=0;i<objs.length;i++){obj=objs[i];removeFromArray(this._objects,obj);this._objects.push(obj);}}else{removeFromArray(this._objects,object);this._objects.push(object);}return this.renderAll&&this.renderAll();},/**
     * Moves an object or a selection down in stack of drawn objects
     * @param {fabric.Object} object Object to send
     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object
     * @return {fabric.Canvas} thisArg
     * @chainable
     */sendBackwards:function(object,intersecting){if(!object){return this;}var activeGroup=this._activeGroup,i,obj,idx,newIdx,objs,objsMoved=0;if(object===activeGroup){objs=activeGroup._objects;for(i=0;i<objs.length;i++){obj=objs[i];idx=this._objects.indexOf(obj);if(idx>0+objsMoved){newIdx=idx-1;removeFromArray(this._objects,obj);this._objects.splice(newIdx,0,obj);}objsMoved++;}}else{idx=this._objects.indexOf(object);if(idx!==0){// if object is not on the bottom of stack
newIdx=this._findNewLowerIndex(object,idx,intersecting);removeFromArray(this._objects,object);this._objects.splice(newIdx,0,object);}}this.renderAll&&this.renderAll();return this;},/**
     * @private
     */_findNewLowerIndex:function(object,idx,intersecting){var newIdx;if(intersecting){newIdx=idx;// traverse down the stack looking for the nearest intersecting object
for(var i=idx-1;i>=0;--i){var isIntersecting=object.intersectsWithObject(this._objects[i])||object.isContainedWithinObject(this._objects[i])||this._objects[i].isContainedWithinObject(object);if(isIntersecting){newIdx=i;break;}}}else{newIdx=idx-1;}return newIdx;},/**
     * Moves an object or a selection up in stack of drawn objects
     * @param {fabric.Object} object Object to send
     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object
     * @return {fabric.Canvas} thisArg
     * @chainable
     */bringForward:function(object,intersecting){if(!object){return this;}var activeGroup=this._activeGroup,i,obj,idx,newIdx,objs,objsMoved=0;if(object===activeGroup){objs=activeGroup._objects;for(i=objs.length;i--;){obj=objs[i];idx=this._objects.indexOf(obj);if(idx<this._objects.length-1-objsMoved){newIdx=idx+1;removeFromArray(this._objects,obj);this._objects.splice(newIdx,0,obj);}objsMoved++;}}else{idx=this._objects.indexOf(object);if(idx!==this._objects.length-1){// if object is not on top of stack (last item in an array)
newIdx=this._findNewUpperIndex(object,idx,intersecting);removeFromArray(this._objects,object);this._objects.splice(newIdx,0,object);}}this.renderAll&&this.renderAll();return this;},/**
     * @private
     */_findNewUpperIndex:function(object,idx,intersecting){var newIdx;if(intersecting){newIdx=idx;// traverse up the stack looking for the nearest intersecting object
for(var i=idx+1;i<this._objects.length;++i){var isIntersecting=object.intersectsWithObject(this._objects[i])||object.isContainedWithinObject(this._objects[i])||this._objects[i].isContainedWithinObject(object);if(isIntersecting){newIdx=i;break;}}}else{newIdx=idx+1;}return newIdx;},/**
     * Moves an object to specified level in stack of drawn objects
     * @param {fabric.Object} object Object to send
     * @param {Number} index Position to move to
     * @return {fabric.Canvas} thisArg
     * @chainable
     */moveTo:function(object,index){removeFromArray(this._objects,object);this._objects.splice(index,0,object);return this.renderAll&&this.renderAll();},/**
     * Clears a canvas element and removes all event listeners
     * @return {fabric.Canvas} thisArg
     * @chainable
     */dispose:function(){this.clear();return this;},/**
     * Returns a string representation of an instance
     * @return {String} string representation of an instance
     */toString:function(){return'#<fabric.Canvas ('+this.complexity()+'): '+'{ objects: '+this.getObjects().length+' }>';}});extend(fabric.StaticCanvas.prototype,fabric.Observable);extend(fabric.StaticCanvas.prototype,fabric.Collection);extend(fabric.StaticCanvas.prototype,fabric.DataURLExporter);extend(fabric.StaticCanvas,/** @lends fabric.StaticCanvas */{/**
     * @static
     * @type String
     * @default
     */EMPTY_JSON:'{"objects": [], "background": "white"}',/**
     * Provides a way to check support of some of the canvas methods
     * (either those of HTMLCanvasElement itself, or rendering context)
     *
     * @param {String} methodName Method to check support for;
     *                            Could be one of "getImageData", "toDataURL", "toDataURLWithQuality" or "setLineDash"
     * @return {Boolean | null} `true` if method is supported (or at least exists),
     *                          `null` if canvas element or context can not be initialized
     */supports:function(methodName){var el=fabric.util.createCanvasElement();if(!el||!el.getContext){return null;}var ctx=el.getContext('2d');if(!ctx){return null;}switch(methodName){case'getImageData':return typeof ctx.getImageData!=='undefined';case'setLineDash':return typeof ctx.setLineDash!=='undefined';case'toDataURL':return typeof el.toDataURL!=='undefined';case'toDataURLWithQuality':try{el.toDataURL('image/jpeg',0);return true;}catch(e){}return false;default:return null;}}});/**
   * Returns JSON representation of canvas
   * @function
   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
   * @return {String} JSON string
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}
   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}
   * @example <caption>JSON without additional properties</caption>
   * var json = canvas.toJSON();
   * @example <caption>JSON with additional properties included</caption>
   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY', 'lockUniScaling']);
   * @example <caption>JSON without default values</caption>
   * canvas.includeDefaultValues = false;
   * var json = canvas.toJSON();
   */fabric.StaticCanvas.prototype.toJSON=fabric.StaticCanvas.prototype.toObject;})();/**
 * BaseBrush class
 * @class fabric.BaseBrush
 * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}
 */fabric.BaseBrush=fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */{/**
   * Color of a brush
   * @type String
   * @default
   */color:'rgb(0, 0, 0)',/**
   * Width of a brush
   * @type Number
   * @default
   */width:1,/**
   * Shadow object representing shadow of this shape.
   * <b>Backwards incompatibility note:</b> This property replaces "shadowColor" (String), "shadowOffsetX" (Number),
   * "shadowOffsetY" (Number) and "shadowBlur" (Number) since v1.2.12
   * @type fabric.Shadow
   * @default
   */shadow:null,/**
   * Line endings style of a brush (one of "butt", "round", "square")
   * @type String
   * @default
   */strokeLineCap:'round',/**
   * Corner style of a brush (one of "bevil", "round", "miter")
   * @type String
   * @default
   */strokeLineJoin:'round',/**
   * Stroke Dash Array.
   * @type Array
   * @default
   */strokeDashArray:null,/**
   * Sets shadow of an object
   * @param {Object|String} [options] Options object or string (e.g. "2px 2px 10px rgba(0,0,0,0.2)")
   * @return {fabric.Object} thisArg
   * @chainable
   */setShadow:function(options){this.shadow=new fabric.Shadow(options);return this;},/**
   * Sets brush styles
   * @private
   */_setBrushStyles:function(){var ctx=this.canvas.contextTop;ctx.strokeStyle=this.color;ctx.lineWidth=this.width;ctx.lineCap=this.strokeLineCap;ctx.lineJoin=this.strokeLineJoin;if(this.strokeDashArray&&fabric.StaticCanvas.supports('setLineDash')){ctx.setLineDash(this.strokeDashArray);}},/**
   * Sets brush shadow styles
   * @private
   */_setShadow:function(){if(!this.shadow){return;}var ctx=this.canvas.contextTop,zoom=this.canvas.getZoom();ctx.shadowColor=this.shadow.color;ctx.shadowBlur=this.shadow.blur*zoom;ctx.shadowOffsetX=this.shadow.offsetX*zoom;ctx.shadowOffsetY=this.shadow.offsetY*zoom;},/**
   * Removes brush shadow styles
   * @private
   */_resetShadow:function(){var ctx=this.canvas.contextTop;ctx.shadowColor='';ctx.shadowBlur=ctx.shadowOffsetX=ctx.shadowOffsetY=0;}});(function(){/**
   * PencilBrush class
   * @class fabric.PencilBrush
   * @extends fabric.BaseBrush
   */fabric.PencilBrush=fabric.util.createClass(fabric.BaseBrush,/** @lends fabric.PencilBrush.prototype */{/**
     * Constructor
     * @param {fabric.Canvas} canvas
     * @return {fabric.PencilBrush} Instance of a pencil brush
     */initialize:function(canvas){this.canvas=canvas;this._points=[];},/**
     * Inovoked on mouse down
     * @param {Object} pointer
     */onMouseDown:function(pointer){this._prepareForDrawing(pointer);// capture coordinates immediately
// this allows to draw dots (when movement never occurs)
this._captureDrawingPath(pointer);this._render();},/**
     * Inovoked on mouse move
     * @param {Object} pointer
     */onMouseMove:function(pointer){this._captureDrawingPath(pointer);// redraw curve
// clear top canvas
this.canvas.clearContext(this.canvas.contextTop);this._render();},/**
     * Invoked on mouse up
     */onMouseUp:function(){this._finalizeAndAddPath();},/**
     * @private
     * @param {Object} pointer Actual mouse position related to the canvas.
     */_prepareForDrawing:function(pointer){var p=new fabric.Point(pointer.x,pointer.y);this._reset();this._addPoint(p);this.canvas.contextTop.moveTo(p.x,p.y);},/**
     * @private
     * @param {fabric.Point} point Point to be added to points array
     */_addPoint:function(point){this._points.push(point);},/**
     * Clear points array and set contextTop canvas style.
     * @private
     */_reset:function(){this._points.length=0;this._setBrushStyles();this._setShadow();},/**
     * @private
     * @param {Object} pointer Actual mouse position related to the canvas.
     */_captureDrawingPath:function(pointer){var pointerPoint=new fabric.Point(pointer.x,pointer.y);this._addPoint(pointerPoint);},/**
     * Draw a smooth path on the topCanvas using quadraticCurveTo
     * @private
     */_render:function(){var ctx=this.canvas.contextTop,i,len,v=this.canvas.viewportTransform,p1=this._points[0],p2=this._points[1];ctx.save();ctx.transform(v[0],v[1],v[2],v[3],v[4],v[5]);ctx.beginPath();//if we only have 2 points in the path and they are the same
//it means that the user only clicked the canvas without moving the mouse
//then we should be drawing a dot. A path isn't drawn between two identical dots
//that's why we set them apart a bit
if(this._points.length===2&&p1.x===p2.x&&p1.y===p2.y){var width=this.width/1000;p1=new fabric.Point(p1.x,p1.y);p2=new fabric.Point(p2.x,p2.y);p1.x-=width;p2.x+=width;}ctx.moveTo(p1.x,p1.y);for(i=1,len=this._points.length;i<len;i++){// we pick the point between pi + 1 & pi + 2 as the
// end point and p1 as our control point.
var midPoint=p1.midPointFrom(p2);ctx.quadraticCurveTo(p1.x,p1.y,midPoint.x,midPoint.y);p1=this._points[i];p2=this._points[i+1];}// Draw last line as a straight line while
// we wait for the next point to be able to calculate
// the bezier control point
ctx.lineTo(p1.x,p1.y);ctx.stroke();ctx.restore();},/**
     * Converts points to SVG path
     * @param {Array} points Array of points
     * @return {String} SVG path
     */convertPointsToSVGPath:function(points){var path=[],i,width=this.width/1000,p1=new fabric.Point(points[0].x,points[0].y),p2=new fabric.Point(points[1].x,points[1].y),len=points.length;path.push('M ',p1.x-width,' ',p1.y,' ');for(i=1;i<len;i++){if(!p1.eq(p2)){var midPoint=p1.midPointFrom(p2);// p1 is our bezier control point
// midpoint is our endpoint
// start point is p(i-1) value.
path.push('Q ',p1.x,' ',p1.y,' ',midPoint.x,' ',midPoint.y,' ');}p1=points[i];if(i+1<points.length){p2=points[i+1];}}path.push('L ',p1.x+width,' ',p1.y,' ');return path;},/**
     * Creates fabric.Path object to add on canvas
     * @param {String} pathData Path data
     * @return {fabric.Path} Path to add on canvas
     */createPath:function(pathData){var path=new fabric.Path(pathData,{fill:null,stroke:this.color,strokeWidth:this.width,strokeLineCap:this.strokeLineCap,strokeLineJoin:this.strokeLineJoin,strokeDashArray:this.strokeDashArray});var position=new fabric.Point(path.left+path.width/2,path.top+path.height/2);position=path.translateToGivenOrigin(position,'center','center',path.originX,path.originY);path.top=position.y;path.left=position.x;if(this.shadow){this.shadow.affectStroke=true;path.setShadow(this.shadow);}return path;},/**
     * On mouseup after drawing the path on contextTop canvas
     * we use the points captured to create an new fabric path object
     * and add it to the fabric canvas.
     */_finalizeAndAddPath:function(){var ctx=this.canvas.contextTop;ctx.closePath();var pathData=this.convertPointsToSVGPath(this._points).join('');if(pathData==='M 0 0 Q 0 0 0 0 L 0 0'){// do not create 0 width/height paths, as they are
// rendered inconsistently across browsers
// Firefox 4, for example, renders a dot,
// whereas Chrome 10 renders nothing
this.canvas.renderAll();return;}var path=this.createPath(pathData);this.canvas.add(path);path.setCoords();this.canvas.clearContext(this.canvas.contextTop);this._resetShadow();this.canvas.renderAll();// fire event 'path' created
this.canvas.fire('path:created',{path:path});}});})();/**
 * CircleBrush class
 * @class fabric.CircleBrush
 */fabric.CircleBrush=fabric.util.createClass(fabric.BaseBrush,/** @lends fabric.CircleBrush.prototype */{/**
   * Width of a brush
   * @type Number
   * @default
   */width:10,/**
   * Constructor
   * @param {fabric.Canvas} canvas
   * @return {fabric.CircleBrush} Instance of a circle brush
   */initialize:function(canvas){this.canvas=canvas;this.points=[];},/**
   * Invoked inside on mouse down and mouse move
   * @param {Object} pointer
   */drawDot:function(pointer){var point=this.addPoint(pointer),ctx=this.canvas.contextTop,v=this.canvas.viewportTransform;ctx.save();ctx.transform(v[0],v[1],v[2],v[3],v[4],v[5]);ctx.fillStyle=point.fill;ctx.beginPath();ctx.arc(point.x,point.y,point.radius,0,Math.PI*2,false);ctx.closePath();ctx.fill();ctx.restore();},/**
   * Invoked on mouse down
   */onMouseDown:function(pointer){this.points.length=0;this.canvas.clearContext(this.canvas.contextTop);this._setShadow();this.drawDot(pointer);},/**
   * Invoked on mouse move
   * @param {Object} pointer
   */onMouseMove:function(pointer){this.drawDot(pointer);},/**
   * Invoked on mouse up
   */onMouseUp:function(){var originalRenderOnAddRemove=this.canvas.renderOnAddRemove;this.canvas.renderOnAddRemove=false;var circles=[];for(var i=0,len=this.points.length;i<len;i++){var point=this.points[i],circle=new fabric.Circle({radius:point.radius,left:point.x,top:point.y,originX:'center',originY:'center',fill:point.fill});this.shadow&&circle.setShadow(this.shadow);circles.push(circle);}var group=new fabric.Group(circles,{originX:'center',originY:'center'});group.canvas=this.canvas;this.canvas.add(group);this.canvas.fire('path:created',{path:group});this.canvas.clearContext(this.canvas.contextTop);this._resetShadow();this.canvas.renderOnAddRemove=originalRenderOnAddRemove;this.canvas.renderAll();},/**
   * @param {Object} pointer
   * @return {fabric.Point} Just added pointer point
   */addPoint:function(pointer){var pointerPoint=new fabric.Point(pointer.x,pointer.y),circleRadius=fabric.util.getRandomInt(Math.max(0,this.width-20),this.width+20)/2,circleColor=new fabric.Color(this.color).setAlpha(fabric.util.getRandomInt(0,100)/100).toRgba();pointerPoint.radius=circleRadius;pointerPoint.fill=circleColor;this.points.push(pointerPoint);return pointerPoint;}});/**
 * SprayBrush class
 * @class fabric.SprayBrush
 */fabric.SprayBrush=fabric.util.createClass(fabric.BaseBrush,/** @lends fabric.SprayBrush.prototype */{/**
   * Width of a spray
   * @type Number
   * @default
   */width:10,/**
   * Density of a spray (number of dots per chunk)
   * @type Number
   * @default
   */density:20,/**
   * Width of spray dots
   * @type Number
   * @default
   */dotWidth:1,/**
   * Width variance of spray dots
   * @type Number
   * @default
   */dotWidthVariance:1,/**
   * Whether opacity of a dot should be random
   * @type Boolean
   * @default
   */randomOpacity:false,/**
   * Whether overlapping dots (rectangles) should be removed (for performance reasons)
   * @type Boolean
   * @default
   */optimizeOverlapping:true,/**
   * Constructor
   * @param {fabric.Canvas} canvas
   * @return {fabric.SprayBrush} Instance of a spray brush
   */initialize:function(canvas){this.canvas=canvas;this.sprayChunks=[];},/**
   * Invoked on mouse down
   * @param {Object} pointer
   */onMouseDown:function(pointer){this.sprayChunks.length=0;this.canvas.clearContext(this.canvas.contextTop);this._setShadow();this.addSprayChunk(pointer);this.render();},/**
   * Invoked on mouse move
   * @param {Object} pointer
   */onMouseMove:function(pointer){this.addSprayChunk(pointer);this.render();},/**
   * Invoked on mouse up
   */onMouseUp:function(){var originalRenderOnAddRemove=this.canvas.renderOnAddRemove;this.canvas.renderOnAddRemove=false;var rects=[];for(var i=0,ilen=this.sprayChunks.length;i<ilen;i++){var sprayChunk=this.sprayChunks[i];for(var j=0,jlen=sprayChunk.length;j<jlen;j++){var rect=new fabric.Rect({width:sprayChunk[j].width,height:sprayChunk[j].width,left:sprayChunk[j].x+1,top:sprayChunk[j].y+1,originX:'center',originY:'center',fill:this.color});this.shadow&&rect.setShadow(this.shadow);rects.push(rect);}}if(this.optimizeOverlapping){rects=this._getOptimizedRects(rects);}var group=new fabric.Group(rects,{originX:'center',originY:'center'});group.canvas=this.canvas;this.canvas.add(group);this.canvas.fire('path:created',{path:group});this.canvas.clearContext(this.canvas.contextTop);this._resetShadow();this.canvas.renderOnAddRemove=originalRenderOnAddRemove;this.canvas.renderAll();},/**
   * @private
   * @param {Array} rects
   */_getOptimizedRects:function(rects){// avoid creating duplicate rects at the same coordinates
var uniqueRects={},key;for(var i=0,len=rects.length;i<len;i++){key=rects[i].left+''+rects[i].top;if(!uniqueRects[key]){uniqueRects[key]=rects[i];}}var uniqueRectsArray=[];for(key in uniqueRects){uniqueRectsArray.push(uniqueRects[key]);}return uniqueRectsArray;},/**
   * Renders brush
   */render:function(){var ctx=this.canvas.contextTop;ctx.fillStyle=this.color;var v=this.canvas.viewportTransform;ctx.save();ctx.transform(v[0],v[1],v[2],v[3],v[4],v[5]);for(var i=0,len=this.sprayChunkPoints.length;i<len;i++){var point=this.sprayChunkPoints[i];if(typeof point.opacity!=='undefined'){ctx.globalAlpha=point.opacity;}ctx.fillRect(point.x,point.y,point.width,point.width);}ctx.restore();},/**
   * @param {Object} pointer
   */addSprayChunk:function(pointer){this.sprayChunkPoints=[];var x,y,width,radius=this.width/2;for(var i=0;i<this.density;i++){x=fabric.util.getRandomInt(pointer.x-radius,pointer.x+radius);y=fabric.util.getRandomInt(pointer.y-radius,pointer.y+radius);if(this.dotWidthVariance){width=fabric.util.getRandomInt(// bottom clamp width to 1
Math.max(1,this.dotWidth-this.dotWidthVariance),this.dotWidth+this.dotWidthVariance);}else{width=this.dotWidth;}var point=new fabric.Point(x,y);point.width=width;if(this.randomOpacity){point.opacity=fabric.util.getRandomInt(0,100)/100;}this.sprayChunkPoints.push(point);}this.sprayChunks.push(this.sprayChunkPoints);}});/**
 * PatternBrush class
 * @class fabric.PatternBrush
 * @extends fabric.BaseBrush
 */fabric.PatternBrush=fabric.util.createClass(fabric.PencilBrush,/** @lends fabric.PatternBrush.prototype */{getPatternSrc:function(){var dotWidth=20,dotDistance=5,patternCanvas=fabric.document.createElement('canvas'),patternCtx=patternCanvas.getContext('2d');patternCanvas.width=patternCanvas.height=dotWidth+dotDistance;patternCtx.fillStyle=this.color;patternCtx.beginPath();patternCtx.arc(dotWidth/2,dotWidth/2,dotWidth/2,0,Math.PI*2,false);patternCtx.closePath();patternCtx.fill();return patternCanvas;},getPatternSrcFunction:function(){return String(this.getPatternSrc).replace('this.color','"'+this.color+'"');},/**
   * Creates "pattern" instance property
   */getPattern:function(){return this.canvas.contextTop.createPattern(this.source||this.getPatternSrc(),'repeat');},/**
   * Sets brush styles
   */_setBrushStyles:function(){this.callSuper('_setBrushStyles');this.canvas.contextTop.strokeStyle=this.getPattern();},/**
   * Creates path
   */createPath:function(pathData){var path=this.callSuper('createPath',pathData),topLeft=path._getLeftTopCoords().scalarAdd(path.strokeWidth/2);path.stroke=new fabric.Pattern({source:this.source||this.getPatternSrcFunction(),offsetX:-topLeft.x,offsetY:-topLeft.y});return path;}});(function(){var getPointer=fabric.util.getPointer,degreesToRadians=fabric.util.degreesToRadians,radiansToDegrees=fabric.util.radiansToDegrees,atan2=Math.atan2,abs=Math.abs,supportLineDash=fabric.StaticCanvas.supports('setLineDash'),STROKE_OFFSET=0.5;/**
   * Canvas class
   * @class fabric.Canvas
   * @extends fabric.StaticCanvas
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}
   * @see {@link fabric.Canvas#initialize} for constructor definition
   *
   * @fires object:added
   * @fires object:modified
   * @fires object:rotating
   * @fires object:scaling
   * @fires object:moving
   * @fires object:selected
   *
   * @fires before:selection:cleared
   * @fires selection:cleared
   * @fires selection:created
   *
   * @fires path:created
   * @fires mouse:down
   * @fires mouse:move
   * @fires mouse:up
   * @fires mouse:over
   * @fires mouse:out
   *
   */fabric.Canvas=fabric.util.createClass(fabric.StaticCanvas,/** @lends fabric.Canvas.prototype */{/**
     * Constructor
     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
     * @param {Object} [options] Options object
     * @return {Object} thisArg
     */initialize:function(el,options){options||(options={});this._initStatic(el,options);this._initInteractive();this._createCacheCanvas();},/**
     * When true, objects can be transformed by one side (unproportionally)
     * @type Boolean
     * @default
     */uniScaleTransform:false,/**
     * Indicates which key enable unproportional scaling
     * values: 'altKey', 'shiftKey', 'ctrlKey'.
     * If `null` or 'none' or any other string that is not a modifier key
     * feature is disabled feature disabled.
     * @since 1.6.2
     * @type String
     * @default
     */uniScaleKey:'shiftKey',/**
     * When true, objects use center point as the origin of scale transformation.
     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
     * @since 1.3.4
     * @type Boolean
     * @default
     */centeredScaling:false,/**
     * When true, objects use center point as the origin of rotate transformation.
     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
     * @since 1.3.4
     * @type Boolean
     * @default
     */centeredRotation:false,/**
     * Indicates which key enable centered Transfrom
     * values: 'altKey', 'shiftKey', 'ctrlKey'.
     * If `null` or 'none' or any other string that is not a modifier key
     * feature is disabled feature disabled.
     * @since 1.6.2
     * @type String
     * @default
     */centeredKey:'altKey',/**
     * Indicates which key enable alternate action on corner
     * values: 'altKey', 'shiftKey', 'ctrlKey'.
     * If `null` or 'none' or any other string that is not a modifier key
     * feature is disabled feature disabled.
     * @since 1.6.2
     * @type String
     * @default
     */altActionKey:'shiftKey',/**
     * Indicates that canvas is interactive. This property should not be changed.
     * @type Boolean
     * @default
     */interactive:true,/**
     * Indicates whether group selection should be enabled
     * @type Boolean
     * @default
     */selection:true,/**
     * Indicates which key enable multiple click selection
     * values: 'altKey', 'shiftKey', 'ctrlKey'.
     * If `null` or 'none' or any other string that is not a modifier key
     * feature is disabled feature disabled.
     * @since 1.6.2
     * @type String
     * @default
     */selectionKey:'shiftKey',/**
     * Indicates which key enable alternative selection
     * in case of target overlapping with active object
     * values: 'altKey', 'shiftKey', 'ctrlKey'.
     * If `null` or 'none' or any other string that is not a modifier key
     * feature is disabled feature disabled.
     * @since 1.6.5
     * @type null|String
     * @default
     */altSelectionKey:null,/**
     * Color of selection
     * @type String
     * @default
     */selectionColor:'rgba(100, 100, 255, 0.3)',// blue
/**
     * Default dash array pattern
     * If not empty the selection border is dashed
     * @type Array
     */selectionDashArray:[],/**
     * Color of the border of selection (usually slightly darker than color of selection itself)
     * @type String
     * @default
     */selectionBorderColor:'rgba(255, 255, 255, 0.3)',/**
     * Width of a line used in object/group selection
     * @type Number
     * @default
     */selectionLineWidth:1,/**
     * Default cursor value used when hovering over an object on canvas
     * @type String
     * @default
     */hoverCursor:'move',/**
     * Default cursor value used when moving an object on canvas
     * @type String
     * @default
     */moveCursor:'move',/**
     * Default cursor value used for the entire canvas
     * @type String
     * @default
     */defaultCursor:'default',/**
     * Cursor value used during free drawing
     * @type String
     * @default
     */freeDrawingCursor:'crosshair',/**
     * Cursor value used for rotation point
     * @type String
     * @default
     */rotationCursor:'crosshair',/**
     * Default element class that's given to wrapper (div) element of canvas
     * @type String
     * @default
     */containerClass:'canvas-container',/**
     * When true, object detection happens on per-pixel basis rather than on per-bounding-box
     * @type Boolean
     * @default
     */perPixelTargetFind:false,/**
     * Number of pixels around target pixel to tolerate (consider active) during object detection
     * @type Number
     * @default
     */targetFindTolerance:0,/**
     * When true, target detection is skipped when hovering over canvas. This can be used to improve performance.
     * @type Boolean
     * @default
     */skipTargetFind:false,/**
     * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.
     * After mousedown, mousemove creates a shape,
     * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.
     * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}
     * @type Boolean
     * @default
     */isDrawingMode:false,/**
     * Indicates whether objects should remain in current stack position when selected.
     * When false objects are brought to top and rendered as part of the selection group
     * @type Boolean
     * @default
     */preserveObjectStacking:false,/**
     * Indicates the angle that an object will lock to while rotating.
     * @type Number
     * @since 1.6.7
     * @default
     */snapAngle:0,/**
     * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.
     * When `null`, the snapThreshold will default to the snapAngle.
     * @type null|Number
     * @since 1.6.7
     * @default
     */snapThreshold:null,/**
     * Indicates if the right click on canvas can output the context menu or not
     * @type Boolean
     * @since 1.6.5
     * @default
     */stopContextMenu:false,/**
     * Indicates if the canvas can fire right click events
     * @type Boolean
     * @since 1.6.5
     * @default
     */fireRightClick:false,/**
     * Indicates if the canvas can fire middle click events
     * @type Boolean
     * @since 1.7.8
     * @default
     */fireMiddleClick:false,/**
     * @private
     */_initInteractive:function(){this._currentTransform=null;this._groupSelector=null;this._initWrapperElement();this._createUpperCanvas();this._initEventListeners();this._initRetinaScaling();this.freeDrawingBrush=fabric.PencilBrush&&new fabric.PencilBrush(this);this.calcOffset();},/**
     * Divides objects in two groups, one to render immediately
     * and one to render as activeGroup.
     * @return {Array} objects to render immediately and pushes the other in the activeGroup.
     */_chooseObjectsToRender:function(){var activeGroup=this.getActiveGroup(),activeObject=this.getActiveObject(),object,objsToRender=[],activeGroupObjects=[];if((activeGroup||activeObject)&&!this.preserveObjectStacking){for(var i=0,length=this._objects.length;i<length;i++){object=this._objects[i];if((!activeGroup||!activeGroup.contains(object))&&object!==activeObject){objsToRender.push(object);}else{activeGroupObjects.push(object);}}if(activeGroup){activeGroup._set('_objects',activeGroupObjects);objsToRender.push(activeGroup);}activeObject&&objsToRender.push(activeObject);}else{objsToRender=this._objects;}return objsToRender;},/**
     * Renders both the top canvas and the secondary container canvas.
     * @return {fabric.Canvas} instance
     * @chainable
     */renderAll:function(){if(this.contextTopDirty&&!this._groupSelector&&!this.isDrawingMode){this.clearContext(this.contextTop);this.contextTopDirty=false;}var canvasToDrawOn=this.contextContainer;this.renderCanvas(canvasToDrawOn,this._chooseObjectsToRender());return this;},/**
     * Method to render only the top canvas.
     * Also used to render the group selection box.
     * @return {fabric.Canvas} thisArg
     * @chainable
     */renderTop:function(){var ctx=this.contextTop;this.clearContext(ctx);// we render the top context - last object
if(this.selection&&this._groupSelector){this._drawSelection(ctx);}this.fire('after:render');this.contextTopDirty=true;return this;},/**
     * Resets the current transform to its original values and chooses the type of resizing based on the event
     * @private
     */_resetCurrentTransform:function(){var t=this._currentTransform;t.target.set({scaleX:t.original.scaleX,scaleY:t.original.scaleY,skewX:t.original.skewX,skewY:t.original.skewY,left:t.original.left,top:t.original.top});if(this._shouldCenterTransform(t.target)){if(t.action==='rotate'){this._setOriginToCenter(t.target);}else{if(t.originX!=='center'){if(t.originX==='right'){t.mouseXSign=-1;}else{t.mouseXSign=1;}}if(t.originY!=='center'){if(t.originY==='bottom'){t.mouseYSign=-1;}else{t.mouseYSign=1;}}t.originX='center';t.originY='center';}}else{t.originX=t.original.originX;t.originY=t.original.originY;}},/**
     * Checks if point is contained within an area of given object
     * @param {Event} e Event object
     * @param {fabric.Object} target Object to test against
     * @param {Object} [point] x,y object of point coordinates we want to check.
     * @return {Boolean} true if point is contained within an area of given object
     */containsPoint:function(e,target,point){var ignoreZoom=true,pointer=point||this.getPointer(e,ignoreZoom),xy;if(target.group&&target.group===this.getActiveGroup()){xy=this._normalizePointer(target.group,pointer);}else{xy={x:pointer.x,y:pointer.y};}// http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html
// http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html
return target.containsPoint(xy)||target._findTargetCorner(pointer);},/**
     * @private
     */_normalizePointer:function(object,pointer){var m=object.calcTransformMatrix(),invertedM=fabric.util.invertTransform(m),vptPointer=this.restorePointerVpt(pointer);return fabric.util.transformPoint(vptPointer,invertedM);},/**
     * Returns true if object is transparent at a certain location
     * @param {fabric.Object} target Object to check
     * @param {Number} x Left coordinate
     * @param {Number} y Top coordinate
     * @return {Boolean}
     */isTargetTransparent:function(target,x,y){var hasBorders=target.hasBorders,transparentCorners=target.transparentCorners,ctx=this.contextCache,originalColor=target.selectionBackgroundColor;target.hasBorders=target.transparentCorners=false;target.selectionBackgroundColor='';ctx.save();ctx.transform.apply(ctx,this.viewportTransform);target.render(ctx);ctx.restore();target.active&&target._renderControls(ctx);target.hasBorders=hasBorders;target.transparentCorners=transparentCorners;target.selectionBackgroundColor=originalColor;var isTransparent=fabric.util.isTransparent(ctx,x,y,this.targetFindTolerance);this.clearContext(ctx);return isTransparent;},/**
     * @private
     * @param {Event} e Event object
     * @param {fabric.Object} target
     */_shouldClearSelection:function(e,target){var activeGroup=this.getActiveGroup(),activeObject=this.getActiveObject();return!target||target&&activeGroup&&!activeGroup.contains(target)&&activeGroup!==target&&!e[this.selectionKey]||target&&!target.evented||target&&!target.selectable&&activeObject&&activeObject!==target;},/**
     * @private
     * @param {fabric.Object} target
     */_shouldCenterTransform:function(target){if(!target){return;}var t=this._currentTransform,centerTransform;if(t.action==='scale'||t.action==='scaleX'||t.action==='scaleY'){centerTransform=this.centeredScaling||target.centeredScaling;}else if(t.action==='rotate'){centerTransform=this.centeredRotation||target.centeredRotation;}return centerTransform?!t.altKey:t.altKey;},/**
     * @private
     */_getOriginFromCorner:function(target,corner){var origin={x:target.originX,y:target.originY};if(corner==='ml'||corner==='tl'||corner==='bl'){origin.x='right';}else if(corner==='mr'||corner==='tr'||corner==='br'){origin.x='left';}if(corner==='tl'||corner==='mt'||corner==='tr'){origin.y='bottom';}else if(corner==='bl'||corner==='mb'||corner==='br'){origin.y='top';}return origin;},/**
     * @private
     */_getActionFromCorner:function(target,corner,e){if(!corner){return'drag';}switch(corner){case'mtr':return'rotate';case'ml':case'mr':return e[this.altActionKey]?'skewY':'scaleX';case'mt':case'mb':return e[this.altActionKey]?'skewX':'scaleY';default:return'scale';}},/**
     * @private
     * @param {Event} e Event object
     * @param {fabric.Object} target
     */_setupCurrentTransform:function(e,target){if(!target){return;}var pointer=this.getPointer(e),corner=target._findTargetCorner(this.getPointer(e,true)),action=this._getActionFromCorner(target,corner,e),origin=this._getOriginFromCorner(target,corner);this._currentTransform={target:target,action:action,corner:corner,scaleX:target.scaleX,scaleY:target.scaleY,skewX:target.skewX,skewY:target.skewY,offsetX:pointer.x-target.left,offsetY:pointer.y-target.top,originX:origin.x,originY:origin.y,ex:pointer.x,ey:pointer.y,lastX:pointer.x,lastY:pointer.y,left:target.left,top:target.top,theta:degreesToRadians(target.angle),width:target.width*target.scaleX,mouseXSign:1,mouseYSign:1,shiftKey:e.shiftKey,altKey:e[this.centeredKey]};this._currentTransform.original={left:target.left,top:target.top,scaleX:target.scaleX,scaleY:target.scaleY,skewX:target.skewX,skewY:target.skewY,originX:origin.x,originY:origin.y};this._resetCurrentTransform();},/**
     * Translates object by "setting" its left/top
     * @private
     * @param {Number} x pointer's x coordinate
     * @param {Number} y pointer's y coordinate
     * @return {Boolean} true if the translation occurred
     */_translateObject:function(x,y){var transform=this._currentTransform,target=transform.target,newLeft=x-transform.offsetX,newTop=y-transform.offsetY,moveX=!target.get('lockMovementX')&&target.left!==newLeft,moveY=!target.get('lockMovementY')&&target.top!==newTop;moveX&&target.set('left',newLeft);moveY&&target.set('top',newTop);return moveX||moveY;},/**
     * Check if we are increasing a positive skew or lower it,
     * checking mouse direction and pressed corner.
     * @private
     */_changeSkewTransformOrigin:function(mouseMove,t,by){var property='originX',origins={0:'center'},skew=t.target.skewX,originA='left',originB='right',corner=t.corner==='mt'||t.corner==='ml'?1:-1,flipSign=1;mouseMove=mouseMove>0?1:-1;if(by==='y'){skew=t.target.skewY;originA='top';originB='bottom';property='originY';}origins[-1]=originA;origins[1]=originB;t.target.flipX&&(flipSign*=-1);t.target.flipY&&(flipSign*=-1);if(skew===0){t.skewSign=-corner*mouseMove*flipSign;t[property]=origins[-mouseMove];}else{skew=skew>0?1:-1;t.skewSign=skew;t[property]=origins[skew*corner*flipSign];}},/**
     * Skew object by mouse events
     * @private
     * @param {Number} x pointer's x coordinate
     * @param {Number} y pointer's y coordinate
     * @param {String} by Either 'x' or 'y'
     * @return {Boolean} true if the skewing occurred
     */_skewObject:function(x,y,by){var t=this._currentTransform,target=t.target,skewed=false,lockSkewingX=target.get('lockSkewingX'),lockSkewingY=target.get('lockSkewingY');if(lockSkewingX&&by==='x'||lockSkewingY&&by==='y'){return false;}// Get the constraint point
var center=target.getCenterPoint(),actualMouseByCenter=target.toLocalPoint(new fabric.Point(x,y),'center','center')[by],lastMouseByCenter=target.toLocalPoint(new fabric.Point(t.lastX,t.lastY),'center','center')[by],actualMouseByOrigin,constraintPosition,dim=target._getTransformedDimensions();this._changeSkewTransformOrigin(actualMouseByCenter-lastMouseByCenter,t,by);actualMouseByOrigin=target.toLocalPoint(new fabric.Point(x,y),t.originX,t.originY)[by];constraintPosition=target.translateToOriginPoint(center,t.originX,t.originY);// Actually skew the object
skewed=this._setObjectSkew(actualMouseByOrigin,t,by,dim);t.lastX=x;t.lastY=y;// Make sure the constraints apply
target.setPositionByOrigin(constraintPosition,t.originX,t.originY);return skewed;},/**
     * Set object skew
     * @private
     * @return {Boolean} true if the skewing occurred
     */_setObjectSkew:function(localMouse,transform,by,_dim){var target=transform.target,newValue,skewed=false,skewSign=transform.skewSign,newDim,dimNoSkew,otherBy,_otherBy,_by,newDimMouse,skewX,skewY;if(by==='x'){otherBy='y';_otherBy='Y';_by='X';skewX=0;skewY=target.skewY;}else{otherBy='x';_otherBy='X';_by='Y';skewX=target.skewX;skewY=0;}dimNoSkew=target._getTransformedDimensions(skewX,skewY);newDimMouse=2*Math.abs(localMouse)-dimNoSkew[by];if(newDimMouse<=2){newValue=0;}else{newValue=skewSign*Math.atan(newDimMouse/target['scale'+_by]/(dimNoSkew[otherBy]/target['scale'+_otherBy]));newValue=fabric.util.radiansToDegrees(newValue);}skewed=target['skew'+_by]!==newValue;target.set('skew'+_by,newValue);if(target['skew'+_otherBy]!==0){newDim=target._getTransformedDimensions();newValue=_dim[otherBy]/newDim[otherBy]*target['scale'+_otherBy];target.set('scale'+_otherBy,newValue);}return skewed;},/**
     * Scales object by invoking its scaleX/scaleY methods
     * @private
     * @param {Number} x pointer's x coordinate
     * @param {Number} y pointer's y coordinate
     * @param {String} by Either 'x' or 'y' - specifies dimension constraint by which to scale an object.
     *                    When not provided, an object is scaled by both dimensions equally
     * @return {Boolean} true if the scaling occurred
     */_scaleObject:function(x,y,by){var t=this._currentTransform,target=t.target,lockScalingX=target.get('lockScalingX'),lockScalingY=target.get('lockScalingY'),lockScalingFlip=target.get('lockScalingFlip');if(lockScalingX&&lockScalingY){return false;}// Get the constraint point
var constraintPosition=target.translateToOriginPoint(target.getCenterPoint(),t.originX,t.originY),localMouse=target.toLocalPoint(new fabric.Point(x,y),t.originX,t.originY),dim=target._getTransformedDimensions(),scaled=false;this._setLocalMouse(localMouse,t);// Actually scale the object
scaled=this._setObjectScale(localMouse,t,lockScalingX,lockScalingY,by,lockScalingFlip,dim);// Make sure the constraints apply
target.setPositionByOrigin(constraintPosition,t.originX,t.originY);return scaled;},/**
     * @private
     * @return {Boolean} true if the scaling occurred
     */_setObjectScale:function(localMouse,transform,lockScalingX,lockScalingY,by,lockScalingFlip,_dim){var target=transform.target,forbidScalingX=false,forbidScalingY=false,scaled=false,changeX,changeY,scaleX,scaleY;scaleX=localMouse.x*target.scaleX/_dim.x;scaleY=localMouse.y*target.scaleY/_dim.y;changeX=target.scaleX!==scaleX;changeY=target.scaleY!==scaleY;if(lockScalingFlip&&scaleX<=0&&scaleX<target.scaleX){forbidScalingX=true;}if(lockScalingFlip&&scaleY<=0&&scaleY<target.scaleY){forbidScalingY=true;}if(by==='equally'&&!lockScalingX&&!lockScalingY){forbidScalingX||forbidScalingY||(scaled=this._scaleObjectEqually(localMouse,target,transform,_dim));}else if(!by){forbidScalingX||lockScalingX||target.set('scaleX',scaleX)&&(scaled=scaled||changeX);forbidScalingY||lockScalingY||target.set('scaleY',scaleY)&&(scaled=scaled||changeY);}else if(by==='x'&&!target.get('lockUniScaling')){forbidScalingX||lockScalingX||target.set('scaleX',scaleX)&&(scaled=scaled||changeX);}else if(by==='y'&&!target.get('lockUniScaling')){forbidScalingY||lockScalingY||target.set('scaleY',scaleY)&&(scaled=scaled||changeY);}transform.newScaleX=scaleX;transform.newScaleY=scaleY;forbidScalingX||forbidScalingY||this._flipObject(transform,by);return scaled;},/**
     * @private
     * @return {Boolean} true if the scaling occurred
     */_scaleObjectEqually:function(localMouse,target,transform,_dim){var dist=localMouse.y+localMouse.x,lastDist=_dim.y*transform.original.scaleY/target.scaleY+_dim.x*transform.original.scaleX/target.scaleX,scaled,signX=localMouse.x/Math.abs(localMouse.x),signY=localMouse.y/Math.abs(localMouse.y);// We use transform.scaleX/Y instead of target.scaleX/Y
// because the object may have a min scale and we'll loose the proportions
transform.newScaleX=signX*Math.abs(transform.original.scaleX*dist/lastDist);transform.newScaleY=signY*Math.abs(transform.original.scaleY*dist/lastDist);scaled=transform.newScaleX!==target.scaleX||transform.newScaleY!==target.scaleY;target.set('scaleX',transform.newScaleX);target.set('scaleY',transform.newScaleY);return scaled;},/**
     * @private
     */_flipObject:function(transform,by){if(transform.newScaleX<0&&by!=='y'){if(transform.originX==='left'){transform.originX='right';}else if(transform.originX==='right'){transform.originX='left';}}if(transform.newScaleY<0&&by!=='x'){if(transform.originY==='top'){transform.originY='bottom';}else if(transform.originY==='bottom'){transform.originY='top';}}},/**
     * @private
     */_setLocalMouse:function(localMouse,t){var target=t.target,zoom=this.getZoom(),padding=target.padding/zoom;if(t.originX==='right'){localMouse.x*=-1;}else if(t.originX==='center'){localMouse.x*=t.mouseXSign*2;if(localMouse.x<0){t.mouseXSign=-t.mouseXSign;}}if(t.originY==='bottom'){localMouse.y*=-1;}else if(t.originY==='center'){localMouse.y*=t.mouseYSign*2;if(localMouse.y<0){t.mouseYSign=-t.mouseYSign;}}// adjust the mouse coordinates when dealing with padding
if(abs(localMouse.x)>padding){if(localMouse.x<0){localMouse.x+=padding;}else{localMouse.x-=padding;}}else{// mouse is within the padding, set to 0
localMouse.x=0;}if(abs(localMouse.y)>padding){if(localMouse.y<0){localMouse.y+=padding;}else{localMouse.y-=padding;}}else{localMouse.y=0;}},/**
     * Rotates object by invoking its rotate method
     * @private
     * @param {Number} x pointer's x coordinate
     * @param {Number} y pointer's y coordinate
     * @return {Boolean} true if the rotation occurred
     */_rotateObject:function(x,y){var t=this._currentTransform;if(t.target.get('lockRotation')){return false;}var lastAngle=atan2(t.ey-t.top,t.ex-t.left),curAngle=atan2(y-t.top,x-t.left),angle=radiansToDegrees(curAngle-lastAngle+t.theta),hasRoated=true;if(t.target.snapAngle>0){var snapAngle=t.target.snapAngle,snapThreshold=t.target.snapThreshold||snapAngle,rightAngleLocked=Math.ceil(angle/snapAngle)*snapAngle,leftAngleLocked=Math.floor(angle/snapAngle)*snapAngle;if(Math.abs(angle-leftAngleLocked)<snapThreshold){angle=leftAngleLocked;}else if(Math.abs(angle-rightAngleLocked)<snapThreshold){angle=rightAngleLocked;}}// normalize angle to positive value
if(angle<0){angle=360+angle;}angle%=360;if(t.target.angle===angle){hasRoated=false;}else{t.target.angle=angle;}return hasRoated;},/**
     * Set the cursor type of the canvas element
     * @param {String} value Cursor type of the canvas element.
     * @see http://www.w3.org/TR/css3-ui/#cursor
     */setCursor:function(value){this.upperCanvasEl.style.cursor=value;},/**
     * @param {fabric.Object} target to reset transform
     * @private
     */_resetObjectTransform:function(target){target.scaleX=1;target.scaleY=1;target.skewX=0;target.skewY=0;target.setAngle(0);},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx to draw the selection on
     */_drawSelection:function(ctx){var groupSelector=this._groupSelector,left=groupSelector.left,top=groupSelector.top,aleft=abs(left),atop=abs(top);if(this.selectionColor){ctx.fillStyle=this.selectionColor;ctx.fillRect(groupSelector.ex-(left>0?0:-left),groupSelector.ey-(top>0?0:-top),aleft,atop);}if(!this.selectionLineWidth||!this.selectionBorderColor){return;}ctx.lineWidth=this.selectionLineWidth;ctx.strokeStyle=this.selectionBorderColor;// selection border
if(this.selectionDashArray.length>1&&!supportLineDash){var px=groupSelector.ex+STROKE_OFFSET-(left>0?0:aleft),py=groupSelector.ey+STROKE_OFFSET-(top>0?0:atop);ctx.beginPath();fabric.util.drawDashedLine(ctx,px,py,px+aleft,py,this.selectionDashArray);fabric.util.drawDashedLine(ctx,px,py+atop-1,px+aleft,py+atop-1,this.selectionDashArray);fabric.util.drawDashedLine(ctx,px,py,px,py+atop,this.selectionDashArray);fabric.util.drawDashedLine(ctx,px+aleft-1,py,px+aleft-1,py+atop,this.selectionDashArray);ctx.closePath();ctx.stroke();}else{fabric.Object.prototype._setLineDash.call(this,ctx,this.selectionDashArray);ctx.strokeRect(groupSelector.ex+STROKE_OFFSET-(left>0?0:aleft),groupSelector.ey+STROKE_OFFSET-(top>0?0:atop),aleft,atop);}},/**
     * Method that determines what object we are clicking on
     * the skipGroup parameter is for internal use, is needed for shift+click action
     * @param {Event} e mouse event
     * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through
     */findTarget:function(e,skipGroup){if(this.skipTargetFind){return;}var ignoreZoom=true,pointer=this.getPointer(e,ignoreZoom),activeGroup=this.getActiveGroup(),activeObject=this.getActiveObject(),activeTarget,activeTargetSubs;// first check current group (if one exists)
// active group does not check sub targets like normal groups.
// if active group just exits.
this.targets=[];if(activeGroup&&!skipGroup&&activeGroup===this._searchPossibleTargets([activeGroup],pointer)){this._fireOverOutEvents(activeGroup,e);return activeGroup;}// if we hit the corner of an activeObject, let's return that.
if(activeObject&&activeObject._findTargetCorner(pointer)){this._fireOverOutEvents(activeObject,e);return activeObject;}if(activeObject&&activeObject===this._searchPossibleTargets([activeObject],pointer)){if(!this.preserveObjectStacking){this._fireOverOutEvents(activeObject,e);return activeObject;}else{activeTarget=activeObject;activeTargetSubs=this.targets;this.targets=[];}}var target=this._searchPossibleTargets(this._objects,pointer);if(e[this.altSelectionKey]&&target&&activeTarget&&target!==activeTarget){target=activeTarget;this.targets=activeTargetSubs;}this._fireOverOutEvents(target,e);return target;},/**
     * @private
     */_fireOverOutEvents:function(target,e){var overOpt,outOpt,hoveredTarget=this._hoveredTarget;if(hoveredTarget!==target){overOpt={e:e,target:target,previousTarget:this._hoveredTarget};outOpt={e:e,target:this._hoveredTarget,nextTarget:target};this._hoveredTarget=target;}if(target){if(hoveredTarget!==target){if(hoveredTarget){this.fire('mouse:out',outOpt);hoveredTarget.fire('mouseout',outOpt);}this.fire('mouse:over',overOpt);target.fire('mouseover',overOpt);}}else if(hoveredTarget){this.fire('mouse:out',outOpt);hoveredTarget.fire('mouseout',outOpt);}},/**
     * @private
     */_checkTarget:function(pointer,obj){if(obj&&obj.visible&&obj.evented&&this.containsPoint(null,obj,pointer)){if((this.perPixelTargetFind||obj.perPixelTargetFind)&&!obj.isEditing){var isTransparent=this.isTargetTransparent(obj,pointer.x,pointer.y);if(!isTransparent){return true;}}else{return true;}}},/**
     * @private
     */_searchPossibleTargets:function(objects,pointer){// Cache all targets where their bounding box contains point.
var target,i=objects.length,normalizedPointer,subTarget;// Do not check for currently grouped objects, since we check the parent group itself.
// untill we call this function specifically to search inside the activeGroup
while(i--){if(this._checkTarget(pointer,objects[i])){target=objects[i];if(target.type==='group'&&target.subTargetCheck){normalizedPointer=this._normalizePointer(target,pointer);subTarget=this._searchPossibleTargets(target._objects,normalizedPointer);subTarget&&this.targets.push(subTarget);}break;}}return target;},/**
     * Returns pointer coordinates without the effect of the viewport
     * @param {Object} pointer with "x" and "y" number values
     * @return {Object} object with "x" and "y" number values
     */restorePointerVpt:function(pointer){return fabric.util.transformPoint(pointer,fabric.util.invertTransform(this.viewportTransform));},/**
     * Returns pointer coordinates relative to canvas.
     * Can return coordinates with or without viewportTransform.
     * ignoreZoom false gives back coordinates that represent
     * the point clicked on canvas element.
     * ignoreZoom true gives back coordinates after being processed
     * by the viewportTransform ( sort of coordinates of what is displayed
     * on the canvas where you are clicking.
     * To interact with your shapes top and left you want to use ignoreZoom true
     * most of the time, while ignoreZoom false will give you coordinates
     * compatible with the object.oCoords system.
     * of the time.
     * @param {Event} e
     * @param {Boolean} ignoreZoom
     * @return {Object} object with "x" and "y" number values
     */getPointer:function(e,ignoreZoom,upperCanvasEl){if(!upperCanvasEl){upperCanvasEl=this.upperCanvasEl;}var pointer=getPointer(e),bounds=upperCanvasEl.getBoundingClientRect(),boundsWidth=bounds.width||0,boundsHeight=bounds.height||0,cssScale;if(!boundsWidth||!boundsHeight){if('top'in bounds&&'bottom'in bounds){boundsHeight=Math.abs(bounds.top-bounds.bottom);}if('right'in bounds&&'left'in bounds){boundsWidth=Math.abs(bounds.right-bounds.left);}}this.calcOffset();pointer.x=pointer.x-this._offset.left;pointer.y=pointer.y-this._offset.top;if(!ignoreZoom){pointer=this.restorePointerVpt(pointer);}if(boundsWidth===0||boundsHeight===0){// If bounds are not available (i.e. not visible), do not apply scale.
cssScale={width:1,height:1};}else{cssScale={width:upperCanvasEl.width/boundsWidth,height:upperCanvasEl.height/boundsHeight};}return{x:pointer.x*cssScale.width,y:pointer.y*cssScale.height};},/**
     * @private
     * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized
     */_createUpperCanvas:function(){var lowerCanvasClass=this.lowerCanvasEl.className.replace(/\s*lower-canvas\s*/,'');if(this.upperCanvasEl){this.upperCanvasEl.className='';}else{this.upperCanvasEl=this._createCanvasElement();}fabric.util.addClass(this.upperCanvasEl,'upper-canvas '+lowerCanvasClass);this.wrapperEl.appendChild(this.upperCanvasEl);this._copyCanvasStyle(this.lowerCanvasEl,this.upperCanvasEl);this._applyCanvasStyle(this.upperCanvasEl);this.contextTop=this.upperCanvasEl.getContext('2d');},/**
     * @private
     */_createCacheCanvas:function(){this.cacheCanvasEl=this._createCanvasElement();this.cacheCanvasEl.setAttribute('width',this.width);this.cacheCanvasEl.setAttribute('height',this.height);this.contextCache=this.cacheCanvasEl.getContext('2d');},/**
     * @private
     */_initWrapperElement:function(){this.wrapperEl=fabric.util.wrapElement(this.lowerCanvasEl,'div',{'class':this.containerClass});fabric.util.setStyle(this.wrapperEl,{width:this.getWidth()+'px',height:this.getHeight()+'px',position:'relative'});fabric.util.makeElementUnselectable(this.wrapperEl);},/**
     * @private
     * @param {HTMLElement} element canvas element to apply styles on
     */_applyCanvasStyle:function(element){var width=this.getWidth()||element.width,height=this.getHeight()||element.height;fabric.util.setStyle(element,{position:'absolute',width:width+'px',height:height+'px',left:0,top:0,'touch-action':'none'});element.width=width;element.height=height;fabric.util.makeElementUnselectable(element);},/**
     * Copys the the entire inline style from one element (fromEl) to another (toEl)
     * @private
     * @param {Element} fromEl Element style is copied from
     * @param {Element} toEl Element copied style is applied to
     */_copyCanvasStyle:function(fromEl,toEl){toEl.style.cssText=fromEl.style.cssText;},/**
     * Returns context of canvas where object selection is drawn
     * @return {CanvasRenderingContext2D}
     */getSelectionContext:function(){return this.contextTop;},/**
     * Returns &lt;canvas> element on which object selection is drawn
     * @return {HTMLCanvasElement}
     */getSelectionElement:function(){return this.upperCanvasEl;},/**
     * @private
     * @param {Object} object
     */_setActiveObject:function(object){var obj=this._activeObject;if(obj){obj.set('active',false);if(object!==obj&&obj.onDeselect&&typeof obj.onDeselect==='function'){obj.onDeselect();}}this._activeObject=object;object.set('active',true);},/**
     * Sets given object as the only active object on canvas
     * @param {fabric.Object} object Object to set as an active one
     * @param {Event} [e] Event (passed along when firing "object:selected")
     * @return {fabric.Canvas} thisArg
     * @chainable
     */setActiveObject:function(object,e){var currentActiveObject=this.getActiveObject();if(currentActiveObject&&currentActiveObject!==object){currentActiveObject.fire('deselected',{e:e});}this._setActiveObject(object);this.fire('object:selected',{target:object,e:e});object.fire('selected',{e:e});this.renderAll();return this;},/**
     * Returns currently active object
     * @return {fabric.Object} active object
     */getActiveObject:function(){return this._activeObject;},/**
     * @private
     * @param {fabric.Object} obj Object that was removed
     */_onObjectRemoved:function(obj){// removing active object should fire "selection:cleared" events
if(this.getActiveObject()===obj){this.fire('before:selection:cleared',{target:obj});this._discardActiveObject();this.fire('selection:cleared',{target:obj});obj.fire('deselected');}if(this._hoveredTarget===obj){this._hoveredTarget=null;}this.callSuper('_onObjectRemoved',obj);},/**
     * @private
     */_discardActiveObject:function(){var obj=this._activeObject;if(obj){obj.set('active',false);if(obj.onDeselect&&typeof obj.onDeselect==='function'){obj.onDeselect();}}this._activeObject=null;},/**
     * Discards currently active object and fire events. If the function is called by fabric
     * as a consequence of a mouse event, the event is passed as a parmater and
     * sent to the fire function for the custom events. When used as a method the
     * e param does not have any application.
     * @param {event} e
     * @return {fabric.Canvas} thisArg
     * @chainable
     */discardActiveObject:function(e){var activeObject=this._activeObject;if(activeObject){this.fire('before:selection:cleared',{target:activeObject,e:e});this._discardActiveObject();this.fire('selection:cleared',{e:e});activeObject.fire('deselected',{e:e});}return this;},/**
     * @private
     * @param {fabric.Group} group
     */_setActiveGroup:function(group){this._activeGroup=group;if(group){group.set('active',true);}},/**
     * Sets active group to a specified one. If the function is called by fabric
     * as a consequence of a mouse event, the event is passed as a parmater and
     * sent to the fire function for the custom events. When used as a method the
     * e param does not have any application.
     * @param {fabric.Group} group Group to set as a current one
     * @param {Event} e Event object
     * @return {fabric.Canvas} thisArg
     * @chainable
     */setActiveGroup:function(group,e){this._setActiveGroup(group);if(group){this.fire('object:selected',{target:group,e:e});group.fire('selected',{e:e});}return this;},/**
     * Returns currently active group
     * @return {fabric.Group} Current group
     */getActiveGroup:function(){return this._activeGroup;},/**
     * @private
     */_discardActiveGroup:function(){var g=this.getActiveGroup();if(g){g.destroy();}this.setActiveGroup(null);},/**
     * Discards currently active group and fire events If the function is called by fabric
     * as a consequence of a mouse event, the event is passed as a parmater and
     * sent to the fire function for the custom events. When used as a method the
     * e param does not have any application.
     * @return {fabric.Canvas} thisArg
     * @chainable
     */discardActiveGroup:function(e){var g=this.getActiveGroup();if(g){this.fire('before:selection:cleared',{e:e,target:g});this._discardActiveGroup();this.fire('selection:cleared',{e:e});}return this;},/**
     * Deactivates all objects on canvas, removing any active group or object
     * @return {fabric.Canvas} thisArg
     * @chainable
     */deactivateAll:function(){var allObjects=this.getObjects(),i=0,len=allObjects.length,obj;for(;i<len;i++){obj=allObjects[i];obj&&obj.set('active',false);}this._discardActiveGroup();this._discardActiveObject();return this;},/**
     * Deactivates all objects and dispatches appropriate events If the function is called by fabric
     * as a consequence of a mouse event, the event is passed as a parmater and
     * sent to the fire function for the custom events. When used as a method the
     * e param does not have any application.
     * @return {fabric.Canvas} thisArg
     * @chainable
     */deactivateAllWithDispatch:function(e){var allObjects=this.getObjects(),i=0,len=allObjects.length,obj;for(;i<len;i++){obj=allObjects[i];obj&&obj.set('active',false);}this.discardActiveGroup(e);this.discardActiveObject(e);return this;},/**
     * Clears a canvas element and removes all event listeners
     * @return {fabric.Canvas} thisArg
     * @chainable
     */dispose:function(){fabric.StaticCanvas.prototype.dispose.call(this);var wrapper=this.wrapperEl;this.removeListeners();wrapper.removeChild(this.upperCanvasEl);wrapper.removeChild(this.lowerCanvasEl);delete this.upperCanvasEl;if(wrapper.parentNode){wrapper.parentNode.replaceChild(this.lowerCanvasEl,this.wrapperEl);}delete this.wrapperEl;return this;},/**
     * Clears all contexts (background, main, top) of an instance
     * @return {fabric.Canvas} thisArg
     * @chainable
     */clear:function(){this.discardActiveGroup();this.discardActiveObject();this.clearContext(this.contextTop);return this.callSuper('clear');},/**
     * Draws objects' controls (borders/controls)
     * @param {CanvasRenderingContext2D} ctx Context to render controls on
     */drawControls:function(ctx){var activeGroup=this.getActiveGroup();if(activeGroup){activeGroup._renderControls(ctx);}else{this._drawObjectsControls(ctx);}},/**
     * @private
     */_drawObjectsControls:function(ctx){for(var i=0,len=this._objects.length;i<len;++i){if(!this._objects[i]||!this._objects[i].active){continue;}this._objects[i]._renderControls(ctx);}},/**
     * @private
     */_toObject:function(instance,methodName,propertiesToInclude){//If the object is part of the current selection group, it should
//be transformed appropriately
//i.e. it should be serialised as it would appear if the selection group
//were to be destroyed.
var originalProperties=this._realizeGroupTransformOnObject(instance),object=this.callSuper('_toObject',instance,methodName,propertiesToInclude);//Undo the damage we did by changing all of its properties
this._unwindGroupTransformOnObject(instance,originalProperties);return object;},/**
     * Realises an object's group transformation on it
     * @private
     * @param {fabric.Object} [instance] the object to transform (gets mutated)
     * @returns the original values of instance which were changed
     */_realizeGroupTransformOnObject:function(instance){if(instance.group&&instance.group===this.getActiveGroup()){//Copy all the positionally relevant properties across now
var originalValues={},layoutProps=['angle','flipX','flipY','left','scaleX','scaleY','skewX','skewY','top'];layoutProps.forEach(function(prop){originalValues[prop]=instance[prop];});this.getActiveGroup().realizeTransform(instance);return originalValues;}else{return null;}},/**
     * Restores the changed properties of instance
     * @private
     * @param {fabric.Object} [instance] the object to un-transform (gets mutated)
     * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject
     */_unwindGroupTransformOnObject:function(instance,originalValues){if(originalValues){instance.set(originalValues);}},/**
     * @private
     */_setSVGObject:function(markup,instance,reviver){var originalProperties;//If the object is in a selection group, simulate what would happen to that
//object when the group is deselected
originalProperties=this._realizeGroupTransformOnObject(instance);this.callSuper('_setSVGObject',markup,instance,reviver);this._unwindGroupTransformOnObject(instance,originalProperties);}});// copying static properties manually to work around Opera's bug,
// where "prototype" property is enumerable and overrides existing prototype
for(var prop in fabric.StaticCanvas){if(prop!=='prototype'){fabric.Canvas[prop]=fabric.StaticCanvas[prop];}}if(fabric.isTouchSupported){/** @ignore */fabric.Canvas.prototype._setCursorFromEvent=function(){};}/**
   * @ignore
   * @class fabric.Element
   * @alias fabric.Canvas
   * @deprecated Use {@link fabric.Canvas} instead.
   * @constructor
   */fabric.Element=fabric.Canvas;})();(function(){var cursorOffset={mt:0,// n
tr:1,// ne
mr:2,// e
br:3,// se
mb:4,// s
bl:5,// sw
ml:6,// w
tl:7// nw
},addListener=fabric.util.addListener,removeListener=fabric.util.removeListener,RIGHT_CLICK=3,MIDDLE_CLICK=2,LEFT_CLICK=1;function checkClick(e,value){return'which'in e?e.which===value:e.button===value-1;}fabric.util.object.extend(fabric.Canvas.prototype,/** @lends fabric.Canvas.prototype */{/**
     * Map of cursor style values for each of the object controls
     * @private
     */cursorMap:['n-resize','ne-resize','e-resize','se-resize','s-resize','sw-resize','w-resize','nw-resize'],/**
     * Adds mouse listeners to canvas
     * @private
     */_initEventListeners:function(){// in case we initialized the class twice. This should not happen normally
// but in some kind of applications where the canvas element may be changed
// this is a workaround to having double listeners.
this.removeListeners();this._bindEvents();addListener(fabric.window,'resize',this._onResize);// mouse events
addListener(this.upperCanvasEl,'mousedown',this._onMouseDown);addListener(this.upperCanvasEl,'mousemove',this._onMouseMove);addListener(this.upperCanvasEl,'mouseout',this._onMouseOut);addListener(this.upperCanvasEl,'mouseenter',this._onMouseEnter);addListener(this.upperCanvasEl,'wheel',this._onMouseWheel);addListener(this.upperCanvasEl,'contextmenu',this._onContextMenu);// touch events
addListener(this.upperCanvasEl,'touchstart',this._onMouseDown,{passive:false});addListener(this.upperCanvasEl,'touchmove',this._onMouseMove,{passive:false});if(typeof eventjs!=='undefined'&&'add'in eventjs){eventjs.add(this.upperCanvasEl,'gesture',this._onGesture);eventjs.add(this.upperCanvasEl,'drag',this._onDrag);eventjs.add(this.upperCanvasEl,'orientation',this._onOrientationChange);eventjs.add(this.upperCanvasEl,'shake',this._onShake);eventjs.add(this.upperCanvasEl,'longpress',this._onLongPress);}},/**
     * @private
     */_bindEvents:function(){if(this.eventsBinded){// for any reason we pass here twice we do not want to bind events twice.
return;}this._onMouseDown=this._onMouseDown.bind(this);this._onMouseMove=this._onMouseMove.bind(this);this._onMouseUp=this._onMouseUp.bind(this);this._onResize=this._onResize.bind(this);this._onGesture=this._onGesture.bind(this);this._onDrag=this._onDrag.bind(this);this._onShake=this._onShake.bind(this);this._onLongPress=this._onLongPress.bind(this);this._onOrientationChange=this._onOrientationChange.bind(this);this._onMouseWheel=this._onMouseWheel.bind(this);this._onMouseOut=this._onMouseOut.bind(this);this._onMouseEnter=this._onMouseEnter.bind(this);this._onContextMenu=this._onContextMenu.bind(this);this.eventsBinded=true;},/**
     * Removes all event listeners
     */removeListeners:function(){removeListener(fabric.window,'resize',this._onResize);removeListener(this.upperCanvasEl,'mousedown',this._onMouseDown);removeListener(this.upperCanvasEl,'mousemove',this._onMouseMove);removeListener(this.upperCanvasEl,'mouseout',this._onMouseOut);removeListener(this.upperCanvasEl,'mouseenter',this._onMouseEnter);removeListener(this.upperCanvasEl,'wheel',this._onMouseWheel);removeListener(this.upperCanvasEl,'contextmenu',this._onContextMenu);removeListener(this.upperCanvasEl,'touchstart',this._onMouseDown);removeListener(this.upperCanvasEl,'touchmove',this._onMouseMove);if(typeof eventjs!=='undefined'&&'remove'in eventjs){eventjs.remove(this.upperCanvasEl,'gesture',this._onGesture);eventjs.remove(this.upperCanvasEl,'drag',this._onDrag);eventjs.remove(this.upperCanvasEl,'orientation',this._onOrientationChange);eventjs.remove(this.upperCanvasEl,'shake',this._onShake);eventjs.remove(this.upperCanvasEl,'longpress',this._onLongPress);}},/**
     * @private
     * @param {Event} [e] Event object fired on Event.js gesture
     * @param {Event} [self] Inner Event object
     */_onGesture:function(e,self){this.__onTransformGesture&&this.__onTransformGesture(e,self);},/**
     * @private
     * @param {Event} [e] Event object fired on Event.js drag
     * @param {Event} [self] Inner Event object
     */_onDrag:function(e,self){this.__onDrag&&this.__onDrag(e,self);},/**
     * @private
     * @param {Event} [e] Event object fired on wheel event
     */_onMouseWheel:function(e){this.__onMouseWheel(e);},/**
     * @private
     * @param {Event} e Event object fired on mousedown
     */_onMouseOut:function(e){var target=this._hoveredTarget;this.fire('mouse:out',{target:target,e:e});this._hoveredTarget=null;target&&target.fire('mouseout',{e:e});if(this._iTextInstances){this._iTextInstances.forEach(function(obj){if(obj.isEditing){obj.hiddenTextarea.focus();}});}},/**
     * @private
     * @param {Event} e Event object fired on mouseenter
     */_onMouseEnter:function(e){if(!this.findTarget(e)){this.fire('mouse:over',{target:null,e:e});this._hoveredTarget=null;}},/**
     * @private
     * @param {Event} [e] Event object fired on Event.js orientation change
     * @param {Event} [self] Inner Event object
     */_onOrientationChange:function(e,self){this.__onOrientationChange&&this.__onOrientationChange(e,self);},/**
     * @private
     * @param {Event} [e] Event object fired on Event.js shake
     * @param {Event} [self] Inner Event object
     */_onShake:function(e,self){this.__onShake&&this.__onShake(e,self);},/**
     * @private
     * @param {Event} [e] Event object fired on Event.js shake
     * @param {Event} [self] Inner Event object
     */_onLongPress:function(e,self){this.__onLongPress&&this.__onLongPress(e,self);},/**
     * @private
     * @param {Event} e Event object fired on mousedown
     */_onContextMenu:function(e){if(this.stopContextMenu){e.stopPropagation();e.preventDefault();}return false;},/**
     * @private
     * @param {Event} e Event object fired on mousedown
     */_onMouseDown:function(e){this.__onMouseDown(e);addListener(fabric.document,'touchend',this._onMouseUp,{passive:false});addListener(fabric.document,'touchmove',this._onMouseMove,{passive:false});removeListener(this.upperCanvasEl,'mousemove',this._onMouseMove);removeListener(this.upperCanvasEl,'touchmove',this._onMouseMove);if(e.type==='touchstart'){// Unbind mousedown to prevent double triggers from touch devices
removeListener(this.upperCanvasEl,'mousedown',this._onMouseDown);}else{addListener(fabric.document,'mouseup',this._onMouseUp);addListener(fabric.document,'mousemove',this._onMouseMove);}},/**
     * @private
     * @param {Event} e Event object fired on mouseup
     */_onMouseUp:function(e){this.__onMouseUp(e);removeListener(fabric.document,'mouseup',this._onMouseUp);removeListener(fabric.document,'touchend',this._onMouseUp);removeListener(fabric.document,'mousemove',this._onMouseMove);removeListener(fabric.document,'touchmove',this._onMouseMove);addListener(this.upperCanvasEl,'mousemove',this._onMouseMove);addListener(this.upperCanvasEl,'touchmove',this._onMouseMove,{passive:false});if(e.type==='touchend'){// Wait 400ms before rebinding mousedown to prevent double triggers
// from touch devices
var _this=this;setTimeout(function(){addListener(_this.upperCanvasEl,'mousedown',_this._onMouseDown);},400);}},/**
     * @private
     * @param {Event} e Event object fired on mousemove
     */_onMouseMove:function(e){!this.allowTouchScrolling&&e.preventDefault&&e.preventDefault();this.__onMouseMove(e);},/**
     * @private
     */_onResize:function(){this.calcOffset();},/**
     * Decides whether the canvas should be redrawn in mouseup and mousedown events.
     * @private
     * @param {Object} target
     * @param {Object} pointer
     */_shouldRender:function(target,pointer){var activeObject=this.getActiveGroup()||this.getActiveObject();if(activeObject&&activeObject.isEditing&&target===activeObject){// if we mouse up/down over a editing textbox a cursor change,
// there is no need to re render
return false;}return!!(target&&(target.isMoving||target!==activeObject)||!target&&!!activeObject||!target&&!activeObject&&!this._groupSelector||pointer&&this._previousPointer&&this.selection&&(pointer.x!==this._previousPointer.x||pointer.y!==this._previousPointer.y));},/**
     * Method that defines the actions when mouse is released on canvas.
     * The method resets the currentTransform parameters, store the image corner
     * position in the image object and render the canvas on top.
     * @private
     * @param {Event} e Event object fired on mouseup
     */__onMouseUp:function(e){var target;// if right/middle click just fire events and return
// target undefined will make the _handleEvent search the target
if(checkClick(e,RIGHT_CLICK)){if(this.fireRightClick){this._handleEvent(e,'up',target,RIGHT_CLICK);}return;}if(checkClick(e,MIDDLE_CLICK)){if(this.fireMiddleClick){this._handleEvent(e,'up',target,MIDDLE_CLICK);}return;}if(this.isDrawingMode&&this._isCurrentlyDrawing){this._onMouseUpInDrawingMode(e);return;}var searchTarget=true,transform=this._currentTransform,groupSelector=this._groupSelector,isClick=!groupSelector||groupSelector.left===0&&groupSelector.top===0;if(transform){this._finalizeCurrentTransform(e);searchTarget=!transform.actionPerformed;}target=searchTarget?this.findTarget(e,true):transform.target;var shouldRender=this._shouldRender(target,this.getPointer(e));if(target||!isClick){this._maybeGroupObjects(e);}else{// those are done by default on mouse up
// by _maybeGroupObjects, we are skipping it in case of no target find
this._groupSelector=null;this._currentTransform=null;}if(target){target.isMoving=false;}this._setCursorFromEvent(e,target);this._handleEvent(e,'up',target?target:null,LEFT_CLICK,isClick);target&&(target.__corner=0);shouldRender&&this.renderAll();},/**
     * @private
     * Handle event firing for target and subtargets
     * @param {Event} e event from mouse
     * @param {String} eventType event to fire (up, down or move)
     * @param {fabric.Object} targetObj receiving event
     * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right
     * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.
     */_handleEvent:function(e,eventType,targetObj,button,isClick){var target=typeof targetObj==='undefined'?this.findTarget(e):targetObj,targets=this.targets||[],options={e:e,target:target,subTargets:targets,button:button||LEFT_CLICK,isClick:isClick||false};this.fire('mouse:'+eventType,options);target&&target.fire('mouse'+eventType,options);for(var i=0;i<targets.length;i++){targets[i].fire('mouse'+eventType,options);}},/**
     * @private
     * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event
     */_finalizeCurrentTransform:function(e){var transform=this._currentTransform,target=transform.target;if(target._scaling){target._scaling=false;}target.setCoords();this._restoreOriginXY(target);if(transform.actionPerformed||this.stateful&&target.hasStateChanged()){this.fire('object:modified',{target:target,e:e});target.fire('modified',{e:e});}},/**
     * @private
     * @param {Object} target Object to restore
     */_restoreOriginXY:function(target){if(this._previousOriginX&&this._previousOriginY){var originPoint=target.translateToOriginPoint(target.getCenterPoint(),this._previousOriginX,this._previousOriginY);target.originX=this._previousOriginX;target.originY=this._previousOriginY;target.left=originPoint.x;target.top=originPoint.y;this._previousOriginX=null;this._previousOriginY=null;}},/**
     * @private
     * @param {Event} e Event object fired on mousedown
     */_onMouseDownInDrawingMode:function(e){this._isCurrentlyDrawing=true;this.discardActiveObject(e).renderAll();if(this.clipTo){fabric.util.clipContext(this,this.contextTop);}var pointer=this.getPointer(e);this.freeDrawingBrush.onMouseDown(pointer);this._handleEvent(e,'down');},/**
     * @private
     * @param {Event} e Event object fired on mousemove
     */_onMouseMoveInDrawingMode:function(e){if(this._isCurrentlyDrawing){var pointer=this.getPointer(e);this.freeDrawingBrush.onMouseMove(pointer);}this.setCursor(this.freeDrawingCursor);this._handleEvent(e,'move');},/**
     * @private
     * @param {Event} e Event object fired on mouseup
     */_onMouseUpInDrawingMode:function(e){this._isCurrentlyDrawing=false;if(this.clipTo){this.contextTop.restore();}this.freeDrawingBrush.onMouseUp();this._handleEvent(e,'up');},/**
     * Method that defines the actions when mouse is clicked on canvas.
     * The method inits the currentTransform parameters and renders all the
     * canvas so the current image can be placed on the top canvas and the rest
     * in on the container one.
     * @private
     * @param {Event} e Event object fired on mousedown
     */__onMouseDown:function(e){var target=this.findTarget(e);// if right click just fire events
if(checkClick(e,RIGHT_CLICK)){if(this.fireRightClick){this._handleEvent(e,'down',target?target:null,RIGHT_CLICK);}return;}if(checkClick(e,MIDDLE_CLICK)){if(this.fireMiddleClick){this._handleEvent(e,'down',target?target:null,MIDDLE_CLICK);}return;}if(this.isDrawingMode){this._onMouseDownInDrawingMode(e);return;}// ignore if some object is being transformed at this moment
if(this._currentTransform){return;}// save pointer for check in __onMouseUp event
var pointer=this.getPointer(e,true);this._previousPointer=pointer;var shouldRender=this._shouldRender(target,pointer),shouldGroup=this._shouldGroup(e,target);if(this._shouldClearSelection(e,target)){this.deactivateAllWithDispatch(e);}else if(shouldGroup){this._handleGrouping(e,target);target=this.getActiveGroup();}if(this.selection&&(!target||!target.selectable&&!target.isEditing)){this._groupSelector={ex:pointer.x,ey:pointer.y,top:0,left:0};}if(target){if(target.selectable&&(target.__corner||!shouldGroup)){this._beforeTransform(e,target);this._setupCurrentTransform(e,target);}var activeObject=this.getActiveObject();if(target!==this.getActiveGroup()&&target!==activeObject){this.deactivateAll();if(target.selectable){activeObject&&activeObject.fire('deselected',{e:e});this.setActiveObject(target,e);}}}this._handleEvent(e,'down',target?target:null);// we must renderAll so that we update the visuals
shouldRender&&this.renderAll();},/**
     * @private
     */_beforeTransform:function(e,target){this.stateful&&target.saveState();// determine if it's a drag or rotate case
if(target._findTargetCorner(this.getPointer(e))){this.onBeforeScaleRotate(target);}},/**
     * @private
     * @param {Object} target Object for that origin is set to center
     */_setOriginToCenter:function(target){this._previousOriginX=this._currentTransform.target.originX;this._previousOriginY=this._currentTransform.target.originY;var center=target.getCenterPoint();target.originX='center';target.originY='center';target.left=center.x;target.top=center.y;this._currentTransform.left=target.left;this._currentTransform.top=target.top;},/**
     * @private
     * @param {Object} target Object for that center is set to origin
     */_setCenterToOrigin:function(target){var originPoint=target.translateToOriginPoint(target.getCenterPoint(),this._previousOriginX,this._previousOriginY);target.originX=this._previousOriginX;target.originY=this._previousOriginY;target.left=originPoint.x;target.top=originPoint.y;this._previousOriginX=null;this._previousOriginY=null;},/**
     * Method that defines the actions when mouse is hovering the canvas.
     * The currentTransform parameter will definde whether the user is rotating/scaling/translating
     * an image or neither of them (only hovering). A group selection is also possible and would cancel
     * all any other type of action.
     * In case of an image transformation only the top canvas will be rendered.
     * @private
     * @param {Event} e Event object fired on mousemove
     */__onMouseMove:function(e){var target,pointer;if(this.isDrawingMode){this._onMouseMoveInDrawingMode(e);return;}if(typeof e.touches!=='undefined'&&e.touches.length>1){return;}var groupSelector=this._groupSelector;// We initially clicked in an empty area, so we draw a box for multiple selection
if(groupSelector){pointer=this.getPointer(e,true);groupSelector.left=pointer.x-groupSelector.ex;groupSelector.top=pointer.y-groupSelector.ey;this.renderTop();}else if(!this._currentTransform){target=this.findTarget(e);this._setCursorFromEvent(e,target);}else{this._transformObject(e);}this._handleEvent(e,'move',target?target:null);},/**
     * Method that defines actions when an Event Mouse Wheel
     * @param {Event} e Event object fired on mouseup
     */__onMouseWheel:function(e){this._handleEvent(e,'wheel');},/**
     * @private
     * @param {Event} e Event fired on mousemove
     */_transformObject:function(e){var pointer=this.getPointer(e),transform=this._currentTransform;transform.reset=false;transform.target.isMoving=true;transform.shiftKey=e.shiftKey;transform.altKey=e[this.centeredKey];this._beforeScaleTransform(e,transform);this._performTransformAction(e,transform,pointer);transform.actionPerformed&&this.renderAll();},/**
     * @private
     */_performTransformAction:function(e,transform,pointer){var x=pointer.x,y=pointer.y,target=transform.target,action=transform.action,actionPerformed=false;if(action==='rotate'){(actionPerformed=this._rotateObject(x,y))&&this._fire('rotating',target,e);}else if(action==='scale'){(actionPerformed=this._onScale(e,transform,x,y))&&this._fire('scaling',target,e);}else if(action==='scaleX'){(actionPerformed=this._scaleObject(x,y,'x'))&&this._fire('scaling',target,e);}else if(action==='scaleY'){(actionPerformed=this._scaleObject(x,y,'y'))&&this._fire('scaling',target,e);}else if(action==='skewX'){(actionPerformed=this._skewObject(x,y,'x'))&&this._fire('skewing',target,e);}else if(action==='skewY'){(actionPerformed=this._skewObject(x,y,'y'))&&this._fire('skewing',target,e);}else{actionPerformed=this._translateObject(x,y);if(actionPerformed){this._fire('moving',target,e);this.setCursor(target.moveCursor||this.moveCursor);}}transform.actionPerformed=transform.actionPerformed||actionPerformed;},/**
     * @private
     */_fire:function(eventName,target,e){this.fire('object:'+eventName,{target:target,e:e});target.fire(eventName,{e:e});},/**
     * @private
     */_beforeScaleTransform:function(e,transform){if(transform.action==='scale'||transform.action==='scaleX'||transform.action==='scaleY'){var centerTransform=this._shouldCenterTransform(transform.target);// Switch from a normal resize to center-based
if(centerTransform&&(transform.originX!=='center'||transform.originY!=='center')||// Switch from center-based resize to normal one
!centerTransform&&transform.originX==='center'&&transform.originY==='center'){this._resetCurrentTransform();transform.reset=true;}}},/**
     * @private
     * @param {Event} e Event object
     * @param {Object} transform current tranform
     * @param {Number} x mouse position x from origin
     * @param {Number} y mouse poistion y from origin
     * @return {Boolean} true if the scaling occurred
     */_onScale:function(e,transform,x,y){if((e[this.uniScaleKey]||this.uniScaleTransform)&&!transform.target.get('lockUniScaling')){transform.currentAction='scale';return this._scaleObject(x,y);}else{// Switch from a normal resize to proportional
if(!transform.reset&&transform.currentAction==='scale'){this._resetCurrentTransform();}transform.currentAction='scaleEqually';return this._scaleObject(x,y,'equally');}},/**
     * Sets the cursor depending on where the canvas is being hovered.
     * Note: very buggy in Opera
     * @param {Event} e Event object
     * @param {Object} target Object that the mouse is hovering, if so.
     */_setCursorFromEvent:function(e,target){if(!target){this.setCursor(this.defaultCursor);return false;}var hoverCursor=target.hoverCursor||this.hoverCursor,activeGroup=this.getActiveGroup(),// only show proper corner when group selection is not active
corner=target._findTargetCorner&&(!activeGroup||!activeGroup.contains(target))&&target._findTargetCorner(this.getPointer(e,true));if(!corner){this.setCursor(hoverCursor);}else{this._setCornerCursor(corner,target,e);}//actually unclear why it should return something
//is never evaluated
return true;},/**
     * @private
     */_setCornerCursor:function(corner,target,e){if(corner in cursorOffset){this.setCursor(this._getRotatedCornerCursor(corner,target,e));}else if(corner==='mtr'&&target.hasRotatingPoint){this.setCursor(this.rotationCursor);}else{this.setCursor(this.defaultCursor);return false;}},/**
     * @private
     */_getRotatedCornerCursor:function(corner,target,e){var n=Math.round(target.getAngle()%360/45);if(n<0){n+=8;// full circle ahead
}n+=cursorOffset[corner];if(e[this.altActionKey]&&cursorOffset[corner]%2===0){//if we are holding shift and we are on a mx corner...
n+=2;}// normalize n to be from 0 to 7
n%=8;return this.cursorMap[n];}});})();(function(){var min=Math.min,max=Math.max;fabric.util.object.extend(fabric.Canvas.prototype,/** @lends fabric.Canvas.prototype */{/**
     * @private
     * @param {Event} e Event object
     * @param {fabric.Object} target
     * @return {Boolean}
     */_shouldGroup:function(e,target){var activeObject=this.getActiveObject();return e[this.selectionKey]&&target&&target.selectable&&(this.getActiveGroup()||activeObject&&activeObject!==target)&&this.selection;},/**
     * @private
     * @param {Event} e Event object
     * @param {fabric.Object} target
     */_handleGrouping:function(e,target){var activeGroup=this.getActiveGroup();if(target===activeGroup){// if it's a group, find target again, using activeGroup objects
target=this.findTarget(e,true);// if even object is not found, bail out
if(!target){return;}}if(activeGroup){this._updateActiveGroup(target,e);}else{this._createActiveGroup(target,e);}if(this._activeGroup){this._activeGroup.saveCoords();}},/**
     * @private
     */_updateActiveGroup:function(target,e){var activeGroup=this.getActiveGroup();if(activeGroup.contains(target)){activeGroup.removeWithUpdate(target);target.set('active',false);if(activeGroup.size()===1){// remove group alltogether if after removal it only contains 1 object
this.discardActiveGroup(e);// activate last remaining object
this.setActiveObject(activeGroup.item(0),e);return;}}else{activeGroup.addWithUpdate(target);}this.fire('selection:created',{target:activeGroup,e:e});activeGroup.set('active',true);},/**
     * @private
     */_createActiveGroup:function(target,e){if(this._activeObject&&target!==this._activeObject){var group=this._createGroup(target);group.addWithUpdate();this.setActiveGroup(group,e);this._activeObject=null;this.fire('selection:created',{target:group,e:e});}target.set('active',true);},/**
     * @private
     * @param {Object} target
     */_createGroup:function(target){var objects=this.getObjects(),isActiveLower=objects.indexOf(this._activeObject)<objects.indexOf(target),groupObjects=isActiveLower?[this._activeObject,target]:[target,this._activeObject];this._activeObject.isEditing&&this._activeObject.exitEditing();return new fabric.Group(groupObjects,{canvas:this});},/**
     * @private
     * @param {Event} e mouse event
     */_groupSelectedObjects:function(e){var group=this._collectObjects();// do not create group for 1 element only
if(group.length===1){this.setActiveObject(group[0],e);}else if(group.length>1){group=new fabric.Group(group.reverse(),{canvas:this});group.addWithUpdate();this.setActiveGroup(group,e);group.saveCoords();this.fire('selection:created',{target:group,e:e});this.renderAll();}},/**
     * @private
     */_collectObjects:function(){var group=[],currentObject,x1=this._groupSelector.ex,y1=this._groupSelector.ey,x2=x1+this._groupSelector.left,y2=y1+this._groupSelector.top,selectionX1Y1=new fabric.Point(min(x1,x2),min(y1,y2)),selectionX2Y2=new fabric.Point(max(x1,x2),max(y1,y2)),isClick=x1===x2&&y1===y2;for(var i=this._objects.length;i--;){currentObject=this._objects[i];if(!currentObject||!currentObject.selectable||!currentObject.visible){continue;}if(currentObject.intersectsWithRect(selectionX1Y1,selectionX2Y2)||currentObject.isContainedWithinRect(selectionX1Y1,selectionX2Y2)||currentObject.containsPoint(selectionX1Y1)||currentObject.containsPoint(selectionX2Y2)){currentObject.set('active',true);group.push(currentObject);// only add one object if it's a click
if(isClick){break;}}}return group;},/**
     * @private
     */_maybeGroupObjects:function(e){if(this.selection&&this._groupSelector){this._groupSelectedObjects(e);}var activeGroup=this.getActiveGroup();if(activeGroup){activeGroup.setObjectsCoords().setCoords();activeGroup.isMoving=false;this.setCursor(this.defaultCursor);}// clear selection and current transformation
this._groupSelector=null;this._currentTransform=null;}});})();(function(){var supportQuality=fabric.StaticCanvas.supports('toDataURLWithQuality');fabric.util.object.extend(fabric.StaticCanvas.prototype,/** @lends fabric.StaticCanvas.prototype */{/**
     * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately
     * @param {Object} [options] Options object
     * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
     * @param {Number} [options.multiplier=1] Multiplier to scale by
     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format
     * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}
     * @example <caption>Generate jpeg dataURL with lower quality</caption>
     * var dataURL = canvas.toDataURL({
     *   format: 'jpeg',
     *   quality: 0.8
     * });
     * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>
     * var dataURL = canvas.toDataURL({
     *   format: 'png',
     *   left: 100,
     *   top: 100,
     *   width: 200,
     *   height: 200
     * });
     * @example <caption>Generate double scaled png dataURL</caption>
     * var dataURL = canvas.toDataURL({
     *   format: 'png',
     *   multiplier: 2
     * });
     */toDataURL:function(options){options||(options={});var format=options.format||'png',quality=options.quality||1,multiplier=options.multiplier||1,cropping={left:options.left||0,top:options.top||0,width:options.width||0,height:options.height||0};return this.__toDataURLWithMultiplier(format,quality,cropping,multiplier);},/**
     * @private
     */__toDataURLWithMultiplier:function(format,quality,cropping,multiplier){var origWidth=this.getWidth(),origHeight=this.getHeight(),scaledWidth=(cropping.width||this.getWidth())*multiplier,scaledHeight=(cropping.height||this.getHeight())*multiplier,zoom=this.getZoom(),newZoom=zoom*multiplier,vp=this.viewportTransform,translateX=(vp[4]-cropping.left)*multiplier,translateY=(vp[5]-cropping.top)*multiplier,newVp=[newZoom,0,0,newZoom,translateX,translateY],originalInteractive=this.interactive;this.viewportTransform=newVp;// setting interactive to false avoid exporting controls
this.interactive&&(this.interactive=false);if(origWidth!==scaledWidth||origHeight!==scaledHeight){// this.setDimensions is going to renderAll also;
this.setDimensions({width:scaledWidth,height:scaledHeight});}else{this.renderAll();}var data=this.__toDataURL(format,quality,cropping);originalInteractive&&(this.interactive=originalInteractive);this.viewportTransform=vp;//setDimensions with no option object is taking care of:
//this.width, this.height, this.renderAll()
this.setDimensions({width:origWidth,height:origHeight});return data;},/**
     * @private
     */__toDataURL:function(format,quality){var canvasEl=this.contextContainer.canvas;// to avoid common confusion https://github.com/kangax/fabric.js/issues/806
if(format==='jpg'){format='jpeg';}var data=supportQuality?canvasEl.toDataURL('image/'+format,quality):canvasEl.toDataURL('image/'+format);return data;},/**
     * Exports canvas element to a dataurl image (allowing to change image size via multiplier).
     * @deprecated since 1.0.13
     * @param {String} format (png|jpeg)
     * @param {Number} multiplier
     * @param {Number} quality (0..1)
     * @return {String}
     */toDataURLWithMultiplier:function(format,multiplier,quality){return this.toDataURL({format:format,multiplier:multiplier,quality:quality});}});})();fabric.util.object.extend(fabric.StaticCanvas.prototype,/** @lends fabric.StaticCanvas.prototype */{/**
   * Populates canvas with data from the specified dataless JSON.
   * JSON format must conform to the one of {@link fabric.Canvas#toDatalessJSON}
   * @deprecated since 1.2.2
   * @param {String|Object} json JSON string or object
   * @param {Function} callback Callback, invoked when json is parsed
   *                            and corresponding objects (e.g: {@link fabric.Image})
   *                            are initialized
   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.
   * @return {fabric.Canvas} instance
   * @chainable
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}
   */loadFromDatalessJSON:function(json,callback,reviver){return this.loadFromJSON(json,callback,reviver);},/**
   * Populates canvas with data from the specified JSON.
   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}
   * @param {String|Object} json JSON string or object
   * @param {Function} callback Callback, invoked when json is parsed
   *                            and corresponding objects (e.g: {@link fabric.Image})
   *                            are initialized
   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.
   * @return {fabric.Canvas} instance
   * @chainable
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}
   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}
   * @example <caption>loadFromJSON</caption>
   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));
   * @example <caption>loadFromJSON with reviver</caption>
   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {
   *   // `o` = json object
   *   // `object` = fabric.Object instance
   *   // ... do some stuff ...
   * });
   */loadFromJSON:function(json,callback,reviver){if(!json){return;}// serialize if it wasn't already
var serialized=typeof json==='string'?JSON.parse(json):fabric.util.object.clone(json);var _this=this,renderOnAddRemove=this.renderOnAddRemove;this.renderOnAddRemove=false;this._enlivenObjects(serialized.objects,function(enlivenedObjects){_this.clear();_this._setBgOverlay(serialized,function(){enlivenedObjects.forEach(function(obj,index){// we splice the array just in case some custom classes restored from JSON
// will add more object to canvas at canvas init.
_this.insertAt(obj,index);});_this.renderOnAddRemove=renderOnAddRemove;// remove parts i cannot set as options
delete serialized.objects;delete serialized.backgroundImage;delete serialized.overlayImage;delete serialized.background;delete serialized.overlay;// this._initOptions does too many things to just
// call it. Normally loading an Object from JSON
// create the Object instance. Here the Canvas is
// already an instance and we are just loading things over it
_this._setOptions(serialized);_this.renderAll();callback&&callback();});},reviver);return this;},/**
   * @private
   * @param {Object} serialized Object with background and overlay information
   * @param {Function} callback Invoked after all background and overlay images/patterns loaded
   */_setBgOverlay:function(serialized,callback){var loaded={backgroundColor:false,overlayColor:false,backgroundImage:false,overlayImage:false};if(!serialized.backgroundImage&&!serialized.overlayImage&&!serialized.background&&!serialized.overlay){callback&&callback();return;}var cbIfLoaded=function(){if(loaded.backgroundImage&&loaded.overlayImage&&loaded.backgroundColor&&loaded.overlayColor){callback&&callback();}};this.__setBgOverlay('backgroundImage',serialized.backgroundImage,loaded,cbIfLoaded);this.__setBgOverlay('overlayImage',serialized.overlayImage,loaded,cbIfLoaded);this.__setBgOverlay('backgroundColor',serialized.background,loaded,cbIfLoaded);this.__setBgOverlay('overlayColor',serialized.overlay,loaded,cbIfLoaded);},/**
   * @private
   * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)
   * @param {(Object|String)} value Value to set
   * @param {Object} loaded Set loaded property to true if property is set
   * @param {Object} callback Callback function to invoke after property is set
   */__setBgOverlay:function(property,value,loaded,callback){var _this=this;if(!value){loaded[property]=true;callback&&callback();return;}if(property==='backgroundImage'||property==='overlayImage'){fabric.util.enlivenObjects([value],function(enlivedObject){_this[property]=enlivedObject[0];loaded[property]=true;callback&&callback();});}else{this['set'+fabric.util.string.capitalize(property,true)](value,function(){loaded[property]=true;callback&&callback();});}},/**
   * @private
   * @param {Array} objects
   * @param {Function} callback
   * @param {Function} [reviver]
   */_enlivenObjects:function(objects,callback,reviver){if(!objects||objects.length===0){callback&&callback([]);return;}fabric.util.enlivenObjects(objects,function(enlivenedObjects){callback&&callback(enlivenedObjects);},null,reviver);},/**
   * @private
   * @param {String} format
   * @param {Function} callback
   */_toDataURL:function(format,callback){this.clone(function(clone){callback(clone.toDataURL(format));});},/**
   * @private
   * @param {String} format
   * @param {Number} multiplier
   * @param {Function} callback
   */_toDataURLWithMultiplier:function(format,multiplier,callback){this.clone(function(clone){callback(clone.toDataURLWithMultiplier(format,multiplier));});},/**
   * Clones canvas instance
   * @param {Object} [callback] Receives cloned instance as a first argument
   * @param {Array} [properties] Array of properties to include in the cloned canvas and children
   */clone:function(callback,properties){var data=JSON.stringify(this.toJSON(properties));this.cloneWithoutData(function(clone){clone.loadFromJSON(data,function(){callback&&callback(clone);});});},/**
   * Clones canvas instance without cloning existing data.
   * This essentially copies canvas dimensions, clipping properties, etc.
   * but leaves data empty (so that you can populate it with your own)
   * @param {Object} [callback] Receives cloned instance as a first argument
   */cloneWithoutData:function(callback){var el=fabric.document.createElement('canvas');el.width=this.getWidth();el.height=this.getHeight();var clone=new fabric.Canvas(el);clone.clipTo=this.clipTo;if(this.backgroundImage){clone.setBackgroundImage(this.backgroundImage.src,function(){clone.renderAll();callback&&callback(clone);});clone.backgroundImageOpacity=this.backgroundImageOpacity;clone.backgroundImageStretch=this.backgroundImageStretch;}else{callback&&callback(clone);}}});(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,clone=fabric.util.object.clone,toFixed=fabric.util.toFixed,capitalize=fabric.util.string.capitalize,degreesToRadians=fabric.util.degreesToRadians,supportsLineDash=fabric.StaticCanvas.supports('setLineDash'),objectCaching=!fabric.isLikelyNode,ALIASING_LIMIT=2;if(fabric.Object){return;}/**
   * Root object class from which all 2d shape classes inherit from
   * @class fabric.Object
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}
   * @see {@link fabric.Object#initialize} for constructor definition
   *
   * @fires added
   * @fires removed
   *
   * @fires selected
   * @fires deselected
   * @fires modified
   * @fires rotating
   * @fires scaling
   * @fires moving
   * @fires skewing
   *
   * @fires mousedown
   * @fires mouseup
   * @fires mouseover
   * @fires mouseout
   * @fires mousewheel
   */fabric.Object=fabric.util.createClass(fabric.CommonMethods,/** @lends fabric.Object.prototype */{/**
     * Retrieves object's {@link fabric.Object#clipTo|clipping function}
     * @method getClipTo
     * @memberOf fabric.Object.prototype
     * @return {Function}
     *//**
     * Sets object's {@link fabric.Object#clipTo|clipping function}
     * @method setClipTo
     * @memberOf fabric.Object.prototype
     * @param {Function} clipTo Clipping function
     * @return {fabric.Object} thisArg
     * @chainable
     *//**
     * Retrieves object's {@link fabric.Object#transformMatrix|transformMatrix}
     * @method getTransformMatrix
     * @memberOf fabric.Object.prototype
     * @return {Array} transformMatrix
     *//**
     * Sets object's {@link fabric.Object#transformMatrix|transformMatrix}
     * @method setTransformMatrix
     * @memberOf fabric.Object.prototype
     * @param {Array} transformMatrix
     * @return {fabric.Object} thisArg
     * @chainable
     *//**
     * Retrieves object's {@link fabric.Object#visible|visible} state
     * @method getVisible
     * @memberOf fabric.Object.prototype
     * @return {Boolean} True if visible
     *//**
     * Sets object's {@link fabric.Object#visible|visible} state
     * @method setVisible
     * @memberOf fabric.Object.prototype
     * @param {Boolean} value visible value
     * @return {fabric.Object} thisArg
     * @chainable
     *//**
     * Retrieves object's {@link fabric.Object#shadow|shadow}
     * @method getShadow
     * @memberOf fabric.Object.prototype
     * @return {Object} Shadow instance
     *//**
     * Retrieves object's {@link fabric.Object#stroke|stroke}
     * @method getStroke
     * @memberOf fabric.Object.prototype
     * @return {String} stroke value
     *//**
     * Sets object's {@link fabric.Object#stroke|stroke}
     * @method setStroke
     * @memberOf fabric.Object.prototype
     * @param {String} value stroke value
     * @return {fabric.Object} thisArg
     * @chainable
     *//**
     * Retrieves object's {@link fabric.Object#strokeWidth|strokeWidth}
     * @method getStrokeWidth
     * @memberOf fabric.Object.prototype
     * @return {Number} strokeWidth value
     *//**
     * Sets object's {@link fabric.Object#strokeWidth|strokeWidth}
     * @method setStrokeWidth
     * @memberOf fabric.Object.prototype
     * @param {Number} value strokeWidth value
     * @return {fabric.Object} thisArg
     * @chainable
     *//**
     * Retrieves object's {@link fabric.Object#originX|originX}
     * @method getOriginX
     * @memberOf fabric.Object.prototype
     * @return {String} originX value
     *//**
     * Sets object's {@link fabric.Object#originX|originX}
     * @method setOriginX
     * @memberOf fabric.Object.prototype
     * @param {String} value originX value
     * @return {fabric.Object} thisArg
     * @chainable
     *//**
     * Retrieves object's {@link fabric.Object#originY|originY}
     * @method getOriginY
     * @memberOf fabric.Object.prototype
     * @return {String} originY value
     *//**
     * Sets object's {@link fabric.Object#originY|originY}
     * @method setOriginY
     * @memberOf fabric.Object.prototype
     * @param {String} value originY value
     * @return {fabric.Object} thisArg
     * @chainable
     *//**
     * Retrieves object's {@link fabric.Object#fill|fill}
     * @method getFill
     * @memberOf fabric.Object.prototype
     * @return {String} Fill value
     *//**
     * Sets object's {@link fabric.Object#fill|fill}
     * @method setFill
     * @memberOf fabric.Object.prototype
     * @param {String} value Fill value
     * @return {fabric.Object} thisArg
     * @chainable
     *//**
     * Retrieves object's {@link fabric.Object#opacity|opacity}
     * @method getOpacity
     * @memberOf fabric.Object.prototype
     * @return {Number} Opacity value (0-1)
     *//**
     * Sets object's {@link fabric.Object#opacity|opacity}
     * @method setOpacity
     * @memberOf fabric.Object.prototype
     * @param {Number} value Opacity value (0-1)
     * @return {fabric.Object} thisArg
     * @chainable
     *//**
     * Retrieves object's {@link fabric.Object#angle|angle} (in degrees)
     * @method getAngle
     * @memberOf fabric.Object.prototype
     * @return {Number}
     *//**
     * Retrieves object's {@link fabric.Object#top|top position}
     * @method getTop
     * @memberOf fabric.Object.prototype
     * @return {Number} Top value (in pixels)
     *//**
     * Sets object's {@link fabric.Object#top|top position}
     * @method setTop
     * @memberOf fabric.Object.prototype
     * @param {Number} value Top value (in pixels)
     * @return {fabric.Object} thisArg
     * @chainable
     *//**
     * Retrieves object's {@link fabric.Object#left|left position}
     * @method getLeft
     * @memberOf fabric.Object.prototype
     * @return {Number} Left value (in pixels)
     *//**
     * Sets object's {@link fabric.Object#left|left position}
     * @method setLeft
     * @memberOf fabric.Object.prototype
     * @param {Number} value Left value (in pixels)
     * @return {fabric.Object} thisArg
     * @chainable
     *//**
     * Retrieves object's {@link fabric.Object#scaleX|scaleX} value
     * @method getScaleX
     * @memberOf fabric.Object.prototype
     * @return {Number} scaleX value
     *//**
     * Sets object's {@link fabric.Object#scaleX|scaleX} value
     * @method setScaleX
     * @memberOf fabric.Object.prototype
     * @param {Number} value scaleX value
     * @return {fabric.Object} thisArg
     * @chainable
     *//**
     * Retrieves object's {@link fabric.Object#scaleY|scaleY} value
     * @method getScaleY
     * @memberOf fabric.Object.prototype
     * @return {Number} scaleY value
     *//**
     * Sets object's {@link fabric.Object#scaleY|scaleY} value
     * @method setScaleY
     * @memberOf fabric.Object.prototype
     * @param {Number} value scaleY value
     * @return {fabric.Object} thisArg
     * @chainable
     *//**
     * Retrieves object's {@link fabric.Object#flipX|flipX} value
     * @method getFlipX
     * @memberOf fabric.Object.prototype
     * @return {Boolean} flipX value
     *//**
     * Sets object's {@link fabric.Object#flipX|flipX} value
     * @method setFlipX
     * @memberOf fabric.Object.prototype
     * @param {Boolean} value flipX value
     * @return {fabric.Object} thisArg
     * @chainable
     *//**
     * Retrieves object's {@link fabric.Object#flipY|flipY} value
     * @method getFlipY
     * @memberOf fabric.Object.prototype
     * @return {Boolean} flipY value
     *//**
     * Sets object's {@link fabric.Object#flipY|flipY} value
     * @method setFlipY
     * @memberOf fabric.Object.prototype
     * @param {Boolean} value flipY value
     * @return {fabric.Object} thisArg
     * @chainable
     *//**
     * Type of an object (rect, circle, path, etc.).
     * Note that this property is meant to be read-only and not meant to be modified.
     * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.
     * @type String
     * @default
     */type:'object',/**
     * Horizontal origin of transformation of an object (one of "left", "right", "center")
     * See http://jsfiddle.net/1ow02gea/40/ on how originX/originY affect objects in groups
     * @type String
     * @default
     */originX:'left',/**
     * Vertical origin of transformation of an object (one of "top", "bottom", "center")
     * See http://jsfiddle.net/1ow02gea/40/ on how originX/originY affect objects in groups
     * @type String
     * @default
     */originY:'top',/**
     * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}
     * @type Number
     * @default
     */top:0,/**
     * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}
     * @type Number
     * @default
     */left:0,/**
     * Object width
     * @type Number
     * @default
     */width:0,/**
     * Object height
     * @type Number
     * @default
     */height:0,/**
     * Object scale factor (horizontal)
     * @type Number
     * @default
     */scaleX:1,/**
     * Object scale factor (vertical)
     * @type Number
     * @default
     */scaleY:1,/**
     * When true, an object is rendered as flipped horizontally
     * @type Boolean
     * @default
     */flipX:false,/**
     * When true, an object is rendered as flipped vertically
     * @type Boolean
     * @default
     */flipY:false,/**
     * Opacity of an object
     * @type Number
     * @default
     */opacity:1,/**
     * Angle of rotation of an object (in degrees)
     * @type Number
     * @default
     */angle:0,/**
     * Angle of skew on x axes of an object (in degrees)
     * @type Number
     * @default
     */skewX:0,/**
     * Angle of skew on y axes of an object (in degrees)
     * @type Number
     * @default
     */skewY:0,/**
     * Size of object's controlling corners (in pixels)
     * @type Number
     * @default
     */cornerSize:13,/**
     * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)
     * @type Boolean
     * @default
     */transparentCorners:true,/**
     * Default cursor value used when hovering over this object on canvas
     * @type String
     * @default
     */hoverCursor:null,/**
     * Default cursor value used when moving this object on canvas
     * @type String
     * @default
     */moveCursor:null,/**
     * Padding between object and its controlling borders (in pixels)
     * @type Number
     * @default
     */padding:0,/**
     * Color of controlling borders of an object (when it's active)
     * @type String
     * @default
     */borderColor:'rgba(102,153,255,0.75)',/**
     * Array specifying dash pattern of an object's borders (hasBorder must be true)
     * @since 1.6.2
     * @type Array
     */borderDashArray:null,/**
     * Color of controlling corners of an object (when it's active)
     * @type String
     * @default
     */cornerColor:'rgba(102,153,255,0.5)',/**
     * Color of controlling corners of an object (when it's active and transparentCorners false)
     * @since 1.6.2
     * @type String
     * @default
     */cornerStrokeColor:null,/**
     * Specify style of control, 'rect' or 'circle'
     * @since 1.6.2
     * @type String
     */cornerStyle:'rect',/**
     * Array specifying dash pattern of an object's control (hasBorder must be true)
     * @since 1.6.2
     * @type Array
     */cornerDashArray:null,/**
     * When true, this object will use center point as the origin of transformation
     * when being scaled via the controls.
     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
     * @since 1.3.4
     * @type Boolean
     * @default
     */centeredScaling:false,/**
     * When true, this object will use center point as the origin of transformation
     * when being rotated via the controls.
     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
     * @since 1.3.4
     * @type Boolean
     * @default
     */centeredRotation:true,/**
     * Color of object's fill
     * @type String
     * @default
     */fill:'rgb(0,0,0)',/**
     * Fill rule used to fill an object
     * accepted values are nonzero, evenodd
     * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)
     * @type String
     * @default
     */fillRule:'nonzero',/**
     * Composite rule used for canvas globalCompositeOperation
     * @type String
     * @default
     */globalCompositeOperation:'source-over',/**
     * Background color of an object.
     * @type String
     * @default
     */backgroundColor:'',/**
     * Selection Background color of an object. colored layer behind the object when it is active.
     * does not mix good with globalCompositeOperation methods.
     * @type String
     * @default
     */selectionBackgroundColor:'',/**
     * When defined, an object is rendered via stroke and this property specifies its color
     * @type String
     * @default
     */stroke:null,/**
     * Width of a stroke used to render this object
     * @type Number
     * @default
     */strokeWidth:1,/**
     * Array specifying dash pattern of an object's stroke (stroke must be defined)
     * @type Array
     */strokeDashArray:null,/**
     * Line endings style of an object's stroke (one of "butt", "round", "square")
     * @type String
     * @default
     */strokeLineCap:'butt',/**
     * Corner style of an object's stroke (one of "bevil", "round", "miter")
     * @type String
     * @default
     */strokeLineJoin:'miter',/**
     * Maximum miter length (used for strokeLineJoin = "miter") of an object's stroke
     * @type Number
     * @default
     */strokeMiterLimit:10,/**
     * Shadow object representing shadow of this shape
     * @type fabric.Shadow
     * @default
     */shadow:null,/**
     * Opacity of object's controlling borders when object is active and moving
     * @type Number
     * @default
     */borderOpacityWhenMoving:0.4,/**
     * Scale factor of object's controlling borders
     * @type Number
     * @default
     */borderScaleFactor:1,/**
     * Transform matrix (similar to SVG's transform matrix)
     * @type Array
     */transformMatrix:null,/**
     * Minimum allowed scale value of an object
     * @type Number
     * @default
     */minScaleLimit:0.01,/**
     * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).
     * But events still fire on it.
     * @type Boolean
     * @default
     */selectable:true,/**
     * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4
     * @type Boolean
     * @default
     */evented:true,/**
     * When set to `false`, an object is not rendered on canvas
     * @type Boolean
     * @default
     */visible:true,/**
     * When set to `false`, object's controls are not displayed and can not be used to manipulate object
     * @type Boolean
     * @default
     */hasControls:true,/**
     * When set to `false`, object's controlling borders are not rendered
     * @type Boolean
     * @default
     */hasBorders:true,/**
     * When set to `false`, object's controlling rotating point will not be visible or selectable
     * @type Boolean
     * @default
     */hasRotatingPoint:true,/**
     * Offset for object's controlling rotating point (when enabled via `hasRotatingPoint`)
     * @type Number
     * @default
     */rotatingPointOffset:40,/**
     * When set to `true`, objects are "found" on canvas on per-pixel basis rather than according to bounding box
     * @type Boolean
     * @default
     */perPixelTargetFind:false,/**
     * When `false`, default object's values are not included in its serialization
     * @type Boolean
     * @default
     */includeDefaultValues:true,/**
     * Function that determines clipping of an object (context is passed as a first argument)
     * Note that context origin is at the object's center point (not left/top corner)
     * @type Function
     */clipTo:null,/**
     * When `true`, object horizontal movement is locked
     * @type Boolean
     * @default
     */lockMovementX:false,/**
     * When `true`, object vertical movement is locked
     * @type Boolean
     * @default
     */lockMovementY:false,/**
     * When `true`, object rotation is locked
     * @type Boolean
     * @default
     */lockRotation:false,/**
     * When `true`, object horizontal scaling is locked
     * @type Boolean
     * @default
     */lockScalingX:false,/**
     * When `true`, object vertical scaling is locked
     * @type Boolean
     * @default
     */lockScalingY:false,/**
     * When `true`, object non-uniform scaling is locked
     * @type Boolean
     * @default
     */lockUniScaling:false,/**
     * When `true`, object horizontal skewing is locked
     * @type Boolean
     * @default
     */lockSkewingX:false,/**
     * When `true`, object vertical skewing is locked
     * @type Boolean
     * @default
     */lockSkewingY:false,/**
     * When `true`, object cannot be flipped by scaling into negative values
     * @type Boolean
     * @default
     */lockScalingFlip:false,/**
     * When `true`, object is not exported in SVG or OBJECT/JSON
     * since 1.6.3
     * @type Boolean
     * @default
     */excludeFromExport:false,/**
     * When `true`, object is cached on an additional canvas.
     * default to true
     * since 1.7.0
     * @type Boolean
     * @default true
     */objectCaching:objectCaching,/**
     * When `true`, object properties are checked for cache invalidation. In some particular
     * situation you may want this to be disabled ( spray brush, very big pathgroups, groups)
     * or if your application does not allow you to modify properties for groups child you want
     * to disable it for groups.
     * default to false
     * since 1.7.0
     * @type Boolean
     * @default false
     */statefullCache:false,/**
     * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled
     * too much and will be redrawn with correct details at the end of scaling.
     * this setting is performance and application dependant.
     * default to true
     * since 1.7.0
     * @type Boolean
     * @default true
     */noScaleCache:true,/**
     * When set to `true`, object's cache will be rerendered next render call.
     * since 1.7.0
     * @type Boolean
     * @default true
     */dirty:true,/**
     * List of properties to consider when checking if state
     * of an object is changed (fabric.Object#hasStateChanged)
     * as well as for history (undo/redo) purposes
     * @type Array
     */stateProperties:('top left width height scaleX scaleY flipX flipY originX originY transformMatrix '+'stroke strokeWidth strokeDashArray strokeLineCap strokeLineJoin strokeMiterLimit '+'angle opacity fill globalCompositeOperation shadow clipTo visible backgroundColor '+'skewX skewY fillRule').split(' '),/**
     * List of properties to consider when checking if cache needs refresh
     * @type Array
     */cacheProperties:('fill stroke strokeWidth strokeDashArray width height'+' strokeLineCap strokeLineJoin strokeMiterLimit backgroundColor').split(' '),/**
     * Constructor
     * @param {Object} [options] Options object
     */initialize:function(options){options=options||{};if(options){this.setOptions(options);}},/**
     * Create a the canvas used to keep the cached copy of the object
     * @private
     */_createCacheCanvas:function(){this._cacheProperties={};this._cacheCanvas=fabric.document.createElement('canvas');this._cacheContext=this._cacheCanvas.getContext('2d');this._updateCacheCanvas();},/**
     * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal
     * and each side do not cross fabric.cacheSideLimit
     * those numbers are configurable so that you can get as much detail as you want
     * making bargain with performances.
     * @param {Object} dims
     * @param {Object} dims.width width of canvas
     * @param {Object} dims.height height of canvas
     * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache
     * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache
     * @return {Object}.width width of canvas
     * @return {Object}.height height of canvas
     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
     */_limitCacheSize:function(dims){var perfLimitSizeTotal=fabric.perfLimitSizeTotal,maximumSide=fabric.cacheSideLimit,width=dims.width,height=dims.height,ar=width/height,limitedDims=fabric.util.limitDimsByArea(ar,perfLimitSizeTotal,maximumSide),capValue=fabric.util.capValue,max=fabric.maxCacheSideLimit,min=fabric.minCacheSideLimit,x=capValue(min,limitedDims.x,max),y=capValue(min,limitedDims.y,max);if(width>x){dims.zoomX/=width/x;dims.width=x;}else if(width<min){dims.width=min;}if(height>y){dims.zoomY/=height/y;dims.height=y;}else if(height<min){dims.height=min;}return dims;},/**
     * Return the dimension and the zoom level needed to create a cache canvas
     * big enough to host the object to be cached.
     * @private
     * @return {Object}.width width of canvas
     * @return {Object}.height height of canvas
     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
     */_getCacheCanvasDimensions:function(){var zoom=this.canvas&&this.canvas.getZoom()||1,objectScale=this.getObjectScaling(),dim=this._getNonTransformedDimensions(),retina=this.canvas&&this.canvas._isRetinaScaling()?fabric.devicePixelRatio:1,zoomX=objectScale.scaleX*zoom*retina,zoomY=objectScale.scaleY*zoom*retina,width=dim.x*zoomX,height=dim.y*zoomY;return{width:width+ALIASING_LIMIT,height:height+ALIASING_LIMIT,zoomX:zoomX,zoomY:zoomY};},/**
     * Update width and height of the canvas for cache
     * returns true or false if canvas needed resize.
     * @private
     * @return {Boolean} true if the canvas has been resized
     */_updateCacheCanvas:function(){if(this.noScaleCache&&this.canvas&&this.canvas._currentTransform){var action=this.canvas._currentTransform.action;if(action.slice&&action.slice(0,5)==='scale'){return false;}}var dims=this._limitCacheSize(this._getCacheCanvasDimensions()),minCacheSize=fabric.minCacheSideLimit,width=dims.width,height=dims.height,zoomX=dims.zoomX,zoomY=dims.zoomY,dimensionsChanged=width!==this.cacheWidth||height!==this.cacheHeight,zoomChanged=this.zoomX!==zoomX||this.zoomY!==zoomY,shouldRedraw=dimensionsChanged||zoomChanged,additionalWidth=0,additionalHeight=0,shouldResizeCanvas=false;if(dimensionsChanged){var canvasWidth=this._cacheCanvas.width,canvasHeight=this._cacheCanvas.height,sizeGrowing=width>canvasWidth||height>canvasHeight,sizeShrinking=(width<canvasWidth*0.9||height<canvasHeight*0.9)&&canvasWidth>minCacheSize&&canvasHeight>minCacheSize;shouldResizeCanvas=sizeGrowing||sizeShrinking;if(sizeGrowing){additionalWidth=width*0.1&~1;additionalHeight=height*0.1&~1;}}if(shouldRedraw){if(shouldResizeCanvas){this._cacheCanvas.width=Math.max(Math.ceil(width)+additionalWidth,minCacheSize);this._cacheCanvas.height=Math.max(Math.ceil(height)+additionalHeight,minCacheSize);this.cacheTranslationX=(width+additionalWidth)/2;this.cacheTranslationY=(height+additionalHeight)/2;}else{this._cacheContext.setTransform(1,0,0,1,0,0);this._cacheContext.clearRect(0,0,this._cacheCanvas.width,this._cacheCanvas.height);}this.cacheWidth=width;this.cacheHeight=height;this._cacheContext.translate(this.cacheTranslationX,this.cacheTranslationY);this._cacheContext.scale(zoomX,zoomY);this.zoomX=zoomX;this.zoomY=zoomY;return true;}return false;},/**
     * Sets object's properties from options
     * @param {Object} [options] Options object
     */setOptions:function(options){this._setOptions(options);this._initGradient(options.fill,'fill');this._initGradient(options.stroke,'stroke');this._initClipping(options);this._initPattern(options.fill,'fill');this._initPattern(options.stroke,'stroke');},/**
     * Transforms context when rendering an object
     * @param {CanvasRenderingContext2D} ctx Context
     * @param {Boolean} fromLeft When true, context is transformed to object's top/left corner. This is used when rendering text on Node
     */transform:function(ctx,fromLeft){if(this.group&&!this.group._transformDone&&this.group===this.canvas._activeGroup){this.group.transform(ctx);}var center=fromLeft?this._getLeftTopCoords():this.getCenterPoint();ctx.translate(center.x,center.y);this.angle&&ctx.rotate(degreesToRadians(this.angle));ctx.scale(this.scaleX*(this.flipX?-1:1),this.scaleY*(this.flipY?-1:1));this.skewX&&ctx.transform(1,0,Math.tan(degreesToRadians(this.skewX)),1,0,0);this.skewY&&ctx.transform(1,Math.tan(degreesToRadians(this.skewY)),0,1,0,0);},/**
     * Returns an object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */toObject:function(propertiesToInclude){var NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS,object={type:this.type,originX:this.originX,originY:this.originY,left:toFixed(this.left,NUM_FRACTION_DIGITS),top:toFixed(this.top,NUM_FRACTION_DIGITS),width:toFixed(this.width,NUM_FRACTION_DIGITS),height:toFixed(this.height,NUM_FRACTION_DIGITS),fill:this.fill&&this.fill.toObject?this.fill.toObject():this.fill,stroke:this.stroke&&this.stroke.toObject?this.stroke.toObject():this.stroke,strokeWidth:toFixed(this.strokeWidth,NUM_FRACTION_DIGITS),strokeDashArray:this.strokeDashArray?this.strokeDashArray.concat():this.strokeDashArray,strokeLineCap:this.strokeLineCap,strokeLineJoin:this.strokeLineJoin,strokeMiterLimit:toFixed(this.strokeMiterLimit,NUM_FRACTION_DIGITS),scaleX:toFixed(this.scaleX,NUM_FRACTION_DIGITS),scaleY:toFixed(this.scaleY,NUM_FRACTION_DIGITS),angle:toFixed(this.getAngle(),NUM_FRACTION_DIGITS),flipX:this.flipX,flipY:this.flipY,opacity:toFixed(this.opacity,NUM_FRACTION_DIGITS),shadow:this.shadow&&this.shadow.toObject?this.shadow.toObject():this.shadow,visible:this.visible,clipTo:this.clipTo&&String(this.clipTo),backgroundColor:this.backgroundColor,fillRule:this.fillRule,globalCompositeOperation:this.globalCompositeOperation,transformMatrix:this.transformMatrix?this.transformMatrix.concat():null,skewX:toFixed(this.skewX,NUM_FRACTION_DIGITS),skewY:toFixed(this.skewY,NUM_FRACTION_DIGITS)};fabric.util.populateWithProperties(this,object,propertiesToInclude);if(!this.includeDefaultValues){object=this._removeDefaultValues(object);}return object;},/**
     * Returns (dataless) object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */toDatalessObject:function(propertiesToInclude){// will be overwritten by subclasses
return this.toObject(propertiesToInclude);},/**
     * @private
     * @param {Object} object
     */_removeDefaultValues:function(object){var prototype=fabric.util.getKlass(object.type).prototype,stateProperties=prototype.stateProperties;stateProperties.forEach(function(prop){if(object[prop]===prototype[prop]){delete object[prop];}var isArray=Object.prototype.toString.call(object[prop])==='[object Array]'&&Object.prototype.toString.call(prototype[prop])==='[object Array]';// basically a check for [] === []
if(isArray&&object[prop].length===0&&prototype[prop].length===0){delete object[prop];}});return object;},/**
     * Returns a string representation of an instance
     * @return {String}
     */toString:function(){return'#<fabric.'+capitalize(this.type)+'>';},/**
     * Return the object scale factor counting also the group scaling
     * @return {Object} object with scaleX and scaleY properties
     */getObjectScaling:function(){var scaleX=this.scaleX,scaleY=this.scaleY;if(this.group){var scaling=this.group.getObjectScaling();scaleX*=scaling.scaleX;scaleY*=scaling.scaleY;}return{scaleX:scaleX,scaleY:scaleY};},/**
     * @private
     * @param {String} key
     * @param {*} value
     * @return {fabric.Object} thisArg
     */_set:function(key,value){var shouldConstrainValue=key==='scaleX'||key==='scaleY';if(shouldConstrainValue){value=this._constrainScale(value);}if(key==='scaleX'&&value<0){this.flipX=!this.flipX;value*=-1;}else if(key==='scaleY'&&value<0){this.flipY=!this.flipY;value*=-1;}else if(key==='shadow'&&value&&!(value instanceof fabric.Shadow)){value=new fabric.Shadow(value);}else if(key==='dirty'&&this.group){this.group.set('dirty',value);}this[key]=value;if(this.cacheProperties.indexOf(key)>-1){if(this.group){this.group.set('dirty',true);}this.dirty=true;}if(this.group&&this.stateProperties.indexOf(key)>-1){this.group.set('dirty',true);}if(key==='width'||key==='height'){this.minScaleLimit=Math.min(0.1,1/Math.max(this.width,this.height));}return this;},/**
     * This callback function is called by the parent group of an object every
     * time a non-delegated property changes on the group. It is passed the key
     * and value as parameters. Not adding in this function's signature to avoid
     * Travis build error about unused variables.
     */setOnGroup:function(){// implemented by sub-classes, as needed.
},/**
     * Sets sourcePath of an object
     * @param {String} value Value to set sourcePath to
     * @return {fabric.Object} thisArg
     * @chainable
     */setSourcePath:function(value){this.sourcePath=value;return this;},/**
     * Retrieves viewportTransform from Object's canvas if possible
     * @method getViewportTransform
     * @memberOf fabric.Object.prototype
     * @return {Boolean}
     */getViewportTransform:function(){if(this.canvas&&this.canvas.viewportTransform){return this.canvas.viewportTransform;}return fabric.iMatrix.concat();},/*
     * @private
     * return if the object would be visible in rendering
     * @memberOf fabric.Object.prototype
     * @return {Boolean}
     */isNotVisible:function(){return this.opacity===0||this.width===0&&this.height===0||!this.visible;},/**
     * Renders an object on a specified context
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Boolean} [noTransform] When true, context is not transformed
     */render:function(ctx,noTransform){// do not render if width/height are zeros or object is not visible
if(this.isNotVisible()){return;}if(this.canvas&&this.canvas.skipOffscreen&&!this.group&&!this.isOnScreen()){return;}ctx.save();//setup fill rule for current object
this._setupCompositeOperation(ctx);this.drawSelectionBackground(ctx);if(!noTransform){this.transform(ctx);}this._setOpacity(ctx);this._setShadow(ctx);if(this.transformMatrix){ctx.transform.apply(ctx,this.transformMatrix);}this.clipTo&&fabric.util.clipContext(this,ctx);if(this.shouldCache(noTransform)){if(!this._cacheCanvas){this._createCacheCanvas();}if(this.isCacheDirty(noTransform)){this.statefullCache&&this.saveState({propertySet:'cacheProperties'});this.drawObject(this._cacheContext,noTransform);this.dirty=false;}this.drawCacheOnCanvas(ctx);}else{this.dirty=false;this.drawObject(ctx,noTransform);if(noTransform&&this.objectCaching&&this.statefullCache){this.saveState({propertySet:'cacheProperties'});}}this.clipTo&&ctx.restore();ctx.restore();},/**
     * When returns `true`, force the object to have its own cache, even if it is inside a group
     * it may be needed when your object behave in a particular way on the cache and always needs
     * its own isolated canvas to render correctly.
     * This function is created to be subclassed by custom classes.
     * since 1.7.12
     * @type function
     * @return false
     */needsItsOwnCache:function(){return false;},/**
     * Decide if the object should cache or not.
     * objectCaching is a global flag, wins over everything
     * needsItsOwnCache should be used when the object drawing method requires
     * a cache step. None of the fabric classes requires it.
     * Generally you do not cache objects in groups because the group outside is cached.
     * @param {Boolean} noTransform if rendereing in pathGroup, caching is not supported at object level
     * @return {Boolean}
     */shouldCache:function(noTransform){return!noTransform&&this.objectCaching&&(!this.group||this.needsItsOwnCache()||!this.group.isCaching());},/**
     * Check if this object or a child object will cast a shadow
     * used by Group.shouldCache to know if child has a shadow recursively
     * @return {Boolean}
     */willDrawShadow:function(){return!!this.shadow&&(this.shadow.offsetX!==0||this.shadow.offsetY!==0);},/**
     * Execute the drawing operation for an object on a specified context
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Boolean} [noTransform] When true, context is not transformed
     */drawObject:function(ctx,noTransform){this._renderBackground(ctx);this._setStrokeStyles(ctx);this._setFillStyles(ctx);this._render(ctx,noTransform);},/**
     * Paint the cached copy of the object on the target context.
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */drawCacheOnCanvas:function(ctx){ctx.scale(1/this.zoomX,1/this.zoomY);ctx.drawImage(this._cacheCanvas,-this.cacheTranslationX,-this.cacheTranslationY);},/**
     * Check if cache is dirty
     * @param {Boolean} skipCanvas skip canvas checks because this object is painted
     * on parent canvas.
     */isCacheDirty:function(skipCanvas){if(this.isNotVisible()){return false;}if(this._cacheCanvas&&!skipCanvas&&this._updateCacheCanvas()){// in this case the context is already cleared.
return true;}else{if(this.dirty||this.statefullCache&&this.hasStateChanged('cacheProperties')){if(this._cacheCanvas&&!skipCanvas){var width=this.cacheWidth/this.zoomX;var height=this.cacheHeight/this.zoomY;this._cacheContext.clearRect(-width/2,-height/2,width,height);}return true;}}return false;},/**
     * Draws a background for the object big as its untrasformed dimensions
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderBackground:function(ctx){if(!this.backgroundColor){return;}var dim=this._getNonTransformedDimensions();ctx.fillStyle=this.backgroundColor;ctx.fillRect(-dim.x/2,-dim.y/2,dim.x,dim.y);// if there is background color no other shadows
// should be casted
this._removeShadow(ctx);},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_setOpacity:function(ctx){ctx.globalAlpha*=this.opacity;},_setStrokeStyles:function(ctx){if(this.stroke){ctx.lineWidth=this.strokeWidth;ctx.lineCap=this.strokeLineCap;ctx.lineJoin=this.strokeLineJoin;ctx.miterLimit=this.strokeMiterLimit;ctx.strokeStyle=this.stroke.toLive?this.stroke.toLive(ctx,this):this.stroke;}},_setFillStyles:function(ctx){if(this.fill){ctx.fillStyle=this.fill.toLive?this.fill.toLive(ctx,this):this.fill;}},/**
     * @private
     * Sets line dash
     * @param {CanvasRenderingContext2D} ctx Context to set the dash line on
     * @param {Array} dashArray array representing dashes
     * @param {Function} alternative function to call if browaser does not support lineDash
     */_setLineDash:function(ctx,dashArray,alternative){if(!dashArray){return;}// Spec requires the concatenation of two copies the dash list when the number of elements is odd
if(1&dashArray.length){dashArray.push.apply(dashArray,dashArray);}if(supportsLineDash){ctx.setLineDash(dashArray);}else{alternative&&alternative(ctx);}},/**
     * Renders controls and borders for the object
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderControls:function(ctx){if(!this.active||this.group&&this.group!==this.canvas.getActiveGroup()){return;}var vpt=this.getViewportTransform(),matrix=this.calcTransformMatrix(),options;matrix=fabric.util.multiplyTransformMatrices(vpt,matrix);options=fabric.util.qrDecompose(matrix);ctx.save();ctx.translate(options.translateX,options.translateY);ctx.lineWidth=1*this.borderScaleFactor;if(!this.group){ctx.globalAlpha=this.isMoving?this.borderOpacityWhenMoving:1;}if(this.group&&this.group===this.canvas.getActiveGroup()){ctx.rotate(degreesToRadians(options.angle));this.drawBordersInGroup(ctx,options);}else{ctx.rotate(degreesToRadians(this.angle));this.drawBorders(ctx);}this.drawControls(ctx);ctx.restore();},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_setShadow:function(ctx){if(!this.shadow){return;}var multX=this.canvas&&this.canvas.viewportTransform[0]||1,multY=this.canvas&&this.canvas.viewportTransform[3]||1,scaling=this.getObjectScaling();if(this.canvas&&this.canvas._isRetinaScaling()){multX*=fabric.devicePixelRatio;multY*=fabric.devicePixelRatio;}ctx.shadowColor=this.shadow.color;ctx.shadowBlur=this.shadow.blur*(multX+multY)*(scaling.scaleX+scaling.scaleY)/4;ctx.shadowOffsetX=this.shadow.offsetX*multX*scaling.scaleX;ctx.shadowOffsetY=this.shadow.offsetY*multY*scaling.scaleY;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_removeShadow:function(ctx){if(!this.shadow){return;}ctx.shadowColor='';ctx.shadowBlur=ctx.shadowOffsetX=ctx.shadowOffsetY=0;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Object} filler fabric.Pattern or fabric.Gradient
     */_applyPatternGradientTransform:function(ctx,filler){if(!filler.toLive){return;}var transform=filler.gradientTransform||filler.patternTransform;if(transform){ctx.transform.apply(ctx,transform);}var offsetX=-this.width/2+filler.offsetX||0,offsetY=-this.height/2+filler.offsetY||0;ctx.translate(offsetX,offsetY);},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderFill:function(ctx){if(!this.fill){return;}ctx.save();this._applyPatternGradientTransform(ctx,this.fill);if(this.fillRule==='evenodd'){ctx.fill('evenodd');}else{ctx.fill();}ctx.restore();},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderStroke:function(ctx){if(!this.stroke||this.strokeWidth===0){return;}if(this.shadow&&!this.shadow.affectStroke){this._removeShadow(ctx);}ctx.save();this._setLineDash(ctx,this.strokeDashArray,this._renderDashedStroke);this._applyPatternGradientTransform(ctx,this.stroke);ctx.stroke();ctx.restore();},/**
     * Clones an instance, some objects are async, so using callback method will work for every object.
     * Using the direct return does not work for images and groups.
     * @param {Function} callback Callback is invoked with a clone as a first argument
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {fabric.Object} clone of an instance
     */clone:function(callback,propertiesToInclude){if(this.constructor.fromObject){return this.constructor.fromObject(this.toObject(propertiesToInclude),callback);}return new fabric.Object(this.toObject(propertiesToInclude));},/**
     * Creates an instance of fabric.Image out of an object
     * @param {Function} callback callback, invoked with an instance as a first argument
     * @param {Object} [options] for clone as image, passed to toDataURL
     * @param {Boolean} [options.enableRetinaScaling] enable retina scaling for the cloned image
     * @return {fabric.Object} thisArg
     */cloneAsImage:function(callback,options){var dataUrl=this.toDataURL(options);fabric.util.loadImage(dataUrl,function(img){if(callback){callback(new fabric.Image(img));}});return this;},/**
     * Converts an object into a data-url-like string
     * @param {Object} options Options object
     * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
     * @param {Number} [options.multiplier=1] Multiplier to scale by
     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
     * @param {Boolean} [options.enableRetina] Enable retina scaling for clone image. Introduce in 1.6.4
     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format
     */toDataURL:function(options){options||(options={});var el=fabric.util.createCanvasElement(),boundingRect=this.getBoundingRect();el.width=boundingRect.width;el.height=boundingRect.height;fabric.util.wrapElement(el,'div');var canvas=new fabric.StaticCanvas(el,{enableRetinaScaling:options.enableRetinaScaling});// to avoid common confusion https://github.com/kangax/fabric.js/issues/806
if(options.format==='jpg'){options.format='jpeg';}if(options.format==='jpeg'){canvas.backgroundColor='#fff';}var origParams={active:this.get('active'),left:this.getLeft(),top:this.getTop()};this.set('active',false);this.setPositionByOrigin(new fabric.Point(canvas.getWidth()/2,canvas.getHeight()/2),'center','center');var originalCanvas=this.canvas;canvas.add(this);var data=canvas.toDataURL(options);this.set(origParams).setCoords();this.canvas=originalCanvas;canvas.dispose();canvas=null;return data;},/**
     * Returns true if specified type is identical to the type of an instance
     * @param {String} type Type to check against
     * @return {Boolean}
     */isType:function(type){return this.type===type;},/**
     * Returns complexity of an instance
     * @return {Number} complexity of this instance (is 1 unless subclassed)
     */complexity:function(){return 1;},/**
     * Returns a JSON representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} JSON
     */toJSON:function(propertiesToInclude){// delegate, not alias
return this.toObject(propertiesToInclude);},/**
     * Sets gradient (fill or stroke) of an object
     * <b>Backwards incompatibility note:</b> This method was named "setGradientFill" until v1.1.0
     * @param {String} property Property name 'stroke' or 'fill'
     * @param {Object} [options] Options object
     * @param {String} [options.type] Type of gradient 'radial' or 'linear'
     * @param {Number} [options.x1=0] x-coordinate of start point
     * @param {Number} [options.y1=0] y-coordinate of start point
     * @param {Number} [options.x2=0] x-coordinate of end point
     * @param {Number} [options.y2=0] y-coordinate of end point
     * @param {Number} [options.r1=0] Radius of start point (only for radial gradients)
     * @param {Number} [options.r2=0] Radius of end point (only for radial gradients)
     * @param {Object} [options.colorStops] Color stops object eg. {0: 'ff0000', 1: '000000'}
     * @param {Object} [options.gradientTransform] transforMatrix for gradient
     * @return {fabric.Object} thisArg
     * @chainable
     * @see {@link http://jsfiddle.net/fabricjs/58y8b/|jsFiddle demo}
     * @example <caption>Set linear gradient</caption>
     * object.setGradient('fill', {
     *   type: 'linear',
     *   x1: -object.width / 2,
     *   y1: 0,
     *   x2: object.width / 2,
     *   y2: 0,
     *   colorStops: {
     *     0: 'red',
     *     0.5: '#005555',
     *     1: 'rgba(0,0,255,0.5)'
     *   }
     * });
     * canvas.renderAll();
     * @example <caption>Set radial gradient</caption>
     * object.setGradient('fill', {
     *   type: 'radial',
     *   x1: 0,
     *   y1: 0,
     *   x2: 0,
     *   y2: 0,
     *   r1: object.width / 2,
     *   r2: 10,
     *   colorStops: {
     *     0: 'red',
     *     0.5: '#005555',
     *     1: 'rgba(0,0,255,0.5)'
     *   }
     * });
     * canvas.renderAll();
     */setGradient:function(property,options){options||(options={});var gradient={colorStops:[]};gradient.type=options.type||(options.r1||options.r2?'radial':'linear');gradient.coords={x1:options.x1,y1:options.y1,x2:options.x2,y2:options.y2};if(options.r1||options.r2){gradient.coords.r1=options.r1;gradient.coords.r2=options.r2;}gradient.gradientTransform=options.gradientTransform;fabric.Gradient.prototype.addColorStop.call(gradient,options.colorStops);return this.set(property,fabric.Gradient.forObject(this,gradient));},/**
     * Sets pattern fill of an object
     * @param {Object} options Options object
     * @param {(String|HTMLImageElement)} options.source Pattern source
     * @param {String} [options.repeat=repeat] Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)
     * @param {Number} [options.offsetX=0] Pattern horizontal offset from object's left/top corner
     * @param {Number} [options.offsetY=0] Pattern vertical offset from object's left/top corner
     * @return {fabric.Object} thisArg
     * @chainable
     * @see {@link http://jsfiddle.net/fabricjs/QT3pa/|jsFiddle demo}
     * @example <caption>Set pattern</caption>
     * fabric.util.loadImage('http://fabricjs.com/assets/escheresque_ste.png', function(img) {
     *   object.setPatternFill({
     *     source: img,
     *     repeat: 'repeat'
     *   });
     *   canvas.renderAll();
     * });
     */setPatternFill:function(options){return this.set('fill',new fabric.Pattern(options));},/**
     * Sets {@link fabric.Object#shadow|shadow} of an object
     * @param {Object|String} [options] Options object or string (e.g. "2px 2px 10px rgba(0,0,0,0.2)")
     * @param {String} [options.color=rgb(0,0,0)] Shadow color
     * @param {Number} [options.blur=0] Shadow blur
     * @param {Number} [options.offsetX=0] Shadow horizontal offset
     * @param {Number} [options.offsetY=0] Shadow vertical offset
     * @return {fabric.Object} thisArg
     * @chainable
     * @see {@link http://jsfiddle.net/fabricjs/7gvJG/|jsFiddle demo}
     * @example <caption>Set shadow with string notation</caption>
     * object.setShadow('2px 2px 10px rgba(0,0,0,0.2)');
     * canvas.renderAll();
     * @example <caption>Set shadow with object notation</caption>
     * object.setShadow({
     *   color: 'red',
     *   blur: 10,
     *   offsetX: 20,
     *   offsetY: 20
     * });
     * canvas.renderAll();
     */setShadow:function(options){return this.set('shadow',options?new fabric.Shadow(options):null);},/**
     * Sets "color" of an instance (alias of `set('fill', &hellip;)`)
     * @param {String} color Color value
     * @return {fabric.Object} thisArg
     * @chainable
     */setColor:function(color){this.set('fill',color);return this;},/**
     * Sets "angle" of an instance
     * @param {Number} angle Angle value (in degrees)
     * @return {fabric.Object} thisArg
     * @chainable
     */setAngle:function(angle){var shouldCenterOrigin=(this.originX!=='center'||this.originY!=='center')&&this.centeredRotation;if(shouldCenterOrigin){this._setOriginToCenter();}this.set('angle',angle);if(shouldCenterOrigin){this._resetOrigin();}return this;},/**
     * Centers object horizontally on canvas to which it was added last.
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */centerH:function(){this.canvas&&this.canvas.centerObjectH(this);return this;},/**
     * Centers object horizontally on current viewport of canvas to which it was added last.
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */viewportCenterH:function(){this.canvas&&this.canvas.viewportCenterObjectH(this);return this;},/**
     * Centers object vertically on canvas to which it was added last.
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */centerV:function(){this.canvas&&this.canvas.centerObjectV(this);return this;},/**
     * Centers object vertically on current viewport of canvas to which it was added last.
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */viewportCenterV:function(){this.canvas&&this.canvas.viewportCenterObjectV(this);return this;},/**
     * Centers object vertically and horizontally on canvas to which is was added last
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */center:function(){this.canvas&&this.canvas.centerObject(this);return this;},/**
     * Centers object on current viewport of canvas to which it was added last.
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */viewportCenter:function(){this.canvas&&this.canvas.viewportCenterObject(this);return this;},/**
     * Removes object from canvas to which it was added last
     * @return {fabric.Object} thisArg
     * @chainable
     */remove:function(){if(this.canvas){if(this.group&&this.group===this.canvas._activeGroup){this.group.remove(this);}this.canvas.remove(this);}return this;},/**
     * Returns coordinates of a pointer relative to an object
     * @param {Event} e Event to operate upon
     * @param {Object} [pointer] Pointer to operate upon (instead of event)
     * @return {Object} Coordinates of a pointer (x, y)
     */getLocalPointer:function(e,pointer){pointer=pointer||this.canvas.getPointer(e);var pClicked=new fabric.Point(pointer.x,pointer.y),objectLeftTop=this._getLeftTopCoords();if(this.angle){pClicked=fabric.util.rotatePoint(pClicked,objectLeftTop,degreesToRadians(-this.angle));}return{x:pClicked.x-objectLeftTop.x,y:pClicked.y-objectLeftTop.y};},/**
     * Sets canvas globalCompositeOperation for specific object
     * custom composition operation for the particular object can be specifed using globalCompositeOperation property
     * @param {CanvasRenderingContext2D} ctx Rendering canvas context
     */_setupCompositeOperation:function(ctx){if(this.globalCompositeOperation){ctx.globalCompositeOperation=this.globalCompositeOperation;}}});fabric.util.createAccessors(fabric.Object);/**
   * Alias for {@link fabric.Object.prototype.setAngle}
   * @alias rotate -> setAngle
   * @memberOf fabric.Object
   */fabric.Object.prototype.rotate=fabric.Object.prototype.setAngle;extend(fabric.Object.prototype,fabric.Observable);/**
   * Defines the number of fraction digits to use when serializing object values.
   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.
   * @static
   * @memberOf fabric.Object
   * @constant
   * @type Number
   */fabric.Object.NUM_FRACTION_DIGITS=2;fabric.Object._fromObject=function(className,object,callback,forceAsync,extraParam){var klass=fabric[className];object=clone(object,true);if(forceAsync){fabric.util.enlivenPatterns([object.fill,object.stroke],function(patterns){if(typeof patterns[0]!=='undefined'){object.fill=patterns[0];}if(typeof patterns[1]!=='undefined'){object.stroke=patterns[1];}var instance=extraParam?new klass(object[extraParam],object):new klass(object);callback&&callback(instance);});}else{var instance=extraParam?new klass(object[extraParam],object):new klass(object);callback&&callback(instance);return instance;}};/**
   * Unique id used internally when creating SVG elements
   * @static
   * @memberOf fabric.Object
   * @type Number
   */fabric.Object.__uid=0;})( true?exports:this);(function(){var degreesToRadians=fabric.util.degreesToRadians,originXOffset={left:-0.5,center:0,right:0.5},originYOffset={top:-0.5,center:0,bottom:0.5};fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{/**
     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)
     * @param {fabric.Point} point The point which corresponds to the originX and originY params
     * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'
     * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'
     * @return {fabric.Point}
     */translateToGivenOrigin:function(point,fromOriginX,fromOriginY,toOriginX,toOriginY){var x=point.x,y=point.y,offsetX,offsetY,dim;if(typeof fromOriginX==='string'){fromOriginX=originXOffset[fromOriginX];}else{fromOriginX-=0.5;}if(typeof toOriginX==='string'){toOriginX=originXOffset[toOriginX];}else{toOriginX-=0.5;}offsetX=toOriginX-fromOriginX;if(typeof fromOriginY==='string'){fromOriginY=originYOffset[fromOriginY];}else{fromOriginY-=0.5;}if(typeof toOriginY==='string'){toOriginY=originYOffset[toOriginY];}else{toOriginY-=0.5;}offsetY=toOriginY-fromOriginY;if(offsetX||offsetY){dim=this._getTransformedDimensions();x=point.x+offsetX*dim.x;y=point.y+offsetY*dim.y;}return new fabric.Point(x,y);},/**
     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)
     * @param {fabric.Point} point The point which corresponds to the originX and originY params
     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
     * @return {fabric.Point}
     */translateToCenterPoint:function(point,originX,originY){var p=this.translateToGivenOrigin(point,originX,originY,'center','center');if(this.angle){return fabric.util.rotatePoint(p,point,degreesToRadians(this.angle));}return p;},/**
     * Translates the coordinates from center to origin coordinates (based on the object's dimensions)
     * @param {fabric.Point} center The point which corresponds to center of the object
     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
     * @return {fabric.Point}
     */translateToOriginPoint:function(center,originX,originY){var p=this.translateToGivenOrigin(center,'center','center',originX,originY);if(this.angle){return fabric.util.rotatePoint(p,center,degreesToRadians(this.angle));}return p;},/**
     * Returns the real center coordinates of the object
     * @return {fabric.Point}
     */getCenterPoint:function(){var leftTop=new fabric.Point(this.left,this.top);return this.translateToCenterPoint(leftTop,this.originX,this.originY);},/**
     * Returns the coordinates of the object based on center coordinates
     * @param {fabric.Point} point The point which corresponds to the originX and originY params
     * @return {fabric.Point}
     */// getOriginPoint: function(center) {
//   return this.translateToOriginPoint(center, this.originX, this.originY);
// },
/**
     * Returns the coordinates of the object as if it has a different origin
     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
     * @return {fabric.Point}
     */getPointByOrigin:function(originX,originY){var center=this.getCenterPoint();return this.translateToOriginPoint(center,originX,originY);},/**
     * Returns the point in local coordinates
     * @param {fabric.Point} point The point relative to the global coordinate system
     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
     * @return {fabric.Point}
     */toLocalPoint:function(point,originX,originY){var center=this.getCenterPoint(),p,p2;if(typeof originX!=='undefined'&&typeof originY!=='undefined'){p=this.translateToGivenOrigin(center,'center','center',originX,originY);}else{p=new fabric.Point(this.left,this.top);}p2=new fabric.Point(point.x,point.y);if(this.angle){p2=fabric.util.rotatePoint(p2,center,-degreesToRadians(this.angle));}return p2.subtractEquals(p);},/**
     * Returns the point in global coordinates
     * @param {fabric.Point} The point relative to the local coordinate system
     * @return {fabric.Point}
     */// toGlobalPoint: function(point) {
//   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));
// },
/**
     * Sets the position of the object taking into consideration the object's origin
     * @param {fabric.Point} pos The new position of the object
     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
     * @return {void}
     */setPositionByOrigin:function(pos,originX,originY){var center=this.translateToCenterPoint(pos,originX,originY),position=this.translateToOriginPoint(center,this.originX,this.originY);this.set('left',position.x);this.set('top',position.y);},/**
     * @param {String} to One of 'left', 'center', 'right'
     */adjustPosition:function(to){var angle=degreesToRadians(this.angle),hypotFull=this.getWidth(),xFull=Math.cos(angle)*hypotFull,yFull=Math.sin(angle)*hypotFull,offsetFrom,offsetTo;//TODO: this function does not consider mixed situation like top, center.
if(typeof this.originX==='string'){offsetFrom=originXOffset[this.originX];}else{offsetFrom=this.originX-0.5;}if(typeof to==='string'){offsetTo=originXOffset[to];}else{offsetTo=to-0.5;}this.left+=xFull*(offsetTo-offsetFrom);this.top+=yFull*(offsetTo-offsetFrom);this.setCoords();this.originX=to;},/**
     * Sets the origin/position of the object to it's center point
     * @private
     * @return {void}
     */_setOriginToCenter:function(){this._originalOriginX=this.originX;this._originalOriginY=this.originY;var center=this.getCenterPoint();this.originX='center';this.originY='center';this.left=center.x;this.top=center.y;},/**
     * Resets the origin/position of the object to it's original origin
     * @private
     * @return {void}
     */_resetOrigin:function(){var originPoint=this.translateToOriginPoint(this.getCenterPoint(),this._originalOriginX,this._originalOriginY);this.originX=this._originalOriginX;this.originY=this._originalOriginY;this.left=originPoint.x;this.top=originPoint.y;this._originalOriginX=null;this._originalOriginY=null;},/**
     * @private
     */_getLeftTopCoords:function(){return this.translateToOriginPoint(this.getCenterPoint(),'left','top');},/**
    * Callback; invoked right before object is about to go from active to inactive
    */onDeselect:function(){/* NOOP */}});})();(function(){function getCoords(coords){return[new fabric.Point(coords.tl.x,coords.tl.y),new fabric.Point(coords.tr.x,coords.tr.y),new fabric.Point(coords.br.x,coords.br.y),new fabric.Point(coords.bl.x,coords.bl.y)];}var degreesToRadians=fabric.util.degreesToRadians,multiplyMatrices=fabric.util.multiplyTransformMatrices;fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{/**
     * Describe object's corner position in canvas element coordinates.
     * properties are tl,mt,tr,ml,mr,bl,mb,br,mtr for the main controls.
     * each property is an object with x, y and corner.
     * The `corner` property contains in a similar manner the 4 points of the
     * interactive area of the corner.
     * The coordinates depends from this properties: width, height, scaleX, scaleY
     * skewX, skewY, angle, strokeWidth, viewportTransform, top, left, padding.
     * The coordinates get updated with @method setCoords.
     * You can calculate them without updating with @method calcCoords;
     * @memberOf fabric.Object.prototype
     */oCoords:null,/**
     * Describe object's corner position in canvas object absolute coordinates
     * properties are tl,tr,bl,br and describe the four main corner.
     * each property is an object with x, y, instance of Fabric.Point.
     * The coordinates depends from this properties: width, height, scaleX, scaleY
     * skewX, skewY, angle, strokeWidth, top, left.
     * Those coordinates are usefull to understand where an object is. They get updated
     * with oCoords but they do not need to be updated when zoom or panning change.
     * The coordinates get updated with @method setCoords.
     * You can calculate them without updating with @method calcCoords(true);
     * @memberOf fabric.Object.prototype
     */aCoords:null,/**
     * return correct set of coordinates for intersection
     */getCoords:function(absolute,calculate){if(!this.oCoords){this.setCoords();}var coords=absolute?this.aCoords:this.oCoords;return getCoords(calculate?this.calcCoords(absolute):coords);},/**
     * Checks if object intersects with an area formed by 2 points
     * @param {Object} pointTL top-left point of area
     * @param {Object} pointBR bottom-right point of area
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if object intersects with an area formed by 2 points
     */intersectsWithRect:function(pointTL,pointBR,absolute,calculate){var coords=this.getCoords(absolute,calculate),intersection=fabric.Intersection.intersectPolygonRectangle(coords,pointTL,pointBR);return intersection.status==='Intersection';},/**
     * Checks if object intersects with another object
     * @param {Object} other Object to test
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if object intersects with another object
     */intersectsWithObject:function(other,absolute,calculate){var intersection=fabric.Intersection.intersectPolygonPolygon(this.getCoords(absolute,calculate),other.getCoords(absolute,calculate));return intersection.status==='Intersection'||other.isContainedWithinObject(this,absolute,calculate)||this.isContainedWithinObject(other,absolute,calculate);},/**
     * Checks if object is fully contained within area of another object
     * @param {Object} other Object to test
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if object is fully contained within area of another object
     */isContainedWithinObject:function(other,absolute,calculate){var points=this.getCoords(absolute,calculate),i=0,lines=other._getImageLines(calculate?other.calcCoords(absolute):absolute?other.aCoords:other.oCoords);for(;i<4;i++){if(!other.containsPoint(points[i],lines)){return false;}}return true;},/**
     * Checks if object is fully contained within area formed by 2 points
     * @param {Object} pointTL top-left point of area
     * @param {Object} pointBR bottom-right point of area
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if object is fully contained within area formed by 2 points
     */isContainedWithinRect:function(pointTL,pointBR,absolute,calculate){var boundingRect=this.getBoundingRect(absolute,calculate);return boundingRect.left>=pointTL.x&&boundingRect.left+boundingRect.width<=pointBR.x&&boundingRect.top>=pointTL.y&&boundingRect.top+boundingRect.height<=pointBR.y;},/**
     * Checks if point is inside the object
     * @param {fabric.Point} point Point to check against
     * @param {Object} [lines] object returned from @method _getImageLines
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if point is inside the object
     */containsPoint:function(point,lines,absolute,calculate){var lines=lines||this._getImageLines(calculate?this.calcCoords(absolute):absolute?this.aCoords:this.oCoords),xPoints=this._findCrossPoints(point,lines);// if xPoints is odd then point is inside the object
return xPoints!==0&&xPoints%2===1;},/**
     * Checks if object is contained within the canvas with current viewportTransform
     * the check is done stopping at first point that appear on screen
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if object is fully contained within canvas
     */isOnScreen:function(calculate){if(!this.canvas){return false;}var pointTL=this.canvas.vptCoords.tl,pointBR=this.canvas.vptCoords.br;var points=this.getCoords(true,calculate),point;for(var i=0;i<4;i++){point=points[i];if(point.x<=pointBR.x&&point.x>=pointTL.x&&point.y<=pointBR.y&&point.y>=pointTL.y){return true;}}// no points on screen, check intersection with absolute coordinates
if(this.intersectsWithRect(pointTL,pointBR,true)){return true;}// worst case scenario the object is so big that contanins the screen
var centerPoint={x:(pointTL.x+pointBR.x)/2,y:(pointTL.y+pointBR.y)/2};if(this.containsPoint(centerPoint,null,true)){return true;}return false;},/**
     * Method that returns an object with the object edges in it, given the coordinates of the corners
     * @private
     * @param {Object} oCoords Coordinates of the object corners
     */_getImageLines:function(oCoords){return{topline:{o:oCoords.tl,d:oCoords.tr},rightline:{o:oCoords.tr,d:oCoords.br},bottomline:{o:oCoords.br,d:oCoords.bl},leftline:{o:oCoords.bl,d:oCoords.tl}};},/**
     * Helper method to determine how many cross points are between the 4 object edges
     * and the horizontal line determined by a point on canvas
     * @private
     * @param {fabric.Point} point Point to check
     * @param {Object} lines Coordinates of the object being evaluated
     */// remove yi, not used but left code here just in case.
_findCrossPoints:function(point,lines){var b1,b2,a1,a2,xi,// yi,
xcount=0,iLine;for(var lineKey in lines){iLine=lines[lineKey];// optimisation 1: line below point. no cross
if(iLine.o.y<point.y&&iLine.d.y<point.y){continue;}// optimisation 2: line above point. no cross
if(iLine.o.y>=point.y&&iLine.d.y>=point.y){continue;}// optimisation 3: vertical line case
if(iLine.o.x===iLine.d.x&&iLine.o.x>=point.x){xi=iLine.o.x;// yi = point.y;
}// calculate the intersection point
else{b1=0;b2=(iLine.d.y-iLine.o.y)/(iLine.d.x-iLine.o.x);a1=point.y-b1*point.x;a2=iLine.o.y-b2*iLine.o.x;xi=-(a1-a2)/(b1-b2);// yi = a1 + b1 * xi;
}// dont count xi < point.x cases
if(xi>=point.x){xcount+=1;}// optimisation 4: specific for square images
if(xcount===2){break;}}return xcount;},/**
     * Returns width of an object's bounding rectangle
     * @deprecated since 1.0.4
     * @return {Number} width value
     */getBoundingRectWidth:function(){return this.getBoundingRect().width;},/**
     * Returns height of an object's bounding rectangle
     * @deprecated since 1.0.4
     * @return {Number} height value
     */getBoundingRectHeight:function(){return this.getBoundingRect().height;},/**
     * Returns coordinates of object's bounding rectangle (left, top, width, height)
     * the box is intented as aligned to axis of canvas.
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Object} Object with left, top, width, height properties
     */getBoundingRect:function(absolute,calculate){var coords=this.getCoords(absolute,calculate);return fabric.util.makeBoundingBoxFromPoints(coords);},/**
     * Returns width of an object bounding box counting transformations
     * @return {Number} width value
     */getWidth:function(){return this._getTransformedDimensions().x;},/**
     * Returns height of an object bounding box counting transformations
     * to be renamed in 2.0
     * @return {Number} height value
     */getHeight:function(){return this._getTransformedDimensions().y;},/**
     * Makes sure the scale is valid and modifies it if necessary
     * @private
     * @param {Number} value
     * @return {Number}
     */_constrainScale:function(value){if(Math.abs(value)<this.minScaleLimit){if(value<0){return-this.minScaleLimit;}else{return this.minScaleLimit;}}return value;},/**
     * Scales an object (equally by x and y)
     * @param {Number} value Scale factor
     * @return {fabric.Object} thisArg
     * @chainable
     */scale:function(value){value=this._constrainScale(value);if(value<0){this.flipX=!this.flipX;this.flipY=!this.flipY;value*=-1;}this.scaleX=value;this.scaleY=value;return this.setCoords();},/**
     * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)
     * @param {Number} value New width value
     * @return {fabric.Object} thisArg
     * @chainable
     */scaleToWidth:function(value){// adjust to bounding rect factor so that rotated shapes would fit as well
var boundingRectFactor=this.getBoundingRect().width/this.getWidth();return this.scale(value/this.width/boundingRectFactor);},/**
     * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)
     * @param {Number} value New height value
     * @return {fabric.Object} thisArg
     * @chainable
     */scaleToHeight:function(value){// adjust to bounding rect factor so that rotated shapes would fit as well
var boundingRectFactor=this.getBoundingRect().height/this.getHeight();return this.scale(value/this.height/boundingRectFactor);},/**
     * Calculate and returns the .coords of an object.
     * @return {Object} Object with tl, tr, br, bl ....
     * @chainable
     */calcCoords:function(absolute){var theta=degreesToRadians(this.angle),vpt=this.getViewportTransform(),dim=absolute?this._getTransformedDimensions():this._calculateCurrentDimensions(),currentWidth=dim.x,currentHeight=dim.y,sinTh=Math.sin(theta),cosTh=Math.cos(theta),_angle=currentWidth>0?Math.atan(currentHeight/currentWidth):0,_hypotenuse=currentWidth/Math.cos(_angle)/2,offsetX=Math.cos(_angle+theta)*_hypotenuse,offsetY=Math.sin(_angle+theta)*_hypotenuse,center=this.getCenterPoint(),// offset added for rotate and scale actions
coords=absolute?center:fabric.util.transformPoint(center,vpt),tl=new fabric.Point(coords.x-offsetX,coords.y-offsetY),tr=new fabric.Point(tl.x+currentWidth*cosTh,tl.y+currentWidth*sinTh),bl=new fabric.Point(tl.x-currentHeight*sinTh,tl.y+currentHeight*cosTh),br=new fabric.Point(coords.x+offsetX,coords.y+offsetY);if(!absolute){var ml=new fabric.Point((tl.x+bl.x)/2,(tl.y+bl.y)/2),mt=new fabric.Point((tr.x+tl.x)/2,(tr.y+tl.y)/2),mr=new fabric.Point((br.x+tr.x)/2,(br.y+tr.y)/2),mb=new fabric.Point((br.x+bl.x)/2,(br.y+bl.y)/2),mtr=new fabric.Point(mt.x+sinTh*this.rotatingPointOffset,mt.y-cosTh*this.rotatingPointOffset);}// debugging
/* setTimeout(function() {
         canvas.contextTop.fillStyle = 'green';
         canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);
         canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);
         canvas.contextTop.fillRect(br.x, br.y, 3, 3);
         canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);
         canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);
         canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);
         canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);
         canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);
         canvas.contextTop.fillRect(mtr.x, mtr.y, 3, 3);
       }, 50); */var coords={// corners
tl:tl,tr:tr,br:br,bl:bl};if(!absolute){// middle
coords.ml=ml;coords.mt=mt;coords.mr=mr;coords.mb=mb;// rotating point
coords.mtr=mtr;}return coords;},/**
     * Sets corner position coordinates based on current angle, width and height
     * See https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords
     * @param {Boolean} [ignoreZoom] set oCoords with or without the viewport transform.
     * @param {Boolean} [skipAbsolute] skip calculation of aCoords, usefull in setViewportTransform
     * @return {fabric.Object} thisArg
     * @chainable
     */setCoords:function(ignoreZoom,skipAbsolute){this.oCoords=this.calcCoords(ignoreZoom);if(!skipAbsolute){this.aCoords=this.calcCoords(true);}// set coordinates of the draggable boxes in the corners used to scale/rotate the image
ignoreZoom||this._setCornerCoords&&this._setCornerCoords();return this;},/**
     * calculate rotation matrix of an object
     * @return {Array} rotation matrix for the object
     */_calcRotateMatrix:function(){if(this.angle){var theta=degreesToRadians(this.angle),cos=Math.cos(theta),sin=Math.sin(theta);// trying to keep rounding error small, ugly but it works.
if(cos===6.123233995736766e-17||cos===-1.8369701987210297e-16){cos=0;}return[cos,sin,-sin,cos,0,0];}return fabric.iMatrix.concat();},/**
     * calculate trasform Matrix that represent current transformation from
     * object properties.
     * @param {Boolean} [skipGroup] return transformMatrix for object and not go upward with parents
     * @return {Array} matrix Transform Matrix for the object
     */calcTransformMatrix:function(skipGroup){var center=this.getCenterPoint(),translateMatrix=[1,0,0,1,center.x,center.y],rotateMatrix,dimensionMatrix=this._calcDimensionsTransformMatrix(this.skewX,this.skewY,true),matrix;if(this.group&&!skipGroup){matrix=multiplyMatrices(this.group.calcTransformMatrix(),translateMatrix);}else{matrix=translateMatrix;}if(this.angle){rotateMatrix=this._calcRotateMatrix();matrix=multiplyMatrices(matrix,rotateMatrix);}matrix=multiplyMatrices(matrix,dimensionMatrix);return matrix;},_calcDimensionsTransformMatrix:function(skewX,skewY,flipping){var skewMatrix,scaleX=this.scaleX*(flipping&&this.flipX?-1:1),scaleY=this.scaleY*(flipping&&this.flipY?-1:1),scaleMatrix=[scaleX,0,0,scaleY,0,0];if(skewX){skewMatrix=[1,0,Math.tan(degreesToRadians(skewX)),1];scaleMatrix=multiplyMatrices(scaleMatrix,skewMatrix,true);}if(skewY){skewMatrix=[1,Math.tan(degreesToRadians(skewY)),0,1];scaleMatrix=multiplyMatrices(scaleMatrix,skewMatrix,true);}return scaleMatrix;},/*
     * Calculate object dimensions from its properties
     * @private
     * @return {Object} .x width dimension
     * @return {Object} .y height dimension
     */_getNonTransformedDimensions:function(){var strokeWidth=this.strokeWidth,w=this.width+strokeWidth,h=this.height+strokeWidth;return{x:w,y:h};},/*
     * Calculate object bounding boxdimensions from its properties scale, skew.
     * @private
     * @return {Object} .x width dimension
     * @return {Object} .y height dimension
     */_getTransformedDimensions:function(skewX,skewY){if(typeof skewX==='undefined'){skewX=this.skewX;}if(typeof skewY==='undefined'){skewY=this.skewY;}var dimensions=this._getNonTransformedDimensions(),dimX=dimensions.x/2,dimY=dimensions.y/2,points=[{x:-dimX,y:-dimY},{x:dimX,y:-dimY},{x:-dimX,y:dimY},{x:dimX,y:dimY}],i,transformMatrix=this._calcDimensionsTransformMatrix(skewX,skewY,false),bbox;for(i=0;i<points.length;i++){points[i]=fabric.util.transformPoint(points[i],transformMatrix);}bbox=fabric.util.makeBoundingBoxFromPoints(points);return{x:bbox.width,y:bbox.height};},/*
     * Calculate object dimensions for controls. include padding and canvas zoom
     * private
     */_calculateCurrentDimensions:function(){var vpt=this.getViewportTransform(),dim=this._getTransformedDimensions(),p=fabric.util.transformPoint(dim,vpt,true);return p.scalarAdd(2*this.padding);}});})();fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{/**
   * Moves an object to the bottom of the stack of drawn objects
   * @return {fabric.Object} thisArg
   * @chainable
   */sendToBack:function(){if(this.group){fabric.StaticCanvas.prototype.sendToBack.call(this.group,this);}else{this.canvas.sendToBack(this);}return this;},/**
   * Moves an object to the top of the stack of drawn objects
   * @return {fabric.Object} thisArg
   * @chainable
   */bringToFront:function(){if(this.group){fabric.StaticCanvas.prototype.bringToFront.call(this.group,this);}else{this.canvas.bringToFront(this);}return this;},/**
   * Moves an object down in stack of drawn objects
   * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object
   * @return {fabric.Object} thisArg
   * @chainable
   */sendBackwards:function(intersecting){if(this.group){fabric.StaticCanvas.prototype.sendBackwards.call(this.group,this,intersecting);}else{this.canvas.sendBackwards(this,intersecting);}return this;},/**
   * Moves an object up in stack of drawn objects
   * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object
   * @return {fabric.Object} thisArg
   * @chainable
   */bringForward:function(intersecting){if(this.group){fabric.StaticCanvas.prototype.bringForward.call(this.group,this,intersecting);}else{this.canvas.bringForward(this,intersecting);}return this;},/**
   * Moves an object to specified level in stack of drawn objects
   * @param {Number} index New position of object
   * @return {fabric.Object} thisArg
   * @chainable
   */moveTo:function(index){if(this.group){fabric.StaticCanvas.prototype.moveTo.call(this.group,this,index);}else{this.canvas.moveTo(this,index);}return this;}});/* _TO_SVG_START_ */(function(){function getSvgColorString(prop,value){if(!value){return prop+': none; ';}else if(value.toLive){return prop+': url(#SVGID_'+value.id+'); ';}else{var color=new fabric.Color(value),str=prop+': '+color.toRgb()+'; ',opacity=color.getAlpha();if(opacity!==1){//change the color in rgb + opacity
str+=prop+'-opacity: '+opacity.toString()+'; ';}return str;}}fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{/**
     * Returns styles-string for svg-export
     * @param {Boolean} skipShadow a boolean to skip shadow filter output
     * @return {String}
     */getSvgStyles:function(skipShadow){var fillRule=this.fillRule,strokeWidth=this.strokeWidth?this.strokeWidth:'0',strokeDashArray=this.strokeDashArray?this.strokeDashArray.join(' '):'none',strokeLineCap=this.strokeLineCap?this.strokeLineCap:'butt',strokeLineJoin=this.strokeLineJoin?this.strokeLineJoin:'miter',strokeMiterLimit=this.strokeMiterLimit?this.strokeMiterLimit:'4',opacity=typeof this.opacity!=='undefined'?this.opacity:'1',visibility=this.visible?'':' visibility: hidden;',filter=skipShadow?'':this.getSvgFilter(),fill=getSvgColorString('fill',this.fill),stroke=getSvgColorString('stroke',this.stroke);return[stroke,'stroke-width: ',strokeWidth,'; ','stroke-dasharray: ',strokeDashArray,'; ','stroke-linecap: ',strokeLineCap,'; ','stroke-linejoin: ',strokeLineJoin,'; ','stroke-miterlimit: ',strokeMiterLimit,'; ',fill,'fill-rule: ',fillRule,'; ','opacity: ',opacity,';',filter,visibility].join('');},/**
     * Returns filter for svg shadow
     * @return {String}
     */getSvgFilter:function(){return this.shadow?'filter: url(#SVGID_'+this.shadow.id+');':'';},/**
     * Returns id attribute for svg output
     * @return {String}
     */getSvgId:function(){return this.id?'id="'+this.id+'" ':'';},/**
     * Returns transform-string for svg-export
     * @return {String}
     */getSvgTransform:function(){if(this.group&&this.group.type==='path-group'){return'';}var toFixed=fabric.util.toFixed,angle=this.getAngle(),skewX=this.getSkewX()%360,skewY=this.getSkewY()%360,center=this.getCenterPoint(),NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS,translatePart=this.type==='path-group'?'':'translate('+toFixed(center.x,NUM_FRACTION_DIGITS)+' '+toFixed(center.y,NUM_FRACTION_DIGITS)+')',anglePart=angle!==0?' rotate('+toFixed(angle,NUM_FRACTION_DIGITS)+')':'',scalePart=this.scaleX===1&&this.scaleY===1?'':' scale('+toFixed(this.scaleX,NUM_FRACTION_DIGITS)+' '+toFixed(this.scaleY,NUM_FRACTION_DIGITS)+')',skewXPart=skewX!==0?' skewX('+toFixed(skewX,NUM_FRACTION_DIGITS)+')':'',skewYPart=skewY!==0?' skewY('+toFixed(skewY,NUM_FRACTION_DIGITS)+')':'',addTranslateX=this.type==='path-group'?this.width:0,flipXPart=this.flipX?' matrix(-1 0 0 1 '+addTranslateX+' 0) ':'',addTranslateY=this.type==='path-group'?this.height:0,flipYPart=this.flipY?' matrix(1 0 0 -1 0 '+addTranslateY+')':'';return[translatePart,anglePart,scalePart,flipXPart,flipYPart,skewXPart,skewYPart].join('');},/**
     * Returns transform-string for svg-export from the transform matrix of single elements
     * @return {String}
     */getSvgTransformMatrix:function(){return this.transformMatrix?' matrix('+this.transformMatrix.join(' ')+') ':'';},/**
     * @private
     */_createBaseSVGMarkup:function(){var markup=[];if(this.fill&&this.fill.toLive){markup.push(this.fill.toSVG(this,false));}if(this.stroke&&this.stroke.toLive){markup.push(this.stroke.toSVG(this,false));}if(this.shadow){markup.push(this.shadow.toSVG(this));}return markup;}});})();/* _TO_SVG_END_ */(function(){var extend=fabric.util.object.extend,originalSet='stateProperties';/*
    Depends on `stateProperties`
  */function saveProps(origin,destination,props){var tmpObj={},deep=true;props.forEach(function(prop){tmpObj[prop]=origin[prop];});extend(origin[destination],tmpObj,deep);}function _isEqual(origValue,currentValue,firstPass){if(origValue===currentValue){// if the objects are identical, return
return true;}else if(Array.isArray(origValue)){if(origValue.length!==currentValue.length){return false;}for(var i=0,len=origValue.length;i<len;i++){if(!_isEqual(origValue[i],currentValue[i])){return false;}}return true;}else if(origValue&&typeof origValue==='object'){var keys=Object.keys(origValue),key;if(!firstPass&&keys.length!==Object.keys(currentValue).length){return false;}for(var i=0,len=keys.length;i<len;i++){key=keys[i];if(!_isEqual(origValue[key],currentValue[key])){return false;}}return true;}}fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{/**
     * Returns true if object state (one of its state properties) was changed
     * @param {String} [propertySet] optional name for the set of property we want to save
     * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called
     */hasStateChanged:function(propertySet){propertySet=propertySet||originalSet;var dashedPropertySet='_'+propertySet;if(Object.keys(this[dashedPropertySet]).length<this[propertySet].length){return true;}return!_isEqual(this[dashedPropertySet],this,true);},/**
     * Saves state of an object
     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state
     * @return {fabric.Object} thisArg
     */saveState:function(options){var propertySet=options&&options.propertySet||originalSet,destination='_'+propertySet;if(!this[destination]){return this.setupState(options);}saveProps(this,destination,this[propertySet]);if(options&&options.stateProperties){saveProps(this,destination,options.stateProperties);}return this;},/**
     * Setups state of an object
     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state
     * @return {fabric.Object} thisArg
     */setupState:function(options){options=options||{};var propertySet=options.propertySet||originalSet;options.propertySet=propertySet;this['_'+propertySet]={};this.saveState(options);return this;}});})();(function(){var degreesToRadians=fabric.util.degreesToRadians,/* eslint-disable camelcase */isVML=function(){return typeof G_vmlCanvasManager!=='undefined';};/* eslint-enable camelcase */fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{/**
     * The object interactivity controls.
     * @private
     */_controlsVisibility:null,/**
     * Determines which corner has been clicked
     * @private
     * @param {Object} pointer The pointer indicating the mouse position
     * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found
     */_findTargetCorner:function(pointer){if(!this.hasControls||!this.active){return false;}var ex=pointer.x,ey=pointer.y,xPoints,lines;this.__corner=0;for(var i in this.oCoords){if(!this.isControlVisible(i)){continue;}if(i==='mtr'&&!this.hasRotatingPoint){continue;}if(this.get('lockUniScaling')&&(i==='mt'||i==='mr'||i==='mb'||i==='ml')){continue;}lines=this._getImageLines(this.oCoords[i].corner);// debugging
// canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);
// canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);
// canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);
// canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);
// canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);
// canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);
// canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);
// canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);
xPoints=this._findCrossPoints({x:ex,y:ey},lines);if(xPoints!==0&&xPoints%2===1){this.__corner=i;return i;}}return false;},/**
     * Sets the coordinates of the draggable boxes in the corners of
     * the image used to scale/rotate it.
     * @private
     */_setCornerCoords:function(){var coords=this.oCoords,newTheta=degreesToRadians(45-this.angle),/* Math.sqrt(2 * Math.pow(this.cornerSize, 2)) / 2, *//* 0.707106 stands for sqrt(2)/2 */cornerHypotenuse=this.cornerSize*0.707106,cosHalfOffset=cornerHypotenuse*Math.cos(newTheta),sinHalfOffset=cornerHypotenuse*Math.sin(newTheta),x,y;for(var point in coords){x=coords[point].x;y=coords[point].y;coords[point].corner={tl:{x:x-sinHalfOffset,y:y-cosHalfOffset},tr:{x:x+cosHalfOffset,y:y-sinHalfOffset},bl:{x:x-cosHalfOffset,y:y+sinHalfOffset},br:{x:x+sinHalfOffset,y:y+cosHalfOffset}};}},/**
     * Draws a colored layer behind the object, inside its selection borders.
     * Requires public options: padding, selectionBackgroundColor
     * this function is called when the context is transformed
     * has checks to be skipped when the object is on a staticCanvas
     * @param {CanvasRenderingContext2D} ctx Context to draw on
     * @return {fabric.Object} thisArg
     * @chainable
     */drawSelectionBackground:function(ctx){if(!this.selectionBackgroundColor||this.group||!this.active||this.canvas&&!this.canvas.interactive){return this;}ctx.save();var center=this.getCenterPoint(),wh=this._calculateCurrentDimensions(),vpt=this.canvas.viewportTransform;ctx.translate(center.x,center.y);ctx.scale(1/vpt[0],1/vpt[3]);ctx.rotate(degreesToRadians(this.angle));ctx.fillStyle=this.selectionBackgroundColor;ctx.fillRect(-wh.x/2,-wh.y/2,wh.x,wh.y);ctx.restore();return this;},/**
     * Draws borders of an object's bounding box.
     * Requires public properties: width, height
     * Requires public options: padding, borderColor
     * @param {CanvasRenderingContext2D} ctx Context to draw on
     * @return {fabric.Object} thisArg
     * @chainable
     */drawBorders:function(ctx){if(!this.hasBorders){return this;}var wh=this._calculateCurrentDimensions(),strokeWidth=1/this.borderScaleFactor,width=wh.x+strokeWidth,height=wh.y+strokeWidth;ctx.save();ctx.strokeStyle=this.borderColor;this._setLineDash(ctx,this.borderDashArray,null);ctx.strokeRect(-width/2,-height/2,width,height);if(this.hasRotatingPoint&&this.isControlVisible('mtr')&&!this.get('lockRotation')&&this.hasControls){var rotateHeight=-height/2;ctx.beginPath();ctx.moveTo(0,rotateHeight);ctx.lineTo(0,rotateHeight-this.rotatingPointOffset);ctx.closePath();ctx.stroke();}ctx.restore();return this;},/**
     * Draws borders of an object's bounding box when it is inside a group.
     * Requires public properties: width, height
     * Requires public options: padding, borderColor
     * @param {CanvasRenderingContext2D} ctx Context to draw on
     * @param {object} options object representing current object parameters
     * @return {fabric.Object} thisArg
     * @chainable
     */drawBordersInGroup:function(ctx,options){if(!this.hasBorders){return this;}var p=this._getNonTransformedDimensions(),matrix=fabric.util.customTransformMatrix(options.scaleX,options.scaleY,options.skewX),wh=fabric.util.transformPoint(p,matrix),strokeWidth=1/this.borderScaleFactor,width=wh.x+strokeWidth,height=wh.y+strokeWidth;ctx.save();this._setLineDash(ctx,this.borderDashArray,null);ctx.strokeStyle=this.borderColor;ctx.strokeRect(-width/2,-height/2,width,height);ctx.restore();return this;},/**
     * Draws corners of an object's bounding box.
     * Requires public properties: width, height
     * Requires public options: cornerSize, padding
     * @param {CanvasRenderingContext2D} ctx Context to draw on
     * @return {fabric.Object} thisArg
     * @chainable
     */drawControls:function(ctx){if(!this.hasControls){return this;}var wh=this._calculateCurrentDimensions(),width=wh.x,height=wh.y,scaleOffset=this.cornerSize,left=-(width+scaleOffset)/2,top=-(height+scaleOffset)/2,methodName=this.transparentCorners?'stroke':'fill';ctx.save();ctx.strokeStyle=ctx.fillStyle=this.cornerColor;if(!this.transparentCorners){ctx.strokeStyle=this.cornerStrokeColor;}this._setLineDash(ctx,this.cornerDashArray,null);// top-left
this._drawControl('tl',ctx,methodName,left,top);// top-right
this._drawControl('tr',ctx,methodName,left+width,top);// bottom-left
this._drawControl('bl',ctx,methodName,left,top+height);// bottom-right
this._drawControl('br',ctx,methodName,left+width,top+height);if(!this.get('lockUniScaling')){// middle-top
this._drawControl('mt',ctx,methodName,left+width/2,top);// middle-bottom
this._drawControl('mb',ctx,methodName,left+width/2,top+height);// middle-right
this._drawControl('mr',ctx,methodName,left+width,top+height/2);// middle-left
this._drawControl('ml',ctx,methodName,left,top+height/2);}// middle-top-rotate
if(this.hasRotatingPoint){this._drawControl('mtr',ctx,methodName,left+width/2,top-this.rotatingPointOffset);}ctx.restore();return this;},/**
     * @private
     */_drawControl:function(control,ctx,methodName,left,top){if(!this.isControlVisible(control)){return;}var size=this.cornerSize,stroke=!this.transparentCorners&&this.cornerStrokeColor;switch(this.cornerStyle){case'circle':ctx.beginPath();ctx.arc(left+size/2,top+size/2,size/2,0,2*Math.PI,false);ctx[methodName]();if(stroke){ctx.stroke();}break;default:isVML()||this.transparentCorners||ctx.clearRect(left,top,size,size);ctx[methodName+'Rect'](left,top,size,size);if(stroke){ctx.strokeRect(left,top,size,size);}}},/**
     * Returns true if the specified control is visible, false otherwise.
     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.
     * @returns {Boolean} true if the specified control is visible, false otherwise
     */isControlVisible:function(controlName){return this._getControlsVisibility()[controlName];},/**
     * Sets the visibility of the specified control.
     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.
     * @param {Boolean} visible true to set the specified control visible, false otherwise
     * @return {fabric.Object} thisArg
     * @chainable
     */setControlVisible:function(controlName,visible){this._getControlsVisibility()[controlName]=visible;return this;},/**
     * Sets the visibility state of object controls.
     * @param {Object} [options] Options object
     * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it
     * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it
     * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it
     * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it
     * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it
     * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it
     * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it
     * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it
     * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it
     * @return {fabric.Object} thisArg
     * @chainable
     */setControlsVisibility:function(options){options||(options={});for(var p in options){this.setControlVisible(p,options[p]);}return this;},/**
     * Returns the instance of the control visibility set for this object.
     * @private
     * @returns {Object}
     */_getControlsVisibility:function(){if(!this._controlsVisibility){this._controlsVisibility={tl:true,tr:true,br:true,bl:true,ml:true,mt:true,mr:true,mb:true,mtr:true};}return this._controlsVisibility;}});})();fabric.util.object.extend(fabric.StaticCanvas.prototype,/** @lends fabric.StaticCanvas.prototype */{/**
   * Animation duration (in ms) for fx* methods
   * @type Number
   * @default
   */FX_DURATION:500,/**
   * Centers object horizontally with animation.
   * @param {fabric.Object} object Object to center
   * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
   * @param {Function} [callbacks.onComplete] Invoked on completion
   * @param {Function} [callbacks.onChange] Invoked on every step of animation
   * @return {fabric.Canvas} thisArg
   * @chainable
   */fxCenterObjectH:function(object,callbacks){callbacks=callbacks||{};var empty=function(){},onComplete=callbacks.onComplete||empty,onChange=callbacks.onChange||empty,_this=this;fabric.util.animate({startValue:object.get('left'),endValue:this.getCenter().left,duration:this.FX_DURATION,onChange:function(value){object.set('left',value);_this.renderAll();onChange();},onComplete:function(){object.setCoords();onComplete();}});return this;},/**
   * Centers object vertically with animation.
   * @param {fabric.Object} object Object to center
   * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
   * @param {Function} [callbacks.onComplete] Invoked on completion
   * @param {Function} [callbacks.onChange] Invoked on every step of animation
   * @return {fabric.Canvas} thisArg
   * @chainable
   */fxCenterObjectV:function(object,callbacks){callbacks=callbacks||{};var empty=function(){},onComplete=callbacks.onComplete||empty,onChange=callbacks.onChange||empty,_this=this;fabric.util.animate({startValue:object.get('top'),endValue:this.getCenter().top,duration:this.FX_DURATION,onChange:function(value){object.set('top',value);_this.renderAll();onChange();},onComplete:function(){object.setCoords();onComplete();}});return this;},/**
   * Same as `fabric.Canvas#remove` but animated
   * @param {fabric.Object} object Object to remove
   * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
   * @param {Function} [callbacks.onComplete] Invoked on completion
   * @param {Function} [callbacks.onChange] Invoked on every step of animation
   * @return {fabric.Canvas} thisArg
   * @chainable
   */fxRemove:function(object,callbacks){callbacks=callbacks||{};var empty=function(){},onComplete=callbacks.onComplete||empty,onChange=callbacks.onChange||empty,_this=this;fabric.util.animate({startValue:object.get('opacity'),endValue:0,duration:this.FX_DURATION,onStart:function(){object.set('active',false);},onChange:function(value){object.set('opacity',value);_this.renderAll();onChange();},onComplete:function(){_this.remove(object);onComplete();}});return this;}});fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{/**
   * Animates object's properties
   * @param {String|Object} property Property to animate (if string) or properties to animate (if object)
   * @param {Number|Object} value Value to animate property to (if string was given first) or options object
   * @return {fabric.Object} thisArg
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}
   * @chainable
   *
   * As object — multiple properties
   *
   * object.animate({ left: ..., top: ... });
   * object.animate({ left: ..., top: ... }, { duration: ... });
   *
   * As string — one property
   *
   * object.animate('left', ...);
   * object.animate('left', { duration: ... });
   *
   */animate:function(){if(arguments[0]&&typeof arguments[0]==='object'){var propsToAnimate=[],prop,skipCallbacks;for(prop in arguments[0]){propsToAnimate.push(prop);}for(var i=0,len=propsToAnimate.length;i<len;i++){prop=propsToAnimate[i];skipCallbacks=i!==len-1;this._animate(prop,arguments[0][prop],arguments[1],skipCallbacks);}}else{this._animate.apply(this,arguments);}return this;},/**
   * @private
   * @param {String} property Property to animate
   * @param {String} to Value to animate to
   * @param {Object} [options] Options object
   * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked
   */_animate:function(property,to,options,skipCallbacks){var _this=this,propPair;to=to.toString();if(!options){options={};}else{options=fabric.util.object.clone(options);}if(~property.indexOf('.')){propPair=property.split('.');}var currentValue=propPair?this.get(propPair[0])[propPair[1]]:this.get(property);if(!('from'in options)){options.from=currentValue;}if(~to.indexOf('=')){to=currentValue+parseFloat(to.replace('=',''));}else{to=parseFloat(to);}fabric.util.animate({startValue:options.from,endValue:to,byValue:options.by,easing:options.easing,duration:options.duration,abort:options.abort&&function(){return options.abort.call(_this);},onChange:function(value,valueProgress,timeProgress){if(propPair){_this[propPair[0]][propPair[1]]=value;}else{_this.set(property,value);}if(skipCallbacks){return;}options.onChange&&options.onChange(value,valueProgress,timeProgress);},onComplete:function(value,valueProgress,timeProgress){if(skipCallbacks){return;}_this.setCoords();options.onComplete&&options.onComplete(value,valueProgress,timeProgress);}});}});(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,clone=fabric.util.object.clone,coordProps={x1:1,x2:1,y1:1,y2:1},supportsLineDash=fabric.StaticCanvas.supports('setLineDash');if(fabric.Line){fabric.warn('fabric.Line is already defined');return;}var cacheProperties=fabric.Object.prototype.cacheProperties.concat();cacheProperties.push('x1','x2','y1','y2');/**
   * Line class
   * @class fabric.Line
   * @extends fabric.Object
   * @see {@link fabric.Line#initialize} for constructor definition
   */fabric.Line=fabric.util.createClass(fabric.Object,/** @lends fabric.Line.prototype */{/**
     * Type of an object
     * @type String
     * @default
     */type:'line',/**
     * x value or first line edge
     * @type Number
     * @default
     */x1:0,/**
     * y value or first line edge
     * @type Number
     * @default
     */y1:0,/**
     * x value or second line edge
     * @type Number
     * @default
     */x2:0,/**
     * y value or second line edge
     * @type Number
     * @default
     */y2:0,cacheProperties:cacheProperties,/**
     * Constructor
     * @param {Array} [points] Array of points
     * @param {Object} [options] Options object
     * @return {fabric.Line} thisArg
     */initialize:function(points,options){if(!points){points=[0,0,0,0];}this.callSuper('initialize',options);this.set('x1',points[0]);this.set('y1',points[1]);this.set('x2',points[2]);this.set('y2',points[3]);this._setWidthHeight(options);},/**
     * @private
     * @param {Object} [options] Options
     */_setWidthHeight:function(options){options||(options={});this.width=Math.abs(this.x2-this.x1);this.height=Math.abs(this.y2-this.y1);this.left='left'in options?options.left:this._getLeftToOriginX();this.top='top'in options?options.top:this._getTopToOriginY();},/**
     * @private
     * @param {String} key
     * @param {*} value
     */_set:function(key,value){this.callSuper('_set',key,value);if(typeof coordProps[key]!=='undefined'){this._setWidthHeight();}return this;},/**
     * @private
     * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.
     */_getLeftToOriginX:makeEdgeToOriginGetter({// property names
origin:'originX',axis1:'x1',axis2:'x2',dimension:'width'},{// possible values of origin
nearest:'left',center:'center',farthest:'right'}),/**
     * @private
     * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.
     */_getTopToOriginY:makeEdgeToOriginGetter({// property names
origin:'originY',axis1:'y1',axis2:'y2',dimension:'height'},{// possible values of origin
nearest:'top',center:'center',farthest:'bottom'}),/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Boolean} noTransform
     */_render:function(ctx,noTransform){ctx.beginPath();if(noTransform){//  Line coords are distances from left-top of canvas to origin of line.
//  To render line in a path-group, we need to translate them to
//  distances from center of path-group to center of line.
var cp=this.getCenterPoint(),offset=this.strokeWidth/2;ctx.translate(cp.x-(this.strokeLineCap==='butt'&&this.height===0?0:offset),cp.y-(this.strokeLineCap==='butt'&&this.width===0?0:offset));}if(!this.strokeDashArray||this.strokeDashArray&&supportsLineDash){// move from center (of virtual box) to its left/top corner
// we can't assume x1, y1 is top left and x2, y2 is bottom right
var p=this.calcLinePoints();ctx.moveTo(p.x1,p.y1);ctx.lineTo(p.x2,p.y2);}ctx.lineWidth=this.strokeWidth;// TODO: test this
// make sure setting "fill" changes color of a line
// (by copying fillStyle to strokeStyle, since line is stroked, not filled)
var origStrokeStyle=ctx.strokeStyle;ctx.strokeStyle=this.stroke||ctx.fillStyle;this.stroke&&this._renderStroke(ctx);ctx.strokeStyle=origStrokeStyle;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderDashedStroke:function(ctx){var p=this.calcLinePoints();ctx.beginPath();fabric.util.drawDashedLine(ctx,p.x1,p.y1,p.x2,p.y2,this.strokeDashArray);ctx.closePath();},/**
     * Returns object representation of an instance
     * @methd toObject
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */toObject:function(propertiesToInclude){return extend(this.callSuper('toObject',propertiesToInclude),this.calcLinePoints());},/*
     * Calculate object dimensions from its properties
     * @private
     */_getNonTransformedDimensions:function(){var dim=this.callSuper('_getNonTransformedDimensions');if(this.strokeLineCap==='butt'){if(this.width===0){dim.y-=this.strokeWidth;}if(this.height===0){dim.x-=this.strokeWidth;}}return dim;},/**
     * Recalculates line points given width and height
     * @private
     */calcLinePoints:function(){var xMult=this.x1<=this.x2?-1:1,yMult=this.y1<=this.y2?-1:1,x1=xMult*this.width*0.5,y1=yMult*this.height*0.5,x2=xMult*this.width*-0.5,y2=yMult*this.height*-0.5;return{x1:x1,x2:x2,y1:y1,y2:y2};},/* _TO_SVG_START_ *//**
     * Returns SVG representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */toSVG:function(reviver){var markup=this._createBaseSVGMarkup(),p={x1:this.x1,x2:this.x2,y1:this.y1,y2:this.y2};if(!(this.group&&this.group.type==='path-group')){p=this.calcLinePoints();}markup.push('<line ',this.getSvgId(),'x1="',p.x1,'" y1="',p.y1,'" x2="',p.x2,'" y2="',p.y2,'" style="',this.getSvgStyles(),'" transform="',this.getSvgTransform(),this.getSvgTransformMatrix(),'"/>\n');return reviver?reviver(markup.join('')):markup.join('');}/* _TO_SVG_END_ */});/* _FROM_SVG_START_ *//**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Line.fromElement})
   * @static
   * @memberOf fabric.Line
   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement
   */fabric.Line.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat('x1 y1 x2 y2'.split(' '));/**
   * Returns fabric.Line instance from an SVG element
   * @static
   * @memberOf fabric.Line
   * @param {SVGElement} element Element to parse
   * @param {Object} [options] Options object
   * @return {fabric.Line} instance of fabric.Line
   */fabric.Line.fromElement=function(element,options){options=options||{};var parsedAttributes=fabric.parseAttributes(element,fabric.Line.ATTRIBUTE_NAMES),points=[parsedAttributes.x1||0,parsedAttributes.y1||0,parsedAttributes.x2||0,parsedAttributes.y2||0];options.originX='left';options.originY='top';return new fabric.Line(points,extend(parsedAttributes,options));};/* _FROM_SVG_END_ *//**
   * Returns fabric.Line instance from an object representation
   * @static
   * @memberOf fabric.Line
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] invoked with new instance as first argument
   * @param {Boolean} [forceAsync] Force an async behaviour trying to create pattern first
   * @return {fabric.Line} instance of fabric.Line
   */fabric.Line.fromObject=function(object,callback,forceAsync){function _callback(instance){delete instance.points;callback&&callback(instance);};var options=clone(object,true);options.points=[object.x1,object.y1,object.x2,object.y2];var line=fabric.Object._fromObject('Line',options,_callback,forceAsync,'points');if(line){delete line.points;}return line;};/**
   * Produces a function that calculates distance from canvas edge to Line origin.
   */function makeEdgeToOriginGetter(propertyNames,originValues){var origin=propertyNames.origin,axis1=propertyNames.axis1,axis2=propertyNames.axis2,dimension=propertyNames.dimension,nearest=originValues.nearest,center=originValues.center,farthest=originValues.farthest;return function(){switch(this.get(origin)){case nearest:return Math.min(this.get(axis1),this.get(axis2));case center:return Math.min(this.get(axis1),this.get(axis2))+0.5*this.get(dimension);case farthest:return Math.max(this.get(axis1),this.get(axis2));}};}})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),pi=Math.PI,extend=fabric.util.object.extend;if(fabric.Circle){fabric.warn('fabric.Circle is already defined.');return;}var cacheProperties=fabric.Object.prototype.cacheProperties.concat();cacheProperties.push('radius');/**
   * Circle class
   * @class fabric.Circle
   * @extends fabric.Object
   * @see {@link fabric.Circle#initialize} for constructor definition
   */fabric.Circle=fabric.util.createClass(fabric.Object,/** @lends fabric.Circle.prototype */{/**
     * Type of an object
     * @type String
     * @default
     */type:'circle',/**
     * Radius of this circle
     * @type Number
     * @default
     */radius:0,/**
     * Start angle of the circle, moving clockwise
     * @type Number
     * @default 0
     */startAngle:0,/**
     * End angle of the circle
     * @type Number
     * @default 2Pi
     */endAngle:pi*2,cacheProperties:cacheProperties,/**
     * Constructor
     * @param {Object} [options] Options object
     * @return {fabric.Circle} thisArg
     */initialize:function(options){this.callSuper('initialize',options);this.set('radius',options&&options.radius||0);},/**
     * @private
     * @param {String} key
     * @param {*} value
     * @return {fabric.Circle} thisArg
     */_set:function(key,value){this.callSuper('_set',key,value);if(key==='radius'){this.setRadius(value);}return this;},/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */toObject:function(propertiesToInclude){return this.callSuper('toObject',['radius','startAngle','endAngle'].concat(propertiesToInclude));},/* _TO_SVG_START_ *//**
     * Returns svg representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */toSVG:function(reviver){var markup=this._createBaseSVGMarkup(),x=0,y=0,angle=(this.endAngle-this.startAngle)%(2*pi);if(angle===0){if(this.group&&this.group.type==='path-group'){x=this.left+this.radius;y=this.top+this.radius;}markup.push('<circle ',this.getSvgId(),'cx="'+x+'" cy="'+y+'" ','r="',this.radius,'" style="',this.getSvgStyles(),'" transform="',this.getSvgTransform(),' ',this.getSvgTransformMatrix(),'"/>\n');}else{var startX=Math.cos(this.startAngle)*this.radius,startY=Math.sin(this.startAngle)*this.radius,endX=Math.cos(this.endAngle)*this.radius,endY=Math.sin(this.endAngle)*this.radius,largeFlag=angle>pi?'1':'0';markup.push('<path d="M '+startX+' '+startY,' A '+this.radius+' '+this.radius,' 0 ',+largeFlag+' 1',' '+endX+' '+endY,'" style="',this.getSvgStyles(),'" transform="',this.getSvgTransform(),' ',this.getSvgTransformMatrix(),'"/>\n');}return reviver?reviver(markup.join('')):markup.join('');},/* _TO_SVG_END_ *//**
     * @private
     * @param {CanvasRenderingContext2D} ctx context to render on
     * @param {Boolean} [noTransform] When true, context is not transformed
     */_render:function(ctx,noTransform){ctx.beginPath();ctx.arc(noTransform?this.left+this.radius:0,noTransform?this.top+this.radius:0,this.radius,this.startAngle,this.endAngle,false);this._renderFill(ctx);this._renderStroke(ctx);},/**
     * Returns horizontal radius of an object (according to how an object is scaled)
     * @return {Number}
     */getRadiusX:function(){return this.get('radius')*this.get('scaleX');},/**
     * Returns vertical radius of an object (according to how an object is scaled)
     * @return {Number}
     */getRadiusY:function(){return this.get('radius')*this.get('scaleY');},/**
     * Sets radius of an object (and updates width accordingly)
     * @return {fabric.Circle} thisArg
     */setRadius:function(value){this.radius=value;return this.set('width',value*2).set('height',value*2);}});/* _FROM_SVG_START_ *//**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})
   * @static
   * @memberOf fabric.Circle
   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement
   */fabric.Circle.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat('cx cy r'.split(' '));/**
   * Returns {@link fabric.Circle} instance from an SVG element
   * @static
   * @memberOf fabric.Circle
   * @param {SVGElement} element Element to parse
   * @param {Object} [options] Options object
   * @throws {Error} If value of `r` attribute is missing or invalid
   * @return {fabric.Circle} Instance of fabric.Circle
   */fabric.Circle.fromElement=function(element,options){options||(options={});var parsedAttributes=fabric.parseAttributes(element,fabric.Circle.ATTRIBUTE_NAMES);if(!isValidRadius(parsedAttributes)){throw new Error('value of `r` attribute is required and can not be negative');}parsedAttributes.left=parsedAttributes.left||0;parsedAttributes.top=parsedAttributes.top||0;var obj=new fabric.Circle(extend(parsedAttributes,options));obj.left-=obj.radius;obj.top-=obj.radius;return obj;};/**
   * @private
   */function isValidRadius(attributes){return'radius'in attributes&&attributes.radius>=0;}/* _FROM_SVG_END_ *//**
   * Returns {@link fabric.Circle} instance from an object representation
   * @static
   * @memberOf fabric.Circle
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] invoked with new instance as first argument
   * @param {Boolean} [forceAsync] Force an async behaviour trying to create pattern first
   * @return {Object} Instance of fabric.Circle
   */fabric.Circle.fromObject=function(object,callback,forceAsync){return fabric.Object._fromObject('Circle',object,callback,forceAsync);};})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={});if(fabric.Triangle){fabric.warn('fabric.Triangle is already defined');return;}/**
   * Triangle class
   * @class fabric.Triangle
   * @extends fabric.Object
   * @return {fabric.Triangle} thisArg
   * @see {@link fabric.Triangle#initialize} for constructor definition
   */fabric.Triangle=fabric.util.createClass(fabric.Object,/** @lends fabric.Triangle.prototype */{/**
     * Type of an object
     * @type String
     * @default
     */type:'triangle',/**
     * Constructor
     * @param {Object} [options] Options object
     * @return {Object} thisArg
     */initialize:function(options){this.callSuper('initialize',options);this.set('width',options&&options.width||100).set('height',options&&options.height||100);},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_render:function(ctx){var widthBy2=this.width/2,heightBy2=this.height/2;ctx.beginPath();ctx.moveTo(-widthBy2,heightBy2);ctx.lineTo(0,-heightBy2);ctx.lineTo(widthBy2,heightBy2);ctx.closePath();this._renderFill(ctx);this._renderStroke(ctx);},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderDashedStroke:function(ctx){var widthBy2=this.width/2,heightBy2=this.height/2;ctx.beginPath();fabric.util.drawDashedLine(ctx,-widthBy2,heightBy2,0,-heightBy2,this.strokeDashArray);fabric.util.drawDashedLine(ctx,0,-heightBy2,widthBy2,heightBy2,this.strokeDashArray);fabric.util.drawDashedLine(ctx,widthBy2,heightBy2,-widthBy2,heightBy2,this.strokeDashArray);ctx.closePath();},/* _TO_SVG_START_ *//**
     * Returns SVG representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */toSVG:function(reviver){var markup=this._createBaseSVGMarkup(),widthBy2=this.width/2,heightBy2=this.height/2,points=[-widthBy2+' '+heightBy2,'0 '+-heightBy2,widthBy2+' '+heightBy2].join(',');markup.push('<polygon ',this.getSvgId(),'points="',points,'" style="',this.getSvgStyles(),'" transform="',this.getSvgTransform(),'"/>');return reviver?reviver(markup.join('')):markup.join('');}/* _TO_SVG_END_ */});/**
   * Returns {@link fabric.Triangle} instance from an object representation
   * @static
   * @memberOf fabric.Triangle
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] invoked with new instance as first argument
   * @param {Boolean} [forceAsync] Force an async behaviour trying to create pattern first
   * @return {fabric.Triangle}
   */fabric.Triangle.fromObject=function(object,callback,forceAsync){return fabric.Object._fromObject('Triangle',object,callback,forceAsync);};})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),piBy2=Math.PI*2,extend=fabric.util.object.extend;if(fabric.Ellipse){fabric.warn('fabric.Ellipse is already defined.');return;}var cacheProperties=fabric.Object.prototype.cacheProperties.concat();cacheProperties.push('rx','ry');/**
   * Ellipse class
   * @class fabric.Ellipse
   * @extends fabric.Object
   * @return {fabric.Ellipse} thisArg
   * @see {@link fabric.Ellipse#initialize} for constructor definition
   */fabric.Ellipse=fabric.util.createClass(fabric.Object,/** @lends fabric.Ellipse.prototype */{/**
     * Type of an object
     * @type String
     * @default
     */type:'ellipse',/**
     * Horizontal radius
     * @type Number
     * @default
     */rx:0,/**
     * Vertical radius
     * @type Number
     * @default
     */ry:0,cacheProperties:cacheProperties,/**
     * Constructor
     * @param {Object} [options] Options object
     * @return {fabric.Ellipse} thisArg
     */initialize:function(options){this.callSuper('initialize',options);this.set('rx',options&&options.rx||0);this.set('ry',options&&options.ry||0);},/**
     * @private
     * @param {String} key
     * @param {*} value
     * @return {fabric.Ellipse} thisArg
     */_set:function(key,value){this.callSuper('_set',key,value);switch(key){case'rx':this.rx=value;this.set('width',value*2);break;case'ry':this.ry=value;this.set('height',value*2);break;}return this;},/**
     * Returns horizontal radius of an object (according to how an object is scaled)
     * @return {Number}
     */getRx:function(){return this.get('rx')*this.get('scaleX');},/**
     * Returns Vertical radius of an object (according to how an object is scaled)
     * @return {Number}
     */getRy:function(){return this.get('ry')*this.get('scaleY');},/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */toObject:function(propertiesToInclude){return this.callSuper('toObject',['rx','ry'].concat(propertiesToInclude));},/* _TO_SVG_START_ *//**
     * Returns svg representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */toSVG:function(reviver){var markup=this._createBaseSVGMarkup(),x=0,y=0;if(this.group&&this.group.type==='path-group'){x=this.left+this.rx;y=this.top+this.ry;}markup.push('<ellipse ',this.getSvgId(),'cx="',x,'" cy="',y,'" ','rx="',this.rx,'" ry="',this.ry,'" style="',this.getSvgStyles(),'" transform="',this.getSvgTransform(),this.getSvgTransformMatrix(),'"/>\n');return reviver?reviver(markup.join('')):markup.join('');},/* _TO_SVG_END_ *//**
     * @private
     * @param {CanvasRenderingContext2D} ctx context to render on
     * @param {Boolean} [noTransform] When true, context is not transformed
     */_render:function(ctx,noTransform){ctx.beginPath();ctx.save();ctx.transform(1,0,0,this.ry/this.rx,0,0);ctx.arc(noTransform?this.left+this.rx:0,noTransform?(this.top+this.ry)*this.rx/this.ry:0,this.rx,0,piBy2,false);ctx.restore();this._renderFill(ctx);this._renderStroke(ctx);}});/* _FROM_SVG_START_ *//**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})
   * @static
   * @memberOf fabric.Ellipse
   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement
   */fabric.Ellipse.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat('cx cy rx ry'.split(' '));/**
   * Returns {@link fabric.Ellipse} instance from an SVG element
   * @static
   * @memberOf fabric.Ellipse
   * @param {SVGElement} element Element to parse
   * @param {Object} [options] Options object
   * @return {fabric.Ellipse}
   */fabric.Ellipse.fromElement=function(element,options){options||(options={});var parsedAttributes=fabric.parseAttributes(element,fabric.Ellipse.ATTRIBUTE_NAMES);parsedAttributes.left=parsedAttributes.left||0;parsedAttributes.top=parsedAttributes.top||0;var ellipse=new fabric.Ellipse(extend(parsedAttributes,options));ellipse.top-=ellipse.ry;ellipse.left-=ellipse.rx;return ellipse;};/* _FROM_SVG_END_ *//**
   * Returns {@link fabric.Ellipse} instance from an object representation
   * @static
   * @memberOf fabric.Ellipse
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] invoked with new instance as first argument
   * @param {Boolean} [forceAsync] Force an async behaviour trying to create pattern first
   * @return {fabric.Ellipse}
   */fabric.Ellipse.fromObject=function(object,callback,forceAsync){return fabric.Object._fromObject('Ellipse',object,callback,forceAsync);};})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend;if(fabric.Rect){fabric.warn('fabric.Rect is already defined');return;}var stateProperties=fabric.Object.prototype.stateProperties.concat();stateProperties.push('rx','ry');var cacheProperties=fabric.Object.prototype.cacheProperties.concat();cacheProperties.push('rx','ry');/**
   * Rectangle class
   * @class fabric.Rect
   * @extends fabric.Object
   * @return {fabric.Rect} thisArg
   * @see {@link fabric.Rect#initialize} for constructor definition
   */fabric.Rect=fabric.util.createClass(fabric.Object,/** @lends fabric.Rect.prototype */{/**
     * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})
     * as well as for history (undo/redo) purposes
     * @type Array
     */stateProperties:stateProperties,/**
     * Type of an object
     * @type String
     * @default
     */type:'rect',/**
     * Horizontal border radius
     * @type Number
     * @default
     */rx:0,/**
     * Vertical border radius
     * @type Number
     * @default
     */ry:0,cacheProperties:cacheProperties,/**
     * Constructor
     * @param {Object} [options] Options object
     * @return {Object} thisArg
     */initialize:function(options){this.callSuper('initialize',options);this._initRxRy();},/**
     * Initializes rx/ry attributes
     * @private
     */_initRxRy:function(){if(this.rx&&!this.ry){this.ry=this.rx;}else if(this.ry&&!this.rx){this.rx=this.ry;}},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Boolean} noTransform
     */_render:function(ctx,noTransform){// optimize 1x1 case (used in spray brush)
if(this.width===1&&this.height===1){ctx.fillRect(-0.5,-0.5,1,1);return;}var rx=this.rx?Math.min(this.rx,this.width/2):0,ry=this.ry?Math.min(this.ry,this.height/2):0,w=this.width,h=this.height,x=noTransform?this.left:-this.width/2,y=noTransform?this.top:-this.height/2,isRounded=rx!==0||ry!==0,/* "magic number" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */k=1-0.5522847498;ctx.beginPath();ctx.moveTo(x+rx,y);ctx.lineTo(x+w-rx,y);isRounded&&ctx.bezierCurveTo(x+w-k*rx,y,x+w,y+k*ry,x+w,y+ry);ctx.lineTo(x+w,y+h-ry);isRounded&&ctx.bezierCurveTo(x+w,y+h-k*ry,x+w-k*rx,y+h,x+w-rx,y+h);ctx.lineTo(x+rx,y+h);isRounded&&ctx.bezierCurveTo(x+k*rx,y+h,x,y+h-k*ry,x,y+h-ry);ctx.lineTo(x,y+ry);isRounded&&ctx.bezierCurveTo(x,y+k*ry,x+k*rx,y,x+rx,y);ctx.closePath();this._renderFill(ctx);this._renderStroke(ctx);},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderDashedStroke:function(ctx){var x=-this.width/2,y=-this.height/2,w=this.width,h=this.height;ctx.beginPath();fabric.util.drawDashedLine(ctx,x,y,x+w,y,this.strokeDashArray);fabric.util.drawDashedLine(ctx,x+w,y,x+w,y+h,this.strokeDashArray);fabric.util.drawDashedLine(ctx,x+w,y+h,x,y+h,this.strokeDashArray);fabric.util.drawDashedLine(ctx,x,y+h,x,y,this.strokeDashArray);ctx.closePath();},/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */toObject:function(propertiesToInclude){return this.callSuper('toObject',['rx','ry'].concat(propertiesToInclude));},/* _TO_SVG_START_ *//**
     * Returns svg representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */toSVG:function(reviver){var markup=this._createBaseSVGMarkup(),x=this.left,y=this.top;if(!(this.group&&this.group.type==='path-group')){x=-this.width/2;y=-this.height/2;}markup.push('<rect ',this.getSvgId(),'x="',x,'" y="',y,'" rx="',this.get('rx'),'" ry="',this.get('ry'),'" width="',this.width,'" height="',this.height,'" style="',this.getSvgStyles(),'" transform="',this.getSvgTransform(),this.getSvgTransformMatrix(),'"/>\n');return reviver?reviver(markup.join('')):markup.join('');}/* _TO_SVG_END_ */});/* _FROM_SVG_START_ *//**
   * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)
   * @static
   * @memberOf fabric.Rect
   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement
   */fabric.Rect.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat('x y rx ry width height'.split(' '));/**
   * Returns {@link fabric.Rect} instance from an SVG element
   * @static
   * @memberOf fabric.Rect
   * @param {SVGElement} element Element to parse
   * @param {Object} [options] Options object
   * @return {fabric.Rect} Instance of fabric.Rect
   */fabric.Rect.fromElement=function(element,options){if(!element){return null;}options=options||{};var parsedAttributes=fabric.parseAttributes(element,fabric.Rect.ATTRIBUTE_NAMES);parsedAttributes.left=parsedAttributes.left||0;parsedAttributes.top=parsedAttributes.top||0;var rect=new fabric.Rect(extend(options?fabric.util.object.clone(options):{},parsedAttributes));rect.visible=rect.visible&&rect.width>0&&rect.height>0;return rect;};/* _FROM_SVG_END_ *//**
   * Returns {@link fabric.Rect} instance from an object representation
   * @static
   * @memberOf fabric.Rect
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.Rect instance is created
   * @param {Boolean} [forceAsync] Force an async behaviour trying to create pattern first
   * @return {Object} instance of fabric.Rect
   */fabric.Rect.fromObject=function(object,callback,forceAsync){return fabric.Object._fromObject('Rect',object,callback,forceAsync);};})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,min=fabric.util.array.min,max=fabric.util.array.max,toFixed=fabric.util.toFixed,NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS;if(fabric.Polyline){fabric.warn('fabric.Polyline is already defined');return;}var cacheProperties=fabric.Object.prototype.cacheProperties.concat();cacheProperties.push('points');/**
   * Polyline class
   * @class fabric.Polyline
   * @extends fabric.Object
   * @see {@link fabric.Polyline#initialize} for constructor definition
   */fabric.Polyline=fabric.util.createClass(fabric.Object,/** @lends fabric.Polyline.prototype */{/**
     * Type of an object
     * @type String
     * @default
     */type:'polyline',/**
     * Points array
     * @type Array
     * @default
     */points:null,/**
     * Minimum X from points values, necessary to offset points
     * @type Number
     * @default
     */minX:0,/**
     * Minimum Y from points values, necessary to offset points
     * @type Number
     * @default
     */minY:0,cacheProperties:cacheProperties,/**
     * Constructor
     * @param {Array} points Array of points (where each point is an object with x and y)
     * @param {Object} [options] Options object
     * @return {fabric.Polyline} thisArg
     * @example
     * var poly = new fabric.Polyline([
     *     { x: 10, y: 10 },
     *     { x: 50, y: 30 },
     *     { x: 40, y: 70 },
     *     { x: 60, y: 50 },
     *     { x: 100, y: 150 },
     *     { x: 40, y: 100 }
     *   ], {
     *   stroke: 'red',
     *   left: 100,
     *   top: 100
     * });
     */initialize:function(points,options){options=options||{};this.points=points||[];this.callSuper('initialize',options);this._calcDimensions();if(!('top'in options)){this.top=this.minY;}if(!('left'in options)){this.left=this.minX;}this.pathOffset={x:this.minX+this.width/2,y:this.minY+this.height/2};},/**
     * @private
     */_calcDimensions:function(){var points=this.points,minX=min(points,'x'),minY=min(points,'y'),maxX=max(points,'x'),maxY=max(points,'y');this.width=maxX-minX||0;this.height=maxY-minY||0;this.minX=minX||0;this.minY=minY||0;},/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */toObject:function(propertiesToInclude){return extend(this.callSuper('toObject',propertiesToInclude),{points:this.points.concat()});},/* _TO_SVG_START_ *//**
     * Returns svg representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */toSVG:function(reviver){var points=[],diffX=0,diffY=0,markup=this._createBaseSVGMarkup();if(!(this.group&&this.group.type==='path-group')){diffX=this.pathOffset.x;diffY=this.pathOffset.y;}for(var i=0,len=this.points.length;i<len;i++){points.push(toFixed(this.points[i].x-diffX,NUM_FRACTION_DIGITS),',',toFixed(this.points[i].y-diffY,NUM_FRACTION_DIGITS),' ');}markup.push('<',this.type,' ',this.getSvgId(),'points="',points.join(''),'" style="',this.getSvgStyles(),'" transform="',this.getSvgTransform(),' ',this.getSvgTransformMatrix(),'"/>\n');return reviver?reviver(markup.join('')):markup.join('');},/* _TO_SVG_END_ *//**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Boolean} noTransform
     */commonRender:function(ctx,noTransform){var point,len=this.points.length,x=noTransform?0:this.pathOffset.x,y=noTransform?0:this.pathOffset.y;if(!len||isNaN(this.points[len-1].y)){// do not draw if no points or odd points
// NaN comes from parseFloat of a empty string in parser
return false;}ctx.beginPath();ctx.moveTo(this.points[0].x-x,this.points[0].y-y);for(var i=0;i<len;i++){point=this.points[i];ctx.lineTo(point.x-x,point.y-y);}return true;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Boolean} noTransform
     */_render:function(ctx,noTransform){if(!this.commonRender(ctx,noTransform)){return;}this._renderFill(ctx);this._renderStroke(ctx);},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderDashedStroke:function(ctx){var p1,p2;ctx.beginPath();for(var i=0,len=this.points.length;i<len;i++){p1=this.points[i];p2=this.points[i+1]||p1;fabric.util.drawDashedLine(ctx,p1.x,p1.y,p2.x,p2.y,this.strokeDashArray);}},/**
     * Returns complexity of an instance
     * @return {Number} complexity of this instance
     */complexity:function(){return this.get('points').length;}});/* _FROM_SVG_START_ *//**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Polyline.fromElement})
   * @static
   * @memberOf fabric.Polyline
   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement
   */fabric.Polyline.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat();/**
   * Returns fabric.Polyline instance from an SVG element
   * @static
   * @memberOf fabric.Polyline
   * @param {SVGElement} element Element to parse
   * @param {Object} [options] Options object
   * @return {fabric.Polyline} Instance of fabric.Polyline
   */fabric.Polyline.fromElement=function(element,options){if(!element){return null;}options||(options={});var points=fabric.parsePointsAttribute(element.getAttribute('points')),parsedAttributes=fabric.parseAttributes(element,fabric.Polyline.ATTRIBUTE_NAMES);return new fabric.Polyline(points,fabric.util.object.extend(parsedAttributes,options));};/* _FROM_SVG_END_ *//**
   * Returns fabric.Polyline instance from an object representation
   * @static
   * @memberOf fabric.Polyline
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created
   * @param {Boolean} [forceAsync] Force an async behaviour trying to create pattern first
   * @return {fabric.Polyline} Instance of fabric.Polyline
   */fabric.Polyline.fromObject=function(object,callback,forceAsync){return fabric.Object._fromObject('Polyline',object,callback,forceAsync,'points');};})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend;if(fabric.Polygon){fabric.warn('fabric.Polygon is already defined');return;}/**
   * Polygon class
   * @class fabric.Polygon
   * @extends fabric.Polyline
   * @see {@link fabric.Polygon#initialize} for constructor definition
   */fabric.Polygon=fabric.util.createClass(fabric.Polyline,/** @lends fabric.Polygon.prototype */{/**
     * Type of an object
     * @type String
     * @default
     */type:'polygon',/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Boolean} noTransform
     */_render:function(ctx,noTransform){if(!this.commonRender(ctx,noTransform)){return;}ctx.closePath();this._renderFill(ctx);this._renderStroke(ctx);},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderDashedStroke:function(ctx){this.callSuper('_renderDashedStroke',ctx);ctx.closePath();}});/* _FROM_SVG_START_ *//**
   * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)
   * @static
   * @memberOf fabric.Polygon
   * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement
   */fabric.Polygon.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat();/**
   * Returns {@link fabric.Polygon} instance from an SVG element
   * @static
   * @memberOf fabric.Polygon
   * @param {SVGElement} element Element to parse
   * @param {Object} [options] Options object
   * @return {fabric.Polygon} Instance of fabric.Polygon
   */fabric.Polygon.fromElement=function(element,options){if(!element){return null;}options||(options={});var points=fabric.parsePointsAttribute(element.getAttribute('points')),parsedAttributes=fabric.parseAttributes(element,fabric.Polygon.ATTRIBUTE_NAMES);return new fabric.Polygon(points,extend(parsedAttributes,options));};/* _FROM_SVG_END_ *//**
   * Returns fabric.Polygon instance from an object representation
   * @static
   * @memberOf fabric.Polygon
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created
   * @param {Boolean} [forceAsync] Force an async behaviour trying to create pattern first
   * @return {fabric.Polygon} Instance of fabric.Polygon
   */fabric.Polygon.fromObject=function(object,callback,forceAsync){return fabric.Object._fromObject('Polygon',object,callback,forceAsync,'points');};})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),min=fabric.util.array.min,max=fabric.util.array.max,extend=fabric.util.object.extend,_toString=Object.prototype.toString,drawArc=fabric.util.drawArc,commandLengths={m:2,l:2,h:1,v:1,c:6,s:4,q:4,t:2,a:7},repeatedCommands={m:'l',M:'L'};if(fabric.Path){fabric.warn('fabric.Path is already defined');return;}var stateProperties=fabric.Object.prototype.stateProperties.concat();stateProperties.push('path');var cacheProperties=fabric.Object.prototype.cacheProperties.concat();cacheProperties.push('path','fillRule');/**
   * Path class
   * @class fabric.Path
   * @extends fabric.Object
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}
   * @see {@link fabric.Path#initialize} for constructor definition
   */fabric.Path=fabric.util.createClass(fabric.Object,/** @lends fabric.Path.prototype */{/**
     * Type of an object
     * @type String
     * @default
     */type:'path',/**
     * Array of path points
     * @type Array
     * @default
     */path:null,/**
     * Minimum X from points values, necessary to offset points
     * @type Number
     * @default
     */minX:0,/**
     * Minimum Y from points values, necessary to offset points
     * @type Number
     * @default
     */minY:0,cacheProperties:cacheProperties,stateProperties:stateProperties,/**
     * Constructor
     * @param {Array|String} path Path data (sequence of coordinates and corresponding "command" tokens)
     * @param {Object} [options] Options object
     * @return {fabric.Path} thisArg
     */initialize:function(path,options){options=options||{};this.callSuper('initialize',options);if(!path){path=[];}var fromArray=_toString.call(path)==='[object Array]';this.path=fromArray?path// one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)
:path.match&&path.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);if(!this.path){return;}if(!fromArray){this.path=this._parsePath();}this._setPositionDimensions(options);},/**
     * @private
     * @param {Object} options Options object
     */_setPositionDimensions:function(options){var calcDim=this._parseDimensions();this.minX=calcDim.left;this.minY=calcDim.top;this.width=calcDim.width;this.height=calcDim.height;if(typeof options.left==='undefined'){this.left=calcDim.left+(this.originX==='center'?this.width/2:this.originX==='right'?this.width:0);}if(typeof options.top==='undefined'){this.top=calcDim.top+(this.originY==='center'?this.height/2:this.originY==='bottom'?this.height:0);}this.pathOffset=this.pathOffset||{x:this.minX+this.width/2,y:this.minY+this.height/2};},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx context to render path on
     */_renderPathCommands:function(ctx){var current,// current instruction
previous=null,subpathStartX=0,subpathStartY=0,x=0,// current x
y=0,// current y
controlX=0,// current control point x
controlY=0,// current control point y
tempX,tempY,l=-this.pathOffset.x,t=-this.pathOffset.y;if(this.group&&this.group.type==='path-group'){l=0;t=0;}ctx.beginPath();for(var i=0,len=this.path.length;i<len;++i){current=this.path[i];switch(current[0]){// first letter
case'l':// lineto, relative
x+=current[1];y+=current[2];ctx.lineTo(x+l,y+t);break;case'L':// lineto, absolute
x=current[1];y=current[2];ctx.lineTo(x+l,y+t);break;case'h':// horizontal lineto, relative
x+=current[1];ctx.lineTo(x+l,y+t);break;case'H':// horizontal lineto, absolute
x=current[1];ctx.lineTo(x+l,y+t);break;case'v':// vertical lineto, relative
y+=current[1];ctx.lineTo(x+l,y+t);break;case'V':// verical lineto, absolute
y=current[1];ctx.lineTo(x+l,y+t);break;case'm':// moveTo, relative
x+=current[1];y+=current[2];subpathStartX=x;subpathStartY=y;ctx.moveTo(x+l,y+t);break;case'M':// moveTo, absolute
x=current[1];y=current[2];subpathStartX=x;subpathStartY=y;ctx.moveTo(x+l,y+t);break;case'c':// bezierCurveTo, relative
tempX=x+current[5];tempY=y+current[6];controlX=x+current[3];controlY=y+current[4];ctx.bezierCurveTo(x+current[1]+l,// x1
y+current[2]+t,// y1
controlX+l,// x2
controlY+t,// y2
tempX+l,tempY+t);x=tempX;y=tempY;break;case'C':// bezierCurveTo, absolute
x=current[5];y=current[6];controlX=current[3];controlY=current[4];ctx.bezierCurveTo(current[1]+l,current[2]+t,controlX+l,controlY+t,x+l,y+t);break;case's':// shorthand cubic bezierCurveTo, relative
// transform to absolute x,y
tempX=x+current[3];tempY=y+current[4];if(previous[0].match(/[CcSs]/)===null){// If there is no previous command or if the previous command was not a C, c, S, or s,
// the control point is coincident with the current point
controlX=x;controlY=y;}else{// calculate reflection of previous control points
controlX=2*x-controlX;controlY=2*y-controlY;}ctx.bezierCurveTo(controlX+l,controlY+t,x+current[1]+l,y+current[2]+t,tempX+l,tempY+t);// set control point to 2nd one of this command
// "... the first control point is assumed to be
// the reflection of the second control point on
// the previous command relative to the current point."
controlX=x+current[1];controlY=y+current[2];x=tempX;y=tempY;break;case'S':// shorthand cubic bezierCurveTo, absolute
tempX=current[3];tempY=current[4];if(previous[0].match(/[CcSs]/)===null){// If there is no previous command or if the previous command was not a C, c, S, or s,
// the control point is coincident with the current point
controlX=x;controlY=y;}else{// calculate reflection of previous control points
controlX=2*x-controlX;controlY=2*y-controlY;}ctx.bezierCurveTo(controlX+l,controlY+t,current[1]+l,current[2]+t,tempX+l,tempY+t);x=tempX;y=tempY;// set control point to 2nd one of this command
// "... the first control point is assumed to be
// the reflection of the second control point on
// the previous command relative to the current point."
controlX=current[1];controlY=current[2];break;case'q':// quadraticCurveTo, relative
// transform to absolute x,y
tempX=x+current[3];tempY=y+current[4];controlX=x+current[1];controlY=y+current[2];ctx.quadraticCurveTo(controlX+l,controlY+t,tempX+l,tempY+t);x=tempX;y=tempY;break;case'Q':// quadraticCurveTo, absolute
tempX=current[3];tempY=current[4];ctx.quadraticCurveTo(current[1]+l,current[2]+t,tempX+l,tempY+t);x=tempX;y=tempY;controlX=current[1];controlY=current[2];break;case't':// shorthand quadraticCurveTo, relative
// transform to absolute x,y
tempX=x+current[1];tempY=y+current[2];if(previous[0].match(/[QqTt]/)===null){// If there is no previous command or if the previous command was not a Q, q, T or t,
// assume the control point is coincident with the current point
controlX=x;controlY=y;}else{// calculate reflection of previous control point
controlX=2*x-controlX;controlY=2*y-controlY;}ctx.quadraticCurveTo(controlX+l,controlY+t,tempX+l,tempY+t);x=tempX;y=tempY;break;case'T':tempX=current[1];tempY=current[2];if(previous[0].match(/[QqTt]/)===null){// If there is no previous command or if the previous command was not a Q, q, T or t,
// assume the control point is coincident with the current point
controlX=x;controlY=y;}else{// calculate reflection of previous control point
controlX=2*x-controlX;controlY=2*y-controlY;}ctx.quadraticCurveTo(controlX+l,controlY+t,tempX+l,tempY+t);x=tempX;y=tempY;break;case'a':// TODO: optimize this
drawArc(ctx,x+l,y+t,[current[1],current[2],current[3],current[4],current[5],current[6]+x+l,current[7]+y+t]);x+=current[6];y+=current[7];break;case'A':// TODO: optimize this
drawArc(ctx,x+l,y+t,[current[1],current[2],current[3],current[4],current[5],current[6]+l,current[7]+t]);x=current[6];y=current[7];break;case'z':case'Z':x=subpathStartX;y=subpathStartY;ctx.closePath();break;}previous=current;}},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx context to render path on
     */_render:function(ctx){this._renderPathCommands(ctx);this._renderFill(ctx);this._renderStroke(ctx);},/**
     * Returns string representation of an instance
     * @return {String} string representation of an instance
     */toString:function(){return'#<fabric.Path ('+this.complexity()+'): { "top": '+this.top+', "left": '+this.left+' }>';},/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */toObject:function(propertiesToInclude){var o=extend(this.callSuper('toObject',['sourcePath','pathOffset'].concat(propertiesToInclude)),{path:this.path.map(function(item){return item.slice();}),top:this.top,left:this.left});return o;},/**
     * Returns dataless object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */toDatalessObject:function(propertiesToInclude){var o=this.toObject(propertiesToInclude);if(this.sourcePath){o.path=this.sourcePath;}delete o.sourcePath;return o;},/* _TO_SVG_START_ *//**
     * Returns svg representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */toSVG:function(reviver){var chunks=[],markup=this._createBaseSVGMarkup(),addTransform='';for(var i=0,len=this.path.length;i<len;i++){chunks.push(this.path[i].join(' '));}var path=chunks.join(' ');if(!(this.group&&this.group.type==='path-group')){addTransform=' translate('+-this.pathOffset.x+', '+-this.pathOffset.y+') ';}markup.push('<path ',this.getSvgId(),'d="',path,'" style="',this.getSvgStyles(),'" transform="',this.getSvgTransform(),addTransform,this.getSvgTransformMatrix(),'" stroke-linecap="round" ','/>\n');return reviver?reviver(markup.join('')):markup.join('');},/* _TO_SVG_END_ *//**
     * Returns number representation of an instance complexity
     * @return {Number} complexity of this instance
     */complexity:function(){return this.path.length;},/**
     * @private
     */_parsePath:function(){var result=[],coords=[],currentPath,parsed,re=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/ig,match,coordsStr;for(var i=0,coordsParsed,len=this.path.length;i<len;i++){currentPath=this.path[i];coordsStr=currentPath.slice(1).trim();coords.length=0;while(match=re.exec(coordsStr)){coords.push(match[0]);}coordsParsed=[currentPath.charAt(0)];for(var j=0,jlen=coords.length;j<jlen;j++){parsed=parseFloat(coords[j]);if(!isNaN(parsed)){coordsParsed.push(parsed);}}var command=coordsParsed[0],commandLength=commandLengths[command.toLowerCase()],repeatedCommand=repeatedCommands[command]||command;if(coordsParsed.length-1>commandLength){for(var k=1,klen=coordsParsed.length;k<klen;k+=commandLength){result.push([command].concat(coordsParsed.slice(k,k+commandLength)));command=repeatedCommand;}}else{result.push(coordsParsed);}}return result;},/**
     * @private
     */_parseDimensions:function(){var aX=[],aY=[],current,// current instruction
previous=null,subpathStartX=0,subpathStartY=0,x=0,// current x
y=0,// current y
controlX=0,// current control point x
controlY=0,// current control point y
tempX,tempY,bounds;for(var i=0,len=this.path.length;i<len;++i){current=this.path[i];switch(current[0]){// first letter
case'l':// lineto, relative
x+=current[1];y+=current[2];bounds=[];break;case'L':// lineto, absolute
x=current[1];y=current[2];bounds=[];break;case'h':// horizontal lineto, relative
x+=current[1];bounds=[];break;case'H':// horizontal lineto, absolute
x=current[1];bounds=[];break;case'v':// vertical lineto, relative
y+=current[1];bounds=[];break;case'V':// verical lineto, absolute
y=current[1];bounds=[];break;case'm':// moveTo, relative
x+=current[1];y+=current[2];subpathStartX=x;subpathStartY=y;bounds=[];break;case'M':// moveTo, absolute
x=current[1];y=current[2];subpathStartX=x;subpathStartY=y;bounds=[];break;case'c':// bezierCurveTo, relative
tempX=x+current[5];tempY=y+current[6];controlX=x+current[3];controlY=y+current[4];bounds=fabric.util.getBoundsOfCurve(x,y,x+current[1],// x1
y+current[2],// y1
controlX,// x2
controlY,// y2
tempX,tempY);x=tempX;y=tempY;break;case'C':// bezierCurveTo, absolute
controlX=current[3];controlY=current[4];bounds=fabric.util.getBoundsOfCurve(x,y,current[1],current[2],controlX,controlY,current[5],current[6]);x=current[5];y=current[6];break;case's':// shorthand cubic bezierCurveTo, relative
// transform to absolute x,y
tempX=x+current[3];tempY=y+current[4];if(previous[0].match(/[CcSs]/)===null){// If there is no previous command or if the previous command was not a C, c, S, or s,
// the control point is coincident with the current point
controlX=x;controlY=y;}else{// calculate reflection of previous control points
controlX=2*x-controlX;controlY=2*y-controlY;}bounds=fabric.util.getBoundsOfCurve(x,y,controlX,controlY,x+current[1],y+current[2],tempX,tempY);// set control point to 2nd one of this command
// "... the first control point is assumed to be
// the reflection of the second control point on
// the previous command relative to the current point."
controlX=x+current[1];controlY=y+current[2];x=tempX;y=tempY;break;case'S':// shorthand cubic bezierCurveTo, absolute
tempX=current[3];tempY=current[4];if(previous[0].match(/[CcSs]/)===null){// If there is no previous command or if the previous command was not a C, c, S, or s,
// the control point is coincident with the current point
controlX=x;controlY=y;}else{// calculate reflection of previous control points
controlX=2*x-controlX;controlY=2*y-controlY;}bounds=fabric.util.getBoundsOfCurve(x,y,controlX,controlY,current[1],current[2],tempX,tempY);x=tempX;y=tempY;// set control point to 2nd one of this command
// "... the first control point is assumed to be
// the reflection of the second control point on
// the previous command relative to the current point."
controlX=current[1];controlY=current[2];break;case'q':// quadraticCurveTo, relative
// transform to absolute x,y
tempX=x+current[3];tempY=y+current[4];controlX=x+current[1];controlY=y+current[2];bounds=fabric.util.getBoundsOfCurve(x,y,controlX,controlY,controlX,controlY,tempX,tempY);x=tempX;y=tempY;break;case'Q':// quadraticCurveTo, absolute
controlX=current[1];controlY=current[2];bounds=fabric.util.getBoundsOfCurve(x,y,controlX,controlY,controlX,controlY,current[3],current[4]);x=current[3];y=current[4];break;case't':// shorthand quadraticCurveTo, relative
// transform to absolute x,y
tempX=x+current[1];tempY=y+current[2];if(previous[0].match(/[QqTt]/)===null){// If there is no previous command or if the previous command was not a Q, q, T or t,
// assume the control point is coincident with the current point
controlX=x;controlY=y;}else{// calculate reflection of previous control point
controlX=2*x-controlX;controlY=2*y-controlY;}bounds=fabric.util.getBoundsOfCurve(x,y,controlX,controlY,controlX,controlY,tempX,tempY);x=tempX;y=tempY;break;case'T':tempX=current[1];tempY=current[2];if(previous[0].match(/[QqTt]/)===null){// If there is no previous command or if the previous command was not a Q, q, T or t,
// assume the control point is coincident with the current point
controlX=x;controlY=y;}else{// calculate reflection of previous control point
controlX=2*x-controlX;controlY=2*y-controlY;}bounds=fabric.util.getBoundsOfCurve(x,y,controlX,controlY,controlX,controlY,tempX,tempY);x=tempX;y=tempY;break;case'a':// TODO: optimize this
bounds=fabric.util.getBoundsOfArc(x,y,current[1],current[2],current[3],current[4],current[5],current[6]+x,current[7]+y);x+=current[6];y+=current[7];break;case'A':// TODO: optimize this
bounds=fabric.util.getBoundsOfArc(x,y,current[1],current[2],current[3],current[4],current[5],current[6],current[7]);x=current[6];y=current[7];break;case'z':case'Z':x=subpathStartX;y=subpathStartY;break;}previous=current;bounds.forEach(function(point){aX.push(point.x);aY.push(point.y);});aX.push(x);aY.push(y);}var minX=min(aX)||0,minY=min(aY)||0,maxX=max(aX)||0,maxY=max(aY)||0,deltaX=maxX-minX,deltaY=maxY-minY,o={left:minX,top:minY,width:deltaX,height:deltaY};return o;}});/**
   * Creates an instance of fabric.Path from an object
   * @static
   * @memberOf fabric.Path
   * @param {Object} object
   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created
   * @param {Boolean} [forceAsync] Force an async behaviour trying to create pattern first
   */fabric.Path.fromObject=function(object,callback,forceAsync){// remove this pattern rom 2.0, accept just object.
var path;if(typeof object.path==='string'){fabric.loadSVGFromURL(object.path,function(elements){var pathUrl=object.path;path=elements[0];delete object.path;path.setOptions(object);path.setSourcePath(pathUrl);callback&&callback(path);});}else{return fabric.Object._fromObject('Path',object,callback,forceAsync,'path');}};/* _FROM_SVG_START_ *//**
   * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)
   * @static
   * @memberOf fabric.Path
   * @see http://www.w3.org/TR/SVG/paths.html#PathElement
   */fabric.Path.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat(['d']);/**
   * Creates an instance of fabric.Path from an SVG <path> element
   * @static
   * @memberOf fabric.Path
   * @param {SVGElement} element to parse
   * @param {Function} callback Callback to invoke when an fabric.Path instance is created
   * @param {Object} [options] Options object
   */fabric.Path.fromElement=function(element,callback,options){var parsedAttributes=fabric.parseAttributes(element,fabric.Path.ATTRIBUTE_NAMES);callback&&callback(new fabric.Path(parsedAttributes.d,extend(parsedAttributes,options)));};/* _FROM_SVG_END_ *//**
   * Indicates that instances of this type are async
   * @static
   * @memberOf fabric.Path
   * @type Boolean
   * @default
   */fabric.Path.async=true;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend;if(fabric.PathGroup){fabric.warn('fabric.PathGroup is already defined');return;}/**
   * Path group class
   * @class fabric.PathGroup
   * @extends fabric.Path
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}
   * @see {@link fabric.PathGroup#initialize} for constructor definition
   */fabric.PathGroup=fabric.util.createClass(fabric.Object,/** @lends fabric.PathGroup.prototype */{/**
     * Type of an object
     * @type String
     * @default
     */type:'path-group',/**
     * Fill value
     * @type String
     * @default
     */fill:'',/**
     * Pathgroups are container, do not render anything on theyr own, ence no cache properties
     * @type Boolean
     * @default
     */cacheProperties:[],/**
     * Constructor
     * @param {Array} paths
     * @param {Object} [options] Options object
     * @return {fabric.PathGroup} thisArg
     */initialize:function(paths,options){options=options||{};this.paths=paths||[];for(var i=this.paths.length;i--;){this.paths[i].group=this;}if(options.toBeParsed){this.parseDimensionsFromPaths(options);delete options.toBeParsed;}this.setOptions(options);this.setCoords();},/**
     * Calculate width and height based on paths contained
     */parseDimensionsFromPaths:function(options){var points,p,xC=[],yC=[],path,height,width,m;for(var j=this.paths.length;j--;){path=this.paths[j];height=path.height+path.strokeWidth;width=path.width+path.strokeWidth;points=[{x:path.left,y:path.top},{x:path.left+width,y:path.top},{x:path.left,y:path.top+height},{x:path.left+width,y:path.top+height}];m=this.paths[j].transformMatrix;for(var i=0;i<points.length;i++){p=points[i];if(m){p=fabric.util.transformPoint(p,m,false);}xC.push(p.x);yC.push(p.y);}}options.width=Math.max.apply(null,xC);options.height=Math.max.apply(null,yC);},/**
     * Execute the drawing operation for an object on a specified context
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Boolean} [noTransform] When true, context is not transformed
     */drawObject:function(ctx){ctx.save();ctx.translate(-this.width/2,-this.height/2);for(var i=0,l=this.paths.length;i<l;++i){this.paths[i].render(ctx,true);}ctx.restore();},/**
     * Decide if the object should cache or not.
     * objectCaching is a global flag, wins over everything
     * needsItsOwnCache should be used when the object drawing method requires
     * a cache step. None of the fabric classes requires it.
     * Generally you do not cache objects in groups because the group outside is cached.
     * @return {Boolean}
     */shouldCache:function(){var parentCache=this.objectCaching&&(!this.group||this.needsItsOwnCache()||!this.group.isCaching());this.caching=parentCache;if(parentCache){for(var i=0,len=this.paths.length;i<len;i++){if(this.paths[i].willDrawShadow()){this.caching=false;return false;}}}return parentCache;},/**
     * Check if this object or a child object will cast a shadow
     * @return {Boolean}
     */willDrawShadow:function(){if(this.shadow){return true;}for(var i=0,len=this.paths.length;i<len;i++){if(this.paths[i].willDrawShadow()){return true;}}return false;},/**
     * Check if this group or its parent group are caching, recursively up
     * @return {Boolean}
     */isCaching:function(){return this.caching||this.group&&this.group.isCaching();},/**
     * Check if cache is dirty
     */isCacheDirty:function(){if(this.callSuper('isCacheDirty')){return true;}if(!this.statefullCache){return false;}for(var i=0,len=this.paths.length;i<len;i++){if(this.paths[i].isCacheDirty(true)){if(this._cacheCanvas){var x=this.cacheWidth/this.zoomX,y=this.cacheHeight/this.zoomY;this._cacheContext.clearRect(-x/2,-y/2,x,y);}return true;}}return false;},/**
     * Sets certain property to a certain value
     * @param {String} prop
     * @param {*} value
     * @return {fabric.PathGroup} thisArg
     */_set:function(prop,value){if(prop==='fill'&&value&&this.isSameColor()){var i=this.paths.length;while(i--){this.paths[i]._set(prop,value);}}return this.callSuper('_set',prop,value);},/**
     * Returns object representation of this path group
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */toObject:function(propertiesToInclude){var pathsToObject=this.paths.map(function(path){var originalDefaults=path.includeDefaultValues;path.includeDefaultValues=path.group.includeDefaultValues;var obj=path.toObject(propertiesToInclude);path.includeDefaultValues=originalDefaults;return obj;});var o=extend(this.callSuper('toObject',['sourcePath'].concat(propertiesToInclude)),{paths:pathsToObject});return o;},/**
     * Returns dataless object representation of this path group
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} dataless object representation of an instance
     */toDatalessObject:function(propertiesToInclude){var o=this.toObject(propertiesToInclude);if(this.sourcePath){o.paths=this.sourcePath;}return o;},/* _TO_SVG_START_ *//**
     * Returns svg representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */toSVG:function(reviver){var objects=this.getObjects(),p=this.getPointByOrigin('left','top'),translatePart='translate('+p.x+' '+p.y+')',markup=this._createBaseSVGMarkup();markup.push('<g ',this.getSvgId(),'style="',this.getSvgStyles(),'" ','transform="',this.getSvgTransformMatrix(),translatePart,this.getSvgTransform(),'" ','>\n');for(var i=0,len=objects.length;i<len;i++){markup.push('\t',objects[i].toSVG(reviver));}markup.push('</g>\n');return reviver?reviver(markup.join('')):markup.join('');},/* _TO_SVG_END_ *//**
     * Returns a string representation of this path group
     * @return {String} string representation of an object
     */toString:function(){return'#<fabric.PathGroup ('+this.complexity()+'): { top: '+this.top+', left: '+this.left+' }>';},/**
     * Returns true if all paths in this group are of same color
     * @return {Boolean} true if all paths are of the same color (`fill`)
     */isSameColor:function(){var firstPathFill=this.getObjects()[0].get('fill')||'';if(typeof firstPathFill!=='string'){return false;}firstPathFill=firstPathFill.toLowerCase();return this.getObjects().every(function(path){var pathFill=path.get('fill')||'';return typeof pathFill==='string'&&pathFill.toLowerCase()===firstPathFill;});},/**
     * Returns number representation of object's complexity
     * @return {Number} complexity
     */complexity:function(){return this.paths.reduce(function(total,path){return total+(path&&path.complexity?path.complexity():0);},0);},/**
     * Returns all paths in this path group
     * @return {Array} array of path objects included in this path group
     */getObjects:function(){return this.paths;}});/**
   * Creates fabric.PathGroup instance from an object representation
   * @static
   * @memberOf fabric.PathGroup
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.PathGroup instance is created
   */fabric.PathGroup.fromObject=function(object,callback){var originalPaths=object.paths;delete object.paths;if(typeof originalPaths==='string'){fabric.loadSVGFromURL(originalPaths,function(elements){var pathUrl=originalPaths;var pathGroup=fabric.util.groupSVGElements(elements,object,pathUrl);object.paths=originalPaths;callback(pathGroup);});}else{fabric.util.enlivenObjects(originalPaths,function(enlivenedObjects){var pathGroup=new fabric.PathGroup(enlivenedObjects,object);object.paths=originalPaths;callback(pathGroup);});}};/**
   * Indicates that instances of this type are async
   * @static
   * @memberOf fabric.PathGroup
   * @type Boolean
   * @default
   */fabric.PathGroup.async=true;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,min=fabric.util.array.min,max=fabric.util.array.max;if(fabric.Group){return;}// lock-related properties, for use in fabric.Group#get
// to enable locking behavior on group
// when one of its objects has lock-related properties set
var _lockProperties={lockMovementX:true,lockMovementY:true,lockRotation:true,lockScalingX:true,lockScalingY:true,lockUniScaling:true};/**
   * Group class
   * @class fabric.Group
   * @extends fabric.Object
   * @mixes fabric.Collection
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}
   * @see {@link fabric.Group#initialize} for constructor definition
   */fabric.Group=fabric.util.createClass(fabric.Object,fabric.Collection,/** @lends fabric.Group.prototype */{/**
     * Type of an object
     * @type String
     * @default
     */type:'group',/**
     * Width of stroke
     * @type Number
     * @default
     */strokeWidth:0,/**
     * Indicates if click events should also check for subtargets
     * @type Boolean
     * @default
     */subTargetCheck:false,/**
     * Groups are container, do not render anything on theyr own, ence no cache properties
     * @type Boolean
     * @default
     */cacheProperties:[],/**
     * Constructor
     * @param {Object} objects Group objects
     * @param {Object} [options] Options object
     * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.
     * @return {Object} thisArg
     */initialize:function(objects,options,isAlreadyGrouped){options=options||{};this._objects=[];// if objects enclosed in a group have been grouped already,
// we cannot change properties of objects.
// Thus we need to set options to group without objects,
// because delegatedProperties propagate to objects.
isAlreadyGrouped&&this.callSuper('initialize',options);this._objects=objects||[];for(var i=this._objects.length;i--;){this._objects[i].group=this;}if(options.originX){this.originX=options.originX;}if(options.originY){this.originY=options.originY;}if(isAlreadyGrouped){// do not change coordinate of objects enclosed in a group,
// because objects coordinate system have been group coodinate system already.
this._updateObjectsCoords(true);}else{this._calcBounds();this._updateObjectsCoords();this.callSuper('initialize',options);}this.setCoords();this.saveCoords();},/**
     * @private
     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change
     */_updateObjectsCoords:function(skipCoordsChange){var center=this.getCenterPoint();for(var i=this._objects.length;i--;){this._updateObjectCoords(this._objects[i],center,skipCoordsChange);}},/**
     * @private
     * @param {Object} object
     * @param {fabric.Point} center, current center of group.
     * @param {Boolean} [skipCoordsChange] if true, coordinates of object dose not change
     */_updateObjectCoords:function(object,center,skipCoordsChange){// do not display corners of objects enclosed in a group
object.__origHasControls=object.hasControls;object.hasControls=false;if(skipCoordsChange){return;}var objectLeft=object.getLeft(),objectTop=object.getTop(),ignoreZoom=true,skipAbsolute=true;object.set({left:objectLeft-center.x,top:objectTop-center.y});object.setCoords(ignoreZoom,skipAbsolute);},/**
     * Returns string represenation of a group
     * @return {String}
     */toString:function(){return'#<fabric.Group: ('+this.complexity()+')>';},/**
     * Adds an object to a group; Then recalculates group's dimension, position.
     * @param {Object} object
     * @return {fabric.Group} thisArg
     * @chainable
     */addWithUpdate:function(object){this._restoreObjectsState();fabric.util.resetObjectTransform(this);if(object){this._objects.push(object);object.group=this;object._set('canvas',this.canvas);}// since _restoreObjectsState set objects inactive
this.forEachObject(this._setObjectActive,this);this._calcBounds();this._updateObjectsCoords();this.setCoords();this.dirty=true;return this;},/**
     * @private
     */_setObjectActive:function(object){object.set('active',true);object.group=this;},/**
     * Removes an object from a group; Then recalculates group's dimension, position.
     * @param {Object} object
     * @return {fabric.Group} thisArg
     * @chainable
     */removeWithUpdate:function(object){this._restoreObjectsState();fabric.util.resetObjectTransform(this);// since _restoreObjectsState set objects inactive
this.forEachObject(this._setObjectActive,this);this.remove(object);this._calcBounds();this._updateObjectsCoords();this.setCoords();this.dirty=true;return this;},/**
     * @private
     */_onObjectAdded:function(object){this.dirty=true;object.group=this;object._set('canvas',this.canvas);},/**
     * @private
     */_onObjectRemoved:function(object){this.dirty=true;delete object.group;object.set('active',false);},/**
     * Properties that are delegated to group objects when reading/writing
     * @param {Object} delegatedProperties
     */delegatedProperties:{fill:true,stroke:true,strokeWidth:true,fontFamily:true,fontWeight:true,fontSize:true,fontStyle:true,lineHeight:true,textDecoration:true,textAlign:true,backgroundColor:true},/**
     * @private
     */_set:function(key,value){var i=this._objects.length;if(this.delegatedProperties[key]||key==='canvas'){while(i--){this._objects[i].set(key,value);}}else{while(i--){this._objects[i].setOnGroup(key,value);}}this.callSuper('_set',key,value);},/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */toObject:function(propertiesToInclude){var objsToObject=this.getObjects().map(function(obj){var originalDefaults=obj.includeDefaultValues;obj.includeDefaultValues=obj.group.includeDefaultValues;var _obj=obj.toObject(propertiesToInclude);obj.includeDefaultValues=originalDefaults;return _obj;});return extend(this.callSuper('toObject',propertiesToInclude),{objects:objsToObject});},/**
     * Returns object representation of an instance, in dataless mode.
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */toDatalessObject:function(propertiesToInclude){var objsToObject=this.getObjects().map(function(obj){var originalDefaults=obj.includeDefaultValues;obj.includeDefaultValues=obj.group.includeDefaultValues;var _obj=obj.toDatalessObject(propertiesToInclude);obj.includeDefaultValues=originalDefaults;return _obj;});return extend(this.callSuper('toDatalessObject',propertiesToInclude),{objects:objsToObject});},/**
     * Renders instance on a given context
     * @param {CanvasRenderingContext2D} ctx context to render instance on
     */render:function(ctx){this._transformDone=true;this.callSuper('render',ctx);this._transformDone=false;},/**
     * Decide if the object should cache or not.
     * objectCaching is a global flag, wins over everything
     * needsItsOwnCache should be used when the object drawing method requires
     * a cache step. None of the fabric classes requires it.
     * Generally you do not cache objects in groups because the group outside is cached.
     * @return {Boolean}
     */shouldCache:function(){var parentCache=this.objectCaching&&(!this.group||this.needsItsOwnCache()||!this.group.isCaching());this.caching=parentCache;if(parentCache){for(var i=0,len=this._objects.length;i<len;i++){if(this._objects[i].willDrawShadow()){this.caching=false;return false;}}}return parentCache;},/**
     * Check if this object or a child object will cast a shadow
     * @return {Boolean}
     */willDrawShadow:function(){if(this.callSuper('willDrawShadow')){return true;}for(var i=0,len=this._objects.length;i<len;i++){if(this._objects[i].willDrawShadow()){return true;}}return false;},/**
     * Check if this group or its parent group are caching, recursively up
     * @return {Boolean}
     */isCaching:function(){return this.caching||this.group&&this.group.isCaching();},/**
     * Execute the drawing operation for an object on a specified context
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Boolean} [noTransform] When true, context is not transformed
     */drawObject:function(ctx){for(var i=0,len=this._objects.length;i<len;i++){this._renderObject(this._objects[i],ctx);}},/**
     * Check if cache is dirty
     */isCacheDirty:function(){if(this.callSuper('isCacheDirty')){return true;}if(!this.statefullCache){return false;}for(var i=0,len=this._objects.length;i<len;i++){if(this._objects[i].isCacheDirty(true)){if(this._cacheCanvas){// if this group has not a cache canvas there is nothing to clean
var x=this.cacheWidth/this.zoomX,y=this.cacheHeight/this.zoomY;this._cacheContext.clearRect(-x/2,-y/2,x,y);}return true;}}return false;},/**
     * Renders controls and borders for the object
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Boolean} [noTransform] When true, context is not transformed
     */_renderControls:function(ctx,noTransform){ctx.save();ctx.globalAlpha=this.isMoving?this.borderOpacityWhenMoving:1;this.callSuper('_renderControls',ctx,noTransform);for(var i=0,len=this._objects.length;i<len;i++){this._objects[i]._renderControls(ctx);}ctx.restore();},/**
     * @private
     */_renderObject:function(object,ctx){// do not render if object is not visible
if(!object.visible){return;}var originalHasRotatingPoint=object.hasRotatingPoint;object.hasRotatingPoint=false;object.render(ctx);object.hasRotatingPoint=originalHasRotatingPoint;},/**
     * Retores original state of each of group objects (original state is that which was before group was created).
     * @private
     * @return {fabric.Group} thisArg
     * @chainable
     */_restoreObjectsState:function(){this._objects.forEach(this._restoreObjectState,this);return this;},/**
     * Realises the transform from this group onto the supplied object
     * i.e. it tells you what would happen if the supplied object was in
     * the group, and then the group was destroyed. It mutates the supplied
     * object.
     * @param {fabric.Object} object
     * @return {fabric.Object} transformedObject
     */realizeTransform:function(object){var matrix=object.calcTransformMatrix(),options=fabric.util.qrDecompose(matrix),center=new fabric.Point(options.translateX,options.translateY);object.flipX=false;object.flipY=false;object.set('scaleX',options.scaleX);object.set('scaleY',options.scaleY);object.skewX=options.skewX;object.skewY=options.skewY;object.angle=options.angle;object.setPositionByOrigin(center,'center','center');return object;},/**
     * Restores original state of a specified object in group
     * @private
     * @param {fabric.Object} object
     * @return {fabric.Group} thisArg
     */_restoreObjectState:function(object){this.realizeTransform(object);object.setCoords();object.hasControls=object.__origHasControls;delete object.__origHasControls;object.set('active',false);delete object.group;return this;},/**
     * Destroys a group (restoring state of its objects)
     * @return {fabric.Group} thisArg
     * @chainable
     */destroy:function(){// when group is destroyed objects needs to get a repaint to be eventually
// displayed on canvas.
this._objects.forEach(function(object){object.set('dirty',true);});return this._restoreObjectsState();},/**
     * Saves coordinates of this instance (to be used together with `hasMoved`)
     * @saveCoords
     * @return {fabric.Group} thisArg
     * @chainable
     */saveCoords:function(){this._originalLeft=this.get('left');this._originalTop=this.get('top');return this;},/**
     * Checks whether this group was moved (since `saveCoords` was called last)
     * @return {Boolean} true if an object was moved (since fabric.Group#saveCoords was called)
     */hasMoved:function(){return this._originalLeft!==this.get('left')||this._originalTop!==this.get('top');},/**
     * Sets coordinates of all objects inside group
     * @return {fabric.Group} thisArg
     * @chainable
     */setObjectsCoords:function(){var ignoreZoom=true,skipAbsolute=true;this.forEachObject(function(object){object.setCoords(ignoreZoom,skipAbsolute);});return this;},/**
     * @private
     */_calcBounds:function(onlyWidthHeight){var aX=[],aY=[],o,prop,props=['tr','br','bl','tl'],i=0,iLen=this._objects.length,j,jLen=props.length,ignoreZoom=true;for(;i<iLen;++i){o=this._objects[i];o.setCoords(ignoreZoom);for(j=0;j<jLen;j++){prop=props[j];aX.push(o.oCoords[prop].x);aY.push(o.oCoords[prop].y);}}this.set(this._getBounds(aX,aY,onlyWidthHeight));},/**
     * @private
     */_getBounds:function(aX,aY,onlyWidthHeight){var minXY=new fabric.Point(min(aX),min(aY)),maxXY=new fabric.Point(max(aX),max(aY)),obj={width:maxXY.x-minXY.x||0,height:maxXY.y-minXY.y||0};if(!onlyWidthHeight){obj.left=minXY.x||0;obj.top=minXY.y||0;if(this.originX==='center'){obj.left+=obj.width/2;}if(this.originX==='right'){obj.left+=obj.width;}if(this.originY==='center'){obj.top+=obj.height/2;}if(this.originY==='bottom'){obj.top+=obj.height;}}return obj;},/* _TO_SVG_START_ *//**
     * Returns svg representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */toSVG:function(reviver){var markup=this._createBaseSVGMarkup();markup.push('<g ',this.getSvgId(),'transform="',/* avoiding styles intentionally */this.getSvgTransform(),this.getSvgTransformMatrix(),'" style="',this.getSvgFilter(),'">\n');for(var i=0,len=this._objects.length;i<len;i++){markup.push('\t',this._objects[i].toSVG(reviver));}markup.push('</g>\n');return reviver?reviver(markup.join('')):markup.join('');},/* _TO_SVG_END_ *//**
     * Returns requested property
     * @param {String} prop Property to get
     * @return {*}
     */get:function(prop){if(prop in _lockProperties){if(this[prop]){return this[prop];}else{for(var i=0,len=this._objects.length;i<len;i++){if(this._objects[i][prop]){return true;}}return false;}}else{if(prop in this.delegatedProperties){return this._objects[0]&&this._objects[0].get(prop);}return this[prop];}}});/**
   * Returns {@link fabric.Group} instance from an object representation
   * @static
   * @memberOf fabric.Group
   * @param {Object} object Object to create a group from
   * @param {Function} [callback] Callback to invoke when an group instance is created
   */fabric.Group.fromObject=function(object,callback){fabric.util.enlivenObjects(object.objects,function(enlivenedObjects){var options=fabric.util.object.clone(object,true);delete options.objects;callback&&callback(new fabric.Group(enlivenedObjects,options,true));});};/**
   * Indicates that instances of this type are async
   * @static
   * @memberOf fabric.Group
   * @type Boolean
   * @default
   */fabric.Group.async=true;})( true?exports:this);(function(global){'use strict';var extend=fabric.util.object.extend;if(!global.fabric){global.fabric={};}if(global.fabric.Image){fabric.warn('fabric.Image is already defined.');return;}var stateProperties=fabric.Object.prototype.stateProperties.concat();stateProperties.push('alignX','alignY','meetOrSlice');/**
   * Image class
   * @class fabric.Image
   * @extends fabric.Object
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}
   * @see {@link fabric.Image#initialize} for constructor definition
   */fabric.Image=fabric.util.createClass(fabric.Object,/** @lends fabric.Image.prototype */{/**
     * Type of an object
     * @type String
     * @default
     */type:'image',/**
     * crossOrigin value (one of "", "anonymous", "use-credentials")
     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes
     * @type String
     * @default
     */crossOrigin:'',/**
     * AlignX value, part of preserveAspectRatio (one of "none", "mid", "min", "max")
     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute
     * This parameter defines how the picture is aligned to its viewport when image element width differs from image width.
     * @type String
     * @default
     */alignX:'none',/**
     * AlignY value, part of preserveAspectRatio (one of "none", "mid", "min", "max")
     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute
     * This parameter defines how the picture is aligned to its viewport when image element height differs from image height.
     * @type String
     * @default
     */alignY:'none',/**
     * meetOrSlice value, part of preserveAspectRatio  (one of "meet", "slice").
     * if meet the image is always fully visibile, if slice the viewport is always filled with image.
     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute
     * @type String
     * @default
     */meetOrSlice:'meet',/**
     * Width of a stroke.
     * For image quality a stroke multiple of 2 gives better results.
     * @type Number
     * @default
     */strokeWidth:0,/**
     * private
     * contains last value of scaleX to detect
     * if the Image got resized after the last Render
     * @type Number
     */_lastScaleX:1,/**
     * private
     * contains last value of scaleY to detect
     * if the Image got resized after the last Render
     * @type Number
     */_lastScaleY:1,/**
     * minimum scale factor under which any resizeFilter is triggered to resize the image
     * 0 will disable the automatic resize. 1 will trigger automatically always.
     * number bigger than 1 can be used in case we want to scale with some filter above
     * the natural image dimensions
     * @type Number
     */minimumScaleTrigger:0.5,/**
     * List of properties to consider when checking if
     * state of an object is changed ({@link fabric.Object#hasStateChanged})
     * as well as for history (undo/redo) purposes
     * @type Array
     */stateProperties:stateProperties,/**
     * When `true`, object is cached on an additional canvas.
     * default to false for images
     * since 1.7.0
     * @type Boolean
     * @default
     */objectCaching:false,/**
     * Constructor
     * @param {HTMLImageElement | String} element Image element
     * @param {Object} [options] Options object
     * @param {function} [callback] callback function to call after eventual filters applied.
     * @return {fabric.Image} thisArg
     */initialize:function(element,options,callback){options||(options={});this.filters=[];this.resizeFilters=[];this.callSuper('initialize',options);this._initElement(element,options,callback);},/**
     * Returns image element which this instance if based on
     * @return {HTMLImageElement} Image element
     */getElement:function(){return this._element;},/**
     * Sets image element for this instance to a specified one.
     * If filters defined they are applied to new image.
     * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.
     * @param {HTMLImageElement} element
     * @param {Function} [callback] Callback is invoked when all filters have been applied and new image is generated
     * @param {Object} [options] Options object
     * @return {fabric.Image} thisArg
     * @chainable
     */setElement:function(element,callback,options){var _callback,_this;this._element=element;this._originalElement=element;this._initConfig(options);if(this.resizeFilters.length===0){_callback=callback;}else{_this=this;_callback=function(){_this.applyFilters(callback,_this.resizeFilters,_this._filteredEl||_this._originalElement,true);};}if(this.filters.length!==0){this.applyFilters(_callback);}else if(_callback){_callback(this);}return this;},/**
     * Sets crossOrigin value (on an instance and corresponding image element)
     * @return {fabric.Image} thisArg
     * @chainable
     */setCrossOrigin:function(value){this.crossOrigin=value;this._element.crossOrigin=value;return this;},/**
     * Returns original size of an image
     * @return {Object} Object with "width" and "height" properties
     */getOriginalSize:function(){var element=this.getElement();return{width:element.width,height:element.height};},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_stroke:function(ctx){if(!this.stroke||this.strokeWidth===0){return;}var w=this.width/2,h=this.height/2;ctx.beginPath();ctx.moveTo(-w,-h);ctx.lineTo(w,-h);ctx.lineTo(w,h);ctx.lineTo(-w,h);ctx.lineTo(-w,-h);ctx.closePath();},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderDashedStroke:function(ctx){var x=-this.width/2,y=-this.height/2,w=this.width,h=this.height;ctx.save();this._setStrokeStyles(ctx);ctx.beginPath();fabric.util.drawDashedLine(ctx,x,y,x+w,y,this.strokeDashArray);fabric.util.drawDashedLine(ctx,x+w,y,x+w,y+h,this.strokeDashArray);fabric.util.drawDashedLine(ctx,x+w,y+h,x,y+h,this.strokeDashArray);fabric.util.drawDashedLine(ctx,x,y+h,x,y,this.strokeDashArray);ctx.closePath();ctx.restore();},/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */toObject:function(propertiesToInclude){var filters=[],resizeFilters=[],scaleX=1,scaleY=1;this.filters.forEach(function(filterObj){if(filterObj){if(filterObj.type==='Resize'){scaleX*=filterObj.scaleX;scaleY*=filterObj.scaleY;}filters.push(filterObj.toObject());}});this.resizeFilters.forEach(function(filterObj){filterObj&&resizeFilters.push(filterObj.toObject());});var object=extend(this.callSuper('toObject',['crossOrigin','alignX','alignY','meetOrSlice'].concat(propertiesToInclude)),{src:this.getSrc(),filters:filters,resizeFilters:resizeFilters});object.width/=scaleX;object.height/=scaleY;return object;},/* _TO_SVG_START_ *//**
     * Returns SVG representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */toSVG:function(reviver){var markup=this._createBaseSVGMarkup(),x=-this.width/2,y=-this.height/2,preserveAspectRatio='none',filtered=true;if(this.group&&this.group.type==='path-group'){x=this.left;y=this.top;}if(this.alignX!=='none'&&this.alignY!=='none'){preserveAspectRatio='x'+this.alignX+'Y'+this.alignY+' '+this.meetOrSlice;}markup.push('<g transform="',this.getSvgTransform(),this.getSvgTransformMatrix(),'">\n','<image ',this.getSvgId(),'xlink:href="',this.getSvgSrc(filtered),'" x="',x,'" y="',y,'" style="',this.getSvgStyles(),// we're essentially moving origin of transformation from top/left corner to the center of the shape
// by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left
// so that object's center aligns with container's left/top
'" width="',this.width,'" height="',this.height,'" preserveAspectRatio="',preserveAspectRatio,'"','></image>\n');if(this.stroke||this.strokeDashArray){var origFill=this.fill;this.fill=null;markup.push('<rect ','x="',x,'" y="',y,'" width="',this.width,'" height="',this.height,'" style="',this.getSvgStyles(),'"/>\n');this.fill=origFill;}markup.push('</g>\n');return reviver?reviver(markup.join('')):markup.join('');},/* _TO_SVG_END_ *//**
     * Returns source of an image
     * @param {Boolean} filtered indicates if the src is needed for svg
     * @return {String} Source of an image
     */getSrc:function(filtered){var element=filtered?this._element:this._originalElement;if(element){return fabric.isLikelyNode?element._src:element.src;}else{return this.src||'';}},/**
     * Sets source of an image
     * @param {String} src Source string (URL)
     * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)
     * @param {Object} [options] Options object
     * @return {fabric.Image} thisArg
     * @chainable
     */setSrc:function(src,callback,options){fabric.util.loadImage(src,function(img){return this.setElement(img,callback,options);},this,options&&options.crossOrigin);},/**
     * Returns string representation of an instance
     * @return {String} String representation of an instance
     */toString:function(){return'#<fabric.Image: { src: "'+this.getSrc()+'" }>';},/**
     * Applies filters assigned to this image (from "filters" array)
     * @method applyFilters
     * @param {Function} callback Callback is invoked when all filters have been applied and new image is generated
     * @param {Array} filters to be applied
     * @param {fabric.Image} imgElement image to filter ( default to this._element )
     * @param {Boolean} forResizing
     * @return {CanvasElement} canvasEl to be drawn immediately
     * @chainable
     */applyFilters:function(callback,filters,imgElement,forResizing){filters=filters||this.filters;imgElement=imgElement||this._originalElement;if(!imgElement){return;}var replacement=fabric.util.createImage(),retinaScaling=this.canvas?this.canvas.getRetinaScaling():fabric.devicePixelRatio,minimumScale=this.minimumScaleTrigger/retinaScaling,_this=this,scaleX,scaleY;if(filters.length===0){this._element=imgElement;callback&&callback(this);return imgElement;}var canvasEl=fabric.util.createCanvasElement();canvasEl.width=imgElement.width;canvasEl.height=imgElement.height;canvasEl.getContext('2d').drawImage(imgElement,0,0,imgElement.width,imgElement.height);filters.forEach(function(filter){if(!filter){return;}if(forResizing){scaleX=_this.scaleX<minimumScale?_this.scaleX:1;scaleY=_this.scaleY<minimumScale?_this.scaleY:1;if(scaleX*retinaScaling<1){scaleX*=retinaScaling;}if(scaleY*retinaScaling<1){scaleY*=retinaScaling;}}else{scaleX=filter.scaleX;scaleY=filter.scaleY;}filter.applyTo(canvasEl,scaleX,scaleY);if(!forResizing&&filter.type==='Resize'){_this.width*=filter.scaleX;_this.height*=filter.scaleY;}});/** @ignore */replacement.width=canvasEl.width;replacement.height=canvasEl.height;if(fabric.isLikelyNode){replacement.src=canvasEl.toBuffer(undefined,fabric.Image.pngCompression);// onload doesn't fire in some node versions, so we invoke callback manually
_this._element=replacement;!forResizing&&(_this._filteredEl=replacement);callback&&callback(_this);}else{replacement.onload=function(){_this._element=replacement;!forResizing&&(_this._filteredEl=replacement);callback&&callback(_this);replacement.onload=canvasEl=null;};replacement.src=canvasEl.toDataURL('image/png');}return canvasEl;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Boolean} noTransform
     */_render:function(ctx,noTransform){var x,y,imageMargins=this._findMargins(),elementToDraw;x=noTransform?this.left:-this.width/2;y=noTransform?this.top:-this.height/2;if(this.meetOrSlice==='slice'){ctx.beginPath();ctx.rect(x,y,this.width,this.height);ctx.clip();}if(this.isMoving===false&&this.resizeFilters.length&&this._needsResize()){this._lastScaleX=this.scaleX;this._lastScaleY=this.scaleY;elementToDraw=this.applyFilters(null,this.resizeFilters,this._filteredEl||this._originalElement,true);}else{elementToDraw=this._element;}elementToDraw&&ctx.drawImage(elementToDraw,x+imageMargins.marginX,y+imageMargins.marginY,imageMargins.width,imageMargins.height);this._stroke(ctx);this._renderStroke(ctx);},/**
     * @private, needed to check if image needs resize
     */_needsResize:function(){return this.scaleX!==this._lastScaleX||this.scaleY!==this._lastScaleY;},/**
     * @private
     */_findMargins:function(){var width=this.width,height=this.height,scales,scale,marginX=0,marginY=0;if(this.alignX!=='none'||this.alignY!=='none'){scales=[this.width/this._element.width,this.height/this._element.height];scale=this.meetOrSlice==='meet'?Math.min.apply(null,scales):Math.max.apply(null,scales);width=this._element.width*scale;height=this._element.height*scale;if(this.alignX==='Mid'){marginX=(this.width-width)/2;}if(this.alignX==='Max'){marginX=this.width-width;}if(this.alignY==='Mid'){marginY=(this.height-height)/2;}if(this.alignY==='Max'){marginY=this.height-height;}}return{width:width,height:height,marginX:marginX,marginY:marginY};},/**
     * @private
     */_resetWidthHeight:function(){var element=this.getElement();this.set('width',element.width);this.set('height',element.height);},/**
     * The Image class's initialization method. This method is automatically
     * called by the constructor.
     * @private
     * @param {HTMLImageElement|String} element The element representing the image
     * @param {Object} [options] Options object
     */_initElement:function(element,options,callback){this.setElement(fabric.util.getById(element),callback,options);fabric.util.addClass(this.getElement(),fabric.Image.CSS_CANVAS);},/**
     * @private
     * @param {Object} [options] Options object
     */_initConfig:function(options){options||(options={});this.setOptions(options);this._setWidthHeight(options);if(this._element&&this.crossOrigin){this._element.crossOrigin=this.crossOrigin;}},/**
     * @private
     * @param {Array} filters to be initialized
     * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created
     */_initFilters:function(filters,callback){if(filters&&filters.length){fabric.util.enlivenObjects(filters,function(enlivenedObjects){callback&&callback(enlivenedObjects);},'fabric.Image.filters');}else{callback&&callback();}},/**
     * @private
     * @param {Object} [options] Object with width/height properties
     */_setWidthHeight:function(options){this.width='width'in options?options.width:this.getElement()?this.getElement().width||0:0;this.height='height'in options?options.height:this.getElement()?this.getElement().height||0:0;}});/**
   * Default CSS class name for canvas
   * @static
   * @type String
   * @default
   */fabric.Image.CSS_CANVAS='canvas-img';/**
   * Alias for getSrc
   * @static
   */fabric.Image.prototype.getSvgSrc=fabric.Image.prototype.getSrc;/**
   * Creates an instance of fabric.Image from its object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} callback Callback to invoke when an image instance is created
   */fabric.Image.fromObject=function(object,callback){fabric.util.loadImage(object.src,function(img,error){if(error){callback&&callback(null,error);return;}fabric.Image.prototype._initFilters.call(object,object.filters,function(filters){object.filters=filters||[];fabric.Image.prototype._initFilters.call(object,object.resizeFilters,function(resizeFilters){object.resizeFilters=resizeFilters||[];return new fabric.Image(img,object,callback);});});},null,object.crossOrigin);};/**
   * Creates an instance of fabric.Image from an URL string
   * @static
   * @param {String} url URL to create an image from
   * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument)
   * @param {Object} [imgOptions] Options object
   */fabric.Image.fromURL=function(url,callback,imgOptions){fabric.util.loadImage(url,function(img){callback&&callback(new fabric.Image(img,imgOptions));},null,imgOptions&&imgOptions.crossOrigin);};/* _FROM_SVG_START_ *//**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})
   * @static
   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}
   */fabric.Image.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat('x y width height preserveAspectRatio xlink:href crossOrigin'.split(' '));/**
   * Returns {@link fabric.Image} instance from an SVG element
   * @static
   * @param {SVGElement} element Element to parse
   * @param {Function} callback Callback to execute when fabric.Image object is created
   * @param {Object} [options] Options object
   * @return {fabric.Image} Instance of fabric.Image
   */fabric.Image.fromElement=function(element,callback,options){var parsedAttributes=fabric.parseAttributes(element,fabric.Image.ATTRIBUTE_NAMES),preserveAR;if(parsedAttributes.preserveAspectRatio){preserveAR=fabric.util.parsePreserveAspectRatioAttribute(parsedAttributes.preserveAspectRatio);extend(parsedAttributes,preserveAR);}fabric.Image.fromURL(parsedAttributes['xlink:href'],callback,extend(options?fabric.util.object.clone(options):{},parsedAttributes));};/* _FROM_SVG_END_ *//**
   * Indicates that instances of this type are async
   * @static
   * @type Boolean
   * @default
   */fabric.Image.async=true;/**
   * Indicates compression level used when generating PNG under Node (in applyFilters). Any of 0-9
   * @static
   * @type Number
   * @default
   */fabric.Image.pngCompression=1;})( true?exports:this);fabric.util.object.extend(fabric.Object.prototype,/** @lends fabric.Object.prototype */{/**
   * @private
   * @return {Number} angle value
   */_getAngleValueForStraighten:function(){var angle=this.getAngle()%360;if(angle>0){return Math.round((angle-1)/90)*90;}return Math.round(angle/90)*90;},/**
   * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)
   * @return {fabric.Object} thisArg
   * @chainable
   */straighten:function(){this.setAngle(this._getAngleValueForStraighten());return this;},/**
   * Same as {@link fabric.Object.prototype.straighten} but with animation
   * @param {Object} callbacks Object with callback functions
   * @param {Function} [callbacks.onComplete] Invoked on completion
   * @param {Function} [callbacks.onChange] Invoked on every step of animation
   * @return {fabric.Object} thisArg
   * @chainable
   */fxStraighten:function(callbacks){callbacks=callbacks||{};var empty=function(){},onComplete=callbacks.onComplete||empty,onChange=callbacks.onChange||empty,_this=this;fabric.util.animate({startValue:this.get('angle'),endValue:this._getAngleValueForStraighten(),duration:this.FX_DURATION,onChange:function(value){_this.setAngle(value);onChange();},onComplete:function(){_this.setCoords();onComplete();},onStart:function(){_this.set('active',false);}});return this;}});fabric.util.object.extend(fabric.StaticCanvas.prototype,/** @lends fabric.StaticCanvas.prototype */{/**
   * Straightens object, then rerenders canvas
   * @param {fabric.Object} object Object to straighten
   * @return {fabric.Canvas} thisArg
   * @chainable
   */straightenObject:function(object){object.straighten();this.renderAll();return this;},/**
   * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated
   * @param {fabric.Object} object Object to straighten
   * @return {fabric.Canvas} thisArg
   * @chainable
   */fxStraightenObject:function(object){object.fxStraighten({onChange:this.renderAll.bind(this)});return this;}});/**
 * @namespace fabric.Image.filters
 * @memberOf fabric.Image
 * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#image_filters}
 * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
 */fabric.Image.filters=fabric.Image.filters||{};/**
 * Root filter class from which all filter classes inherit from
 * @class fabric.Image.filters.BaseFilter
 * @memberOf fabric.Image.filters
 */fabric.Image.filters.BaseFilter=fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */{/**
   * Filter type
   * @param {String} type
   * @default
   */type:'BaseFilter',/**
   * Constructor
   * @param {Object} [options] Options object
   */initialize:function(options){if(options){this.setOptions(options);}},/**
   * Sets filter's properties from options
   * @param {Object} [options] Options object
   */setOptions:function(options){for(var prop in options){this[prop]=options[prop];}},/**
   * Returns object representation of an instance
   * @return {Object} Object representation of an instance
   */toObject:function(){return{type:this.type};},/**
   * Returns a JSON representation of an instance
   * @return {Object} JSON
   */toJSON:function(){// delegate, not alias
return this.toObject();}});fabric.Image.filters.BaseFilter.fromObject=function(object,callback){var filter=new fabric.Image.filters[object.type](object);callback&&callback(filter);return filter;};(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Brightness filter class
   * @class fabric.Image.filters.Brightness
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Brightness({
   *   brightness: 200
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Brightness=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Brightness.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'Brightness',/**
     * Constructor
     * @memberOf fabric.Image.filters.Brightness.prototype
     * @param {Object} [options] Options object
     * @param {Number} [options.brightness=0] Value to brighten the image up (-255..255)
     */initialize:function(options){options=options||{};this.brightness=options.brightness||0;},/**
     * Applies filter to canvas element
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,brightness=this.brightness;for(var i=0,len=data.length;i<len;i+=4){data[i]+=brightness;data[i+1]+=brightness;data[i+2]+=brightness;}context.putImageData(imageData,0,0);},/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */toObject:function(){return extend(this.callSuper('toObject'),{brightness:this.brightness});}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness
   */fabric.Image.filters.Brightness.fromObject=fabric.Image.filters.BaseFilter.fromObject;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Adapted from <a href="http://www.html5rocks.com/en/tutorials/canvas/imagefilters/">html5rocks article</a>
   * @class fabric.Image.filters.Convolute
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example <caption>Sharpen filter</caption>
   * var filter = new fabric.Image.filters.Convolute({
   *   matrix: [ 0, -1,  0,
   *            -1,  5, -1,
   *             0, -1,  0 ]
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   * @example <caption>Blur filter</caption>
   * var filter = new fabric.Image.filters.Convolute({
   *   matrix: [ 1/9, 1/9, 1/9,
   *             1/9, 1/9, 1/9,
   *             1/9, 1/9, 1/9 ]
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   * @example <caption>Emboss filter</caption>
   * var filter = new fabric.Image.filters.Convolute({
   *   matrix: [ 1,   1,  1,
   *             1, 0.7, -1,
   *            -1,  -1, -1 ]
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   * @example <caption>Emboss filter with opaqueness</caption>
   * var filter = new fabric.Image.filters.Convolute({
   *   opaque: true,
   *   matrix: [ 1,   1,  1,
   *             1, 0.7, -1,
   *            -1,  -1, -1 ]
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Convolute=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Convolute.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'Convolute',/**
     * Constructor
     * @memberOf fabric.Image.filters.Convolute.prototype
     * @param {Object} [options] Options object
     * @param {Boolean} [options.opaque=false] Opaque value (true/false)
     * @param {Array} [options.matrix] Filter matrix
     */initialize:function(options){options=options||{};this.opaque=options.opaque;this.matrix=options.matrix||[0,0,0,0,1,0,0,0,0];},/**
     * Applies filter to canvas element
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){var weights=this.matrix,context=canvasEl.getContext('2d'),pixels=context.getImageData(0,0,canvasEl.width,canvasEl.height),side=Math.round(Math.sqrt(weights.length)),halfSide=Math.floor(side/2),src=pixels.data,sw=pixels.width,sh=pixels.height,output=context.createImageData(sw,sh),dst=output.data,// go through the destination image pixels
alphaFac=this.opaque?1:0,r,g,b,a,dstOff,scx,scy,srcOff,wt;for(var y=0;y<sh;y++){for(var x=0;x<sw;x++){dstOff=(y*sw+x)*4;// calculate the weighed sum of the source image pixels that
// fall under the convolution matrix
r=0;g=0;b=0;a=0;for(var cy=0;cy<side;cy++){for(var cx=0;cx<side;cx++){scy=y+cy-halfSide;scx=x+cx-halfSide;// eslint-disable-next-line max-depth
if(scy<0||scy>sh||scx<0||scx>sw){continue;}srcOff=(scy*sw+scx)*4;wt=weights[cy*side+cx];r+=src[srcOff]*wt;g+=src[srcOff+1]*wt;b+=src[srcOff+2]*wt;a+=src[srcOff+3]*wt;}}dst[dstOff]=r;dst[dstOff+1]=g;dst[dstOff+2]=b;dst[dstOff+3]=a+alphaFac*(255-a);}}context.putImageData(output,0,0);},/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */toObject:function(){return extend(this.callSuper('toObject'),{opaque:this.opaque,matrix:this.matrix});}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute
   */fabric.Image.filters.Convolute.fromObject=fabric.Image.filters.BaseFilter.fromObject;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * GradientTransparency filter class
   * @class fabric.Image.filters.GradientTransparency
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.GradientTransparency#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.GradientTransparency({
   *   threshold: 200
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */// eslint-disable-next-line max-len
filters.GradientTransparency=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.GradientTransparency.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'GradientTransparency',/**
     * Constructor
     * @memberOf fabric.Image.filters.GradientTransparency.prototype
     * @param {Object} [options] Options object
     * @param {Number} [options.threshold=100] Threshold value
     */initialize:function(options){options=options||{};this.threshold=options.threshold||100;},/**
     * Applies filter to canvas element
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,threshold=this.threshold,total=data.length;for(var i=0,len=data.length;i<len;i+=4){data[i+3]=threshold+255*(total-i)/total;}context.putImageData(imageData,0,0);},/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */toObject:function(){return extend(this.callSuper('toObject'),{threshold:this.threshold});}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.GradientTransparency} Instance of fabric.Image.filters.GradientTransparency
   */fabric.Image.filters.GradientTransparency.fromObject=fabric.Image.filters.BaseFilter.fromObject;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Grayscale image filter class
   * @class fabric.Image.filters.Grayscale
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Grayscale();
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Grayscale=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Grayscale.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'Grayscale',/**
     * Applies filter to canvas element
     * @memberOf fabric.Image.filters.Grayscale.prototype
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,len=imageData.width*imageData.height*4,index=0,average;while(index<len){average=(data[index]+data[index+1]+data[index+2])/3;data[index]=average;data[index+1]=average;data[index+2]=average;index+=4;}context.putImageData(imageData,0,0);}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale
   */fabric.Image.filters.Grayscale.fromObject=function(object,callback){object=object||{};object.type='Grayscale';return fabric.Image.filters.BaseFilter.fromObject(object,callback);};})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Invert filter class
   * @class fabric.Image.filters.Invert
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Invert();
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Invert=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Invert.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'Invert',/**
     * Applies filter to canvas element
     * @memberOf fabric.Image.filters.Invert.prototype
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,iLen=data.length,i;for(i=0;i<iLen;i+=4){data[i]=255-data[i];data[i+1]=255-data[i+1];data[i+2]=255-data[i+2];}context.putImageData(imageData,0,0);}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert
   */fabric.Image.filters.Invert.fromObject=function(object,callback){object=object||{};object.type='Invert';return fabric.Image.filters.BaseFilter.fromObject(object,callback);};})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Mask filter class
   * See http://resources.aleph-1.com/mask/
   * @class fabric.Image.filters.Mask
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Mask#initialize} for constructor definition
   */filters.Mask=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Mask.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'Mask',/**
     * Constructor
     * @memberOf fabric.Image.filters.Mask.prototype
     * @param {Object} [options] Options object
     * @param {fabric.Image} [options.mask] Mask image object
     * @param {Number} [options.channel=0] Rgb channel (0, 1, 2 or 3)
     */initialize:function(options){options=options||{};this.mask=options.mask;this.channel=[0,1,2,3].indexOf(options.channel)>-1?options.channel:0;},/**
     * Applies filter to canvas element
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){if(!this.mask){return;}var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,maskEl=this.mask.getElement(),maskCanvasEl=fabric.util.createCanvasElement(),channel=this.channel,i,iLen=imageData.width*imageData.height*4;maskCanvasEl.width=canvasEl.width;maskCanvasEl.height=canvasEl.height;maskCanvasEl.getContext('2d').drawImage(maskEl,0,0,canvasEl.width,canvasEl.height);var maskImageData=maskCanvasEl.getContext('2d').getImageData(0,0,canvasEl.width,canvasEl.height),maskData=maskImageData.data;for(i=0;i<iLen;i+=4){data[i+3]=maskData[i+channel];}context.putImageData(imageData,0,0);},/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */toObject:function(){return extend(this.callSuper('toObject'),{mask:this.mask.toObject(),channel:this.channel});}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when a mask filter instance is created
   */fabric.Image.filters.Mask.fromObject=function(object,callback){fabric.util.loadImage(object.mask.src,function(img){object.mask=new fabric.Image(img,object.mask);return fabric.Image.filters.BaseFilter.fromObject(object,callback);});};/**
   * Indicates that instances of this type are async
   * @static
   * @type Boolean
   * @default
   */fabric.Image.filters.Mask.async=true;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Noise filter class
   * @class fabric.Image.filters.Noise
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Noise({
   *   noise: 700
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Noise=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Noise.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'Noise',/**
     * Constructor
     * @memberOf fabric.Image.filters.Noise.prototype
     * @param {Object} [options] Options object
     * @param {Number} [options.noise=0] Noise value
     */initialize:function(options){options=options||{};this.noise=options.noise||0;},/**
     * Applies filter to canvas element
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,noise=this.noise,rand;for(var i=0,len=data.length;i<len;i+=4){rand=(0.5-Math.random())*noise;data[i]+=rand;data[i+1]+=rand;data[i+2]+=rand;}context.putImageData(imageData,0,0);},/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */toObject:function(){return extend(this.callSuper('toObject'),{noise:this.noise});}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise
   */fabric.Image.filters.Noise.fromObject=fabric.Image.filters.BaseFilter.fromObject;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Pixelate filter class
   * @class fabric.Image.filters.Pixelate
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Pixelate({
   *   blocksize: 8
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Pixelate=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Pixelate.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'Pixelate',/**
     * Constructor
     * @memberOf fabric.Image.filters.Pixelate.prototype
     * @param {Object} [options] Options object
     * @param {Number} [options.blocksize=4] Blocksize for pixelate
     */initialize:function(options){options=options||{};this.blocksize=options.blocksize||4;},/**
     * Applies filter to canvas element
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,iLen=imageData.height,jLen=imageData.width,index,i,j,r,g,b,a;for(i=0;i<iLen;i+=this.blocksize){for(j=0;j<jLen;j+=this.blocksize){index=i*4*jLen+j*4;r=data[index];g=data[index+1];b=data[index+2];a=data[index+3];/*
           blocksize: 4

           [1,x,x,x,1]
           [x,x,x,x,1]
           [x,x,x,x,1]
           [x,x,x,x,1]
           [1,1,1,1,1]
           */for(var _i=i,_ilen=i+this.blocksize;_i<_ilen;_i++){for(var _j=j,_jlen=j+this.blocksize;_j<_jlen;_j++){index=_i*4*jLen+_j*4;data[index]=r;data[index+1]=g;data[index+2]=b;data[index+3]=a;}}}}context.putImageData(imageData,0,0);},/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */toObject:function(){return extend(this.callSuper('toObject'),{blocksize:this.blocksize});}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate
   */fabric.Image.filters.Pixelate.fromObject=fabric.Image.filters.BaseFilter.fromObject;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Remove white filter class
   * @class fabric.Image.filters.RemoveWhite
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.RemoveWhite#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.RemoveWhite({
   *   threshold: 40,
   *   distance: 140
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.RemoveWhite=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.RemoveWhite.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'RemoveWhite',/**
     * Constructor
     * @memberOf fabric.Image.filters.RemoveWhite.prototype
     * @param {Object} [options] Options object
     * @param {Number} [options.threshold=30] Threshold value
     * @param {Number} [options.distance=20] Distance value
     */initialize:function(options){options=options||{};this.threshold=options.threshold||30;this.distance=options.distance||20;},/**
     * Applies filter to canvas element
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,threshold=this.threshold,distance=this.distance,limit=255-threshold,abs=Math.abs,r,g,b;for(var i=0,len=data.length;i<len;i+=4){r=data[i];g=data[i+1];b=data[i+2];if(r>limit&&g>limit&&b>limit&&abs(r-g)<distance&&abs(r-b)<distance&&abs(g-b)<distance){data[i+3]=0;}}context.putImageData(imageData,0,0);},/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */toObject:function(){return extend(this.callSuper('toObject'),{threshold:this.threshold,distance:this.distance});}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.RemoveWhite} Instance of fabric.Image.filters.RemoveWhite
   */fabric.Image.filters.RemoveWhite.fromObject=fabric.Image.filters.BaseFilter.fromObject;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Sepia filter class
   * @class fabric.Image.filters.Sepia
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Sepia();
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Sepia=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Sepia.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'Sepia',/**
     * Applies filter to canvas element
     * @memberOf fabric.Image.filters.Sepia.prototype
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,iLen=data.length,i,avg;for(i=0;i<iLen;i+=4){avg=0.3*data[i]+0.59*data[i+1]+0.11*data[i+2];data[i]=avg+100;data[i+1]=avg+50;data[i+2]=avg+255;}context.putImageData(imageData,0,0);}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Sepia} Instance of fabric.Image.filters.Sepia
   */fabric.Image.filters.Sepia.fromObject=function(object,callback){object=object||{};object.type='Sepia';return new fabric.Image.filters.BaseFilter.fromObject(object,callback);};})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Sepia2 filter class
   * @class fabric.Image.filters.Sepia2
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Sepia2();
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Sepia2=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Sepia2.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'Sepia2',/**
     * Applies filter to canvas element
     * @memberOf fabric.Image.filters.Sepia.prototype
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,iLen=data.length,i,r,g,b;for(i=0;i<iLen;i+=4){r=data[i];g=data[i+1];b=data[i+2];data[i]=(r*0.393+g*0.769+b*0.189)/1.351;data[i+1]=(r*0.349+g*0.686+b*0.168)/1.203;data[i+2]=(r*0.272+g*0.534+b*0.131)/2.140;}context.putImageData(imageData,0,0);}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Sepia2} Instance of fabric.Image.filters.Sepia2
   */fabric.Image.filters.Sepia2.fromObject=function(object,callback){object=object||{};object.type='Sepia2';return new fabric.Image.filters.BaseFilter.fromObject(object,callback);};})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Tint filter class
   * Adapted from <a href="https://github.com/mezzoblue/PaintbrushJS">https://github.com/mezzoblue/PaintbrushJS</a>
   * @class fabric.Image.filters.Tint
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Tint#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example <caption>Tint filter with hex color and opacity</caption>
   * var filter = new fabric.Image.filters.Tint({
   *   color: '#3513B0',
   *   opacity: 0.5
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   * @example <caption>Tint filter with rgba color</caption>
   * var filter = new fabric.Image.filters.Tint({
   *   color: 'rgba(53, 21, 176, 0.5)'
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Tint=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Tint.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'Tint',/**
     * Constructor
     * @memberOf fabric.Image.filters.Tint.prototype
     * @param {Object} [options] Options object
     * @param {String} [options.color=#000000] Color to tint the image with
     * @param {Number} [options.opacity] Opacity value that controls the tint effect's transparency (0..1)
     */initialize:function(options){options=options||{};this.color=options.color||'#000000';this.opacity=typeof options.opacity!=='undefined'?options.opacity:new fabric.Color(this.color).getAlpha();},/**
     * Applies filter to canvas element
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,iLen=data.length,i,tintR,tintG,tintB,r,g,b,alpha1,source;source=new fabric.Color(this.color).getSource();tintR=source[0]*this.opacity;tintG=source[1]*this.opacity;tintB=source[2]*this.opacity;alpha1=1-this.opacity;for(i=0;i<iLen;i+=4){r=data[i];g=data[i+1];b=data[i+2];// alpha compositing
data[i]=tintR+r*alpha1;data[i+1]=tintG+g*alpha1;data[i+2]=tintB+b*alpha1;}context.putImageData(imageData,0,0);},/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */toObject:function(){return extend(this.callSuper('toObject'),{color:this.color,opacity:this.opacity});}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Tint} Instance of fabric.Image.filters.Tint
   */fabric.Image.filters.Tint.fromObject=fabric.Image.filters.BaseFilter.fromObject;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Multiply filter class
   * Adapted from <a href="http://www.laurenscorijn.com/articles/colormath-basics">http://www.laurenscorijn.com/articles/colormath-basics</a>
   * @class fabric.Image.filters.Multiply
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @example <caption>Multiply filter with hex color</caption>
   * var filter = new fabric.Image.filters.Multiply({
   *   color: '#F0F'
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   * @example <caption>Multiply filter with rgb color</caption>
   * var filter = new fabric.Image.filters.Multiply({
   *   color: 'rgb(53, 21, 176)'
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Multiply=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Multiply.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'Multiply',/**
     * Constructor
     * @memberOf fabric.Image.filters.Multiply.prototype
     * @param {Object} [options] Options object
     * @param {String} [options.color=#000000] Color to multiply the image pixels with
     */initialize:function(options){options=options||{};this.color=options.color||'#000000';},/**
     * Applies filter to canvas element
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,iLen=data.length,i,source;source=new fabric.Color(this.color).getSource();for(i=0;i<iLen;i+=4){data[i]*=source[0]/255;data[i+1]*=source[1]/255;data[i+2]*=source[2]/255;}context.putImageData(imageData,0,0);},/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */toObject:function(){return extend(this.callSuper('toObject'),{color:this.color});}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Multiply} Instance of fabric.Image.filters.Multiply
   */fabric.Image.filters.Multiply.fromObject=fabric.Image.filters.BaseFilter.fromObject;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric,filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Color Blend filter class
   * @class fabric.Image.filter.Blend
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @example
   * var filter = new fabric.Image.filters.Blend({
   *  color: '#000',
   *  mode: 'multiply'
   * });
   *
   * var filter = new fabric.Image.filters.Blend({
   *  image: fabricImageObject,
   *  mode: 'multiply',
   *  alpha: 0.5
   * });

   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Blend=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Blend.prototype */{type:'Blend',initialize:function(options){options=options||{};this.color=options.color||'#000';this.image=options.image||false;this.mode=options.mode||'multiply';this.alpha=options.alpha||1;},applyTo:function(canvasEl){var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,tr,tg,tb,r,g,b,_r,_g,_b,source,isImage=false;if(this.image){// Blend images
isImage=true;var _el=fabric.util.createCanvasElement();_el.width=this.image.width;_el.height=this.image.height;var tmpCanvas=new fabric.StaticCanvas(_el);tmpCanvas.add(this.image);var context2=tmpCanvas.getContext('2d');source=context2.getImageData(0,0,tmpCanvas.width,tmpCanvas.height).data;}else{// Blend color
source=new fabric.Color(this.color).getSource();tr=source[0]*this.alpha;tg=source[1]*this.alpha;tb=source[2]*this.alpha;}for(var i=0,len=data.length;i<len;i+=4){r=data[i];g=data[i+1];b=data[i+2];if(isImage){tr=source[i]*this.alpha;tg=source[i+1]*this.alpha;tb=source[i+2]*this.alpha;}switch(this.mode){case'multiply':data[i]=r*tr/255;data[i+1]=g*tg/255;data[i+2]=b*tb/255;break;case'screen':data[i]=1-(1-r)*(1-tr);data[i+1]=1-(1-g)*(1-tg);data[i+2]=1-(1-b)*(1-tb);break;case'add':data[i]=Math.min(255,r+tr);data[i+1]=Math.min(255,g+tg);data[i+2]=Math.min(255,b+tb);break;case'diff':case'difference':data[i]=Math.abs(r-tr);data[i+1]=Math.abs(g-tg);data[i+2]=Math.abs(b-tb);break;case'subtract':_r=r-tr;_g=g-tg;_b=b-tb;data[i]=_r<0?0:_r;data[i+1]=_g<0?0:_g;data[i+2]=_b<0?0:_b;break;case'darken':data[i]=Math.min(r,tr);data[i+1]=Math.min(g,tg);data[i+2]=Math.min(b,tb);break;case'lighten':data[i]=Math.max(r,tr);data[i+1]=Math.max(g,tg);data[i+2]=Math.max(b,tb);break;}}context.putImageData(imageData,0,0);},/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */toObject:function(){return{color:this.color,image:this.image,mode:this.mode,alpha:this.alpha};}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Blend} Instance of fabric.Image.filters.Blend
   */fabric.Image.filters.Blend.fromObject=fabric.Image.filters.BaseFilter.fromObject;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),pow=Math.pow,floor=Math.floor,sqrt=Math.sqrt,abs=Math.abs,max=Math.max,round=Math.round,sin=Math.sin,ceil=Math.ceil,filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Resize image filter class
   * @class fabric.Image.filters.Resize
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Resize();
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Resize=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Resize.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'Resize',/**
     * Resize type
     * @param {String} resizeType
     * @default
     */resizeType:'hermite',/**
     * Scale factor for resizing, x axis
     * @param {Number} scaleX
     * @default
     */scaleX:0,/**
     * Scale factor for resizing, y axis
     * @param {Number} scaleY
     * @default
     */scaleY:0,/**
     * LanczosLobes parameter for lanczos filter
     * @param {Number} lanczosLobes
     * @default
     */lanczosLobes:3,/**
     * Applies filter to canvas element
     * @memberOf fabric.Image.filters.Resize.prototype
     * @param {Object} canvasEl Canvas element to apply filter to
     * @param {Number} scaleX
     * @param {Number} scaleY
     */applyTo:function(canvasEl,scaleX,scaleY){if(scaleX===1&&scaleY===1){return;}this.rcpScaleX=1/scaleX;this.rcpScaleY=1/scaleY;var oW=canvasEl.width,oH=canvasEl.height,dW=round(oW*scaleX),dH=round(oH*scaleY),imageData;if(this.resizeType==='sliceHack'){imageData=this.sliceByTwo(canvasEl,oW,oH,dW,dH);}if(this.resizeType==='hermite'){imageData=this.hermiteFastResize(canvasEl,oW,oH,dW,dH);}if(this.resizeType==='bilinear'){imageData=this.bilinearFiltering(canvasEl,oW,oH,dW,dH);}if(this.resizeType==='lanczos'){imageData=this.lanczosResize(canvasEl,oW,oH,dW,dH);}canvasEl.width=dW;canvasEl.height=dH;canvasEl.getContext('2d').putImageData(imageData,0,0);},/**
     * Filter sliceByTwo
     * @param {Object} canvasEl Canvas element to apply filter to
     * @param {Number} oW Original Width
     * @param {Number} oH Original Height
     * @param {Number} dW Destination Width
     * @param {Number} dH Destination Height
     * @returns {ImageData}
     */sliceByTwo:function(canvasEl,oW,oH,dW,dH){var context=canvasEl.getContext('2d'),imageData,multW=0.5,multH=0.5,signW=1,signH=1,doneW=false,doneH=false,stepW=oW,stepH=oH,tmpCanvas=fabric.util.createCanvasElement(),tmpCtx=tmpCanvas.getContext('2d');dW=floor(dW);dH=floor(dH);tmpCanvas.width=max(dW,oW);tmpCanvas.height=max(dH,oH);if(dW>oW){multW=2;signW=-1;}if(dH>oH){multH=2;signH=-1;}imageData=context.getImageData(0,0,oW,oH);canvasEl.width=max(dW,oW);canvasEl.height=max(dH,oH);context.putImageData(imageData,0,0);while(!doneW||!doneH){oW=stepW;oH=stepH;if(dW*signW<floor(stepW*multW*signW)){stepW=floor(stepW*multW);}else{stepW=dW;doneW=true;}if(dH*signH<floor(stepH*multH*signH)){stepH=floor(stepH*multH);}else{stepH=dH;doneH=true;}imageData=context.getImageData(0,0,oW,oH);tmpCtx.putImageData(imageData,0,0);context.clearRect(0,0,stepW,stepH);context.drawImage(tmpCanvas,0,0,oW,oH,0,0,stepW,stepH);}return context.getImageData(0,0,dW,dH);},/**
     * Filter lanczosResize
     * @param {Object} canvasEl Canvas element to apply filter to
     * @param {Number} oW Original Width
     * @param {Number} oH Original Height
     * @param {Number} dW Destination Width
     * @param {Number} dH Destination Height
     * @returns {ImageData}
     */lanczosResize:function(canvasEl,oW,oH,dW,dH){function lanczosCreate(lobes){return function(x){if(x>lobes){return 0;}x*=Math.PI;if(abs(x)<1e-16){return 1;}var xx=x/lobes;return sin(x)*sin(xx)/x/xx;};}function process(u){var v,i,weight,idx,a,red,green,blue,alpha,fX,fY;center.x=(u+0.5)*ratioX;icenter.x=floor(center.x);for(v=0;v<dH;v++){center.y=(v+0.5)*ratioY;icenter.y=floor(center.y);a=0;red=0;green=0;blue=0;alpha=0;for(i=icenter.x-range2X;i<=icenter.x+range2X;i++){if(i<0||i>=oW){continue;}fX=floor(1000*abs(i-center.x));if(!cacheLanc[fX]){cacheLanc[fX]={};}for(var j=icenter.y-range2Y;j<=icenter.y+range2Y;j++){if(j<0||j>=oH){continue;}fY=floor(1000*abs(j-center.y));if(!cacheLanc[fX][fY]){cacheLanc[fX][fY]=lanczos(sqrt(pow(fX*rcpRatioX,2)+pow(fY*rcpRatioY,2))/1000);}weight=cacheLanc[fX][fY];if(weight>0){idx=(j*oW+i)*4;a+=weight;red+=weight*srcData[idx];green+=weight*srcData[idx+1];blue+=weight*srcData[idx+2];alpha+=weight*srcData[idx+3];}}}idx=(v*dW+u)*4;destData[idx]=red/a;destData[idx+1]=green/a;destData[idx+2]=blue/a;destData[idx+3]=alpha/a;}if(++u<dW){return process(u);}else{return destImg;}}var context=canvasEl.getContext('2d'),srcImg=context.getImageData(0,0,oW,oH),destImg=context.getImageData(0,0,dW,dH),srcData=srcImg.data,destData=destImg.data,lanczos=lanczosCreate(this.lanczosLobes),ratioX=this.rcpScaleX,ratioY=this.rcpScaleY,rcpRatioX=2/this.rcpScaleX,rcpRatioY=2/this.rcpScaleY,range2X=ceil(ratioX*this.lanczosLobes/2),range2Y=ceil(ratioY*this.lanczosLobes/2),cacheLanc={},center={},icenter={};return process(0);},/**
     * bilinearFiltering
     * @param {Object} canvasEl Canvas element to apply filter to
     * @param {Number} oW Original Width
     * @param {Number} oH Original Height
     * @param {Number} dW Destination Width
     * @param {Number} dH Destination Height
     * @returns {ImageData}
     */bilinearFiltering:function(canvasEl,oW,oH,dW,dH){var a,b,c,d,x,y,i,j,xDiff,yDiff,chnl,color,offset=0,origPix,ratioX=this.rcpScaleX,ratioY=this.rcpScaleY,context=canvasEl.getContext('2d'),w4=4*(oW-1),img=context.getImageData(0,0,oW,oH),pixels=img.data,destImage=context.getImageData(0,0,dW,dH),destPixels=destImage.data;for(i=0;i<dH;i++){for(j=0;j<dW;j++){x=floor(ratioX*j);y=floor(ratioY*i);xDiff=ratioX*j-x;yDiff=ratioY*i-y;origPix=4*(y*oW+x);for(chnl=0;chnl<4;chnl++){a=pixels[origPix+chnl];b=pixels[origPix+4+chnl];c=pixels[origPix+w4+chnl];d=pixels[origPix+w4+4+chnl];color=a*(1-xDiff)*(1-yDiff)+b*xDiff*(1-yDiff)+c*yDiff*(1-xDiff)+d*xDiff*yDiff;destPixels[offset++]=color;}}}return destImage;},/**
     * hermiteFastResize
     * @param {Object} canvasEl Canvas element to apply filter to
     * @param {Number} oW Original Width
     * @param {Number} oH Original Height
     * @param {Number} dW Destination Width
     * @param {Number} dH Destination Height
     * @returns {ImageData}
     */hermiteFastResize:function(canvasEl,oW,oH,dW,dH){var ratioW=this.rcpScaleX,ratioH=this.rcpScaleY,ratioWHalf=ceil(ratioW/2),ratioHHalf=ceil(ratioH/2),context=canvasEl.getContext('2d'),img=context.getImageData(0,0,oW,oH),data=img.data,img2=context.getImageData(0,0,dW,dH),data2=img2.data;for(var j=0;j<dH;j++){for(var i=0;i<dW;i++){var x2=(i+j*dW)*4,weight=0,weights=0,weightsAlpha=0,gxR=0,gxG=0,gxB=0,gxA=0,centerY=(j+0.5)*ratioH;for(var yy=floor(j*ratioH);yy<(j+1)*ratioH;yy++){var dy=abs(centerY-(yy+0.5))/ratioHHalf,centerX=(i+0.5)*ratioW,w0=dy*dy;for(var xx=floor(i*ratioW);xx<(i+1)*ratioW;xx++){var dx=abs(centerX-(xx+0.5))/ratioWHalf,w=sqrt(w0+dx*dx);/* eslint-disable max-depth */if(w>1&&w<-1){continue;}//hermite filter
weight=2*w*w*w-3*w*w+1;if(weight>0){dx=4*(xx+yy*oW);//alpha
gxA+=weight*data[dx+3];weightsAlpha+=weight;//colors
if(data[dx+3]<255){weight=weight*data[dx+3]/250;}gxR+=weight*data[dx];gxG+=weight*data[dx+1];gxB+=weight*data[dx+2];weights+=weight;}/* eslint-enable max-depth */}}data2[x2]=gxR/weights;data2[x2+1]=gxG/weights;data2[x2+2]=gxB/weights;data2[x2+3]=gxA/weightsAlpha;}}return img2;},/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */toObject:function(){return{type:this.type,scaleX:this.scaleX,scaleY:this.scaleY,resizeType:this.resizeType,lanczosLobes:this.lanczosLobes};}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize
   */fabric.Image.filters.Resize.fromObject=fabric.Image.filters.BaseFilter.fromObject;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Color Matrix filter class
   * @class fabric.Image.filters.ColorMatrix
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.ColorMatrix#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @see {@Link http://www.webwasp.co.uk/tutorials/219/Color_Matrix_Filter.php}
   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl}
   * @example <caption>Kodachrome filter</caption>
   * var filter = new fabric.Image.filters.ColorMatrix({
   *  matrix: [
       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,
       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,
       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,
       0, 0, 0, 1, 0
      ]
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.ColorMatrix=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.ColorMatrix.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'ColorMatrix',/**
     * Constructor
     * @memberOf fabric.Image.filters.ColorMatrix.prototype
     * @param {Object} [options] Options object
     * @param {Array} [options.matrix] Color Matrix to modify the image data with
     */initialize:function(options){options||(options={});this.matrix=options.matrix||[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];},/**
     * Applies filter to canvas element
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,iLen=data.length,i,r,g,b,a,m=this.matrix;for(i=0;i<iLen;i+=4){r=data[i];g=data[i+1];b=data[i+2];a=data[i+3];data[i]=r*m[0]+g*m[1]+b*m[2]+a*m[3]+m[4];data[i+1]=r*m[5]+g*m[6]+b*m[7]+a*m[8]+m[9];data[i+2]=r*m[10]+g*m[11]+b*m[12]+a*m[13]+m[14];data[i+3]=r*m[15]+g*m[16]+b*m[17]+a*m[18]+m[19];}context.putImageData(imageData,0,0);},/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */toObject:function(){return extend(this.callSuper('toObject'),{type:this.type,matrix:this.matrix});}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] function to invoke after filter creation
   * @return {fabric.Image.filters.ColorMatrix} Instance of fabric.Image.filters.ColorMatrix
   */fabric.Image.filters.ColorMatrix.fromObject=fabric.Image.filters.BaseFilter.fromObject;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Contrast filter class
   * @class fabric.Image.filters.Contrast
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Contrast#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Contrast({
   *   contrast: 40
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Contrast=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Contrast.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'Contrast',/**
     * Constructor
     * @memberOf fabric.Image.filters.Contrast.prototype
     * @param {Object} [options] Options object
     * @param {Number} [options.contrast=0] Value to contrast the image up (-255...255)
     */initialize:function(options){options=options||{};this.contrast=options.contrast||0;},/**
     * Applies filter to canvas element
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,contrastF=259*(this.contrast+255)/(255*(259-this.contrast));for(var i=0,len=data.length;i<len;i+=4){data[i]=contrastF*(data[i]-128)+128;data[i+1]=contrastF*(data[i+1]-128)+128;data[i+2]=contrastF*(data[i+2]-128)+128;}context.putImageData(imageData,0,0);},/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */toObject:function(){return extend(this.callSuper('toObject'),{contrast:this.contrast});}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Contrast} Instance of fabric.Image.filters.Contrast
   */fabric.Image.filters.Contrast.fromObject=fabric.Image.filters.BaseFilter.fromObject;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),extend=fabric.util.object.extend,filters=fabric.Image.filters,createClass=fabric.util.createClass;/**
   * Saturate filter class
   * @class fabric.Image.filters.Saturate
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Saturate#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Saturate({
   *   saturate: 100
   * });
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */filters.Saturate=createClass(filters.BaseFilter,/** @lends fabric.Image.filters.Saturate.prototype */{/**
     * Filter type
     * @param {String} type
     * @default
     */type:'Saturate',/**
     * Constructor
     * @memberOf fabric.Image.filters.Saturate.prototype
     * @param {Object} [options] Options object
     * @param {Number} [options.saturate=0] Value to saturate the image (-100...100)
     */initialize:function(options){options=options||{};this.saturate=options.saturate||0;},/**
     * Applies filter to canvas element
     * @param {Object} canvasEl Canvas element to apply filter to
     */applyTo:function(canvasEl){var context=canvasEl.getContext('2d'),imageData=context.getImageData(0,0,canvasEl.width,canvasEl.height),data=imageData.data,max,adjust=-this.saturate*0.01;for(var i=0,len=data.length;i<len;i+=4){max=Math.max(data[i],data[i+1],data[i+2]);data[i]+=max!==data[i]?(max-data[i])*adjust:0;data[i+1]+=max!==data[i+1]?(max-data[i+1])*adjust:0;data[i+2]+=max!==data[i+2]?(max-data[i+2])*adjust:0;}context.putImageData(imageData,0,0);},/**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */toObject:function(){return extend(this.callSuper('toObject'),{saturate:this.saturate});}});/**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Saturate} Instance of fabric.Image.filters.Saturate
   */fabric.Image.filters.Saturate.fromObject=fabric.Image.filters.BaseFilter.fromObject;})( true?exports:this);(function(global){'use strict';var fabric=global.fabric||(global.fabric={}),toFixed=fabric.util.toFixed,NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS,MIN_TEXT_WIDTH=2;if(fabric.Text){fabric.warn('fabric.Text is already defined');return;}var stateProperties=fabric.Object.prototype.stateProperties.concat();stateProperties.push('fontFamily','fontWeight','fontSize','text','textDecoration','textAlign','fontStyle','lineHeight','textBackgroundColor','charSpacing');var cacheProperties=fabric.Object.prototype.cacheProperties.concat();cacheProperties.push('fontFamily','fontWeight','fontSize','text','textDecoration','textAlign','fontStyle','lineHeight','textBackgroundColor','charSpacing','styles');/**
   * Text class
   * @class fabric.Text
   * @extends fabric.Object
   * @return {fabric.Text} thisArg
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}
   * @see {@link fabric.Text#initialize} for constructor definition
   */fabric.Text=fabric.util.createClass(fabric.Object,/** @lends fabric.Text.prototype */{/**
     * Properties which when set cause object to change dimensions
     * @type Object
     * @private
     */_dimensionAffectingProps:['fontSize','fontWeight','fontFamily','fontStyle','lineHeight','text','charSpacing','textAlign'],/**
     * @private
     */_reNewline:/\r?\n/,/**
     * Use this regular expression to filter for whitespace that is not a new line.
     * Mostly used when text is 'justify' aligned.
     * @private
     */_reSpacesAndTabs:/[ \t\r]+/g,/**
     * Retrieves object's fontSize
     * @method getFontSize
     * @memberOf fabric.Text.prototype
     * @return {String} Font size (in pixels)
     *//**
     * Sets object's fontSize
     * Does not update the object .width and .height,
     * call ._initDimensions() to update the values.
     * @method setFontSize
     * @memberOf fabric.Text.prototype
     * @param {Number} fontSize Font size (in pixels)
     * @return {fabric.Text}
     * @chainable
     *//**
     * Retrieves object's fontWeight
     * @method getFontWeight
     * @memberOf fabric.Text.prototype
     * @return {(String|Number)} Font weight
     *//**
     * Sets object's fontWeight
     * Does not update the object .width and .height,
     * call ._initDimensions() to update the values.
     * @method setFontWeight
     * @memberOf fabric.Text.prototype
     * @param {(Number|String)} fontWeight Font weight
     * @return {fabric.Text}
     * @chainable
     *//**
     * Retrieves object's fontFamily
     * @method getFontFamily
     * @memberOf fabric.Text.prototype
     * @return {String} Font family
     *//**
     * Sets object's fontFamily
     * Does not update the object .width and .height,
     * call ._initDimensions() to update the values.
     * @method setFontFamily
     * @memberOf fabric.Text.prototype
     * @param {String} fontFamily Font family
     * @return {fabric.Text}
     * @chainable
     *//**
     * Retrieves object's text
     * @method getText
     * @memberOf fabric.Text.prototype
     * @return {String} text
     *//**
     * Sets object's text
     * Does not update the object .width and .height,
     * call ._initDimensions() to update the values.
     * @method setText
     * @memberOf fabric.Text.prototype
     * @param {String} text Text
     * @return {fabric.Text}
     * @chainable
     *//**
     * Retrieves object's textDecoration
     * @method getTextDecoration
     * @memberOf fabric.Text.prototype
     * @return {String} Text decoration
     *//**
     * Sets object's textDecoration
     * @method setTextDecoration
     * @memberOf fabric.Text.prototype
     * @param {String} textDecoration Text decoration
     * @return {fabric.Text}
     * @chainable
     *//**
     * Retrieves object's fontStyle
     * @method getFontStyle
     * @memberOf fabric.Text.prototype
     * @return {String} Font style
     *//**
     * Sets object's fontStyle
     * Does not update the object .width and .height,
     * call ._initDimensions() to update the values.
     * @method setFontStyle
     * @memberOf fabric.Text.prototype
     * @param {String} fontStyle Font style
     * @return {fabric.Text}
     * @chainable
     *//**
     * Retrieves object's lineHeight
     * @method getLineHeight
     * @memberOf fabric.Text.prototype
     * @return {Number} Line height
     *//**
     * Sets object's lineHeight
     * @method setLineHeight
     * @memberOf fabric.Text.prototype
     * @param {Number} lineHeight Line height
     * @return {fabric.Text}
     * @chainable
     *//**
     * Retrieves object's textAlign
     * @method getTextAlign
     * @memberOf fabric.Text.prototype
     * @return {String} Text alignment
     *//**
     * Sets object's textAlign
     * @method setTextAlign
     * @memberOf fabric.Text.prototype
     * @param {String} textAlign Text alignment
     * @return {fabric.Text}
     * @chainable
     *//**
     * Retrieves object's textBackgroundColor
     * @method getTextBackgroundColor
     * @memberOf fabric.Text.prototype
     * @return {String} Text background color
     *//**
     * Sets object's textBackgroundColor
     * @method setTextBackgroundColor
     * @memberOf fabric.Text.prototype
     * @param {String} textBackgroundColor Text background color
     * @return {fabric.Text}
     * @chainable
     *//**
     * Type of an object
     * @type String
     * @default
     */type:'text',/**
     * Font size (in pixels)
     * @type Number
     * @default
     */fontSize:40,/**
     * Font weight (e.g. bold, normal, 400, 600, 800)
     * @type {(Number|String)}
     * @default
     */fontWeight:'normal',/**
     * Font family
     * @type String
     * @default
     */fontFamily:'Times New Roman',/**
     * Text decoration Possible values: "", "underline", "overline" or "line-through".
     * @type String
     * @default
     */textDecoration:'',/**
     * Text alignment. Possible values: "left", "center", "right" or "justify".
     * @type String
     * @default
     */textAlign:'left',/**
     * Font style . Possible values: "", "normal", "italic" or "oblique".
     * @type String
     * @default
     */fontStyle:'',/**
     * Line height
     * @type Number
     * @default
     */lineHeight:1.16,/**
     * Background color of text lines
     * @type String
     * @default
     */textBackgroundColor:'',/**
     * List of properties to consider when checking if
     * state of an object is changed ({@link fabric.Object#hasStateChanged})
     * as well as for history (undo/redo) purposes
     * @type Array
     */stateProperties:stateProperties,/**
     * List of properties to consider when checking if cache needs refresh
     * @type Array
     */cacheProperties:cacheProperties,/**
     * When defined, an object is rendered via stroke and this property specifies its color.
     * <b>Backwards incompatibility note:</b> This property was named "strokeStyle" until v1.1.6
     * @type String
     * @default
     */stroke:null,/**
     * Shadow object representing shadow of this shape.
     * <b>Backwards incompatibility note:</b> This property was named "textShadow" (String) until v1.2.11
     * @type fabric.Shadow
     * @default
     */shadow:null,/**
     * @private
     */_fontSizeFraction:0.25,/**
     * Text Line proportion to font Size (in pixels)
     * @type Number
     * @default
     */_fontSizeMult:1.13,/**
     * additional space between characters
     * expressed in thousands of em unit
     * @type Number
     * @default
     */charSpacing:0,/**
     * Constructor
     * @param {String} text Text string
     * @param {Object} [options] Options object
     * @return {fabric.Text} thisArg
     */initialize:function(text,options){options=options||{};this.text=text;this.__skipDimension=true;this.callSuper('initialize',options);this.__skipDimension=false;this._initDimensions();this.setCoords();this.setupState({propertySet:'_dimensionAffectingProps'});},/**
     * Initialize text dimensions. Render all text on given context
     * or on a offscreen canvas to get the text width with measureText.
     * Updates this.width and this.height with the proper values.
     * Does not return dimensions.
     * @param {CanvasRenderingContext2D} [ctx] Context to render on
     * @private
     */_initDimensions:function(ctx){if(this.__skipDimension){return;}if(!ctx){ctx=fabric.util.createCanvasElement().getContext('2d');this._setTextStyles(ctx);}this._textLines=this._splitTextIntoLines();this._clearCache();this.width=this._getTextWidth(ctx)||this.cursorWidth||MIN_TEXT_WIDTH;this.height=this._getTextHeight(ctx);},/**
     * Returns string representation of an instance
     * @return {String} String representation of text object
     */toString:function(){return'#<fabric.Text ('+this.complexity()+'): { "text": "'+this.text+'", "fontFamily": "'+this.fontFamily+'" }>';},/**
     * Return the dimension and the zoom level needed to create a cache canvas
     * big enough to host the object to be cached.
     * @private
     * @return {Object}.width width of canvas
     * @return {Object}.height height of canvas
     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
     */_getCacheCanvasDimensions:function(){var dim=this.callSuper('_getCacheCanvasDimensions');var fontSize=this.fontSize;dim.width+=fontSize*dim.zoomX;dim.height+=fontSize*dim.zoomY;return dim;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_render:function(ctx){this._setTextStyles(ctx);if(this.group&&this.group.type==='path-group'){ctx.translate(this.left,this.top);}this._renderTextLinesBackground(ctx);this._renderText(ctx);this._renderTextDecoration(ctx);},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderText:function(ctx){this._renderTextFill(ctx);this._renderTextStroke(ctx);},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_setTextStyles:function(ctx){ctx.textBaseline='alphabetic';ctx.font=this._getFontDeclaration();},/**
     * @private
     * @return {Number} Height of fabric.Text object
     */_getTextHeight:function(){return this._getHeightOfSingleLine()+(this._textLines.length-1)*this._getHeightOfLine();},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @return {Number} Maximum width of fabric.Text object
     */_getTextWidth:function(ctx){var maxWidth=this._getLineWidth(ctx,0);for(var i=1,len=this._textLines.length;i<len;i++){var currentLineWidth=this._getLineWidth(ctx,i);if(currentLineWidth>maxWidth){maxWidth=currentLineWidth;}}return maxWidth;},/**
     * @private
     * @param {String} method Method name ("fillText" or "strokeText")
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {String} chars Chars to render
     * @param {Number} left Left position of text
     * @param {Number} top Top position of text
     */_renderChars:function(method,ctx,chars,left,top){// remove Text word from method var
var shortM=method.slice(0,-4),_char,width;if(this[shortM].toLive){var offsetX=-this.width/2+this[shortM].offsetX||0,offsetY=-this.height/2+this[shortM].offsetY||0;ctx.save();ctx.translate(offsetX,offsetY);left-=offsetX;top-=offsetY;}if(this.charSpacing!==0){var additionalSpace=this._getWidthOfCharSpacing();chars=chars.split('');for(var i=0,len=chars.length;i<len;i++){_char=chars[i];width=ctx.measureText(_char).width+additionalSpace;ctx[method](_char,left,top);left+=width>0?width:0;}}else{ctx[method](chars,left,top);}this[shortM].toLive&&ctx.restore();},/**
     * @private
     * @param {String} method Method name ("fillText" or "strokeText")
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {String} line Text to render
     * @param {Number} left Left position of text
     * @param {Number} top Top position of text
     * @param {Number} lineIndex Index of a line in a text
     */_renderTextLine:function(method,ctx,line,left,top,lineIndex){// lift the line by quarter of fontSize
top-=this.fontSize*this._fontSizeFraction;// short-circuit
var lineWidth=this._getLineWidth(ctx,lineIndex);if(this.textAlign!=='justify'||this.width<lineWidth){this._renderChars(method,ctx,line,left,top,lineIndex);return;}// stretch the line
var words=line.split(/\s+/),charOffset=0,wordsWidth=this._getWidthOfWords(ctx,words.join(' '),lineIndex,0),widthDiff=this.width-wordsWidth,numSpaces=words.length-1,spaceWidth=numSpaces>0?widthDiff/numSpaces:0,leftOffset=0,word;for(var i=0,len=words.length;i<len;i++){while(line[charOffset]===' '&&charOffset<line.length){charOffset++;}word=words[i];this._renderChars(method,ctx,word,left+leftOffset,top,lineIndex,charOffset);leftOffset+=this._getWidthOfWords(ctx,word,lineIndex,charOffset)+spaceWidth;charOffset+=word.length;}},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {String} word
     */_getWidthOfWords:function(ctx,word){var width=ctx.measureText(word).width,charCount,additionalSpace;if(this.charSpacing!==0){charCount=word.split('').length;additionalSpace=charCount*this._getWidthOfCharSpacing();width+=additionalSpace;}return width>0?width:0;},/**
     * @private
     * @return {Number} Left offset
     */_getLeftOffset:function(){return-this.width/2;},/**
     * @private
     * @return {Number} Top offset
     */_getTopOffset:function(){return-this.height/2;},/**
     * Returns true because text has no style
     */isEmptyStyles:function(){return true;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {String} method Method name ("fillText" or "strokeText")
     */_renderTextCommon:function(ctx,method){var lineHeights=0,left=this._getLeftOffset(),top=this._getTopOffset();for(var i=0,len=this._textLines.length;i<len;i++){var heightOfLine=this._getHeightOfLine(ctx,i),maxHeight=heightOfLine/this.lineHeight,lineWidth=this._getLineWidth(ctx,i),leftOffset=this._getLineLeftOffset(lineWidth);this._renderTextLine(method,ctx,this._textLines[i],left+leftOffset,top+lineHeights+maxHeight,i);lineHeights+=heightOfLine;}},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderTextFill:function(ctx){if(!this.fill&&this.isEmptyStyles()){return;}this._renderTextCommon(ctx,'fillText');},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderTextStroke:function(ctx){if((!this.stroke||this.strokeWidth===0)&&this.isEmptyStyles()){return;}if(this.shadow&&!this.shadow.affectStroke){this._removeShadow(ctx);}ctx.save();this._setLineDash(ctx,this.strokeDashArray);ctx.beginPath();this._renderTextCommon(ctx,'strokeText');ctx.closePath();ctx.restore();},/**
     * @private
     * @return {Number} height of line
     */_getHeightOfLine:function(){return this._getHeightOfSingleLine()*this.lineHeight;},/**
     * @private
     * @return {Number} height of line without lineHeight
     */_getHeightOfSingleLine:function(){return this.fontSize*this._fontSizeMult;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderTextLinesBackground:function(ctx){if(!this.textBackgroundColor){return;}var lineTopOffset=0,heightOfLine,lineWidth,lineLeftOffset,originalFill=ctx.fillStyle;ctx.fillStyle=this.textBackgroundColor;for(var i=0,len=this._textLines.length;i<len;i++){heightOfLine=this._getHeightOfLine(ctx,i);lineWidth=this._getLineWidth(ctx,i);if(lineWidth>0){lineLeftOffset=this._getLineLeftOffset(lineWidth);ctx.fillRect(this._getLeftOffset()+lineLeftOffset,this._getTopOffset()+lineTopOffset,lineWidth,heightOfLine/this.lineHeight);}lineTopOffset+=heightOfLine;}ctx.fillStyle=originalFill;// if there is text background color no
// other shadows should be casted
this._removeShadow(ctx);},/**
     * @private
     * @param {Number} lineWidth Width of text line
     * @return {Number} Line left offset
     */_getLineLeftOffset:function(lineWidth){if(this.textAlign==='center'){return(this.width-lineWidth)/2;}if(this.textAlign==='right'){return this.width-lineWidth;}return 0;},/**
     * @private
     */_clearCache:function(){this.__lineWidths=[];this.__lineHeights=[];},/**
     * @private
     */_shouldClearDimensionCache:function(){var shouldClear=this._forceClearCache;shouldClear||(shouldClear=this.hasStateChanged('_dimensionAffectingProps'));if(shouldClear){this.saveState({propertySet:'_dimensionAffectingProps'});this.dirty=true;}return shouldClear;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Number} lineIndex line number
     * @return {Number} Line width
     */_getLineWidth:function(ctx,lineIndex){if(this.__lineWidths[lineIndex]){return this.__lineWidths[lineIndex]===-1?this.width:this.__lineWidths[lineIndex];}var width,wordCount,line=this._textLines[lineIndex];if(line===''){width=0;}else{width=this._measureLine(ctx,lineIndex);}this.__lineWidths[lineIndex]=width;if(width&&this.textAlign==='justify'){wordCount=line.split(/\s+/);if(wordCount.length>1){this.__lineWidths[lineIndex]=-1;}}return width;},_getWidthOfCharSpacing:function(){if(this.charSpacing!==0){return this.fontSize*this.charSpacing/1000;}return 0;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Number} lineIndex line number
     * @return {Number} Line width
     */_measureLine:function(ctx,lineIndex){var line=this._textLines[lineIndex],width=ctx.measureText(line).width,additionalSpace=0,charCount,finalWidth;if(this.charSpacing!==0){charCount=line.split('').length;additionalSpace=(charCount-1)*this._getWidthOfCharSpacing();}finalWidth=width+additionalSpace;return finalWidth>0?finalWidth:0;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderTextDecoration:function(ctx){if(!this.textDecoration){return;}var halfOfVerticalBox=this.height/2,_this=this,offsets=[];/** @ignore */function renderLinesAtOffset(offsets){var i,lineHeight=0,len,j,oLen,lineWidth,lineLeftOffset,heightOfLine;for(i=0,len=_this._textLines.length;i<len;i++){lineWidth=_this._getLineWidth(ctx,i);lineLeftOffset=_this._getLineLeftOffset(lineWidth);heightOfLine=_this._getHeightOfLine(ctx,i);for(j=0,oLen=offsets.length;j<oLen;j++){ctx.fillRect(_this._getLeftOffset()+lineLeftOffset,lineHeight+(_this._fontSizeMult-1+offsets[j])*_this.fontSize-halfOfVerticalBox,lineWidth,_this.fontSize/15);}lineHeight+=heightOfLine;}}if(this.textDecoration.indexOf('underline')>-1){offsets.push(0.85);// 1 - 3/16
}if(this.textDecoration.indexOf('line-through')>-1){offsets.push(0.43);}if(this.textDecoration.indexOf('overline')>-1){offsets.push(-0.12);}if(offsets.length>0){renderLinesAtOffset(offsets);}},/**
     * return font declaration string for canvas context
     * @returns {String} font declaration formatted for canvas context.
     */_getFontDeclaration:function(){return[// node-canvas needs "weight style", while browsers need "style weight"
fabric.isLikelyNode?this.fontWeight:this.fontStyle,fabric.isLikelyNode?this.fontStyle:this.fontWeight,this.fontSize+'px',fabric.isLikelyNode?'"'+this.fontFamily+'"':this.fontFamily].join(' ');},/**
     * Renders text instance on a specified context
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Boolean} noTransform
     */render:function(ctx,noTransform){// do not render if object is not visible
if(!this.visible){return;}if(this.canvas&&this.canvas.skipOffscreen&&!this.group&&!this.isOnScreen()){return;}if(this._shouldClearDimensionCache()){this._setTextStyles(ctx);this._initDimensions(ctx);}this.callSuper('render',ctx,noTransform);},/**
     * Returns the text as an array of lines.
     * @returns {Array} Lines in the text
     */_splitTextIntoLines:function(){return this.text.split(this._reNewline);},/**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */toObject:function(propertiesToInclude){var additionalProperties=['text','fontSize','fontWeight','fontFamily','fontStyle','lineHeight','textDecoration','textAlign','textBackgroundColor','charSpacing'].concat(propertiesToInclude);return this.callSuper('toObject',additionalProperties);},/* _TO_SVG_START_ *//**
     * Returns SVG representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */toSVG:function(reviver){if(!this.ctx){this.ctx=fabric.util.createCanvasElement().getContext('2d');}var markup=this._createBaseSVGMarkup(),offsets=this._getSVGLeftTopOffsets(this.ctx),textAndBg=this._getSVGTextAndBg(offsets.textTop,offsets.textLeft);this._wrapSVGTextAndBg(markup,textAndBg);return reviver?reviver(markup.join('')):markup.join('');},/**
     * @private
     */_getSVGLeftTopOffsets:function(ctx){var lineTop=this._getHeightOfLine(ctx,0),textLeft=-this.width/2,textTop=0;return{textLeft:textLeft+(this.group&&this.group.type==='path-group'?this.left:0),textTop:textTop+(this.group&&this.group.type==='path-group'?-this.top:0),lineTop:lineTop};},/**
     * @private
     */_wrapSVGTextAndBg:function(markup,textAndBg){var noShadow=true,filter=this.getSvgFilter(),style=filter===''?'':' style="'+filter+'"';markup.push('\t<g ',this.getSvgId(),'transform="',this.getSvgTransform(),this.getSvgTransformMatrix(),'"',style,'>\n',textAndBg.textBgRects.join(''),'\t\t<text xml:space="preserve" ',this.fontFamily?'font-family="'+this.fontFamily.replace(/"/g,'\'')+'" ':'',this.fontSize?'font-size="'+this.fontSize+'" ':'',this.fontStyle?'font-style="'+this.fontStyle+'" ':'',this.fontWeight?'font-weight="'+this.fontWeight+'" ':'',this.textDecoration?'text-decoration="'+this.textDecoration+'" ':'','style="',this.getSvgStyles(noShadow),'" >\n',textAndBg.textSpans.join(''),'\t\t</text>\n','\t</g>\n');},getSvgStyles:function(skipShadow){var svgStyle=fabric.Object.prototype.getSvgStyles.call(this,skipShadow);return svgStyle+' white-space: pre;';},/**
     * @private
     * @param {Number} textTopOffset Text top offset
     * @param {Number} textLeftOffset Text left offset
     * @return {Object}
     */_getSVGTextAndBg:function(textTopOffset,textLeftOffset){var textSpans=[],textBgRects=[],height=0;// bounding-box background
this._setSVGBg(textBgRects);// text and text-background
for(var i=0,len=this._textLines.length;i<len;i++){if(this.textBackgroundColor){this._setSVGTextLineBg(textBgRects,i,textLeftOffset,textTopOffset,height);}this._setSVGTextLineText(i,textSpans,height,textLeftOffset,textTopOffset,textBgRects);height+=this._getHeightOfLine(this.ctx,i);}return{textSpans:textSpans,textBgRects:textBgRects};},_setSVGTextLineText:function(i,textSpans,height,textLeftOffset,textTopOffset){var yPos=this.fontSize*(this._fontSizeMult-this._fontSizeFraction)-textTopOffset+height-this.height/2;if(this.textAlign==='justify'){// i call from here to do not intefere with IText
this._setSVGTextLineJustifed(i,textSpans,yPos,textLeftOffset);return;}textSpans.push('\t\t\t<tspan x="',toFixed(textLeftOffset+this._getLineLeftOffset(this._getLineWidth(this.ctx,i)),NUM_FRACTION_DIGITS),'" ','y="',toFixed(yPos,NUM_FRACTION_DIGITS),'" ',// doing this on <tspan> elements since setting opacity
// on containing <text> one doesn't work in Illustrator
this._getFillAttributes(this.fill),'>',fabric.util.string.escapeXml(this._textLines[i]),'</tspan>\n');},_setSVGTextLineJustifed:function(i,textSpans,yPos,textLeftOffset){var ctx=fabric.util.createCanvasElement().getContext('2d');this._setTextStyles(ctx);var line=this._textLines[i],words=line.split(/\s+/),wordsWidth=this._getWidthOfWords(ctx,words.join('')),widthDiff=this.width-wordsWidth,numSpaces=words.length-1,spaceWidth=numSpaces>0?widthDiff/numSpaces:0,word,attributes=this._getFillAttributes(this.fill),len;textLeftOffset+=this._getLineLeftOffset(this._getLineWidth(ctx,i));for(i=0,len=words.length;i<len;i++){word=words[i];textSpans.push('\t\t\t<tspan x="',toFixed(textLeftOffset,NUM_FRACTION_DIGITS),'" ','y="',toFixed(yPos,NUM_FRACTION_DIGITS),'" ',// doing this on <tspan> elements since setting opacity
// on containing <text> one doesn't work in Illustrator
attributes,'>',fabric.util.string.escapeXml(word),'</tspan>\n');textLeftOffset+=this._getWidthOfWords(ctx,word)+spaceWidth;}},_setSVGTextLineBg:function(textBgRects,i,textLeftOffset,textTopOffset,height){textBgRects.push('\t\t<rect ',this._getFillAttributes(this.textBackgroundColor),' x="',toFixed(textLeftOffset+this._getLineLeftOffset(this._getLineWidth(this.ctx,i)),NUM_FRACTION_DIGITS),'" y="',toFixed(height-this.height/2,NUM_FRACTION_DIGITS),'" width="',toFixed(this._getLineWidth(this.ctx,i),NUM_FRACTION_DIGITS),'" height="',toFixed(this._getHeightOfLine(this.ctx,i)/this.lineHeight,NUM_FRACTION_DIGITS),'"></rect>\n');},_setSVGBg:function(textBgRects){if(this.backgroundColor){textBgRects.push('\t\t<rect ',this._getFillAttributes(this.backgroundColor),' x="',toFixed(-this.width/2,NUM_FRACTION_DIGITS),'" y="',toFixed(-this.height/2,NUM_FRACTION_DIGITS),'" width="',toFixed(this.width,NUM_FRACTION_DIGITS),'" height="',toFixed(this.height,NUM_FRACTION_DIGITS),'"></rect>\n');}},/**
     * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values
     * we work around it by "moving" alpha channel into opacity attribute and setting fill's alpha to 1
     *
     * @private
     * @param {*} value
     * @return {String}
     */_getFillAttributes:function(value){var fillColor=value&&typeof value==='string'?new fabric.Color(value):'';if(!fillColor||!fillColor.getSource()||fillColor.getAlpha()===1){return'fill="'+value+'"';}return'opacity="'+fillColor.getAlpha()+'" fill="'+fillColor.setAlpha(1).toRgb()+'"';},/* _TO_SVG_END_ *//**
     * Sets specified property to a specified value
     * @param {String} key
     * @param {*} value
     * @return {fabric.Text} thisArg
     * @chainable
     */_set:function(key,value){this.callSuper('_set',key,value);if(this._dimensionAffectingProps.indexOf(key)>-1){this._initDimensions();this.setCoords();}},/**
     * Returns complexity of an instance
     * @return {Number} complexity
     */complexity:function(){return 1;}});/* _FROM_SVG_START_ *//**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Text.fromElement})
   * @static
   * @memberOf fabric.Text
   * @see: http://www.w3.org/TR/SVG/text.html#TextElement
   */fabric.Text.ATTRIBUTE_NAMES=fabric.SHARED_ATTRIBUTES.concat('x y dx dy font-family font-style font-weight font-size text-decoration text-anchor'.split(' '));/**
   * Default SVG font size
   * @static
   * @memberOf fabric.Text
   */fabric.Text.DEFAULT_SVG_FONT_SIZE=16;/**
   * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)
   * @static
   * @memberOf fabric.Text
   * @param {SVGElement} element Element to parse
   * @param {Object} [options] Options object
   * @return {fabric.Text} Instance of fabric.Text
   */fabric.Text.fromElement=function(element,options){if(!element){return null;}var parsedAttributes=fabric.parseAttributes(element,fabric.Text.ATTRIBUTE_NAMES);options=fabric.util.object.extend(options?fabric.util.object.clone(options):{},parsedAttributes);options.top=options.top||0;options.left=options.left||0;if('dx'in parsedAttributes){options.left+=parsedAttributes.dx;}if('dy'in parsedAttributes){options.top+=parsedAttributes.dy;}if(!('fontSize'in options)){options.fontSize=fabric.Text.DEFAULT_SVG_FONT_SIZE;}if(!options.originX){options.originX='left';}var textContent='';// The XML is not properly parsed in IE9 so a workaround to get
// textContent is through firstChild.data. Another workaround would be
// to convert XML loaded from a file to be converted using DOMParser (same way loadSVGFromString() does)
if(!('textContent'in element)){if('firstChild'in element&&element.firstChild!==null){if('data'in element.firstChild&&element.firstChild.data!==null){textContent=element.firstChild.data;}}}else{textContent=element.textContent;}textContent=textContent.replace(/^\s+|\s+$|\n+/g,'').replace(/\s+/g,' ');var text=new fabric.Text(textContent,options),textHeightScaleFactor=text.getHeight()/text.height,lineHeightDiff=(text.height+text.strokeWidth)*text.lineHeight-text.height,scaledDiff=lineHeightDiff*textHeightScaleFactor,textHeight=text.getHeight()+scaledDiff,offX=0;/*
      Adjust positioning:
        x/y attributes in SVG correspond to the bottom-left corner of text bounding box
        top/left properties in Fabric correspond to center point of text bounding box
    */if(text.originX==='left'){offX=text.getWidth()/2;}if(text.originX==='right'){offX=-text.getWidth()/2;}text.set({left:text.getLeft()+offX,top:text.getTop()-textHeight/2+text.fontSize*(0.18+text._fontSizeFraction)/text.lineHeight/* 0.3 is the old lineHeight */});return text;};/* _FROM_SVG_END_ *//**
   * Returns fabric.Text instance from an object representation
   * @static
   * @memberOf fabric.Text
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.Text instance is created
   * @param {Boolean} [forceAsync] Force an async behaviour trying to create pattern first
   * @return {fabric.Text} Instance of fabric.Text
   */fabric.Text.fromObject=function(object,callback,forceAsync){return fabric.Object._fromObject('Text',object,callback,forceAsync,'text');};fabric.util.createAccessors(fabric.Text);})( true?exports:this);(function(){var clone=fabric.util.object.clone;/**
   * IText class (introduced in <b>v1.4</b>) Events are also fired with "text:"
   * prefix when observing canvas.
   * @class fabric.IText
   * @extends fabric.Text
   * @mixes fabric.Observable
   *
   * @fires changed
   * @fires selection:changed
   * @fires editing:entered
   * @fires editing:exited
   *
   * @return {fabric.IText} thisArg
   * @see {@link fabric.IText#initialize} for constructor definition
   *
   * <p>Supported key combinations:</p>
   * <pre>
   *   Move cursor:                    left, right, up, down
   *   Select character:               shift + left, shift + right
   *   Select text vertically:         shift + up, shift + down
   *   Move cursor by word:            alt + left, alt + right
   *   Select words:                   shift + alt + left, shift + alt + right
   *   Move cursor to line start/end:  cmd + left, cmd + right or home, end
   *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end
   *   Jump to start/end of text:      cmd + up, cmd + down
   *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown
   *   Delete character:               backspace
   *   Delete word:                    alt + backspace
   *   Delete line:                    cmd + backspace
   *   Forward delete:                 delete
   *   Copy text:                      ctrl/cmd + c
   *   Paste text:                     ctrl/cmd + v
   *   Cut text:                       ctrl/cmd + x
   *   Select entire text:             ctrl/cmd + a
   *   Quit editing                    tab or esc
   * </pre>
   *
   * <p>Supported mouse/touch combination</p>
   * <pre>
   *   Position cursor:                click/touch
   *   Create selection:               click/touch & drag
   *   Create selection:               click & shift + click
   *   Select word:                    double click
   *   Select line:                    triple click
   * </pre>
   */fabric.IText=fabric.util.createClass(fabric.Text,fabric.Observable,/** @lends fabric.IText.prototype */{/**
     * Type of an object
     * @type String
     * @default
     */type:'i-text',/**
     * Index where text selection starts (or where cursor is when there is no selection)
     * @type Number
     * @default
     */selectionStart:0,/**
     * Index where text selection ends
     * @type Number
     * @default
     */selectionEnd:0,/**
     * Color of text selection
     * @type String
     * @default
     */selectionColor:'rgba(17,119,255,0.3)',/**
     * Indicates whether text is in editing mode
     * @type Boolean
     * @default
     */isEditing:false,/**
     * Indicates whether a text can be edited
     * @type Boolean
     * @default
     */editable:true,/**
     * Border color of text object while it's in editing mode
     * @type String
     * @default
     */editingBorderColor:'rgba(102,153,255,0.25)',/**
     * Width of cursor (in px)
     * @type Number
     * @default
     */cursorWidth:2,/**
     * Color of default cursor (when not overwritten by character style)
     * @type String
     * @default
     */cursorColor:'#333',/**
     * Delay between cursor blink (in ms)
     * @type Number
     * @default
     */cursorDelay:1000,/**
     * Duration of cursor fadein (in ms)
     * @type Number
     * @default
     */cursorDuration:600,/**
     * Object containing character styles
     * (where top-level properties corresponds to line number and 2nd-level properties -- to char number in a line)
     * @type Object
     * @default
     */styles:null,/**
     * Indicates whether internal text char widths can be cached
     * @type Boolean
     * @default
     */caching:true,/**
     * @private
     */_reSpace:/\s|\n/,/**
     * @private
     */_currentCursorOpacity:0,/**
     * @private
     */_selectionDirection:null,/**
     * @private
     */_abortCursorAnimation:false,/**
     * @private
     */__widthOfSpace:[],/**
     * Constructor
     * @param {String} text Text string
     * @param {Object} [options] Options object
     * @return {fabric.IText} thisArg
     */initialize:function(text,options){this.styles=options?options.styles||{}:{};this.callSuper('initialize',text,options);this.initBehavior();},/**
     * @private
     */_clearCache:function(){this.callSuper('_clearCache');this.__widthOfSpace=[];},/**
     * Returns true if object has no styling
     */isEmptyStyles:function(){if(!this.styles){return true;}var obj=this.styles;for(var p1 in obj){for(var p2 in obj[p1]){// eslint-disable-next-line no-unused-vars
for(var p3 in obj[p1][p2]){return false;}}}return true;},/**
     * Sets selection start (left boundary of a selection)
     * @param {Number} index Index to set selection start to
     */setSelectionStart:function(index){index=Math.max(index,0);this._updateAndFire('selectionStart',index);},/**
     * Sets selection end (right boundary of a selection)
     * @param {Number} index Index to set selection end to
     */setSelectionEnd:function(index){index=Math.min(index,this.text.length);this._updateAndFire('selectionEnd',index);},/**
     * @private
     * @param {String} property 'selectionStart' or 'selectionEnd'
     * @param {Number} index new position of property
     */_updateAndFire:function(property,index){if(this[property]!==index){this._fireSelectionChanged();this[property]=index;}this._updateTextarea();},/**
     * Fires the even of selection changed
     * @private
     */_fireSelectionChanged:function(){this.fire('selection:changed');this.canvas&&this.canvas.fire('text:selection:changed',{target:this});},/**
     * Gets style of a current selection/cursor (at the start position)
     * @param {Number} [startIndex] Start index to get styles at
     * @param {Number} [endIndex] End index to get styles at
     * @return {Object} styles Style object at a specified (or current) index
     */getSelectionStyles:function(startIndex,endIndex){if(arguments.length===2){var styles=[];for(var i=startIndex;i<endIndex;i++){styles.push(this.getSelectionStyles(i));}return styles;}var loc=this.get2DCursorLocation(startIndex),style=this._getStyleDeclaration(loc.lineIndex,loc.charIndex);return style||{};},/**
     * Sets style of a current selection
     * @param {Object} [styles] Styles object
     * @return {fabric.IText} thisArg
     * @chainable
     */setSelectionStyles:function(styles){if(this.selectionStart===this.selectionEnd){this._extendStyles(this.selectionStart,styles);}else{for(var i=this.selectionStart;i<this.selectionEnd;i++){this._extendStyles(i,styles);}}/* not included in _extendStyles to avoid clearing cache more than once */this._forceClearCache=true;return this;},/**
     * @private
     */_extendStyles:function(index,styles){var loc=this.get2DCursorLocation(index);if(!this._getLineStyle(loc.lineIndex)){this._setLineStyle(loc.lineIndex,{});}if(!this._getStyleDeclaration(loc.lineIndex,loc.charIndex)){this._setStyleDeclaration(loc.lineIndex,loc.charIndex,{});}fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex,loc.charIndex),styles);},/**
     * Initialize text dimensions. Render all text on given context
     * or on a offscreen canvas to get the text width with measureText.
     * Updates this.width and this.height with the proper values.
     * Does not return dimensions.
     * @param {CanvasRenderingContext2D} [ctx] Context to render on
     * @private
     */_initDimensions:function(ctx){if(!ctx){this.clearContextTop();}this.callSuper('_initDimensions',ctx);},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Boolean} noTransform
     */render:function(ctx,noTransform){this.clearContextTop();this.callSuper('render',ctx,noTransform);// clear the cursorOffsetCache, so we ensure to calculate once per renderCursor
// the correct position but not at every cursor animation.
this.cursorOffsetCache={};this.renderCursorOrSelection();},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_render:function(ctx){this.callSuper('_render',ctx);this.ctx=ctx;},/**
     * Prepare and clean the contextTop
     */clearContextTop:function(){if(!this.active||!this.isEditing){return;}if(this.canvas&&this.canvas.contextTop){var ctx=this.canvas.contextTop;ctx.save();ctx.transform.apply(ctx,this.canvas.viewportTransform);this.transform(ctx);this.transformMatrix&&ctx.transform.apply(ctx,this.transformMatrix);this._clearTextArea(ctx);ctx.restore();}},/**
     * Renders cursor or selection (depending on what exists)
     */renderCursorOrSelection:function(){if(!this.active||!this.isEditing){return;}var chars=this.text.split(''),boundaries,ctx;if(this.canvas&&this.canvas.contextTop){ctx=this.canvas.contextTop;ctx.save();ctx.transform.apply(ctx,this.canvas.viewportTransform);this.transform(ctx);this.transformMatrix&&ctx.transform.apply(ctx,this.transformMatrix);this._clearTextArea(ctx);}else{ctx=this.ctx;ctx.save();}if(this.selectionStart===this.selectionEnd){boundaries=this._getCursorBoundaries(chars,'cursor');this.renderCursor(boundaries,ctx);}else{boundaries=this._getCursorBoundaries(chars,'selection');this.renderSelection(chars,boundaries,ctx);}ctx.restore();},_clearTextArea:function(ctx){// we add 4 pixel, to be sure to do not leave any pixel out
var width=this.width+4,height=this.height+4;ctx.clearRect(-width/2,-height/2,width,height);},/**
     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)
     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.
     */get2DCursorLocation:function(selectionStart){if(typeof selectionStart==='undefined'){selectionStart=this.selectionStart;}var len=this._textLines.length;for(var i=0;i<len;i++){if(selectionStart<=this._textLines[i].length){return{lineIndex:i,charIndex:selectionStart};}selectionStart-=this._textLines[i].length+1;}return{lineIndex:i-1,charIndex:this._textLines[i-1].length<selectionStart?this._textLines[i-1].length:selectionStart};},/**
     * Returns complete style of char at the current cursor
     * @param {Number} lineIndex Line index
     * @param {Number} charIndex Char index
     * @return {Object} Character style
     */getCurrentCharStyle:function(lineIndex,charIndex){var style=this._getStyleDeclaration(lineIndex,charIndex===0?0:charIndex-1);return{fontSize:style&&style.fontSize||this.fontSize,fill:style&&style.fill||this.fill,textBackgroundColor:style&&style.textBackgroundColor||this.textBackgroundColor,textDecoration:style&&style.textDecoration||this.textDecoration,fontFamily:style&&style.fontFamily||this.fontFamily,fontWeight:style&&style.fontWeight||this.fontWeight,fontStyle:style&&style.fontStyle||this.fontStyle,stroke:style&&style.stroke||this.stroke,strokeWidth:style&&style.strokeWidth||this.strokeWidth};},/**
     * Returns fontSize of char at the current cursor
     * @param {Number} lineIndex Line index
     * @param {Number} charIndex Char index
     * @return {Number} Character font size
     */getCurrentCharFontSize:function(lineIndex,charIndex){var style=this._getStyleDeclaration(lineIndex,charIndex===0?0:charIndex-1);return style&&style.fontSize?style.fontSize:this.fontSize;},/**
     * Returns color (fill) of char at the current cursor
     * @param {Number} lineIndex Line index
     * @param {Number} charIndex Char index
     * @return {String} Character color (fill)
     */getCurrentCharColor:function(lineIndex,charIndex){var style=this._getStyleDeclaration(lineIndex,charIndex===0?0:charIndex-1);return style&&style.fill?style.fill:this.cursorColor;},/**
     * Returns cursor boundaries (left, top, leftOffset, topOffset)
     * @private
     * @param {Array} chars Array of characters
     * @param {String} typeOfBoundaries
     */_getCursorBoundaries:function(chars,typeOfBoundaries){// left/top are left/top of entire text box
// leftOffset/topOffset are offset from that left/top point of a text box
var left=Math.round(this._getLeftOffset()),top=this._getTopOffset(),offsets=this._getCursorBoundariesOffsets(chars,typeOfBoundaries);return{left:left,top:top,leftOffset:offsets.left+offsets.lineLeft,topOffset:offsets.top};},/**
     * @private
     */_getCursorBoundariesOffsets:function(chars,typeOfBoundaries){if(this.cursorOffsetCache&&'top'in this.cursorOffsetCache){return this.cursorOffsetCache;}var lineLeftOffset=0,lineIndex=0,charIndex=0,topOffset=0,leftOffset=0,boundaries;for(var i=0;i<this.selectionStart;i++){if(chars[i]==='\n'){leftOffset=0;topOffset+=this._getHeightOfLine(this.ctx,lineIndex);lineIndex++;charIndex=0;}else{leftOffset+=this._getWidthOfChar(this.ctx,chars[i],lineIndex,charIndex);charIndex++;}lineLeftOffset=this._getLineLeftOffset(this._getLineWidth(this.ctx,lineIndex));}if(typeOfBoundaries==='cursor'){topOffset+=(1-this._fontSizeFraction)*this._getHeightOfLine(this.ctx,lineIndex)/this.lineHeight-this.getCurrentCharFontSize(lineIndex,charIndex)*(1-this._fontSizeFraction);}if(this.charSpacing!==0&&charIndex===this._textLines[lineIndex].length){leftOffset-=this._getWidthOfCharSpacing();}boundaries={top:topOffset,left:leftOffset>0?leftOffset:0,lineLeft:lineLeftOffset};this.cursorOffsetCache=boundaries;return this.cursorOffsetCache;},/**
     * Renders cursor
     * @param {Object} boundaries
     * @param {CanvasRenderingContext2D} ctx transformed context to draw on
     */renderCursor:function(boundaries,ctx){var cursorLocation=this.get2DCursorLocation(),lineIndex=cursorLocation.lineIndex,charIndex=cursorLocation.charIndex,charHeight=this.getCurrentCharFontSize(lineIndex,charIndex),leftOffset=boundaries.leftOffset,multiplier=this.scaleX*this.canvas.getZoom(),cursorWidth=this.cursorWidth/multiplier;ctx.fillStyle=this.getCurrentCharColor(lineIndex,charIndex);ctx.globalAlpha=this.__isMousedown?1:this._currentCursorOpacity;ctx.fillRect(boundaries.left+leftOffset-cursorWidth/2,boundaries.top+boundaries.topOffset,cursorWidth,charHeight);},/**
     * Renders text selection
     * @param {Array} chars Array of characters
     * @param {Object} boundaries Object with left/top/leftOffset/topOffset
     * @param {CanvasRenderingContext2D} ctx transformed context to draw on
     */renderSelection:function(chars,boundaries,ctx){ctx.fillStyle=this.selectionColor;var start=this.get2DCursorLocation(this.selectionStart),end=this.get2DCursorLocation(this.selectionEnd),startLine=start.lineIndex,endLine=end.lineIndex;for(var i=startLine;i<=endLine;i++){var lineOffset=this._getLineLeftOffset(this._getLineWidth(ctx,i))||0,lineHeight=this._getHeightOfLine(this.ctx,i),realLineHeight=0,boxWidth=0,line=this._textLines[i];if(i===startLine){for(var j=0,len=line.length;j<len;j++){if(j>=start.charIndex&&(i!==endLine||j<end.charIndex)){boxWidth+=this._getWidthOfChar(ctx,line[j],i,j);}if(j<start.charIndex){lineOffset+=this._getWidthOfChar(ctx,line[j],i,j);}}if(j===line.length){boxWidth-=this._getWidthOfCharSpacing();}}else if(i>startLine&&i<endLine){boxWidth+=this._getLineWidth(ctx,i)||5;}else if(i===endLine){for(var j2=0,j2len=end.charIndex;j2<j2len;j2++){boxWidth+=this._getWidthOfChar(ctx,line[j2],i,j2);}if(end.charIndex===line.length){boxWidth-=this._getWidthOfCharSpacing();}}realLineHeight=lineHeight;if(this.lineHeight<1||i===endLine&&this.lineHeight>1){lineHeight/=this.lineHeight;}ctx.fillRect(boundaries.left+lineOffset,boundaries.top+boundaries.topOffset,boxWidth>0?boxWidth:0,lineHeight);boundaries.topOffset+=realLineHeight;}},/**
     * @private
     * @param {String} method
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {String} line Content of the line
     * @param {Number} left
     * @param {Number} top
     * @param {Number} lineIndex
     * @param {Number} charOffset
     */_renderChars:function(method,ctx,line,left,top,lineIndex,charOffset){if(this.isEmptyStyles()){return this._renderCharsFast(method,ctx,line,left,top);}charOffset=charOffset||0;// set proper line offset
var lineHeight=this._getHeightOfLine(ctx,lineIndex),prevStyle,thisStyle,charsToRender='';ctx.save();top-=lineHeight/this.lineHeight*this._fontSizeFraction;for(var i=charOffset,len=line.length+charOffset;i<=len;i++){prevStyle=prevStyle||this.getCurrentCharStyle(lineIndex,i);thisStyle=this.getCurrentCharStyle(lineIndex,i+1);if(this._hasStyleChanged(prevStyle,thisStyle)||i===len){this._renderChar(method,ctx,lineIndex,i-1,charsToRender,left,top,lineHeight);charsToRender='';prevStyle=thisStyle;}charsToRender+=line[i-charOffset];}ctx.restore();},/**
     * @private
     * @param {String} method
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {String} line Content of the line
     * @param {Number} left Left coordinate
     * @param {Number} top Top coordinate
     */_renderCharsFast:function(method,ctx,line,left,top){if(method==='fillText'&&this.fill){this.callSuper('_renderChars',method,ctx,line,left,top);}if(method==='strokeText'&&(this.stroke&&this.strokeWidth>0||this.skipFillStrokeCheck)){this.callSuper('_renderChars',method,ctx,line,left,top);}},/**
     * @private
     * @param {String} method
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Number} lineIndex
     * @param {Number} i
     * @param {String} _char
     * @param {Number} left Left coordinate
     * @param {Number} top Top coordinate
     * @param {Number} lineHeight Height of the line
     */_renderChar:function(method,ctx,lineIndex,i,_char,left,top,lineHeight){var charWidth,charHeight,shouldFill,shouldStroke,decl=this._getStyleDeclaration(lineIndex,i),offset,textDecoration,chars,additionalSpace,_charWidth;if(decl){charHeight=this._getHeightOfChar(ctx,_char,lineIndex,i);shouldStroke=decl.stroke;shouldFill=decl.fill;textDecoration=decl.textDecoration;}else{charHeight=this.fontSize;}shouldStroke=(shouldStroke||this.stroke)&&method==='strokeText';shouldFill=(shouldFill||this.fill)&&method==='fillText';decl&&ctx.save();charWidth=this._applyCharStylesGetWidth(ctx,_char,lineIndex,i,decl||null);textDecoration=textDecoration||this.textDecoration;if(decl&&decl.textBackgroundColor){this._removeShadow(ctx);}if(this.charSpacing!==0){additionalSpace=this._getWidthOfCharSpacing();chars=_char.split('');charWidth=0;for(var j=0,len=chars.length,jChar;j<len;j++){jChar=chars[j];shouldFill&&ctx.fillText(jChar,left+charWidth,top);shouldStroke&&ctx.strokeText(jChar,left+charWidth,top);_charWidth=ctx.measureText(jChar).width+additionalSpace;charWidth+=_charWidth>0?_charWidth:0;}}else{shouldFill&&ctx.fillText(_char,left,top);shouldStroke&&ctx.strokeText(_char,left,top);}if(textDecoration||textDecoration!==''){offset=this._fontSizeFraction*lineHeight/this.lineHeight;this._renderCharDecoration(ctx,textDecoration,left,top,offset,charWidth,charHeight);}decl&&ctx.restore();ctx.translate(charWidth,0);},/**
     * @private
     * @param {Object} prevStyle
     * @param {Object} thisStyle
     */_hasStyleChanged:function(prevStyle,thisStyle){return prevStyle.fill!==thisStyle.fill||prevStyle.fontSize!==thisStyle.fontSize||prevStyle.textBackgroundColor!==thisStyle.textBackgroundColor||prevStyle.textDecoration!==thisStyle.textDecoration||prevStyle.fontFamily!==thisStyle.fontFamily||prevStyle.fontWeight!==thisStyle.fontWeight||prevStyle.fontStyle!==thisStyle.fontStyle||prevStyle.stroke!==thisStyle.stroke||prevStyle.strokeWidth!==thisStyle.strokeWidth;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderCharDecoration:function(ctx,textDecoration,left,top,offset,charWidth,charHeight){if(!textDecoration){return;}var decorationWeight=charHeight/15,positions={underline:top+charHeight/10,'line-through':top-charHeight*(this._fontSizeFraction+this._fontSizeMult-1)+decorationWeight,overline:top-(this._fontSizeMult-this._fontSizeFraction)*charHeight},decorations=['underline','line-through','overline'],i,decoration;for(i=0;i<decorations.length;i++){decoration=decorations[i];if(textDecoration.indexOf(decoration)>-1){ctx.fillRect(left,positions[decoration],charWidth,decorationWeight);}}},/**
     * @private
     * @param {String} method
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {String} line
     * @param {Number} left
     * @param {Number} top
     * @param {Number} lineIndex
     */_renderTextLine:function(method,ctx,line,left,top,lineIndex){// to "cancel" this.fontSize subtraction in fabric.Text#_renderTextLine
// the adding 0.03 is just to align text with itext by overlap test
if(!this.isEmptyStyles()){top+=this.fontSize*(this._fontSizeFraction+0.03);}this.callSuper('_renderTextLine',method,ctx,line,left,top,lineIndex);},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderTextDecoration:function(ctx){if(this.isEmptyStyles()){return this.callSuper('_renderTextDecoration',ctx);}},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_renderTextLinesBackground:function(ctx){this.callSuper('_renderTextLinesBackground',ctx);var lineTopOffset=0,heightOfLine,lineWidth,lineLeftOffset,leftOffset=this._getLeftOffset(),topOffset=this._getTopOffset(),colorCache='',line,_char,style,leftCache,topCache,widthCache,heightCache;ctx.save();for(var i=0,len=this._textLines.length;i<len;i++){heightOfLine=this._getHeightOfLine(ctx,i);line=this._textLines[i];if(line===''||!this.styles||!this._getLineStyle(i)){lineTopOffset+=heightOfLine;continue;}lineWidth=this._getLineWidth(ctx,i);lineLeftOffset=this._getLineLeftOffset(lineWidth);leftCache=topCache=widthCache=heightCache=0;for(var j=0,jlen=line.length;j<jlen;j++){style=this._getStyleDeclaration(i,j)||{};if(colorCache!==style.textBackgroundColor){if(heightCache&&widthCache){ctx.fillStyle=colorCache;ctx.fillRect(leftCache,topCache,widthCache,heightCache);}leftCache=topCache=widthCache=heightCache=0;colorCache=style.textBackgroundColor||'';}if(!style.textBackgroundColor){colorCache='';continue;}_char=line[j];if(colorCache===style.textBackgroundColor){colorCache=style.textBackgroundColor;if(!leftCache){leftCache=leftOffset+lineLeftOffset+this._getWidthOfCharsAt(ctx,i,j);}topCache=topOffset+lineTopOffset;widthCache+=this._getWidthOfChar(ctx,_char,i,j);heightCache=heightOfLine/this.lineHeight;}}// if a textBackgroundColor ends on the last character of a line
if(heightCache&&widthCache){ctx.fillStyle=colorCache;ctx.fillRect(leftCache,topCache,widthCache,heightCache);leftCache=topCache=widthCache=heightCache=0;}lineTopOffset+=heightOfLine;}ctx.restore();},/**
     * @private
     */_getCacheProp:function(_char,styleDeclaration){return _char+styleDeclaration.fontSize+styleDeclaration.fontWeight+styleDeclaration.fontStyle;},/**
     * @private
     * @param {String} fontFamily name
     * @return {Object} reference to cache
     */_getFontCache:function(fontFamily){if(!fabric.charWidthsCache[fontFamily]){fabric.charWidthsCache[fontFamily]={};}return fabric.charWidthsCache[fontFamily];},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {String} _char
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @param {Object} [decl]
     */_applyCharStylesGetWidth:function(ctx,_char,lineIndex,charIndex,decl){var charDecl=decl||this._getStyleDeclaration(lineIndex,charIndex),styleDeclaration=clone(charDecl),width,cacheProp,charWidthsCache;this._applyFontStyles(styleDeclaration);charWidthsCache=this._getFontCache(styleDeclaration.fontFamily);cacheProp=this._getCacheProp(_char,styleDeclaration);// short-circuit if no styles for this char
// global style from object is always applyed and handled by save and restore
if(!charDecl&&charWidthsCache[cacheProp]&&this.caching){return charWidthsCache[cacheProp];}if(typeof styleDeclaration.shadow==='string'){styleDeclaration.shadow=new fabric.Shadow(styleDeclaration.shadow);}var fill=styleDeclaration.fill||this.fill;ctx.fillStyle=fill.toLive?fill.toLive(ctx,this):fill;if(styleDeclaration.stroke){ctx.strokeStyle=styleDeclaration.stroke&&styleDeclaration.stroke.toLive?styleDeclaration.stroke.toLive(ctx,this):styleDeclaration.stroke;}ctx.lineWidth=styleDeclaration.strokeWidth||this.strokeWidth;ctx.font=this._getFontDeclaration.call(styleDeclaration);//if we want this._setShadow.call to work with styleDeclarion
//we have to add those references
if(styleDeclaration.shadow){styleDeclaration.scaleX=this.scaleX;styleDeclaration.scaleY=this.scaleY;styleDeclaration.canvas=this.canvas;styleDeclaration.getObjectScaling=this.getObjectScaling;this._setShadow.call(styleDeclaration,ctx);}if(!this.caching||!charWidthsCache[cacheProp]){width=ctx.measureText(_char).width;this.caching&&(charWidthsCache[cacheProp]=width);return width;}return charWidthsCache[cacheProp];},/**
     * @private
     * @param {Object} styleDeclaration
     */_applyFontStyles:function(styleDeclaration){if(!styleDeclaration.fontFamily){styleDeclaration.fontFamily=this.fontFamily;}if(!styleDeclaration.fontSize){styleDeclaration.fontSize=this.fontSize;}if(!styleDeclaration.fontWeight){styleDeclaration.fontWeight=this.fontWeight;}if(!styleDeclaration.fontStyle){styleDeclaration.fontStyle=this.fontStyle;}},/**
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @param {Boolean} [returnCloneOrEmpty=false]
     * @private
     */_getStyleDeclaration:function(lineIndex,charIndex,returnCloneOrEmpty){if(returnCloneOrEmpty){return this.styles[lineIndex]&&this.styles[lineIndex][charIndex]?clone(this.styles[lineIndex][charIndex]):{};}return this.styles[lineIndex]&&this.styles[lineIndex][charIndex]?this.styles[lineIndex][charIndex]:null;},/**
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @param {Object} style
     * @private
     */_setStyleDeclaration:function(lineIndex,charIndex,style){this.styles[lineIndex][charIndex]=style;},/**
     *
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @private
     */_deleteStyleDeclaration:function(lineIndex,charIndex){delete this.styles[lineIndex][charIndex];},/**
     * @param {Number} lineIndex
     * @private
     */_getLineStyle:function(lineIndex){return this.styles[lineIndex];},/**
     * @param {Number} lineIndex
     * @param {Object} style
     * @private
     */_setLineStyle:function(lineIndex,style){this.styles[lineIndex]=style;},/**
     * @param {Number} lineIndex
     * @private
     */_deleteLineStyle:function(lineIndex){delete this.styles[lineIndex];},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_getWidthOfChar:function(ctx,_char,lineIndex,charIndex){if(!this._isMeasuring&&this.textAlign==='justify'&&this._reSpacesAndTabs.test(_char)){return this._getWidthOfSpace(ctx,lineIndex);}ctx.save();var width=this._applyCharStylesGetWidth(ctx,_char,lineIndex,charIndex);if(this.charSpacing!==0){width+=this._getWidthOfCharSpacing();}ctx.restore();return width>0?width:0;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Number} lineIndex
     * @param {Number} charIndex
     */_getHeightOfChar:function(ctx,lineIndex,charIndex){var style=this._getStyleDeclaration(lineIndex,charIndex);return style&&style.fontSize?style.fontSize:this.fontSize;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Number} lineIndex
     * @param {Number} charIndex
     */_getWidthOfCharsAt:function(ctx,lineIndex,charIndex){var width=0,i,_char;for(i=0;i<charIndex;i++){_char=this._textLines[lineIndex][i];width+=this._getWidthOfChar(ctx,_char,lineIndex,i);}return width;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Number} lineIndex line number
     * @return {Number} Line width
     */_measureLine:function(ctx,lineIndex){this._isMeasuring=true;var width=this._getWidthOfCharsAt(ctx,lineIndex,this._textLines[lineIndex].length);if(this.charSpacing!==0){width-=this._getWidthOfCharSpacing();}this._isMeasuring=false;return width>0?width:0;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Number} lineIndex
     */_getWidthOfSpace:function(ctx,lineIndex){if(this.__widthOfSpace[lineIndex]){return this.__widthOfSpace[lineIndex];}var line=this._textLines[lineIndex],wordsWidth=this._getWidthOfWords(ctx,line,lineIndex,0),widthDiff=this.width-wordsWidth,numSpaces=line.length-line.replace(this._reSpacesAndTabs,'').length,width=Math.max(widthDiff/numSpaces,ctx.measureText(' ').width);this.__widthOfSpace[lineIndex]=width;return width;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {String} line
     * @param {Number} lineIndex
     * @param {Number} charOffset
     */_getWidthOfWords:function(ctx,line,lineIndex,charOffset){var width=0;for(var charIndex=0;charIndex<line.length;charIndex++){var _char=line[charIndex];if(!_char.match(/\s/)){width+=this._getWidthOfChar(ctx,_char,lineIndex,charIndex+charOffset);}}return width;},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_getHeightOfLine:function(ctx,lineIndex){if(this.__lineHeights[lineIndex]){return this.__lineHeights[lineIndex];}var line=this._textLines[lineIndex],maxHeight=this._getHeightOfChar(ctx,lineIndex,0);for(var i=1,len=line.length;i<len;i++){var currentCharHeight=this._getHeightOfChar(ctx,lineIndex,i);if(currentCharHeight>maxHeight){maxHeight=currentCharHeight;}}this.__lineHeights[lineIndex]=maxHeight*this.lineHeight*this._fontSizeMult;return this.__lineHeights[lineIndex];},/**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */_getTextHeight:function(ctx){var lineHeight,height=0;for(var i=0,len=this._textLines.length;i<len;i++){lineHeight=this._getHeightOfLine(ctx,i);height+=i===len-1?lineHeight/this.lineHeight:lineHeight;}return height;},/**
     * Returns object representation of an instance
     * @method toObject
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */toObject:function(propertiesToInclude){return fabric.util.object.extend(this.callSuper('toObject',propertiesToInclude),{styles:clone(this.styles,true)});}});/**
   * Returns fabric.IText instance from an object representation
   * @static
   * @memberOf fabric.IText
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] invoked with new instance as argument
   * @param {Boolean} [forceAsync] Force an async behaviour trying to create pattern first
   * @return {fabric.IText} instance of fabric.IText
   */fabric.IText.fromObject=function(object,callback,forceAsync){return fabric.Object._fromObject('IText',object,callback,forceAsync,'text');};})();(function(){var clone=fabric.util.object.clone;fabric.util.object.extend(fabric.IText.prototype,/** @lends fabric.IText.prototype */{/**
     * Initializes all the interactive behavior of IText
     */initBehavior:function(){this.initAddedHandler();this.initRemovedHandler();this.initCursorSelectionHandlers();this.initDoubleClickSimulation();this.mouseMoveHandler=this.mouseMoveHandler.bind(this);},onDeselect:function(){this.isEditing&&this.exitEditing();this.selected=false;this.callSuper('onDeselect');},/**
     * Initializes "added" event handler
     */initAddedHandler:function(){var _this=this;this.on('added',function(){var canvas=_this.canvas;if(canvas){if(!canvas._hasITextHandlers){canvas._hasITextHandlers=true;_this._initCanvasHandlers(canvas);}canvas._iTextInstances=canvas._iTextInstances||[];canvas._iTextInstances.push(_this);}});},initRemovedHandler:function(){var _this=this;this.on('removed',function(){var canvas=_this.canvas;if(canvas){canvas._iTextInstances=canvas._iTextInstances||[];fabric.util.removeFromArray(canvas._iTextInstances,_this);if(canvas._iTextInstances.length===0){canvas._hasITextHandlers=false;_this._removeCanvasHandlers(canvas);}}});},/**
     * register canvas event to manage exiting on other instances
     * @private
     */_initCanvasHandlers:function(canvas){canvas._mouseUpITextHandler=function(){if(canvas._iTextInstances){canvas._iTextInstances.forEach(function(obj){obj.__isMousedown=false;});}}.bind(this);canvas.on('mouse:up',canvas._mouseUpITextHandler);},/**
     * remove canvas event to manage exiting on other instances
     * @private
     */_removeCanvasHandlers:function(canvas){canvas.off('mouse:up',canvas._mouseUpITextHandler);},/**
     * @private
     */_tick:function(){this._currentTickState=this._animateCursor(this,1,this.cursorDuration,'_onTickComplete');},/**
     * @private
     */_animateCursor:function(obj,targetOpacity,duration,completeMethod){var tickState;tickState={isAborted:false,abort:function(){this.isAborted=true;}};obj.animate('_currentCursorOpacity',targetOpacity,{duration:duration,onComplete:function(){if(!tickState.isAborted){obj[completeMethod]();}},onChange:function(){// we do not want to animate a selection, only cursor
if(obj.canvas&&obj.selectionStart===obj.selectionEnd){obj.renderCursorOrSelection();}},abort:function(){return tickState.isAborted;}});return tickState;},/**
     * @private
     */_onTickComplete:function(){var _this=this;if(this._cursorTimeout1){clearTimeout(this._cursorTimeout1);}this._cursorTimeout1=setTimeout(function(){_this._currentTickCompleteState=_this._animateCursor(_this,0,this.cursorDuration/2,'_tick');},100);},/**
     * Initializes delayed cursor
     */initDelayedCursor:function(restart){var _this=this,delay=restart?0:this.cursorDelay;this.abortCursorAnimation();this._currentCursorOpacity=1;this._cursorTimeout2=setTimeout(function(){_this._tick();},delay);},/**
     * Aborts cursor animation and clears all timeouts
     */abortCursorAnimation:function(){var shouldClear=this._currentTickState||this._currentTickCompleteState;this._currentTickState&&this._currentTickState.abort();this._currentTickCompleteState&&this._currentTickCompleteState.abort();clearTimeout(this._cursorTimeout1);clearTimeout(this._cursorTimeout2);this._currentCursorOpacity=0;// to clear just itext area we need to transform the context
// it may not be worth it
if(shouldClear){this.canvas&&this.canvas.clearContext(this.canvas.contextTop||this.ctx);}},/**
     * Selects entire text
     */selectAll:function(){this.selectionStart=0;this.selectionEnd=this.text.length;this._fireSelectionChanged();this._updateTextarea();},/**
     * Returns selected text
     * @return {String}
     */getSelectedText:function(){return this.text.slice(this.selectionStart,this.selectionEnd);},/**
     * Find new selection index representing start of current word according to current selection index
     * @param {Number} startFrom Surrent selection index
     * @return {Number} New selection index
     */findWordBoundaryLeft:function(startFrom){var offset=0,index=startFrom-1;// remove space before cursor first
if(this._reSpace.test(this.text.charAt(index))){while(this._reSpace.test(this.text.charAt(index))){offset++;index--;}}while(/\S/.test(this.text.charAt(index))&&index>-1){offset++;index--;}return startFrom-offset;},/**
     * Find new selection index representing end of current word according to current selection index
     * @param {Number} startFrom Current selection index
     * @return {Number} New selection index
     */findWordBoundaryRight:function(startFrom){var offset=0,index=startFrom;// remove space after cursor first
if(this._reSpace.test(this.text.charAt(index))){while(this._reSpace.test(this.text.charAt(index))){offset++;index++;}}while(/\S/.test(this.text.charAt(index))&&index<this.text.length){offset++;index++;}return startFrom+offset;},/**
     * Find new selection index representing start of current line according to current selection index
     * @param {Number} startFrom Current selection index
     * @return {Number} New selection index
     */findLineBoundaryLeft:function(startFrom){var offset=0,index=startFrom-1;while(!/\n/.test(this.text.charAt(index))&&index>-1){offset++;index--;}return startFrom-offset;},/**
     * Find new selection index representing end of current line according to current selection index
     * @param {Number} startFrom Current selection index
     * @return {Number} New selection index
     */findLineBoundaryRight:function(startFrom){var offset=0,index=startFrom;while(!/\n/.test(this.text.charAt(index))&&index<this.text.length){offset++;index++;}return startFrom+offset;},/**
     * Returns number of newlines in selected text
     * @return {Number} Number of newlines in selected text
     */getNumNewLinesInSelectedText:function(){var selectedText=this.getSelectedText(),numNewLines=0;for(var i=0,len=selectedText.length;i<len;i++){if(selectedText[i]==='\n'){numNewLines++;}}return numNewLines;},/**
     * Finds index corresponding to beginning or end of a word
     * @param {Number} selectionStart Index of a character
     * @param {Number} direction 1 or -1
     * @return {Number} Index of the beginning or end of a word
     */searchWordBoundary:function(selectionStart,direction){var index=this._reSpace.test(this.text.charAt(selectionStart))?selectionStart-1:selectionStart,_char=this.text.charAt(index),reNonWord=/[ \n\.,;!\?\-]/;while(!reNonWord.test(_char)&&index>0&&index<this.text.length){index+=direction;_char=this.text.charAt(index);}if(reNonWord.test(_char)&&_char!=='\n'){index+=direction===1?0:1;}return index;},/**
     * Selects a word based on the index
     * @param {Number} selectionStart Index of a character
     */selectWord:function(selectionStart){selectionStart=selectionStart||this.selectionStart;var newSelectionStart=this.searchWordBoundary(selectionStart,-1),/* search backwards */newSelectionEnd=this.searchWordBoundary(selectionStart,1);/* search forward */this.selectionStart=newSelectionStart;this.selectionEnd=newSelectionEnd;this._fireSelectionChanged();this._updateTextarea();this.renderCursorOrSelection();},/**
     * Selects a line based on the index
     * @param {Number} selectionStart Index of a character
     */selectLine:function(selectionStart){selectionStart=selectionStart||this.selectionStart;var newSelectionStart=this.findLineBoundaryLeft(selectionStart),newSelectionEnd=this.findLineBoundaryRight(selectionStart);this.selectionStart=newSelectionStart;this.selectionEnd=newSelectionEnd;this._fireSelectionChanged();this._updateTextarea();},/**
     * Enters editing state
     * @return {fabric.IText} thisArg
     * @chainable
     */enterEditing:function(e){if(this.isEditing||!this.editable){return;}if(this.canvas){this.exitEditingOnOthers(this.canvas);}this.isEditing=true;this.selected=true;this.initHiddenTextarea(e);this.hiddenTextarea.focus();this._updateTextarea();this._saveEditingProps();this._setEditingProps();this._textBeforeEdit=this.text;this._tick();this.fire('editing:entered');this._fireSelectionChanged();if(!this.canvas){return this;}this.canvas.fire('text:editing:entered',{target:this});this.initMouseMoveHandler();this.canvas.renderAll();return this;},exitEditingOnOthers:function(canvas){if(canvas._iTextInstances){canvas._iTextInstances.forEach(function(obj){obj.selected=false;if(obj.isEditing){obj.exitEditing();}});}},/**
     * Initializes "mousemove" event handler
     */initMouseMoveHandler:function(){this.canvas.on('mouse:move',this.mouseMoveHandler);},/**
     * @private
     */mouseMoveHandler:function(options){if(!this.__isMousedown||!this.isEditing){return;}var newSelectionStart=this.getSelectionStartFromPointer(options.e),currentStart=this.selectionStart,currentEnd=this.selectionEnd;if((newSelectionStart!==this.__selectionStartOnMouseDown||currentStart===currentEnd)&&(currentStart===newSelectionStart||currentEnd===newSelectionStart)){return;}if(newSelectionStart>this.__selectionStartOnMouseDown){this.selectionStart=this.__selectionStartOnMouseDown;this.selectionEnd=newSelectionStart;}else{this.selectionStart=newSelectionStart;this.selectionEnd=this.__selectionStartOnMouseDown;}if(this.selectionStart!==currentStart||this.selectionEnd!==currentEnd){this.restartCursorIfNeeded();this._fireSelectionChanged();this._updateTextarea();this.renderCursorOrSelection();}},/**
     * @private
     */_setEditingProps:function(){this.hoverCursor='text';if(this.canvas){this.canvas.defaultCursor=this.canvas.moveCursor='text';}this.borderColor=this.editingBorderColor;this.hasControls=this.selectable=false;this.lockMovementX=this.lockMovementY=true;},/**
     * @private
     */_updateTextarea:function(){if(!this.hiddenTextarea||this.inCompositionMode){return;}this.cursorOffsetCache={};this.hiddenTextarea.value=this.text;this.hiddenTextarea.selectionStart=this.selectionStart;this.hiddenTextarea.selectionEnd=this.selectionEnd;if(this.selectionStart===this.selectionEnd){var style=this._calcTextareaPosition();this.hiddenTextarea.style.left=style.left;this.hiddenTextarea.style.top=style.top;this.hiddenTextarea.style.fontSize=style.fontSize;}},/**
     * @private
     * @return {Object} style contains style for hiddenTextarea
     */_calcTextareaPosition:function(){if(!this.canvas){return{x:1,y:1};}var chars=this.text.split(''),boundaries=this._getCursorBoundaries(chars,'cursor'),cursorLocation=this.get2DCursorLocation(),lineIndex=cursorLocation.lineIndex,charIndex=cursorLocation.charIndex,charHeight=this.getCurrentCharFontSize(lineIndex,charIndex),leftOffset=boundaries.leftOffset,m=this.calcTransformMatrix(),p={x:boundaries.left+leftOffset,y:boundaries.top+boundaries.topOffset+charHeight},upperCanvas=this.canvas.upperCanvasEl,maxWidth=upperCanvas.width-charHeight,maxHeight=upperCanvas.height-charHeight;p=fabric.util.transformPoint(p,m);p=fabric.util.transformPoint(p,this.canvas.viewportTransform);if(p.x<0){p.x=0;}if(p.x>maxWidth){p.x=maxWidth;}if(p.y<0){p.y=0;}if(p.y>maxHeight){p.y=maxHeight;}// add canvas offset on document
p.x+=this.canvas._offset.left;p.y+=this.canvas._offset.top;return{left:p.x+'px',top:p.y+'px',fontSize:charHeight};},/**
     * @private
     */_saveEditingProps:function(){this._savedProps={hasControls:this.hasControls,borderColor:this.borderColor,lockMovementX:this.lockMovementX,lockMovementY:this.lockMovementY,hoverCursor:this.hoverCursor,defaultCursor:this.canvas&&this.canvas.defaultCursor,moveCursor:this.canvas&&this.canvas.moveCursor};},/**
     * @private
     */_restoreEditingProps:function(){if(!this._savedProps){return;}this.hoverCursor=this._savedProps.overCursor;this.hasControls=this._savedProps.hasControls;this.borderColor=this._savedProps.borderColor;this.lockMovementX=this._savedProps.lockMovementX;this.lockMovementY=this._savedProps.lockMovementY;if(this.canvas){this.canvas.defaultCursor=this._savedProps.defaultCursor;this.canvas.moveCursor=this._savedProps.moveCursor;}},/**
     * Exits from editing state
     * @return {fabric.IText} thisArg
     * @chainable
     */exitEditing:function(){var isTextChanged=this._textBeforeEdit!==this.text;this.selected=false;this.isEditing=false;this.selectable=true;this.selectionEnd=this.selectionStart;if(this.hiddenTextarea){this.hiddenTextarea.blur&&this.hiddenTextarea.blur();this.canvas&&this.hiddenTextarea.parentNode.removeChild(this.hiddenTextarea);this.hiddenTextarea=null;}this.abortCursorAnimation();this._restoreEditingProps();this._currentCursorOpacity=0;this.fire('editing:exited');isTextChanged&&this.fire('modified');if(this.canvas){this.canvas.off('mouse:move',this.mouseMoveHandler);this.canvas.fire('text:editing:exited',{target:this});isTextChanged&&this.canvas.fire('object:modified',{target:this});}return this;},/**
     * @private
     */_removeExtraneousStyles:function(){for(var prop in this.styles){if(!this._textLines[prop]){delete this.styles[prop];}}},/**
     * @private
     */_removeCharsFromTo:function(start,end){while(end!==start){this._removeSingleCharAndStyle(start+1);end--;}this.selectionStart=start;this.selectionEnd=start;},_removeSingleCharAndStyle:function(index){var isBeginningOfLine=this.text[index-1]==='\n',indexStyle=isBeginningOfLine?index:index-1;this.removeStyleObject(isBeginningOfLine,indexStyle);this.text=this.text.slice(0,index-1)+this.text.slice(index);this._textLines=this._splitTextIntoLines();},/**
     * Inserts characters where cursor is (replacing selection if one exists)
     * @param {String} _chars Characters to insert
     * @param {Boolean} useCopiedStyle use fabric.copiedTextStyle
     */insertChars:function(_chars,useCopiedStyle){var style;if(this.selectionEnd-this.selectionStart>1){this._removeCharsFromTo(this.selectionStart,this.selectionEnd);}//short circuit for block paste
if(!useCopiedStyle&&this.isEmptyStyles()){this.insertChar(_chars,false);return;}for(var i=0,len=_chars.length;i<len;i++){if(useCopiedStyle){style=fabric.util.object.clone(fabric.copiedTextStyle[i],true);}this.insertChar(_chars[i],i<len-1,style);}},/**
     * Inserts a character where cursor is
     * @param {String} _char Characters to insert
     * @param {Boolean} skipUpdate trigger rendering and updates at the end of text insert
     * @param {Object} styleObject Style to be inserted for the new char
     */insertChar:function(_char,skipUpdate,styleObject){var isEndOfLine=this.text[this.selectionStart]==='\n';this.text=this.text.slice(0,this.selectionStart)+_char+this.text.slice(this.selectionEnd);this._textLines=this._splitTextIntoLines();this.insertStyleObjects(_char,isEndOfLine,styleObject);this.selectionStart+=_char.length;this.selectionEnd=this.selectionStart;if(skipUpdate){return;}this._updateTextarea();this.setCoords();this._fireSelectionChanged();this.fire('changed');this.restartCursorIfNeeded();if(this.canvas){this.canvas.fire('text:changed',{target:this});this.canvas.renderAll();}},restartCursorIfNeeded:function(){if(!this._currentTickState||this._currentTickState.isAborted||!this._currentTickCompleteState||this._currentTickCompleteState.isAborted){this.initDelayedCursor();}},/**
     * Inserts new style object
     * @param {Number} lineIndex Index of a line
     * @param {Number} charIndex Index of a char
     * @param {Boolean} isEndOfLine True if it's end of line
     */insertNewlineStyleObject:function(lineIndex,charIndex,isEndOfLine){this.shiftLineStyles(lineIndex,+1);var currentCharStyle={},newLineStyles={};if(this.styles[lineIndex]&&this.styles[lineIndex][charIndex-1]){currentCharStyle=this.styles[lineIndex][charIndex-1];}// if there's nothing after cursor,
// we clone current char style onto the next (otherwise empty) line
if(isEndOfLine&&currentCharStyle){newLineStyles[0]=clone(currentCharStyle);this.styles[lineIndex+1]=newLineStyles;}// otherwise we clone styles of all chars
// after cursor onto the next line, from the beginning
else{var somethingAdded=false;for(var index in this.styles[lineIndex]){var numIndex=parseInt(index,10);if(numIndex>=charIndex){somethingAdded=true;newLineStyles[numIndex-charIndex]=this.styles[lineIndex][index];// remove lines from the previous line since they're on a new line now
delete this.styles[lineIndex][index];}}somethingAdded&&(this.styles[lineIndex+1]=newLineStyles);}this._forceClearCache=true;},/**
     * Inserts style object for a given line/char index
     * @param {Number} lineIndex Index of a line
     * @param {Number} charIndex Index of a char
     * @param {Object} [style] Style object to insert, if given
     */insertCharStyleObject:function(lineIndex,charIndex,style){var currentLineStyles=this.styles[lineIndex],currentLineStylesCloned=clone(currentLineStyles);if(charIndex===0&&!style){charIndex=1;}// shift all char styles by 1 forward
// 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4
for(var index in currentLineStylesCloned){var numericIndex=parseInt(index,10);if(numericIndex>=charIndex){currentLineStyles[numericIndex+1]=currentLineStylesCloned[numericIndex];// only delete the style if there was nothing moved there
if(!currentLineStylesCloned[numericIndex-1]){delete currentLineStyles[numericIndex];}}}var newStyle=style||clone(currentLineStyles[charIndex-1]);newStyle&&(this.styles[lineIndex][charIndex]=newStyle);this._forceClearCache=true;},/**
     * Inserts style object(s)
     * @param {String} _chars Characters at the location where style is inserted
     * @param {Boolean} isEndOfLine True if it's end of line
     * @param {Object} [styleObject] Style to insert
     */insertStyleObjects:function(_chars,isEndOfLine,styleObject){// removed shortcircuit over isEmptyStyles
var cursorLocation=this.get2DCursorLocation(),lineIndex=cursorLocation.lineIndex,charIndex=cursorLocation.charIndex;if(!this._getLineStyle(lineIndex)){this._setLineStyle(lineIndex,{});}if(_chars==='\n'){this.insertNewlineStyleObject(lineIndex,charIndex,isEndOfLine);}else{this.insertCharStyleObject(lineIndex,charIndex,styleObject);}},/**
     * Shifts line styles up or down
     * @param {Number} lineIndex Index of a line
     * @param {Number} offset Can be -1 or +1
     */shiftLineStyles:function(lineIndex,offset){// shift all line styles by 1 upward or downward
var clonedStyles=clone(this.styles);for(var line in clonedStyles){var numericLine=parseInt(line,10);if(numericLine<=lineIndex){delete clonedStyles[numericLine];}}for(var line in this.styles){var numericLine=parseInt(line,10);if(numericLine>lineIndex){this.styles[numericLine+offset]=clonedStyles[numericLine];if(!clonedStyles[numericLine-offset]){delete this.styles[numericLine];}}}//TODO: evaluate if delete old style lines with offset -1
},/**
     * Removes style object
     * @param {Boolean} isBeginningOfLine True if cursor is at the beginning of line
     * @param {Number} [index] Optional index. When not given, current selectionStart is used.
     */removeStyleObject:function(isBeginningOfLine,index){var cursorLocation=this.get2DCursorLocation(index),lineIndex=cursorLocation.lineIndex,charIndex=cursorLocation.charIndex;this._removeStyleObject(isBeginningOfLine,cursorLocation,lineIndex,charIndex);},_getTextOnPreviousLine:function(lIndex){return this._textLines[lIndex-1];},_removeStyleObject:function(isBeginningOfLine,cursorLocation,lineIndex,charIndex){if(isBeginningOfLine){var textOnPreviousLine=this._getTextOnPreviousLine(cursorLocation.lineIndex),newCharIndexOnPrevLine=textOnPreviousLine?textOnPreviousLine.length:0;if(!this.styles[lineIndex-1]){this.styles[lineIndex-1]={};}for(charIndex in this.styles[lineIndex]){this.styles[lineIndex-1][parseInt(charIndex,10)+newCharIndexOnPrevLine]=this.styles[lineIndex][charIndex];}this.shiftLineStyles(cursorLocation.lineIndex,-1);}else{var currentLineStyles=this.styles[lineIndex];if(currentLineStyles){delete currentLineStyles[charIndex];}var currentLineStylesCloned=clone(currentLineStyles);// shift all styles by 1 backwards
for(var i in currentLineStylesCloned){var numericIndex=parseInt(i,10);if(numericIndex>=charIndex&&numericIndex!==0){currentLineStyles[numericIndex-1]=currentLineStylesCloned[numericIndex];delete currentLineStyles[numericIndex];}}}},/**
     * Inserts new line
     */insertNewline:function(){this.insertChars('\n');},/**
     * Set the selectionStart and selectionEnd according to the ne postion of cursor
     * mimic the key - mouse navigation when shift is pressed.
     */setSelectionStartEndWithShift:function(start,end,newSelection){if(newSelection<=start){if(end===start){this._selectionDirection='left';}else if(this._selectionDirection==='right'){this._selectionDirection='left';this.selectionEnd=start;}this.selectionStart=newSelection;}else if(newSelection>start&&newSelection<end){if(this._selectionDirection==='right'){this.selectionEnd=newSelection;}else{this.selectionStart=newSelection;}}else{// newSelection is > selection start and end
if(end===start){this._selectionDirection='right';}else if(this._selectionDirection==='left'){this._selectionDirection='right';this.selectionStart=end;}this.selectionEnd=newSelection;}},setSelectionInBoundaries:function(){var length=this.text.length;if(this.selectionStart>length){this.selectionStart=length;}else if(this.selectionStart<0){this.selectionStart=0;}if(this.selectionEnd>length){this.selectionEnd=length;}else if(this.selectionEnd<0){this.selectionEnd=0;}}});})();fabric.util.object.extend(fabric.IText.prototype,/** @lends fabric.IText.prototype */{/**
   * Initializes "dbclick" event handler
   */initDoubleClickSimulation:function(){// for double click
this.__lastClickTime=+new Date();// for triple click
this.__lastLastClickTime=+new Date();this.__lastPointer={};this.on('mousedown',this.onMouseDown.bind(this));},onMouseDown:function(options){this.__newClickTime=+new Date();var newPointer=this.canvas.getPointer(options.e);if(this.isTripleClick(newPointer,options.e)){this.fire('tripleclick',options);this._stopEvent(options.e);}else if(this.isDoubleClick(newPointer)){this.fire('dblclick',options);this._stopEvent(options.e);}this.__lastLastClickTime=this.__lastClickTime;this.__lastClickTime=this.__newClickTime;this.__lastPointer=newPointer;this.__lastIsEditing=this.isEditing;this.__lastSelected=this.selected;},isDoubleClick:function(newPointer){return this.__newClickTime-this.__lastClickTime<500&&this.__lastPointer.x===newPointer.x&&this.__lastPointer.y===newPointer.y&&this.__lastIsEditing;},isTripleClick:function(newPointer){return this.__newClickTime-this.__lastClickTime<500&&this.__lastClickTime-this.__lastLastClickTime<500&&this.__lastPointer.x===newPointer.x&&this.__lastPointer.y===newPointer.y;},/**
   * @private
   */_stopEvent:function(e){e.preventDefault&&e.preventDefault();e.stopPropagation&&e.stopPropagation();},/**
   * Initializes event handlers related to cursor or selection
   */initCursorSelectionHandlers:function(){this.initMousedownHandler();this.initMouseupHandler();this.initClicks();},/**
   * Initializes double and triple click event handlers
   */initClicks:function(){this.on('dblclick',function(options){this.selectWord(this.getSelectionStartFromPointer(options.e));});this.on('tripleclick',function(options){this.selectLine(this.getSelectionStartFromPointer(options.e));});},/**
   * Initializes "mousedown" event handler
   */initMousedownHandler:function(){this.on('mousedown',function(options){if(!this.editable||options.e.button&&options.e.button!==1){return;}var pointer=this.canvas.getPointer(options.e);this.__mousedownX=pointer.x;this.__mousedownY=pointer.y;this.__isMousedown=true;if(this.selected){this.setCursorByClick(options.e);}if(this.isEditing){this.__selectionStartOnMouseDown=this.selectionStart;if(this.selectionStart===this.selectionEnd){this.abortCursorAnimation();}this.renderCursorOrSelection();}});},/**
   * @private
   */_isObjectMoved:function(e){var pointer=this.canvas.getPointer(e);return this.__mousedownX!==pointer.x||this.__mousedownY!==pointer.y;},/**
   * Initializes "mouseup" event handler
   */initMouseupHandler:function(){this.on('mouseup',function(options){this.__isMousedown=false;if(!this.editable||this._isObjectMoved(options.e)||options.e.button&&options.e.button!==1){return;}if(this.__lastSelected&&!this.__corner){this.enterEditing(options.e);if(this.selectionStart===this.selectionEnd){this.initDelayedCursor(true);}else{this.renderCursorOrSelection();}}this.selected=true;});},/**
   * Changes cursor location in a text depending on passed pointer (x/y) object
   * @param {Event} e Event object
   */setCursorByClick:function(e){var newSelection=this.getSelectionStartFromPointer(e),start=this.selectionStart,end=this.selectionEnd;if(e.shiftKey){this.setSelectionStartEndWithShift(start,end,newSelection);}else{this.selectionStart=newSelection;this.selectionEnd=newSelection;}if(this.isEditing){this._fireSelectionChanged();this._updateTextarea();}},/**
   * Returns index of a character corresponding to where an object was clicked
   * @param {Event} e Event object
   * @return {Number} Index of a character
   */getSelectionStartFromPointer:function(e){var mouseOffset=this.getLocalPointer(e),prevWidth=0,width=0,height=0,charIndex=0,newSelectionStart,line;for(var i=0,len=this._textLines.length;i<len;i++){line=this._textLines[i];height+=this._getHeightOfLine(this.ctx,i)*this.scaleY;var widthOfLine=this._getLineWidth(this.ctx,i),lineLeftOffset=this._getLineLeftOffset(widthOfLine);width=lineLeftOffset*this.scaleX;for(var j=0,jlen=line.length;j<jlen;j++){prevWidth=width;width+=this._getWidthOfChar(this.ctx,line[j],i,this.flipX?jlen-j:j)*this.scaleX;if(height<=mouseOffset.y||width<=mouseOffset.x){charIndex++;continue;}return this._getNewSelectionStartFromOffset(mouseOffset,prevWidth,width,charIndex+i,jlen);}if(mouseOffset.y<height){//this happens just on end of lines.
return this._getNewSelectionStartFromOffset(mouseOffset,prevWidth,width,charIndex+i-1,jlen);}}// clicked somewhere after all chars, so set at the end
if(typeof newSelectionStart==='undefined'){return this.text.length;}},/**
   * @private
   */_getNewSelectionStartFromOffset:function(mouseOffset,prevWidth,width,index,jlen){var distanceBtwLastCharAndCursor=mouseOffset.x-prevWidth,distanceBtwNextCharAndCursor=width-mouseOffset.x,offset=distanceBtwNextCharAndCursor>distanceBtwLastCharAndCursor?0:1,newSelectionStart=index+offset;// if object is horizontally flipped, mirror cursor location from the end
if(this.flipX){newSelectionStart=jlen-newSelectionStart;}if(newSelectionStart>this.text.length){newSelectionStart=this.text.length;}return newSelectionStart;}});fabric.util.object.extend(fabric.IText.prototype,/** @lends fabric.IText.prototype */{/**
   * Initializes hidden textarea (needed to bring up keyboard in iOS)
   */initHiddenTextarea:function(){this.hiddenTextarea=fabric.document.createElement('textarea');this.hiddenTextarea.setAttribute('autocapitalize','off');this.hiddenTextarea.setAttribute('autocorrect','off');this.hiddenTextarea.setAttribute('autocomplete','off');this.hiddenTextarea.setAttribute('spellcheck','false');this.hiddenTextarea.setAttribute('data-fabric-hiddentextarea','');this.hiddenTextarea.setAttribute('wrap','off');var style=this._calcTextareaPosition();this.hiddenTextarea.style.cssText='position: absolute; top: '+style.top+'; left: '+style.left+'; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px;'+' line-height: 1px; paddingｰtop: '+style.fontSize+';';fabric.document.body.appendChild(this.hiddenTextarea);fabric.util.addListener(this.hiddenTextarea,'keydown',this.onKeyDown.bind(this));fabric.util.addListener(this.hiddenTextarea,'keyup',this.onKeyUp.bind(this));fabric.util.addListener(this.hiddenTextarea,'input',this.onInput.bind(this));fabric.util.addListener(this.hiddenTextarea,'copy',this.copy.bind(this));fabric.util.addListener(this.hiddenTextarea,'cut',this.cut.bind(this));fabric.util.addListener(this.hiddenTextarea,'paste',this.paste.bind(this));fabric.util.addListener(this.hiddenTextarea,'compositionstart',this.onCompositionStart.bind(this));fabric.util.addListener(this.hiddenTextarea,'compositionupdate',this.onCompositionUpdate.bind(this));fabric.util.addListener(this.hiddenTextarea,'compositionend',this.onCompositionEnd.bind(this));if(!this._clickHandlerInitialized&&this.canvas){fabric.util.addListener(this.canvas.upperCanvasEl,'click',this.onClick.bind(this));this._clickHandlerInitialized=true;}},/**
   * For functionalities on keyDown
   * Map a special key to a function of the instance/prototype
   * If you need different behaviour for ESC or TAB or arrows, you have to change
   * this map setting the name of a function that you build on the fabric.Itext or
   * your prototype.
   * the map change will affect all Instances unless you need for only some text Instances
   * in that case you have to clone this object and assign your Instance.
   * this.keysMap = fabric.util.object.clone(this.keysMap);
   * The function must be in fabric.Itext.prototype.myFunction And will receive event as args[0]
   */keysMap:{8:'removeChars',9:'exitEditing',27:'exitEditing',13:'insertNewline',33:'moveCursorUp',34:'moveCursorDown',35:'moveCursorRight',36:'moveCursorLeft',37:'moveCursorLeft',38:'moveCursorUp',39:'moveCursorRight',40:'moveCursorDown',46:'forwardDelete'},/**
   * For functionalities on keyUp + ctrl || cmd
   */ctrlKeysMapUp:{67:'copy',88:'cut'},/**
   * For functionalities on keyDown + ctrl || cmd
   */ctrlKeysMapDown:{65:'selectAll'},onClick:function(){// No need to trigger click event here, focus is enough to have the keyboard appear on Android
this.hiddenTextarea&&this.hiddenTextarea.focus();},/**
   * Handles keyup event
   * @param {Event} e Event object
   */onKeyDown:function(e){if(!this.isEditing){return;}if(e.keyCode in this.keysMap){this[this.keysMap[e.keyCode]](e);}else if(e.keyCode in this.ctrlKeysMapDown&&(e.ctrlKey||e.metaKey)){this[this.ctrlKeysMapDown[e.keyCode]](e);}else{return;}e.stopImmediatePropagation();e.preventDefault();if(e.keyCode>=33&&e.keyCode<=40){// if i press an arrow key just update selection
this.clearContextTop();this.renderCursorOrSelection();}else{this.canvas&&this.canvas.renderAll();}},/**
   * Handles keyup event
   * We handle KeyUp because ie11 and edge have difficulties copy/pasting
   * if a copy/cut event fired, keyup is dismissed
   * @param {Event} e Event object
   */onKeyUp:function(e){if(!this.isEditing||this._copyDone){this._copyDone=false;return;}if(e.keyCode in this.ctrlKeysMapUp&&(e.ctrlKey||e.metaKey)){this[this.ctrlKeysMapUp[e.keyCode]](e);}else{return;}e.stopImmediatePropagation();e.preventDefault();this.canvas&&this.canvas.renderAll();},/**
   * Handles onInput event
   * @param {Event} e Event object
   */onInput:function(e){if(!this.isEditing||this.inCompositionMode){return;}var offset=this.selectionStart||0,offsetEnd=this.selectionEnd||0,textLength=this.text.length,newTextLength=this.hiddenTextarea.value.length,diff,charsToInsert,start;if(newTextLength>textLength){//we added some character
start=this._selectionDirection==='left'?offsetEnd:offset;diff=newTextLength-textLength;charsToInsert=this.hiddenTextarea.value.slice(start,start+diff);}else{//we selected a portion of text and then input something else.
//Internet explorer does not trigger this else
diff=newTextLength-textLength+offsetEnd-offset;charsToInsert=this.hiddenTextarea.value.slice(offset,offset+diff);}this.insertChars(charsToInsert);e.stopPropagation();},/**
   * Composition start
   */onCompositionStart:function(){this.inCompositionMode=true;this.prevCompositionLength=0;this.compositionStart=this.selectionStart;},/**
   * Composition end
   */onCompositionEnd:function(){this.inCompositionMode=false;},/**
   * Composition update
   */onCompositionUpdate:function(e){var data=e.data;this.selectionStart=this.compositionStart;this.selectionEnd=this.selectionEnd===this.selectionStart?this.compositionStart+this.prevCompositionLength:this.selectionEnd;this.insertChars(data,false);this.prevCompositionLength=data.length;},/**
   * Forward delete
   */forwardDelete:function(e){if(this.selectionStart===this.selectionEnd){if(this.selectionStart===this.text.length){return;}this.moveCursorRight(e);}this.removeChars(e);},/**
   * Copies selected text
   * @param {Event} e Event object
   */copy:function(e){if(this.selectionStart===this.selectionEnd){//do not cut-copy if no selection
return;}var selectedText=this.getSelectedText(),clipboardData=this._getClipboardData(e);// Check for backward compatibility with old browsers
if(clipboardData){clipboardData.setData('text',selectedText);}fabric.copiedText=selectedText;fabric.copiedTextStyle=this.getSelectionStyles(this.selectionStart,this.selectionEnd);e.stopImmediatePropagation();e.preventDefault();this._copyDone=true;},/**
   * Pastes text
   * @param {Event} e Event object
   */paste:function(e){var copiedText=null,clipboardData=this._getClipboardData(e),useCopiedStyle=true;// Check for backward compatibility with old browsers
if(clipboardData){copiedText=clipboardData.getData('text').replace(/\r/g,'');if(!fabric.copiedTextStyle||fabric.copiedText!==copiedText){useCopiedStyle=false;}}else{copiedText=fabric.copiedText;}if(copiedText){this.insertChars(copiedText,useCopiedStyle);}e.stopImmediatePropagation();e.preventDefault();},/**
   * Cuts text
   * @param {Event} e Event object
   */cut:function(e){if(this.selectionStart===this.selectionEnd){return;}this.copy(e);this.removeChars(e);},/**
   * @private
   * @param {Event} e Event object
   * @return {Object} Clipboard data object
   */_getClipboardData:function(e){return e&&e.clipboardData||fabric.window.clipboardData;},/**
   * Finds the width in pixels before the cursor on the same line
   * @private
   * @param {Number} lineIndex
   * @param {Number} charIndex
   * @return {Number} widthBeforeCursor width before cursor
   */_getWidthBeforeCursor:function(lineIndex,charIndex){var textBeforeCursor=this._textLines[lineIndex].slice(0,charIndex),widthOfLine=this._getLineWidth(this.ctx,lineIndex),widthBeforeCursor=this._getLineLeftOffset(widthOfLine),_char;for(var i=0,len=textBeforeCursor.length;i<len;i++){_char=textBeforeCursor[i];widthBeforeCursor+=this._getWidthOfChar(this.ctx,_char,lineIndex,i);}return widthBeforeCursor;},/**
   * Gets start offset of a selection
   * @param {Event} e Event object
   * @param {Boolean} isRight
   * @return {Number}
   */getDownCursorOffset:function(e,isRight){var selectionProp=this._getSelectionForOffset(e,isRight),cursorLocation=this.get2DCursorLocation(selectionProp),lineIndex=cursorLocation.lineIndex;// if on last line, down cursor goes to end of line
if(lineIndex===this._textLines.length-1||e.metaKey||e.keyCode===34){// move to the end of a text
return this.text.length-selectionProp;}var charIndex=cursorLocation.charIndex,widthBeforeCursor=this._getWidthBeforeCursor(lineIndex,charIndex),indexOnOtherLine=this._getIndexOnLine(lineIndex+1,widthBeforeCursor),textAfterCursor=this._textLines[lineIndex].slice(charIndex);return textAfterCursor.length+indexOnOtherLine+2;},/**
   * private
   * Helps finding if the offset should be counted from Start or End
   * @param {Event} e Event object
   * @param {Boolean} isRight
   * @return {Number}
   */_getSelectionForOffset:function(e,isRight){if(e.shiftKey&&this.selectionStart!==this.selectionEnd&&isRight){return this.selectionEnd;}else{return this.selectionStart;}},/**
   * @param {Event} e Event object
   * @param {Boolean} isRight
   * @return {Number}
   */getUpCursorOffset:function(e,isRight){var selectionProp=this._getSelectionForOffset(e,isRight),cursorLocation=this.get2DCursorLocation(selectionProp),lineIndex=cursorLocation.lineIndex;if(lineIndex===0||e.metaKey||e.keyCode===33){// if on first line, up cursor goes to start of line
return-selectionProp;}var charIndex=cursorLocation.charIndex,widthBeforeCursor=this._getWidthBeforeCursor(lineIndex,charIndex),indexOnOtherLine=this._getIndexOnLine(lineIndex-1,widthBeforeCursor),textBeforeCursor=this._textLines[lineIndex].slice(0,charIndex);// return a negative offset
return-this._textLines[lineIndex-1].length+indexOnOtherLine-textBeforeCursor.length;},/**
   * find for a given width it founds the matching character.
   * @private
   */_getIndexOnLine:function(lineIndex,width){var widthOfLine=this._getLineWidth(this.ctx,lineIndex),textOnLine=this._textLines[lineIndex],lineLeftOffset=this._getLineLeftOffset(widthOfLine),widthOfCharsOnLine=lineLeftOffset,indexOnLine=0,foundMatch;for(var j=0,jlen=textOnLine.length;j<jlen;j++){var _char=textOnLine[j],widthOfChar=this._getWidthOfChar(this.ctx,_char,lineIndex,j);widthOfCharsOnLine+=widthOfChar;if(widthOfCharsOnLine>width){foundMatch=true;var leftEdge=widthOfCharsOnLine-widthOfChar,rightEdge=widthOfCharsOnLine,offsetFromLeftEdge=Math.abs(leftEdge-width),offsetFromRightEdge=Math.abs(rightEdge-width);indexOnLine=offsetFromRightEdge<offsetFromLeftEdge?j:j-1;break;}}// reached end
if(!foundMatch){indexOnLine=textOnLine.length-1;}return indexOnLine;},/**
   * Moves cursor down
   * @param {Event} e Event object
   */moveCursorDown:function(e){if(this.selectionStart>=this.text.length&&this.selectionEnd>=this.text.length){return;}this._moveCursorUpOrDown('Down',e);},/**
   * Moves cursor up
   * @param {Event} e Event object
   */moveCursorUp:function(e){if(this.selectionStart===0&&this.selectionEnd===0){return;}this._moveCursorUpOrDown('Up',e);},/**
   * Moves cursor up or down, fires the events
   * @param {String} direction 'Up' or 'Down'
   * @param {Event} e Event object
   */_moveCursorUpOrDown:function(direction,e){// getUpCursorOffset
// getDownCursorOffset
var action='get'+direction+'CursorOffset',offset=this[action](e,this._selectionDirection==='right');if(e.shiftKey){this.moveCursorWithShift(offset);}else{this.moveCursorWithoutShift(offset);}if(offset!==0){this.setSelectionInBoundaries();this.abortCursorAnimation();this._currentCursorOpacity=1;this.initDelayedCursor();this._fireSelectionChanged();this._updateTextarea();}},/**
   * Moves cursor with shift
   * @param {Number} offset
   */moveCursorWithShift:function(offset){var newSelection=this._selectionDirection==='left'?this.selectionStart+offset:this.selectionEnd+offset;this.setSelectionStartEndWithShift(this.selectionStart,this.selectionEnd,newSelection);return offset!==0;},/**
   * Moves cursor up without shift
   * @param {Number} offset
   */moveCursorWithoutShift:function(offset){if(offset<0){this.selectionStart+=offset;this.selectionEnd=this.selectionStart;}else{this.selectionEnd+=offset;this.selectionStart=this.selectionEnd;}return offset!==0;},/**
   * Moves cursor left
   * @param {Event} e Event object
   */moveCursorLeft:function(e){if(this.selectionStart===0&&this.selectionEnd===0){return;}this._moveCursorLeftOrRight('Left',e);},/**
   * @private
   * @return {Boolean} true if a change happened
   */_move:function(e,prop,direction){var newValue;if(e.altKey){newValue=this['findWordBoundary'+direction](this[prop]);}else if(e.metaKey||e.keyCode===35||e.keyCode===36){newValue=this['findLineBoundary'+direction](this[prop]);}else{this[prop]+=direction==='Left'?-1:1;return true;}if(typeof newValue!==undefined&&this[prop]!==newValue){this[prop]=newValue;return true;}},/**
   * @private
   */_moveLeft:function(e,prop){return this._move(e,prop,'Left');},/**
   * @private
   */_moveRight:function(e,prop){return this._move(e,prop,'Right');},/**
   * Moves cursor left without keeping selection
   * @param {Event} e
   */moveCursorLeftWithoutShift:function(e){var change=true;this._selectionDirection='left';// only move cursor when there is no selection,
// otherwise we discard it, and leave cursor on same place
if(this.selectionEnd===this.selectionStart&&this.selectionStart!==0){change=this._moveLeft(e,'selectionStart');}this.selectionEnd=this.selectionStart;return change;},/**
   * Moves cursor left while keeping selection
   * @param {Event} e
   */moveCursorLeftWithShift:function(e){if(this._selectionDirection==='right'&&this.selectionStart!==this.selectionEnd){return this._moveLeft(e,'selectionEnd');}else if(this.selectionStart!==0){this._selectionDirection='left';return this._moveLeft(e,'selectionStart');}},/**
   * Moves cursor right
   * @param {Event} e Event object
   */moveCursorRight:function(e){if(this.selectionStart>=this.text.length&&this.selectionEnd>=this.text.length){return;}this._moveCursorLeftOrRight('Right',e);},/**
   * Moves cursor right or Left, fires event
   * @param {String} direction 'Left', 'Right'
   * @param {Event} e Event object
   */_moveCursorLeftOrRight:function(direction,e){var actionName='moveCursor'+direction+'With';this._currentCursorOpacity=1;if(e.shiftKey){actionName+='Shift';}else{actionName+='outShift';}if(this[actionName](e)){this.abortCursorAnimation();this.initDelayedCursor();this._fireSelectionChanged();this._updateTextarea();}},/**
   * Moves cursor right while keeping selection
   * @param {Event} e
   */moveCursorRightWithShift:function(e){if(this._selectionDirection==='left'&&this.selectionStart!==this.selectionEnd){return this._moveRight(e,'selectionStart');}else if(this.selectionEnd!==this.text.length){this._selectionDirection='right';return this._moveRight(e,'selectionEnd');}},/**
   * Moves cursor right without keeping selection
   * @param {Event} e Event object
   */moveCursorRightWithoutShift:function(e){var changed=true;this._selectionDirection='right';if(this.selectionStart===this.selectionEnd){changed=this._moveRight(e,'selectionStart');this.selectionEnd=this.selectionStart;}else{this.selectionStart=this.selectionEnd;}return changed;},/**
   * Removes characters selected by selection
   * @param {Event} e Event object
   */removeChars:function(e){if(this.selectionStart===this.selectionEnd){this._removeCharsNearCursor(e);}else{this._removeCharsFromTo(this.selectionStart,this.selectionEnd);}this.set('dirty',true);this.setSelectionEnd(this.selectionStart);this._removeExtraneousStyles();this.canvas&&this.canvas.renderAll();this.setCoords();this.fire('changed');this.canvas&&this.canvas.fire('text:changed',{target:this});},/**
   * @private
   * @param {Event} e Event object
   */_removeCharsNearCursor:function(e){if(this.selectionStart===0){return;}if(e.metaKey){// remove all till the start of current line
var leftLineBoundary=this.findLineBoundaryLeft(this.selectionStart);this._removeCharsFromTo(leftLineBoundary,this.selectionStart);this.setSelectionStart(leftLineBoundary);}else if(e.altKey){// remove all till the start of current word
var leftWordBoundary=this.findWordBoundaryLeft(this.selectionStart);this._removeCharsFromTo(leftWordBoundary,this.selectionStart);this.setSelectionStart(leftWordBoundary);}else{this._removeSingleCharAndStyle(this.selectionStart);this.setSelectionStart(this.selectionStart-1);}}});/* _TO_SVG_START_ */(function(){var toFixed=fabric.util.toFixed,NUM_FRACTION_DIGITS=fabric.Object.NUM_FRACTION_DIGITS;fabric.util.object.extend(fabric.IText.prototype,/** @lends fabric.IText.prototype */{/**
     * @private
     */_setSVGTextLineText:function(lineIndex,textSpans,height,textLeftOffset,textTopOffset,textBgRects){if(!this._getLineStyle(lineIndex)){fabric.Text.prototype._setSVGTextLineText.call(this,lineIndex,textSpans,height,textLeftOffset,textTopOffset);}else{this._setSVGTextLineChars(lineIndex,textSpans,height,textLeftOffset,textBgRects);}},/**
     * @private
     */_setSVGTextLineChars:function(lineIndex,textSpans,height,textLeftOffset,textBgRects){var chars=this._textLines[lineIndex],charOffset=0,lineLeftOffset=this._getLineLeftOffset(this._getLineWidth(this.ctx,lineIndex))-this.width/2,lineOffset=this._getSVGLineTopOffset(lineIndex),heightOfLine=this._getHeightOfLine(this.ctx,lineIndex);for(var i=0,len=chars.length;i<len;i++){var styleDecl=this._getStyleDeclaration(lineIndex,i)||{};textSpans.push(this._createTextCharSpan(chars[i],styleDecl,lineLeftOffset,lineOffset.lineTop+lineOffset.offset,charOffset));var charWidth=this._getWidthOfChar(this.ctx,chars[i],lineIndex,i);if(styleDecl.textBackgroundColor){textBgRects.push(this._createTextCharBg(styleDecl,lineLeftOffset,lineOffset.lineTop,heightOfLine,charWidth,charOffset));}charOffset+=charWidth;}},/**
     * @private
     */_getSVGLineTopOffset:function(lineIndex){var lineTopOffset=0,lastHeight=0;for(var j=0;j<lineIndex;j++){lineTopOffset+=this._getHeightOfLine(this.ctx,j);}lastHeight=this._getHeightOfLine(this.ctx,j);return{lineTop:lineTopOffset,offset:(this._fontSizeMult-this._fontSizeFraction)*lastHeight/(this.lineHeight*this._fontSizeMult)};},/**
     * @private
     */_createTextCharBg:function(styleDecl,lineLeftOffset,lineTopOffset,heightOfLine,charWidth,charOffset){return['\t\t<rect fill="',styleDecl.textBackgroundColor,'" x="',toFixed(lineLeftOffset+charOffset,NUM_FRACTION_DIGITS),'" y="',toFixed(lineTopOffset-this.height/2,NUM_FRACTION_DIGITS),'" width="',toFixed(charWidth,NUM_FRACTION_DIGITS),'" height="',toFixed(heightOfLine/this.lineHeight,NUM_FRACTION_DIGITS),'"></rect>\n'].join('');},/**
     * @private
     */_createTextCharSpan:function(_char,styleDecl,lineLeftOffset,lineTopOffset,charOffset){var fillStyles=this.getSvgStyles.call(fabric.util.object.extend({visible:true,fill:this.fill,stroke:this.stroke,type:'text',getSvgFilter:fabric.Object.prototype.getSvgFilter},styleDecl));return['\t\t\t<tspan x="',toFixed(lineLeftOffset+charOffset,NUM_FRACTION_DIGITS),'" y="',toFixed(lineTopOffset-this.height/2,NUM_FRACTION_DIGITS),'" ',styleDecl.fontFamily?'font-family="'+styleDecl.fontFamily.replace(/"/g,'\'')+'" ':'',styleDecl.fontSize?'font-size="'+styleDecl.fontSize+'" ':'',styleDecl.fontStyle?'font-style="'+styleDecl.fontStyle+'" ':'',styleDecl.fontWeight?'font-weight="'+styleDecl.fontWeight+'" ':'',styleDecl.textDecoration?'text-decoration="'+styleDecl.textDecoration+'" ':'','style="',fillStyles,'">',fabric.util.string.escapeXml(_char),'</tspan>\n'].join('');}});})();/* _TO_SVG_END_ */(function(global){'use strict';var fabric=global.fabric||(global.fabric={});/**
   * Textbox class, based on IText, allows the user to resize the text rectangle
   * and wraps lines automatically. Textboxes have their Y scaling locked, the
   * user can only change width. Height is adjusted automatically based on the
   * wrapping of lines.
   * @class fabric.Textbox
   * @extends fabric.IText
   * @mixes fabric.Observable
   * @return {fabric.Textbox} thisArg
   * @see {@link fabric.Textbox#initialize} for constructor definition
   */fabric.Textbox=fabric.util.createClass(fabric.IText,fabric.Observable,{/**
     * Type of an object
     * @type String
     * @default
     */type:'textbox',/**
     * Minimum width of textbox, in pixels.
     * @type Number
     * @default
     */minWidth:20,/**
     * Minimum calculated width of a textbox, in pixels.
     * fixed to 2 so that an empty textbox cannot go to 0
     * and is still selectable without text.
     * @type Number
     * @default
     */dynamicMinWidth:2,/**
     * Cached array of text wrapping.
     * @type Array
     */__cachedLines:null,/**
     * Override standard Object class values
     */lockScalingY:true,/**
     * Override standard Object class values
     */lockScalingFlip:true,/**
     * Override standard Object class values
     * Textbox needs this on false
     */noScaleCache:false,/**
     * Constructor. Some scaling related property values are forced. Visibility
     * of controls is also fixed; only the rotation and width controls are
     * made available.
     * @param {String} text Text string
     * @param {Object} [options] Options object
     * @return {fabric.Textbox} thisArg
     */initialize:function(text,options){this.callSuper('initialize',text,options);this.setControlsVisibility(fabric.Textbox.getTextboxControlVisibility());this.ctx=this.objectCaching?this._cacheContext:fabric.util.createCanvasElement().getContext('2d');// add width to this list of props that effect line wrapping.
this._dimensionAffectingProps.push('width');},/**
     * Unlike superclass's version of this function, Textbox does not update
     * its width.
     * @param {CanvasRenderingContext2D} ctx Context to use for measurements
     * @private
     * @override
     */_initDimensions:function(ctx){if(this.__skipDimension){return;}if(!ctx){ctx=fabric.util.createCanvasElement().getContext('2d');this._setTextStyles(ctx);this.clearContextTop();}// clear dynamicMinWidth as it will be different after we re-wrap line
this.dynamicMinWidth=0;// wrap lines
this._textLines=this._splitTextIntoLines(ctx);// if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap
if(this.dynamicMinWidth>this.width){this._set('width',this.dynamicMinWidth);}// clear cache and re-calculate height
this._clearCache();this.height=this._getTextHeight(ctx);},/**
     * Generate an object that translates the style object so that it is
     * broken up by visual lines (new lines and automatic wrapping).
     * The original text styles object is broken up by actual lines (new lines only),
     * which is only sufficient for Text / IText
     * @private
     */_generateStyleMap:function(){var realLineCount=0,realLineCharCount=0,charCount=0,map={};for(var i=0;i<this._textLines.length;i++){if(this.text[charCount]==='\n'&&i>0){realLineCharCount=0;charCount++;realLineCount++;}else if(this.text[charCount]===' '&&i>0){// this case deals with space's that are removed from end of lines when wrapping
realLineCharCount++;charCount++;}map[i]={line:realLineCount,offset:realLineCharCount};charCount+=this._textLines[i].length;realLineCharCount+=this._textLines[i].length;}return map;},/**
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @param {Boolean} [returnCloneOrEmpty=false]
     * @private
     */_getStyleDeclaration:function(lineIndex,charIndex,returnCloneOrEmpty){if(this._styleMap){var map=this._styleMap[lineIndex];if(!map){return returnCloneOrEmpty?{}:null;}lineIndex=map.line;charIndex=map.offset+charIndex;}return this.callSuper('_getStyleDeclaration',lineIndex,charIndex,returnCloneOrEmpty);},/**
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @param {Object} style
     * @private
     */_setStyleDeclaration:function(lineIndex,charIndex,style){var map=this._styleMap[lineIndex];lineIndex=map.line;charIndex=map.offset+charIndex;this.styles[lineIndex][charIndex]=style;},/**
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @private
     */_deleteStyleDeclaration:function(lineIndex,charIndex){var map=this._styleMap[lineIndex];lineIndex=map.line;charIndex=map.offset+charIndex;delete this.styles[lineIndex][charIndex];},/**
     * @param {Number} lineIndex
     * @private
     */_getLineStyle:function(lineIndex){var map=this._styleMap[lineIndex];return this.styles[map.line];},/**
     * @param {Number} lineIndex
     * @param {Object} style
     * @private
     */_setLineStyle:function(lineIndex,style){var map=this._styleMap[lineIndex];this.styles[map.line]=style;},/**
     * @param {Number} lineIndex
     * @private
     */_deleteLineStyle:function(lineIndex){var map=this._styleMap[lineIndex];delete this.styles[map.line];},/**
     * Wraps text using the 'width' property of Textbox. First this function
     * splits text on newlines, so we preserve newlines entered by the user.
     * Then it wraps each line using the width of the Textbox by calling
     * _wrapLine().
     * @param {CanvasRenderingContext2D} ctx Context to use for measurements
     * @param {String} text The string of text that is split into lines
     * @returns {Array} Array of lines
     */_wrapText:function(ctx,text){var lines=text.split(this._reNewline),wrapped=[],i;for(i=0;i<lines.length;i++){wrapped=wrapped.concat(this._wrapLine(ctx,lines[i],i));}return wrapped;},/**
     * Helper function to measure a string of text, given its lineIndex and charIndex offset
     *
     * @param {CanvasRenderingContext2D} ctx
     * @param {String} text
     * @param {number} lineIndex
     * @param {number} charOffset
     * @returns {number}
     * @private
     */_measureText:function(ctx,text,lineIndex,charOffset){var width=0;charOffset=charOffset||0;for(var i=0,len=text.length;i<len;i++){width+=this._getWidthOfChar(ctx,text[i],lineIndex,i+charOffset);}return width;},/**
     * Wraps a line of text using the width of the Textbox and a context.
     * @param {CanvasRenderingContext2D} ctx Context to use for measurements
     * @param {String} text The string of text to split into lines
     * @param {Number} lineIndex
     * @returns {Array} Array of line(s) into which the given text is wrapped
     * to.
     */_wrapLine:function(ctx,text,lineIndex){var lineWidth=0,lines=[],line='',words=text.split(' '),word='',offset=0,infix=' ',wordWidth=0,infixWidth=0,largestWordWidth=0,lineJustStarted=true,additionalSpace=this._getWidthOfCharSpacing();for(var i=0;i<words.length;i++){word=words[i];wordWidth=this._measureText(ctx,word,lineIndex,offset);offset+=word.length;lineWidth+=infixWidth+wordWidth-additionalSpace;if(lineWidth>=this.width&&!lineJustStarted){lines.push(line);line='';lineWidth=wordWidth;lineJustStarted=true;}else{lineWidth+=additionalSpace;}if(!lineJustStarted){line+=infix;}line+=word;infixWidth=this._measureText(ctx,infix,lineIndex,offset);offset++;lineJustStarted=false;// keep track of largest word
if(wordWidth>largestWordWidth){largestWordWidth=wordWidth;}}i&&lines.push(line);if(largestWordWidth>this.dynamicMinWidth){this.dynamicMinWidth=largestWordWidth-additionalSpace;}return lines;},/**
     * Gets lines of text to render in the Textbox. This function calculates
     * text wrapping on the fly everytime it is called.
     * @returns {Array} Array of lines in the Textbox.
     * @override
     */_splitTextIntoLines:function(ctx){ctx=ctx||this.ctx;var originalAlign=this.textAlign;this._styleMap=null;ctx.save();this._setTextStyles(ctx);this.textAlign='left';var lines=this._wrapText(ctx,this.text);this.textAlign=originalAlign;ctx.restore();this._textLines=lines;this._styleMap=this._generateStyleMap();return lines;},/**
     * When part of a group, we don't want the Textbox's scale to increase if
     * the group's increases. That's why we reduce the scale of the Textbox by
     * the amount that the group's increases. This is to maintain the effective
     * scale of the Textbox at 1, so that font-size values make sense. Otherwise
     * the same font-size value would result in different actual size depending
     * on the value of the scale.
     * @param {String} key
     * @param {*} value
     */setOnGroup:function(key,value){if(key==='scaleX'){this.set('scaleX',Math.abs(1/value));this.set('width',this.get('width')*value/(typeof this.__oldScaleX==='undefined'?1:this.__oldScaleX));this.__oldScaleX=value;}},/**
     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start).
     * Overrides the superclass function to take into account text wrapping.
     *
     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.
     */get2DCursorLocation:function(selectionStart){if(typeof selectionStart==='undefined'){selectionStart=this.selectionStart;}var numLines=this._textLines.length,removed=0;for(var i=0;i<numLines;i++){var line=this._textLines[i],lineLen=line.length;if(selectionStart<=removed+lineLen){return{lineIndex:i,charIndex:selectionStart-removed};}removed+=lineLen;if(this.text[removed]==='\n'||this.text[removed]===' '){removed++;}}return{lineIndex:numLines-1,charIndex:this._textLines[numLines-1].length};},/**
     * Overrides superclass function and uses text wrapping data to get cursor
     * boundary offsets instead of the array of chars.
     * @param {Array} chars Unused
     * @param {String} typeOfBoundaries Can be 'cursor' or 'selection'
     * @returns {Object} Object with 'top', 'left', and 'lineLeft' properties set.
     */_getCursorBoundariesOffsets:function(chars,typeOfBoundaries){var topOffset=0,leftOffset=0,cursorLocation=this.get2DCursorLocation(),lineChars=this._textLines[cursorLocation.lineIndex].split(''),lineLeftOffset=this._getLineLeftOffset(this._getLineWidth(this.ctx,cursorLocation.lineIndex));for(var i=0;i<cursorLocation.charIndex;i++){leftOffset+=this._getWidthOfChar(this.ctx,lineChars[i],cursorLocation.lineIndex,i);}for(i=0;i<cursorLocation.lineIndex;i++){topOffset+=this._getHeightOfLine(this.ctx,i);}if(typeOfBoundaries==='cursor'){topOffset+=(1-this._fontSizeFraction)*this._getHeightOfLine(this.ctx,cursorLocation.lineIndex)/this.lineHeight-this.getCurrentCharFontSize(cursorLocation.lineIndex,cursorLocation.charIndex)*(1-this._fontSizeFraction);}return{top:topOffset,left:leftOffset,lineLeft:lineLeftOffset};},getMinWidth:function(){return Math.max(this.minWidth,this.dynamicMinWidth);},/**
     * Returns object representation of an instance
     * @method toObject
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */toObject:function(propertiesToInclude){return this.callSuper('toObject',['minWidth'].concat(propertiesToInclude));}});/**
   * Returns fabric.Textbox instance from an object representation
   * @static
   * @memberOf fabric.Textbox
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.Textbox instance is created
   * @param {Boolean} [forceAsync] Force an async behaviour trying to create pattern first
   * @return {fabric.Textbox} instance of fabric.Textbox
   */fabric.Textbox.fromObject=function(object,callback,forceAsync){return fabric.Object._fromObject('Textbox',object,callback,forceAsync,'text');};/**
   * Returns the default controls visibility required for Textboxes.
   * @returns {Object}
   */fabric.Textbox.getTextboxControlVisibility=function(){return{tl:false,tr:false,br:false,bl:false,ml:true,mt:false,mr:true,mb:false,mtr:true};};})( true?exports:this);(function(){/**
   * Override _setObjectScale and add Textbox specific resizing behavior. Resizing
   * a Textbox doesn't scale text, it only changes width and makes text wrap automatically.
   */var setObjectScaleOverridden=fabric.Canvas.prototype._setObjectScale;fabric.Canvas.prototype._setObjectScale=function(localMouse,transform,lockScalingX,lockScalingY,by,lockScalingFlip,_dim){var t=transform.target;if(t instanceof fabric.Textbox){var w=t.width*(localMouse.x/transform.scaleX/(t.width+t.strokeWidth));if(w>=t.getMinWidth()){t.set('width',w);return true;}}else{return setObjectScaleOverridden.call(fabric.Canvas.prototype,localMouse,transform,lockScalingX,lockScalingY,by,lockScalingFlip,_dim);}};/**
   * Sets controls of this group to the Textbox's special configuration if
   * one is present in the group. Deletes _controlsVisibility otherwise, so that
   * it gets initialized to default value at runtime.
   */fabric.Group.prototype._refreshControlsVisibility=function(){if(typeof fabric.Textbox==='undefined'){return;}for(var i=this._objects.length;i--;){if(this._objects[i]instanceof fabric.Textbox){this.setControlsVisibility(fabric.Textbox.getTextboxControlVisibility());return;}}};fabric.util.object.extend(fabric.Textbox.prototype,/** @lends fabric.IText.prototype */{/**
     * @private
     */_removeExtraneousStyles:function(){for(var prop in this._styleMap){if(!this._textLines[prop]){delete this.styles[this._styleMap[prop].line];}}},/**
     * Inserts style object for a given line/char index
     * @param {Number} lineIndex Index of a line
     * @param {Number} charIndex Index of a char
     * @param {Object} [style] Style object to insert, if given
     */insertCharStyleObject:function(lineIndex,charIndex,style){// adjust lineIndex and charIndex
var map=this._styleMap[lineIndex];lineIndex=map.line;charIndex=map.offset+charIndex;fabric.IText.prototype.insertCharStyleObject.apply(this,[lineIndex,charIndex,style]);},/**
     * Inserts new style object
     * @param {Number} lineIndex Index of a line
     * @param {Number} charIndex Index of a char
     * @param {Boolean} isEndOfLine True if it's end of line
     */insertNewlineStyleObject:function(lineIndex,charIndex,isEndOfLine){// adjust lineIndex and charIndex
var map=this._styleMap[lineIndex];lineIndex=map.line;charIndex=map.offset+charIndex;fabric.IText.prototype.insertNewlineStyleObject.apply(this,[lineIndex,charIndex,isEndOfLine]);},/**
     * Shifts line styles up or down. This function is slightly different than the one in
     * itext_behaviour as it takes into account the styleMap.
     *
     * @param {Number} lineIndex Index of a line
     * @param {Number} offset Can be -1 or +1
     */shiftLineStyles:function(lineIndex,offset){// shift all line styles by 1 upward
var map=this._styleMap[lineIndex];// adjust line index
lineIndex=map.line;fabric.IText.prototype.shiftLineStyles.call(this,lineIndex,offset);},/**
     * Figure out programatically the text on previous actual line (actual = separated by \n);
     *
     * @param {Number} lIndex
     * @returns {String}
     * @private
     */_getTextOnPreviousLine:function(lIndex){var textOnPreviousLine=this._textLines[lIndex-1];while(this._styleMap[lIndex-2]&&this._styleMap[lIndex-2].line===this._styleMap[lIndex-1].line){textOnPreviousLine=this._textLines[lIndex-2]+textOnPreviousLine;lIndex--;}return textOnPreviousLine;},/**
     * Removes style object
     * @param {Boolean} isBeginningOfLine True if cursor is at the beginning of line
     * @param {Number} [index] Optional index. When not given, current selectionStart is used.
     */removeStyleObject:function(isBeginningOfLine,index){var cursorLocation=this.get2DCursorLocation(index),map=this._styleMap[cursorLocation.lineIndex],lineIndex=map.line,charIndex=map.offset+cursorLocation.charIndex;this._removeStyleObject(isBeginningOfLine,cursorLocation,lineIndex,charIndex);}});})();(function(){var override=fabric.IText.prototype._getNewSelectionStartFromOffset;/**
   * Overrides the IText implementation and adjusts character index as there is not always a linebreak
   *
   * @param {Number} mouseOffset
   * @param {Number} prevWidth
   * @param {Number} width
   * @param {Number} index
   * @param {Number} jlen
   * @returns {Number}
   */fabric.IText.prototype._getNewSelectionStartFromOffset=function(mouseOffset,prevWidth,width,index,jlen){index=override.call(this,mouseOffset,prevWidth,width,index,jlen);// the index passed into the function is padded by the amount of lines from _textLines (to account for \n)
// we need to remove this padding, and pad it by actual lines, and / or spaces that are meant to be there
var tmp=0,removed=0;// account for removed characters
for(var i=0;i<this._textLines.length;i++){tmp+=this._textLines[i].length;if(tmp+removed>=index){break;}if(this.text[tmp+removed]==='\n'||this.text[tmp+removed]===' '){removed++;}}return index-i+removed;};})();(function(){if(typeof document!=='undefined'&&typeof window!=='undefined'){return;}var DOMParser=__webpack_require__(218).DOMParser,URL=__webpack_require__(22),HTTP=__webpack_require__(19),HTTPS=__webpack_require__(154),Canvas=__webpack_require__(9),Image=__webpack_require__(9).Image;/** @private */function request(url,encoding,callback){var oURL=URL.parse(url);// detect if http or https is used
if(!oURL.port){oURL.port=oURL.protocol.indexOf('https:')===0?443:80;}// assign request handler based on protocol
var reqHandler=oURL.protocol.indexOf('https:')===0?HTTPS:HTTP,req=reqHandler.request({hostname:oURL.hostname,port:oURL.port,path:oURL.path,method:'GET'},function(response){var body='';if(encoding){response.setEncoding(encoding);}response.on('end',function(){callback(body);});response.on('data',function(chunk){if(response.statusCode===200){body+=chunk;}});});req.on('error',function(err){if(err.errno===process.ECONNREFUSED){fabric.log('ECONNREFUSED: connection refused to '+oURL.hostname+':'+oURL.port);}else{fabric.log(err.message);}callback(null);});req.end();}/** @private */function requestFs(path,callback){var fs=__webpack_require__(216);fs.readFile(path,function(err,data){if(err){fabric.log(err);throw err;}else{callback(data);}});}fabric.util.loadImage=function(url,callback,context){function createImageAndCallBack(data){if(data){img.src=new Buffer(data,'binary');// preserving original url, which seems to be lost in node-canvas
img._src=url;callback&&callback.call(context,img);}else{img=null;callback&&callback.call(context,null,true);}}var img=new Image();if(url&&(url instanceof Buffer||url.indexOf('data')===0)){img.src=img._src=url;callback&&callback.call(context,img);}else if(url&&url.indexOf('http')!==0){requestFs(url,createImageAndCallBack);}else if(url){request(url,'binary',createImageAndCallBack);}else{callback&&callback.call(context,url);}};fabric.loadSVGFromURL=function(url,callback,reviver){url=url.replace(/^\n\s*/,'').replace(/\?.*$/,'').trim();if(url.indexOf('http')!==0){requestFs(url,function(body){fabric.loadSVGFromString(body.toString(),callback,reviver);});}else{request(url,'',function(body){fabric.loadSVGFromString(body,callback,reviver);});}};fabric.loadSVGFromString=function(string,callback,reviver){var doc=new DOMParser().parseFromString(string);fabric.parseSVGDocument(doc.documentElement,function(results,options){callback&&callback(results,options);},reviver);};fabric.util.getScript=function(url,callback){request(url,'',function(body){// eslint-disable-next-line no-eval
eval(body);callback&&callback();});};// fabric.util.createCanvasElement = function(_, width, height) {
//   return new Canvas(width, height);
// }
/**
   * Only available when running fabric on node.js
   * @param {Number} width Canvas width
   * @param {Number} height Canvas height
   * @param {Object} [options] Options to pass to FabricCanvas.
   * @param {Object} [nodeCanvasOptions] Options to pass to NodeCanvas.
   * @return {Object} wrapped canvas instance
   */fabric.createCanvasForNode=function(width,height,options,nodeCanvasOptions){nodeCanvasOptions=nodeCanvasOptions||options;var canvasEl=fabric.document.createElement('canvas'),nodeCanvas=new Canvas(width||600,height||600,nodeCanvasOptions),nodeCacheCanvas=new Canvas(width||600,height||600,nodeCanvasOptions);// jsdom doesn't create style on canvas element, so here be temp. workaround
canvasEl.style={};canvasEl.width=nodeCanvas.width;canvasEl.height=nodeCanvas.height;options=options||{};options.nodeCanvas=nodeCanvas;options.nodeCacheCanvas=nodeCacheCanvas;var FabricCanvas=fabric.Canvas||fabric.StaticCanvas,fabricCanvas=new FabricCanvas(canvasEl,options);fabricCanvas.nodeCanvas=nodeCanvas;fabricCanvas.nodeCacheCanvas=nodeCacheCanvas;fabricCanvas.contextContainer=nodeCanvas.getContext('2d');fabricCanvas.contextCache=nodeCacheCanvas.getContext('2d');fabricCanvas.Font=Canvas.Font;return fabricCanvas;};var originaInitStatic=fabric.StaticCanvas.prototype._initStatic;fabric.StaticCanvas.prototype._initStatic=function(el,options){el=el||fabric.document.createElement('canvas');this.nodeCanvas=new Canvas(el.width,el.height);this.nodeCacheCanvas=new Canvas(el.width,el.height);originaInitStatic.call(this,el,options);this.contextContainer=this.nodeCanvas.getContext('2d');this.contextCache=this.nodeCacheCanvas.getContext('2d');this.Font=Canvas.Font;};/** @ignore */fabric.StaticCanvas.prototype.createPNGStream=function(){return this.nodeCanvas.createPNGStream();};fabric.StaticCanvas.prototype.createJPEGStream=function(opts){return this.nodeCanvas.createJPEGStream(opts);};fabric.StaticCanvas.prototype._initRetinaScaling=function(){if(!this._isRetinaScaling()){return;}this.lowerCanvasEl.setAttribute('width',this.width*fabric.devicePixelRatio);this.lowerCanvasEl.setAttribute('height',this.height*fabric.devicePixelRatio);this.nodeCanvas.width=this.width*fabric.devicePixelRatio;this.nodeCanvas.height=this.height*fabric.devicePixelRatio;this.contextContainer.scale(fabric.devicePixelRatio,fabric.devicePixelRatio);return this;};if(fabric.Canvas){fabric.Canvas.prototype._initRetinaScaling=fabric.StaticCanvas.prototype._initRetinaScaling;}var origSetBackstoreDimension=fabric.StaticCanvas.prototype._setBackstoreDimension;fabric.StaticCanvas.prototype._setBackstoreDimension=function(prop,value){origSetBackstoreDimension.call(this,prop,value);this.nodeCanvas[prop]=value;return this;};if(fabric.Canvas){fabric.Canvas.prototype._setBackstoreDimension=fabric.StaticCanvas.prototype._setBackstoreDimension;}})();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer, __webpack_require__(3)))

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Cropper.js v0.8.1
 * https://github.com/fengyuanchen/cropperjs
 *
 * Copyright (c) 2015-2016 Fengyuan Chen
 * Released under the MIT license
 *
 * Date: 2016-09-03T04:55:16.458Z
 */

(function webpackUniversalModuleDefinition(root, factory) {
		if (true) module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else {
				var a = factory();
				for (var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
		}
})(this, function () {
		return (/******/function (modules) {
						// webpackBootstrap
						/******/ // The module cache
						/******/var installedModules = {};
						/******/
						/******/ // The require function
						/******/function __webpack_require__(moduleId) {
								/******/
								/******/ // Check if module is in cache
								/******/if (installedModules[moduleId])
										/******/return installedModules[moduleId].exports;
								/******/
								/******/ // Create a new module (and put it into the cache)
								/******/var module = installedModules[moduleId] = {
										/******/exports: {},
										/******/id: moduleId,
										/******/loaded: false
										/******/ };
								/******/
								/******/ // Execute the module function
								/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
								/******/
								/******/ // Flag the module as loaded
								/******/module.loaded = true;
								/******/
								/******/ // Return the exports of the module
								/******/return module.exports;
								/******/
						}
						/******/
						/******/
						/******/ // expose the modules object (__webpack_modules__)
						/******/__webpack_require__.m = modules;
						/******/
						/******/ // expose the module cache
						/******/__webpack_require__.c = installedModules;
						/******/
						/******/ // __webpack_public_path__
						/******/__webpack_require__.p = "";
						/******/
						/******/ // Load entry module and return exports
						/******/return __webpack_require__(0);
						/******/
				}(
				/************************************************************************/
				/******/[
				/* 0 */
				/***/function (module, exports, __webpack_require__) {

						'use strict';

						Object.defineProperty(exports, "__esModule", {
								value: true
						});

						var _createClass = function () {
								function defineProperties(target, props) {
										for (var i = 0; i < props.length; i++) {
												var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
										}
								}return function (Constructor, protoProps, staticProps) {
										if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
								};
						}();

						var _defaults = __webpack_require__(1);

						var _defaults2 = _interopRequireDefault(_defaults);

						var _template = __webpack_require__(2);

						var _template2 = _interopRequireDefault(_template);

						var _render = __webpack_require__(3);

						var _render2 = _interopRequireDefault(_render);

						var _preview = __webpack_require__(5);

						var _preview2 = _interopRequireDefault(_preview);

						var _events = __webpack_require__(6);

						var _events2 = _interopRequireDefault(_events);

						var _handlers = __webpack_require__(7);

						var _handlers2 = _interopRequireDefault(_handlers);

						var _change = __webpack_require__(8);

						var _change2 = _interopRequireDefault(_change);

						var _methods = __webpack_require__(9);

						var _methods2 = _interopRequireDefault(_methods);

						var _utilities = __webpack_require__(4);

						var $ = _interopRequireWildcard(_utilities);

						function _interopRequireWildcard(obj) {
								if (obj && obj.__esModule) {
										return obj;
								} else {
										var newObj = {};if (obj != null) {
												for (var key in obj) {
														if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
												}
										}newObj.default = obj;return newObj;
								}
						}

						function _interopRequireDefault(obj) {
								return obj && obj.__esModule ? obj : { default: obj };
						}

						function _classCallCheck(instance, Constructor) {
								if (!(instance instanceof Constructor)) {
										throw new TypeError("Cannot call a class as a function");
								}
						}

						// Constants
						var NAMESPACE = 'cropper';

						// Classes
						var CLASS_HIDDEN = NAMESPACE + '-hidden';

						// Events
						var EVENT_ERROR = 'error';
						var EVENT_LOAD = 'load';
						var EVENT_READY = 'ready';
						var EVENT_CROP = 'crop';

						// RegExps
						var REGEXP_DATA_URL = /^data:/;
						var REGEXP_DATA_URL_JPEG = /^data:image\/jpeg.*;base64,/;

						var AnotherCropper = void 0;

						var Cropper = function () {
								function Cropper(element, options) {
										_classCallCheck(this, Cropper);

										var self = this;

										self.element = element;
										self.options = $.extend({}, _defaults2.default, $.isPlainObject(options) && options);
										self.loaded = false;
										self.ready = false;
										self.complete = false;
										self.rotated = false;
										self.cropped = false;
										self.disabled = false;
										self.replaced = false;
										self.limited = false;
										self.wheeling = false;
										self.isImg = false;
										self.originalUrl = '';
										self.canvasData = null;
										self.cropBoxData = null;
										self.previews = null;
										self.init();
								}

								_createClass(Cropper, [{
										key: 'init',
										value: function init() {
												var self = this;
												var element = self.element;
												var tagName = element.tagName.toLowerCase();
												var url = void 0;

												if ($.getData(element, NAMESPACE)) {
														return;
												}

												$.setData(element, NAMESPACE, self);

												if (tagName === 'img') {
														self.isImg = true;

														// e.g.: "img/picture.jpg"
														self.originalUrl = url = element.getAttribute('src');

														// Stop when it's a blank image
														if (!url) {
																return;
														}

														// e.g.: "http://example.com/img/picture.jpg"
														url = element.src;
												} else if (tagName === 'canvas' && window.HTMLCanvasElement) {
														url = element.toDataURL();
												}

												self.load(url);
										}
								}, {
										key: 'load',
										value: function load(url) {
												var self = this;
												var options = self.options;
												var element = self.element;

												if (!url) {
														return;
												}

												self.url = url;
												self.imageData = {};

												if (!options.checkOrientation || !window.ArrayBuffer) {
														self.clone();
														return;
												}

												// XMLHttpRequest disallows to open a Data URL in some browsers like IE11 and Safari
												if (REGEXP_DATA_URL.test(url)) {
														if (REGEXP_DATA_URL_JPEG) {
																self.read($.dataURLToArrayBuffer(url));
														} else {
																self.clone();
														}
														return;
												}

												var xhr = new XMLHttpRequest();

												xhr.onerror = xhr.onabort = function () {
														self.clone();
												};

												xhr.onload = function () {
														self.read(xhr.response);
												};

												if (options.checkCrossOrigin && $.isCrossOriginURL(url) && element.crossOrigin) {
														url = $.addTimestamp(url);
												}

												xhr.open('get', url);
												xhr.responseType = 'arraybuffer';
												xhr.send();
										}
								}, {
										key: 'read',
										value: function read(arrayBuffer) {
												var self = this;
												var options = self.options;
												var orientation = $.getOrientation(arrayBuffer);
												var imageData = self.imageData;
												var rotate = 0;
												var scaleX = 1;
												var scaleY = 1;

												if (orientation > 1) {
														self.url = $.arrayBufferToDataURL(arrayBuffer);

														switch (orientation) {

																// flip horizontal
																case 2:
																		scaleX = -1;
																		break;

																// rotate left 180°
																case 3:
																		rotate = -180;
																		break;

																// flip vertical
																case 4:
																		scaleY = -1;
																		break;

																// flip vertical + rotate right 90°
																case 5:
																		rotate = 90;
																		scaleY = -1;
																		break;

																// rotate right 90°
																case 6:
																		rotate = 90;
																		break;

																// flip horizontal + rotate right 90°
																case 7:
																		rotate = 90;
																		scaleX = -1;
																		break;

																// rotate left 90°
																case 8:
																		rotate = -90;
																		break;
														}
												}

												if (options.rotatable) {
														imageData.rotate = rotate;
												}

												if (options.scalable) {
														imageData.scaleX = scaleX;
														imageData.scaleY = scaleY;
												}

												self.clone();
										}
								}, {
										key: 'clone',
										value: function clone() {
												var self = this;
												var element = self.element;
												var url = self.url;
												var crossOrigin = void 0;
												var crossOriginUrl = void 0;
												var start = void 0;
												var stop = void 0;

												if (self.options.checkCrossOrigin && $.isCrossOriginURL(url)) {
														crossOrigin = element.crossOrigin;

														if (crossOrigin) {
																crossOriginUrl = url;
														} else {
																crossOrigin = 'anonymous';

																// Bust cache when there is not a "crossOrigin" property
																crossOriginUrl = $.addTimestamp(url);
														}
												}

												self.crossOrigin = crossOrigin;
												self.crossOriginUrl = crossOriginUrl;

												var image = $.createElement('img');

												if (crossOrigin) {
														image.crossOrigin = crossOrigin;
												}

												image.src = crossOriginUrl || url;
												self.image = image;
												self.onStart = start = $.proxy(self.start, self);
												self.onStop = stop = $.proxy(self.stop, self);

												if (self.isImg) {
														if (element.complete) {
																self.start();
														} else {
																$.addListener(element, EVENT_LOAD, start);
														}
												} else {
														$.addListener(image, EVENT_LOAD, start);
														$.addListener(image, EVENT_ERROR, stop);
														$.addClass(image, 'cropper-hide');
														element.parentNode.insertBefore(image, element.nextSibling);
												}
										}
								}, {
										key: 'start',
										value: function start(event) {
												var self = this;
												var image = self.isImg ? self.element : self.image;

												if (event) {
														$.removeListener(image, EVENT_LOAD, self.onStart);
														$.removeListener(image, EVENT_ERROR, self.onStop);
												}

												$.getImageSize(image, function (naturalWidth, naturalHeight) {
														$.extend(self.imageData, {
																naturalWidth: naturalWidth,
																naturalHeight: naturalHeight,
																aspectRatio: naturalWidth / naturalHeight
														});

														self.loaded = true;
														self.build();
												});
										}
								}, {
										key: 'stop',
										value: function stop() {
												var self = this;
												var image = self.image;

												$.removeListener(image, EVENT_LOAD, self.onStart);
												$.removeListener(image, EVENT_ERROR, self.onStop);

												$.removeChild(image);
												self.image = null;
										}
								}, {
										key: 'build',
										value: function build() {
												var self = this;
												var options = self.options;
												var element = self.element;
												var image = self.image;
												var container = void 0;
												var cropper = void 0;
												var canvas = void 0;
												var dragBox = void 0;
												var cropBox = void 0;
												var face = void 0;

												if (!self.loaded) {
														return;
												}

												// Unbuild first when replace
												if (self.ready) {
														self.unbuild();
												}

												var template = $.createElement('div');
												template.innerHTML = _template2.default;

												// Create cropper elements
												self.container = container = element.parentNode;
												self.cropper = cropper = $.getByClass(template, 'cropper-container')[0];
												self.canvas = canvas = $.getByClass(cropper, 'cropper-canvas')[0];
												self.dragBox = dragBox = $.getByClass(cropper, 'cropper-drag-box')[0];
												self.cropBox = cropBox = $.getByClass(cropper, 'cropper-crop-box')[0];
												self.viewBox = $.getByClass(cropper, 'cropper-view-box')[0];
												self.face = face = $.getByClass(cropBox, 'cropper-face')[0];

												$.appendChild(canvas, image);

												// Hide the original image
												$.addClass(element, CLASS_HIDDEN);

												// Inserts the cropper after to the current image
												container.insertBefore(cropper, element.nextSibling);

												// Show the image if is hidden
												if (!self.isImg) {
														$.removeClass(image, 'cropper-hide');
												}

												self.initPreview();
												self.bind();

												options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;
												options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;

												if (options.autoCrop) {
														self.cropped = true;

														if (options.modal) {
																$.addClass(dragBox, 'cropper-modal');
														}
												} else {
														$.addClass(cropBox, CLASS_HIDDEN);
												}

												if (!options.guides) {
														$.addClass($.getByClass(cropBox, 'cropper-dashed'), CLASS_HIDDEN);
												}

												if (!options.center) {
														$.addClass($.getByClass(cropBox, 'cropper-center'), CLASS_HIDDEN);
												}

												if (options.background) {
														$.addClass(cropper, 'cropper-bg');
												}

												if (!options.highlight) {
														$.addClass(face, 'cropper-invisible');
												}

												if (options.cropBoxMovable) {
														$.addClass(face, 'cropper-move');
														$.setData(face, 'action', 'all');
												}

												if (!options.cropBoxResizable) {
														$.addClass($.getByClass(cropBox, 'cropper-line'), CLASS_HIDDEN);
														$.addClass($.getByClass(cropBox, 'cropper-point'), CLASS_HIDDEN);
												}

												self.setDragMode(options.dragMode);
												self.render();
												self.ready = true;
												self.setData(options.data);

												// Call the "ready" option asynchronously to keep "image.cropper" is defined
												self.completing = setTimeout(function () {
														if ($.isFunction(options.ready)) {
																$.addListener(element, EVENT_READY, options.ready, true);
														}

														$.dispatchEvent(element, EVENT_READY);
														$.dispatchEvent(element, EVENT_CROP, self.getData());

														self.complete = true;
												}, 0);
										}
								}, {
										key: 'unbuild',
										value: function unbuild() {
												var self = this;

												if (!self.ready) {
														return;
												}

												if (!self.complete) {
														clearTimeout(self.completing);
												}

												self.ready = false;
												self.complete = false;
												self.initialImageData = null;

												// Clear `initialCanvasData` is necessary when replace
												self.initialCanvasData = null;
												self.initialCropBoxData = null;
												self.containerData = null;
												self.canvasData = null;

												// Clear `cropBoxData` is necessary when replace
												self.cropBoxData = null;
												self.unbind();

												self.resetPreview();
												self.previews = null;

												self.viewBox = null;
												self.cropBox = null;
												self.dragBox = null;
												self.canvas = null;
												self.container = null;

												$.removeChild(self.cropper);
												self.cropper = null;
										}
								}], [{
										key: 'noConflict',
										value: function noConflict() {
												window.Cropper = AnotherCropper;
												return Cropper;
										}
								}, {
										key: 'setDefaults',
										value: function setDefaults(options) {
												$.extend(_defaults2.default, $.isPlainObject(options) && options);
										}
								}]);

								return Cropper;
						}();

						$.extend(Cropper.prototype, _render2.default);
						$.extend(Cropper.prototype, _preview2.default);
						$.extend(Cropper.prototype, _events2.default);
						$.extend(Cropper.prototype, _handlers2.default);
						$.extend(Cropper.prototype, _change2.default);
						$.extend(Cropper.prototype, _methods2.default);

						if (typeof window !== 'undefined') {
								AnotherCropper = window.Cropper;
								window.Cropper = Cropper;
						}

						exports.default = Cropper;

						/***/
				},
				/* 1 */
				/***/function (module, exports) {

						'use strict';

						Object.defineProperty(exports, "__esModule", {
								value: true
						});
						exports.default = {
								// Define the view mode of the cropper
								viewMode: 0, // 0, 1, 2, 3

								// Define the dragging mode of the cropper
								dragMode: 'crop', // 'crop', 'move' or 'none'

								// Define the aspect ratio of the crop box
								aspectRatio: NaN,

								// An object with the previous cropping result data
								data: null,

								// A selector for adding extra containers to preview
								preview: '',

								// Re-render the cropper when resize the window
								responsive: true,

								// Restore the cropped area after resize the window
								restore: true,

								// Check if the current image is a cross-origin image
								checkCrossOrigin: true,

								// Check the current image's Exif Orientation information
								checkOrientation: true,

								// Show the black modal
								modal: true,

								// Show the dashed lines for guiding
								guides: true,

								// Show the center indicator for guiding
								center: true,

								// Show the white modal to highlight the crop box
								highlight: true,

								// Show the grid background
								background: true,

								// Enable to crop the image automatically when initialize
								autoCrop: true,

								// Define the percentage of automatic cropping area when initializes
								autoCropArea: 0.8,

								// Enable to move the image
								movable: true,

								// Enable to rotate the image
								rotatable: true,

								// Enable to scale the image
								scalable: true,

								// Enable to zoom the image
								zoomable: true,

								// Enable to zoom the image by dragging touch
								zoomOnTouch: true,

								// Enable to zoom the image by wheeling mouse
								zoomOnWheel: true,

								// Define zoom ratio when zoom the image by wheeling mouse
								wheelZoomRatio: 0.1,

								// Enable to move the crop box
								cropBoxMovable: true,

								// Enable to resize the crop box
								cropBoxResizable: true,

								// Toggle drag mode between "crop" and "move" when click twice on the cropper
								toggleDragModeOnDblclick: true,

								// Size limitation
								minCanvasWidth: 0,
								minCanvasHeight: 0,
								minCropBoxWidth: 0,
								minCropBoxHeight: 0,
								minContainerWidth: 200,
								minContainerHeight: 100,

								// Shortcuts of events
								ready: null,
								cropstart: null,
								cropmove: null,
								cropend: null,
								crop: null,
								zoom: null
						};

						/***/
				},
				/* 2 */
				/***/function (module, exports) {

						'use strict';

						Object.defineProperty(exports, "__esModule", {
								value: true
						});
						exports.default = '<div class="cropper-container">' + '<div class="cropper-wrap-box">' + '<div class="cropper-canvas"></div>' + '</div>' + '<div class="cropper-drag-box"></div>' + '<div class="cropper-crop-box">' + '<span class="cropper-view-box"></span>' + '<span class="cropper-dashed dashed-h"></span>' + '<span class="cropper-dashed dashed-v"></span>' + '<span class="cropper-center"></span>' + '<span class="cropper-face"></span>' + '<span class="cropper-line line-e" data-action="e"></span>' + '<span class="cropper-line line-n" data-action="n"></span>' + '<span class="cropper-line line-w" data-action="w"></span>' + '<span class="cropper-line line-s" data-action="s"></span>' + '<span class="cropper-point point-e" data-action="e"></span>' + '<span class="cropper-point point-n" data-action="n"></span>' + '<span class="cropper-point point-w" data-action="w"></span>' + '<span class="cropper-point point-s" data-action="s"></span>' + '<span class="cropper-point point-ne" data-action="ne"></span>' + '<span class="cropper-point point-nw" data-action="nw"></span>' + '<span class="cropper-point point-sw" data-action="sw"></span>' + '<span class="cropper-point point-se" data-action="se"></span>' + '</div>' + '</div>';

						/***/
				},
				/* 3 */
				/***/function (module, exports, __webpack_require__) {

						'use strict';

						Object.defineProperty(exports, "__esModule", {
								value: true
						});

						var _utilities = __webpack_require__(4);

						var $ = _interopRequireWildcard(_utilities);

						function _interopRequireWildcard(obj) {
								if (obj && obj.__esModule) {
										return obj;
								} else {
										var newObj = {};if (obj != null) {
												for (var key in obj) {
														if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
												}
										}newObj.default = obj;return newObj;
								}
						}

						exports.default = {
								render: function render() {
										var self = this;

										self.initContainer();
										self.initCanvas();
										self.initCropBox();

										self.renderCanvas();

										if (self.cropped) {
												self.renderCropBox();
										}
								},
								initContainer: function initContainer() {
										var self = this;
										var options = self.options;
										var element = self.element;
										var container = self.container;
										var cropper = self.cropper;
										var containerData = void 0;

										$.addClass(cropper, 'cropper-hidden');
										$.removeClass(element, 'cropper-hidden');

										self.containerData = containerData = {
												width: Math.max(container.offsetWidth, Number(options.minContainerWidth) || 200),
												height: Math.max(container.offsetHeight, Number(options.minContainerHeight) || 100)
										};

										$.setStyle(cropper, {
												width: containerData.width,
												height: containerData.height
										});

										$.addClass(element, 'cropper-hidden');
										$.removeClass(cropper, 'cropper-hidden');
								},

								// Canvas (image wrapper)
								initCanvas: function initCanvas() {
										var self = this;
										var viewMode = self.options.viewMode;
										var containerData = self.containerData;
										var imageData = self.imageData;
										var rotated = Math.abs(imageData.rotate) === 90;
										var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;
										var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;
										var aspectRatio = naturalWidth / naturalHeight;
										var canvasWidth = containerData.width;
										var canvasHeight = containerData.height;

										if (containerData.height * aspectRatio > containerData.width) {
												if (viewMode === 3) {
														canvasWidth = containerData.height * aspectRatio;
												} else {
														canvasHeight = containerData.width / aspectRatio;
												}
										} else if (viewMode === 3) {
												canvasHeight = containerData.width / aspectRatio;
										} else {
												canvasWidth = containerData.height * aspectRatio;
										}

										var canvasData = {
												naturalWidth: naturalWidth,
												naturalHeight: naturalHeight,
												aspectRatio: aspectRatio,
												width: canvasWidth,
												height: canvasHeight
										};

										canvasData.oldLeft = canvasData.left = (containerData.width - canvasWidth) / 2;
										canvasData.oldTop = canvasData.top = (containerData.height - canvasHeight) / 2;

										self.canvasData = canvasData;
										self.limited = viewMode === 1 || viewMode === 2;
										self.limitCanvas(true, true);
										self.initialImageData = $.extend({}, imageData);
										self.initialCanvasData = $.extend({}, canvasData);
								},
								limitCanvas: function limitCanvas(sizeLimited, positionLimited) {
										var self = this;
										var options = self.options;
										var viewMode = options.viewMode;
										var containerData = self.containerData;
										var canvasData = self.canvasData;
										var aspectRatio = canvasData.aspectRatio;
										var cropBoxData = self.cropBoxData;
										var cropped = self.cropped && cropBoxData;
										var minCanvasWidth = void 0;
										var minCanvasHeight = void 0;
										var newCanvasLeft = void 0;
										var newCanvasTop = void 0;

										if (sizeLimited) {
												minCanvasWidth = Number(options.minCanvasWidth) || 0;
												minCanvasHeight = Number(options.minCanvasHeight) || 0;

												if (viewMode > 1) {
														minCanvasWidth = Math.max(minCanvasWidth, containerData.width);
														minCanvasHeight = Math.max(minCanvasHeight, containerData.height);

														if (viewMode === 3) {
																if (minCanvasHeight * aspectRatio > minCanvasWidth) {
																		minCanvasWidth = minCanvasHeight * aspectRatio;
																} else {
																		minCanvasHeight = minCanvasWidth / aspectRatio;
																}
														}
												} else if (viewMode > 0) {
														if (minCanvasWidth) {
																minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);
														} else if (minCanvasHeight) {
																minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);
														} else if (cropped) {
																minCanvasWidth = cropBoxData.width;
																minCanvasHeight = cropBoxData.height;

																if (minCanvasHeight * aspectRatio > minCanvasWidth) {
																		minCanvasWidth = minCanvasHeight * aspectRatio;
																} else {
																		minCanvasHeight = minCanvasWidth / aspectRatio;
																}
														}
												}

												if (minCanvasWidth && minCanvasHeight) {
														if (minCanvasHeight * aspectRatio > minCanvasWidth) {
																minCanvasHeight = minCanvasWidth / aspectRatio;
														} else {
																minCanvasWidth = minCanvasHeight * aspectRatio;
														}
												} else if (minCanvasWidth) {
														minCanvasHeight = minCanvasWidth / aspectRatio;
												} else if (minCanvasHeight) {
														minCanvasWidth = minCanvasHeight * aspectRatio;
												}

												canvasData.minWidth = minCanvasWidth;
												canvasData.minHeight = minCanvasHeight;
												canvasData.maxWidth = Infinity;
												canvasData.maxHeight = Infinity;
										}

										if (positionLimited) {
												if (viewMode) {
														newCanvasLeft = containerData.width - canvasData.width;
														newCanvasTop = containerData.height - canvasData.height;

														canvasData.minLeft = Math.min(0, newCanvasLeft);
														canvasData.minTop = Math.min(0, newCanvasTop);
														canvasData.maxLeft = Math.max(0, newCanvasLeft);
														canvasData.maxTop = Math.max(0, newCanvasTop);

														if (cropped && self.limited) {
																canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));
																canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));
																canvasData.maxLeft = cropBoxData.left;
																canvasData.maxTop = cropBoxData.top;

																if (viewMode === 2) {
																		if (canvasData.width >= containerData.width) {
																				canvasData.minLeft = Math.min(0, newCanvasLeft);
																				canvasData.maxLeft = Math.max(0, newCanvasLeft);
																		}

																		if (canvasData.height >= containerData.height) {
																				canvasData.minTop = Math.min(0, newCanvasTop);
																				canvasData.maxTop = Math.max(0, newCanvasTop);
																		}
																}
														}
												} else {
														canvasData.minLeft = -canvasData.width;
														canvasData.minTop = -canvasData.height;
														canvasData.maxLeft = containerData.width;
														canvasData.maxTop = containerData.height;
												}
										}
								},
								renderCanvas: function renderCanvas(changed) {
										var self = this;
										var canvasData = self.canvasData;
										var imageData = self.imageData;
										var rotate = imageData.rotate;
										var aspectRatio = void 0;
										var rotatedData = void 0;

										if (self.rotated) {
												self.rotated = false;

												// Computes rotated sizes with image sizes
												rotatedData = $.getRotatedSizes({
														width: imageData.width,
														height: imageData.height,
														degree: rotate
												});

												aspectRatio = rotatedData.width / rotatedData.height;

												if (aspectRatio !== canvasData.aspectRatio) {
														canvasData.left -= (rotatedData.width - canvasData.width) / 2;
														canvasData.top -= (rotatedData.height - canvasData.height) / 2;
														canvasData.width = rotatedData.width;
														canvasData.height = rotatedData.height;
														canvasData.aspectRatio = aspectRatio;
														canvasData.naturalWidth = imageData.naturalWidth;
														canvasData.naturalHeight = imageData.naturalHeight;

														// Computes rotated sizes with natural image sizes
														if (rotate % 180) {
																rotatedData = $.getRotatedSizes({
																		width: imageData.naturalWidth,
																		height: imageData.naturalHeight,
																		degree: rotate
																});

																canvasData.naturalWidth = rotatedData.width;
																canvasData.naturalHeight = rotatedData.height;
														}

														self.limitCanvas(true, false);
												}
										}

										if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {
												canvasData.left = canvasData.oldLeft;
										}

										if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {
												canvasData.top = canvasData.oldTop;
										}

										canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);
										canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);

										self.limitCanvas(false, true);

										canvasData.oldLeft = canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);
										canvasData.oldTop = canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);

										$.setStyle(self.canvas, {
												width: canvasData.width,
												height: canvasData.height,
												left: canvasData.left,
												top: canvasData.top
										});

										self.renderImage();

										if (self.cropped && self.limited) {
												self.limitCropBox(true, true);
										}

										if (changed) {
												self.output();
										}
								},
								renderImage: function renderImage(changed) {
										var self = this;
										var canvasData = self.canvasData;
										var imageData = self.imageData;
										var newImageData = void 0;
										var reversedData = void 0;
										var reversedWidth = void 0;
										var reversedHeight = void 0;

										if (imageData.rotate) {
												reversedData = $.getRotatedSizes({
														width: canvasData.width,
														height: canvasData.height,
														degree: imageData.rotate,
														aspectRatio: imageData.aspectRatio
												}, true);

												reversedWidth = reversedData.width;
												reversedHeight = reversedData.height;

												newImageData = {
														width: reversedWidth,
														height: reversedHeight,
														left: (canvasData.width - reversedWidth) / 2,
														top: (canvasData.height - reversedHeight) / 2
												};
										}

										$.extend(imageData, newImageData || {
												width: canvasData.width,
												height: canvasData.height,
												left: 0,
												top: 0
										});

										var transform = $.getTransform(imageData);

										$.setStyle(self.image, {
												width: imageData.width,
												height: imageData.height,
												marginLeft: imageData.left,
												marginTop: imageData.top,
												WebkitTransform: transform,
												msTransform: transform,
												transform: transform
										});

										if (changed) {
												self.output();
										}
								},
								initCropBox: function initCropBox() {
										var self = this;
										var options = self.options;
										var aspectRatio = options.aspectRatio;
										var autoCropArea = Number(options.autoCropArea) || 0.8;
										var canvasData = self.canvasData;
										var cropBoxData = {
												width: canvasData.width,
												height: canvasData.height
										};

										if (aspectRatio) {
												if (canvasData.height * aspectRatio > canvasData.width) {
														cropBoxData.height = cropBoxData.width / aspectRatio;
												} else {
														cropBoxData.width = cropBoxData.height * aspectRatio;
												}
										}

										self.cropBoxData = cropBoxData;
										self.limitCropBox(true, true);

										// Initialize auto crop area
										cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);
										cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);

										// The width/height of auto crop area must large than "minWidth/Height"
										cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);
										cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);
										cropBoxData.oldLeft = cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;
										cropBoxData.oldTop = cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;

										self.initialCropBoxData = $.extend({}, cropBoxData);
								},
								limitCropBox: function limitCropBox(sizeLimited, positionLimited) {
										var self = this;
										var options = self.options;
										var aspectRatio = options.aspectRatio;
										var containerData = self.containerData;
										var canvasData = self.canvasData;
										var cropBoxData = self.cropBoxData;
										var limited = self.limited;
										var minCropBoxWidth = void 0;
										var minCropBoxHeight = void 0;
										var maxCropBoxWidth = void 0;
										var maxCropBoxHeight = void 0;

										if (sizeLimited) {
												minCropBoxWidth = Number(options.minCropBoxWidth) || 0;
												minCropBoxHeight = Number(options.minCropBoxHeight) || 0;

												// The min/maxCropBoxWidth/Height must be less than containerWidth/Height
												minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);
												minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);
												maxCropBoxWidth = Math.min(containerData.width, limited ? canvasData.width : containerData.width);
												maxCropBoxHeight = Math.min(containerData.height, limited ? canvasData.height : containerData.height);

												if (aspectRatio) {
														if (minCropBoxWidth && minCropBoxHeight) {
																if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {
																		minCropBoxHeight = minCropBoxWidth / aspectRatio;
																} else {
																		minCropBoxWidth = minCropBoxHeight * aspectRatio;
																}
														} else if (minCropBoxWidth) {
																minCropBoxHeight = minCropBoxWidth / aspectRatio;
														} else if (minCropBoxHeight) {
																minCropBoxWidth = minCropBoxHeight * aspectRatio;
														}

														if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {
																maxCropBoxHeight = maxCropBoxWidth / aspectRatio;
														} else {
																maxCropBoxWidth = maxCropBoxHeight * aspectRatio;
														}
												}

												// The minWidth/Height must be less than maxWidth/Height
												cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);
												cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);
												cropBoxData.maxWidth = maxCropBoxWidth;
												cropBoxData.maxHeight = maxCropBoxHeight;
										}

										if (positionLimited) {
												if (limited) {
														cropBoxData.minLeft = Math.max(0, canvasData.left);
														cropBoxData.minTop = Math.max(0, canvasData.top);
														cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;
														cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;
												} else {
														cropBoxData.minLeft = 0;
														cropBoxData.minTop = 0;
														cropBoxData.maxLeft = containerData.width - cropBoxData.width;
														cropBoxData.maxTop = containerData.height - cropBoxData.height;
												}
										}
								},
								renderCropBox: function renderCropBox() {
										var self = this;
										var options = self.options;
										var containerData = self.containerData;
										var cropBoxData = self.cropBoxData;

										if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {
												cropBoxData.left = cropBoxData.oldLeft;
										}

										if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {
												cropBoxData.top = cropBoxData.oldTop;
										}

										cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);
										cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);

										self.limitCropBox(false, true);

										cropBoxData.oldLeft = cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);
										cropBoxData.oldTop = cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);

										if (options.movable && options.cropBoxMovable) {
												// Turn to move the canvas when the crop box is equal to the container
												$.setData(self.face, 'action', cropBoxData.width === containerData.width && cropBoxData.height === containerData.height ? 'move' : 'all');
										}

										$.setStyle(self.cropBox, {
												width: cropBoxData.width,
												height: cropBoxData.height,
												left: cropBoxData.left,
												top: cropBoxData.top
										});

										if (self.cropped && self.limited) {
												self.limitCanvas(true, true);
										}

										if (!self.disabled) {
												self.output();
										}
								},
								output: function output() {
										var self = this;

										self.preview();

										if (self.complete) {
												$.dispatchEvent(self.element, 'crop', self.getData());
										}
								}
						};

						/***/
				},
				/* 4 */
				/***/function (module, exports) {

						'use strict';

						Object.defineProperty(exports, "__esModule", {
								value: true
						});

						var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
								return typeof obj;
						} : function (obj) {
								return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
						};

						exports.typeOf = typeOf;
						exports.isNumber = isNumber;
						exports.isUndefined = isUndefined;
						exports.isObject = isObject;
						exports.isPlainObject = isPlainObject;
						exports.isFunction = isFunction;
						exports.isArray = isArray;
						exports.toArray = toArray;
						exports.trim = trim;
						exports.each = each;
						exports.extend = extend;
						exports.proxy = proxy;
						exports.setStyle = setStyle;
						exports.hasClass = hasClass;
						exports.addClass = addClass;
						exports.removeClass = removeClass;
						exports.toggleClass = toggleClass;
						exports.hyphenate = hyphenate;
						exports.getData = getData;
						exports.setData = setData;
						exports.removeData = removeData;
						exports.removeListener = removeListener;
						exports.dispatchEvent = dispatchEvent;
						exports.getEvent = getEvent;
						exports.getOffset = getOffset;
						exports.getTouchesCenter = getTouchesCenter;
						exports.getByTag = getByTag;
						exports.getByClass = getByClass;
						exports.createElement = createElement;
						exports.appendChild = appendChild;
						exports.removeChild = removeChild;
						exports.empty = empty;
						exports.isCrossOriginURL = isCrossOriginURL;
						exports.addTimestamp = addTimestamp;
						exports.getImageSize = getImageSize;
						exports.getTransform = getTransform;
						exports.getRotatedSizes = getRotatedSizes;
						exports.getSourceCanvas = getSourceCanvas;
						exports.getStringFromCharCode = getStringFromCharCode;
						exports.getOrientation = getOrientation;
						exports.dataURLToArrayBuffer = dataURLToArrayBuffer;
						exports.arrayBufferToDataURL = arrayBufferToDataURL;
						// RegExps
						var REGEXP_DATA_URL_HEAD = /^data:([^;]+);base64,/;
						var REGEXP_HYPHENATE = /([a-z\d])([A-Z])/g;
						var REGEXP_ORIGINS = /^(https?:)\/\/([^:\/\?#]+):?(\d*)/i;
						var REGEXP_SPACES = /\s+/;
						var REGEXP_SUFFIX = /^(width|height|left|top|marginLeft|marginTop)$/;
						var REGEXP_TRIM = /^\s+(.*)\s+$/;
						var REGEXP_USERAGENT = /(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i;
						var navigator = window.navigator;
						var IS_SAFARI_OR_UIWEBVIEW = navigator && REGEXP_USERAGENT.test(navigator.userAgent);

						// Utilities
						var objectProto = Object.prototype;
						var toString = objectProto.toString;
						var hasOwnProperty = objectProto.hasOwnProperty;
						var slice = Array.prototype.slice;
						var fromCharCode = String.fromCharCode;

						function typeOf(obj) {
								return toString.call(obj).slice(8, -1).toLowerCase();
						}

						function isNumber(num) {
								return typeof num === 'number' && !isNaN(num);
						}

						function isUndefined(obj) {
								return typeof obj === 'undefined';
						}

						function isObject(obj) {
								return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null;
						}

						function isPlainObject(obj) {
								if (!isObject(obj)) {
										return false;
								}

								try {
										var _constructor = obj.constructor;
										var prototype = _constructor.prototype;

										return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');
								} catch (e) {
										return false;
								}
						}

						function isFunction(fn) {
								return typeOf(fn) === 'function';
						}

						function isArray(arr) {
								return Array.isArray ? Array.isArray(arr) : typeOf(arr) === 'array';
						}

						function toArray(obj, offset) {
								offset = offset >= 0 ? offset : 0;

								if (Array.from) {
										return Array.from(obj).slice(offset);
								}

								return slice.call(obj, offset);
						}

						function trim(str) {
								if (typeof str === 'string') {
										str = str.trim ? str.trim() : str.replace(REGEXP_TRIM, '$1');
								}

								return str;
						}

						function each(obj, callback) {
								if (obj && isFunction(callback)) {
										var i = void 0;

										if (isArray(obj) || isNumber(obj.length) /* array-like */) {
														var length = obj.length;

														for (i = 0; i < length; i++) {
																if (callback.call(obj, obj[i], i, obj) === false) {
																		break;
																}
														}
												} else if (isObject(obj)) {
												Object.keys(obj).forEach(function (key) {
														callback.call(obj, obj[key], key, obj);
												});
										}
								}

								return obj;
						}

						function extend() {
								for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
										args[_key] = arguments[_key];
								}

								var deep = args[0] === true;
								var data = deep ? args[1] : args[0];

								if (args.length > 1) {
										// if (Object.assign) {
										//   return Object.assign.apply(Object, args);
										// }

										args.shift();

										args.forEach(function (arg) {
												if (isObject(arg)) {
														Object.keys(arg).forEach(function (key) {
																if (deep && isObject(data[key])) {
																		extend(true, data[key], arg[key]);
																} else {
																		data[key] = arg[key];
																}
														});
												}
										});
								}

								return data;
						}

						function proxy(fn, context) {
								for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
										args[_key2 - 2] = arguments[_key2];
								}

								return function () {
										for (var _len3 = arguments.length, args2 = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
												args2[_key3] = arguments[_key3];
										}

										return fn.apply(context, args.concat(args2));
								};
						}

						function setStyle(element, styles) {
								var style = element.style;

								each(styles, function (value, property) {
										if (REGEXP_SUFFIX.test(property) && isNumber(value)) {
												value += 'px';
										}

										style[property] = value;
								});
						}

						function hasClass(element, value) {
								return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;
						}

						function addClass(element, value) {
								if (isNumber(element.length)) {
										each(element, function (elem) {
												addClass(elem, value);
										});
										return;
								}

								if (element.classList) {
										element.classList.add(value);
										return;
								}

								var className = trim(element.className);

								if (!className) {
										element.className = value;
								} else if (className.indexOf(value) < 0) {
										element.className = className + ' ' + value;
								}
						}

						function removeClass(element, value) {
								if (isNumber(element.length)) {
										each(element, function (elem) {
												removeClass(elem, value);
										});
										return;
								}

								if (element.classList) {
										element.classList.remove(value);
										return;
								}

								if (element.className.indexOf(value) >= 0) {
										element.className = element.className.replace(value, '');
								}
						}

						function toggleClass(element, value, added) {
								if (isNumber(element.length)) {
										each(element, function (elem) {
												toggleClass(elem, value, added);
										});
										return;
								}

								// IE10-11 doesn't support the second parameter of `classList.toggle`
								if (added) {
										addClass(element, value);
								} else {
										removeClass(element, value);
								}
						}

						function hyphenate(str) {
								return str.replace(REGEXP_HYPHENATE, '$1-$2').toLowerCase();
						}

						function getData(element, name) {
								if (isObject(element[name])) {
										return element[name];
								} else if (element.dataset) {
										return element.dataset[name];
								}

								return element.getAttribute('data-' + hyphenate(name));
						}

						function setData(element, name, data) {
								if (isObject(data)) {
										element[name] = data;
								} else if (element.dataset) {
										element.dataset[name] = data;
								} else {
										element.setAttribute('data-' + hyphenate(name), data);
								}
						}

						function removeData(element, name) {
								if (isObject(element[name])) {
										delete element[name];
								} else if (element.dataset) {
										delete element.dataset[name];
								} else {
										element.removeAttribute('data-' + hyphenate(name));
								}
						}

						function removeListener(element, type, handler) {
								var types = trim(type).split(REGEXP_SPACES);

								if (types.length > 1) {
										each(types, function (t) {
												removeListener(element, t, handler);
										});
										return;
								}

								if (element.removeEventListener) {
										element.removeEventListener(type, handler, false);
								} else if (element.detachEvent) {
										element.detachEvent('on' + type, handler);
								}
						}

						function addListener(element, type, _handler, once) {
								var types = trim(type).split(REGEXP_SPACES);
								var originalHandler = _handler;

								if (types.length > 1) {
										each(types, function (t) {
												addListener(element, t, _handler);
										});
										return;
								}

								if (once) {
										_handler = function handler() {
												for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
														args[_key4] = arguments[_key4];
												}

												removeListener(element, type, _handler);

												return originalHandler.apply(element, args);
										};
								}

								if (element.addEventListener) {
										element.addEventListener(type, _handler, false);
								} else if (element.attachEvent) {
										element.attachEvent('on${type}', _handler);
								}
						}

						exports.addListener = addListener;
						function dispatchEvent(element, type, data) {
								if (element.dispatchEvent) {
										var event = void 0;

										// Event and CustomEvent on IE9-11 are global objects, not constructors
										if (isFunction(Event) && isFunction(CustomEvent)) {
												if (isUndefined(data)) {
														event = new Event(type, {
																bubbles: true,
																cancelable: true
														});
												} else {
														event = new CustomEvent(type, {
																detail: data,
																bubbles: true,
																cancelable: true
														});
												}
										} else if (isUndefined(data)) {
												event = document.createEvent('Event');
												event.initEvent(type, true, true);
										} else {
												event = document.createEvent('CustomEvent');
												event.initCustomEvent(type, true, true, data);
										}

										// IE9+
										return element.dispatchEvent(event);
								} else if (element.fireEvent) {
										// IE6-10 (native events only)
										return element.fireEvent('on' + type);
								}

								return true;
						}

						function getEvent(event) {
								var e = event || window.event;

								// Fix target property (IE8)
								if (!e.target) {
										e.target = e.srcElement || document;
								}

								if (!isNumber(e.pageX) && isNumber(e.clientX)) {
										var eventDoc = event.target.ownerDocument || document;
										var doc = eventDoc.documentElement;
										var body = eventDoc.body;

										e.pageX = e.clientX + ((doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0));
										e.pageY = e.clientY + ((doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0));
								}

								return e;
						}

						function getOffset(element) {
								var doc = document.documentElement;
								var box = element.getBoundingClientRect();

								return {
										left: box.left + ((window.scrollX || doc && doc.scrollLeft || 0) - (doc && doc.clientLeft || 0)),
										top: box.top + ((window.scrollY || doc && doc.scrollTop || 0) - (doc && doc.clientTop || 0))
								};
						}

						function getTouchesCenter(touches) {
								var length = touches.length;
								var pageX = 0;
								var pageY = 0;

								if (length) {
										each(touches, function (touch) {
												pageX += touch.pageX;
												pageY += touch.pageY;
										});

										pageX /= length;
										pageY /= length;
								}

								return {
										pageX: pageX,
										pageY: pageY
								};
						}

						function getByTag(element, tagName) {
								return element.getElementsByTagName(tagName);
						}

						function getByClass(element, className) {
								return element.getElementsByClassName ? element.getElementsByClassName(className) : element.querySelectorAll('.' + className);
						}

						function createElement(tagName) {
								return document.createElement(tagName);
						}

						function appendChild(element, elem) {
								element.appendChild(elem);
						}

						function removeChild(element) {
								if (element.parentNode) {
										element.parentNode.removeChild(element);
								}
						}

						function empty(element) {
								while (element.firstChild) {
										element.removeChild(element.firstChild);
								}
						}

						function isCrossOriginURL(url) {
								var parts = url.match(REGEXP_ORIGINS);

								return parts && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);
						}

						function addTimestamp(url) {
								var timestamp = 'timestamp=' + new Date().getTime();

								return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;
						}

						function getImageSize(image, callback) {
								// Modern browsers (ignore Safari)
								if (image.naturalWidth && !IS_SAFARI_OR_UIWEBVIEW) {
										callback(image.naturalWidth, image.naturalHeight);
										return;
								}

								// IE8: Don't use `new Image()` here
								var newImage = createElement('img');

								newImage.onload = function load() {
										callback(this.width, this.height);
								};

								newImage.src = image.src;
						}

						function getTransform(data) {
								var transforms = [];
								var rotate = data.rotate;
								var scaleX = data.scaleX;
								var scaleY = data.scaleY;

								// Rotate should come first before scale to match orientation transform
								if (isNumber(rotate) && rotate !== 0) {
										transforms.push('rotate(' + rotate + 'deg)');
								}

								if (isNumber(scaleX) && scaleX !== 1) {
										transforms.push('scaleX(' + scaleX + ')');
								}

								if (isNumber(scaleY) && scaleY !== 1) {
										transforms.push('scaleY(' + scaleY + ')');
								}

								return transforms.length ? transforms.join(' ') : 'none';
						}

						function getRotatedSizes(data, reversed) {
								var deg = Math.abs(data.degree) % 180;
								var arc = (deg > 90 ? 180 - deg : deg) * Math.PI / 180;
								var sinArc = Math.sin(arc);
								var cosArc = Math.cos(arc);
								var width = data.width;
								var height = data.height;
								var aspectRatio = data.aspectRatio;
								var newWidth = void 0;
								var newHeight = void 0;

								if (!reversed) {
										newWidth = width * cosArc + height * sinArc;
										newHeight = width * sinArc + height * cosArc;
								} else {
										newWidth = width / (cosArc + sinArc / aspectRatio);
										newHeight = newWidth / aspectRatio;
								}

								return {
										width: newWidth,
										height: newHeight
								};
						}

						function getSourceCanvas(image, data) {
								var canvas = createElement('canvas');
								var context = canvas.getContext('2d');
								var dstX = 0;
								var dstY = 0;
								var dstWidth = data.naturalWidth;
								var dstHeight = data.naturalHeight;
								var rotate = data.rotate;
								var scaleX = data.scaleX;
								var scaleY = data.scaleY;
								var scalable = isNumber(scaleX) && isNumber(scaleY) && (scaleX !== 1 || scaleY !== 1);
								var rotatable = isNumber(rotate) && rotate !== 0;
								var advanced = rotatable || scalable;
								var canvasWidth = dstWidth * Math.abs(scaleX || 1);
								var canvasHeight = dstHeight * Math.abs(scaleY || 1);
								var translateX = void 0;
								var translateY = void 0;
								var rotated = void 0;

								if (scalable) {
										translateX = canvasWidth / 2;
										translateY = canvasHeight / 2;
								}

								if (rotatable) {
										rotated = getRotatedSizes({
												width: canvasWidth,
												height: canvasHeight,
												degree: rotate
										});

										canvasWidth = rotated.width;
										canvasHeight = rotated.height;
										translateX = canvasWidth / 2;
										translateY = canvasHeight / 2;
								}

								canvas.width = canvasWidth;
								canvas.height = canvasHeight;

								if (advanced) {
										dstX = -dstWidth / 2;
										dstY = -dstHeight / 2;

										context.save();
										context.translate(translateX, translateY);
								}

								// Rotate should come first before scale as in the "getTransform" function
								if (rotatable) {
										context.rotate(rotate * Math.PI / 180);
								}

								if (scalable) {
										context.scale(scaleX, scaleY);
								}

								context.drawImage(image, Math.floor(dstX), Math.floor(dstY), Math.floor(dstWidth), Math.floor(dstHeight));

								if (advanced) {
										context.restore();
								}

								return canvas;
						}

						function getStringFromCharCode(dataView, start, length) {
								var str = '';
								var i = start;

								for (length += start; i < length; i++) {
										str += fromCharCode(dataView.getUint8(i));
								}

								return str;
						}

						function getOrientation(arrayBuffer) {
								var dataView = new DataView(arrayBuffer);
								var length = dataView.byteLength;
								var orientation = void 0;
								var exifIDCode = void 0;
								var tiffOffset = void 0;
								var firstIFDOffset = void 0;
								var littleEndian = void 0;
								var endianness = void 0;
								var app1Start = void 0;
								var ifdStart = void 0;
								var offset = void 0;
								var i = void 0;

								// Only handle JPEG image (start by 0xFFD8)
								if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {
										offset = 2;

										while (offset < length) {
												if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {
														app1Start = offset;
														break;
												}

												offset++;
										}
								}

								if (app1Start) {
										exifIDCode = app1Start + 4;
										tiffOffset = app1Start + 10;

										if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {
												endianness = dataView.getUint16(tiffOffset);
												littleEndian = endianness === 0x4949;

												if (littleEndian || endianness === 0x4D4D /* bigEndian */) {
																if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {
																		firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);

																		if (firstIFDOffset >= 0x00000008) {
																				ifdStart = tiffOffset + firstIFDOffset;
																		}
																}
														}
										}
								}

								if (ifdStart) {
										length = dataView.getUint16(ifdStart, littleEndian);

										for (i = 0; i < length; i++) {
												offset = ifdStart + i * 12 + 2;

												if (dataView.getUint16(offset, littleEndian) === 0x0112 /* Orientation */) {
																// 8 is the offset of the current tag's value
																offset += 8;

																// Get the original orientation value
																orientation = dataView.getUint16(offset, littleEndian);

																// Override the orientation with its default value for Safari
																if (IS_SAFARI_OR_UIWEBVIEW) {
																		dataView.setUint16(offset, 1, littleEndian);
																}

																break;
														}
										}
								}

								return orientation;
						}

						function dataURLToArrayBuffer(dataURL) {
								var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');
								var binary = atob(base64);
								var length = binary.length;
								var arrayBuffer = new ArrayBuffer(length);
								var dataView = new Uint8Array(arrayBuffer);
								var i = void 0;

								for (i = 0; i < length; i++) {
										dataView[i] = binary.charCodeAt(i);
								}

								return arrayBuffer;
						}

						// Only available for JPEG image
						function arrayBufferToDataURL(arrayBuffer) {
								var dataView = new Uint8Array(arrayBuffer);
								var length = dataView.length;
								var base64 = '';
								var i = void 0;

								for (i = 0; i < length; i++) {
										base64 += fromCharCode(dataView[i]);
								}

								return 'data:image/jpeg;base64,' + btoa(base64);
						}

						/***/
				},
				/* 5 */
				/***/function (module, exports, __webpack_require__) {

						'use strict';

						Object.defineProperty(exports, "__esModule", {
								value: true
						});

						var _utilities = __webpack_require__(4);

						var $ = _interopRequireWildcard(_utilities);

						function _interopRequireWildcard(obj) {
								if (obj && obj.__esModule) {
										return obj;
								} else {
										var newObj = {};if (obj != null) {
												for (var key in obj) {
														if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
												}
										}newObj.default = obj;return newObj;
								}
						}

						var DATA_PREVIEW = 'preview';

						exports.default = {
								initPreview: function initPreview() {
										var self = this;
										var preview = self.options.preview;
										var image = $.createElement('img');
										var crossOrigin = self.crossOrigin;
										var url = crossOrigin ? self.crossOriginUrl : self.url;

										if (crossOrigin) {
												image.crossOrigin = crossOrigin;
										}

										image.src = url;
										$.appendChild(self.viewBox, image);
										self.image2 = image;

										if (!preview) {
												return;
										}

										var previews = document.querySelectorAll(preview);

										self.previews = previews;

										$.each(previews, function (element) {
												var img = $.createElement('img');

												// Save the original size for recover
												$.setData(element, DATA_PREVIEW, {
														width: element.offsetWidth,
														height: element.offsetHeight,
														html: element.innerHTML
												});

												if (crossOrigin) {
														img.crossOrigin = crossOrigin;
												}

												img.src = url;

												/**
             * Override img element styles
             * Add `display:block` to avoid margin top issue
             * Add `height:auto` to override `height` attribute on IE8
             * (Occur only when margin-top <= -height)
             */

												img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;"';

												$.empty(element);
												$.appendChild(element, img);
										});
								},
								resetPreview: function resetPreview() {
										$.each(this.previews, function (element) {
												var data = $.getData(element, DATA_PREVIEW);

												$.setStyle(element, {
														width: data.width,
														height: data.height
												});

												element.innerHTML = data.html;
												$.removeData(element, DATA_PREVIEW);
										});
								},
								preview: function preview() {
										var self = this;
										var imageData = self.imageData;
										var canvasData = self.canvasData;
										var cropBoxData = self.cropBoxData;
										var cropBoxWidth = cropBoxData.width;
										var cropBoxHeight = cropBoxData.height;
										var width = imageData.width;
										var height = imageData.height;
										var left = cropBoxData.left - canvasData.left - imageData.left;
										var top = cropBoxData.top - canvasData.top - imageData.top;
										var transform = $.getTransform(imageData);
										var transforms = {
												WebkitTransform: transform,
												msTransform: transform,
												transform: transform
										};

										if (!self.cropped || self.disabled) {
												return;
										}

										$.setStyle(self.image2, $.extend({
												width: width,
												height: height,
												marginLeft: -left,
												marginTop: -top
										}, transforms));

										$.each(self.previews, function (element) {
												var data = $.getData(element, DATA_PREVIEW);
												var originalWidth = data.width;
												var originalHeight = data.height;
												var newWidth = originalWidth;
												var newHeight = originalHeight;
												var ratio = 1;

												if (cropBoxWidth) {
														ratio = originalWidth / cropBoxWidth;
														newHeight = cropBoxHeight * ratio;
												}

												if (cropBoxHeight && newHeight > originalHeight) {
														ratio = originalHeight / cropBoxHeight;
														newWidth = cropBoxWidth * ratio;
														newHeight = originalHeight;
												}

												$.setStyle(element, {
														width: newWidth,
														height: newHeight
												});

												$.setStyle($.getByTag(element, 'img')[0], $.extend({
														width: width * ratio,
														height: height * ratio,
														marginLeft: -left * ratio,
														marginTop: -top * ratio
												}, transforms));
										});
								}
						};

						/***/
				},
				/* 6 */
				/***/function (module, exports, __webpack_require__) {

						'use strict';

						Object.defineProperty(exports, "__esModule", {
								value: true
						});

						var _utilities = __webpack_require__(4);

						var $ = _interopRequireWildcard(_utilities);

						function _interopRequireWildcard(obj) {
								if (obj && obj.__esModule) {
										return obj;
								} else {
										var newObj = {};if (obj != null) {
												for (var key in obj) {
														if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
												}
										}newObj.default = obj;return newObj;
								}
						}

						// Events
						var EVENT_MOUSE_DOWN = 'mousedown touchstart pointerdown MSPointerDown';
						var EVENT_MOUSE_MOVE = 'mousemove touchmove pointermove MSPointerMove';
						var EVENT_MOUSE_UP = 'mouseup touchend touchcancel pointerup pointercancel' + ' MSPointerUp MSPointerCancel';
						var EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll';
						var EVENT_DBLCLICK = 'dblclick';
						var EVENT_RESIZE = 'resize';
						var EVENT_CROP_START = 'cropstart';
						var EVENT_CROP_MOVE = 'cropmove';
						var EVENT_CROP_END = 'cropend';
						var EVENT_CROP = 'crop';
						var EVENT_ZOOM = 'zoom';

						exports.default = {
								bind: function bind() {
										var self = this;
										var options = self.options;
										var element = self.element;
										var cropper = self.cropper;

										if ($.isFunction(options.cropstart)) {
												$.addListener(element, EVENT_CROP_START, options.cropstart);
										}

										if ($.isFunction(options.cropmove)) {
												$.addListener(element, EVENT_CROP_MOVE, options.cropmove);
										}

										if ($.isFunction(options.cropend)) {
												$.addListener(element, EVENT_CROP_END, options.cropend);
										}

										if ($.isFunction(options.crop)) {
												$.addListener(element, EVENT_CROP, options.crop);
										}

										if ($.isFunction(options.zoom)) {
												$.addListener(element, EVENT_ZOOM, options.zoom);
										}

										$.addListener(cropper, EVENT_MOUSE_DOWN, self.onCropStart = $.proxy(self.cropStart, self));

										if (options.zoomable && options.zoomOnWheel) {
												$.addListener(cropper, EVENT_WHEEL, self.onWheel = $.proxy(self.wheel, self));
										}

										if (options.toggleDragModeOnDblclick) {
												$.addListener(cropper, EVENT_DBLCLICK, self.onDblclick = $.proxy(self.dblclick, self));
										}

										$.addListener(document, EVENT_MOUSE_MOVE, self.onCropMove = $.proxy(self.cropMove, self));
										$.addListener(document, EVENT_MOUSE_UP, self.onCropEnd = $.proxy(self.cropEnd, self));

										if (options.responsive) {
												$.addListener(window, EVENT_RESIZE, self.onResize = $.proxy(self.resize, self));
										}
								},
								unbind: function unbind() {
										var self = this;
										var options = self.options;
										var element = self.element;
										var cropper = self.cropper;

										if ($.isFunction(options.cropstart)) {
												$.removeListener(element, EVENT_CROP_START, options.cropstart);
										}

										if ($.isFunction(options.cropmove)) {
												$.removeListener(element, EVENT_CROP_MOVE, options.cropmove);
										}

										if ($.isFunction(options.cropend)) {
												$.removeListener(element, EVENT_CROP_END, options.cropend);
										}

										if ($.isFunction(options.crop)) {
												$.removeListener(element, EVENT_CROP, options.crop);
										}

										if ($.isFunction(options.zoom)) {
												$.removeListener(element, EVENT_ZOOM, options.zoom);
										}

										$.removeListener(cropper, EVENT_MOUSE_DOWN, self.onCropStart);

										if (options.zoomable && options.zoomOnWheel) {
												$.removeListener(cropper, EVENT_WHEEL, self.onWheel);
										}

										if (options.toggleDragModeOnDblclick) {
												$.removeListener(cropper, EVENT_DBLCLICK, self.onDblclick);
										}

										$.removeListener(document, EVENT_MOUSE_MOVE, self.onCropMove);
										$.removeListener(document, EVENT_MOUSE_UP, self.onCropEnd);

										if (options.responsive) {
												$.removeListener(window, EVENT_RESIZE, self.onResize);
										}
								}
						};

						/***/
				},
				/* 7 */
				/***/function (module, exports, __webpack_require__) {

						'use strict';

						Object.defineProperty(exports, "__esModule", {
								value: true
						});
						exports.REGEXP_ACTIONS = undefined;

						var _utilities = __webpack_require__(4);

						var $ = _interopRequireWildcard(_utilities);

						function _interopRequireWildcard(obj) {
								if (obj && obj.__esModule) {
										return obj;
								} else {
										var newObj = {};if (obj != null) {
												for (var key in obj) {
														if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
												}
										}newObj.default = obj;return newObj;
								}
						}

						var REGEXP_ACTIONS = exports.REGEXP_ACTIONS = /^(e|w|s|n|se|sw|ne|nw|all|crop|move|zoom)$/;

						exports.default = {
								resize: function resize() {
										var self = this;
										var restore = self.options.restore;
										var container = self.container;
										var containerData = self.containerData;

										// Check `container` is necessary for IE8
										if (self.disabled || !containerData) {
												return;
										}

										var ratio = container.offsetWidth / containerData.width;
										var canvasData = void 0;
										var cropBoxData = void 0;

										// Resize when width changed or height changed
										if (ratio !== 1 || container.offsetHeight !== containerData.height) {
												if (restore) {
														canvasData = self.getCanvasData();
														cropBoxData = self.getCropBoxData();
												}

												self.render();

												if (restore) {
														self.setCanvasData($.each(canvasData, function (n, i) {
																canvasData[i] = n * ratio;
														}));
														self.setCropBoxData($.each(cropBoxData, function (n, i) {
																cropBoxData[i] = n * ratio;
														}));
												}
										}
								},
								dblclick: function dblclick() {
										var self = this;

										if (self.disabled) {
												return;
										}

										self.setDragMode($.hasClass(self.dragBox, 'cropper-crop') ? 'move' : 'crop');
								},
								wheel: function wheel(event) {
										var self = this;
										var e = $.getEvent(event);
										var ratio = Number(self.options.wheelZoomRatio) || 0.1;
										var delta = 1;

										if (self.disabled) {
												return;
										}

										e.preventDefault();

										// Limit wheel speed to prevent zoom too fast (#21)
										if (self.wheeling) {
												return;
										}

										self.wheeling = true;

										setTimeout(function () {
												self.wheeling = false;
										}, 50);

										if (e.deltaY) {
												delta = e.deltaY > 0 ? 1 : -1;
										} else if (e.wheelDelta) {
												delta = -e.wheelDelta / 120;
										} else if (e.detail) {
												delta = e.detail > 0 ? 1 : -1;
										}

										self.zoom(-delta * ratio, e);
								},
								cropStart: function cropStart(event) {
										var self = this;
										var options = self.options;
										var e = $.getEvent(event);
										var touches = e.touches;
										var touchesLength = void 0;
										var touch = void 0;
										var action = void 0;

										if (self.disabled) {
												return;
										}

										if (touches) {
												touchesLength = touches.length;

												if (touchesLength > 1) {
														if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {
																touch = touches[1];
																self.startX2 = touch.pageX;
																self.startY2 = touch.pageY;
																action = 'zoom';
														} else {
																return;
														}
												}

												touch = touches[0];
										}

										action = action || $.getData(e.target, 'action');

										if (REGEXP_ACTIONS.test(action)) {
												if ($.dispatchEvent(self.element, 'cropstart', {
														originalEvent: e,
														action: action
												}) === false) {
														return;
												}

												e.preventDefault();

												self.action = action;
												self.cropping = false;

												self.startX = touch ? touch.pageX : e.pageX;
												self.startY = touch ? touch.pageY : e.pageY;

												if (action === 'crop') {
														self.cropping = true;
														$.addClass(self.dragBox, 'cropper-modal');
												}
										}
								},
								cropMove: function cropMove(event) {
										var self = this;
										var options = self.options;
										var e = $.getEvent(event);
										var touches = e.touches;
										var action = self.action;
										var touchesLength = void 0;
										var touch = void 0;

										if (self.disabled) {
												return;
										}

										if (touches) {
												touchesLength = touches.length;

												if (touchesLength > 1) {
														if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {
																touch = touches[1];
																self.endX2 = touch.pageX;
																self.endY2 = touch.pageY;
														} else {
																return;
														}
												}

												touch = touches[0];
										}

										if (action) {
												if ($.dispatchEvent(self.element, 'cropmove', {
														originalEvent: e,
														action: action
												}) === false) {
														return;
												}

												e.preventDefault();

												self.endX = touch ? touch.pageX : e.pageX;
												self.endY = touch ? touch.pageY : e.pageY;

												self.change(e.shiftKey, action === 'zoom' ? e : null);
										}
								},
								cropEnd: function cropEnd(event) {
										var self = this;
										var options = self.options;
										var e = $.getEvent(event);
										var action = self.action;

										if (self.disabled) {
												return;
										}

										if (action) {
												e.preventDefault();

												if (self.cropping) {
														self.cropping = false;
														$.toggleClass(self.dragBox, 'cropper-modal', self.cropped && options.modal);
												}

												self.action = '';

												$.dispatchEvent(self.element, 'cropend', {
														originalEvent: e,
														action: action
												});
										}
								}
						};

						/***/
				},
				/* 8 */
				/***/function (module, exports, __webpack_require__) {

						'use strict';

						Object.defineProperty(exports, "__esModule", {
								value: true
						});

						var _utilities = __webpack_require__(4);

						var $ = _interopRequireWildcard(_utilities);

						function _interopRequireWildcard(obj) {
								if (obj && obj.__esModule) {
										return obj;
								} else {
										var newObj = {};if (obj != null) {
												for (var key in obj) {
														if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
												}
										}newObj.default = obj;return newObj;
								}
						}

						// Actions
						var ACTION_EAST = 'e';
						var ACTION_WEST = 'w';
						var ACTION_SOUTH = 's';
						var ACTION_NORTH = 'n';
						var ACTION_SOUTH_EAST = 'se';
						var ACTION_SOUTH_WEST = 'sw';
						var ACTION_NORTH_EAST = 'ne';
						var ACTION_NORTH_WEST = 'nw';

						exports.default = {
								change: function change(shiftKey, originalEvent) {
										var self = this;
										var options = self.options;
										var containerData = self.containerData;
										var canvasData = self.canvasData;
										var cropBoxData = self.cropBoxData;
										var aspectRatio = options.aspectRatio;
										var action = self.action;
										var width = cropBoxData.width;
										var height = cropBoxData.height;
										var left = cropBoxData.left;
										var top = cropBoxData.top;
										var right = left + width;
										var bottom = top + height;
										var minLeft = 0;
										var minTop = 0;
										var maxWidth = containerData.width;
										var maxHeight = containerData.height;
										var renderable = true;
										var offset = void 0;

										// Locking aspect ratio in "free mode" by holding shift key
										if (!aspectRatio && shiftKey) {
												aspectRatio = width && height ? width / height : 1;
										}

										if (self.limited) {
												minLeft = cropBoxData.minLeft;
												minTop = cropBoxData.minTop;
												maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);
												maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);
										}

										var range = {
												x: self.endX - self.startX,
												y: self.endY - self.startY
										};

										if (aspectRatio) {
												range.X = range.y * aspectRatio;
												range.Y = range.x / aspectRatio;
										}

										switch (action) {
												// Move crop box
												case 'all':
														left += range.x;
														top += range.y;
														break;

												// Resize crop box
												case ACTION_EAST:
														if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {
																renderable = false;
																break;
														}

														width += range.x;

														if (aspectRatio) {
																height = width / aspectRatio;
																top -= range.Y / 2;
														}

														if (width < 0) {
																action = ACTION_WEST;
																width = 0;
														}

														break;

												case ACTION_NORTH:
														if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {
																renderable = false;
																break;
														}

														height -= range.y;
														top += range.y;

														if (aspectRatio) {
																width = height * aspectRatio;
																left += range.X / 2;
														}

														if (height < 0) {
																action = ACTION_SOUTH;
																height = 0;
														}

														break;

												case ACTION_WEST:
														if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {
																renderable = false;
																break;
														}

														width -= range.x;
														left += range.x;

														if (aspectRatio) {
																height = width / aspectRatio;
																top += range.Y / 2;
														}

														if (width < 0) {
																action = ACTION_EAST;
																width = 0;
														}

														break;

												case ACTION_SOUTH:
														if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {
																renderable = false;
																break;
														}

														height += range.y;

														if (aspectRatio) {
																width = height * aspectRatio;
																left -= range.X / 2;
														}

														if (height < 0) {
																action = ACTION_NORTH;
																height = 0;
														}

														break;

												case ACTION_NORTH_EAST:
														if (aspectRatio) {
																if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {
																		renderable = false;
																		break;
																}

																height -= range.y;
																top += range.y;
																width = height * aspectRatio;
														} else {
																if (range.x >= 0) {
																		if (right < maxWidth) {
																				width += range.x;
																		} else if (range.y <= 0 && top <= minTop) {
																				renderable = false;
																		}
																} else {
																		width += range.x;
																}

																if (range.y <= 0) {
																		if (top > minTop) {
																				height -= range.y;
																				top += range.y;
																		}
																} else {
																		height -= range.y;
																		top += range.y;
																}
														}

														if (width < 0 && height < 0) {
																action = ACTION_SOUTH_WEST;
																height = 0;
																width = 0;
														} else if (width < 0) {
																action = ACTION_NORTH_WEST;
																width = 0;
														} else if (height < 0) {
																action = ACTION_SOUTH_EAST;
																height = 0;
														}

														break;

												case ACTION_NORTH_WEST:
														if (aspectRatio) {
																if (range.y <= 0 && (top <= minTop || left <= minLeft)) {
																		renderable = false;
																		break;
																}

																height -= range.y;
																top += range.y;
																width = height * aspectRatio;
																left += range.X;
														} else {
																if (range.x <= 0) {
																		if (left > minLeft) {
																				width -= range.x;
																				left += range.x;
																		} else if (range.y <= 0 && top <= minTop) {
																				renderable = false;
																		}
																} else {
																		width -= range.x;
																		left += range.x;
																}

																if (range.y <= 0) {
																		if (top > minTop) {
																				height -= range.y;
																				top += range.y;
																		}
																} else {
																		height -= range.y;
																		top += range.y;
																}
														}

														if (width < 0 && height < 0) {
																action = ACTION_SOUTH_EAST;
																height = 0;
																width = 0;
														} else if (width < 0) {
																action = ACTION_NORTH_EAST;
																width = 0;
														} else if (height < 0) {
																action = ACTION_SOUTH_WEST;
																height = 0;
														}

														break;

												case ACTION_SOUTH_WEST:
														if (aspectRatio) {
																if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {
																		renderable = false;
																		break;
																}

																width -= range.x;
																left += range.x;
																height = width / aspectRatio;
														} else {
																if (range.x <= 0) {
																		if (left > minLeft) {
																				width -= range.x;
																				left += range.x;
																		} else if (range.y >= 0 && bottom >= maxHeight) {
																				renderable = false;
																		}
																} else {
																		width -= range.x;
																		left += range.x;
																}

																if (range.y >= 0) {
																		if (bottom < maxHeight) {
																				height += range.y;
																		}
																} else {
																		height += range.y;
																}
														}

														if (width < 0 && height < 0) {
																action = ACTION_NORTH_EAST;
																height = 0;
																width = 0;
														} else if (width < 0) {
																action = ACTION_SOUTH_EAST;
																width = 0;
														} else if (height < 0) {
																action = ACTION_NORTH_WEST;
																height = 0;
														}

														break;

												case ACTION_SOUTH_EAST:
														if (aspectRatio) {
																if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {
																		renderable = false;
																		break;
																}

																width += range.x;
																height = width / aspectRatio;
														} else {
																if (range.x >= 0) {
																		if (right < maxWidth) {
																				width += range.x;
																		} else if (range.y >= 0 && bottom >= maxHeight) {
																				renderable = false;
																		}
																} else {
																		width += range.x;
																}

																if (range.y >= 0) {
																		if (bottom < maxHeight) {
																				height += range.y;
																		}
																} else {
																		height += range.y;
																}
														}

														if (width < 0 && height < 0) {
																action = ACTION_NORTH_WEST;
																height = 0;
																width = 0;
														} else if (width < 0) {
																action = ACTION_SOUTH_WEST;
																width = 0;
														} else if (height < 0) {
																action = ACTION_NORTH_EAST;
																height = 0;
														}

														break;

												// Move canvas
												case 'move':
														self.move(range.x, range.y);
														renderable = false;
														break;

												// Zoom canvas
												case 'zoom':
														self.zoom(function (x1, y1, x2, y2) {
																var z1 = Math.sqrt(x1 * x1 + y1 * y1);
																var z2 = Math.sqrt(x2 * x2 + y2 * y2);

																return (z2 - z1) / z1;
														}(Math.abs(self.startX - self.startX2), Math.abs(self.startY - self.startY2), Math.abs(self.endX - self.endX2), Math.abs(self.endY - self.endY2)), originalEvent);
														self.startX2 = self.endX2;
														self.startY2 = self.endY2;
														renderable = false;
														break;

												// Create crop box
												case 'crop':
														if (!range.x || !range.y) {
																renderable = false;
																break;
														}

														offset = $.getOffset(self.cropper);
														left = self.startX - offset.left;
														top = self.startY - offset.top;
														width = cropBoxData.minWidth;
														height = cropBoxData.minHeight;

														if (range.x > 0) {
																action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;
														} else if (range.x < 0) {
																left -= width;
																action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;
														}

														if (range.y < 0) {
																top -= height;
														}

														// Show the crop box if is hidden
														if (!self.cropped) {
																$.removeClass(self.cropBox, 'cropper-hidden');
																self.cropped = true;

																if (self.limited) {
																		self.limitCropBox(true, true);
																}
														}

														break;

												// No default
										}

										if (renderable) {
												cropBoxData.width = width;
												cropBoxData.height = height;
												cropBoxData.left = left;
												cropBoxData.top = top;
												self.action = action;

												self.renderCropBox();
										}

										// Override
										self.startX = self.endX;
										self.startY = self.endY;
								}
						};

						/***/
				},
				/* 9 */
				/***/function (module, exports, __webpack_require__) {

						'use strict';

						Object.defineProperty(exports, "__esModule", {
								value: true
						});

						var _utilities = __webpack_require__(4);

						var $ = _interopRequireWildcard(_utilities);

						function _interopRequireWildcard(obj) {
								if (obj && obj.__esModule) {
										return obj;
								} else {
										var newObj = {};if (obj != null) {
												for (var key in obj) {
														if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
												}
										}newObj.default = obj;return newObj;
								}
						}

						function _toConsumableArray(arr) {
								if (Array.isArray(arr)) {
										for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
												arr2[i] = arr[i];
										}return arr2;
								} else {
										return Array.from(arr);
								}
						}

						exports.default = {
								// Show the crop box manually
								crop: function crop() {
										var self = this;

										if (self.ready && !self.disabled) {
												if (!self.cropped) {
														self.cropped = true;
														self.limitCropBox(true, true);

														if (self.options.modal) {
																$.addClass(self.dragBox, 'cropper-modal');
														}

														$.removeClass(self.cropBox, 'cropper-hidden');
												}

												self.setCropBoxData(self.initialCropBoxData);
										}

										return self;
								},

								// Reset the image and crop box to their initial states
								reset: function reset() {
										var self = this;

										if (self.ready && !self.disabled) {
												self.imageData = $.extend({}, self.initialImageData);
												self.canvasData = $.extend({}, self.initialCanvasData);
												self.cropBoxData = $.extend({}, self.initialCropBoxData);

												self.renderCanvas();

												if (self.cropped) {
														self.renderCropBox();
												}
										}

										return self;
								},

								// Clear the crop box
								clear: function clear() {
										var self = this;

										if (self.cropped && !self.disabled) {
												$.extend(self.cropBoxData, {
														left: 0,
														top: 0,
														width: 0,
														height: 0
												});

												self.cropped = false;
												self.renderCropBox();

												self.limitCanvas();

												// Render canvas after crop box rendered
												self.renderCanvas();

												$.removeClass(self.dragBox, 'cropper-modal');
												$.addClass(self.cropBox, 'cropper-hidden');
										}

										return self;
								},

								/**
         * Replace the image's src and rebuild the cropper
         *
         * @param {String} url
         * @param {Boolean} onlyColorChanged (optional)
         */
								replace: function replace(url, onlyColorChanged) {
										var self = this;

										if (!self.disabled && url) {
												if (self.isImg) {
														self.element.src = url;
												}

												if (onlyColorChanged) {
														self.url = url;
														self.image.src = url;

														if (self.ready) {
																self.image2.src = url;

																$.each(self.previews, function (element) {
																		$.getByTag(element, 'img')[0].src = url;
																});
														}
												} else {
														if (self.isImg) {
																self.replaced = true;
														}

														// Clear previous data
														self.options.data = null;
														self.load(url);
												}
										}

										return self;
								},

								// Enable (unfreeze) the cropper
								enable: function enable() {
										var self = this;

										if (self.ready) {
												self.disabled = false;
												$.removeClass(self.cropper, 'cropper-disabled');
										}

										return self;
								},

								// Disable (freeze) the cropper
								disable: function disable() {
										var self = this;

										if (self.ready) {
												self.disabled = true;
												$.addClass(self.cropper, 'cropper-disabled');
										}

										return self;
								},

								// Destroy the cropper and remove the instance from the image
								destroy: function destroy() {
										var self = this;
										var element = self.element;
										var image = self.image;

										if (self.loaded) {
												if (self.isImg && self.replaced) {
														element.src = self.originalUrl;
												}

												self.unbuild();
												$.removeClass(element, 'cropper-hidden');
										} else if (self.isImg) {
												$.removeListener(element, 'load', self.start);
										} else if (image) {
												$.removeChild(image);
										}

										$.removeData(element, 'cropper');

										return self;
								},

								/**
         * Move the canvas with relative offsets
         *
         * @param {Number} offsetX
         * @param {Number} offsetY (optional)
         */
								move: function move(offsetX, offsetY) {
										var self = this;
										var canvasData = self.canvasData;

										return self.moveTo($.isUndefined(offsetX) ? offsetX : canvasData.left + Number(offsetX), $.isUndefined(offsetY) ? offsetY : canvasData.top + Number(offsetY));
								},

								/**
         * Move the canvas to an absolute point
         *
         * @param {Number} x
         * @param {Number} y (optional)
         */
								moveTo: function moveTo(x, y) {
										var self = this;
										var canvasData = self.canvasData;
										var changed = false;

										// If "y" is not present, its default value is "x"
										if ($.isUndefined(y)) {
												y = x;
										}

										x = Number(x);
										y = Number(y);

										if (self.ready && !self.disabled && self.options.movable) {
												if ($.isNumber(x)) {
														canvasData.left = x;
														changed = true;
												}

												if ($.isNumber(y)) {
														canvasData.top = y;
														changed = true;
												}

												if (changed) {
														self.renderCanvas(true);
												}
										}

										return self;
								},

								/**
         * Zoom the canvas with a relative ratio
         *
         * @param {Number} ratio
         * @param {Event} _originalEvent (private)
         */
								zoom: function zoom(ratio, _originalEvent) {
										var self = this;
										var canvasData = self.canvasData;

										ratio = Number(ratio);

										if (ratio < 0) {
												ratio = 1 / (1 - ratio);
										} else {
												ratio = 1 + ratio;
										}

										return self.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, _originalEvent);
								},

								/**
         * Zoom the canvas to an absolute ratio
         *
         * @param {Number} ratio
         * @param {Event} _originalEvent (private)
         */
								zoomTo: function zoomTo(ratio, _originalEvent) {
										var self = this;
										var options = self.options;
										var canvasData = self.canvasData;
										var width = canvasData.width;
										var height = canvasData.height;
										var naturalWidth = canvasData.naturalWidth;
										var naturalHeight = canvasData.naturalHeight;
										var newWidth = void 0;
										var newHeight = void 0;
										var offset = void 0;
										var center = void 0;

										ratio = Number(ratio);

										if (ratio >= 0 && self.ready && !self.disabled && options.zoomable) {
												newWidth = naturalWidth * ratio;
												newHeight = naturalHeight * ratio;

												if ($.dispatchEvent(self.element, 'zoom', {
														originalEvent: _originalEvent,
														oldRatio: width / naturalWidth,
														ratio: newWidth / naturalWidth
												}) === false) {
														return self;
												}

												if (_originalEvent) {
														offset = $.getOffset(self.cropper);
														center = _originalEvent.touches ? $.getTouchesCenter(_originalEvent.touches) : {
																pageX: _originalEvent.pageX,
																pageY: _originalEvent.pageY
														};

														// Zoom from the triggering point of the event
														canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);
														canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);
												} else {
														// Zoom from the center of the canvas
														canvasData.left -= (newWidth - width) / 2;
														canvasData.top -= (newHeight - height) / 2;
												}

												canvasData.width = newWidth;
												canvasData.height = newHeight;
												self.renderCanvas(true);
										}

										return self;
								},

								/**
         * Rotate the canvas with a relative degree
         *
         * @param {Number} degree
         */
								rotate: function rotate(degree) {
										var self = this;

										return self.rotateTo((self.imageData.rotate || 0) + Number(degree));
								},

								/**
         * Rotate the canvas to an absolute degree
         * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate()
         *
         * @param {Number} degree
         */
								rotateTo: function rotateTo(degree) {
										var self = this;

										degree = Number(degree);

										if ($.isNumber(degree) && self.ready && !self.disabled && self.options.rotatable) {
												self.imageData.rotate = degree % 360;
												self.rotated = true;
												self.renderCanvas(true);
										}

										return self;
								},

								/**
         * Scale the image
         * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()
         *
         * @param {Number} scaleX
         * @param {Number} scaleY (optional)
         */
								scale: function scale(scaleX, scaleY) {
										var self = this;
										var imageData = self.imageData;
										var changed = false;

										// If "scaleY" is not present, its default value is "scaleX"
										if ($.isUndefined(scaleY)) {
												scaleY = scaleX;
										}

										scaleX = Number(scaleX);
										scaleY = Number(scaleY);

										if (self.ready && !self.disabled && self.options.scalable) {
												if ($.isNumber(scaleX)) {
														imageData.scaleX = scaleX;
														changed = true;
												}

												if ($.isNumber(scaleY)) {
														imageData.scaleY = scaleY;
														changed = true;
												}

												if (changed) {
														self.renderImage(true);
												}
										}

										return self;
								},

								/**
         * Scale the abscissa of the image
         *
         * @param {Number} scaleX
         */
								scaleX: function scaleX(_scaleX) {
										var self = this;
										var scaleY = self.imageData.scaleY;

										return self.scale(_scaleX, $.isNumber(scaleY) ? scaleY : 1);
								},

								/**
         * Scale the ordinate of the image
         *
         * @param {Number} scaleY
         */
								scaleY: function scaleY(_scaleY) {
										var self = this;
										var scaleX = self.imageData.scaleX;

										return self.scale($.isNumber(scaleX) ? scaleX : 1, _scaleY);
								},

								/**
         * Get the cropped area position and size data (base on the original image)
         *
         * @param {Boolean} rounded (optional)
         * @return {Object} data
         */
								getData: function getData(rounded) {
										var self = this;
										var options = self.options;
										var imageData = self.imageData;
										var canvasData = self.canvasData;
										var cropBoxData = self.cropBoxData;
										var ratio = void 0;
										var data = void 0;

										if (self.ready && self.cropped) {
												data = {
														x: cropBoxData.left - canvasData.left,
														y: cropBoxData.top - canvasData.top,
														width: cropBoxData.width,
														height: cropBoxData.height
												};

												ratio = imageData.width / imageData.naturalWidth;

												$.each(data, function (n, i) {
														n /= ratio;
														data[i] = rounded ? Math.round(n) : n;
												});
										} else {
												data = {
														x: 0,
														y: 0,
														width: 0,
														height: 0
												};
										}

										if (options.rotatable) {
												data.rotate = imageData.rotate || 0;
										}

										if (options.scalable) {
												data.scaleX = imageData.scaleX || 1;
												data.scaleY = imageData.scaleY || 1;
										}

										return data;
								},

								/**
         * Set the cropped area position and size with new data
         *
         * @param {Object} data
         */
								setData: function setData(data) {
										var self = this;
										var options = self.options;
										var imageData = self.imageData;
										var canvasData = self.canvasData;
										var cropBoxData = {};
										var rotated = void 0;
										var scaled = void 0;
										var ratio = void 0;

										if ($.isFunction(data)) {
												data = data.call(self.element);
										}

										if (self.ready && !self.disabled && $.isPlainObject(data)) {
												if (options.rotatable) {
														if ($.isNumber(data.rotate) && data.rotate !== imageData.rotate) {
																imageData.rotate = data.rotate;
																self.rotated = rotated = true;
														}
												}

												if (options.scalable) {
														if ($.isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {
																imageData.scaleX = data.scaleX;
																scaled = true;
														}

														if ($.isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {
																imageData.scaleY = data.scaleY;
																scaled = true;
														}
												}

												if (rotated) {
														self.renderCanvas();
												} else if (scaled) {
														self.renderImage();
												}

												ratio = imageData.width / imageData.naturalWidth;

												if ($.isNumber(data.x)) {
														cropBoxData.left = data.x * ratio + canvasData.left;
												}

												if ($.isNumber(data.y)) {
														cropBoxData.top = data.y * ratio + canvasData.top;
												}

												if ($.isNumber(data.width)) {
														cropBoxData.width = data.width * ratio;
												}

												if ($.isNumber(data.height)) {
														cropBoxData.height = data.height * ratio;
												}

												self.setCropBoxData(cropBoxData);
										}

										return self;
								},

								/**
         * Get the container size data
         *
         * @return {Object} data
         */
								getContainerData: function getContainerData() {
										var self = this;

										return self.ready ? self.containerData : {};
								},

								/**
         * Get the image position and size data
         *
         * @return {Object} data
         */
								getImageData: function getImageData() {
										var self = this;

										return self.loaded ? self.imageData : {};
								},

								/**
         * Get the canvas position and size data
         *
         * @return {Object} data
         */
								getCanvasData: function getCanvasData() {
										var self = this;
										var canvasData = self.canvasData;
										var data = {};

										if (self.ready) {
												$.each(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {
														data[n] = canvasData[n];
												});
										}

										return data;
								},

								/**
         * Set the canvas position and size with new data
         *
         * @param {Object} data
         */
								setCanvasData: function setCanvasData(data) {
										var self = this;
										var canvasData = self.canvasData;
										var aspectRatio = canvasData.aspectRatio;

										if ($.isFunction(data)) {
												data = data.call(self.element);
										}

										if (self.ready && !self.disabled && $.isPlainObject(data)) {
												if ($.isNumber(data.left)) {
														canvasData.left = data.left;
												}

												if ($.isNumber(data.top)) {
														canvasData.top = data.top;
												}

												if ($.isNumber(data.width)) {
														canvasData.width = data.width;
														canvasData.height = data.width / aspectRatio;
												} else if ($.isNumber(data.height)) {
														canvasData.height = data.height;
														canvasData.width = data.height * aspectRatio;
												}

												self.renderCanvas(true);
										}

										return self;
								},

								/**
         * Get the crop box position and size data
         *
         * @return {Object} data
         */
								getCropBoxData: function getCropBoxData() {
										var self = this;
										var cropBoxData = self.cropBoxData;
										var data = void 0;

										if (self.ready && self.cropped) {
												data = {
														left: cropBoxData.left,
														top: cropBoxData.top,
														width: cropBoxData.width,
														height: cropBoxData.height
												};
										}

										return data || {};
								},

								/**
         * Set the crop box position and size with new data
         *
         * @param {Object} data
         */
								setCropBoxData: function setCropBoxData(data) {
										var self = this;
										var cropBoxData = self.cropBoxData;
										var aspectRatio = self.options.aspectRatio;
										var widthChanged = void 0;
										var heightChanged = void 0;

										if ($.isFunction(data)) {
												data = data.call(self.element);
										}

										if (self.ready && self.cropped && !self.disabled && $.isPlainObject(data)) {
												if ($.isNumber(data.left)) {
														cropBoxData.left = data.left;
												}

												if ($.isNumber(data.top)) {
														cropBoxData.top = data.top;
												}

												if ($.isNumber(data.width)) {
														widthChanged = true;
														cropBoxData.width = data.width;
												}

												if ($.isNumber(data.height)) {
														heightChanged = true;
														cropBoxData.height = data.height;
												}

												if (aspectRatio) {
														if (widthChanged) {
																cropBoxData.height = cropBoxData.width / aspectRatio;
														} else if (heightChanged) {
																cropBoxData.width = cropBoxData.height * aspectRatio;
														}
												}

												self.renderCropBox();
										}

										return self;
								},

								/**
         * Get a canvas drawn the cropped image
         *
         * @param {Object} options (optional)
         * @return {HTMLCanvasElement} canvas
         */
								getCroppedCanvas: function getCroppedCanvas(options) {
										var self = this;

										if (!self.ready || !window.HTMLCanvasElement) {
												return null;
										}

										// Return the whole canvas if not cropped
										if (!self.cropped) {
												return $.getSourceCanvas(self.image, self.imageData);
										}

										if (!$.isPlainObject(options)) {
												options = {};
										}

										var data = self.getData();
										var originalWidth = data.width;
										var originalHeight = data.height;
										var aspectRatio = originalWidth / originalHeight;
										var scaledWidth = void 0;
										var scaledHeight = void 0;
										var scaledRatio = void 0;

										if ($.isPlainObject(options)) {
												scaledWidth = options.width;
												scaledHeight = options.height;

												if (scaledWidth) {
														scaledHeight = scaledWidth / aspectRatio;
														scaledRatio = scaledWidth / originalWidth;
												} else if (scaledHeight) {
														scaledWidth = scaledHeight * aspectRatio;
														scaledRatio = scaledHeight / originalHeight;
												}
										}

										// The canvas element will use `Math.floor` on a float number, so floor first
										var canvasWidth = Math.floor(scaledWidth || originalWidth);
										var canvasHeight = Math.floor(scaledHeight || originalHeight);

										var canvas = $.createElement('canvas');
										var context = canvas.getContext('2d');

										canvas.width = canvasWidth;
										canvas.height = canvasHeight;

										if (options.fillColor) {
												context.fillStyle = options.fillColor;
												context.fillRect(0, 0, canvasWidth, canvasHeight);
										}

										// https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage
										var parameters = function () {
												var source = $.getSourceCanvas(self.image, self.imageData);
												var sourceWidth = source.width;
												var sourceHeight = source.height;
												var canvasData = self.canvasData;
												var params = [source];

												// Source canvas
												var srcX = data.x + canvasData.naturalWidth * (Math.abs(data.scaleX || 1) - 1) / 2;
												var srcY = data.y + canvasData.naturalHeight * (Math.abs(data.scaleY || 1) - 1) / 2;
												var srcWidth = void 0;
												var srcHeight = void 0;

												// Destination canvas
												var dstX = void 0;
												var dstY = void 0;
												var dstWidth = void 0;
												var dstHeight = void 0;

												if (srcX <= -originalWidth || srcX > sourceWidth) {
														srcX = srcWidth = dstX = dstWidth = 0;
												} else if (srcX <= 0) {
														dstX = -srcX;
														srcX = 0;
														srcWidth = dstWidth = Math.min(sourceWidth, originalWidth + srcX);
												} else if (srcX <= sourceWidth) {
														dstX = 0;
														srcWidth = dstWidth = Math.min(originalWidth, sourceWidth - srcX);
												}

												if (srcWidth <= 0 || srcY <= -originalHeight || srcY > sourceHeight) {
														srcY = srcHeight = dstY = dstHeight = 0;
												} else if (srcY <= 0) {
														dstY = -srcY;
														srcY = 0;
														srcHeight = dstHeight = Math.min(sourceHeight, originalHeight + srcY);
												} else if (srcY <= sourceHeight) {
														dstY = 0;
														srcHeight = dstHeight = Math.min(originalHeight, sourceHeight - srcY);
												}

												params.push(Math.floor(srcX), Math.floor(srcY), Math.floor(srcWidth), Math.floor(srcHeight));

												// Scale destination sizes
												if (scaledRatio) {
														dstX *= scaledRatio;
														dstY *= scaledRatio;
														dstWidth *= scaledRatio;
														dstHeight *= scaledRatio;
												}

												// Avoid "IndexSizeError" in IE and Firefox
												if (dstWidth > 0 && dstHeight > 0) {
														params.push(Math.floor(dstX), Math.floor(dstY), Math.floor(dstWidth), Math.floor(dstHeight));
												}

												return params;
										}();

										context.drawImage.apply(context, _toConsumableArray(parameters));

										return canvas;
								},

								/**
         * Change the aspect ratio of the crop box
         *
         * @param {Number} aspectRatio
         */
								setAspectRatio: function setAspectRatio(aspectRatio) {
										var self = this;
										var options = self.options;

										if (!self.disabled && !$.isUndefined(aspectRatio)) {
												// 0 -> NaN
												options.aspectRatio = Math.max(0, aspectRatio) || NaN;

												if (self.ready) {
														self.initCropBox();

														if (self.cropped) {
																self.renderCropBox();
														}
												}
										}

										return self;
								},

								/**
         * Change the drag mode
         *
         * @param {String} mode (optional)
         */
								setDragMode: function setDragMode(mode) {
										var self = this;
										var options = self.options;
										var dragBox = self.dragBox;
										var face = self.face;
										var croppable = void 0;
										var movable = void 0;

										if (self.loaded && !self.disabled) {
												croppable = mode === 'crop';
												movable = options.movable && mode === 'move';
												mode = croppable || movable ? mode : 'none';

												$.setData(dragBox, 'action', mode);
												$.toggleClass(dragBox, 'cropper-crop', croppable);
												$.toggleClass(dragBox, 'cropper-move', movable);

												if (!options.cropBoxMovable) {
														// Sync drag mode to crop box when it is not movable
														$.setData(face, 'action', mode);
														$.toggleClass(face, 'cropper-crop', croppable);
														$.toggleClass(face, 'cropper-move', movable);
												}
										}

										return self;
								}
						};

						/***/
				}
				/******/])
		);
});
;
//# sourceMappingURL=cropper.js.map
(function () {
		'use strict';

		angular.module('ngCropper', ['ng']).directive('ngCropper', ['$q', '$parse', function ($q, $parse) {
				return {
						restrict: 'A',
						scope: {
								options: '=ngCropperOptions',
								showEvent: '=ngCropperShow',
								hideEvent: '=ngCropperHide',
								proxy: '=?ngCropperProxy' // Optional.
						},
						link: function (scope, element, atts) {
								var shown = false;

								var cropperInstance;

								scope.$on(scope.showEvent, function () {
										if (shown) return;
										shown = true;

										preprocess(scope.options, element[0]).then(function (options) {
												cropperInstance = new Cropper(element[0], options);
												setProxy();
										});
								});

								function setProxy() {
										if (!scope.proxy) return;
										$parse(scope.proxy).assign(scope.$parent, function (action) {
												cropperInstance[action]();
										});
								}

								scope.$on(scope.hideEvent, function () {
										if (!shown) return;
										shown = false;
										cropperInstance.destroy();
								});

								scope.$watch('options.disabled', function (disabled) {
										if (!shown) return;
										if (disabled) cropperInstance.disable();
										if (!disabled) cropperInstance.enable();
								});
						}
				};

				function preprocess(options, img) {
						options = options || {};
						var result = $q.when(options); // No changes.
						if (options.maximize) {
								result = maximizeSelection(options, img);
						}
						return result;
				}

				/**
     * Change options to make selection maximum for the image.
     * fengyuanchen/cropper calculates valid selection's height & width
     * with respect to `aspectRatio`.
     */
				function maximizeSelection(options, img) {
						return getRealSize(img).then(function (size) {
								options.data = size;
								return options;
						});
				}

				/**
     * Returns real image size (without changes by css, attributes).
     */
				function getRealSize(img) {
						var defer = $q.defer();
						var size = { height: null, width: null };
						var image = new Image();

						image.onload = function () {
								defer.resolve({ width: image.width, height: image.height });
						};

						image.src = img.src;
						return defer.promise;
				}
		}]).service('Cropper', ['$q', function ($q) {

				this.encode = function (blob) {
						var defer = $q.defer();
						var reader = new FileReader();
						reader.onload = function (e) {
								defer.resolve(e.target.result);
						};
						reader.readAsDataURL(blob);
						return defer.promise;
				};

				this.decode = function (dataUrl) {
						var meta = dataUrl.split(';')[0];
						var type = meta.split(':')[1];
						var binary = atob(dataUrl.split(',')[1]);
						var array = new Uint8Array(binary.length);
						for (var i = 0; i < binary.length; i++) {
								array[i] = binary.charCodeAt(i);
						}
						return new Blob([array], { type: type });
				};

				this.crop = function (file, data) {
						var _decodeBlob = this.decode;
						return this.encode(file).then(_createImage).then(function (image) {
								var canvas = createCanvas(data);
								var context = canvas.getContext('2d');

								context.drawImage(image, data.x, data.y, data.width, data.height, 0, 0, data.width, data.height);

								var encoded = canvas.toDataURL(file.type);
								removeElement(canvas);

								return _decodeBlob(encoded);
						});
				};

				this.scale = function (file, data) {
						var _decodeBlob = this.decode;
						return this.encode(file).then(_createImage).then(function (image) {
								var heightOrig = image.height;
								var widthOrig = image.width;
								var ratio, height, width;

								if (angular.isNumber(data)) {
										ratio = data;
										height = heightOrig * ratio;
										width = widthOrig * ratio;
								}

								if (angular.isObject(data)) {
										ratio = widthOrig / heightOrig;
										height = data.height;
										width = data.width;

										if (height && !width) width = height * ratio;else if (width && !height) height = width / ratio;
								}

								var canvas = createCanvas(data);
								var context = canvas.getContext('2d');

								canvas.height = height;
								canvas.width = width;

								context.drawImage(image, 0, 0, widthOrig, heightOrig, 0, 0, width, height);

								var encoded = canvas.toDataURL(file.type);
								removeElement(canvas);

								return _decodeBlob(encoded);
						});
				};

				function _createImage(source) {
						var defer = $q.defer();
						var image = new Image();
						image.onload = function (e) {
								defer.resolve(e.target);
						};
						image.src = source;
						return defer.promise;
				}

				function createCanvas(data) {
						var canvas = document.createElement('canvas');
						canvas.width = data.width;
						canvas.height = data.height;
						canvas.style.display = 'none';
						document.body.appendChild(canvas);
						return canvas;
				}

				function removeElement(el) {
						el.parentElement.removeChild(el);
				}
		}]);
})();

/***/ }),
/* 45 */
/***/ (function(module, exports) {

/**
 * Angularjs wrapper around Dexie.js an IndexedDB handler
 * @version v0.0.17 - build 2016-03-07
 * @link https://github.com/FlussoBV/NgDexie
 * @license Apache License, http://www.apache.org/licenses/
 */

/* commonjs package manager support (eg componentjs) */
if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports) {
    module.exports = 'ngDexie';
}

(function () {
    'use strict';

    /**
     * Create ngdexie module
     */

    angular.module('ngdexie', ['ngdexie.core', 'ngdexie.ui']);

    angular.module('ngdexie.core', ['ngdexie.utils']);

    angular.module('ngdexie.core').provider('ngDexie', ngDexie);

    /**
     * NgDexie Class
     * @returns {ngDexie}
     */
    function ngDexie() {
        /* jshint validthis: true */
        var self = this;

        ////
        //// Configuration part
        ////
        var options = {
            name: '',
            debug: false
        };

        var configuration = function () {
            console.error('NgDexie :: No configuration hook has been set!');
        };

        self.setOptions = function (value) {
            options = angular.extend({}, options, value);
        };

        self.setConfiguration = function (handle) {
            configuration = handle;
        };

        ////
        //// api part
        ////

        self.$get = /*@ngInject*/["$rootScope", "$q", "$log", "ngDexieUtils", function ($rootScope, $q, $log, ngDexieUtils) {
            $log.debug('NgDexie :: init');
            var options = getOptions();

            // initialise Dexie object
            var db = new Dexie(options.name);

            // is debug enabled? Warn the developer
            if (options.debug) {
                $log.warn("NgDexie :: debug mode enabled");
            }

            // Do we need to remove the database
            if (options.debug) {
                db.delete().then(function () {
                    $log.warn("debug mode :: Database deleted");
                });
            }

            configuration.call(this, db);
            db.open().then(function () {
                db.close();
                db.open().then(function () {
                    $log.debug("NgDexie :: database is open");
                });
            });

            // Make sure we log it when the database is locked
            db.on('blocked', function () {
                $log.warn('database seems to be blocked');
            });

            return {
                getOptions: getOptions,
                get: get,
                getByIndex: getByIndex,
                getDb: getDb,
                getTransaction: getTransaction,
                list: list,
                listByIndex: listByIndex,
                remove: remove,
                put: put,
                reopen: reopen
            };

            /**
             * Get one entrie from the database
             * @param {type} storeName
             * @param {type} key
             * @returns {NgDexie@call;getQ@call;defer.promise}
             */
            function get(storeName, key) {
                var deferred = $q.defer();
                db.table(storeName).get(key, function (data) {
                    deferred.resolve(data);
                });
                return deferred.promise;
            }

            /**
             * Get entries from the database
             * @param {type} storeName
             * @param {type} index
             * @param {type} key
             * @returns {NgDexie@call;getQ@call;defer.promise}
             */
            function getByIndex(storeName, index, key) {
                var deferred = $q.defer();
                db.table(storeName).where(index).equals(key).toArray(function (data) {
                    if (angular.isArray(data) && data.length > 0) {
                        deferred.resolve(data[0]);
                    } else {
                        deferred.reject();
                    }
                });
                return deferred.promise;
            }

            /**
             * Run the given function in an $apply
             * @param {type} handle to a function which receives an db object
             * @param {type} useApply wrapper
             * @return db
             */
            function getDb(handle, useApply) {
                // If handle is undefined then only return the db
                if (angular.isUndefined(handle)) {
                    return db;
                }

                // set default useApply = false
                if (angular.isUndefined(useApply)) {
                    useApply = false;
                }

                // UseApply?
                if (useApply) {
                    $rootScope.$apply(function () {
                        handle.call(self, db);
                    });
                } else {
                    handle.call(self, db);
                }

                return db;
            }

            /**
             * Get an dexie.transaction in RW mode
             * @param {type} storeName
             * @param {type} handle which receives the transaction
             * @returns {$q@call;defer.promise}
             */
            function getTransaction(storeName, handle) {
                var deferred = $q.defer();
                db.transaction("rw", storeName, function () {
                    handle.call(self, db);
                }).then(function () {
                    deferred.resolve();
                }).catch(function (err) {
                    deferred.reject(err);
                });
                return deferred.promise;
            }

            /**
             * Get all entries from the storeName
             * @param {type} storeName
             * @returns {NgDexie@call;getQ@call;defer.promise}
             */
            function list(storeName) {
                var deferred = $q.defer();
                db.table(storeName).toArray(function (data) {
                    deferred.resolve(data);
                });
                return deferred.promise;
            }

            /**
             * Get entries from the database
             * @param {type} storeName
             * @param {type} index
             * @param {type} key
             * @returns {NgDexie@call;getQ@call;defer.promise}
             */
            function listByIndex(storeName, index, key) {
                var deferred = $q.defer();
                db.table(storeName).where(index).equals(key).toArray(function (data) {
                    deferred.resolve(data);
                });
                return deferred.promise;
            }

            /**
             * Remove an entrie from the database
             * Note: we don't want to use a method called delete as it is a reserved keyword
             * @param {type} storeName
             * @param {type} key
             * @returns {NgDexie@call;getQ@call;defer.promise}
             */
            function remove(storeName, key) {
                var deferred = $q.defer();
                ngDexie.getDb(function (db) {
                    db.table(storeName).delete(key).then(function () {
                        deferred.resolve();
                    }).catch(function (err) {
                        $log.debug("Error while using delete: " + err);
                        deferred.reject(err);
                    });
                });
                return deferred.promise;
            }

            /**
             * Save an deepcloned value to the database (without $$hashKey)
             * @param {type} storeName
             * @param {type} value
             * @returns {NgDexie@call;getQ@call;defer.promise}
             */
            function put(storeName, value) {
                var deferred = $q.defer();
                db.table(storeName).put(ngDexieUtils.deepClone(value)).then(function (data) {
                    deferred.resolve(data);
                }).catch(function (err) {
                    $log.debug("Error while using put: " + err);
                    deferred.reject(err);
                });
                return deferred.promise;
            }

            /**
             * Open and close the database. In between the given function will be called
             * @param {type} handle
             * @returns {$q@call;defer.promise}
             */
            function reopen(handle) {
                var deferred = $q.defer();
                db.close();
                if (handle) {
                    handle.call(this, db);
                }
                db.open().then(function () {
                    deferred.resolve();
                });
                return deferred.promise;
            }
        }];

        function getOptions() {
            return options;
        }
    }
})();
(function () {
    'use strict';
    /**
     * Create ngdexie.utils module
     */

    angular.module('ngdexie.utils', ['ngdexie.core']);
    /**
     * Create ngDexieUtils factory
     */
    angular.module('ngdexie.utils').factory("ngDexieUtils", ngDexieUtils);

    /*@ngInject*/
    function ngDexieUtils() {

        return {
            deepClone: deepClone,
            debounce: debounce
        };

        /**
         * Will use the deepClone from Dexie and removes the $$hashKey from the ngRepeat
         * @param {type} value
         * @returns {unresolved}
         */
        function deepClone(value) {
            var clone = Dexie.deepClone(value);
            if (angular.isDefined(clone.$$hashKey)) {
                delete clone.$$hashKey;
            }
            return value;
        }

        /**
         * Protect a function for being called to rapidly
         * @param {type} func
         * @param {type} wait
         * @param {type} immediate
         * @returns {Function}
         */
        function debounce(func, wait, immediate) {
            var timeout;
            return function () {
                var context = this,
                    args = arguments;
                var later = function () {
                    timeout = null;
                    if (!immediate) {
                        func.apply(context, args);
                    }
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) {
                    func.apply(context, args);
                }
            };
        }
    }
})();
(function () {
    'use strict';

    /**
     * Create ngdexie.utils module
     */

    angular.module('ngdexie.ui', ['ngdexie.core']);

    /**
     * Create ngDexieUtils factory
     */
    angular.module('ngdexie.ui').factory("ngDexieBind", ngDexieBind);

    /*@ngInject*/
    function ngDexieBind($parse, $log, ngDexie, ngDexieUtils) {
        var self = this;

        // Hold the scopes
        self._scopes = {};

        self._getScope = function ($scope) {
            var scopeKey = "s" + $scope.$id;

            // Creating scope if it does not exist
            if (angular.isUndefined(self._scopes[scopeKey])) {
                self._scopes[scopeKey] = {
                    watchers: {},
                    dbchanges: {}
                };

                // Cleanup when scope is terminated
                $scope.$on("$destroy", function () {
                    delete self._scopes[scopeKey];
                });
            }

            return self._scopes[scopeKey];
        };

        self._removeScope = function ($scope) {
            var scopeItem = self._getScope($scope);

            // Cleanup all the properties
            angular.forEach(scopeItem.watchers, function (watchFunction, property) {
                unbind($scope, property);
            });

            // Remove the scope item
            var scopeKey = "s" + $scope.$id;
            delete self._scopes[scopeKey];
        };

        // Start watching the dbase for changes
        dbWatcher();

        return {
            bind: bind,
            unbind: unbind,
            unbindScope: unbindScope
        };

        /**
         * Bind an scope property to an database record
         * @param {type} $scope
         * @param {type} property
         * @param {type} storeName
         * @param {type} id
         * @returns {ngdexie.ui.ngDexieBind}
         */
        function bind($scope, property, storeName, id) {
            var scopeItem = self._getScope($scope);

            var debounceFunc = ngDexieUtils.debounce(function (storeName, newVal) {
                ngDexie.put(storeName, newVal);
            }, 1000); // only commit stuff after 1 second

            // Check if the propery is defined
            if (angular.isUndefined($scope.$eval(property))) {
                // Value does not exist lets get the item from the db so we know it exists
                ngDexie.get(storeName, id).then(function (item) {
                    // Bind the property
                    $parse(property).assign($scope, item);

                    // Watch the item
                    var watchDeep = angular.isObject(item);
                    var watchFunction = function (newVal) {
                        if (angular.isDefined(newVal)) {
                            debounceFunc(storeName, newVal);
                        }
                    };

                    // Add to the watchers array
                    scopeItem.watchers[property] = $scope.$watch(property, watchFunction, watchDeep);

                    // Add to the dbChanges array
                    scopeItem.dbchanges[property] = { table: storeName, key: id,
                        refresh: function () {
                            ngDexie.get(storeName, id).then(function (item) {
                                $parse(property).assign($scope, item);
                            });
                        }
                    };
                });
            } else {
                $log.error("Already binded: " + property);
            }

            return this;
        }

        /**
         * Unbind the property
         * @param {type} $scope
         * @param {type} property
         * @returns {undefined}
         */
        function unbind($scope, property) {
            var scopeItem = self._getScope($scope);

            // Unregister watcher
            scopeItem.watchers[property]();

            // Remove from array
            delete scopeItem.watchers[property];
            delete scopeItem.dbchanges[property];
        }

        function unbindScope($scope) {
            self._removeScope($scope);
        }

        /**
         * Initialise the dbWatcher
         * @returns {undefined}
         */
        function dbWatcher() {
            ngDexie.getDb(function (db) {
                db.on("changes", function (changes) {
                    angular.forEach(changes, function (change) {
                        checkScopesForDbw(change.table, change.key);
                    });
                });
            });
        }

        /**
         * Check and/or refresh if there where db changes in an scope object
         * @param {type} table
         * @param {type} key
         * @returns {undefined}
         */
        function checkScopesForDbw(table, key) {
            angular.forEach(self._scopes, function (scope) {
                angular.forEach(scope.dbchanges, function (dbc) {
                    if (dbc.table === table && dbc.key === key) {
                        dbc.refresh();
                    }
                });
            });
        }
    }
    ngDexieBind.$inject = ["$parse", "$log", "ngDexie", "ngDexieUtils"];
})();

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(23)(__webpack_require__(214))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(23)(__webpack_require__(215))

/***/ }),
/* 48 */
/***/ (function(module, exports) {

angular.module("blake").controller("CopyController", ["$scope", "$routeParams", "$rootScope", "$window", "$modal", "$cookies", "BlakeDataService", "imageManipulation", "CompareObjectsFactory", function ($scope, $routeParams, $rootScope, $window, $modal, $cookies, BlakeDataService, imageManipulation, CompareObjectsFactory) {
    var vm = this;

    $rootScope.worksNavState = false;
    $rootScope.showWorkTitle = 'copy';
    $rootScope.showOverlay = false;
    $rootScope.zoom = false;
    $rootScope.supplemental = false;
    $rootScope.help = 'copy';
    $rootScope.dpivalue = '100';
    vm.bds = BlakeDataService;
    vm.cof = CompareObjectsFactory;
    $rootScope.doneSettingCopy = false;

    if (!angular.isDefined($rootScope.persistentmode)) {
        $rootScope.persistentmode = 'gallery';
    }

    BlakeDataService.setSelectedCopy($routeParams.copyId, $routeParams.descId).then(function () {
        vm.cof.resetComparisonObjects();
        $rootScope.view.mode = 'object';
        $rootScope.view.scope = 'image';
        $rootScope.doneSettingCopy = true;
    });

    /*
     * Toolbar manipulation
     */
    vm.showTools = true;

    vm.toggleTray = function () {
        $rootScope.worksNavState = false;
        vm.trayOpen = !vm.trayOpen;
    };

    vm.toggleTools = function () {
        vm.showTools = !vm.showTools;
        $scope.$broadcast('copyCtrl::toggleTools', vm.showTools);
    };

    /*
     * OVP Toolbar
     */
    vm.getObjectToTransform = function () {

        let object = {};

        if ($rootScope.view.mode == 'object') {
            object = vm.bds.object;
        }
        if ($rootScope.view.mode == 'compare') {
            object = vm.cof.main;
        }

        return object;
    };

    $scope.$on('clientPpi::savedPpi', function () {
        if ($rootScope.persistentmode != 'reading') {
            $window.open('/new-window/truesize/' + vm.bds.copy.bad_id + '?descId=' + vm.bds.object.desc_id, '_blank', 'width=800, height=600');
        }
    });

    $scope.$on('change::selectedObject', function () {
        imageManipulation.reset();
    });
}]);

/***/ }),
/* 49 */
/***/ (function(module, exports) {

angular.module('blake').controller('ExhibitController', ["$scope", "$routeParams", "$rootScope", "$window", "$modal", "$cookies", "BlakeDataService", "imageManipulation", "CompareObjectsFactory", function ($scope, $routeParams, $rootScope, $window, $modal, $cookies, BlakeDataService, imageManipulation, CompareObjectsFactory) {
    var vm = this;

    $rootScope.worksNavState = false;
    $rootScope.showWorkTitle = 'copy';
    $rootScope.showOverlay = false;
    $rootScope.zoom = false;
    $rootScope.supplemental = false;
    vm.bds = BlakeDataService;
    vm.cof = CompareObjectsFactory;
    $rootScope.persistentmode = 'reading';

    if (!angular.isDefined($rootScope.persistentmode)) {
        $rootScope.persistentmode = 'reading';
    }

    BlakeDataService.setSelectedCopy($routeParams.copyId, $routeParams.descId).then(function () {
        vm.cof.resetComparisonObjects();
        $rootScope.view.mode = 'object';
        $rootScope.view.scope = 'image';
    });

    /*
     * Toolbar manipulation
     */
    vm.showTools = true;

    vm.toggleTray = function () {
        $rootScope.worksNavState = false;
        vm.trayOpen = !vm.trayOpen;
    };

    vm.toggleTools = function () {
        vm.showTools = !vm.showTools;
        $scope.$broadcast('exhibitCtrl::toggleTools', vm.showTools);
    };

    /*
     * OVP Toolbar
     */
    vm.getObjectToTransform = function () {

        var object = {};

        if ($rootScope.view.mode == 'object') {
            object = vm.bds.object;
        }
        if ($rootScope.view.mode == 'compare') {
            object = vm.cof.main;
        }

        return object;
    };

    vm.trueSizeOpen = function (object) {
        if (!angular.isDefined($cookies.getObject('clientPpi'))) {
            var clientDpiModalInstance = $modal.open({
                template: '<client-ppi object="{{object}}"></client-ppi>',
                controller: 'ModalController',
                size: 'lg'
            });
        } else {
            $window.open('/new-window/truesize/' + vm.bds.copy.bad_id + '?descId=' + object.desc_id, '_blank', 'width=800, height=600');
        }
    };

    $scope.$on('clientPpi::savedPpi', function () {
        $window.open('/new-window/truesize/' + vm.bds.copy.bad_id + '?descId=' + vm.bds.object.desc_id, '_blank', 'width=800, height=600');
    });

    vm.rotate = function () {
        imageManipulation.rotate();
    };

    vm.zoom = function () {
        $rootScope.zoom = !$rootScope.zoom;
    };

    vm.toggleTranscription = function () {
        if ($rootScope.view.scope == 'image') {
            $rootScope.view.scope = 'both';
        } else {
            $rootScope.view.scope = 'image';
        }
    };

    vm.toggleSupplemental = function () {
        $rootScope.supplemental = !$rootScope.supplemental;
    };
}]);

/***/ }),
/* 50 */
/***/ (function(module, exports) {

angular.module('blake').controller('HomeController', ["$scope", "$rootScope", "BlakeDataService", function ($scope, $rootScope, BlakeDataService) {
    var vm = this;

    $rootScope.worksNavState = true;
    $rootScope.showWorkTitle = false;
    $rootScope.help = 'home';

    if (!angular.isDefined($rootScope.persistentmode)) {
        $rootScope.persistentmode = 'gallery';
    }

    vm.columns = {
        1: { 'topOffset': '-90px' },
        2: { 'topOffset': '-20px' },
        3: { 'topOffset': '-90px' },
        4: { 'topOffset': '-20px' },
        5: { 'topOffset': '-90px' },
        6: { 'topOffset': '-20px' }
    };

    $scope.$on('scroll::scroll', function (event, scroll) {
        $scope.$apply(function () {
            vm.columns[1].topOffset = -90 - scroll.offset * 0.2 + 'px';
            vm.columns[2].topOffset = -20 - scroll.offset * 0.4 + 'px';
            vm.columns[3].topOffset = -90 - scroll.offset * 0.14 + 'px';
            vm.columns[4].topOffset = -20 - scroll.offset * 0.4 + 'px';
            vm.columns[5].topOffset = -90 - scroll.offset * 0.5 + 'px';
            vm.columns[6].topOffset = -20 - scroll.offset * 0.3 + 'px';
        });
    });

    BlakeDataService.getFeaturedWorks().then(function (results) {
        let i = 0,
            sci = 1,
            used = [];
        results.forEach(value => {

            //FIXME
            if (value.title == "LaocoÃ¶n") {
                value.title = "Laocoön";
            }
            if (used.indexOf(value.bad_id) == -1) {
                used.push(value.bad_id);
                value.column = sci;
                if (++i == 3) {
                    ++sci;
                    i = 0;
                }
            }
        });
        vm.featured_works = results;
    });
}]);

/***/ }),
/* 51 */
/***/ (function(module, exports) {

angular.module("blake").controller("CropperController", ["$rootScope", "$routeParams", "BlakeDataService", "$scope", "$timeout", "lightbox_service", "Fabric", "FabricCanvas", "FabricConstants", function ($rootScope, $routeParams, BlakeDataService, $scope, $timeout, lightbox_service, Fabric, FabricCanvas, FabricConstants) {
  // use the fabric canvas service to get the active object...
  $scope.cropper;
  $scope.imageToCrop; // url of image to crop
  $scope.imageToCropCaption;

  lightbox_service.getImageToCrop().then(function (imageToCrop) {
    $scope.imageToCrop = imageToCrop.url;
    $scope.imageToCropCaption = imageToCrop.fullCaption;
    //console.log("=>imageToCrop url is fetched from db!")
  });

  // bootstrap cropperjs to the image element...
  // which must be done after the image has loaded...
  $scope.init = function () {
    console.log("=>init started!");

    $scope.cropper = new Cropper($scope.imageElement, {
      viewMode: 0,
      autoCropArea: .4,
      ratio: 1.0,
      checkOrientation: false,
      dragMode: 'move', /* crop/move/none - double click to switch on the fly*/
      //preview: 'preview', /* element or selector - element will show preview of cropped image*/
      zoom: function (e) {
        // zoom event...
        //console.log("zoomed: "+e.detail.ratio);
        // prevent zooming past 1.0 ratio... i.e.: image's natural size
        if (e.detail.ratio > 1.0) {
          $scope.cropper.zoomTo(1.0);
          e.preventDefault();
        }
      }
    });
    console.log("=>init done!");
  };

  $('#lb-crop-btn').on('click', function () {
    // lightbox should listen for this value to change...
    //window.localStorage.setItem('lbox-cropped-image',$scope.cropper.getCroppedCanvas().toDataURL());
    var croppedImage = {};
    croppedImage.id = 1;
    croppedImage.fullCaption = $scope.imageToCropCaption;
    croppedImage.url = $scope.cropper.getCroppedCanvas().toDataURL();

    // the lightbox needs to be notified of this....
    lightbox_service.setCroppedImage(croppedImage, window);
    // hackerish way to notify the lightbox controller...
    window.localStorage.setItem('image-cropped-indicator', Date.now());
  });

  // new Cropper is not available even on doc ready?!!!
  $(document).ready(function () {
    //console.log("== document is ready!");
    $scope.imageElement = document.getElementById('image');

    // when the page is loaded... wait for the image element to load
    // prior to bootstrapping the cropper!
    $('#image').on("load", function () {
      //console.log("jquery detected image was loaded!")
      $scope.init();
    });;
  });
}]);

/***/ }),
/* 52 */
/***/ (function(module, exports) {

angular.module("blake").controller("LightboxController", ["$scope", "$rootScope", "$modal", "lightbox_service", "Fabric", "FabricCanvas", "FabricConstants", "worktitleService", function ($scope, $rootScope, $modal, lightbox_service, Fabric, FabricCanvas, FabricConstants, worktitleService) {
  $scope.fabric = {};
  $scope.loaded = 0; // number of images loaded
  $scope.FabricConstants = FabricConstants;
  $scope.maxHeight = 0;
  $scope.showCaption = true;
  $scope.caption = null;
  $scope.focusedImage = null;

  //lightbox_service.sayHi();

  // init(): bootstraps fabric to the canvas element
  // called on canvas::created event... see below
  $scope.init = function () {
    $scope.fabric = new Fabric({
      JSONExportProperties: FabricConstants.JSONExportProperties,
      textDefaults: FabricConstants.textDefaults,
      shapeDefaults: FabricConstants.shapeDefaults,
      json: {}
    });

    // Initial canvas size is the window size.
    $scope.fabric.setCanvasSize(window.innerWidth, window.innerHeight);

    // register event handlers...
    FabricCanvas.getCanvas().on('object:added', $scope.handleObjectAdded);
    FabricCanvas.getCanvas().on('object:selected', $scope.handleObjectSelected);
    FabricCanvas.getCanvas().on('mouse:up', $scope.handleCanvasClicked);
    FabricCanvas.getCanvas().on('mouse:over', $scope.handleMouseOver);
    FabricCanvas.getCanvas().on('mouse:out', $scope.handleMouseOut);
    $('#lb-crop-btn').on('click', $scope.cropButtonClicked);
    $('#lb-trash-btn').on('click', $scope.trashButtonClicked);
    $('#lb-info-btn').on('click', $scope.infoButtonClicked);
    $('#lb-save-btn').on('click', $scope.saveButtonClicked);
    $('#lb-load-btn').on('click', $scope.loadButtonClicked);
    $('#lb-clear-btn').on('click', $scope.clearButtonClicked);
    $('#lb-help').on('click', $scope.helpButtonClicked);
    $('#loadfile').on('change', $scope.loadFileSelected);

    // deal with cropping and cart changes ... we assume that the clients
    // browser supports localStorage (html5)
    window.addEventListener('storage', function (e) {
      //console.log("storage event!"+e.type+":"+e.key+":"+e.newValue+":"+e.storageArea);
      if (e.key == 'cart-item-added') {
        if (e.newValue != null) {
          // index of table row in newValue
          console.log('==== item was added to the cart!!! ==> ' + e.newValue);

          // === proves the new id is in the list
          lightbox_service.listCartItems().then(function (data) {
            var idx = 0;
            var cartLen = data.length;
            // get the last item
            var item = data[cartLen - 1];
            if (item) {
              //console.log(" === cart Item: "+JSON.stringify(item));
              $scope.addImageOnTheFly({
                imageIdx: 2,
                imageURL: item.url,
                imageCaption: item.title + ": " + item.caption
              });
            };
          });

          // === getting item by id does not work!!!! why?
          // lightbox_service.getCartItem(e.newValue).then(function(item){
          //   console.log(" === cart Item: "+JSON.stringify(item));
          // });
        }
      } else if (e.key == 'image-cropped-indicator') {
        if (e.newValue != e.oldValue) {
          console.log("An Image was cropped!");
          //$scope.addImage(e.newValue,400);
          //console.log("rootScope? "+$rootScope.croppedImage);

          lightbox_service.getCroppedImage().then(function (cropped) {
            //console.log('==== cropped item ==> '+JSON.stringify(cropped));
            $scope.addImageOnTheFly({
              imageIdx: 2,
              imageURL: cropped.url,
              imageCaption: cropped.fullCaption
            });
          });

          // TODO: discuss this: new method: add the cropped image to the cart??
          // it should be noted that the new value is no longer a dataUrl, instead
          // it is a cart item object with url, title, and caption....
          //CartStorageService.insert(JSON.parse(e.newValue));
        }
      }
    }, false);

    // for dev... may need to test if a load is required...
    // not required on re-entry (when lbox window is already opened)
    //$scope.loadFromCart();
    lightbox_service.listCartItems().then(function (data) {
      var idx = 0;
      var cartLen = data.length;
      data.forEach(function (item) {
        $scope.addImageMyWay({
          imageIdx: idx++,
          imageURL: item.url,
          imageCaption: item.title + ": " + item.caption,
          cartLen: cartLen
        });
      });
    });
  }; /// ===> End of $scope.init()

  // ===================================================================
  // Methods dealing with loading images into fabric from the cart
  // ===================================================================

  // ===============
  $scope.determineLoadingWidth = function (itemsCount, containerWidth) {
    var divisor = 4;
    if (itemsCount <= 4) divisor = itemsCount;
    if (divisor < 1) divisor = 1;
    return containerWidth / (divisor + 1);
  };

  // ===============
  // $scope.addImage = function(imgUrl, width){
  //   $scope.fabric.addImageScaledToWidth(imgUrl,width);
  // };

  // add images (from the cart) and place them just so....
  // ... rows of 5 images
  $scope.addImageMyWay = function (options) {
    var imageURL = options.imageURL;
    var sensibleWidth = Math.floor($scope.determineLoadingWidth(options.cartLen, window.innerWidth));

    fabric.Image.fromURL(imageURL, function (image) {
      var scale = sensibleWidth / image.width;
      var scaledHeight = image.height * scale;

      if (scaledHeight > $scope.maxHeight) {
        // the next row is governed as a multiple of the scaled max height
        $scope.maxHeight = scaledHeight;
      }
      var rowNum = Math.floor(options.imageIdx / 5);
      var colNum = options.imageIdx % 5;

      image.top = $scope.maxHeight * rowNum;
      image.left = sensibleWidth * colNum;
      image.scaleToWidth(sensibleWidth);
      image.lockUniScaling = true;

      image.alt = options.imageCaption;
      //console.log("image alt: "+JSON.stringify(image.alt));

      FabricCanvas.getCanvas().add(image.set({ alt: options.imageCaption }));
    });
  };
  $scope.addImageOnTheFly = function (options) {
    var imageURL = options.imageURL;
    var sensibleWidth = options.width || 200;

    fabric.Image.fromURL(imageURL, function (image) {
      sensibleWidth = window.innerWidth / 3.5;
      var scale = sensibleWidth / image.width;
      var scaledHeight = image.height * scale;

      if (scaledHeight > $scope.maxHeight) {
        // the next row is governed as a multiple of the scaled max height
        $scope.maxHeight = scaledHeight;
      }

      image.scaleToWidth(sensibleWidth);
      image.lockUniScaling = true;
      image.center();

      image.alt = options.imageCaption;
      //console.log("image alt: "+JSON.stringify(image.alt));

      FabricCanvas.getCanvas().add(image.set({ alt: options.imageCaption }));
    });
  };

  // ===================================================================
  // Event Handlers.
  // ===================================================================
  $scope.handleObjectAdded = function (evt) {};
  $scope.handleObjectSelected = function (evt) {
    // when an image is selected, we need to enable control buttons in the nav!
    var img = FabricCanvas.getCanvas().getActiveObject();
    //console.log("selected alt: "+JSON.stringify(img.alt));
    if (img != null) {
      //console.log("this was selected: "+evt.target);
      $scope.enableCropControls();
      // also bring the image to the front
      //console.log("bring the selected to the front!!!");
      img.bringToFront();
    }
  };
  $scope.handleCanvasClicked = function (evt) {
    // when an image is selected, we need to enable control buttons in the nav!
    if (FabricCanvas.getCanvas().getActiveObject() == null) {
      //console.log("canvas clicked, active object deselected!");
      $scope.disableCropControls();
    }
  };
  $scope.handleMouseOver = function (evt) {
    var t = evt.target;
    if (t instanceof fabric.Image) {
      //console.log("Moused over image: "+t.alt);
      $scope.focusedImage = t;
      document.getElementById('caption').innerHTML = t.alt;
      document.getElementById('caption').style.display = 'block';
    }
  };
  $scope.handleMouseOut = function (evt) {
    if (evt.target instanceof fabric.Image) {
      //console.log("Moused out image: "+evt.target.alt);
      $scope.focusedImage = null;
      document.getElementById('caption').style.display = 'none';
    }
  };
  // disable/enable cropping controls is a matter of bootstrap css classing...
  $scope.disableCropControls = function () {
    $('#lb-crop-btn').addClass("disabled");
    $('#lb-trash-btn').addClass("disabled");
  };
  $scope.enableCropControls = function () {
    $('#lb-crop-btn').removeClass("disabled");
    $('#lb-trash-btn').removeClass("disabled");
  };
  $scope.cropButtonClicked = function () {
    // assumes activeObject is not null, could not click cropButton if that were the case!
    var ao = FabricCanvas.getCanvas().getActiveObject();

    //window.localStorage.setItem("cropper-image-to-crop", ao.getSrc());
    //window.localStorage.setItem("cropper-image-to-crop-info", ao.alt);
    lightbox_service.setImageToCrop({
      "url": ao.getSrc(),
      "fullCaption": ao.alt
    });
    //console.log("So, you want to crop this: "+imgName);

    // parameter no longer required... setting it to 1
    window.open("/cropper/crop", '_blank', "toolbar=no,scrollbars=yes,resizable=yes,width=1200,height=800");
  };
  $scope.trashButtonClicked = function () {
    //console.log("So, you want to remove this: "+FabricCanvas.getCanvas().getActiveObject());
    FabricCanvas.getCanvas().getActiveObject().remove();
    // TODO: consider removing the image from the cart?
    $scope.disableCropControls();
  };
  $scope.infoButtonClicked = function () {
    //console.log("So, you want to toggle captions....");
    $scope.showCaption = !$scope.showCaption;
    //FabricCanvas.getCanvas().renderAll();
    $('#erdmanBody').focus();
  };
  $scope.helpButtonClicked = function () {

    var helpModalInstance = $modal.open({
      templateUrl: '/static/html/help-lightbox.html',
      controller: 'ModalController'
      //size: 'sm'
    });
  };

  $scope.saveButtonClicked = function () {
    // we want to stream the data out as a download (text/json)
    // here's some js shenanigans I found...
    var dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(FabricCanvas.getCanvas().toDatalessJSON(['alt'])));
    var dlAnchorElem = document.getElementById('saver');
    dlAnchorElem.setAttribute("href", dataStr);
    dlAnchorElem.setAttribute("download", "lightbox.json");
    dlAnchorElem.click();
  };
  $scope.loadButtonClicked = function () {
    // there is a hidden <input type=file on the page... we click it to
    // pull up a file dialog
    $('#loadfile').click();
    // once a file is selected, it triggers 'loadFileSelected()' below...
  };
  $scope.loadFileSelected = function (evt) {
    var file = document.getElementById('loadfile').files[0];
    console.log("load file: " + file.name);
    var reader = new FileReader();
    reader.addEventListener("load", function () {
      console.log("file was read by the reader: " + reader.result);
      var canvas = FabricCanvas.getCanvas();
      FabricCanvas.getCanvas().loadFromJSON(reader.result, canvas.renderAll.bind(canvas), function (o, object) {
        object.lockUniScaling = true;
      });
    }, false);

    if (file) {
      reader.readAsText(file);
    }
  };

  // ===============> End of Event Handlers


  // ================================================================
  // Editing Canvas Size
  // ================================================================
  $scope.selectCanvas = function () {
    $scope.canvasCopy = {
      width: $scope.fabric.canvasOriginalWidth,
      height: $scope.fabric.canvasOriginalHeight
    };
  };

  $scope.setCanvasSize = function () {
    $scope.fabric.setCanvasSize($scope.canvasCopy.width, $scope.canvasCopy.height);
    $scope.fabric.setDirty(true);
    Modal.close();
    delete $scope.canvasCopy;
  };

  $scope.updateCanvas = function () {
    var json = $scope.fabric.getJSON();

    $www.put('/api/canvas/' + $scope.canvasId, {
      json: json
    }).success(function () {
      $scope.fabric.setDirty(false);
    });
  };

  $scope.$on('canvas:created', $scope.init);
}]);

/***/ }),
/* 53 */
/***/ (function(module, exports) {

angular.module('blake').controller('ModalController', ["$scope", "$modalInstance", function ($scope, $modalInstance) {
    $scope.close = function () {
        $modalInstance.close();
    };
}]);

/***/ }),
/* 54 */
/***/ (function(module, exports) {

angular.module('blake').controller('SearchController', ["$rootScope", "$routeParams", "SearchService", function ($rootScope, $routeParams, SearchService) {
    let vm = this;

    vm.s = SearchService;
    vm.rp = $routeParams;

    $rootScope.worksNavState = false;
    $rootScope.showWorkTitle = false;

    vm.s.isSafari = navigator.userAgent.search("Safari") >= 0 && navigator.userAgent.search("Chrome") < 0;
    //console.log(isSafari);

    $rootScope.$on("$routeChangeSuccess", function () {
        if (vm.rp.search) {
            vm.s.searchConfig.searchString = vm.rp.search;

            vm.s.removeStopWords();

            vm.rp.search = vm.s.searchConfig.searchString;

            vm.s.search();
        }
    });
}]);

/***/ }),
/* 55 */
/***/ (function(module, exports) {

angular.module('blake').controller('ShowMeController', ["$rootScope", "$routeParams", "$modal", "$cookies", "BlakeDataService", "$scope", function ($rootScope, $routeParams, $modal, $cookies, BlakeDataService, $scope) {
    var vm = this;
    vm.bds = BlakeDataService;

    $rootScope.showmePage = true;
    $scope.dpi = $rootScope.dpivalue;

    vm.what = $routeParams.what;
    $rootScope.showmeType = $routeParams.what;

    BlakeDataService.setSelectedCopy($routeParams.copyId, $routeParams.descId);

    $scope.$watch(function () {
        return $rootScope.dpivalue;
    }, function () {

        if ($rootScope.dpivalue == '300') {
            $scope.dpi = "300";
        } else {
            $scope.dpi = "100";
        }
    }, true);

    vm.getOvpTitle = function () {
        if (angular.isDefined(vm.bds.copy)) {
            if (vm.bds.work.virtual == true) {
                if (vm.bds.copy.bad_id == 'letters') {
                    return vm.bds.object.object_group;
                } else {
                    return vm.bds.work.title;
                }
            } else {
                var copyPhrase = vm.bds.copy.archive_copy_id == null ? '' : ' Copy ' + vm.bds.copy.archive_copy_id;

                if (vm.bds.copy.header) {
                    title = vm.bds.copy.header.filedesc.titlestmt.title['@reg'];
                    if (title.match(/.*, The/)) {
                        title = "The " + title.match(/(.*), The/)[1];
                    }
                    copyPhrase = title + copyPhrase;
                }

                return copyPhrase;
            }
        }
    };

    vm.getPreviousObject = function () {

        var list = [];

        if (vm.bds.work.bad_id == 'letters') {
            vm.bds.copyObjects.forEach(function (obj) {
                if (obj.object_group == vm.bds.object.object_group) {
                    list.push(obj);
                }
            });
        } else {
            list = vm.bds.copyObjects;
        }

        var obj_desc_id = vm.bds.object.supplemental ? vm.bds.object.supplemental : vm.bds.object.desc_id;

        if (list) {
            for (var i = list.length; i--;) {
                if (list[i].desc_id == obj_desc_id) {
                    if (list[i - 1]) {
                        return list[i - 1];
                    } else {
                        return false;
                    }
                }
            }
        }
    };

    vm.getNextObject = function () {

        var list = [];

        if (vm.bds.work.bad_id == 'letters') {
            vm.bds.copyObjects.forEach(function (obj) {
                if (obj.object_group == vm.bds.object.object_group) {
                    list.push(obj);
                }
            });
        } else {
            list = vm.bds.copyObjects;
        }

        var obj_desc_id = vm.bds.object.supplemental ? vm.bds.object.supplemental : vm.bds.object.desc_id;

        if (list) {
            for (var i = list.length; i--;) {
                if (list[i].desc_id == obj_desc_id) {
                    if (list[i + 1]) {
                        return list[i + 1];
                    } else {
                        return false;
                    }
                }
            }
        }
    };

    vm.changeObject = function (object) {
        vm.bds.changeObject(object);
    };

    vm.trueSize = function () {
        if (angular.isDefined($cookies.getObject('clientPpi')) && angular.isDefined(vm.bds.copy)) {
            var size = vm.bds.object.physical_description.objsize['#text'].split(' '),
                clientPpi = $cookies.getObject('clientPpi'),
                x = size[2],
                y = size[0],
                unit = size[3],
                width = x / 2.54 * clientPpi.ppi,
                height = y / 2.54 * clientPpi.ppi;
            //console.log('x='+x+'  y='+y+'  unit='+unit+'  ppi='+clientPpi.ppi);
            if (unit == 'mm.') {
                width = width * 10;
                height = height * 10;
            }

            return { 'height': height + 'px', 'width': width + 'px' };
        }
    };

    vm.clientPpiOpen = function () {
        var clientDpiModalInstance = $modal.open({
            template: '<client-ppi></client-ppi>',
            controller: 'ModalController',
            size: 'lg'
        });
    };
}]);

/***/ }),
/* 56 */
/***/ (function(module, exports) {

angular.module('blake').controller('StaticpageController', ["$scope", "$rootScope", "$routeParams", "$http", "$location", function ($scope, $rootScope, $routeParams, $http, $location) {
    var vm = this;

    $rootScope.worksNavState = false;
    $rootScope.showWorkTitle = 'static';
    $rootScope.help = 'static';

    vm.page = $routeParams.initialPage;
    vm.subSelection = 'empty';

    $http.get('/static/controllers/staticpage/meta.json').then(function (response) {
        let data = response.data;
        vm.meta = data;
        vm.title = data[vm.page].title;
        $rootScope.staticPageTitle = vm.title;
        if ($location.search().p) {
            vm.subSelection = $location.search().p;
            //console.log($location.search().p);
        } else {
            vm.subSelection = data[vm.page].initial;
        }
        vm.navigation = data[vm.page].subSections;
    });

    vm.changeContent = function (page) {
        vm.subSelection = page;
        $location.search('p', page);
    };
}]);

/***/ }),
/* 57 */
/***/ (function(module, exports) {

angular.module('blake').controller("WorkController", ["$rootScope", "$routeParams", "BlakeDataService", function ($rootScope, $routeParams, BlakeDataService) {
    var vm = this;

    vm.bds = BlakeDataService;

    $rootScope.showOverlay = false;
    $rootScope.help = 'work';

    vm.bds.setSelectedWork($routeParams.workId);

    $rootScope.worksNavState = false;
    $rootScope.showWorkTitle = 'work';
}]);

/***/ }),
/* 58 */
/***/ (function(module, exports) {

angular.module("blake").directive('affix', ["$window", function ($window) {
    var link = function (scope, element, attr) {
        var w = angular.element($window),
            elementOffsetTop = element[0].getBoundingClientRect().top,
            offsetTop = angular.isDefined(attr.offsetTop) ? attr.offsetTop : 0,
            offsetStart = angular.isDefined(attr.offsetStart) ? parseInt(attr.offsetStart) : 0,
            offsetBottom = angular.isDefined(attr.offsetBottom) ? parseInt(attr.offsetBottom) : 0,
            minWidth = angular.isDefined(attr.minWidth) ? parseInt(attr.minWidth) : 0;

        function affixElement() {

            var elementHeight = angular.element(element).height();
            var pageHeight = document.body.scrollHeight;
            var doNotPass = pageHeight - offsetBottom;

            if (offsetBottom !== 0 && $window.pageYOffset + elementHeight >= doNotPass && pageHeight - offsetBottom > elementHeight) {
                element.css('position', 'absolute');
                element.css('top', '');
                element.css('bottom', '50px');
            } else if ($window.pageYOffset > elementOffsetTop + offsetStart && pageHeight - offsetBottom > elementHeight) {
                element.css('position', 'fixed');
                element.css('top', offsetTop + 'px');
                element.css('bottom', '');
            } else {
                element.css('position', '');
                element.css('top', '');
                element.css('bottom', '');
                width = element[0].clientWidth;
            }
        }

        function resetWidth() {
            if ($window.pageYOffset > elementOffsetTop + offsetStart) {
                element.css('position', '');
                element.css('top', '');
                element.css('bottom', '');
                //element.css('width','100%');
                //width = element[0].clientWidth;
                affixElement();
            }
        }

        scope.$on('resize::resize', function () {
            resetWidth();
        });

        w.bind('scroll', affixElement);
    };

    return {
        restrict: 'A',
        link: link
    };
}]);

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("AllKnownCopiesController", function () {
    const vm = this;

    vm.getInfo = function (info) {
        return info.split('<br />');
    };
});

angular.module('blake').directive('allKnownCopies', function () {
    return {
        restrict: 'E',
        template: __webpack_require__(170),
        controller: "AllKnownCopiesController",
        controllerAs: 'akc',
        replace: true,
        bindToController: true,
        scope: {
            work: '=work'
        }
    };
});

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("AllKnownRelatedItemsController", function () {
    const vm = this;

    vm.getInfo = function (info) {
        return info.split('<br />');
    };
});

angular.module('blake').directive('allKnownRelatedItems', function () {
    return {
        restrict: 'E',
        template: __webpack_require__(171),
        controller: "AllKnownRelatedItemsController",
        controllerAs: 'akri',
        replace: true,
        bindToController: true,
        scope: {
            work: '=work'
        }
    };
});

/***/ }),
/* 61 */
/***/ (function(module, exports) {

angular.module("blake").directive('autoHeight', ["WindowSize", "$rootScope", function (WindowSize, $rootScope) {
    let link = function (scope, element, attrs) {
        let adjust = scope.$eval(attrs.adjust),
            breakpoint = scope.$eval(attrs.breakpoint),
            divide = scope.$eval(attrs.divide);

        function setStyles(windowSize) {
            if (windowSize.width < breakpoint) {
                element.height('auto');
            } else {
                let newHeight = windowSize.height - adjust;
                if (divide) {
                    newHeight = newHeight / divide;
                }
                //console.log("setting height: " + newHeight);
                element.height(newHeight);
            }
        }

        setStyles(WindowSize);

        $rootScope.$on('resize::resize', function (e, w) {
            setStyles(w);
        });
    };
    return {
        restrict: 'A',
        link: link
    };
}]);

/***/ }),
/* 62 */
/***/ (function(module, exports) {

angular.module("blake").directive('autoWidth', ["WindowSize", "$rootScope", function (WindowSize, $rootScope) {
    let link = function (scope, element, attrs) {

        let adjust = scope.$eval(attrs.adjust),
            breakpoint = scope.$eval(attrs.breakpoint),
            divide = scope.$eval(attrs.divide),
            percent = scope.$eval(attrs.percent);

        scope.setStyles = function (windowSize) {
            if (windowSize.width < breakpoint) {
                element.width('');
            } else {
                let newWidth = windowSize.width - adjust;
                if (percent) {
                    newWidth = newWidth * percent;
                }
                if (divide) {
                    newWidth = newWidth / divide;
                }
                element.width(newWidth);
            }
        };

        scope.setStyles(WindowSize);

        scope.$watch(_ => WindowSize.width, function (e, w) {
            scope.setStyles(w);
        });
    };

    return {
        restrict: 'A',
        link: link
    };
}]);

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("BlakeMenuController", ["$scope", "$rootScope", "lightbox_service", function ($scope, $rootScope, lightbox_service) {
  let vm = this;
  vm.rs = $rootScope;
  //$rootScope.cartItems = CartStorageService.cartItems;
  lightbox_service.listCartItems().then(function (data) {
    vm.rs.cartItems = data;
    //console.log("===== "+JSON.stringify($rootScope.cartItems));
  });

  $('#clear-cart-link').on('click', function (evt) {
    //CartStorageService.clearCart();
    lightbox_service.clearCart();
    lightbox_service.listCartItems().then(function (data) {
      vm.rs.cartItems = data;
    });
  });
}]);

angular.module("blake").directive('blakeMenu', function () {
  return {
    restrict: 'E',
    template: __webpack_require__(172),
    controller: "BlakeMenuController",
    controllerAs: "bm"
  };
});

/*
'Add to Cart' button on copies will add to the storage service (local storage).

hovering over the cart basket will pop up some options for removing specific of all cart items
also should have an option to 'go' to the lightbox window (clicking the basket will also go to
the lightbox window).

The badge in the basket is bound to the count of items in $rootScope.cartItems (which is
bound to the cartItems in the service).
*/

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller('ClientPPIController', ["$http", "$rootScope", "$cookies", function ($http, $rootScope, $cookies) {

    var vm = this;

    vm.common = {
        'resolutions': [{ 'x': 1920, 'y': 1080 }, { 'x': 1680, 'y': 1050 }, { 'x': 1440, 'y': 900 }, { 'x': 1366, 'y': 768 }, { 'x': 1280, 'y': 800 }, { 'x': 1386, 'y': 768 }, { 'x': 1024, 'y': 768 }, { 'x': 800, 'y': 600 }],
        'diagonals': [7, 11.6, 13.3, 14, 15.6, 17.3, 21, 27]
    };

    vm.screens = [];

    vm.calculatePpi = function () {
        var x = vm.config.x,
            y = vm.config.y,
            d = vm.config.d;
        // Calculate PPI/DPI
        var dpi = Math.sqrt(x * x + y * y) / d;
        return dpi > 0 ? Math.round(dpi) : 0;
    };

    if (angular.isDefined($cookies.getObject('clientPpi'))) {
        vm.config = $cookies.getObject('clientPpi');
    } else {
        vm.config = {
            'x': 1680,
            'y': 1050,
            'd': 13.3,
            'ppi': 0
        };
    }

    vm.testLine = {
        'background-color': 'red',
        'height': '5px',
        'width': vm.calculatePpi() + 'px'
    };

    vm.updateConfig = function (x, y, d) {
        vm.config.x = x > 0 ? x : vm.config.x;
        vm.config.y = y > 0 ? y : vm.config.y;
        vm.config.d = d > 0 ? d : vm.config.d;
        vm.testLine.width = vm.calculatePpi() + 'px';
    };

    vm.savePpi = function () {
        vm.config.ppi = vm.calculatePpi();
        $cookies.putObject('clientPpi', vm.config);
        $rootScope.$broadcast('clientPpi::savedPpi');
    };

    $http.get('/static/directives/client-ppi/screens.json').then(function (response) {
        vm.screens = response.data;
    });

    vm.screenQuery = '';
}]).directive('clientPpi', function () {
    return {
        restrict: 'EA',
        template: __webpack_require__(173),
        controller: "ClientPPIController",
        controllerAs: 'ppi',
        bindToController: true
    };
});

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

angular.module('blake').directive('copyInfoDl', function () {
    return {
        restrict: 'EA',
        template: __webpack_require__(174),
        controller: function () {
            var vm = this;
        },
        scope: {
            infoObject: '=',
            dt: '@',
            highlight: '@'
        },
        controllerAs: 'dl',
        bindToController: true
    };
});

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

angular.module('blake').controller("CopyInformationController", function () {
    let vm = this;

    vm.getHeader = function () {
        if (vm.copy) {
            if (vm.copy.virtual) {
                return vm.object.header;
            } else {
                return vm.copy.header;
            }
        }
    };

    vm.getSource = function () {
        if (vm.copy) {
            if (vm.copy.virtual) {
                return vm.object.source;
            } else {
                return vm.copy.source;
            }
        }
    };

    vm.getOrigination = function () {
        let origination = typeof vm.getSource() !== "undefined" ? vm.getSource().objdescid.origination : '';
        if (Array.isArray(origination)) {
            return origination;
        } else {
            return [origination];
        }
    };

    vm.getOriginationRole = function (role) {
        if (role) {
            if (role.join) {
                let roleText = [];
                role.forEach(function (role) {
                    roleText.push(role['#text']);
                });
                return roleText.join(' ');
            } else {
                return role['#text'];
            }
        }
    };
});

angular.module('blake').directive("copyInformation", function () {
    return {
        restrict: 'E',
        template: __webpack_require__(175),
        controller: "CopyInformationController",
        controllerAs: 'info',
        scope: {
            highlight: '@highlight',
            copy: '=copy',
            object: '=object'
        },
        bindToController: true
    };
});

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

angular.module('blake').controller("CopyTabsController", ["$rootScope", "BlakeDataService", function ($rootScope, BlakeDataService) {

    var vm = this;

    vm.bds = BlakeDataService;

    vm.selectedTab = '#objects-in-copy';

    vm.showTab = function (id) {
        vm.selectedTab = id;
        $rootScope.selectedTab = id;
    };

    vm.getCopyOrWork = function () {
        if (angular.isDefined(vm.bds.copy)) {
            if (vm.bds.work.virtual) {
                if (vm.bds.work.bad_id == 'letters') {
                    return 'Letter';
                } else {
                    return 'Object';
                }
            } else if (vm.bds.copy.archive_set_id != null) {
                return 'Set';
            } else {
                return 'Copy';
            }
        }
    };

    vm.getCopyOrGroup = function () {
        if (angular.isDefined(vm.bds.copy)) {
            if (vm.bds.work.medium == 'exhibit') return 'Exhibit';
            if (vm.bds.work.virtual) {
                if (vm.bds.work.bad_id == 'letters') {
                    return 'Letter';
                } else {
                    return 'Group';
                }
            } else if (vm.bds.copy.archive_set_id != null) {
                return 'Set';
            } else {
                return 'Copy';
            }
        }
    };

    vm.changeObject = function (object) {
        vm.bds.changeObject(object);
        $rootScope.view.mode = 'object';
        $rootScope.view.scope = 'image';
    };
}]);

angular.module('blake').directive('copyTabs', function () {
    let link = function (scope, ele, attr, vm) {
        let object = function () {
            return vm.bds.object;
        };
        scope.$watch(object, function () {
            vm.selectedTab = '#objects-in-copy';
        }, true);
    };

    return {
        restrict: 'E',
        template: __webpack_require__(176),
        controller: "CopyTabsController",
        controllerAs: 'tabs',
        bindToController: true,
        link: link
    };
});

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

/* DELETE ME, no longer used...
  or possibly, refacter cropper controller into this
  in either case, the controller code below is out of date!!!
*/
angular.module("blake").controller("CropperControllerEx", ["$rootScope", "$modal", "BlakeDataService", "$scope", "Fabric", "FabricCanvas", "FabricConstants", "Cropper", function ($rootScope, $modal, BlakeDataService, $scope, Fabric, FabricCanvas, FabricConstants, Cropper) {
  // use the fabric canvas service to get the active object...
  $scope.imageToCrop = FabricCanvas.getCanvas().getActiveObject().getSrc();

  var data;
  $scope.cropper = {};

  $scope.options = {
    maximize: true,
    aspectRatio: 2 / 1,
    crop: function (dataNew) {
      data = dataNew;
    }
  };

  $scope.showEvent = 'show';
  $scope.hideEvent = 'hide';
  function showCropper() {
    $scope.$broadcast($scope.showEvent);
  }
  function hideCropper() {
    $scope.$broadcast($scope.hideEvent);
  }
}]);

angular.module('blake').directive("cropper", function () {
  return {
    restrict: 'E',
    transclude: true,
    template: __webpack_require__(177),
    controller: "CropperController",
    controllerAs: 'cc',
    bindToController: true
  };
});

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

angular.module('blake').controller("DpiController", ["$rootScope", function ($rootScope) {
    var vm = this;

    if (!angular.isDefined($rootScope.dpivalue)) {
        $rootScope.dpivalue = '100';
    }

    vm.reloadWith100or300 = function (dpiValue) {
        $rootScope.dpivalue = dpiValue;
    };
}]);

angular.module("blake").directive("dpi", function () {
    return {
        restrict: 'E',
        scope: true,
        template: __webpack_require__(178),
        controller: "DpiController",
        controllerAs: 'dpi',
        bindToController: true
    };
});

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

angular.module('blake').controller("EditorNotesController", ["$routeParams", function ($routeParams) {
    var vm = this;
    //console.log(vm.object.object_note_images);
    vm.objectNotes = function () {
        if (angular.isDefined(vm.object) && angular.isDefined(vm.object.notes)) {
            return vm.object.notes.filter(function (o) {
                return o.type == "desc";
            }).length > 0;
        }
    };
    vm.objectNoteImages = function () {
        if (angular.isDefined(vm.object) && angular.isDefined(vm.object.object_note_images)) {
            //console.log(vm.object.object_note_images)
            return vm.object.object_note_images.filter(function (o) {
                return o.type == "text";
            }).length > 0;
        }
    };
    vm.textNotes = function () {
        if (angular.isDefined(vm.object) && angular.isDefined(vm.object.notes)) {
            return vm.object.notes.filter(function (o) {
                return o.type == "text";
            }).length > 0;
        }
    };
}]);

angular.module('blake').directive('editorNotes', function () {
    return {
        restrict: 'EA',
        template: __webpack_require__(179),
        controller: "EditorNotesController",
        scope: {
            object: '=object',
            highlight: '@highlight'
        },
        controllerAs: 'noteCtrl',
        bindToController: true
    };
});

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("ElectronicEditionInfoTabController", ["BlakeDataService", function (BlakeDataService) {
    let vm = this;
    vm.bds = BlakeDataService;
}]);

angular.module("blake").component("electronicEditionInfoTab", {
    template: __webpack_require__(180),
    controller: "ElectronicEditionInfoTabController",
    controllerAs: "info"
});

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("HandprintBlockController", function () {
    var vm = this;
    //This can be removed once all images have the same path
    switch (vm.workId) {
        case 'biblicalwc':
        case 'biblicaltemperas':
        //case 'but543':
        case 'letters':
        case 'pid':
        case 'gravepd':
        case 'gravewc':
        case 'gravewd':
        case 'cpd':
        case 'allegropenseroso':
        case 'pencil1':
        case 'miltons':
            vm.imagePath = '/static/img/virtualworks/';
            break;
        default:
            vm.imagePath = '/images/';
            break;
    }
});

angular.module('blake').directive('handprintBlock', function () {
    return {
        restrict: 'E',
        template: __webpack_require__(181),
        controller: "HandprintBlockController",
        scope: {
            header: '@header',
            footer: '@footer',
            image: '@image',
            link: '@link',
            title: '@title',
            action: '&action',
            workId: '@workId',
            textmatchstrings: '@textmatchstrings'
        },
        controllerAs: 'handprint',
        bindToController: true
    };
});

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

angular.module('blake').controller("IllustrationDescriptionController", ["$routeParams", function ($routeParams) {
    var vm = this;
}]);

angular.module('blake').directive('illustrationDescription', function () {
    return {
        restrict: 'EA',
        template: __webpack_require__(182),
        controller: "IllustrationDescriptionController",
        scope: {
            object: '=object',
            highlight: '@highlight',
            keywords: '@keywords'
        },
        controllerAs: 'descCtrl',
        bindToController: true
    };
});

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("ImageTagsController", ["$rootScope", "$modal", "$templateCache", "BlakeDataService", function ($rootScope, $modal, $templateCache, BlakeDataService) {
    var vm = this;

    vm.bds = BlakeDataService;

    vm.imageTagsOpen = function () {
        var imageTagsModalInstance = $modal.open({
            templateUrl: '/static/html/newsearch.html',
            controller: 'ModalController',
            size: 'lg'
        });
    };
}]);

angular.module('blake').directive("imageTags", function () {
    return {
        restrict: 'E',
        template: __webpack_require__(183),
        controller: "ImageTagsController",
        controllerAs: 'imagetags',
        bindToController: true
    };
});

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("InfoTrayController", ["$rootScope", "$scope", "BlakeDataService", "WindowSize", "$window", function ($rootScope, $scope, BlakeDataService, WindowSize, $window) {
    var vm = this;
    vm.bds = BlakeDataService;
    vm.view = $rootScope.view;

    vm.firstLine = 1;
    vm.panelAdjust = 55;
    vm.scrollBarHeight = 15;
    vm.adjustHeight = 136;

    vm.open = {
        'text': false,
        'desc': false,
        'notes': false,
        'meta': false,
        'tei': false
    };

    vm.resize = function (adjust) {
        //console.log('adjust before:' + adjust);
        if (vm.view.mode == 'compare' && !angular.isDefined(adjust)) {
            adjust = 50;
        }
        var adjust = angular.isDefined(adjust) ? vm.adjustHeight - adjust : vm.adjustHeight;
        //console.log('adjust after:' + adjust);
        vm.trayPixels = WindowSize.height - adjust;
        //console.log('trayPixels:' + vm.trayPixels);
        if (WindowSize.width <= 992) {
            vm.trayHeight = 0;
        } else {
            vm.trayHeight = vm.trayPixels + 'px';
        }
        //console.log('trayHeight:' + vm.trayHeight);
        vm.panelCount = 3;
        vm.trayBodyHeight = vm.trayPixels - vm.scrollBarHeight - vm.panelCount * vm.panelAdjust + 'px';
    };

    vm.resize();

    vm.newWindow = function (object, type) {
        $window.open('/new-window/' + type + '/' + object.copy_bad_id + '?descId=' + object.desc_id, '_blank', 'width=800, height=600');
    };

    $scope.$on('resize::resize', function (event, window) {
        vm.resize();
    });

    $scope.$on('copyCtrl::toggleTools', function (e, tools) {
        if (tools) {
            vm.resize();
        } else {
            vm.resize(-47);
        }
    });
}]);

angular.module('blake').directive("infoTray", function () {
    let link = function (scope, ele, attr, vm) {
        var mode = function () {
            return vm.view.mode;
        };
        scope.$watch(mode, function () {
            var adjust = vm.view.mode == 'object' ? 0 : 50;
            vm.resize(adjust);
        });
    };

    return {
        restrict: 'E',
        scope: {
            toggle: '&'
        },
        template: __webpack_require__(184),
        controller: "InfoTrayController",
        controllerAs: 'tray',
        bindToController: true,
        link: link
    };
});

/***/ }),
/* 76 */
/***/ (function(module, exports) {

angular.module("blake").directive('leftOnBroadcast', ["$timeout", "$rootScope", function ($timeout, $rootScope) {
    var link = function (scope, element, attr) {
        if (attr.leftOnBroadcast) {
            scope.$on(attr.leftOnBroadcast, function ($event, $data) {
                if ($data.target && $rootScope.doneSettingCopy) {
                    $timeout(function () {
                        console.log(element);
                        console.log($data.target);
                        console.log(find($data.target)[0]);
                        var offset = $(element).find($data.target)[0].offsetLeft;
                        $(element).animate({ scrollLeft: offset }, 'fast');
                    }, 300);
                }
            });
        }
    };

    return {
        restrict: 'A',
        link: link
    };
}]);

/***/ }),
/* 77 */
/***/ (function(module, exports) {

angular.module("blake").directive('magnifyImage', ["$interval", "$window", "$rootScope", "imageManipulation", "BlakeDataService", function ($interval, $window, $rootScope, imageManipulation, BlakeDataService) {
    let link = function (scope, ele, attr, vm) {
        if ($rootScope.zoom) {}
        let native_width = 0;
        let native_height = 0;
        let mouse = { x: 0, y: 0 };

        let magnify = function (e) {
            let newX, newY, rx, ry, bg_pos, glass_left, glass_top;
            // The background position of div.glass will be
            // changed according to the position
            // of the mouse over the img.magniflier
            //
            // So we will get the ratio of the pixel
            // under the mouse with respect
            // to the image and use that to position the
            // large image inside the magnifying glass

            if (imageManipulation.transform.orientation == 4) {
                newY = cur_img.width() - mouse.y;
                rx = Math.round(newY / cur_img.width() * native_width - ui.glass.width() / 2) * -1;
                ry = Math.round(mouse.x / cur_img.height() * native_height - ui.glass.height() / 2) * -1;
            }

            if (imageManipulation.transform.orientation == 3) {
                newY = cur_img.height() - mouse.y;
                newX = cur_img.width() - mouse.x;
                rx = Math.round(newX / cur_img.width() * native_width - ui.glass.width() / 2) * -1;
                ry = Math.round(newY / cur_img.height() * native_height - ui.glass.height() / 2) * -1;
            }
            if (imageManipulation.transform.orientation == 2) {
                newX = cur_img.height() - mouse.x;
                rx = Math.round(mouse.y / cur_img.width() * native_width - ui.glass.width() / 2) * -1;
                ry = Math.round(newX / cur_img.height() * native_height - ui.glass.height() / 2) * -1;
            }

            if (imageManipulation.transform.orientation == 1) {
                rx = Math.round(mouse.x / cur_img.width() * native_width - ui.glass.width() / 2) * -1;
                ry = Math.round(mouse.y / cur_img.height() * native_height - ui.glass.height() / 2) * -1;
            }

            bg_pos = rx + "px " + ry + "px";

            // Calculate pos for magnifying glass
            //
            // Easy Logic: Deduct half of width/height
            // from mouse pos.

            glass_left = e.pageX - ui.glass.width() / 2;
            glass_top = e.pageY - ui.glass.height() / 2;

            // Now, if you hover on the image, you should
            // see the magnifying glass in action
            ui.glass.css({
                left: glass_left,
                top: glass_top,
                backgroundPosition: bg_pos
            });
        };

        let cur_img;

        let ui = {
            magnifier: ele
        };

        // Add the magnifying glass
        if (ui.magnifier.length) {
            let div = document.createElement('div');
            div.setAttribute('class', 'glass');
            ui.glass = angular.element(div);

            angular.element(document.body).append(div);
        }

        let mouseMove = function (e) {

            // Container offset relative to document
            let checkWidth,
                checkHeight,
                magnify_offset = cur_img.offset();

            // Mouse position relative to container
            // pageX/pageY - container's offsetLeft/offetTop
            if (imageManipulation.transform.rotate % 180 != 0) {
                checkHeight = cur_img.width();
                checkWidth = cur_img.height();
            } else {
                checkHeight = cur_img.height();
                checkWidth = cur_img.width();
            }
            mouse.x = e.pageX - magnify_offset.left;
            mouse.y = e.pageY - magnify_offset.top;

            // The Magnifying glass should only show up when the mouse is inside
            // It is important to note that attaching mouseout and then hiding
            // the glass wont work cuz mouse will never be out due to the glass
            // being inside the parent and having a higher z-index (positioned above)
            if (mouse.x < checkWidth && mouse.y < checkHeight && mouse.x > 0 && mouse.y > 0) {
                magnify(e);
            } else {
                ui.glass.removeClass('glass-on');
            }
        };

        ele.on('mousemove', function () {
            if ($rootScope.zoom) {

                cur_img = angular.element(this);

                let src = cur_img.attr('src');
                src = src.replace('100', '300');

                if (src) {
                    ui.glass.css({
                        'background-image': 'url(' + src + ')',
                        'background-repeat': 'no-repeat'
                    });
                }

                // When the user hovers on the image, the script will first calculate
                // the native dimensions if they don't exist. Only after the native dimensions
                // are available, the script will show the zoomed version.
                if (!cur_img.data('native_width')) {
                    // This will create a new image object with the same image as that in .small
                    // We cannot directly get the dimensions from .small because of the
                    // width specified to 200px in the html. To get the actual dimensions we have
                    // created this image object.
                    let image_object = new Image();

                    image_object.onload = function () {
                        // This code is wrapped in the .load function which is important.
                        // width and height of the object would return 0 if accessed before
                        // the image gets loaded.
                        native_width = image_object.width;
                        native_height = image_object.height;

                        cur_img.data('native_width', native_width);
                        cur_img.data('native_height', native_height);

                        ui.glass.addClass('glass-on');

                        mouseMove.apply(this, arguments);

                        ui.glass.on('mousemove', mouseMove);
                    };

                    image_object.src = src;

                    return;
                } else {

                    native_width = cur_img.data('native_width');
                    native_height = cur_img.data('native_height');
                }

                ui.glass.addClass('glass-on');

                mouseMove.apply(this, arguments);

                ui.glass.on('mousemove', mouseMove);
            }
        });

        ui.glass.on('mouseout', function () {
            ui.glass.off('mousemove', mouseMove);
        });

        scope.$watch(function () {
            return imageManipulation.transform;
        }, function () {
            ui.glass.css(imageManipulation.transform.style);
        }, true);

        scope.$watch(function () {
            return $rootScope.zoom;
        }, function () {
            if (!$rootScope.zoom) {
                ui.glass.removeClass('glass-on');
            }
        }, true);

        scope.$watch(function () {
            return BlakeDataService.object;
        }, function () {
            if (angular.isDefined(cur_img)) {
                cur_img.data('native_width', false);
                cur_img.data('native_height', false);
            }
        }, true);
    };

    return {
        restrict: 'A',
        link: link
    };
}]);

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("navMenu", ["$scope", "BlakeDataService", "$sessionStorage", function ($scope, BlakeDataService, $sessionStorage) {
    var vm = this;

    $('nav.navbar ul.navbar-nav > li.dropdown').click(function () {
        var viewport_width = $(window).width();
        var element_position = $(this).offset().left;

        $(this).find('ul.dropdown-menu').css({ 'width': viewport_width + 'px', 'left': '-' + element_position + 'px' });
    });
    if (angular.isUndefined($sessionStorage.menus) && angular.isUndefined($sessionStorage.allWorksAlpha) && angular.isUndefined($sessionStorage.allWorksCompDateValue)) {
        BlakeDataService.getWorks().then(function (data) {
            vm.organizeMenus(data);
        });
        BlakeDataService.getWorks().then(function (data2) {
            vm.alphabetizeAll(data2);
        });
        BlakeDataService.getWorks().then(function (data3) {
            vm.orderByCompDateAll(data3);
        });
    } else {
        vm.lists = $sessionStorage.menus;
        vm.allWorksAlpha = $sessionStorage.allWorksAlpha;
        vm.allWorksCompDateValue = $sessionStorage.allWorksCompDateValue;
        //console.log(vm.lists);
    }

    var category = function (item) {
        switch (item) {
            /*case "exhibit":
                return "exhibits";
                break;*/
            case "illbk":
                return "illuminated_books";
                break;
            case "comb":
                return "book_illustration:designed_engraved";
                break;
            case "comdes":
                return "book_illustration:designed";
                break;
            case "comeng":
                return "book_illustration:engraved";
                break;
            case "spb":
                return "prints:designed_engraved";
                break;
            case "spdes":
                return "prints:designed";
                break;
            case "speng":
                return "prints:engraved";
                break;
            case "cprint":
                return "prints:drawings";
                break;
            case "mono":
                return "drawings_paintings:monochrome";
                break;
            case "paint":
                return "drawings_paintings:paintings";
                break;
            case "pen":
            case "penink":
                return "drawings_paintings:pen";
                break;
            case "penc":
                return "drawings_paintings:pencil";
                break;
            case "wc":
                return "drawings_paintings:wc";
                break;
            case "ms":
                return "manuscripts_typo:manuscripts";
                break;
            case "ltr":
                return "manuscripts_typo:letters";
                break;
            case "te":
                return "manuscripts_typo:typographic";
                break;
            default:
                return false;
        }
    };

    vm.alphabetizeAll = function (data) {

        if (!data) {
            return;
        }
        data.sort(function (a, b) {
            if (a.menuTitle < b.menuTitle) return -1;
            if (a.menuTitle > b.menuTitle) return 1;
            return 0;
        });

        vm.allWorksAlpha = data;
        console.log(vm.allWorksAlpha);
        $sessionStorage.allWorksAlpha = vm.allWorksAlpha;
    };

    vm.orderByCompDateAll = function (data) {
        if (!data) {
            return;
        }
        data.sort(function (a, b) {
            if (a.composition_date_value < b.composition_date_value) return -1;
            if (a.composition_date_value > b.composition_date_value) return 1;
            return 0;
        });

        vm.allWorksCompDateValue = data;

        console.log(vm.allWorksCompDateValue);
        $sessionStorage.allWorksCompDateValue = vm.allWorksCompDateValue;
    };

    vm.organizeMenus = function (data) {
        if (!data) {
            return;
        }
        // Sort before nesting
        data.sort(function (a, b) {
            if (a.composition_date_value < b.composition_date_value) return -1;
            if (a.composition_date_value > b.composition_date_value) return 1;
            return 0;
        });

        var menus = {
            illuminated_books: [],
            book_illustration: [{
                designed_engraved: [],
                designed: [],
                engraved: []
            }],
            prints: [{
                designed_engraved: [],
                designed: [],
                engraved: [],
                drawings: []
            }],
            drawings_paintings: [{
                pencil: [],
                pen: [],
                monochrome: [],
                wc: [],
                paintings: []
            }],
            manuscripts_typo: [{
                manuscripts: [],
                letters: [],
                typographic: []
            }]
            //exhibits: []
        };

        // Add to menu categories
        data.forEach(function (d) {
            var cat = category(d.medium),
                pieces;

            if (cat) {
                pieces = cat.split(/:/);

                if (menus[pieces[0]] !== undefined || menus[pieces[0]][0][pieces[1]] !== undefined) {
                    if (pieces.length === 1) {
                        menus[pieces[0]].push(d);
                    } else {
                        menus[pieces[0]][0][pieces[1]].push(d);
                    }
                }
            }
        });

        vm.lists = menus;
        //console.log(vm.lists);
        $sessionStorage.menus = menus;
    };
}]);

angular.module("blake").directive('navMenu', function () {
    return {
        restrict: 'EA',
        template: __webpack_require__(185),
        controller: "navMenu",
        controllerAs: 'menu',
        bindToController: true
    };
});

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("ObjectCompareController", ["$rootScope", "BlakeDataService", "CompareObjectsFactory", "$scope", function ($rootScope, BlakeDataService, CompareObjectsFactory, $scope) {
    var vm = this;
    vm.bds = BlakeDataService;
    vm.cof = CompareObjectsFactory;
    $rootScope.onWorkPage = false;
    $scope.dpi = $rootScope.dpivalue;
    vm.fragment = '';

    vm.getOvpTitle = function () {
        if (angular.isDefined(vm.bds.copy)) {
            if (vm.bds.work.virtual == true) {
                if (vm.bds.copy.bad_id == 'letters') {
                    return vm.bds.object.object_group;
                } else {
                    return vm.bds.work.title;
                }
            } else {
                var copyPhrase = vm.bds.copy.archive_copy_id == null ? '' : ', Copy ' + vm.bds.copy.archive_copy_id;

                if (vm.bds.copy.header) {
                    copyPhrase = vm.bds.copy.header.filedesc.titlestmt.title['@reg'] + copyPhrase;
                }

                return copyPhrase;
            }
        }
    };

    vm.changeObject = function (object) {
        //console.log(object);
        $rootScope.descIDFromCompare = object.desc_id;
        //console.log($rootScope.descIDFromCompare);
        vm.bds.changeCopy(object.copy_bad_id, object.desc_id);
    };

    vm.goToObject = function (object) {
        vm.compareText = "Select All Objects";
        vm.selectedAll = false;
        vm.cof.resetComparisonObjects();
        $rootScope.view.mode = 'object';
        $rootScope.view.scope = 'image';
        vm.changeObject(object);
    };

    $scope.$watch(function () {
        return $rootScope.dpivalue;
    }, function () {

        if ($rootScope.dpivalue == '300') {
            $scope.dpi = "300";
        } else {
            $scope.dpi = "100";
        }
    }, true);
}]);

angular.module('blake').directive("objectCompare", function () {
    let link = function (scope, ele, attr, vm) {
        let object = function () {
            return vm.bds.object;
        };
        scope.$watch(object, function () {
            vm.cof.setMainObject(vm.bds.object);
        }, true);
    };

    return {
        restrict: 'E',
        template: __webpack_require__(186),
        controller: "ObjectCompareController",
        controllerAs: 'compare',
        bindToController: true,
        link: link
    };
});

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("ObjectEditButtonsController", ["$rootScope", "$window", "$cookies", "$modal", "worktitleService", "BlakeDataService", "lightbox_service", "imageManipulation", function ($rootScope, $window, $cookies, $modal, worktitleService, BlakeDataService, lightbox_service, imageManipulation) {
    let vm = this;
    vm.bds = BlakeDataService;
    vm.wts = worktitleService;
    vm.rs = $rootScope;
    //var cartItems = CartStorageService.cartItems;

    vm.trueSizeOpen = function (object) {
        if (!angular.isDefined($cookies.getObject('clientPpi'))) {
            $modal.open({
                template: '<client-ppi object="{{object}}"></client-ppi>',
                controller: 'ModalController',
                size: 'lg'
            });
        } else {
            $window.open('/new-window/truesize/' + vm.bds.copy.bad_id + '?descId=' + object.desc_id, '_blank', 'width=800, height=600');
        }
    };

    vm.rotate = function () {
        imageManipulation.rotate();
    };

    vm.zoom = function () {
        $rootScope.zoom = !$rootScope.zoom;
    };

    vm.toggleTranscription = function () {
        if ($rootScope.view.scope == 'image') {
            $rootScope.view.scope = 'both';
        } else {
            $rootScope.view.scope = 'image';
        }
    };

    vm.toggleSupplemental = function () {
        $rootScope.supplemental = !$rootScope.supplemental;
    };

    // add object to the cart... possible error if not an image!
    // the cart is an array in local storage.  each item in the array will...
    // todo: be a map s.t. {imgUrl:url,title:title, caption:caption}
    vm.addToLightBox = function () {
        //console.log("===> adding: "+JSON.stringify(vm.bds.object));
        var item = {};
        item.url = "/images/" + vm.bds.object.dbi + ".300.jpg";
        item.title = vm.wts.getFullTitle();
        item.caption = vm.wts.getCaptionFromGallery();
        //CartStorageService.insert(item);
        lightbox_service.addToCart(item);

        // updates vm.rs so that cart counter is updated
        lightbox_service.listCartItems().then(function (data) {
            vm.rs.cartItems = data;
            //console.log("===== "+JSON.stringify($rootScope.cartItems));
        });
    };
}]);

angular.module("blake").directive("objectEditButtons", function () {
    return {
        template: __webpack_require__(187),
        controller: "ObjectEditButtonsController",
        bindToController: true,
        replace: true,
        controllerAs: "oeb"
    };
});

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("ObjectReadingController", ["$rootScope", "worktitleService", "lightbox_service", "BlakeDataService", "$scope", "$modal", "$cookies", "$window", function ($rootScope, worktitleService, lightbox_service, BlakeDataService, $scope, $modal, $cookies, $window) {
    var vm = this;
    vm.bds = BlakeDataService;
    $rootScope.onWorkPage = false;
    $scope.dpi = $rootScope.dpivalue;
    //$rootScope.view.scope = 'both';
    vm.apparatus = 'transcriptions';
    $rootScope.activeapparatus = 'transcriptions';
    $rootScope.hover = false;
    vm.compareCopyObjectsTemp = [];
    vm.compareCopyObjects = {};
    vm.compareCopyId = '';
    vm.compareCopyPrintDateString = '';
    vm.rs = $rootScope;
    vm.zoomMessage = 'Click, then mouse over the image';
    $rootScope.truesize = false;
    vm.showOverlayCompareCopyInfo = false;
    vm.showOverlayRelatedCopyInfoFlag = false;
    vm.compareCopy = null;
    $rootScope.activeId = '';
    vm.apparatusArray = [];
    vm.isApparatusArrayInit = false;
    $rootScope.descIdFromReadingCompare = null;
    vm.objectsWithSameMotif = '';
    vm.objectsSameMatrix = '';
    vm.objectsProductionSequence = '';
    vm.objectsTextReference = '';
    vm.HoveredObject;
    vm.RelatedCopy;
    vm.done1 = false;
    vm.done2 = false;
    vm.done3 = false;
    vm.done4 = false;
    vm.wts = worktitleService;
    vm.rs = $rootScope;

    vm.addToLightBox = function (obj) {
        //console.log("===> adding: "+JSON.stringify(vm.bds.object));
        var item = {};
        item.url = "/images/" + obj.dbi + ".300.jpg";
        item.title = vm.wts.getFullTitle();
        item.caption = vm.wts.getCaptionFromReading(obj);
        //CartStorageService.insert(item);
        lightbox_service.addToCart(item);

        // updates vm.rs so that cart counter is updated
        lightbox_service.listCartItems().then(function (data) {
            vm.rs.cartItems = data;
            //console.log("===== "+JSON.stringify($rootScope.cartItems));
        });
    };

    vm.showOverlayRelatedCopyInfo = function (copyId) {
        BlakeDataService.getCopy(copyId).then(function (resultingCopy) {
            vm.RelatedCopy = resultingCopy;
        });
        vm.showOverlayRelatedCopyInfoFlag = true;
        return vm.RelatedCopy;
    };

    vm.initApparatusArray = function () {
        //console.log('called');
        vm.apparatusArray = [];
        vm.bds.copyObjects.forEach(function (copyObject) {
            vm.apparatusArray.push('');
            //console.log(vm.apparatusArray);
        });
    };

    //console.log(vm.bds);

    vm.zoom = function () {
        $rootScope.zoom = !$rootScope.zoom;
        ////console.log($rootScope.zoom);
    };

    vm.getStrippedDescId = function (desc_id) {
        return desc_id.replace(/\./g, '');
    };

    vm.showTrueSize = function () {
        $rootScope.truesize = !$rootScope.truesize;

        if (!angular.isDefined($cookies.getObject('clientPpi'))) {
            var clientDpiModalInstance = $modal.open({
                template: '<client-ppi></client-ppi>',
                controller: 'ModalController',
                size: 'lg'
            });
        } else {

            if ($rootScope.truesize == true) {
                vm.setTrueSize();
            } else {
                vm.reverseTrueSize();
            }
        }
        //vm.scrollTo();
    };

    $scope.$on('clientPpi::savedPpi', function () {
        if ($rootScope.truesize == true) {
            vm.setTrueSize();
        }
    });

    vm.reverseTrueSize = function () {

        vm.bds.copyObjects.forEach(function (copyObject) {
            var myEl = angular.element(document.querySelector('#' + vm.getStrippedDescId(copyObject.desc_id)));
            myEl.attr('style', 'height:' + '100%' + 'width:' + 'auto');
        });

        if (vm.apparatus == 'comparewith') {
            vm.bds.copyObjects.forEach(function (copyObject) {
                if (vm.compareCopyObjects[copyObject.desc_id] != null) {
                    var myEl = angular.element(document.querySelector('#' + vm.getStrippedDescId(vm.compareCopyObjects[copyObject.desc_id].desc_id)));
                    myEl.attr('style', 'height:' + '100%' + 'width:' + 'auto;' + 'margin-left:' + '15px');
                }
            });
        }
        //vm.scrollTo();
    };

    vm.setTrueSize = function () {
        if (angular.isDefined($cookies.getObject('clientPpi')) && angular.isDefined(vm.bds.copy)) {

            vm.bds.copyObjects.forEach(function (copyObject) {

                var size = copyObject.physical_description.objsize['#text'].split(' '),
                    clientPpi = $cookies.getObject('clientPpi'),
                    x = size[2],
                    y = size[0],
                    unit = size[3],
                    width = x / 2.54 * clientPpi.ppi,
                    height = y / 2.54 * clientPpi.ppi;
                if (unit == 'mm.') {
                    width = width * 10;
                    height = height * 10;
                }
                ////console.log(height);
                var myEl = angular.element(document.querySelector('#' + vm.getStrippedDescId(copyObject.desc_id)));
                myEl.attr('style', 'height:' + height + 'px;' + 'width:' + width + 'px;' + 'margin-right:' + '15px');

                if (vm.apparatus == 'comparewith' && vm.compareCopyObjects[copyObject.desc_id] != null) {
                    var myEl = angular.element(document.querySelector('#' + vm.getStrippedDescId(vm.compareCopyObjects[copyObject.desc_id].desc_id)));
                    myEl.attr('style', 'height:' + height + 'px;' + 'width:' + width + 'px');
                }
            });
        }
    };

    vm.showCompareWithFaster = function (bad_id) {
        vm.compareCopyObjects = {};
        vm.compareCopyObjectsTemp = [];
        vm.apparatusArray = [];

        BlakeDataService.getCopy(bad_id).then(function (resultingCopy) {
            vm.compareCopy = resultingCopy;
            vm.compareCopyId = vm.compareCopy.archive_copy_id;
            vm.compareCopyPrintDateString = vm.compareCopy.print_date_string;
        });
        BlakeDataService.getObjectsForCopy(bad_id).then(function (resultingCopyObjects) {
            vm.bds.copyObjects.forEach(function (copyObject) {
                var keepGoing = true;
                resultingCopyObjects.forEach(function (compareCopyObject) {
                    if (keepGoing == true) {
                        if (copyObject.bentley_id == compareCopyObject.bentley_id) {
                            vm.compareCopyObjects[copyObject.desc_id] = compareCopyObject;
                            keepGoing = false;
                        }
                    }
                });
            });
            ////console.log(resultingCopyObjects);
        });

        //console.log(vm.compareCopyObjectsTemp);


        vm.apparatus = 'comparewith';
        $rootScope.activeapparatus = 'comparewith';
        if ($rootScope.truesize == true) {
            $rootScope.truesize = false;
            vm.reverseTrueSize();
        }
        //vm.scrollTo();
    };

    vm.showCompareWith = function (bad_id) {

        vm.compareCopyObjects = {};

        BlakeDataService.getCopy(bad_id).then(function (resultingCopy) {
            vm.compareCopy = resultingCopy;
        });
        //console.log(vm.compareCopy);

        vm.bds.copyObjects.forEach(function (copyObject) {
            BlakeDataService.getSameMatrixObjectFromOtherCopy(copyObject.desc_id, bad_id).then(function (result) {
                if (copyObject.desc_id != result.desc_id) {
                    vm.compareCopyObjects[copyObject.desc_id] = result;
                    vm.compareCopyId = result.archive_copy_id;
                    vm.compareCopyPrintDateString = result.copy_print_date_string;
                } else {}
            });
        });
        //console.log(vm.compareCopyObjects);

        vm.apparatus = 'comparewith';
        $rootScope.activeapparatus = 'comparewith';
        if ($rootScope.truesize == true) {
            $rootScope.truesize = false;
            vm.reverseTrueSize();
        }
        //vm.scrollTo();
    };

    vm.showIllustrationDescriptions = function () {
        vm.apparatus = 'illustrationdescriptions';
        vm.currentApparatus = $rootScope.activeapparatus;
        $rootScope.activeapparatus = 'illustrationdescriptions';
        vm.apparatusArray = [];
        //if(vm.currentApparatus == 'imagesonly' || vm.currentApparatus == 'transcriptions') {
        //    vm.scrollTo();
        //}
    };

    vm.showTranscriptions = function () {
        vm.apparatus = 'transcriptions';
        $rootScope.activeapparatus = 'transcriptions';
        vm.apparatusArray = [];
        //vm.scrollTo();
    };

    vm.showEditorsNotes = function () {
        vm.apparatus = 'editorsnotes';
        vm.currentApparatus = $rootScope.activeapparatus;
        $rootScope.activeapparatus = 'editorsnotes';
        vm.apparatusArray = [];
        //if(vm.currentApparatus == 'imagesonly' || vm.currentApparatus == 'transcriptions') {
        //    vm.scrollTo();
        //}
    };

    vm.showIndividualIllustrationDescriptions = function (index) {
        if (vm.isApparatusArrayInit == false) {
            vm.initApparatusArray();
            vm.isApparatusArrayInit = true;
        }
        vm.apparatusArray[index] = 'illustrationdescriptions';
    };

    vm.showIndividualTranscriptions = function (index) {
        if (vm.isApparatusArrayInit == false) {
            vm.initApparatusArray();
            vm.isApparatusArrayInit = true;
        }
        vm.apparatusArray[index] = 'transcriptions';
    };

    vm.showIndividualEditorsNotes = function (index) {
        if (vm.isApparatusArrayInit == false) {
            vm.initApparatusArray();
            vm.isApparatusArrayInit = true;
        }
        vm.apparatusArray[index] = 'editorsnotes';
    };

    vm.showImagesOnly = function () {
        //if(vm.isApparatusArrayInit == true) {
        vm.initApparatusArray();
        //}
        vm.apparatus = 'imagesonly';
        $rootScope.activeapparatus = 'imagesonly';
        //vm.scrollTo();
    };

    vm.showObjectsWithSimilarDesign = function (index, obj) {
        //if(vm.isApparatusArrayInit == false) {
        vm.initApparatusArray();
        //$rootScope.$broadcast('read::openRelation');
        //    vm.isApparatusArrayInit = true;
        //}
        vm.done2 = false;
        vm.apparatusArray[index] = 'motif';
        vm.HoveredObject = '';
        console.log(obj);

        BlakeDataService.getObjectsWithSameMotif(obj.desc_id).then(function (result) {
            vm.objectsWithSameMotif = result;
            vm.done2 = true;
        });

        //vm.scrollTo();
    };

    vm.showObjectsSameMatrix = function (index, obj) {
        //if(vm.isApparatusArrayInit == false) {
        vm.initApparatusArray();
        //    vm.isApparatusArrayInit = true;
        //}
        vm.done1 = false;
        vm.apparatusArray[index] = 'samematrix';
        vm.HoveredObject = '';
        console.log(obj);

        BlakeDataService.getObjectsFromSameMatrix(obj.desc_id).then(function (result) {
            vm.objectsSameMatrix = result;
            vm.done1 = true;
        });

        //vm.scrollTo();
    };

    vm.showObjectsProductionSequence = function (index, obj) {
        //if(vm.isApparatusArrayInit == false) {
        vm.initApparatusArray();
        //    vm.isApparatusArrayInit = true;
        //}
        vm.done3 = false;
        vm.apparatusArray[index] = 'productionsequence';
        vm.HoveredObject = '';
        console.log(obj);

        BlakeDataService.getObjectsFromSameProductionSequence(obj.desc_id).then(function (result) {
            vm.objectsProductionSequence = result;
            vm.done3 = true;
        });

        //vm.scrollTo();
    };

    vm.showObjectsTextReference = function (index, obj) {
        //if(vm.isApparatusArrayInit == false) {
        vm.initApparatusArray();
        //    vm.isApparatusArrayInit = true;
        //}
        vm.done4 = false;
        vm.apparatusArray[index] = 'textreference';
        vm.HoveredObject = '';
        console.log(obj);

        BlakeDataService.getTextuallyReferencedMaterial(obj.desc_id).then(function (result) {
            vm.objectsTextReference = result;
            vm.done4 = true;
        });

        //vm.scrollTo();
    };

    vm.getOvpTitle = function () {
        if (angular.isDefined(vm.bds.copy)) {
            if (vm.bds.work.virtual == true) {
                if (vm.bds.copy.bad_id == 'letters') {
                    return vm.bds.object.object_group;
                } else {
                    return vm.bds.work.title;
                }
            } else {
                var copyPhrase = vm.bds.copy.archive_copy_id == null ? '' : ', Copy ' + vm.bds.copy.archive_copy_id;

                if (vm.bds.copy.header) {
                    copyPhrase = vm.bds.copy.header.filedesc.titlestmt.title['@reg'] + copyPhrase;
                }

                return copyPhrase;
            }
        }
    };

    vm.changeObject = function (object) {
        vm.bds.changeObject(object);
        $rootScope.view.mode = 'object';
        $rootScope.view.scope = 'image';
        $rootScope.persistentmode = 'gallery';
        $rootScope.states.activeItem = 'gallery';
    };

    vm.changeCopy = function (copy_id, desc_id) {
        //console.log(copy_id);
        //console.log(desc_id);
        vm.bds.changeCopy(copy_id, desc_id);
        $rootScope.view.mode = 'object';
        $rootScope.view.scope = 'image';
        $rootScope.persistentmode = 'gallery';
        $rootScope.states.activeItem = 'gallery';
        //if($rootScope.activeapparatus = 'comparewith') {
        vm.apparatus = 'transcriptions';
        $rootScope.activeapparatus = 'transcriptions';
        vm.apparatusArray = [];
        $rootScope.descIdFromReadingCompare = desc_id;
        //}
    };

    vm.cssSafeId = function (string) {
        return string.replace(/\./g, '-');
    };

    vm.scrollTo = function () {
        var target = '#' + vm.cssSafeId($rootScope.activeId).replace(/\./g, '-');
        $rootScope.$broadcast('viewSubMenu::readingMode', { 'target': target });
    };

    vm.setActiveId = function (index) {
        //note to mike: if (images only is pressed)
        if ($rootScope.activeapparatus == 'imagesonly' && index > 2) {
            $rootScope.activeId = vm.cssSafeId(vm.bds.copyObjects[index - 2].desc_id);
        } else {
            $rootScope.activeId = vm.cssSafeId(vm.bds.copyObjects[index].desc_id);
        }
        //$rootScope.activeId = id;
        //console.log($rootScope.activeId);
    };

    $scope.$watch(function () {
        return $rootScope.dpivalue;
    }, function () {

        if ($rootScope.dpivalue == '300') {
            $scope.dpi = "300";
        } else {
            $scope.dpi = "100";
        }
    }, true);
}]);

angular.module('blake').directive("objectReading", function () {
    return {
        restrict: 'E',
        template: __webpack_require__(188),
        controller: "ObjectReadingController",
        controllerAs: 'read',
        bindToController: true
    };
});

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("ObjectViewerController", ["$rootScope", "$modal", "BlakeDataService", "$scope", function ($rootScope, $modal, BlakeDataService, $scope) {
    var vm = this;

    vm.bds = BlakeDataService;

    $rootScope.onWorkPage = false;
    // vm.dpi = $rootScope.dpivalue;
    //
    // $scope.$watch(_ => $rootScope.dpivalue, function() {
    //         if ($rootScope.dpivalue == '300') {
    //                 vm.dpi = "300";
    //         }
    //         else {
    //                 vm.dpi = "100";
    //         }
    //     }, true);
}]);

angular.module('blake').directive("objectViewer", function () {
    return {
        restrict: 'E',
        template: __webpack_require__(189),
        controller: "ObjectViewerController",
        controllerAs: 'viewer',
        bindToController: true
    };
});

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("ObjectViewerPreviousNextController", ["BlakeDataService", "ObjectViewerService", function (BlakeDataService, ObjectViewerService) {
    let vm = this;
    vm.bds = BlakeDataService;
    vm.ovs = ObjectViewerService;
}]);

angular.module("blake").component("objectViewerPreviousNext", {
    template: __webpack_require__(190),
    replace: true,
    bindToController: true,
    controller: "ObjectViewerPreviousNextController",
    controllerAs: "ovpn"
});

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("RegularObjectViewerController", ["$rootScope", "BlakeDataService", "ObjectViewerService", function ($rootScope, BlakeDataService, ObjectViewerService) {
    let vm = this;
    vm.rs = $rootScope;
    vm.bds = BlakeDataService;
    vm.ovs = ObjectViewerService;
}]);

angular.module("blake").component("regularObjectViewer", {
    template: __webpack_require__(191),
    replace: true,
    bindToController: true,
    controller: "RegularObjectViewerController",
    controllerAs: "rov"
});

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("SupplementalImageViewerController", ["$rootScope", "BlakeDataService", "ObjectViewerService", function ($rootScope, BlakeDataService, ObjectViewerService) {
    let vm = this;
    vm.rs = $rootScope;
    vm.bds = BlakeDataService;
    vm.ovs = ObjectViewerService;
}]);

angular.module("blake").component("supplementalImageViewer", {
    template: __webpack_require__(192),
    replace: true,
    bindToController: true,
    controller: "SupplementalImageViewerController",
    controllerAs: "siv"
});

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("ObjectsFromSameController", ["$rootScope", "BlakeDataService", "CompareObjectsFactory", function ($rootScope, BlakeDataService, CompareObjectsFactory) {
    var vm = this;
    vm.bds = BlakeDataService;
    vm.cof = CompareObjectsFactory;
    vm.compareText = "Select All Objects";
    vm.selectedAll = false;
    vm.fragment = '';

    vm.selectAll = function () {
        vm.cof.checkCompareType(vm.type);
        if (!vm.selectedAll) {
            vm.compareText = "Clear All Objects";
            vm.selectedAll = true;
            vm.cof.selectAll(vm.bds.object[vm.type]);
        } else {
            vm.compareText = "Select All Objects";
            vm.selectedAll = false;
            vm.cof.clearComparisonObjects();
        }
    };

    // Add/remove single object for comparison
    vm.selectOne = function (obj) {
        vm.cof.checkCompareType(vm.type);
        if (vm.cof.isComparisonObject(obj)) {
            vm.cof.removeComparisonObject(obj);

            if (vm.type == 'textmatch') {
                BlakeDataService.getFragmentPair(vm.bds.object.desc_id, obj.desc_id).then(function (resultingFragmentPair) {
                    console.log(resultingFragmentPair);
                    for (i = 0; i < vm.bds.fragment_pairs.length; i++) {
                        if (vm.bds.fragment_pairs[i] == resultingFragmentPair.fragment) {
                            console.log("removed it! --> " + vm.bds.fragment_pairs[i]);
                            delete vm.bds.fragment_pairs[i];
                        }
                    }
                });
            }
        } else {
            vm.cof.addComparisonObject(obj);

            if (vm.type == 'textmatch') {

                BlakeDataService.getFragmentPair(vm.bds.object.desc_id, obj.desc_id).then(function (resultingFragmentPair) {
                    console.log(resultingFragmentPair);

                    vm.bds.fragment_pairs.push(resultingFragmentPair.fragment);
                });
                //console.log(vm.bds.object.desc_id);
                //console.log("blah");
            }
        }
    };

    vm.activateCompare = function () {
        $rootScope.worksNavState = false;
        $rootScope.view.mode = 'compare';
        $rootScope.view.scope = 'image';
        //console.log("selected tab is: "+$rootScope.selectedTab)
    };
}]);

angular.module('blake').directive('objectsFromSame', function () {
    let link = function (scope, ele, attr, vm) {
        let type = function () {
            return vm.cof.comparisonType;
        };
        scope.$watch(type, function (newVal, oldVal) {
            if (oldVal && newVal != vm.type) {
                vm.compareText = "Select All Objects";
                vm.selectedAll = false;
            }
        }, true);
    };

    return {
        restrict: 'E',
        template: __webpack_require__(193),
        controller: "ObjectsFromSameController",
        controllerAs: 'fromSame',
        scope: {
            type: '@type'
        },
        bindToController: true,
        link: link
    };
});

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("ObjectsInCopyTabController", ["BlakeDataService", "$rootScope", "CompareObjectsFactory", function (BlakeDataService, $rootScope, CompareObjectsFactory) {
    let vm = this;
    vm.bds = BlakeDataService;
    vm.cof = CompareObjectsFactory;

    vm.changeObject = function (object) {
        if ($rootScope.view.mode == 'compare') {
            vm.compareText = "Select All Objects";
            vm.selectedAll = false;
            vm.cof.resetComparisonObjects();
            $rootScope.view.mode = 'object';
            $rootScope.view.scope = 'image';
        }

        vm.bds.changeObject(object);
    };

    vm.getCopyOrGroup = function () {
        if (angular.isDefined(vm.bds.copy)) {
            if (vm.bds.work.medium == 'exhibit') return 'Exhibit';
            if (vm.bds.work.virtual) {
                if (vm.bds.work.bad_id == 'letters') {
                    return 'Letter';
                } else {
                    return 'Group';
                }
            } else {
                return 'Copy';
            }
        }
    };
}]);

angular.module("blake").component("objectsInCopyTab", {
    template: __webpack_require__(194),
    controller: "ObjectsInCopyTabController",
    controllerAs: "oic"
});

/***/ }),
/* 88 */
/***/ (function(module, exports) {

angular.module("blake").directive('ovpImage', ["imageManipulation", function (imageManipulation) {
    var link = function (scope, element, attr) {

        var image = angular.element(element.children()),
            container = angular.element(element.parent()),
            height = 0,
            width = 0,
            parentHeight = 0;

        image.on('load', function () {
            height = image[0].naturalHeight;
            width = image[0].naturalWidth;
            parentHeight = container.height();
            if (width > height) {
                var newHeight = Math.round(height * parentHeight / width);
                var margin = Math.round((parentHeight - newHeight) / 2);
                image.css({ 'height': 'auto', 'width': parentHeight + 'px', 'margin-top': margin + 'px' });
            } else {
                image.css({ 'height': '100%', 'width': 'auto', 'margin-top': '0' });
            }
        });

        scope.transformRotate = function () {
            if (imageManipulation.transform.rotate == 0) {
                element.removeClass('rotated');
            } else {
                element.addClass('rotated');
            }
        };

        scope.setStyles = function () {
            var tranformString = 'rotate(' + imageManipulation.transform.rotate + 'deg)';
            imageManipulation.transform.style['-webkit-transform'] = tranformString;
            imageManipulation.transform.style['-moz-tranform'] = tranformString;
            imageManipulation.transform.style['-o-transform'] = tranformString;
            imageManipulation.transform.style['-ms-transform'] = tranformString;
            imageManipulation.transform.style['transform'] = tranformString;
            element.css(imageManipulation.transform.style);
        };

        scope.$watch(function () {
            return imageManipulation.transform;
        }, function () {
            scope.transformRotate();
            scope.setStyles();
        }, true);

        scope.$on('resize::resize', function () {
            scope.transformRotate();
            scope.setStyles();
        });
    };

    return {
        restrict: 'A',
        scope: {
            descId: '@descId'
        },
        link: link
    };
}]);

/***/ }),
/* 89 */
/***/ (function(module, exports) {

angular.module("blake").directive('parallax', ["$window", function ($window) {
    return function (scope, element, attr) {
        angular.element($window).bind("scroll", function () {
            scope.$broadcast('scroll::scroll', { 'offset': this.pageYOffset });
        });
    };
}]);

/***/ }),
/* 90 */
/***/ (function(module, exports) {

angular.module("blake").directive('resize', ["$rootScope", "$window", "$timeout", "WindowSize", function ($rootScope, $window, $timeout, WindowSize) {
    return function (scope, element) {
        var w = angular.element($window);
        scope.getWindowDimensions = function () {
            return {
                'h': w.innerHeight(),
                'w': w.innerWidth()
            };
        };

        scope.$watch(scope.getWindowDimensions, function (newValue, oldValue) {
            $timeout.cancel(scope.resizing);

            // Add a timeout to not call the resizing function every pixel
            scope.resizing = $timeout(function () {
                WindowSize.height = newValue.h;
                WindowSize.width = newValue.w;
                $rootScope.$broadcast('resize::resize', { height: WindowSize.height, width: WindowSize.width });
            }, 300);
        }, true);

        w.bind('resize', function () {
            scope.$apply();
        });
    };
}]);

/***/ }),
/* 91 */
/***/ (function(module, exports) {

//TODO make this a true scroll to element, rather than simple offset of current element
angular.module("blake").directive('scrollToElement', ["$timeout", function ($timeout) {
    var link = function (scope, element, attr) {
        element.on('click', function () {
            let startingOffset = element.offset();
            $timeout(function () {
                let elementOffset = attr.scrollToElement ? $(attr.scrollToElement).offset() : startingOffset,
                    offset = scope.offset ? parseInt(scope.offset) : 0;
                $('html, body').animate({ scrollTop: elementOffset.top - offset }, 'slow');
            }, 300);
        });
    };

    return {
        restrict: 'A',
        scope: {
            offset: '@offset'
        },
        link: link
    };
}]);

/***/ }),
/* 92 */
/***/ (function(module, exports) {

angular.module("blake").directive('scrollToTop', function () {
    var link = function (scope, element, attr) {
        element.on('click', function () {
            $('html, body').animate({ scrollTop: 0 }, 'fast');
            $("#Overlay").animate({ scrollTop: 0 }, 'fast');
        });
    };

    return {
        restrict: 'A',
        link: link
    };
});

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").component("searchBox", {
    template: __webpack_require__(195),
    controller: "SearchController",
    controllerAs: "sb"
});

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("CopiesInWorkPreviewController", ["SearchService", function (SearchService) {
    let vm = this;
    vm.s = SearchService;
}]);

angular.module("blake").directive("copiesInWorkPreview", function () {
    return {
        template: __webpack_require__(196),
        controller: "CopiesInWorkPreviewController",
        bindToController: true,
        scope: {
            results: '<results',
            tree: '<tree'
        },
        controllerAs: "cw",
        replace: true
    };
});

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("PreviewBoxController", ["SearchService", function (SearchService) {
    let vm = this;
    vm.s = SearchService;

    vm.hidden = function () {
        return vm.s.selectedWork == -1 || vm.s.type != vm.type;
    };

    vm.showObjectsInVirtualWorkPreview = function () {
        try {
            let multipleObjects = vm.results[vm.s.selectedWork][1] > 1,
                isVirtual = vm.results[vm.s.selectedWork][0].virtual;
            return multipleObjects && vm.tree == 'object' && isVirtual;
        } catch (e) {
            return false;
        }
    };

    vm.showObjectsInCopyPreview = function () {
        try {
            let multipleObjects = vm.results[vm.s.selectedWork][2][vm.s.selectedCopy][1] > 1,
                isVirtual = vm.results[vm.s.selectedWork][0].virtual;
            return multipleObjects && vm.tree == 'object' && !isVirtual;
        } catch (e) {
            return false;
        }
    };

    vm.showCopiesInWorkPreview = function () {
        try {
            let multipleObjects = vm.results[vm.s.selectedWork][1] > 1;
            return multipleObjects && vm.tree == 'copy';
        } catch (e) {
            return false;
        }
    };
}]);

angular.module("blake").directive("previewBox", function () {
    return {
        template: __webpack_require__(203),
        controller: "PreviewBoxController",
        scope: {
            results: '<results',
            tree: '<tree',
            type: '<type'
        },
        controllerAs: "pb",
        bindToController: true,
        replace: true
    };
});

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("PreviewHeaderController", ["SearchService", function (SearchService) {
    let vm = this;
    vm.s = SearchService;

    vm.showCopiesDropdown = function () {
        try {
            let multipleCopies = vm.results[vm.s.selectedWork][2].length > 1,
                isVirtual = vm.results[vm.s.selectedWork][0].virtual;
            return multipleCopies && vm.tree == 'object' && !isVirtual;
        } catch (e) {
            return false;
        }
    };
}]);

angular.module("blake").directive("previewHeader", function () {
    return {
        template: __webpack_require__(197),
        controller: "PreviewHeaderController",
        bindToController: true,
        scope: {
            results: '<results',
            tree: '<tree'
        },
        controllerAs: "ph",
        replace: true
    };
});

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("ObjectResultHighlightController", ["SearchService", function (SearchService) {
    let vm = this;
    vm.s = SearchService;

    vm.selectedObject = function () {
        try {
            return vm.results[vm.s.selectedWork][2][vm.s.selectedCopy][2][vm.s.selectedObject][0];
        } catch (e) {}
    };

    vm.selectedCopy = function () {
        try {
            return vm.results[vm.s.selectedWork][2][vm.s.selectedCopy][0];
        } catch (e) {}
    };

    vm.selectedWork = function () {
        try {
            return vm.results[vm.s.selectedWork][0];
        } catch (e) {}
    };
}]);

angular.module("blake").directive("objectResultHighlight", function () {
    return {
        template: __webpack_require__(198),
        controller: "ObjectResultHighlightController",
        bindToController: true,
        scope: {
            results: '<results',
            tree: '<tree',
            type: '<type'
        },
        controllerAs: "orh",
        replace: true
    };
});

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("ObjectsInCopyPreviewController", ["SearchService", function (SearchService) {
    let vm = this;
    vm.s = SearchService;
}]);

angular.module("blake").directive("objectsInCopyPreview", function () {
    return {
        template: __webpack_require__(199),
        controller: "ObjectsInCopyPreviewController",
        bindToController: true,
        scope: {
            results: '<results',
            tree: '<tree'
        },
        controllerAs: "oc",
        replace: true
    };
});

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("ObjectsInVirtualWorkPreviewController", ["SearchService", function (SearchService) {
    let vm = this;
    vm.s = SearchService;
}]);

angular.module("blake").directive("objectsInVirtualWorkPreview", function () {
    return {
        template: __webpack_require__(200),
        controller: "ObjectsInVirtualWorkPreviewController",
        bindToController: true,
        scope: {
            results: '<results',
            tree: '<tree'
        },
        controllerAs: "ovw",
        replace: true
    };
});

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("PreviewSelectionController", ["SearchService", function (SearchService) {
    let vm = this;
    vm.s = SearchService;
}]);

angular.module("blake").directive("previewSelection", function () {
    return {
        template: __webpack_require__(201),
        controller: "PreviewSelectionController",
        replace: true,
        bindToController: true,
        scope: {
            results: '<results',
            type: '<type',
            tree: '<tree'
        },
        controllerAs: "ps"
    };
});

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("PreviousNextController", ["SearchService", function (SearchService) {
    let vm = this;
    vm.s = SearchService;

    vm.showLeft = function () {
        return vm.s.selectedWork > 0;
    };

    vm.showRight = function () {
        return vm.s.selectedWork < vm.results.length - 1;
    };
}]);

angular.module("blake").directive("previousNext", function () {
    return {
        template: __webpack_require__(202),
        controller: "PreviousNextController",
        bindToController: true,
        scope: {
            results: '<results',
            type: '<type'
        },
        controllerAs: "pn"
    };
});

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("SearchResultsController", ["$scope", "$rootScope", "SearchService", function ($scope, $rootScope, SearchService) {
    const vm = this;
    vm.s = SearchService;

    $rootScope.help = 'search';

    $scope.$on('resize::resize', function (e, w) {
        if (w.width > 992) {
            vm.object_image_container = { 'height': w.height - 400 + 'px' };
        }
    });

    // $scope.$on('searchResultDirective::showCopies', function(e,d){
    //     if(d.type !== vm.type){
    //         vm.s.selectedWork = -1;
    //     }
    // });
}]);

angular.module('blake').directive('searchResults', function () {
    return {
        restrict: 'E',
        template: __webpack_require__(204),
        controller: "SearchResultsController",
        scope: {
            results: '<results',
            label: '@label',
            type: '@type',
            tree: '@tree'
        },
        controllerAs: 'esr',
        bindToController: true
    };
});

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("DateSearchFieldController", ["SearchService", function (SearchService) {
    let vm = this;
    vm.s = SearchService;
}]);

angular.module("blake").directive("dateSearchField", function () {
    return {
        template: __webpack_require__(205),
        controller: "DateSearchFieldController",
        controllerAs: "dsf",
        replace: true
    };
});

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("FieldSearchFieldController", ["SearchService", function (SearchService) {
    let vm = this;
    vm.s = SearchService;
}]);

angular.module("blake").directive("fieldSearchField", function () {
    return {
        template: __webpack_require__(206),
        controller: "FieldSearchFieldController",
        controllerAs: "fsf",
        replace: true
    };
});

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("MediumSearchFieldController", ["SearchService", function (SearchService) {
    let vm = this;
    vm.s = SearchService;
}]);

angular.module("blake").directive("mediumSearchField", function () {
    return {
        template: __webpack_require__(207),
        controller: "MediumSearchFieldController",
        controllerAs: "msf",
        replace: true
    };
});

/***/ }),
/* 106 */
/***/ (function(module, exports) {

angular.module("blake").directive('showMe', ["$window", function ($window) {
    return {
        restrict: 'A',
        link: function (scope, ele, attr) {
            ele.on('click', function () {
                $window.open('/new-window/' + attr.showMe + '/' + scope.copyBad + '?descId=' + scope.object.desc_id, '_blank', 'width=800, height=600');
            });
        },
        scope: {
            object: '=',
            copyBad: '@'
        }
    };
}]);

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("SlideBoxController", ["$scope", "$element", "$attrs", "$timeout", function ($scope, $element, $attrs, $timeout) {
    let vm = this;

    vm.scrollBarWidths = 40;
    vm.viewport = $element.children('.slide-box-viewport');
    vm.wrapper = vm.viewport.children('.slide-box-wrapper');
    vm.items = vm.wrapper.children();
    vm.scrollerLeft = false;
    vm.scrollerRight = false;
    vm.leftOffset = 0;
    vm.scrollBy = 660;
    vm.windowWidth = 0;

    let widthOfList = function () {
        let itemsWidth = 0;
        angular.forEach(vm.items, child => itemsWidth += angular.element(child).outerWidth());
        return itemsWidth;
    };

    let widthOfHidden = function () {
        vm.viewport = $element.children('.slide-box-viewport');
        return vm.viewport.outerWidth() - widthOfList() - vm.leftOffset - vm.scrollBarWidths;
    };

    let reAdjust = function () {
        vm.scrollerRight = widthOfHidden() < 0;
        vm.scrollerLeft = vm.leftOffset < 0;
    };

    $scope.$on('resize::resize', function (e, w) {
        vm.windowWidth = w.width;
        reAdjust();
    });

    $scope.$on('searchCtrl::newSearch', function (e, w) {
        $timeout(function () {
            reAdjust();
        }, 0);
    });

    $scope.$on('searchCtrl::changeResult', function (e, d) {
        if (d.type == vm.type) {
            vm.scrollToResult(d.objectIndex);
        }
    });

    vm.scrollRight = function () {
        let newOffset = vm.leftOffset - vm.scrollBy;
        let maxOffset = vm.viewport.outerWidth() - widthOfList() - vm.scrollBarWidths;
        if (newOffset < maxOffset) {
            vm.leftOffset = maxOffset;
        } else {
            vm.leftOffset = newOffset;
        }
        reAdjust();
    };

    vm.scrollLeft = function () {
        let newOffset = vm.leftOffset + vm.scrollBy;
        if (newOffset > 0) {
            vm.leftOffset = 0;
        } else {
            vm.leftOffset = newOffset;
        }
        reAdjust();
    };

    vm.scrollToResult = function (objectIndex) {
        let objectStart = objectIndex * 235,
            objectEnd = objectStart + 235,
            viewWidth = vm.viewport.outerWidth();

        //Part of the handprint is hidden on the right
        if (objectEnd + vm.leftOffset > viewWidth) {
            if (widthOfHidden() * -1 > viewWidth) {
                vm.leftOffset = objectStart * -1;
            } else {
                vm.leftOffset = viewWidth - widthOfList() - vm.scrollBarWidths;
            }
        }

        //Part of the handprint is hidden on the left
        if (objectStart < vm.leftOffset * -1) {
            vm.leftOffset = objectStart * -1;
        }

        reAdjust();
    };
}]);

angular.module('blake').directive("slideBox", function () {
    return {
        //replace: true,
        transclude: true,
        restrict: 'AE',
        scope: {
            type: '=type'
        },
        controller: "SlideBoxController",
        controllerAs: 'slideBox',
        bindToController: true,
        template: __webpack_require__(208)
    };
});

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("TextMatchTabController", ["BlakeDataService", function (BlakeDataService) {
    let vm = this;
    vm.bds = BlakeDataService;
}]);

angular.module("blake").component("textMatchTab", {
    template: __webpack_require__(209),
    controller: "TextMatchTabController",
    controllerAs: "tm"
});

/***/ }),
/* 109 */
/***/ (function(module, exports) {

angular.module("blake").controller("TextTranscriptionController", ["$routeParams", "$modal", function ($routeParams, $modal) {
    let vm = this;

    vm.colorKeyOpen = function (size) {
        $modal.open({
            templateUrl: '/static/controllers/modal/colorKeyModal.html',
            controller: 'ModalController',
            size: size
        });
    };

    let teiClasses = ['tei-sic', 'tei-rep-overwrite', 'tei-rep', 'tei-del-overwrite', 'tei-del-erasure', 'tei-del-obscured', 'tei-del-overstrike', 'tei-del', 'tei-instr-pencil', 'tei-unclear-hi', 'tei-subst', 'tei-addspan-substspan', 'tei-add-substspan', 'tei-add', 'tei-gap-cancellation', 'tei-gap', 'tei-hspace', 'tei-preceding-delspan-substspan', 'tei-preceding-delspan', 'tei-preceding-addspan-substspan', 'tei-preceding-addspan'];

    vm.hasColorKeyMarkup = function (teiMarkup) {
        let regex = new RegExp('(' + teiClasses.join('|') + ')', 'g');

        if (teiMarkup) {
            if (teiMarkup.match(regex)) {
                return true;
            }
        }
        return false;
    };

    vm.getNumber = function (num) {
        return new Array(parseInt(num));
    };

    vm.hasMarkupText = function () {
        return vm.object && vm.object.markup_text;
    };
}]);

angular.module('blake').directive('textTranscription', function () {
    return {
        restrict: 'EA',
        templateUrl: '/static/directives/text-transcription/textTranscription.html',
        controller: "TextTranscriptionController",
        scope: {
            object: '=object',
            highlight: '@highlight'
        },
        controllerAs: 'tt',
        bindToController: true
    };
});

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("TextualReferenceTabController", ["BlakeDataService", function (BlakeDataService) {
    let vm = this;
    vm.bds = BlakeDataService;
}]);

angular.module("blake").component("textualReferenceTab", {
    template: __webpack_require__(210),
    controller: "TextualReferenceTabController",
    controllerAs: "tr"
});

/***/ }),
/* 111 */
/***/ (function(module, exports) {

angular.module("blake").directive('toTopButton', ["$window", function ($window) {
    var link = function (scope, element, attr) {
        angular.element($window).bind("scroll", function () {
            if (this.pageYOffset > 50) {
                element.addClass('scrolling');
            } else {
                element.removeClass('scrolling');
            }
        });
    };

    return {
        restrict: 'A',
        link: link
    };
}]);

/***/ }),
/* 112 */
/***/ (function(module, exports) {

angular.module("blake").directive('toTopOnBroadcast', function () {
    var link = function (scope, element, attr) {
        if (attr.toTopOnBroadcast) {
            scope.$on(attr.toTopOnBroadcast, function () {
                if (attr.target) {
                    $(element).find(attr.target).each(function (k, v) {
                        $(v).animate({ scrollTop: 0 }, 'fast');
                    });
                } else {
                    $(element).animate({ scrollTop: 0 }, 'fast');
                }
            });
        }
    };

    return {
        restrict: 'A',
        link: link
    };
});

/***/ }),
/* 113 */
/***/ (function(module, exports) {

angular.module("blake").controller('TwitterShareController', ["$scope", "$rootScope", "$location", function ($scope, $rootScope, $location) {
    $scope.myLocation = $location.path;
}]);

angular.module("blake").directive('twitterShare', function () {
    return {
        restrict: 'A',
        controller: "TwitterShareController"
    };
});

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("ViewSubMenuController", ["$rootScope", "$routeParams", "$modal", "CompareObjectsFactory", function ($rootScope, $routeParams, $modal, CompareObjectsFactory) {
    var vm = this;
    vm.cof = CompareObjectsFactory;

    if (!angular.isDefined($rootScope.persistentmode)) {
        $rootScope.persistentmode = 'gallery';
    }

    if (!angular.isDefined($rootScope.view)) {
        $rootScope.view = {
            mode: 'object',
            scope: 'image'
        };
    }

    vm.helpOpen = function () {

        var myTemplateURL;

        switch ($rootScope.help) {
            case 'home':
                myTemplateURL = '/static/html/help-home.html';
                break;
            case 'work':
                myTemplateURL = '/static/html/help-work.html';
                break;
            case 'copy':
                if ($rootScope.persistentmode == 'gallery' && $rootScope.view.mode != 'compare') {
                    myTemplateURL = '/static/html/help-object.html';
                }
                if ($rootScope.view.mode == 'compare') {
                    myTemplateURL = '/static/html/help-compare.html';
                }
                if ($rootScope.persistentmode == 'reading') {
                    myTemplateURL = '/static/html/help-reading.html';
                }
                break;
            case 'static':
                myTemplateURL = '/static/html/help-static.html';
                break;

            case 'search':
                myTemplateURL = '/static/html/help-search.html';
                break;
        }

        var helpModalInstance = $modal.open({
            templateUrl: myTemplateURL,
            controller: 'ModalController'
            //size: 'sm'
        });
    };

    vm.changeView = function (mode, scope) {
        $rootScope.view.mode = mode;
        $rootScope.view.scope = scope;
        //$rootScope.worksNavState = false;
        if (mode == 'object') {
            $rootScope.persistentmode = 'gallery';

            vm.compareText = "Select All Objects";
            vm.selectedAll = false;
            vm.cof.resetComparisonObjects();
            $rootScope.view.scope = 'image';
        }
        if (mode == 'read') {
            //console.log($rootScope.descIDFromCompare);
            //console.log($routeParams.descId);
            if ($rootScope.descIDFromCompare != null) {
                var target = $rootScope.descIDFromCompare ? '#' + $rootScope.descIDFromCompare.replace(/\./g, '-') : '';
                $rootScope.$broadcast('viewSubMenu::readingMode', { 'target': target });
                $rootScope.persistentmode = 'reading';
                $routeParams.descId = $rootScope.descIDFromCompare;
                $rootScope.descIDFromCompare = null;
                return;
            }
            if ($rootScope.descIdFromReadingCompare != null) {
                var target = $rootScope.descIdFromReadingCompare ? '#' + $rootScope.descIdFromReadingCompare.replace(/\./g, '-') : '';
                $rootScope.$broadcast('viewSubMenu::readingMode', { 'target': target });
                $rootScope.persistentmode = 'reading';
                $routeParams.descId = $rootScope.descIdFromReadingCompare;
                $rootScope.descIdFromReadingCompare = null;
                return;
            }
            var target = $routeParams.descId ? '#' + $routeParams.descId.replace(/\./g, '-') : '';
            console.log(target);
            $rootScope.$broadcast('viewSubMenu::readingMode', { 'target': target });
            $rootScope.persistentmode = 'reading';
        }
    };

    $rootScope.states = {};
    $rootScope.states.activeItem = 'gallery';
    $rootScope.items = [{
        id: 'reading',
        mode: 'read',
        scope: 'both',
        abbreviation: 'R',
        title: 'Reading Mode'
    }, {
        id: 'gallery',
        mode: 'object',
        scope: 'image',
        abbreviation: 'G',
        title: 'Gallery Mode'
    }];
}]);

angular.module('blake').directive("viewSubMenu", function () {
    return {
        restrict: 'E',
        scope: true,
        template: __webpack_require__(211),
        controller: "ViewSubMenuController",
        controllerAs: 'viewSubMenu',
        bindToController: true
    };
});

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("WorkCopiesController", ["BlakeDataService", function (BlakeDataService) {
    var vm = this;
    vm.bds = BlakeDataService;
}]);

angular.module('blake').directive("workCopies", function () {
    return {
        restrict: 'E',
        template: __webpack_require__(212),
        controller: "WorkCopiesController",
        controllerAs: 'workCopies',
        bindToController: true
    };
});

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

angular.module("blake").controller("WorkTitleController", ["$rootScope", "$routeParams", "BlakeDataService", function ($rootScope, $routeParams, BlakeDataService) {
    var vm = this;
    vm.bds = BlakeDataService;
    var title = "";
    vm.showOverlay = false;
    vm.showOverlayCopyInfo = false;

    vm.getTitle = function () {

        /*WORKS PAGES*/
        if ($rootScope.showWorkTitle == 'work') {
            return vm.bds.work.title;
        }

        /*COPY PAGES*/
        //For letters
        if (vm.bds.work.bad_id == 'letters') {
            if (vm.bds.object.object_group) {
                title = vm.bds.object.object_group;
                title = title.match(/(to.*)/);
                return title[1].charAt(0).toUpperCase() + title[1].slice(1);
            }
        }
        //For Virtual Groups
        if (vm.bds.work.virtual) {
            return vm.bds.work.title;
        }
        //For rest
        if (vm.bds.copy.header && $rootScope.doneSettingCopy) {
            title = vm.bds.copy.header.filedesc.titlestmt.title['@reg'];
            //title = vm.bds.copy.header.filedesc.titlestmt.title.main['#text'];
            //console.log(vm.bds.copy.header.filedesc.titlestmt.title.main['#text']);
        }
        if (title.match(/.*, The/)) {
            title = "The " + title.match(/(.*), The/)[1];
        }
        return title.trim();
    };

    vm.getCompOrPrintDateString = function () {
        if (vm.bds.work.probable == "printing") return "Printed " + vm.bds.copy.print_date_string;else return "Composed " + vm.bds.work.composition_date_string;
    };

    vm.getCopyPhrase = function () {
        //console.log(vm.bds.copy);
        if (vm.bds.work.virtual) {
            return '';
        } else if (vm.bds.copy.archive_set_id != null) {
            return vm.bds.copy.archive_set_id;
        } else {
            return vm.bds.copy.archive_copy_id == null ? '' : 'Copy ' + vm.bds.copy.archive_copy_id;
        }
    };

    vm.getStaticPageTitle = function () {
        return $rootScope.staticPageTitle;
    };
}]);

angular.module('blake').directive("workTitle", function () {
    let link = function (scope, ele, attr, vm) {
        let selectedCopy = function () {
            return vm.bds.copy;
        };
        scope.$watch(selectedCopy, function () {
            vm.showOverlay = false;
        });
    };

    return {
        restrict: 'E',
        template: __webpack_require__(213),
        controller: "WorkTitleController",
        link: link,
        controllerAs: 'workTitle',
        bindToController: true
    };
});

/***/ }),
/* 117 */
/***/ (function(module, exports) {

angular.module("blake").filter('highlight', ["$sce", "$rootScope", function ($sce, $rootScope) {
    var vm = this;

    vm.runReplace = function (phrase, text) {
        /*if (angular.isArray(phrase)){
          console.log("The phrase is an array!!!");
        }
        console.log("===highlight called runReplace!!!: "+phrase)*/
        let phraseArray;
        if (phrase !== '') {
            if (phrase.startsWith('"') && phrase.endsWith('"')) {
                phrase = phrase.replace(/"/g, '');
                text = text.replace(new RegExp('(' + phrase + ')', 'gi'), '<span class="highlighted">$1</span>');
                return text;
            }

            if (phrase.indexOf(' ')) {
                if (phrase.indexOf('AND')) {
                    phrase = phrase.replace(/AND/g, '');
                }
                phraseArray = phrase.match(/\w+|"(?:\\"|[^"])+"/g).map(s => s.replace(/['"]/g, ''));
                angular.forEach(phraseArray, function (ph) {

                    if ($rootScope.selectedTab == '#objects-with-text-matches') {
                        var words = ph.match(/\w+/g);
                        console.log("words:" + words);
                        var newph = [];
                        var i = 0;
                        angular.forEach(words, function (word) {
                            if (word == 'br') {
                                i++;
                                return;
                            }
                            if (newph[i] == undefined) {
                                newph[i] = '';
                            }
                            newph[i] += word + ".*";
                        });
                    }

                    angular.forEach(newph, function (singleph) {
                        singleph = singleph.substring(0, singleph.length - 2);
                        //console.log("singleph:" + newph[1].substring(0,newph[1].length-6));
                        //console.log(text);
                        console.log(singleph);
                        text = text.replace(new RegExp('(\\b' + "singleph" + '[a-zA-Z]*\\b)', 'gi'), '<span class="highlighted">$1</span>');
                        //console.log(text);
                    });
                });
                return text;
            }

            text = text.replace(new RegExp('(' + phrase + ')', 'gi'), '<span class="highlighted">$1</span>');
        }

        return text;
    };

    return function (text, phrase, alt) {
        if (!angular.isDefined(text) || !angular.isDefined(phrase)) {
            return $sce.trustAsHtml(text);
        }

        if (angular.isDefined(alt) && alt.length > 0) {
            angular.forEach(alt, function (spelling) {
                var newPhrase = phrase.toLowerCase();
                if (newPhrase.indexOf(spelling.reg) > -1) {
                    newPhrase = newPhrase.replace(spelling.reg, spelling.orig);
                    text = vm.runReplace(newPhrase, text);
                }
            });
        }

        return $sce.trustAsHtml(vm.runReplace(phrase, text));
    };
}]);

/***/ }),
/* 118 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_script_loader_jquery__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_script_loader_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_script_loader_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_angular__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_angular__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_angular_route__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_angular_route___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_angular_route__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_angular_sanitize__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_angular_sanitize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_angular_sanitize__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_angular_animate__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_angular_animate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_angular_animate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_angular_loading_bar__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_angular_loading_bar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_angular_loading_bar__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_angular_rangeslider__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_angular_rangeslider___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_angular_rangeslider__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_angular_cookies__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_angular_cookies___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_angular_cookies__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_angular_touch__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_angular_touch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_angular_touch__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_fabric__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_fabric___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_fabric__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_ng_cropperjs__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_ng_cropperjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_ng_cropperjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_dexie__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_dexie___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_dexie__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_ng_dexie__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_ng_dexie___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_ng_dexie__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__js_angular_ngStorage__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__js_angular_ngStorage___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13__js_angular_ngStorage__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__js_Sortable_Sortable_min__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__js_Sortable_Sortable_min___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14__js_Sortable_Sortable_min__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__js_Sortable_ng_sortable_min__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__js_Sortable_ng_sortable_min___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15__js_Sortable_ng_sortable_min__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__js_angular_ui_bootstrap_0_12_1_ui_bootstrap_min__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__js_angular_ui_bootstrap_0_12_1_ui_bootstrap_min___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16__js_angular_ui_bootstrap_0_12_1_ui_bootstrap_min__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__js_angular_fullscreen_angular_fullscreen_min__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__js_angular_fullscreen_angular_fullscreen_min___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17__js_angular_fullscreen_angular_fullscreen_min__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_script_loader_js_angular_markdown_it_markdown_it_min__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_script_loader_js_angular_markdown_it_markdown_it_min___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18_script_loader_js_angular_markdown_it_markdown_it_min__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__js_angular_markdown_it_angular_markdown_it__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__js_angular_markdown_it_angular_markdown_it___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19__js_angular_markdown_it_angular_markdown_it__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__js_angular_fabric_fabric__ = __webpack_require__(30);






















let directoryPrefix = '';
let carousel = angular.module('ui.bootstrap.carousel', ['ui.bootstrap.transition']);

carousel.controller('CarouselController', ["$scope", "$timeout", "$transition", "$q", function ($scope, $timeout, $transition, $q) {}]);
carousel.directive('carousel', function () {
    return {};
});

let blake = angular.module('blake', ['ngRoute', 'ngSanitize', 'ui-rangeSlider', 'ui.bootstrap', 'ng-sortable', 'FBAngular', 'common.fabric', 'common.fabric.utilities', 'common.fabric.constants', 'ngAnimate', 'ngStorage', 'ngCookies', 'ngTouch', 'ngCropper', 'markdown', 'angular-loading-bar', 'ngdexie', 'ngdexie.ui']);
//blake.constant('dexie',window.Dexie);
blake.config(["ngDexieProvider", function (ngDexieProvider) {
    console.log("bootstrapping ngDexieProvider...");
    ngDexieProvider.setOptions({ name: 'lightbox_db', debug: false });
    ngDexieProvider.setConfiguration(function (db) {
        db.version(1).stores({
            cartItems: "++id,url,title,caption",
            imageToCrop: "id,url,fullCaption",
            croppedImage: "id,url,fullCaption"
        });
        db.on('error', function (err) {
            // Catch all uncatched DB-related errors and exceptions
            console.log("db error err=" + err);
        });
        console.log("ngDexie is ready!");
    });
}]);

blake.value("directoryPrefix", directoryPrefix);

blake.config(["$routeProvider", "$locationProvider", function ($routeProvider, $locationProvider) {
    $routeProvider.when(directoryPrefix + '/', {
        templateUrl: directoryPrefix + '/static/controllers/home/home.html',
        controller: "HomeController",
        controllerAs: 'home'
    });
    $routeProvider.when(directoryPrefix + '/staticpage/:initialPage', {
        templateUrl: directoryPrefix + '/static/controllers/staticpage/staticpage.html',
        controller: "StaticpageController",
        controllerAs: 'staticpage',
        reloadOnSearch: false
    });
    $routeProvider.when(directoryPrefix + '/object/:descId', {
        templateUrl: directoryPrefix + '/static/html/object.html',
        controller: "ObjectController"
    });
    $routeProvider.when(directoryPrefix + '/copy/:copyId', {
        templateUrl: directoryPrefix + '/static/controllers/copy/copy.html',
        controller: "CopyController",
        controllerAs: 'copyCtrl',
        reloadOnSearch: false
    });
    $routeProvider.when(directoryPrefix + '/exhibit/:copyId', {
        templateUrl: directoryPrefix + '/static/controllers/exhibit/exhibit.html',
        controller: "ExhibitController",
        controllerAs: 'exhibitCtrl',
        reloadOnSearch: false
    });
    $routeProvider.when(directoryPrefix + '/new-window/:what/:copyId', {
        templateUrl: directoryPrefix + '/static/controllers/showme/showme.html',
        controller: "ShowMeController",
        controllerAs: 'showme',
        reloadOnSearch: false
    });
    $routeProvider.when(directoryPrefix + '/work/:workId', {
        templateUrl: directoryPrefix + '/static/controllers/work/work.html',
        controller: "WorkController",
        controllerAs: 'workCtrl'
    });
    $routeProvider.when(directoryPrefix + '/search/', {
        templateUrl: directoryPrefix + '/static/controllers/search/search.html',
        controller: "SearchController",
        controllerAs: 'search'
    });
    $routeProvider.when(directoryPrefix + '/lightbox', {
        templateUrl: directoryPrefix + '/static/controllers/lightbox/lightbox.html',
        controller: "LightboxController",
        controllerAs: 'Lbc',
        reloadOnSearch: false
    });
    $routeProvider.when(directoryPrefix + '/cropper/:imgUrl', {
        templateUrl: directoryPrefix + '/static/controllers/lightbox/cropper.html',
        controller: "CropperController",
        controllerAs: 'crc',
        reloadOnSearch: false
    });

    $routeProvider.otherwise({ redirectTo: directoryPrefix + '/' });
    $locationProvider.html5Mode(true);
}]);

blake.config(["cfpLoadingBarProvider", function (cfpLoadingBarProvider) {
    cfpLoadingBarProvider.includeSpinner = false;
    cfpLoadingBarProvider.parentSelector = '.loading-bar-container';
}]);

blake.run(["$route", "$rootScope", "$location", function ($route, $rootScope, $location) {
    let original = $location.path;
    $location.path = function (path, reload) {
        if (reload === false) {
            let lastRoute = $route.current;
            let un = $rootScope.$on('$locationChangeSuccess', function () {
                $route.current = lastRoute;
                un();
            });
        }
        return original.apply($location, [path]);
    };
}]);

function requireAll(r) {
    r.keys().forEach(r);
}

requireAll(__webpack_require__(27));
requireAll(__webpack_require__(24));
requireAll(__webpack_require__(25));
requireAll(__webpack_require__(26));

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**!
 * Sortable
 * @author	RubaXa   <trash@rubaxa.org>
 * @license MIT
 */

(function (factory) {
	"use strict";

	if (true) {
		!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (typeof module != "undefined" && typeof module.exports != "undefined") {
		module.exports = factory();
	} else if (typeof Package !== "undefined") {
		Sortable = factory(); // export for Meteor.js
	} else {
		/* jshint sub:true */
		window["Sortable"] = factory();
	}
})(function () {
	"use strict";

	var dragEl,
	    parentEl,
	    ghostEl,
	    cloneEl,
	    rootEl,
	    nextEl,
	    scrollEl,
	    scrollParentEl,
	    lastEl,
	    lastCSS,
	    lastParentCSS,
	    oldIndex,
	    newIndex,
	    activeGroup,
	    autoScroll = {},
	    tapEvt,
	    touchEvt,
	    moved,


	/** @const */
	RSPACE = /\s+/g,
	    expando = 'Sortable' + new Date().getTime(),
	    win = window,
	    document = win.document,
	    parseInt = win.parseInt,
	    supportDraggable = !!('draggable' in document.createElement('div')),
	    supportCssPointerEvents = function (el) {
		el = document.createElement('x');
		el.style.cssText = 'pointer-events:auto';
		return el.style.pointerEvents === 'auto';
	}(),
	    _silent = false,
	    abs = Math.abs,
	    slice = [].slice,
	    touchDragOverListeners = [],
	    _autoScroll = _throttle(function ( /**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl) {
		// Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
		if (rootEl && options.scroll) {
			var el,
			    rect,
			    sens = options.scrollSensitivity,
			    speed = options.scrollSpeed,
			    x = evt.clientX,
			    y = evt.clientY,
			    winWidth = window.innerWidth,
			    winHeight = window.innerHeight,
			    vx,
			    vy;

			// Delect scrollEl
			if (scrollParentEl !== rootEl) {
				scrollEl = options.scroll;
				scrollParentEl = rootEl;

				if (scrollEl === true) {
					scrollEl = rootEl;

					do {
						if (scrollEl.offsetWidth < scrollEl.scrollWidth || scrollEl.offsetHeight < scrollEl.scrollHeight) {
							break;
						}
						/* jshint boss:true */
					} while (scrollEl = scrollEl.parentNode);
				}
			}

			if (scrollEl) {
				el = scrollEl;
				rect = scrollEl.getBoundingClientRect();
				vx = (abs(rect.right - x) <= sens) - (abs(rect.left - x) <= sens);
				vy = (abs(rect.bottom - y) <= sens) - (abs(rect.top - y) <= sens);
			}

			if (!(vx || vy)) {
				vx = (winWidth - x <= sens) - (x <= sens);
				vy = (winHeight - y <= sens) - (y <= sens);

				/* jshint expr:true */
				(vx || vy) && (el = win);
			}

			if (autoScroll.vx !== vx || autoScroll.vy !== vy || autoScroll.el !== el) {
				autoScroll.el = el;
				autoScroll.vx = vx;
				autoScroll.vy = vy;

				clearInterval(autoScroll.pid);

				if (el) {
					autoScroll.pid = setInterval(function () {
						if (el === win) {
							win.scrollTo(win.pageXOffset + vx * speed, win.pageYOffset + vy * speed);
						} else {
							vy && (el.scrollTop += vy * speed);
							vx && (el.scrollLeft += vx * speed);
						}
					}, 24);
				}
			}
		}
	}, 30),
	    _prepareGroup = function (options) {
		var group = options.group;

		if (!group || typeof group != 'object') {
			group = options.group = { name: group };
		}

		['pull', 'put'].forEach(function (key) {
			if (!(key in group)) {
				group[key] = true;
			}
		});

		options.groups = ' ' + group.name + (group.put.join ? ' ' + group.put.join(' ') : '') + ' ';
	};

	/**
  * @class  Sortable
  * @param  {HTMLElement}  el
  * @param  {Object}       [options]
  */
	function Sortable(el, options) {
		if (!(el && el.nodeType && el.nodeType === 1)) {
			throw 'Sortable: `el` must be HTMLElement, and not ' + {}.toString.call(el);
		}

		this.el = el; // root element
		this.options = options = _extend({}, options);

		// Export instance
		el[expando] = this;

		// Default options
		var defaults = {
			group: Math.random(),
			sort: true,
			disabled: false,
			store: null,
			handle: null,
			scroll: true,
			scrollSensitivity: 30,
			scrollSpeed: 10,
			draggable: /[uo]l/i.test(el.nodeName) ? 'li' : '>*',
			ghostClass: 'sortable-ghost',
			chosenClass: 'sortable-chosen',
			ignore: 'a, img',
			filter: null,
			animation: 0,
			setData: function (dataTransfer, dragEl) {
				dataTransfer.setData('Text', dragEl.textContent);
			},
			dropBubble: false,
			dragoverBubble: false,
			dataIdAttr: 'data-id',
			delay: 0,
			forceFallback: false,
			fallbackClass: 'sortable-fallback',
			fallbackOnBody: false
		};

		// Set default options
		for (var name in defaults) {
			!(name in options) && (options[name] = defaults[name]);
		}

		_prepareGroup(options);

		// Bind all private methods
		for (var fn in this) {
			if (fn.charAt(0) === '_') {
				this[fn] = this[fn].bind(this);
			}
		}

		// Setup drag mode
		this.nativeDraggable = options.forceFallback ? false : supportDraggable;

		// Bind events
		_on(el, 'mousedown', this._onTapStart);
		_on(el, 'touchstart', this._onTapStart);

		if (this.nativeDraggable) {
			_on(el, 'dragover', this);
			_on(el, 'dragenter', this);
		}

		touchDragOverListeners.push(this._onDragOver);

		// Restore sorting
		options.store && this.sort(options.store.get(this));
	}

	Sortable.prototype = /** @lends Sortable.prototype */{
		constructor: Sortable,

		_onTapStart: function ( /** Event|TouchEvent */evt) {
			var _this = this,
			    el = this.el,
			    options = this.options,
			    type = evt.type,
			    touch = evt.touches && evt.touches[0],
			    target = (touch || evt).target,
			    originalTarget = target,
			    filter = options.filter;

			if (type === 'mousedown' && evt.button !== 0 || options.disabled) {
				return; // only left button or enabled
			}

			target = _closest(target, options.draggable, el);

			if (!target) {
				return;
			}

			// get the index of the dragged element within its parent
			oldIndex = _index(target);

			// Check filter
			if (typeof filter === 'function') {
				if (filter.call(this, evt, target, this)) {
					_dispatchEvent(_this, originalTarget, 'filter', target, el, oldIndex);
					evt.preventDefault();
					return; // cancel dnd
				}
			} else if (filter) {
				filter = filter.split(',').some(function (criteria) {
					criteria = _closest(originalTarget, criteria.trim(), el);

					if (criteria) {
						_dispatchEvent(_this, criteria, 'filter', target, el, oldIndex);
						return true;
					}
				});

				if (filter) {
					evt.preventDefault();
					return; // cancel dnd
				}
			}

			if (options.handle && !_closest(originalTarget, options.handle, el)) {
				return;
			}

			// Prepare `dragstart`
			this._prepareDragStart(evt, touch, target);
		},

		_prepareDragStart: function ( /** Event */evt, /** Touch */touch, /** HTMLElement */target) {
			var _this = this,
			    el = _this.el,
			    options = _this.options,
			    ownerDocument = el.ownerDocument,
			    dragStartFn;

			if (target && !dragEl && target.parentNode === el) {
				tapEvt = evt;

				rootEl = el;
				dragEl = target;
				parentEl = dragEl.parentNode;
				nextEl = dragEl.nextSibling;
				activeGroup = options.group;

				dragStartFn = function () {
					// Delayed drag has been triggered
					// we can re-enable the events: touchmove/mousemove
					_this._disableDelayedDrag();

					// Make the element draggable
					dragEl.draggable = true;

					// Chosen item
					_toggleClass(dragEl, _this.options.chosenClass, true);

					// Bind the events: dragstart/dragend
					_this._triggerDragStart(touch);
				};

				// Disable "draggable"
				options.ignore.split(',').forEach(function (criteria) {
					_find(dragEl, criteria.trim(), _disableDraggable);
				});

				_on(ownerDocument, 'mouseup', _this._onDrop);
				_on(ownerDocument, 'touchend', _this._onDrop);
				_on(ownerDocument, 'touchcancel', _this._onDrop);

				if (options.delay) {
					// If the user moves the pointer or let go the click or touch
					// before the delay has been reached:
					// disable the delayed drag
					_on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
					_on(ownerDocument, 'touchend', _this._disableDelayedDrag);
					_on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
					_on(ownerDocument, 'mousemove', _this._disableDelayedDrag);
					_on(ownerDocument, 'touchmove', _this._disableDelayedDrag);

					_this._dragStartTimer = setTimeout(dragStartFn, options.delay);
				} else {
					dragStartFn();
				}
			}
		},

		_disableDelayedDrag: function () {
			var ownerDocument = this.el.ownerDocument;

			clearTimeout(this._dragStartTimer);
			_off(ownerDocument, 'mouseup', this._disableDelayedDrag);
			_off(ownerDocument, 'touchend', this._disableDelayedDrag);
			_off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
			_off(ownerDocument, 'mousemove', this._disableDelayedDrag);
			_off(ownerDocument, 'touchmove', this._disableDelayedDrag);
		},

		_triggerDragStart: function ( /** Touch */touch) {
			if (touch) {
				// Touch device support
				tapEvt = {
					target: dragEl,
					clientX: touch.clientX,
					clientY: touch.clientY
				};

				this._onDragStart(tapEvt, 'touch');
			} else if (!this.nativeDraggable) {
				this._onDragStart(tapEvt, true);
			} else {
				_on(dragEl, 'dragend', this);
				_on(rootEl, 'dragstart', this._onDragStart);
			}

			try {
				if (document.selection) {
					document.selection.empty();
				} else {
					window.getSelection().removeAllRanges();
				}
			} catch (err) {}
		},

		_dragStarted: function () {
			if (rootEl && dragEl) {
				// Apply effect
				_toggleClass(dragEl, this.options.ghostClass, true);

				Sortable.active = this;

				// Drag start event
				_dispatchEvent(this, rootEl, 'start', dragEl, rootEl, oldIndex);
			}
		},

		_emulateDragOver: function () {
			if (touchEvt) {
				if (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY) {
					return;
				}

				this._lastX = touchEvt.clientX;
				this._lastY = touchEvt.clientY;

				if (!supportCssPointerEvents) {
					_css(ghostEl, 'display', 'none');
				}

				var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY),
				    parent = target,
				    groupName = ' ' + this.options.group.name + '',
				    i = touchDragOverListeners.length;

				if (parent) {
					do {
						if (parent[expando] && parent[expando].options.groups.indexOf(groupName) > -1) {
							while (i--) {
								touchDragOverListeners[i]({
									clientX: touchEvt.clientX,
									clientY: touchEvt.clientY,
									target: target,
									rootEl: parent
								});
							}

							break;
						}

						target = parent; // store last element
					}
					/* jshint boss:true */
					while (parent = parent.parentNode);
				}

				if (!supportCssPointerEvents) {
					_css(ghostEl, 'display', '');
				}
			}
		},

		_onTouchMove: function ( /**TouchEvent*/evt) {
			if (tapEvt) {
				// only set the status to dragging, when we are actually dragging
				if (!Sortable.active) {
					this._dragStarted();
				}

				// as well as creating the ghost element on the document body
				this._appendGhost();

				var touch = evt.touches ? evt.touches[0] : evt,
				    dx = touch.clientX - tapEvt.clientX,
				    dy = touch.clientY - tapEvt.clientY,
				    translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';

				moved = true;
				touchEvt = touch;

				_css(ghostEl, 'webkitTransform', translate3d);
				_css(ghostEl, 'mozTransform', translate3d);
				_css(ghostEl, 'msTransform', translate3d);
				_css(ghostEl, 'transform', translate3d);

				evt.preventDefault();
			}
		},

		_appendGhost: function () {
			if (!ghostEl) {
				var rect = dragEl.getBoundingClientRect(),
				    css = _css(dragEl),
				    options = this.options,
				    ghostRect;

				ghostEl = dragEl.cloneNode(true);

				_toggleClass(ghostEl, options.ghostClass, false);
				_toggleClass(ghostEl, options.fallbackClass, true);

				_css(ghostEl, 'top', rect.top - parseInt(css.marginTop, 10));
				_css(ghostEl, 'left', rect.left - parseInt(css.marginLeft, 10));
				_css(ghostEl, 'width', rect.width);
				_css(ghostEl, 'height', rect.height);
				_css(ghostEl, 'opacity', '0.8');
				_css(ghostEl, 'position', 'fixed');
				_css(ghostEl, 'zIndex', '100000');
				_css(ghostEl, 'pointerEvents', 'none');

				options.fallbackOnBody && document.body.appendChild(ghostEl) || rootEl.appendChild(ghostEl);

				// Fixing dimensions.
				ghostRect = ghostEl.getBoundingClientRect();
				_css(ghostEl, 'width', rect.width * 2 - ghostRect.width);
				_css(ghostEl, 'height', rect.height * 2 - ghostRect.height);
			}
		},

		_onDragStart: function ( /**Event*/evt, /**boolean*/useFallback) {
			var dataTransfer = evt.dataTransfer,
			    options = this.options;

			this._offUpEvents();

			if (activeGroup.pull == 'clone') {
				cloneEl = dragEl.cloneNode(true);
				_css(cloneEl, 'display', 'none');
				rootEl.insertBefore(cloneEl, dragEl);
			}

			if (useFallback) {

				if (useFallback === 'touch') {
					// Bind touch events
					_on(document, 'touchmove', this._onTouchMove);
					_on(document, 'touchend', this._onDrop);
					_on(document, 'touchcancel', this._onDrop);
				} else {
					// Old brwoser
					_on(document, 'mousemove', this._onTouchMove);
					_on(document, 'mouseup', this._onDrop);
				}

				this._loopId = setInterval(this._emulateDragOver, 50);
			} else {
				if (dataTransfer) {
					dataTransfer.effectAllowed = 'move';
					options.setData && options.setData.call(this, dataTransfer, dragEl);
				}

				_on(document, 'drop', this);
				setTimeout(this._dragStarted, 0);
			}
		},

		_onDragOver: function ( /**Event*/evt) {
			var el = this.el,
			    target,
			    dragRect,
			    revert,
			    options = this.options,
			    group = options.group,
			    groupPut = group.put,
			    isOwner = activeGroup === group,
			    canSort = options.sort;

			if (evt.preventDefault !== void 0) {
				evt.preventDefault();
				!options.dragoverBubble && evt.stopPropagation();
			}

			moved = true;

			if (activeGroup && !options.disabled && (isOwner ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list
			: activeGroup.pull && groupPut && (activeGroup.name === group.name || // by Name
			groupPut.indexOf && ~groupPut.indexOf(activeGroup.name) // by Array
			)) && (evt.rootEl === void 0 || evt.rootEl === this.el) // touch fallback
			) {
					// Smart auto-scrolling
					_autoScroll(evt, options, this.el);

					if (_silent) {
						return;
					}

					target = _closest(evt.target, options.draggable, el);
					dragRect = dragEl.getBoundingClientRect();

					if (revert) {
						_cloneHide(true);

						if (cloneEl || nextEl) {
							rootEl.insertBefore(dragEl, cloneEl || nextEl);
						} else if (!canSort) {
							rootEl.appendChild(dragEl);
						}

						return;
					}

					if (el.children.length === 0 || el.children[0] === ghostEl || el === evt.target && (target = _ghostIsLast(el, evt))) {

						if (target) {
							if (target.animated) {
								return;
							}

							targetRect = target.getBoundingClientRect();
						}

						_cloneHide(isOwner);

						if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect) !== false) {
							if (!dragEl.contains(el)) {
								el.appendChild(dragEl);
								parentEl = el; // actualization
							}

							this._animate(dragRect, dragEl);
							target && this._animate(targetRect, target);
						}
					} else if (target && !target.animated && target !== dragEl && target.parentNode[expando] !== void 0) {
						if (lastEl !== target) {
							lastEl = target;
							lastCSS = _css(target);
							lastParentCSS = _css(target.parentNode);
						}

						var targetRect = target.getBoundingClientRect(),
						    width = targetRect.right - targetRect.left,
						    height = targetRect.bottom - targetRect.top,
						    floating = /left|right|inline/.test(lastCSS.cssFloat + lastCSS.display) || lastParentCSS.display == 'flex' && lastParentCSS['flex-direction'].indexOf('row') === 0,
						    isWide = target.offsetWidth > dragEl.offsetWidth,
						    isLong = target.offsetHeight > dragEl.offsetHeight,
						    halfway = (floating ? (evt.clientX - targetRect.left) / width : (evt.clientY - targetRect.top) / height) > 0.5,
						    nextSibling = target.nextElementSibling,
						    moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect),
						    after;

						if (moveVector !== false) {
							_silent = true;
							setTimeout(_unsilent, 30);

							_cloneHide(isOwner);

							if (moveVector === 1 || moveVector === -1) {
								after = moveVector === 1;
							} else if (floating) {
								var elTop = dragEl.offsetTop,
								    tgTop = target.offsetTop;

								if (elTop === tgTop) {
									after = target.previousElementSibling === dragEl && !isWide || halfway && isWide;
								} else {
									after = tgTop > elTop;
								}
							} else {
								after = nextSibling !== dragEl && !isLong || halfway && isLong;
							}

							if (!dragEl.contains(el)) {
								if (after && !nextSibling) {
									el.appendChild(dragEl);
								} else {
									target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
								}
							}

							parentEl = dragEl.parentNode; // actualization

							this._animate(dragRect, dragEl);
							this._animate(targetRect, target);
						}
					}
				}
		},

		_animate: function (prevRect, target) {
			var ms = this.options.animation;

			if (ms) {
				var currentRect = target.getBoundingClientRect();

				_css(target, 'transition', 'none');
				_css(target, 'transform', 'translate3d(' + (prevRect.left - currentRect.left) + 'px,' + (prevRect.top - currentRect.top) + 'px,0)');

				target.offsetWidth; // repaint

				_css(target, 'transition', 'all ' + ms + 'ms');
				_css(target, 'transform', 'translate3d(0,0,0)');

				clearTimeout(target.animated);
				target.animated = setTimeout(function () {
					_css(target, 'transition', '');
					_css(target, 'transform', '');
					target.animated = false;
				}, ms);
			}
		},

		_offUpEvents: function () {
			var ownerDocument = this.el.ownerDocument;

			_off(document, 'touchmove', this._onTouchMove);
			_off(ownerDocument, 'mouseup', this._onDrop);
			_off(ownerDocument, 'touchend', this._onDrop);
			_off(ownerDocument, 'touchcancel', this._onDrop);
		},

		_onDrop: function ( /**Event*/evt) {
			var el = this.el,
			    options = this.options;

			clearInterval(this._loopId);
			clearInterval(autoScroll.pid);
			clearTimeout(this._dragStartTimer);

			// Unbind events
			_off(document, 'mousemove', this._onTouchMove);

			if (this.nativeDraggable) {
				_off(document, 'drop', this);
				_off(el, 'dragstart', this._onDragStart);
			}

			this._offUpEvents();

			if (evt) {
				if (moved) {
					evt.preventDefault();
					!options.dropBubble && evt.stopPropagation();
				}

				ghostEl && ghostEl.parentNode.removeChild(ghostEl);

				if (dragEl) {
					if (this.nativeDraggable) {
						_off(dragEl, 'dragend', this);
					}

					_disableDraggable(dragEl);

					// Remove class's
					_toggleClass(dragEl, this.options.ghostClass, false);
					_toggleClass(dragEl, this.options.chosenClass, false);

					if (rootEl !== parentEl) {
						newIndex = _index(dragEl);

						if (newIndex >= 0) {
							// drag from one list and drop into another
							_dispatchEvent(null, parentEl, 'sort', dragEl, rootEl, oldIndex, newIndex);
							_dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);

							// Add event
							_dispatchEvent(null, parentEl, 'add', dragEl, rootEl, oldIndex, newIndex);

							// Remove event
							_dispatchEvent(this, rootEl, 'remove', dragEl, rootEl, oldIndex, newIndex);
						}
					} else {
						// Remove clone
						cloneEl && cloneEl.parentNode.removeChild(cloneEl);

						if (dragEl.nextSibling !== nextEl) {
							// Get the index of the dragged element within its parent
							newIndex = _index(dragEl);

							if (newIndex >= 0) {
								// drag & drop within the same list
								_dispatchEvent(this, rootEl, 'update', dragEl, rootEl, oldIndex, newIndex);
								_dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);
							}
						}
					}

					if (Sortable.active) {
						if (newIndex === null || newIndex === -1) {
							newIndex = oldIndex;
						}

						_dispatchEvent(this, rootEl, 'end', dragEl, rootEl, oldIndex, newIndex);

						// Save sorting
						this.save();
					}
				}

				// Nulling
				rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = scrollEl = scrollParentEl = tapEvt = touchEvt = moved = newIndex = lastEl = lastCSS = activeGroup = Sortable.active = null;
			}
		},

		handleEvent: function ( /**Event*/evt) {
			var type = evt.type;

			if (type === 'dragover' || type === 'dragenter') {
				if (dragEl) {
					this._onDragOver(evt);
					_globalDragOver(evt);
				}
			} else if (type === 'drop' || type === 'dragend') {
				this._onDrop(evt);
			}
		},

		/**
   * Serializes the item into an array of string.
   * @returns {String[]}
   */
		toArray: function () {
			var order = [],
			    el,
			    children = this.el.children,
			    i = 0,
			    n = children.length,
			    options = this.options;

			for (; i < n; i++) {
				el = children[i];
				if (_closest(el, options.draggable, this.el)) {
					order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
				}
			}

			return order;
		},

		/**
   * Sorts the elements according to the array.
   * @param  {String[]}  order  order of the items
   */
		sort: function (order) {
			var items = {},
			    rootEl = this.el;

			this.toArray().forEach(function (id, i) {
				var el = rootEl.children[i];

				if (_closest(el, this.options.draggable, rootEl)) {
					items[id] = el;
				}
			}, this);

			order.forEach(function (id) {
				if (items[id]) {
					rootEl.removeChild(items[id]);
					rootEl.appendChild(items[id]);
				}
			});
		},

		/**
   * Save the current sorting
   */
		save: function () {
			var store = this.options.store;
			store && store.set(this);
		},

		/**
   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
   * @param   {HTMLElement}  el
   * @param   {String}       [selector]  default: `options.draggable`
   * @returns {HTMLElement|null}
   */
		closest: function (el, selector) {
			return _closest(el, selector || this.options.draggable, this.el);
		},

		/**
   * Set/get option
   * @param   {string} name
   * @param   {*}      [value]
   * @returns {*}
   */
		option: function (name, value) {
			var options = this.options;

			if (value === void 0) {
				return options[name];
			} else {
				options[name] = value;

				if (name === 'group') {
					_prepareGroup(options);
				}
			}
		},

		/**
   * Destroy
   */
		destroy: function () {
			var el = this.el;

			el[expando] = null;

			_off(el, 'mousedown', this._onTapStart);
			_off(el, 'touchstart', this._onTapStart);

			if (this.nativeDraggable) {
				_off(el, 'dragover', this);
				_off(el, 'dragenter', this);
			}

			// Remove draggable attributes
			Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
				el.removeAttribute('draggable');
			});

			touchDragOverListeners.splice(touchDragOverListeners.indexOf(this._onDragOver), 1);

			this._onDrop();

			this.el = el = null;
		}
	};

	function _cloneHide(state) {
		if (cloneEl && cloneEl.state !== state) {
			_css(cloneEl, 'display', state ? 'none' : '');
			!state && cloneEl.state && rootEl.insertBefore(cloneEl, dragEl);
			cloneEl.state = state;
		}
	}

	function _closest( /**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx) {
		if (el) {
			ctx = ctx || document;
			selector = selector.split('.');

			var tag = selector.shift().toUpperCase(),
			    re = new RegExp('\\s(' + selector.join('|') + ')(?=\\s)', 'g');

			do {
				if (tag === '>*' && el.parentNode === ctx || (tag === '' || el.nodeName.toUpperCase() == tag) && (!selector.length || ((' ' + el.className + ' ').match(re) || []).length == selector.length)) {
					return el;
				}
			} while (el !== ctx && (el = el.parentNode));
		}

		return null;
	}

	function _globalDragOver( /**Event*/evt) {
		if (evt.dataTransfer) {
			evt.dataTransfer.dropEffect = 'move';
		}
		evt.preventDefault();
	}

	function _on(el, event, fn) {
		el.addEventListener(event, fn, false);
	}

	function _off(el, event, fn) {
		el.removeEventListener(event, fn, false);
	}

	function _toggleClass(el, name, state) {
		if (el) {
			if (el.classList) {
				el.classList[state ? 'add' : 'remove'](name);
			} else {
				var className = (' ' + el.className + ' ').replace(RSPACE, ' ').replace(' ' + name + ' ', ' ');
				el.className = (className + (state ? ' ' + name : '')).replace(RSPACE, ' ');
			}
		}
	}

	function _css(el, prop, val) {
		var style = el && el.style;

		if (style) {
			if (val === void 0) {
				if (document.defaultView && document.defaultView.getComputedStyle) {
					val = document.defaultView.getComputedStyle(el, '');
				} else if (el.currentStyle) {
					val = el.currentStyle;
				}

				return prop === void 0 ? val : val[prop];
			} else {
				if (!(prop in style)) {
					prop = '-webkit-' + prop;
				}

				style[prop] = val + (typeof val === 'string' ? '' : 'px');
			}
		}
	}

	function _find(ctx, tagName, iterator) {
		if (ctx) {
			var list = ctx.getElementsByTagName(tagName),
			    i = 0,
			    n = list.length;

			if (iterator) {
				for (; i < n; i++) {
					iterator(list[i], i);
				}
			}

			return list;
		}

		return [];
	}

	function _dispatchEvent(sortable, rootEl, name, targetEl, fromEl, startIndex, newIndex) {
		var evt = document.createEvent('Event'),
		    options = (sortable || rootEl[expando]).options,
		    onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);

		evt.initEvent(name, true, true);

		evt.to = rootEl;
		evt.from = fromEl || rootEl;
		evt.item = targetEl || rootEl;
		evt.clone = cloneEl;

		evt.oldIndex = startIndex;
		evt.newIndex = newIndex;

		rootEl.dispatchEvent(evt);

		if (options[onName]) {
			options[onName].call(sortable, evt);
		}
	}

	function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect) {
		var evt,
		    sortable = fromEl[expando],
		    onMoveFn = sortable.options.onMove,
		    retVal;

		evt = document.createEvent('Event');
		evt.initEvent('move', true, true);

		evt.to = toEl;
		evt.from = fromEl;
		evt.dragged = dragEl;
		evt.draggedRect = dragRect;
		evt.related = targetEl || toEl;
		evt.relatedRect = targetRect || toEl.getBoundingClientRect();

		fromEl.dispatchEvent(evt);

		if (onMoveFn) {
			retVal = onMoveFn.call(sortable, evt);
		}

		return retVal;
	}

	function _disableDraggable(el) {
		el.draggable = false;
	}

	function _unsilent() {
		_silent = false;
	}

	/** @returns {HTMLElement|false} */
	function _ghostIsLast(el, evt) {
		var lastEl = el.lastElementChild,
		    rect = lastEl.getBoundingClientRect();

		return (evt.clientY - (rect.top + rect.height) > 5 || evt.clientX - (rect.right + rect.width) > 5) && lastEl; // min delta
	}

	/**
  * Generate id
  * @param   {HTMLElement} el
  * @returns {String}
  * @private
  */
	function _generateId(el) {
		var str = el.tagName + el.className + el.src + el.href + el.textContent,
		    i = str.length,
		    sum = 0;

		while (i--) {
			sum += str.charCodeAt(i);
		}

		return sum.toString(36);
	}

	/**
  * Returns the index of an element within its parent
  * @param  {HTMLElement} el
  * @return {number}
  */
	function _index(el) {
		var index = 0;

		if (!el || !el.parentNode) {
			return -1;
		}

		while (el && (el = el.previousElementSibling)) {
			if (el.nodeName.toUpperCase() !== 'TEMPLATE') {
				index++;
			}
		}

		return index;
	}

	function _throttle(callback, ms) {
		var args, _this;

		return function () {
			if (args === void 0) {
				args = arguments;
				_this = this;

				setTimeout(function () {
					if (args.length === 1) {
						callback.call(_this, args[0]);
					} else {
						callback.apply(_this, args);
					}

					args = void 0;
				}, ms);
			}
		};
	}

	function _extend(dst, src) {
		if (dst && src) {
			for (var key in src) {
				if (src.hasOwnProperty(key)) {
					dst[key] = src[key];
				}
			}
		}

		return dst;
	}

	// Export utils
	Sortable.utils = {
		on: _on,
		off: _off,
		css: _css,
		find: _find,
		is: function (el, selector) {
			return !!_closest(el, selector, el);
		},
		extend: _extend,
		throttle: _throttle,
		closest: _closest,
		toggleClass: _toggleClass,
		index: _index
	};

	/**
  * Create sortable instance
  * @param {HTMLElement}  el
  * @param {Object}      [options]
  */
	Sortable.create = function (el, options) {
		return new Sortable(el, options);
	};

	// Export
	Sortable.version = '1.4.2';
	return Sortable;
});

/***/ }),
/* 120 */
/***/ (function(module, exports) {

angular.module('common.fabric.canvas', ['common.fabric.window']).service('FabricCanvas', ['FabricWindow', '$rootScope', function (FabricWindow, $rootScope) {

	var self = {
		canvasId: null,
		element: null,
		canvas: null
	};

	function createId() {
		return Math.floor(Math.random() * 10000);
	}

	self.setElement = function (element) {
		self.element = element;
		$rootScope.$broadcast('canvas:element:selected');
	};

	self.createCanvas = function () {
		self.canvasId = 'fabric-canvas-' + createId();
		self.element.attr('id', self.canvasId);
		self.canvas = new FabricWindow.Canvas(self.canvasId);
		$rootScope.$broadcast('canvas:created');

		return self.canvas;
	};

	self.getCanvas = function () {
		return self.canvas;
	};

	self.getCanvasId = function () {
		return self.canvasId;
	};

	return self;
}]);

/***/ }),
/* 121 */
/***/ (function(module, exports) {

angular.module('common.fabric.constants', []).service('FabricConstants', [function () {

	var objectDefaults = {
		rotatingPointOffset: 20,
		padding: 0,
		borderColor: 'EEF6FC',
		cornerColor: 'rgba(64, 159, 221, 1)',
		cornerSize: 10,
		transparentCorners: false,
		hasRotatingPoint: true,
		centerTransform: true
	};

	return {

		presetSizes: [{
			name: 'Portrait (8.5 x 11)',
			height: 1947,
			width: 1510
		}, {
			name: 'Landscape (11 x 8.5)',
			width: 1947,
			height: 1510
		}, {
			name: 'Business Card (3.5 x 2)',
			height: 368,
			width: 630
		}, {
			name: 'Postcard (6 x 4)',
			height: 718,
			width: 1068
		}, {
			name: 'Content/Builder Product Thumbnail',
			height: 400,
			width: 760
		}, {
			name: 'Badge',
			height: 400,
			width: 400
		}, {
			name: 'Facebook Profile Picture',
			height: 300,
			width: 300
		}, {
			name: 'Facebook Cover Picture',
			height: 315,
			width: 851
		}, {
			name: 'Facebook Photo Post (Landscape)',
			height: 504,
			width: 403
		}, {
			name: 'Facebook Photo Post (Horizontal)',
			height: 1008,
			width: 806
		}, {
			name: 'Facebook Full-Width Photo Post',
			height: 504,
			width: 843
		}],

		fonts: [{ name: 'Arial' }, { name: 'Lora' }, { name: 'Croissant One' }, { name: 'Architects Daughter' }, { name: 'Emblema One' }, { name: 'Graduate' }, { name: 'Hammersmith One' }, { name: 'Oswald' }, { name: 'Oxygen' }, { name: 'Krona One' }, { name: 'Indie Flower' }, { name: 'Courgette' }, { name: 'Gruppo' }, { name: 'Ranchers' }],

		shapeCategories: [{
			name: 'Popular Shapes',
			shapes: ['arrow6', 'bubble4', 'circle1', 'rectangle1', 'star1', 'triangle1']
		}, {
			name: 'Simple Shapes',
			shapes: ['circle1', 'heart1', 'rectangle1', 'triangle1', 'star1', 'star2', 'star3', 'square1']
		}, {
			name: 'Arrows & Pointers',
			shapes: ['arrow1', 'arrow9', 'arrow3', 'arrow6']
		}, {
			name: 'Bubbles & Balloons',
			shapes: ['bubble5', 'bubble4']
		}, {
			name: 'Check Marks',
			shapes: []
		}, {
			name: 'Badges',
			shapes: ['badge1', 'badge2', 'badge4', 'badge5', 'badge6']
		}],

		JSONExportProperties: ['height', 'width', 'background', 'objects', 'originalHeight', 'originalWidth', 'originalScaleX', 'originalScaleY', 'originalLeft', 'originalTop', 'lineHeight', 'lockMovementX', 'lockMovementY', 'lockScalingX', 'lockScalingY', 'lockUniScaling', 'lockRotation', 'lockObject', 'id', 'isTinted', 'filters'],

		shapeDefaults: angular.extend({
			fill: '#0088cc'
		}, objectDefaults),

		textDefaults: angular.extend({
			originX: 'left',
			scaleX: 1,
			scaleY: 1,
			fontFamily: 'Arial',
			fontSize: 40,
			fill: '#454545',
			textAlign: 'left'
		}, objectDefaults)

	};
}]);

/***/ }),
/* 122 */
/***/ (function(module, exports) {

angular.module('common.fabric.directive', ['common.fabric.canvas']).directive('fabric', ['$timeout', 'FabricCanvas', '$window', function ($timeout, FabricCanvas, $window) {

	return {
		scope: {
			fabric: '='
		},
		controller: ["$scope", "$element", function ($scope, $element) {
			FabricCanvas.setElement($element);
			FabricCanvas.createCanvas();

			// Continue rendering the canvas until the user clicks
			// to avoid the "calcOffset" bug upon load.
			$('body').on('click', 'canvas', function () {
				if ($scope.fabric.setUserHasClickedCanvas) {
					$scope.fabric.setUserHasClickedCanvas(true);
				}
			});

			//
			// Watching Controller Variables
			// ============================================================
			$scope.$watch('fabric.canvasBackgroundColor', function (newVal) {
				if ($scope.fabric.setCanvasBackgroundColor) {
					$scope.fabric.setCanvasBackgroundColor(newVal);
				}
			});

			$scope.$watch('fabric.selectedObject.text', function (newVal) {
				if (typeof newVal === 'string') {
					$scope.fabric.setText(newVal);
					$scope.fabric.render();
				}
			});

			$scope.$watch('fabric.selectedObject.fontSize', function (newVal) {
				if (typeof newVal === 'string' || typeof newVal === 'number') {
					$scope.fabric.setFontSize(newVal);
					$scope.fabric.render();
				}
			});

			$scope.$watch('fabric.selectedObject.lineHeight', function (newVal) {
				if (typeof newVal === 'string' || typeof newVal === 'number') {
					$scope.fabric.setLineHeight(newVal);
					$scope.fabric.render();
				}
			});

			$scope.$watch('fabric.selectedObject.textAlign', function (newVal) {
				if (typeof newVal === 'string') {
					$scope.fabric.setTextAlign(newVal);
					$scope.fabric.render();
				}
			});

			$scope.$watch('fabric.selectedObject.fontFamily', function (newVal) {
				if (typeof newVal === 'string' && newVal) {
					$scope.fabric.setFontFamily(newVal);
					$scope.fabric.render();
				}
			});

			$scope.$watch('fabric.selectedObject.opacity', function (newVal) {
				if (typeof newVal === 'string' || typeof newVal === 'number') {
					$scope.fabric.setOpacity(newVal);
					$scope.fabric.render();
				}
			});

			$scope.$watch('fabric.selectedObject.fill', function (newVal) {
				if (typeof newVal === 'string') {
					$scope.fabric.setFill(newVal);
					$scope.fabric.render();
				}
			});

			$scope.$watch('fabric.selectedObject.tint', function (newVal) {
				if (typeof newVal === 'string') {
					$scope.fabric.setTint(newVal);
					$scope.fabric.render();
				}
			});
		}]
	};
}]);

/***/ }),
/* 123 */
/***/ (function(module, exports) {

angular.module('common.fabric.dirtyStatus', []).service('FabricDirtyStatus', ['$window', function ($window) {

	var self = {
		dirty: false
	};

	function checkSaveStatus() {
		if (self.isDirty()) {
			return "Oops! You have unsaved changes.\n\nPlease save before leaving so you don't lose any work.";
		}
	}

	self.endListening = function () {
		$window.onbeforeunload = null;
		$window.onhashchange = null;
	};

	self.startListening = function () {
		$window.onbeforeunload = checkSaveStatus;
		$window.onhashchange = checkSaveStatus;
	};

	self.isDirty = function () {
		return self.dirty;
	};

	self.setDirty = function (value) {
		self.dirty = value;
	};

	return self;
}]);

/***/ }),
/* 124 */
/***/ (function(module, exports) {

angular.module('common.fabric.utilities', []).directive('parentClick', ['$timeout', function ($timeout) {
	return {
		scope: {
			parentClick: '&'
		},
		link: function (scope, element) {
			element.mousedown(function () {
				$timeout(function () {
					scope.parentClick();
				});
			}).children().mousedown(function (e) {
				e.stopPropagation();
			});
		}
	};
}]).factory('Keypress', [function () {
	var self = {};

	self.onSave = function (cb) {
		$(document).keydown(function (event) {
			// If Control or Command key is pressed and the S key is pressed
			// run save function. 83 is the key code for S.
			if ((event.ctrlKey || event.metaKey) && event.which === 83) {
				// Save Function
				event.preventDefault();

				cb();

				return false;
			}
		});
	};

	return self;
}]).filter('reverse', [function () {
	return function (items) {
		if (items) {
			return items.slice().reverse();
		}
	};
}]);

/***/ }),
/* 125 */
/***/ (function(module, exports) {

angular.module('common.fabric.window', []).factory('FabricWindow', ['$window', function ($window) {

	return $window.fabric;
}]);

/***/ }),
/* 126 */
/***/ (function(module, exports) {

angular.module('blake').factory('alertFactory', ['$rootScope', function ($rootScope) {
    var alertService = {};
    $rootScope.alerts = [];

    // will automatidally close
    // types are success, warning, info, danger
    alertService.add = function (type, msg, delay) {
        var alert = { 'type': type, 'msg': msg };
        $rootScope.alerts.push(alert);
        if (!delay) {
            delay = 3200; // default delay is 2500ms
        }
        window.setTimeout(function () {
            var index = $rootScope.alerts.indexOf(alert);
            if (index > -1) {
                $rootScope.alerts.splice(index, 1);
                $rootScope.$apply(); // refresh GUI
            }
        }, delay);
    };

    return alertService;
}]);

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* services.js */

// don't forget to declare this service module as a dependency in your main app constructor!

angular.module('blake').factory('alertService', ["$rootScope", function ($rootScope) {
    var alertService = {};

    // create an array of alerts available globally
    $rootScope.alerts = [];

    alertService.add = function (type, msg) {
        $rootScope.alerts.push({ 'type': type, 'msg': msg });
        window.setTimeout(function () {
            var index = $rootScope.alerts.indexOf(alert);
            if (index > -1) {
                $rootScope.alerts.splice(index, 1);
                $rootScope.$apply(); // refresh GUI
            }
        }, 2500);
    };

    alertService.closeAlert = function (index) {
        $rootScope.alerts.splice(index, 1);
    };

    return alertService;
}]);

/***/ }),
/* 128 */
/***/ (function(module, exports) {

angular.module("blake").factory("BlakeCopy", ["GenericService", function (GenericService) {
    /**
     * Constructor takes a config object and creates a BlakeCopy, with child objects transformed into the
     * BlakeObjects.
     *
     * @param config
     */
    var constructor = function (config) {
        var copy = angular.copy(config);
        copy.header = angular.fromJson(config.header);
        copy.source = angular.fromJson(config.source);

        /*if (config.objects) {
         for (i = 0; i < config.objects.length; i++) {
         copy.objects.push(BlakeObject.create(config.objects[i]));
         }
         }*/
        //FIXME:: Figure out why the Laocoon work's title isn't getting encoded in utf8
        if (copy.title == "LaocoÃ¶n") {
            copy.title = "Laocoön";
        }
        switch (copy.archive_copy_id) {
            case 'biblicalwc':
            case 'biblicaltemperas':
            //case 'but543':
            case 'letters':
            case 'gravepd':
            case 'pid':
            case 'gravewc':
            case 'gravewd':
            case 'cpd':
            case 'pencil1':
            case 'allegropenseroso':
            case 'miltons':
                copy.virtual = true;
                break;
            default:
                copy.virtual = false;
                break;
        }

        return copy;
    };

    return GenericService(constructor);
}]);

/***/ }),
/* 129 */
/***/ (function(module, exports) {

angular.module("blake").factory("BlakeDataService", ["$rootScope", "$log", "$http", "$q", "$location", "BlakeObject", "BlakeCopy", "BlakeWork", "BlakeFragmentPair", "directoryPrefix", function ($rootScope, $log, $http, $q, $location, BlakeObject, BlakeCopy, BlakeWork, BlakeFragmentPair, directoryPrefix) {
    /**
     * For the time being, all data accessor functions should be placed here.  This service should mirror the API
     * of the back-end BlakeDataService.
     */

    var blakeData = {
        featured: {},
        work: {},
        workCopies: [],
        copy: {},
        copyObjects: [],
        object: {},
        fragment_pairs: []
    };

    /**
     *
     * @param config - The search configuration
     * @param config.searchTitle - boolean, Perform a title search (both Object and Work)
     * @param config.workTitleOffset - An optional offset to use for work title search results, for pagination
     * @param config.searchWorkInformation - boolean, Perform a work information search
     * @param config.workInformationOffset - An optional offset to use for work information search results, for pagination
     * @param config.searchImageKeywords - boolean, Perform an image keyword search
     * @param config.searchText - boolean, perform an object text search
     * @param config.searchImageDescription - boolean, perform an image description search
     * @param config.searchIlluminatedBooks - boolean, include this medium type in the query
     * @param config.searchCommercialBookIllustrations - boolean, include this medium type in the query
     * @param config.searchSeparatePrints - boolean, include this medium type in the query
     * @param config.searchDrawingsPaintings - boolean, include this medium type in the query
     * @param config.searchManuscripts - boolean, include this medium type in the query
     * @param config.searchRelatedMaterials - boolean, include this medium type in the query
     * @param config.minDate - number, the lower bound of date ranges to include
     * @param config.maxDate - number, the upper bound of date ranges to include
     * @returns {*}
     */

    blakeData.queryObjects = function (config) {
        var url = directoryPrefix + '/api/query_objects';

        //$log.info('query objects in solr');

        return $http.post(url, config).then(queryObjectsComplete).catch(queryObjectsFailed);

        function queryObjectsComplete(response) {
            return response.data;
        }

        function queryObjectsFailed(error) {
            $log.error('XHR Failed for queryObjects.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.queryCopies = function (config) {
        var url = directoryPrefix + '/api/query_copies';

        //$log.info('query copies in solr');

        return $http.post(url, config).then(queryCopiesComplete).catch(queryCopiesFailed);

        function queryCopiesComplete(response) {
            return response.data;
        }

        function queryCopiesFailed(error) {
            $log.error('XHR Failed for queryCopies.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.queryWorks = function (config) {
        var url = directoryPrefix + '/api/query_works';

        //$log.info('query works in solr');

        return $http.post(url, config).then(queryWorksComplete).catch(queryWorksFailed);

        function queryWorksComplete(response) {
            return response.data;
        }

        function queryWorksFailed(error) {
            $log.error('XHR Failed for queryWorks.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getObject = function (descId) {
        var url = directoryPrefix + '/api/object/' + descId;

        //$log.info('getting object');

        return $http.get(url).then(getObjectComplete).catch(getObjectFailed);

        function getObjectComplete(response) {
            return BlakeObject.create(response.data);
        }

        function getObjectFailed(error) {
            $log.error('XHR Failed for getObject.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getObjects = function (descIds) {
        var url = directoryPrefix + '/api/object/';

        //$log.info('getting objects: multi');

        return $http.get(url, { params: { desc_ids: descIds.join() } }).then(getObjectsComplete).catch(getObjectsFailed);

        function getObjectsComplete(response) {
            return BlakeObject.create(response.data.results);
        }

        function getObjectsFailed(error) {
            $log.error('XHR Failed for getObjects: multi.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getFragmentPair = function (descId1, descId2) {
        var url = directoryPrefix + '/api/object/' + descId1 + '/' + descId2 + '/fragment_pair';

        return $http.get(url).then(getFragmentPairComplete).catch(getFragmentPairFailed);

        function getFragmentPairComplete(response) {
            return BlakeFragmentPair.create(response.data);
        }

        function getFragmentPairFailed(error) {
            $log.error('XHR Failed for getFragmentPair.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getObjectsWithSameMotif = function (descId) {
        var url = directoryPrefix + '/api/object/' + descId + '/objects_with_same_motif';

        //$log.info('getting objects w/ same motif');

        return $http.get(url).then(getObjectsWithSameMotifComplete).catch(getObjectsWithSameMotifFailed);

        function getObjectsWithSameMotifComplete(response) {
            return BlakeObject.create(response.data.results);
        }

        function getObjectsWithSameMotifFailed(error) {
            $log.error('XHR Failed for getObjectsWithSameMotif.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getObjectsFromSameMatrix = function (descId) {
        var url = directoryPrefix + '/api/object/' + descId + '/objects_from_same_matrix';

        //$log.info('getting objects from same matrix');

        return $http.get(url).then(getObjectsFromSameMatrixComplete).catch(getObjectsFromSameMatrixFailed);

        function getObjectsFromSameMatrixComplete(response) {
            return BlakeObject.create(response.data.results);
        }

        function getObjectsFromSameMatrixFailed(error) {
            $log.error('XHR Failed for getObjectsFromSameMatrix.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getSameMatrixObjectFromOtherCopy = function (descId, badId) {
        var url = directoryPrefix + '/api/object/' + descId + '/' + badId;

        //$log.info('getting objects from same matrix');

        return $http.get(url).then(getSameMatrixObjectFromOtherCopyComplete).catch(getSameMatrixObjectFromOtherCopyFailed);

        function getSameMatrixObjectFromOtherCopyComplete(response) {
            return BlakeObject.create(response.data);
        }

        function getSameMatrixObjectFromOtherCopyFailed(error) {
            $log.error('XHR Failed for getSameMatrixObjectFromOtherCopy.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getObjectsFromSameProductionSequence = function (descId) {
        var url = directoryPrefix + '/api/object/' + descId + '/objects_from_same_production_sequence';

        //$log.info('getting objects from same production sequence');

        return $http.get(url).then(getObjectsFromSameSequenceComplete).catch(getObjectsFromSameSequenceFailed);

        function getObjectsFromSameSequenceComplete(response) {
            return BlakeObject.create(response.data.results);
        }

        function getObjectsFromSameSequenceFailed(error) {
            $log.error('XHR Failed for getObjectsFromSameProductionSequence.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getObjectsWithTextMatches = function (descId) {
        var url = directoryPrefix + '/api/object/' + descId + '/objects_with_text_matches';

        return $http.get(url).then(getObjectsWithTextMatchesComplete).catch(getObjectsWithTextMatchesFailed);

        function getObjectsWithTextMatchesComplete(response) {
            return BlakeObject.create(response.data.results);
        }

        function getObjectsWithTextMatchesFailed(error) {
            $log.error('XHR Failed for getObjectsWithTextMatches.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getSupplementalObjects = function (descId) {
        var url = directoryPrefix + '/api/object/' + descId + '/supplemental_objects';

        //$log.info('getting supplemental objects');

        return $http.get(url).then(getSupplementalObjectsComplete).catch(getSupplementalObjectsFailed);

        function getSupplementalObjectsComplete(response) {
            return BlakeObject.create(response.data.results);
        }

        function getSupplementalObjectsFailed(error) {
            $log.error('XHR Failed for getSupplementalObjects.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getTextuallyReferencedMaterial = function (descId) {
        var url = directoryPrefix + '/api/object/' + descId + '/textually_referenced_materials';

        //$log.info('getting objects with textual references');

        return $http.get(url).then(getTextuallyReferencedMaterialComplete).catch(getTextuallyReferencedMaterialsFailed);

        function getTextuallyReferencedMaterialComplete(response) {
            return {
                objects: response.data.objects.length ? BlakeObject.create(response.data.objects) : [],
                copies: response.data.copies.length ? BlakeObject.create(response.data.copies) : [],
                works: response.data.works.length ? BlakeObject.create(response.data.works) : []
            };
        }

        function getTextuallyReferencedMaterialsFailed(error) {
            $log.error('XHR failed for getTextaullyReferencedMaterial.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getCopy = function (copyId) {
        var url = directoryPrefix + '/api/copy/' + copyId;

        //$log.info('getting copy');

        return $http.get(url).then(getCopyComplete).catch(getCopyFailed);

        function getCopyComplete(response) {
            return BlakeCopy.create(response.data);
        }

        function getCopyFailed(error) {
            $log.error('XHR Failed for getCopy.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getCopies = function (copyIds) {
        var url = directoryPrefix + '/api/copy/';

        //$log.info('getting copies: multi');

        return $http.get(url, { params: { bad_ids: copyIds.join() } }).then(getCopiesComplete).catch(getCopiesFailed);

        function getCopiesComplete(response) {
            return BlakeCopy.create(response.data.results);
        }

        function getCopiesFailed(error) {
            $log.error('XHR Failed for getCopies: multi.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getObjectsForCopy = function (copyId) {
        var url = directoryPrefix + '/api/copy/' + copyId + '/objects';

        //$log.info('getting objects in copy');

        return $http.get(url).then(getObjectsForCopyComplete).catch(getObjectsForCopyFailed);

        function getObjectsForCopyComplete(response) {
            return BlakeObject.create(response.data.results);
        }

        function getObjectsForCopyFailed(error) {
            $log.error('XHR Failed for getObjectsForCopy.\n' + angular.toJson(error.data, true));
            $log.error('Reuesting: ' + url);
        }
    };

    blakeData.getWork = function (workId) {
        var url = directoryPrefix + '/api/work/' + workId;

        //$log.info('getting work');

        return $http.get(url).then(getWorkComplete).catch(getWorkFailed);

        function getWorkComplete(response) {
            return BlakeWork.create(response.data);
        }

        function getWorkFailed(error) {
            $log.error('XHR Failed for getWork.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getWorks = function () {
        var url = directoryPrefix + '/api/work/';

        //$log.info('getting works: multi');

        return $http.get(url).then(getWorksComplete).catch(getWorksFailed);

        function getWorksComplete(response) {
            return BlakeWork.create(response.data.results);
        }

        function getWorksFailed(error) {
            $log.error('XHR Failed for getWorks: multi.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getCopiesForWork = function (workId) {
        var url = directoryPrefix + '/api/work/' + workId + '/copies';

        //$log.info('getting copies in work');

        return $http.get(url).then(getCopiesForWorkComplete).catch(getCopiesForWorkFailed);

        function getCopiesForWorkComplete(response) {
            return BlakeCopy.create(response.data.results);
        }

        function getCopiesForWorkFailed(error) {
            $log.error('XHR Failed for getCopies: multi.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.getFeaturedWorks = function () {
        var url = directoryPrefix + '/api/featured_work/';

        //$log.info('getting featured works');

        return $http.get(url).then(getFeaturedWorksComplete).catch(getFeaturedWorksFailed);

        function getFeaturedWorksComplete(response) {
            //return BlakeWork.create(response.data.results);
            //$log.info(response.data.results);
            return response.data.results;
        }

        function getFeaturedWorksFailed(error) {
            $log.error('XHR Failed for getWorks: multi.\n' + angular.toJson(error.data, true));
        }
    };

    blakeData.setSelectedWork = function (workId) {
        return $q.all([blakeData.getWork(workId), blakeData.getCopiesForWork(workId)]).then(function (data) {
            blakeData.work = data[0];
            //console.log(data[0]);
            blakeData.workCopies = data[1];
            blakeData.setRelatedWorkObjectLinks();
            if (blakeData.work.virtual == true) {
                return blakeData.getObjectsForCopy(blakeData.workCopies[0].bad_id).then(function (data) {

                    blakeData.workCopies = data;

                    if (blakeData.work.bad_id == 'letters') {

                        var objectGroup = {},
                            objectArray = [];

                        blakeData.workCopies.forEach(obj => {
                            if (!angular.isDefined(objectGroup[obj.object_group])) {
                                objectGroup[obj.object_group] = obj;
                            }
                        });

                        angular.forEach(objectGroup, function (v) {
                            objectArray.push(v);
                        });

                        blakeData.workCopies = objectArray;
                    } else {
                        blakeData.workCopies = blakeData.numberVirtualWorkObjects(blakeData.workCopies);
                    }
                });
            }
        });
    };

    blakeData.setRelatedWorkObjectLinks = function () {
        if (blakeData.related_works) {
            var related_work_objects = blakeData.work.related_works.filter(function (obj) {
                return obj.type == 'object' && obj.link;
            });

            if (related_work_objects.length > 0) {
                var object_ids = related_work_objects.map(function (obj) {
                    return obj.link;
                });
                return blakeData.getObjects(object_ids).then(function (data) {
                    blakeData.work.related_works.forEach((obj, key) => {
                        if (obj.type == 'object' && obj.link) {
                            var matchingObject = data.filter(function (o) {
                                return o.desc_id == obj.link;
                            });
                            blakeData.work.related_works[key].link = '/copy/' + matchingObject[0].copy_bad_id + '?descId=' + obj.link;
                        }
                    });
                });
            }
        }
    };

    blakeData.setWorkNoCopies = function (workId) {
        return blakeData.getWork(workId).then(function (data) {
            blakeData.work = data;
        });
    };

    blakeData.setSelectedCopy = function (copyId, descId) {

        var workBadMatch = copyId.indexOf('.'),
            workId = workBadMatch > 0 ? copyId.substring(0, workBadMatch) : copyId;

        return $q.all([blakeData.getCopy(copyId), blakeData.getObjectsForCopy(copyId), blakeData.setSelectedWork(workId)
        //blakeData.getWork(workId)
        ]).then(function (data) {
            blakeData.copy = data[0];
            blakeData.copyObjects = data[1];

            //console.log('selected Work');
            //console.log(blakeData.work);
            //console.log('selected Copy');
            //console.log(blakeData.copy);
            //console.log('selected Copy Objects');
            //console.log(blakeData.copyObjects);

            //Programatically order objects if "copy" is a virtual group, then replace number in full object id
            if (blakeData.work.virtual == true && blakeData.work.bad_id != 'letters') {
                blakeData.copyObjects = blakeData.numberVirtualWorkObjects(blakeData.copyObjects);
            }

            //Set the selected object
            if (descId) {

                blakeData.getObject(descId).then(function (data) {
                    blakeData.changeObject(data);
                });
            } else {
                blakeData.changeObject(blakeData.copyObjects[0]);
            }
        });
    };

    blakeData.numberVirtualWorkObjects = function (objects) {
        var inc = 1;
        objects.forEach(function (obj) {
            if (!obj.supplemental) {
                //obj.object_number = inc;
                obj.full_object_id = 'Object ' + inc + ' ' + obj.full_object_id.replace(/object [\d]+/gi, '');
                inc++;
            }
        });
        return objects;
    };

    blakeData.setSelectedObject = function (descId) {
        return blakeData.getObject(descId).then(function (obj) {
            blakeData.changeObject(obj);
        });
    };

    blakeData.setFromSameX = function (object) {

        if (angular.isDefined(object.matrix)) {
            return $q.all();
        }

        object.matrix = {};
        object.sequence = {};
        object.motif = {};
        object.supplemental_objects = {};
        object.textmatch = {};

        var desc_id_for_supp_query = object.supplemental ? object.supplemental : object.desc_id;

        return $q.all([blakeData.getObjectsFromSameMatrix(object.desc_id), blakeData.getObjectsFromSameProductionSequence(object.desc_id), blakeData.getObjectsWithSameMotif(object.desc_id), blakeData.getSupplementalObjects(desc_id_for_supp_query), blakeData.getTextuallyReferencedMaterial(object.desc_id), blakeData.getObjectsWithTextMatches(object.desc_id)]).then(function (data) {
            object.matrix = BlakeObject.create(data[0]);
            object.sequence = BlakeObject.create(data[1]);
            object.motif = BlakeObject.create(data[2]);
            object.text_ref = data[4];
            object.supplemental_objects = BlakeObject.create(data[3]);
            object.textmatch = BlakeObject.create(data[5]);
        });
    };

    blakeData.changeObject = function (object) {
        return blakeData.setFromSameX(object).then(function () {
            blakeData.object = object;
            //console.log('object');
            //console.log(blakeData.object);
            if (!object.supplemental) {
                $location.search('descId', blakeData.object.desc_id);
                var target = '#' + blakeData.object.desc_id.replace(/\./g, '-');
                $rootScope.$broadcast('viewSubMenu::readingMode', { 'target': target });
            }
            $rootScope.$broadcast('change::selectedObject');
        });
    };

    blakeData.changeCopy = function (copyId, descId) {
        return blakeData.setSelectedCopy(copyId, descId).then(function () {
            $location.path('/copy/' + copyId, false);
            $location.search('descId', descId);
        });
    };

    return blakeData;
}]);

/***/ }),
/* 130 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
const BlakeFeaturedWork = angular.module("blake").factory("BlakeFeaturedWork", function () {
    /**
     * Constructor takes a config object and creates a BlakeFeaturedWork.
     *
     * @param config
     */
    var constructor = function (config) {
        return angular.copy(config);
    };

    return GenericService(constructor);
});
/* harmony export (immutable) */ __webpack_exports__["BlakeFeaturedWork"] = BlakeFeaturedWork;


/***/ }),
/* 131 */
/***/ (function(module, exports) {

angular.module("blake").factory("BlakeFragmentPair", ["GenericService", function (GenericService) {
  /**
   * Constructor takes a config object and creates a BlakeCopy, with child objects transformed into the
   * BlakeObjects.
   *
   * @param config
   */
  var constructor = function (config) {
    var fragment_pair = angular.copy(config);

    return fragment_pair;
  };

  return GenericService(constructor);
}]);

/***/ }),
/* 132 */
/***/ (function(module, exports) {

angular.module("blake").factory("BlakeObject", ["GenericService", function (GenericService) {
    /**
     * Constructor takes a config object and creates a BlakeObject.
     *
     * @param config
     */

    const parseObjectLines = (object, array, type, colnum) => {
        if (Array.isArray(object)) {
            angular.forEach(object, function (objectSet, lineKey) {
                if (Array.isArray(objectSet.l)) {
                    angular.forEach(objectSet.l, function (v, k) {
                        var indent = angular.isDefined(v['@indent']) ? v['@indent'] : 0;
                        array.push({
                            'indent': indent,
                            'text': v['#text'],
                            'lineNum': v['@n'],
                            'justify': v['@justify'],
                            'type': type,
                            'colnum': colnum
                        });
                    });
                } else {
                    var indent = angular.isDefined(objectSet.l['@indent']) ? objectSet.l['@indent'] : 0;

                    if (angular.isDefined(objectSet.l.physnumber)) {
                        array.push({
                            'indent': indent,
                            'text': objectSet.l.physnumber['#text'],
                            'lineNum': objectSet.l['@n'],
                            'justify': objectSet.l['@justify'],
                            'type': type,
                            'colnum': colnum
                        });
                    } else if (angular.isDefined(objectSet.l.catchword)) {
                        array.push({
                            'indent': indent,
                            'text': objectSet.l.catchword['#text'],
                            'lineNum': objectSet.l['@n'],
                            'justify': objectSet.l['@justify'],
                            'type': type,
                            'colnum': colnum
                        });
                    } else {
                        array.push({
                            'indent': indent,
                            'text': objectSet.l['#text'],
                            'lineNum': objectSet.l['@n'],
                            'justify': objectSet.l['@justify'],
                            'type': type,
                            'colnum': colnum
                        });
                    }
                }
            });
        } else if (Array.isArray(object.l)) {
            angular.forEach(object.l, function (v, k) {
                var indent = angular.isDefined(v['@indent']) ? v['@indent'] : 0;
                array.push({
                    'indent': indent,
                    'text': v['#text'],
                    'lineNum': v['@n'],
                    'justify': v['@justify'],
                    'type': type,
                    'colnum': colnum
                });
            });
        } else {
            var indent = angular.isDefined(object.l['@indent']) ? object.l['@indent'] : 0;

            if (angular.isDefined(object.l.physnumber)) {
                array.push({
                    'indent': indent,
                    'text': object.l.physnumber['#text'],
                    'lineNum': object.l['@n'],
                    'justify': object.l['@justify'],
                    'type': type,
                    'colnum': colnum
                });
            } else if (angular.isDefined(object.l.catchword)) {
                array.push({
                    'indent': indent,
                    'text': object.l.catchword['#text'],
                    'lineNum': object.l['@n'],
                    'justify': object.l['@justify'],
                    'type': type,
                    'colnum': colnum
                });
            } else {
                array.push({
                    'indent': indent,
                    'text': object.l['#text'],
                    'lineNum': object.l['@n'],
                    'justify': object.l['@justify'],
                    'type': type,
                    'colnum': colnum
                });
            }
        }
    };

    const constructor = function (config) {
        var obj = angular.copy(config);
        if (obj) {
            obj.illustration_description = angular.fromJson(config.illustration_description);
            obj.text = angular.fromJson(config.text);
            obj.notes = angular.fromJson(config.notes);

            function eachRecursive(objtext, altspelling) {
                for (var k in objtext) {
                    if (typeof objtext[k] == "object" && objtext[k] !== null) {
                        if (k == 'choice') {
                            if (Array.isArray(objtext[k])) {
                                angular.forEach(objtext[k], function (spellings) {
                                    if (angular.isDefined(spellings['orig']) && angular.isDefined(spellings['orig']['#text'])) {
                                        var orig = spellings['orig']['#text'];
                                        var reg = '';

                                        // Check the reg attribute
                                        if (angular.isDefined(spellings['reg'])) {
                                            reg = spellings['reg'];
                                        }

                                        // Check the corr attribute
                                        if (angular.isDefined(spellings['corr'])) {
                                            reg = spellings['corr'];
                                        }
                                        if (Array.isArray(reg)) {
                                            angular.forEach(reg, function (v) {
                                                var alt = { reg: v['#text'].toLowerCase(), orig: orig.toLowerCase() };
                                                altspelling.push(alt);
                                            });
                                        } else {
                                            var alt = { reg: reg['#text'].toLowerCase(), orig: orig.toLowerCase() };
                                            altspelling.push(alt);
                                        }
                                    }
                                });
                            } else {
                                if (angular.isDefined(objtext[k]['orig']) && angular.isDefined(objtext[k]['orig']['#text'])) {
                                    var orig = objtext[k]['orig']['#text'];
                                    var reg = '';

                                    // Check the reg attribute
                                    if (angular.isDefined(objtext[k]['reg'])) {
                                        reg = objtext[k]['reg'];
                                    }

                                    // Check the corr attribute
                                    if (angular.isDefined(objtext[k]['corr'])) {
                                        reg = objtext[k]['corr'];
                                    }

                                    if (Array.isArray(reg)) {
                                        angular.forEach(reg, function (v) {
                                            var alt = { reg: v['#text'].toLowerCase(), orig: orig.toLowerCase() };
                                            altspelling.push(alt);
                                        });
                                    } else {
                                        var alt = { reg: reg['#text'].toLowerCase(), orig: orig.toLowerCase() };
                                        altspelling.push(alt);
                                    }
                                }
                            }
                        } else {
                            eachRecursive(objtext[k], altspelling);
                        }
                    }
                }
            }

            obj.alt_spellings = [];
            eachRecursive(obj.text, obj.alt_spellings);
            obj.header = angular.fromJson(config.header);
            obj.source = angular.fromJson(config.source);

            return obj;
        }
    };

    return GenericService(constructor);
}]);

/***/ }),
/* 133 */
/***/ (function(module, exports) {

angular.module("blake").factory("BlakeWork", ["GenericService", "BlakeCopy", function (GenericService, BlakeCopy) {
    /**
     * Constructor takes a config object and creates a BlakeWork, with child objects transformed into the
     * BlakeCopies.
     *
     * @param config
     */
    var constructor = function (config) {

        var work = angular.copy(config);

        // Get the medium and probable phrase
        switch (work.medium) {
            case "illbk":
                work.medium_pretty = 'Illuminated Books';
                work.probable = 'printing';
                break;
            case "comb":
            case "comdes":
            case "comeng":
                work.medium_pretty = 'Commercial Book Illustrations';
                work.probable = 'printing';
                break;
            case "spb":
            case "spdes":
            case "speng":
            case "cprint":
                work.medium_pretty = 'Prints';
                work.probable = 'composition';
                break;
            case "mono":
            case "paint":
            case "pen":
            case "penink":
            case "penc":
            case "wc":
                work.medium_pretty = 'Drawings and Paintings';
                work.probable = 'composition';
                break;
            case "ms":
            case "ltr":
            case "te":
                work.medium_pretty = 'Manuscripts and Typographic Works';
                work.probable = 'composition';
                break;
            case "exhibit":
                work.medium_pretty = "Archive Exhibits";
                work.probable = 'composition';
                break;
            default:
                return false;
        }

        //Create an alternative work title for virtual works
        work.menuTitle = work.title;
        //FIXME:: Figure out why the Laocoon work's title isn't getting encoded in utf8
        if (work.title == "LaocoÃ¶n") {
            work.title = "Laocoön";
            work.menuTitle = "Laocoön";
        }
        switch (work.bad_id) {
            case 'biblicalwc':
                work.title = 'Water Color Drawings Illustrating the Bible';
                work.virtual = true;
                break;
            case 'biblicaltemperas':
                work.title = 'Paintings Illustrating the Bible';
                work.virtual = true;
                break;
            //case 'but543':
            //    work.title = 'Illustrations to Milton\'s "On the Morning of Christ\'s Nativity"';
            //    work.virtual = false;
            //    break;
            case 'pid':
                work.title = 'Pen and Ink Drawings';
                work.virtual = true;
                break;
            case 'pencil1':
                work.title = 'Pencil Sketches';
                work.virtual = true;
                break;
            case 'letters':
            case 'gravepd':
            case 'gravewc':
            case 'gravewd':
            case 'cpd':
            case 'allegropenseroso':
            case 'miltons':
                work.virtual = true;
                break;
            default:
                work.virtual = false;
                break;
        }

        angular.forEach(work.related_works, function (v) {
            v.displayTitle = v.title.text != '' ? v.title.text : false;
            if (v.title.link) {
                switch (v.title.type) {
                    case 'work':
                        v.type = 'work';
                        v.link = "/work/" + v.title.link;
                        break;
                    case 'copy':
                        v.type = 'copy';
                        v.link = "/copy/" + v.title.link;
                        break;
                    case 'object':
                        v.type = 'object';
                        v.link = v.title.link;
                        break;
                    default:
                        v.type = "none";
                        v.link = false;
                }
            } else {
                if (v.title.text.substring(0, 4).toLowerCase() == 'copy' || v.info.substring(0, 4).toLowerCase() == 'copy') {
                    v.type = "copy";
                } else {
                    v.type = "none";
                }
                v.link = false;
            }
        });

        return work;
    };

    return GenericService(constructor);
}]);

/***/ }),
/* 134 */
/***/ (function(module, exports) {

angular.module('blake').factory('CartStorageService', ["$http", "$injector", function ($http, $injector) {
	// taken from todo-mvc example project.
	// there used to be a choice between an api or localstorage
	// I've taken out the 'api' option. This service could be greatly
	// simplified, however... leaving it will allow us to add other storage
	// methods should we want to do so.  (using redis to store state for example).
	// appropriated from https://github.com/tastejs/todomvc/blob/master/examples/angularjs/js/services/todoStorage.js
	return $injector.get('localStorage');
}]).factory('localStorage', ["$q", function ($q) {
	'use strict';

	var STORAGE_ID = 'cart-items-angularjs';

	var store = {
		cartItems: JSON.parse(localStorage.getItem(STORAGE_ID) || '[]'),

		_getFromLocalStorage: function () {
			return JSON.parse(localStorage.getItem(STORAGE_ID) || '[]');
		},

		_saveToLocalStorage: function (cartItems) {
			localStorage.setItem(STORAGE_ID, JSON.stringify(cartItems));
		},

		clearCart: function () {
			var deferred = $q.defer();

			store.cartItems = [];
			// perhaps this is better than a new empty list...
			//store.cartItems.clear();

			store._saveToLocalStorage(store.cartItems);
			deferred.resolve(store.cartItems);

			return deferred.promise;
		},

		delete: function (cartItem) {
			var deferred = $q.defer();

			store.cartItems.splice(store.cartItems.indexOf(cartItem), 1);

			store._saveToLocalStorage(store.cartItems);
			deferred.resolve(store.cartItems);

			return deferred.promise;
		},

		get: function () {
			var deferred = $q.defer();

			angular.copy(store._getFromLocalStorage(), store.cartItems);
			deferred.resolve(store.cartItems);

			return deferred.promise;
		},

		insert: function (cartItem) {
			var deferred = $q.defer();

			store.cartItems.push(cartItem);

			store._saveToLocalStorage(store.cartItems);
			deferred.resolve(store.cartItems);

			return deferred.promise;
		},

		put: function (cartItem, index) {
			var deferred = $q.defer();

			store.cartItems[index] = cartItem;

			store._saveToLocalStorage(store.cartItems);
			deferred.resolve(store.cartItems);

			return deferred.promise;
		},
		// this gets a count of items in the cart
		count: function () {
			var deferred = $q.defer();

			angular.copy(store._getFromLocalStorage(), store.cartItems);
			deferred.resolve(store.cartItems.length);

			return deferred.promise;
		}
	};

	return store;
}]);

/***/ }),
/* 135 */
/***/ (function(module, exports) {

angular.module("blake").factory('CompareObjectsFactory', function () {
    var cof = this;

    cof.main = {};
    cof.comparisonType = '';
    cof.comparisonObjects = [];

    cof.setMainObject = function (obj) {
        cof.main = obj;
        if (!cof.isComparisonObject(obj)) {
            cof.comparisonObjects.unshift(obj);
        }
    };

    cof.resetComparisonObjects = function () {
        cof.main = {};
        cof.clearComparisonObjects();
    };

    cof.isMain = function (obj) {
        if (obj.object_id == cof.main.object_id) {
            return true;
        }
        return false;
    };

    cof.addComparisonObject = function (obj) {
        if (!cof.isComparisonObject(obj)) {
            cof.comparisonObjects.push(obj);
        }
    };

    cof.selectAll = function (objects) {
        cof.comparisonObjects = angular.copy(objects);
        if (angular.isDefined(cof.main.object_id)) {
            cof.comparisonObjects.unshift(cof.main);
        }
    };

    cof.removeComparisonObject = function (obj) {
        var i;
        for (i = cof.comparisonObjects.length; i--;) {
            if (cof.comparisonObjects[i].object_id == obj.object_id) {
                cof.comparisonObjects.splice(i, 1);
                break;
            }
        }
    };

    cof.clearComparisonObjects = function () {
        cof.comparisonObjects = [];
        cof.comparisonType = '';
        if (angular.isDefined(cof.main.object_id)) {
            cof.comparisonObjects.unshift(cof.main);
        }
    };

    cof.isComparisonObject = function (obj, type) {
        if (angular.isDefined(type)) {
            if (type != cof.comparisonType) {
                return false;
            }
        }
        var i;
        for (i = cof.comparisonObjects.length; i--;) {
            if (cof.comparisonObjects[i].object_id == obj.object_id) {
                return true;
            }
        }
        return false;
    };

    cof.checkCompareType = function (type) {
        if (cof.comparisonType != type && cof.comparisonType != '') {
            cof.clearComparisonObjects();
        }
        cof.comparisonType = type;
    };

    cof.hasObjects = function () {
        if (angular.isDefined(cof.comparisonObjects)) {
            return cof.comparisonObjects.length > 0 ? true : false;
        }
        return false;
    };

    return cof;
});

/***/ }),
/* 136 */
/***/ (function(module, exports) {

/*
  consolidate fabric cropping into this service for our sanity!

	-- not being used.... odd behaviors when using this service.
	I think I am mis-managing	state... there just shouldn't be
	any state in a service. sigh...
*/
angular.module('fabric.crop', ['common.fabric', 'common.fabric.canvas']).factory('FabricCrop', ['Fabric', 'FabricCanvas', '$rootScope', function (Fabric, FabricCanvas, $rootScope) {
	return function (options) {
		var self = angular.extend({
			fabric: {}, // reference to fabric... pass it in please
			isCropMode: false, // are we in crop mode?
			cropObject: null, // the object currently being cropped
			cropBoxIsDrawn: false, // the cropBox has been drawn?
			cropBoxIsDrawing: false, // the cropbox is being drawn?
			cropBox: null, // fabric Rect representing the cropping box
			mouseDown: null, // tracks the mouse during cropbox sizing
			removeIcon: null, // icon for the removing an image
			cropIcon: null, // icon to toggle crop mode
			acceptIcon: null, // icon to start the crop procedure
			cancelIcon: null, // icon to cancel the crop procedure
			boundingBox: null // boundingBox of the canvas... a DomRect
		}, options);
		var spacing = 28;

		self.init = function () {
			if (self.boundingBox == null) {
				self.boundingBox = {
					top: 0, left: 0
				};
			}

			// create the cropbox and add it to the canvas.
			self.cropBox = new fabric.Rect({
				fill: 'transparent',
				stroke: '#29f',
				strokeWidth: 3,
				selectable: true,
				//strokeDashArray: [1, 1],
				visible: false
			});
			self.fabric.canvas.add(self.cropBox);

			// setup icons to be used as control "buttons"... crop, remove, accept, cancel...
			self.cropIcon = fabric.Image.fromURL('/icon/crop-symbol.png', function (oImg) {
				oImg.visible = true; // icon is initially hidden!
				oImg.selectable = false;
				oImg.left = spacing * 2;

				// handle mouse click of the crop icon...
				oImg.on('mousedown', function (evt) {
					console.log("u clicked the crop button!");
					// calls methods to toggle cropMode
					if (!self.isCropMode) self.enterCropMode();else self.exitCropMode();
				});
				self.fabric.canvas.add(oImg);
				//self.fabric.canvas.add(oImg);
			});

			self.removeIcon = fabric.Image.fromURL('/icon/dustbin.png', function (oImg) {
				oImg.visible = true; // icon is initially hidden!
				oImg.selectable = false;
				oImg.left = spacing * 3;
				oImg.on('mousedown', function (evt) {
					console.log("yay! remove was clicked!");
				});
				self.fabric.canvas.add(oImg);
				//self.fabric.canvas.add(oImg);
			});

			self.acceptIcon = fabric.Image.fromURL('/icon/273-checkmark.png', function (oImg) {
				oImg.visible = true; // icon is initially hidden!
				oImg.width = 22;
				oImg.height = 22;
				oImg.left = 0;
				oImg.selectable = false;
				oImg.on('mousedown', function (evt) {
					console.log("yay! accept was clicked!");
				});
				self.fabric.canvas.add(oImg);
				//self.fabric.canvas.add(oImg);
			});
			self.cancelIcon = fabric.Image.fromURL('/icon/272-cross.png', function (oImg) {
				oImg.visible = true; // icon is initially hidden!
				oImg.width = 22;
				oImg.height = 22;
				oImg.selectable = false;
				oImg.left = spacing;
				oImg.on('mousedown', function (evt) {
					console.log("yay! cancel was clicked!");
				});
				self.fabric.canvas.add(oImg);
				//self.fabric.canvas.add(oImg);
			});

			console.log("fc canvas: " + self.fabric.canvas.toString());

			self.fabric.canvas.on('mouse:down', self.handleMouseDown);
			self.fabric.canvas.on('mouse:move', self.handleMouseMove);
			self.fabric.canvas.on('mouse:up', self.handleMouseUp);
		}; // end of self.init()

		self.enterCropMode = function () {
			self.isCropMode = true;
			// need a reference to the object we want to crop...
			self.cropObject = self.fabric.canvas.getActiveObject();
			console.log("crop object on entry: " + self.cropObject);
			// make all fabric objects (if it isnt a control icon) non-selectable...
			self.fabric.canvas.forEachObject(function (o) {
				if (o instanceof fabric.Image && !self.isAnIcon(o)) o.selectable = false;
			});

			// because we will unselect everything
			self.fabric.canvas.deactivateAllWithDispatch();
		};

		self.exitCropMode = function () {
			self.cropMode = false;
			self.fabric.canvas.forEachObject(function (o) {
				if (o instanceof fabric.Image && !self.isAnIcon(o)) o.selectable = true;
			});
			console.log("crop object on exit: " + self.cropObject);
			self.fabric.canvas.setActiveObject(self.cropObject);
			self.cropObject = null;
		};

		// our icons for controls are images... read the image source
		// and if they have 'icon' in the url, then it is an icon
		// TODO: fix regex look for '/icon' -- since normal images may have 'icon'
		// in the path!!!!
		self.isAnIcon = function (o) {
			return o.toString().match(/icon/g);
		};

		self.handleMouseDown = function (evt) {
			self.mouseDown = evt;
			if (self.isCropMode && !self.cropBoxIsDrawn) {
				//self.cropBox.width = 2;
				//self.cropBox.height = 2;
				// TODO: analyze and fix the boundingBox... maybe the boundingBox should
				// be the image instead of the canvas (possible?)... and should be
				// passed in as an arg.
				self.cropBoxIsDrawing = evt.e;

				self.cropBox.left = evt.e.pageX - self.boundingBox.left;
				self.cropBox.top = evt.e.pageY - self.boundingBox.top;
				self.cropBox.visible = true;
				self.cropBox.selectable = true;
				self.cropBox.lockRotation = true;
				self.fabric.canvas.bringToFront(self.cropBox);
				self.fabric.canvas.setActiveObject(self.cropBox);
				self.cropBoxIsDrawn = true;
			};
		};

		self.handleMouseMove = function (evt) {
			// if the mouse is down and it is in cropMode...
			// resize the cropbox as the user is drawing it.
			// NOTE: this supports dragging lr,tb... find algorithm
			// to support arbitrary dragging!!!!
			if (self.isCropMode && self.cropBoxIsDrawing) {
				self.cropBox.width = evt.e.pageX - self.mouseDown.pageX;
				self.cropBox.height = evt.e.pageY - self.mouseDown.pageY;
				self.fabric.canvas.bringToFront(self.cropBox);
				//self.fabric.canvas.renderAll();
			};
		};

		self.handleMouseUp = function (evt) {
			self.cropBoxIsDrawing = false;
		};

		self.init();
		return self;
	};
}]);

/***/ }),
/* 137 */
/***/ (function(module, exports) {

angular.module("blake").factory("FormatService", function () {
    var cap = function (full_text) {
        if (/\s+copy\s+/.test(full_text)) {
            return full_text.replace(/copy/, 'Copy');
        }
        return false;
    };

    return {
        cap: function () {
            return cap();
        }
    };
});

/***/ }),
/* 138 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
const GenericService = angular.module("blake").factory("GenericService", function () {
    return constructor => {
        return {
            create: function (config) {
                let i, result;
                if (config.length) {
                    result = [];
                    for (i = 0; i < config.length; i++) {
                        result.push(constructor(config[i]));
                    }
                } else {
                    result = constructor(config);
                }
                return result;
            }
        };
    };
});
/* harmony export (immutable) */ __webpack_exports__["GenericService"] = GenericService;


/***/ }),
/* 139 */
/***/ (function(module, exports) {

angular.module("blake").factory('imageManipulation', function () {
    var imageManipulation = {};

    imageManipulation.transform = {
        'rotate': 0,
        'scale': 1,
        'style': {},
        'orientation': 1
    };

    imageManipulation.rotate = function () {
        imageManipulation.transform.rotate = imageManipulation.transform.rotate + 90;

        imageManipulation.transform.orientation += 1;
        if (imageManipulation.transform.orientation == 5) {
            imageManipulation.transform.orientation = 1;
        }
    };

    imageManipulation.reset = function () {
        imageManipulation.transform = {
            'rotate': 0,
            'scale': 1,
            'style': {},
            'orientation': 1
        };
    };

    return imageManipulation;
});

/***/ }),
/* 140 */
/***/ (function(module, exports) {

angular.module('blake').factory('lightbox_service', ["ngDexie", "$rootScope", function (ngDexie, $rootScope) {
  var svc = {
    sayHi: function () {
      console.log("==== lightbox_service says: hi!!!!");
    },
    addToCart: function (cartItem) {
      ngDexie.put('cartItems', cartItem).then(function (data) {
        console.log("==just added this: " + JSON.stringify(data));
        // signal the lightbox... i know, a pub/sub mechanism would
        // have been better... but it just wasn't cooperating.
        window.localStorage.setItem('cart-item-added', data);
      });
    },
    getCartItem: function (index) {
      //return ngDexie.get('cartItems',index);
      //return await ngDexie.getDb().cartItems.get(index);
      //console.log("== so u want cartItem with id: "+index);
      return ngDexie.get('cartItems', index).then(function (item) {
        //console.log("== promised item: "+JSON.stringify(item));
        return item;
      });
    },
    clearCart: function () {
      ngDexie.getDb().cartItems.clear();
    },
    listCartItems: function () {
      return ngDexie.list('cartItems').then(function (data) {
        //console.log("===data:::"+JSON.stringify(data));
        return data;
      });
    },
    setImageToCrop: function (imgToCrop) {
      imgToCrop.id = 1;
      ngDexie.put('imageToCrop', imgToCrop);
    },
    getImageToCrop: function () {
      return ngDexie.get('imageToCrop', 1);
    },
    setCroppedImage: function (cropped, windw) {
      cropped.id = 1;
      //alert(JSON.stringify(cropped).length+":"+JSON.stringify(cropped));
      ngDexie.put('croppedImage', cropped).then(function () {
        //alert("success");
        if (windw) {
          windw.close();
        }
      }, function () {
        alert("failed");
      });
    },
    getCroppedImage: function () {
      return ngDexie.list('croppedImage').then(function (data) {
        //console.log("===data:::"+JSON.stringify(data));
        return data[0];
      });
    },
    getDb: function () {
      return ngDexie.getDb();
    }
  };

  return svc;
}]);

/***/ }),
/* 141 */
/***/ (function(module, exports) {

angular.module("blake").factory("ObjectViewerService", ["BlakeDataService", "$modal", "$rootScope", function (BlakeDataService, $modal, $rootScope) {
    let ovs = {};
    ovs.bds = BlakeDataService;

    ovs.userestrictOpen = function (copy, object) {
        let header = copy.header.userestrict ? copy.header.userestrict['#text'] : object.header.userestrict['#text'];
        let template = `<div class="modal-header">
                <button type="button" class="close" ng-click="close()" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Use Restriction</h4>
            </div>
            <div class="modal-body">
                <div>${header}</div>
            </div>`;

        $modal.open({
            template: template,
            controller: 'ModalController',
            size: 'lg'
        });
    };

    ovs.getOvpTitle = function () {
        if (angular.isDefined(ovs.bds.copy)) {

            let copyPhrase = ovs.bds.copy.archive_copy_id == null ? '' : ', Copy ' + ovs.bds.copy.archive_copy_id;

            if (ovs.bds.copy.header) {
                copyPhrase = ovs.bds.copy.header.filedesc.titlestmt.title['@reg'] + copyPhrase;
            }

            return copyPhrase;
        }
    };

    ovs.getPreviousObject = function () {

        let list = [];

        if (ovs.bds.work.bad_id == 'letters') {
            ovs.bds.copyObjects.forEach(function (obj) {
                if (obj.object_group == ovs.bds.object.object_group) {
                    list.push(obj);
                }
            });
        } else {
            list = ovs.bds.copyObjects;
        }

        let obj_desc_id = ovs.bds.object.supplemental ? ovs.bds.object.supplemental : ovs.bds.object.desc_id;

        if (list) {
            for (let i = list.length; i--;) {
                if (list[i].desc_id == obj_desc_id) {
                    if (list[i - 1]) {
                        return list[i - 1];
                    } else {
                        return false;
                    }
                }
            }
        }
    };

    ovs.getNextObject = function () {

        let list = [];

        if (ovs.bds.work.bad_id == 'letters') {
            ovs.bds.copyObjects.forEach(function (obj) {
                if (obj.object_group == ovs.bds.object.object_group) {
                    list.push(obj);
                }
            });
        } else {
            list = ovs.bds.copyObjects;
        }

        let obj_desc_id = ovs.bds.object.supplemental ? ovs.bds.object.supplemental : ovs.bds.object.desc_id;

        if (list) {
            for (let i = list.length; i--;) {
                if (list[i].desc_id == obj_desc_id) {
                    if (list[i + 1]) {
                        return list[i + 1];
                    } else {
                        return false;
                    }
                }
            }
        }
    };

    ovs.toggleSupplemental = function () {
        $rootScope.supplemental = !$rootScope.supplemental;
    };

    ovs.changeObject = function (object) {
        ovs.bds.changeObject(object);
    };

    return ovs;
}]);

/***/ }),
/* 142 */
/***/ (function(module, exports) {

angular.module("blake").factory("SearchService", ["worktitleService", "lightbox_service", "$rootScope", "$location", "$q", "BlakeDataService", "directoryPrefix", function (worktitleService, lightbox_service, $rootScope, $location, $q, BlakeDataService, directoryPrefix) {
    let s = {};

    s.selectedWork = -1;
    s.selectedCopy = 0;
    s.selectedObject = 0;
    s.searching = false;
    s.queryString = '';
    s.searchingFromFilter = false;
    s.persistingQueryString = '';

    s.types = ['searchIlluminatedBooks', 'searchCommercialBookIllustrations', 'searchSeparatePrints', 'searchDrawingsPaintings', 'searchManuscripts', 'searchRelatedMaterials'];

    s.wts = worktitleService;
    s.rs = $rootScope;
    let svc = {};
    svc.bds = BlakeDataService;

    s.resetResults = function () {
        s.objectResults = [];
        s.copyResults = [];
        s.workResults = [];
    };

    s.resetFilters = function () {
        s.searchConfig = {
            useCompDate: true,
            usePrintDate: false,
            searchAllFields: true,
            searchTitle: false,
            searchText: false,
            searchNotes: false,
            searchImageDescriptions: false,
            searchImageKeywords: false,
            searchWorks: false,
            searchCopies: false,
            searchAllTypes: true,
            searchIlluminatedBooks: false,
            searchCommercialBookIllustrations: false,
            searchCopyInformation: false,
            searchSeparatePrints: false,
            searchDrawingsPaintings: false,
            searchManuscripts: false,
            searchRelatedMaterials: false,
            minDate: 1772,
            maxDate: 1827
        };
    };

    s.resetResults();

    s.stopWords = ["a", "about", "above", "after", "again", "against", "all", "am", "an", "and", "any", "are", "aren't", "as", "at", "be", "because", "been", "before", "being", "below", "between", "both", "but", "by", "can't", "cannot", "could", "couldn't", "did", "didn't", "do", "does", "doesn't", "doing", "don't", "down", "during", "each", "few", "for", "from", "further", "had", "hadn't", "has", "hasn't", "have", "haven't", "having", "he", "he'd", "he'll", "he's", "her", "here", "here's", "hers", "herself", "him", "himself", "his", "how", "how's", "i", "i'd", "i'll", "i'm", "i've", "if", "in", "into", "is", "isn't", "it", "it's", "its", "itself", "let's", "me", "more", "most", "mustn't", "my", "myself", "no", "nor", "not", "of", "off", "on", "once", "only", "or", "other", "ought", "our", "ours   ", "ourselves", "out", "over", "own", "same", "shan't", "she", "she'd", "she'll", "she's", "should", "shouldn't", "so", "some", "such", "than", "that", "that's", "the", "their", "theirs", "them", "themselves", "then", "there", "there's", "these", "they", "they'd", "they'll", "they're", "they've", "this", "those", "through", "to", "too", "under", "until", "up", "very", "was", "wasn't", "we", "we'd", "we'll", "we're", "we've", "were", "weren't", "what", "what's", "when", "when's", "where", "where's", "which", "while", "who", "who's", "whom", "why", "why's", "with", "won't", "would", "wouldn't", "you", "you'd", "you'll", "you're", "you've", "your", "yours", "yourself", "yourselves"];

    s.search = function () {
        delete s.type;
        //this if/else uses persistingQueryString as a persisting variable so that a user can clear
        //the search box but still modify the filters for the original query
        if (!s.searchingFromFilter) {
            s.queryString = s.searchConfig.searchString;
            s.persistingQueryString = s.queryString;
            s.searchConfig.searchAllTypes = true;
            s.searchConfig.searchAllFields = true;
            s.searchConfig.minDate = 1772;
            s.searchConfig.maxDate = 1827;
            s.searchConfig.useCompDate = true;
            s.searchConfig.usePrintDate = false;
            s.allFields();
            s.allTypes();
        } else {
            s.queryString = s.searchConfig.searchString;
            s.searchConfig.searchString = s.persistingQueryString;
            //s.queryString = s.searchConfig.searchString;
        }
        //console.log(s.searchConfig.searchString);
        s.highlight = s.searchConfig.searchString;
        s.resetResults();
        //if (s.searchConfig.searchString == "") {
        //    searchingFromFilter = false;
        //    return;
        //}
        s.resetResults();
        s.searching = true;
        let objectSearch = BlakeDataService.queryObjects(s.searchConfig),
            copySearch = BlakeDataService.queryCopies(s.searchConfig),
            workSearch = BlakeDataService.queryWorks(s.searchConfig);
        return $q.all([objectSearch, copySearch, workSearch]).then(function (results) {
            s.objectResults = results[0];
            for (let type in s.objectResults) {
                let works = s.objectResults[type];
                works.forEach((work, index) => {
                    BlakeDataService.getObject(s.objectResults[type][index][2][0][2][0][0]).then(results => {
                        s.objectResults[type][index][2][0][2][0][0] = results;
                    });
                });
            }
            s.copyResults = results[1];
            //console.log(s.copyResults);
            for (let type in s.copyResults) {
                let works = s.copyResults[type];
                works.forEach((work, index) => {
                    //s.populateWorkCopies(type,index);
                    BlakeDataService.getCopy(s.copyResults[type][index][2][0][0]).then(results => {
                        s.copyResults[type][index][2][0][0] = results;
                    });
                });
            }
            s.workResults = results[2];
            for (let type in s.workResults) {
                let results = s.workResults[type],
                    arrayedResults = [];
                results.results.forEach(work => {
                    let array = [work, 1];
                    arrayedResults.push(array);
                });
                s.workResults[type] = arrayedResults;
            }
            $rootScope.$broadcast('searchCtrl::newSearch');
            s.searchingFromFilter = false;
            s.searching = false;
        });
    };

    s.hasObjectResults = function () {
        return s.objectResults && (s.objectResults['title'] && s.objectResults['title'].length != 0 || s.objectResults['tag'] && s.objectResults['tag'].length != 0 || s.objectResults['notes'] && s.objectResults['notes'].length != 0 || s.objectResults['text'] && s.objectResults['text'].length != 0 || s.objectResults['text'] && s.objectResults['description'].length != 0);
    };

    s.hasCopyResults = function () {
        return s.copyResults && s.copyResults['copy-info'] && s.copyResults['copy-info'].length != 0;
    };

    s.hasWorkResults = function () {
        return s.workResults && s.workResults['info'] && s.workResults['info'].length != 0;
    };

    s.hasResults = function () {
        return s.hasObjectResults() || s.hasCopyResults() || s.hasWorkResults();
    };

    s.loadSearchPage = function () {
        if (s.searchConfig.searchString != null) {
            $location.url(directoryPrefix + "/search?search=" + encodeURIComponent(s.searchConfig.searchString));
        }
    };

    s.searchConfig = {
        useCompDate: true,
        usePrintDate: false,
        searchAllFields: true,
        searchTitle: false,
        searchText: false,
        searchNotes: false,
        searchImageDescriptions: false,
        searchImageKeywords: false,
        searchWorkInformation: false,
        searchCopyInformation: false,
        searchAllTypes: true,
        searchIlluminatedBooks: false,
        searchCommercialBookIllustrations: false,
        searchCopyInformation: false,
        searchSeparatePrints: false,
        searchDrawingsPaintings: false,
        searchManuscripts: false,
        searchRelatedMaterials: false,
        minDate: 1772,
        maxDate: 1827
    };

    s.searchFields = ['searchTitle', 'searchText', 'searchNotes', 'searchImageDescriptions', 'searchImageKeywords', 'searchWorkInformation', 'searchCopyInformation'];

    s.searchTypes = ['searchIlluminatedBooks', 'searchCommercialBookIllustrations', 'searchSeparatePrints', 'searchDrawingsPaintings', 'searchManuscripts', 'searchRelatedMaterials'];

    s.removeStopWords = function () {
        if (!s.searchConfig.searchString.match(/\".*\"/g)) {
            for (let x = 0; x < s.stopWords.length; x++) {
                let re1 = new RegExp('\\s' + s.stopWords[x] + '\\s', "g");
                let re2 = new RegExp('^' + s.stopWords[x] + '\\s', "g");
                let re3 = new RegExp('\\s' + s.stopWords[x] + '$', "g");
                let re4 = new RegExp('^' + s.stopWords[x] + '$', "g");
                s.searchConfig.searchString = s.searchConfig.searchString.replace(re1, " ");
                s.searchConfig.searchString = s.searchConfig.searchString.replace(re2, "");
                s.searchConfig.searchString = s.searchConfig.searchString.replace(re3, "");
                s.searchConfig.searchString = s.searchConfig.searchString.replace(re4, "");
            }
            s.searchConfig.searchString = s.searchConfig.searchString.replace(/\s\s*/g, " ");
        }
    };

    s.changeType = function () {
        let check = 0;
        s.searchTypes.forEach(type => {
            if (s.searchConfig[type]) {
                check++;
            }
        });
        s.searchConfig.searchAllTypes = check <= 0;
        s.searchingFromFilter = true;
        s.search();
    };

    s.allTypes = function () {
        if (s.searchConfig.searchAllTypes) {
            s.searchTypes.forEach(type => s.searchConfig[type] = false);
        }
        s.searchingFromFilter = true;
        s.search();
    };

    s.changeField = function () {
        let check = 0;
        s.searchFields.forEach(field => {
            if (s.searchConfig[field]) {
                check++;
            }
        });
        s.searchConfig.searchAllFields = check <= 0;
    };

    s.allFields = function () {
        if (s.searchConfig.searchAllFields) {
            s.searchFields.forEach(field => s.searchConfig[field] = false);
        }
    };

    s.populateTree = function (resultTree, index) {
        let copyBads = [],
            copyBadMap = {},
            objectIds = [],
            objectIdMap = {};

        if (Array.isArray(resultTree[index][2])) {

            resultTree[index][2].forEach((copyResults, copyKey) => {
                if (typeof copyResults[0] === "string") {
                    copyBads.push(copyResults[0]);
                    // We're storing a map from bad_id to its results container to simplify updating the results
                    // with retrieved copies.
                    copyBadMap[copyResults[0]] = copyResults;

                    if (Array.isArray(resultTree[index][2][copyKey][2])) {

                        resultTree[index][2][copyKey][2].forEach(objResults => {
                            objectIds.push(objResults[0]);
                            // We're storing a map from bad_id to its results container to simplify updating the results
                            // with retrieved copies.
                            objectIdMap[objResults[0]] = objResults;
                        });
                    }
                }
            });
        }

        if (copyBads.length > 0) {
            BlakeDataService.getCopies(copyBads).then(function (results) {
                results.forEach(function (result) {
                    // Doing an in-place substitution of the bad_id with the relevant object
                    copyBadMap[result.bad_id][0] = result;
                });
                if (Array.isArray(resultTree[index][2])) {
                    resultTree[index][2].sort(function (a, b) {
                        if (a[0].print_date > b[0].print_date) {
                            return 1;
                        }
                        if (a[0].print_date < b[0].print_date) {
                            return -1;
                        }
                        return 0;
                    });
                }
            });
        }
        if (objectIds.length > 0) {
            BlakeDataService.getObjects(objectIds).then(function (results) {
                results.forEach(function (result) {
                    // Doing an in-place substitution of the bad_id with the relevant object
                    objectIdMap[result.desc_id][0] = result;
                });
            });
        }
        // Sort the copies
    };

    s.showHighlight = function (tree, objectIndex, virtualCopyIndex) {
        s.selectedObject = objectIndex;
        if (tree == 'copy') {
            s.selectedCopy = objectIndex;
        }
        if (virtualCopyIndex) {
            s.selectedCopy = virtualCopyIndex;
        }
    };

    s.getHandprintDescription = function (tree, results, workIndex, label) {
        switch (tree) {
            case 'work':
                return `<strong>${results[workIndex][0].title} (Composed ${results[workIndex][0].composition_date_string})</strong>`;
            default:
                let string = `<strong>${results[workIndex][0].title} (Composed ${results[workIndex][0].composition_date_string})</strong><br>`,
                    endstring = '';

                if (label == 'Copy/Set Information') {
                    if (results[workIndex][2].length > 1 && !results[workIndex][0].virtual) {
                        string += '(' + results[workIndex][2].length + ' Copies/Sets' + ')';
                    }
                    if (results[workIndex][2].length == 1 && !results[workIndex][0].virtual) {
                        string += '(' + results[workIndex][2].length + ' Copy/Set' + ')';
                    }
                    return string;
                }

                if (results[workIndex][1] > 1) {
                    string += '(' + results[workIndex][1] + ' Objects';
                    endstring = ')';
                }
                if (results[workIndex][1] == 1) {
                    string += '(' + results[workIndex][1] + ' Object';
                    endstring = ')';
                }
                if (results[workIndex][2].length > 1 && !results[workIndex][0].virtual) {
                    string += ' across ' + results[workIndex][2].length + ' Copies/Sets';
                }
                if (results[workIndex][2].length == 1 && !results[workIndex][0].virtual) {
                    string += ' across ' + results[workIndex][2].length + ' Copy/Set';
                }

                string += endstring;

                return string;
        }
    };

    s.getPreviewHref = function (tree, resultTree) {
        try {
            switch (tree) {
                case 'object':
                    let work = resultTree[s.selectedWork][0],
                        copyBad = work.virtual ? work.bad_id : resultTree[s.selectedWork][2][s.selectedCopy][0].bad_id,
                        descId = resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].desc_id;
                    return copyBad + '?descId=' + descId;
                case 'copy':
                    return resultTree[s.selectedWork][2][s.selectedCopy][0].bad_id;
            }
        } catch (e) {}
    };

    s.getPreviewImage = function (tree, resultTree) {
        try {
            switch (tree) {
                case 'object':
                    return resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].dbi;
                case 'copy':
                    return resultTree[s.selectedWork][2][s.selectedCopy][0].image;
            }
        } catch (e) {}
    };

    s.addToLightBox = function (tree, resultTree) {
        //console.log("===> adding: "+JSON.stringify(vm.bds.object));
        var item = {};
        item.url = "/images/" + resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].dbi + ".300.jpg";
        //svc.bds.setSelectedObject(resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0]);
        console.log(resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0]);

        if (resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].copy_print_date) {
            if (resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].virutalwork_title) {
                item.title = resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].virtualwork_title + " (Printed " + resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].copy_print_date + ")";
            } else {
                item.title = resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].copy_title + " (Printed " + resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].copy_print_date + ")";
            }
        } else {
            if (resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].virtualwork_title) {
                item.title = resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].virtualwork_title + " (Composed " + resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].copy_composition_date + ")";
            } else {
                item.title = resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].copy_title + " (Composed " + resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].copy_composition_date + ")";
            }
        }
        item.caption = "";
        var obj = resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0];
        /*
        <span ng-if="svc.bds.work.virtual && svc.bds.copy.bad_id != 'letters'"><span>{{ svc.bds.object.title }}, </span><span class="object-no">Object {{ svc.bds.object.object_number }}, {{svc.bds.object.source.objdescid.compdate['#text']}}, {{svc.bds.object.source.repository.institution['#text']}}, </span></span>
        <span ng-if="svc.bds.work.virtual && svc.bds.copy.bad_id == 'letters'"><span>{{ svc.bds.object.title }}, </span><span class="object-no">Object {{ svc.bds.object.object_number }}, </span></span>
        */
        if (resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].virtualwork_title) {
            item.caption += obj.title + ", Object " + obj.object_number;
            if (obj.copy_bad_id != 'letters') {
                item.caption += ", " + obj.source.objdescid.compdate['#text'] + ", " + obj.source.repository.institution['#text'];
            }
        } else {
            /*<span class="object-no" ng-if="!svc.bds.work.virtual && !svc.bds.object.title">{{ svc.bds.object.full_object_id }}, </span>
            <span class="object-no" ng-if="!svc.bds.work.virtual && svc.bds.object.title && svc.bds.work.medium != 'exhibit'">{{svc.bds.object.title}}, {{ svc.bds.object.full_object_id }}, </span>
            <span class="object-no" ng-if="!svc.bds.work.virtual && svc.bds.object.title && svc.bds.work.medium == 'exhibit'">{{svc.bds.object.title}}</span>
            <span ng-if="svc.bds.work.medium != 'exhibit'">{{ svc.bds.object.physical_description.objsize['#text'] }} </span>
            */
            if (!obj.title) {
                item.caption += obj.full_object_id;
            } else {
                item.caption += obj.title + ", " + obj.full_object_id;
            }
            item.caption += ", " + obj.physical_description.objsize['#text'];
        }

        //CartStorageService.insert(item);
        lightbox_service.addToCart(item);

        // updates vm.rs so that cart counter is updated
        lightbox_service.listCartItems().then(function (data) {
            s.rs.cartItems = data;
            //console.log("===== "+JSON.stringify($rootScope.cartItems));
        });
    };

    s.getWorkImage = function (tree, resultTree, workIndex) {
        try {
            switch (tree) {
                case 'object':
                    if (angular.isDefined(resultTree[workIndex][2][0][2][0][0])) {
                        return resultTree[workIndex][2][0][2][0][0].dbi + '.100.jpg';
                    }
                case 'copy':
                    return resultTree[workIndex][2][0][0].image + '.100.jpg';
                case 'work':
                    return resultTree[workIndex][0].image;
            }
        } catch (e) {}
    };

    s.getPreviewLabel = function (tree, resultTree) {
        try {
            switch (tree) {
                case 'object':
                    return resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].full_object_id;
                case 'copy':
                    if (resultTree[s.selectedWork][2][s.selectedCopy][0].archive_set_id != null) {
                        return resultTree[s.selectedWork][2][s.selectedCopy][0].archive_set_id;
                    } else {
                        return 'Copy ' + resultTree[s.selectedWork][2][s.selectedCopy][0].archive_copy_id;
                    }
            }
        } catch (e) {}
    };

    s.showCopies = function (type, results, workIndex) {
        s.selectedCopy = 0;
        s.selectedObject = 0;
        s.populateTree(results, workIndex);
        s.selectedWork = workIndex;
        s.type = type;
        // $rootScope.$broadcast('searchResultDirective::showCopies', {type: type});
        $rootScope.$broadcast('searchCtrl::changeResult', { type: type, objectIndex: s.selectedWork });
    };

    s.showObjects = function (copyIndex) {
        s.selectedCopy = copyIndex;
    };

    s.getPreviewTitle = function (tree, resultTree) {
        try {
            if (tree == 'object') {
                return resultTree[s.selectedWork][2][s.selectedCopy][2][s.selectedObject][0].title;
            }
        } catch (e) {}
    };

    s.nextResult = function (type, resultTree) {
        if (s.selectedWork + 1 < resultTree.length) {
            s.selectedWork += 1;
            s.selectedCopy = 0;
            s.selectedObject = 0;
            s.populateTree(resultTree, s.selectedWork);
            $rootScope.$broadcast('searchCtrl::changeResult', { type: type, objectIndex: s.selectedWork });
        }
    };

    s.previousResult = function (type, resultTree) {
        if (s.selectedWork > 0) {
            s.selectedWork -= 1;
            s.selectedCopy = 0;
            s.selectedObject = 0;
            s.populateTree(resultTree, s.selectedWork);
            $rootScope.$broadcast('searchCtrl::changeResult', { type: type, objectIndex: s.selectedWork });
        }
    };

    s.closeCopies = function () {
        s.selectedWork = -1;
    };

    return s;
}]);

/***/ }),
/* 143 */
/***/ (function(module, exports) {

// TODO: resize directive should not need to broadcast if the factory is properly formatted
angular.module("blake").factory('WindowSize', ["$window", function ($window) {
    var windowSize = {},
        w = angular.element($window)[0];

    windowSize.height = w.innerHeight;
    windowSize.width = w.innerWidth;

    return windowSize;
}]);

/***/ }),
/* 144 */
/***/ (function(module, exports) {

angular.module("blake").factory("worktitleService", ["BlakeDataService", "$rootScope", function (BlakeDataService, $rootScope) {
  let svc = {};
  svc.bds = BlakeDataService;

  svc.getFullTitle = function () {
    return svc.getWorkTitle() + " " + svc.getCopyPhrase() + " " + svc.getCompOrPrintDateString();
  };

  svc.getWorkTitle = function () {
    /* brazenly stolen from the workTitle directive's controller ... */
    if ($rootScope.showWorkTitle == 'work') {
      return svc.bds.work.title;
    }

    /*COPY PAGES*/
    //For letters
    if (svc.bds.work.bad_id == 'letters') {
      if (svc.bds.object.object_group) {
        title = svc.bds.object.object_group;
        title = title.match(/(to.*)/);
        return title[1].charAt(0).toUpperCase() + title[1].slice(1);
      }
    }
    //For Virtual Groups
    if (svc.bds.work.virtual) {
      return svc.bds.work.title;
    }
    //For rest
    if (svc.bds.copy.header && $rootScope.doneSettingCopy) {
      //title = svc.bds.copy.header.filedesc.titlestmt.title.main['#text'];
      title = svc.bds.copy.header.filedesc.titlestmt.title['@reg'];
    }
    if (title.match(/.*, The/)) {
      title = "The " + title.match(/(.*), The/)[1];
    }
    return title.trim();
  };

  svc.getCompOrPrintDateString = function () {
    if (svc.bds.work.probable == "printing") return "(Printed " + svc.bds.copy.print_date_string + ")";else return "(Composed " + svc.bds.work.composition_date_string + ")";
  };

  svc.getCopyPhrase = function () {
    if (svc.bds.work.virtual) {
      return '';
    } else {
      return svc.bds.copy.archive_copy_id == null ? '' : 'Copy ' + svc.bds.copy.archive_copy_id;
    }
  };

  svc.getCaptionFromGallery = function () {
    var caption = "";

    /*
    <span ng-if="svc.bds.work.virtual && svc.bds.copy.bad_id != 'letters'"><span>{{ svc.bds.object.title }}, </span><span class="object-no">Object {{ svc.bds.object.object_number }}, {{svc.bds.object.source.objdescid.compdate['#text']}}, {{svc.bds.object.source.repository.institution['#text']}}, </span></span>
    <span ng-if="svc.bds.work.virtual && svc.bds.copy.bad_id == 'letters'"><span>{{ svc.bds.object.title }}, </span><span class="object-no">Object {{ svc.bds.object.object_number }}, </span></span>
    */
    if (svc.bds.work.virtual) {
      caption += svc.bds.object.title + ", Object " + svc.bds.object.object_number;
      if (svc.bds.copy.bad_id != 'letters') {
        caption += ", " + svc.bds.object.source.objdescid.compdate['#text'] + ", " + svc.bds.object.source.repository.institution['#text'];
      }
    } else {
      /*<span class="object-no" ng-if="!svc.bds.work.virtual && !svc.bds.object.title">{{ svc.bds.object.full_object_id }}, </span>
      <span class="object-no" ng-if="!svc.bds.work.virtual && svc.bds.object.title && svc.bds.work.medium != 'exhibit'">{{svc.bds.object.title}}, {{ svc.bds.object.full_object_id }}, </span>
      <span class="object-no" ng-if="!svc.bds.work.virtual && svc.bds.object.title && svc.bds.work.medium == 'exhibit'">{{svc.bds.object.title}}</span>
      <span ng-if="svc.bds.work.medium != 'exhibit'">{{ svc.bds.object.physical_description.objsize['#text'] }} </span>
      */
      if (!svc.bds.object.title) {
        caption += svc.bds.object.full_object_id;
      } else {
        if (svc.bds.work.medium != 'exhibit') {
          caption += svc.bds.object.title + ", " + svc.bds.object.full_object_id;
        } else {
          caption += svc.bds.object.title;
        }
      }
      if (svc.bds.work.medium != 'exhibit') {
        caption += ", " + svc.bds.object.physical_description.objsize['#text'];
      }
    }
    /*<a ng-if="svc.bds.work.medium != 'exhibit'" style="color:#168bc1" ng-click="svc.ovs.userestrictOpen(svc.bds.copy,svc.bds.object)">&#169;</a>
    -- not adding cr to caption... ok?*/

    return caption;
  };

  svc.getCaptionFromReading = function (obj) {
    var caption = "";

    /*
    <span ng-if="svc.bds.work.virtual && svc.bds.copy.bad_id != 'letters'"><span>{{ svc.bds.object.title }}, </span><span class="object-no">Object {{ svc.bds.object.object_number }}, {{svc.bds.object.source.objdescid.compdate['#text']}}, {{svc.bds.object.source.repository.institution['#text']}}, </span></span>
    <span ng-if="svc.bds.work.virtual && svc.bds.copy.bad_id == 'letters'"><span>{{ svc.bds.object.title }}, </span><span class="object-no">Object {{ svc.bds.object.object_number }}, </span></span>
    */
    if (svc.bds.work.virtual) {
      caption += obj.title + ", Object " + svc.bds.object.object_number;
      if (svc.bds.copy.bad_id != 'letters') {
        caption += ", " + obj.source.objdescid.compdate['#text'] + ", " + obj.source.repository.institution['#text'];
      }
    } else {
      /*<span class="object-no" ng-if="!svc.bds.work.virtual && !svc.bds.object.title">{{ svc.bds.object.full_object_id }}, </span>
      <span class="object-no" ng-if="!svc.bds.work.virtual && svc.bds.object.title && svc.bds.work.medium != 'exhibit'">{{svc.bds.object.title}}, {{ svc.bds.object.full_object_id }}, </span>
      <span class="object-no" ng-if="!svc.bds.work.virtual && svc.bds.object.title && svc.bds.work.medium == 'exhibit'">{{svc.bds.object.title}}</span>
      <span ng-if="svc.bds.work.medium != 'exhibit'">{{ svc.bds.object.physical_description.objsize['#text'] }} </span>
      */
      if (!obj.title) {
        caption += obj.full_object_id;
      } else {
        if (svc.bds.work.medium != 'exhibit') {
          caption += obj.title + ", " + obj.full_object_id;
        } else {
          caption += obj.title;
        }
      }
      if (svc.bds.work.medium != 'exhibit') {
        caption += ", " + obj.physical_description.objsize['#text'];
      }
    }

    /*<a ng-if="svc.bds.work.medium != 'exhibit'" style="color:#168bc1" ng-click="svc.ovs.userestrictOpen(svc.bds.copy,svc.bds.object)">&#169;</a>
    -- not adding cr to caption... ok?*/

    return caption;
  };

  return svc;
}]);

/***/ }),
/* 145 */
/***/ (function(module, exports) {

/**
 * @license AngularJS v1.6.6
 * (c) 2010-2017 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular) {
  'use strict';

  var ELEMENT_NODE = 1;
  var COMMENT_NODE = 8;

  var ADD_CLASS_SUFFIX = '-add';
  var REMOVE_CLASS_SUFFIX = '-remove';
  var EVENT_CLASS_PREFIX = 'ng-';
  var ACTIVE_CLASS_SUFFIX = '-active';
  var PREPARE_CLASS_SUFFIX = '-prepare';

  var NG_ANIMATE_CLASSNAME = 'ng-animate';
  var NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';

  // Detect proper transitionend/animationend event names.
  var CSS_PREFIX = '',
      TRANSITION_PROP,
      TRANSITIONEND_EVENT,
      ANIMATION_PROP,
      ANIMATIONEND_EVENT;

  // If unprefixed events are not supported but webkit-prefixed are, use the latter.
  // Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
  // Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
  // but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
  // Register both events in case `window.onanimationend` is not supported because of that,
  // do the same for `transitionend` as Safari is likely to exhibit similar behavior.
  // Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
  // therefore there is no reason to test anymore for other vendor prefixes:
  // http://caniuse.com/#search=transition
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    CSS_PREFIX = '-webkit-';
    TRANSITION_PROP = 'WebkitTransition';
    TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
  } else {
    TRANSITION_PROP = 'transition';
    TRANSITIONEND_EVENT = 'transitionend';
  }

  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    CSS_PREFIX = '-webkit-';
    ANIMATION_PROP = 'WebkitAnimation';
    ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
  } else {
    ANIMATION_PROP = 'animation';
    ANIMATIONEND_EVENT = 'animationend';
  }

  var DURATION_KEY = 'Duration';
  var PROPERTY_KEY = 'Property';
  var DELAY_KEY = 'Delay';
  var TIMING_KEY = 'TimingFunction';
  var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
  var ANIMATION_PLAYSTATE_KEY = 'PlayState';
  var SAFE_FAST_FORWARD_DURATION_VALUE = 9999;

  var ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;
  var ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;
  var TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;
  var TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;

  var ngMinErr = angular.$$minErr('ng');
  function assertArg(arg, name, reason) {
    if (!arg) {
      throw ngMinErr('areq', 'Argument \'{0}\' is {1}', name || '?', reason || 'required');
    }
    return arg;
  }

  function mergeClasses(a, b) {
    if (!a && !b) return '';
    if (!a) return b;
    if (!b) return a;
    if (isArray(a)) a = a.join(' ');
    if (isArray(b)) b = b.join(' ');
    return a + ' ' + b;
  }

  function packageStyles(options) {
    var styles = {};
    if (options && (options.to || options.from)) {
      styles.to = options.to;
      styles.from = options.from;
    }
    return styles;
  }

  function pendClasses(classes, fix, isPrefix) {
    var className = '';
    classes = isArray(classes) ? classes : classes && isString(classes) && classes.length ? classes.split(/\s+/) : [];
    forEach(classes, function (klass, i) {
      if (klass && klass.length > 0) {
        className += i > 0 ? ' ' : '';
        className += isPrefix ? fix + klass : klass + fix;
      }
    });
    return className;
  }

  function removeFromArray(arr, val) {
    var index = arr.indexOf(val);
    if (val >= 0) {
      arr.splice(index, 1);
    }
  }

  function stripCommentsFromElement(element) {
    if (element instanceof jqLite) {
      switch (element.length) {
        case 0:
          return element;

        case 1:
          // there is no point of stripping anything if the element
          // is the only element within the jqLite wrapper.
          // (it's important that we retain the element instance.)
          if (element[0].nodeType === ELEMENT_NODE) {
            return element;
          }
          break;

        default:
          return jqLite(extractElementNode(element));
      }
    }

    if (element.nodeType === ELEMENT_NODE) {
      return jqLite(element);
    }
  }

  function extractElementNode(element) {
    if (!element[0]) return element;
    for (var i = 0; i < element.length; i++) {
      var elm = element[i];
      if (elm.nodeType === ELEMENT_NODE) {
        return elm;
      }
    }
  }

  function $$addClass($$jqLite, element, className) {
    forEach(element, function (elm) {
      $$jqLite.addClass(elm, className);
    });
  }

  function $$removeClass($$jqLite, element, className) {
    forEach(element, function (elm) {
      $$jqLite.removeClass(elm, className);
    });
  }

  function applyAnimationClassesFactory($$jqLite) {
    return function (element, options) {
      if (options.addClass) {
        $$addClass($$jqLite, element, options.addClass);
        options.addClass = null;
      }
      if (options.removeClass) {
        $$removeClass($$jqLite, element, options.removeClass);
        options.removeClass = null;
      }
    };
  }

  function prepareAnimationOptions(options) {
    options = options || {};
    if (!options.$$prepared) {
      var domOperation = options.domOperation || noop;
      options.domOperation = function () {
        options.$$domOperationFired = true;
        domOperation();
        domOperation = noop;
      };
      options.$$prepared = true;
    }
    return options;
  }

  function applyAnimationStyles(element, options) {
    applyAnimationFromStyles(element, options);
    applyAnimationToStyles(element, options);
  }

  function applyAnimationFromStyles(element, options) {
    if (options.from) {
      element.css(options.from);
      options.from = null;
    }
  }

  function applyAnimationToStyles(element, options) {
    if (options.to) {
      element.css(options.to);
      options.to = null;
    }
  }

  function mergeAnimationDetails(element, oldAnimation, newAnimation) {
    var target = oldAnimation.options || {};
    var newOptions = newAnimation.options || {};

    var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');
    var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');
    var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);

    if (newOptions.preparationClasses) {
      target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);
      delete newOptions.preparationClasses;
    }

    // noop is basically when there is no callback; otherwise something has been set
    var realDomOperation = target.domOperation !== noop ? target.domOperation : null;

    extend(target, newOptions);

    // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.
    if (realDomOperation) {
      target.domOperation = realDomOperation;
    }

    if (classes.addClass) {
      target.addClass = classes.addClass;
    } else {
      target.addClass = null;
    }

    if (classes.removeClass) {
      target.removeClass = classes.removeClass;
    } else {
      target.removeClass = null;
    }

    oldAnimation.addClass = target.addClass;
    oldAnimation.removeClass = target.removeClass;

    return target;
  }

  function resolveElementClasses(existing, toAdd, toRemove) {
    var ADD_CLASS = 1;
    var REMOVE_CLASS = -1;

    var flags = {};
    existing = splitClassesToLookup(existing);

    toAdd = splitClassesToLookup(toAdd);
    forEach(toAdd, function (value, key) {
      flags[key] = ADD_CLASS;
    });

    toRemove = splitClassesToLookup(toRemove);
    forEach(toRemove, function (value, key) {
      flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;
    });

    var classes = {
      addClass: '',
      removeClass: ''
    };

    forEach(flags, function (val, klass) {
      var prop, allow;
      if (val === ADD_CLASS) {
        prop = 'addClass';
        allow = !existing[klass] || existing[klass + REMOVE_CLASS_SUFFIX];
      } else if (val === REMOVE_CLASS) {
        prop = 'removeClass';
        allow = existing[klass] || existing[klass + ADD_CLASS_SUFFIX];
      }
      if (allow) {
        if (classes[prop].length) {
          classes[prop] += ' ';
        }
        classes[prop] += klass;
      }
    });

    function splitClassesToLookup(classes) {
      if (isString(classes)) {
        classes = classes.split(' ');
      }

      var obj = {};
      forEach(classes, function (klass) {
        // sometimes the split leaves empty string values
        // incase extra spaces were applied to the options
        if (klass.length) {
          obj[klass] = true;
        }
      });
      return obj;
    }

    return classes;
  }

  function getDomNode(element) {
    return element instanceof jqLite ? element[0] : element;
  }

  function applyGeneratedPreparationClasses(element, event, options) {
    var classes = '';
    if (event) {
      classes = pendClasses(event, EVENT_CLASS_PREFIX, true);
    }
    if (options.addClass) {
      classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));
    }
    if (options.removeClass) {
      classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));
    }
    if (classes.length) {
      options.preparationClasses = classes;
      element.addClass(classes);
    }
  }

  function clearGeneratedClasses(element, options) {
    if (options.preparationClasses) {
      element.removeClass(options.preparationClasses);
      options.preparationClasses = null;
    }
    if (options.activeClasses) {
      element.removeClass(options.activeClasses);
      options.activeClasses = null;
    }
  }

  function blockTransitions(node, duration) {
    // we use a negative delay value since it performs blocking
    // yet it doesn't kill any existing transitions running on the
    // same element which makes this safe for class-based animations
    var value = duration ? '-' + duration + 's' : '';
    applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);
    return [TRANSITION_DELAY_PROP, value];
  }

  function blockKeyframeAnimations(node, applyBlock) {
    var value = applyBlock ? 'paused' : '';
    var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;
    applyInlineStyle(node, [key, value]);
    return [key, value];
  }

  function applyInlineStyle(node, styleTuple) {
    var prop = styleTuple[0];
    var value = styleTuple[1];
    node.style[prop] = value;
  }

  function concatWithSpace(a, b) {
    if (!a) return b;
    if (!b) return a;
    return a + ' ' + b;
  }

  var $$rAFSchedulerFactory = ['$$rAF', function ($$rAF) {
    var queue, cancelFn;

    function scheduler(tasks) {
      // we make a copy since RAFScheduler mutates the state
      // of the passed in array variable and this would be difficult
      // to track down on the outside code
      queue = queue.concat(tasks);
      nextTick();
    }

    queue = scheduler.queue = [];

    /* waitUntilQuiet does two things:
     * 1. It will run the FINAL `fn` value only when an uncanceled RAF has passed through
     * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.
     *
     * The motivation here is that animation code can request more time from the scheduler
     * before the next wave runs. This allows for certain DOM properties such as classes to
     * be resolved in time for the next animation to run.
     */
    scheduler.waitUntilQuiet = function (fn) {
      if (cancelFn) cancelFn();

      cancelFn = $$rAF(function () {
        cancelFn = null;
        fn();
        nextTick();
      });
    };

    return scheduler;

    function nextTick() {
      if (!queue.length) return;

      var items = queue.shift();
      for (var i = 0; i < items.length; i++) {
        items[i]();
      }

      if (!cancelFn) {
        $$rAF(function () {
          if (!cancelFn) nextTick();
        });
      }
    }
  }];

  /**
   * @ngdoc directive
   * @name ngAnimateChildren
   * @restrict AE
   * @element ANY
   *
   * @description
   *
   * ngAnimateChildren allows you to specify that children of this element should animate even if any
   * of the children's parents are currently animating. By default, when an element has an active `enter`, `leave`, or `move`
   * (structural) animation, child elements that also have an active structural animation are not animated.
   *
   * Note that even if `ngAnimateChildren` is set, no child animations will run when the parent element is removed from the DOM (`leave` animation).
   *
   *
   * @param {string} ngAnimateChildren If the value is empty, `true` or `on`,
   *     then child animations are allowed. If the value is `false`, child animations are not allowed.
   *
   * @example
   * <example module="ngAnimateChildren" name="ngAnimateChildren" deps="angular-animate.js" animations="true">
       <file name="index.html">
         <div ng-controller="MainController as main">
           <label>Show container? <input type="checkbox" ng-model="main.enterElement" /></label>
           <label>Animate children? <input type="checkbox" ng-model="main.animateChildren" /></label>
           <hr>
           <div ng-animate-children="{{main.animateChildren}}">
             <div ng-if="main.enterElement" class="container">
               List of items:
               <div ng-repeat="item in [0, 1, 2, 3]" class="item">Item {{item}}</div>
             </div>
           </div>
         </div>
       </file>
       <file name="animations.css">
  
        .container.ng-enter,
        .container.ng-leave {
          transition: all ease 1.5s;
        }
  
        .container.ng-enter,
        .container.ng-leave-active {
          opacity: 0;
        }
  
        .container.ng-leave,
        .container.ng-enter-active {
          opacity: 1;
        }
  
        .item {
          background: firebrick;
          color: #FFF;
          margin-bottom: 10px;
        }
  
        .item.ng-enter,
        .item.ng-leave {
          transition: transform 1.5s ease;
        }
  
        .item.ng-enter {
          transform: translateX(50px);
        }
  
        .item.ng-enter-active {
          transform: translateX(0);
        }
      </file>
      <file name="script.js">
        angular.module('ngAnimateChildren', ['ngAnimate'])
          .controller('MainController', function MainController() {
            this.animateChildren = false;
            this.enterElement = false;
          });
      </file>
    </example>
   */
  var $$AnimateChildrenDirective = ['$interpolate', function ($interpolate) {
    return {
      link: function (scope, element, attrs) {
        var val = attrs.ngAnimateChildren;
        if (isString(val) && val.length === 0) {
          //empty attribute
          element.data(NG_ANIMATE_CHILDREN_DATA, true);
        } else {
          // Interpolate and set the value, so that it is available to
          // animations that run right after compilation
          setData($interpolate(val)(scope));
          attrs.$observe('ngAnimateChildren', setData);
        }

        function setData(value) {
          value = value === 'on' || value === 'true';
          element.data(NG_ANIMATE_CHILDREN_DATA, value);
        }
      }
    };
  }];

  /* exported $AnimateCssProvider */

  var ANIMATE_TIMER_KEY = '$$animateCss';

  /**
   * @ngdoc service
   * @name $animateCss
   * @kind object
   *
   * @description
   * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes
   * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT
   * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or
   * directives to create more complex animations that can be purely driven using CSS code.
   *
   * Note that only browsers that support CSS transitions and/or keyframe animations are capable of
   * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).
   *
   * ## Usage
   * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that
   * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,
   * any automatic control over cancelling animations and/or preventing animations from being run on
   * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to
   * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger
   * the CSS animation.
   *
   * The example below shows how we can create a folding animation on an element using `ng-if`:
   *
   * ```html
   * <!-- notice the `fold-animation` CSS class -->
   * <div ng-if="onOff" class="fold-animation">
   *   This element will go BOOM
   * </div>
   * <button ng-click="onOff=true">Fold In</button>
   * ```
   *
   * Now we create the **JavaScript animation** that will trigger the CSS transition:
   *
   * ```js
   * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
   *   return {
   *     enter: function(element, doneFn) {
   *       var height = element[0].offsetHeight;
   *       return $animateCss(element, {
   *         from: { height:'0px' },
   *         to: { height:height + 'px' },
   *         duration: 1 // one second
   *       });
   *     }
   *   }
   * }]);
   * ```
   *
   * ## More Advanced Uses
   *
   * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks
   * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.
   *
   * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,
   * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with
   * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order
   * to provide a working animation that will run in CSS.
   *
   * The example below showcases a more advanced version of the `.fold-animation` from the example above:
   *
   * ```js
   * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
   *   return {
   *     enter: function(element, doneFn) {
   *       var height = element[0].offsetHeight;
   *       return $animateCss(element, {
   *         addClass: 'red large-text pulse-twice',
   *         easing: 'ease-out',
   *         from: { height:'0px' },
   *         to: { height:height + 'px' },
   *         duration: 1 // one second
   *       });
   *     }
   *   }
   * }]);
   * ```
   *
   * Since we're adding/removing CSS classes then the CSS transition will also pick those up:
   *
   * ```css
   * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,
   * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/
   * .red { background:red; }
   * .large-text { font-size:20px; }
   *
   * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/
   * .pulse-twice {
   *   animation: 0.5s pulse linear 2;
   *   -webkit-animation: 0.5s pulse linear 2;
   * }
   *
   * @keyframes pulse {
   *   from { transform: scale(0.5); }
   *   to { transform: scale(1.5); }
   * }
   *
   * @-webkit-keyframes pulse {
   *   from { -webkit-transform: scale(0.5); }
   *   to { -webkit-transform: scale(1.5); }
   * }
   * ```
   *
   * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.
   *
   * ## How the Options are handled
   *
   * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation
   * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline
   * styles using the `from` and `to` properties.
   *
   * ```js
   * var animator = $animateCss(element, {
   *   from: { background:'red' },
   *   to: { background:'blue' }
   * });
   * animator.start();
   * ```
   *
   * ```css
   * .rotating-animation {
   *   animation:0.5s rotate linear;
   *   -webkit-animation:0.5s rotate linear;
   * }
   *
   * @keyframes rotate {
   *   from { transform: rotate(0deg); }
   *   to { transform: rotate(360deg); }
   * }
   *
   * @-webkit-keyframes rotate {
   *   from { -webkit-transform: rotate(0deg); }
   *   to { -webkit-transform: rotate(360deg); }
   * }
   * ```
   *
   * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is
   * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition
   * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition
   * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied
   * and spread across the transition and keyframe animation.
   *
   * ## What is returned
   *
   * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually
   * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are
   * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:
   *
   * ```js
   * var animator = $animateCss(element, { ... });
   * ```
   *
   * Now what do the contents of our `animator` variable look like:
   *
   * ```js
   * {
   *   // starts the animation
   *   start: Function,
   *
   *   // ends (aborts) the animation
   *   end: Function
   * }
   * ```
   *
   * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.
   * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and styles may have been
   * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties
   * and that changing them will not reconfigure the parameters of the animation.
   *
   * ### runner.done() vs runner.then()
   * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the
   * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.
   * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`
   * unless you really need a digest to kick off afterwards.
   *
   * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss
   * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).
   * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.
   *
   * @param {DOMElement} element the element that will be animated
   * @param {object} options the animation-related options that will be applied during the animation
   *
   * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied
   * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)
   * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and
   * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.
   * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).
   * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).
   * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).
   * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.
   * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.
   * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.
   * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.
   * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`
   * is provided then the animation will be skipped entirely.
   * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is
   * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value
   * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same
   * CSS delay value.
   * * `stagger` - A numeric time value representing the delay between successively animated elements
   * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})
   * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a
   *   `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)
   * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occurring on the classes being added and removed.)
   * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once
   *    the animation is closed. This is useful for when the styles are used purely for the sake of
   *    the animation and do not have a lasting visual effect on the element (e.g. a collapse and open animation).
   *    By default this value is set to `false`.
   *
   * @return {object} an object with start and end methods and details about the animation.
   *
   * * `start` - The method to start the animation. This will return a `Promise` when called.
   * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.
   */
  var ONE_SECOND = 1000;

  var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
  var CLOSING_TIME_BUFFER = 1.5;

  var DETECT_CSS_PROPERTIES = {
    transitionDuration: TRANSITION_DURATION_PROP,
    transitionDelay: TRANSITION_DELAY_PROP,
    transitionProperty: TRANSITION_PROP + PROPERTY_KEY,
    animationDuration: ANIMATION_DURATION_PROP,
    animationDelay: ANIMATION_DELAY_PROP,
    animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY
  };

  var DETECT_STAGGER_CSS_PROPERTIES = {
    transitionDuration: TRANSITION_DURATION_PROP,
    transitionDelay: TRANSITION_DELAY_PROP,
    animationDuration: ANIMATION_DURATION_PROP,
    animationDelay: ANIMATION_DELAY_PROP
  };

  function getCssKeyframeDurationStyle(duration) {
    return [ANIMATION_DURATION_PROP, duration + 's'];
  }

  function getCssDelayStyle(delay, isKeyframeAnimation) {
    var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;
    return [prop, delay + 's'];
  }

  function computeCssStyles($window, element, properties) {
    var styles = Object.create(null);
    var detectedStyles = $window.getComputedStyle(element) || {};
    forEach(properties, function (formalStyleName, actualStyleName) {
      var val = detectedStyles[formalStyleName];
      if (val) {
        var c = val.charAt(0);

        // only numerical-based values have a negative sign or digit as the first value
        if (c === '-' || c === '+' || c >= 0) {
          val = parseMaxTime(val);
        }

        // by setting this to null in the event that the delay is not set or is set directly as 0
        // then we can still allow for negative values to be used later on and not mistake this
        // value for being greater than any other negative value.
        if (val === 0) {
          val = null;
        }
        styles[actualStyleName] = val;
      }
    });

    return styles;
  }

  function parseMaxTime(str) {
    var maxValue = 0;
    var values = str.split(/\s*,\s*/);
    forEach(values, function (value) {
      // it's always safe to consider only second values and omit `ms` values since
      // getComputedStyle will always handle the conversion for us
      if (value.charAt(value.length - 1) === 's') {
        value = value.substring(0, value.length - 1);
      }
      value = parseFloat(value) || 0;
      maxValue = maxValue ? Math.max(value, maxValue) : value;
    });
    return maxValue;
  }

  function truthyTimingValue(val) {
    return val === 0 || val != null;
  }

  function getCssTransitionDurationStyle(duration, applyOnlyDuration) {
    var style = TRANSITION_PROP;
    var value = duration + 's';
    if (applyOnlyDuration) {
      style += DURATION_KEY;
    } else {
      value += ' linear all';
    }
    return [style, value];
  }

  function createLocalCacheLookup() {
    var cache = Object.create(null);
    return {
      flush: function () {
        cache = Object.create(null);
      },

      count: function (key) {
        var entry = cache[key];
        return entry ? entry.total : 0;
      },

      get: function (key) {
        var entry = cache[key];
        return entry && entry.value;
      },

      put: function (key, value) {
        if (!cache[key]) {
          cache[key] = { total: 1, value: value };
        } else {
          cache[key].total++;
        }
      }
    };
  }

  // we do not reassign an already present style value since
  // if we detect the style property value again we may be
  // detecting styles that were added via the `from` styles.
  // We make use of `isDefined` here since an empty string
  // or null value (which is what getPropertyValue will return
  // for a non-existing style) will still be marked as a valid
  // value for the style (a falsy value implies that the style
  // is to be removed at the end of the animation). If we had a simple
  // "OR" statement then it would not be enough to catch that.
  function registerRestorableStyles(backup, node, properties) {
    forEach(properties, function (prop) {
      backup[prop] = isDefined(backup[prop]) ? backup[prop] : node.style.getPropertyValue(prop);
    });
  }

  var $AnimateCssProvider = ['$animateProvider', /** @this */function ($animateProvider) {
    var gcsLookup = createLocalCacheLookup();
    var gcsStaggerLookup = createLocalCacheLookup();

    this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout', '$$forceReflow', '$sniffer', '$$rAFScheduler', '$$animateQueue', function ($window, $$jqLite, $$AnimateRunner, $timeout, $$forceReflow, $sniffer, $$rAFScheduler, $$animateQueue) {

      var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

      var parentCounter = 0;
      function gcsHashFn(node, extraClasses) {
        var KEY = '$$ngAnimateParentKey';
        var parentNode = node.parentNode;
        var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);
        return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;
      }

      function computeCachedCssStyles(node, className, cacheKey, properties) {
        var timings = gcsLookup.get(cacheKey);

        if (!timings) {
          timings = computeCssStyles($window, node, properties);
          if (timings.animationIterationCount === 'infinite') {
            timings.animationIterationCount = 1;
          }
        }

        // we keep putting this in multiple times even though the value and the cacheKey are the same
        // because we're keeping an internal tally of how many duplicate animations are detected.
        gcsLookup.put(cacheKey, timings);
        return timings;
      }

      function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {
        var stagger;

        // if we have one or more existing matches of matching elements
        // containing the same parent + CSS styles (which is how cacheKey works)
        // then staggering is possible
        if (gcsLookup.count(cacheKey) > 0) {
          stagger = gcsStaggerLookup.get(cacheKey);

          if (!stagger) {
            var staggerClassName = pendClasses(className, '-stagger');

            $$jqLite.addClass(node, staggerClassName);

            stagger = computeCssStyles($window, node, properties);

            // force the conversion of a null value to zero incase not set
            stagger.animationDuration = Math.max(stagger.animationDuration, 0);
            stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);

            $$jqLite.removeClass(node, staggerClassName);

            gcsStaggerLookup.put(cacheKey, stagger);
          }
        }

        return stagger || {};
      }

      var rafWaitQueue = [];
      function waitUntilQuiet(callback) {
        rafWaitQueue.push(callback);
        $$rAFScheduler.waitUntilQuiet(function () {
          gcsLookup.flush();
          gcsStaggerLookup.flush();

          // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.
          // PLEASE EXAMINE THE `$$forceReflow` service to understand why.
          var pageWidth = $$forceReflow();

          // we use a for loop to ensure that if the queue is changed
          // during this looping then it will consider new requests
          for (var i = 0; i < rafWaitQueue.length; i++) {
            rafWaitQueue[i](pageWidth);
          }
          rafWaitQueue.length = 0;
        });
      }

      function computeTimings(node, className, cacheKey) {
        var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);
        var aD = timings.animationDelay;
        var tD = timings.transitionDelay;
        timings.maxDelay = aD && tD ? Math.max(aD, tD) : aD || tD;
        timings.maxDuration = Math.max(timings.animationDuration * timings.animationIterationCount, timings.transitionDuration);

        return timings;
      }

      return function init(element, initialOptions) {
        // all of the animation functions should create
        // a copy of the options data, however, if a
        // parent service has already created a copy then
        // we should stick to using that
        var options = initialOptions || {};
        if (!options.$$prepared) {
          options = prepareAnimationOptions(copy(options));
        }

        var restoreStyles = {};
        var node = getDomNode(element);
        if (!node || !node.parentNode || !$$animateQueue.enabled()) {
          return closeAndReturnNoopAnimator();
        }

        var temporaryStyles = [];
        var classes = element.attr('class');
        var styles = packageStyles(options);
        var animationClosed;
        var animationPaused;
        var animationCompleted;
        var runner;
        var runnerHost;
        var maxDelay;
        var maxDelayTime;
        var maxDuration;
        var maxDurationTime;
        var startTime;
        var events = [];

        if (options.duration === 0 || !$sniffer.animations && !$sniffer.transitions) {
          return closeAndReturnNoopAnimator();
        }

        var method = options.event && isArray(options.event) ? options.event.join(' ') : options.event;

        var isStructural = method && options.structural;
        var structuralClassName = '';
        var addRemoveClassName = '';

        if (isStructural) {
          structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);
        } else if (method) {
          structuralClassName = method;
        }

        if (options.addClass) {
          addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);
        }

        if (options.removeClass) {
          if (addRemoveClassName.length) {
            addRemoveClassName += ' ';
          }
          addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);
        }

        // there may be a situation where a structural animation is combined together
        // with CSS classes that need to resolve before the animation is computed.
        // However this means that there is no explicit CSS code to block the animation
        // from happening (by setting 0s none in the class name). If this is the case
        // we need to apply the classes before the first rAF so we know to continue if
        // there actually is a detected transition or keyframe animation
        if (options.applyClassesEarly && addRemoveClassName.length) {
          applyAnimationClasses(element, options);
        }

        var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();
        var fullClassName = classes + ' ' + preparationClasses;
        var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);
        var hasToStyles = styles.to && Object.keys(styles.to).length > 0;
        var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;

        // there is no way we can trigger an animation if no styles and
        // no classes are being applied which would then trigger a transition,
        // unless there a is raw keyframe value that is applied to the element.
        if (!containsKeyframeAnimation && !hasToStyles && !preparationClasses) {
          return closeAndReturnNoopAnimator();
        }

        var cacheKey, stagger;
        if (options.stagger > 0) {
          var staggerVal = parseFloat(options.stagger);
          stagger = {
            transitionDelay: staggerVal,
            animationDelay: staggerVal,
            transitionDuration: 0,
            animationDuration: 0
          };
        } else {
          cacheKey = gcsHashFn(node, fullClassName);
          stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);
        }

        if (!options.$$skipPreparationClasses) {
          $$jqLite.addClass(element, preparationClasses);
        }

        var applyOnlyDuration;

        if (options.transitionStyle) {
          var transitionStyle = [TRANSITION_PROP, options.transitionStyle];
          applyInlineStyle(node, transitionStyle);
          temporaryStyles.push(transitionStyle);
        }

        if (options.duration >= 0) {
          applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;
          var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);

          // we set the duration so that it will be picked up by getComputedStyle later
          applyInlineStyle(node, durationStyle);
          temporaryStyles.push(durationStyle);
        }

        if (options.keyframeStyle) {
          var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];
          applyInlineStyle(node, keyframeStyle);
          temporaryStyles.push(keyframeStyle);
        }

        var itemIndex = stagger ? options.staggerIndex >= 0 ? options.staggerIndex : gcsLookup.count(cacheKey) : 0;

        var isFirst = itemIndex === 0;

        // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY
        // without causing any combination of transitions to kick in. By adding a negative delay value
        // it forces the setup class' transition to end immediately. We later then remove the negative
        // transition delay to allow for the transition to naturally do it's thing. The beauty here is
        // that if there is no transition defined then nothing will happen and this will also allow
        // other transitions to be stacked on top of each other without any chopping them out.
        if (isFirst && !options.skipBlocking) {
          blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);
        }

        var timings = computeTimings(node, fullClassName, cacheKey);
        var relativeDelay = timings.maxDelay;
        maxDelay = Math.max(relativeDelay, 0);
        maxDuration = timings.maxDuration;

        var flags = {};
        flags.hasTransitions = timings.transitionDuration > 0;
        flags.hasAnimations = timings.animationDuration > 0;
        flags.hasTransitionAll = flags.hasTransitions && timings.transitionProperty === 'all';
        flags.applyTransitionDuration = hasToStyles && (flags.hasTransitions && !flags.hasTransitionAll || flags.hasAnimations && !flags.hasTransitions);
        flags.applyAnimationDuration = options.duration && flags.hasAnimations;
        flags.applyTransitionDelay = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);
        flags.applyAnimationDelay = truthyTimingValue(options.delay) && flags.hasAnimations;
        flags.recalculateTimingStyles = addRemoveClassName.length > 0;

        if (flags.applyTransitionDuration || flags.applyAnimationDuration) {
          maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;

          if (flags.applyTransitionDuration) {
            flags.hasTransitions = true;
            timings.transitionDuration = maxDuration;
            applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;
            temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));
          }

          if (flags.applyAnimationDuration) {
            flags.hasAnimations = true;
            timings.animationDuration = maxDuration;
            temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));
          }
        }

        if (maxDuration === 0 && !flags.recalculateTimingStyles) {
          return closeAndReturnNoopAnimator();
        }

        if (options.delay != null) {
          var delayStyle;
          if (typeof options.delay !== 'boolean') {
            delayStyle = parseFloat(options.delay);
            // number in options.delay means we have to recalculate the delay for the closing timeout
            maxDelay = Math.max(delayStyle, 0);
          }

          if (flags.applyTransitionDelay) {
            temporaryStyles.push(getCssDelayStyle(delayStyle));
          }

          if (flags.applyAnimationDelay) {
            temporaryStyles.push(getCssDelayStyle(delayStyle, true));
          }
        }

        // we need to recalculate the delay value since we used a pre-emptive negative
        // delay value and the delay value is required for the final event checking. This
        // property will ensure that this will happen after the RAF phase has passed.
        if (options.duration == null && timings.transitionDuration > 0) {
          flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;
        }

        maxDelayTime = maxDelay * ONE_SECOND;
        maxDurationTime = maxDuration * ONE_SECOND;
        if (!options.skipBlocking) {
          flags.blockTransition = timings.transitionDuration > 0;
          flags.blockKeyframeAnimation = timings.animationDuration > 0 && stagger.animationDelay > 0 && stagger.animationDuration === 0;
        }

        if (options.from) {
          if (options.cleanupStyles) {
            registerRestorableStyles(restoreStyles, node, Object.keys(options.from));
          }
          applyAnimationFromStyles(element, options);
        }

        if (flags.blockTransition || flags.blockKeyframeAnimation) {
          applyBlocking(maxDuration);
        } else if (!options.skipBlocking) {
          blockTransitions(node, false);
        }

        // TODO(matsko): for 1.5 change this code to have an animator object for better debugging
        return {
          $$willAnimate: true,
          end: endFn,
          start: function () {
            if (animationClosed) return;

            runnerHost = {
              end: endFn,
              cancel: cancelFn,
              resume: null, //this will be set during the start() phase
              pause: null
            };

            runner = new $$AnimateRunner(runnerHost);

            waitUntilQuiet(start);

            // we don't have access to pause/resume the animation
            // since it hasn't run yet. AnimateRunner will therefore
            // set noop functions for resume and pause and they will
            // later be overridden once the animation is triggered
            return runner;
          }
        };

        function endFn() {
          close();
        }

        function cancelFn() {
          close(true);
        }

        function close(rejected) {
          // if the promise has been called already then we shouldn't close
          // the animation again
          if (animationClosed || animationCompleted && animationPaused) return;
          animationClosed = true;
          animationPaused = false;

          if (!options.$$skipPreparationClasses) {
            $$jqLite.removeClass(element, preparationClasses);
          }
          $$jqLite.removeClass(element, activeClasses);

          blockKeyframeAnimations(node, false);
          blockTransitions(node, false);

          forEach(temporaryStyles, function (entry) {
            // There is only one way to remove inline style properties entirely from elements.
            // By using `removeProperty` this works, but we need to convert camel-cased CSS
            // styles down to hyphenated values.
            node.style[entry[0]] = '';
          });

          applyAnimationClasses(element, options);
          applyAnimationStyles(element, options);

          if (Object.keys(restoreStyles).length) {
            forEach(restoreStyles, function (value, prop) {
              if (value) {
                node.style.setProperty(prop, value);
              } else {
                node.style.removeProperty(prop);
              }
            });
          }

          // the reason why we have this option is to allow a synchronous closing callback
          // that is fired as SOON as the animation ends (when the CSS is removed) or if
          // the animation never takes off at all. A good example is a leave animation since
          // the element must be removed just after the animation is over or else the element
          // will appear on screen for one animation frame causing an overbearing flicker.
          if (options.onDone) {
            options.onDone();
          }

          if (events && events.length) {
            // Remove the transitionend / animationend listener(s)
            element.off(events.join(' '), onAnimationProgress);
          }

          //Cancel the fallback closing timeout and remove the timer data
          var animationTimerData = element.data(ANIMATE_TIMER_KEY);
          if (animationTimerData) {
            $timeout.cancel(animationTimerData[0].timer);
            element.removeData(ANIMATE_TIMER_KEY);
          }

          // if the preparation function fails then the promise is not setup
          if (runner) {
            runner.complete(!rejected);
          }
        }

        function applyBlocking(duration) {
          if (flags.blockTransition) {
            blockTransitions(node, duration);
          }

          if (flags.blockKeyframeAnimation) {
            blockKeyframeAnimations(node, !!duration);
          }
        }

        function closeAndReturnNoopAnimator() {
          runner = new $$AnimateRunner({
            end: endFn,
            cancel: cancelFn
          });

          // should flush the cache animation
          waitUntilQuiet(noop);
          close();

          return {
            $$willAnimate: false,
            start: function () {
              return runner;
            },
            end: endFn
          };
        }

        function onAnimationProgress(event) {
          event.stopPropagation();
          var ev = event.originalEvent || event;

          // we now always use `Date.now()` due to the recent changes with
          // event.timeStamp in Firefox, Webkit and Chrome (see #13494 for more info)
          var timeStamp = ev.$manualTimeStamp || Date.now();

          /* Firefox (or possibly just Gecko) likes to not round values up
           * when a ms measurement is used for the animation */
          var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));

          /* $manualTimeStamp is a mocked timeStamp value which is set
           * within browserTrigger(). This is only here so that tests can
           * mock animations properly. Real events fallback to event.timeStamp,
           * or, if they don't, then a timeStamp is automatically created for them.
           * We're checking to see if the timeStamp surpasses the expected delay,
           * but we're using elapsedTime instead of the timeStamp on the 2nd
           * pre-condition since animationPauseds sometimes close off early */
          if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
            // we set this flag to ensure that if the transition is paused then, when resumed,
            // the animation will automatically close itself since transitions cannot be paused.
            animationCompleted = true;
            close();
          }
        }

        function start() {
          if (animationClosed) return;
          if (!node.parentNode) {
            close();
            return;
          }

          // even though we only pause keyframe animations here the pause flag
          // will still happen when transitions are used. Only the transition will
          // not be paused since that is not possible. If the animation ends when
          // paused then it will not complete until unpaused or cancelled.
          var playPause = function (playAnimation) {
            if (!animationCompleted) {
              animationPaused = !playAnimation;
              if (timings.animationDuration) {
                var value = blockKeyframeAnimations(node, animationPaused);
                if (animationPaused) {
                  temporaryStyles.push(value);
                } else {
                  removeFromArray(temporaryStyles, value);
                }
              }
            } else if (animationPaused && playAnimation) {
              animationPaused = false;
              close();
            }
          };

          // checking the stagger duration prevents an accidentally cascade of the CSS delay style
          // being inherited from the parent. If the transition duration is zero then we can safely
          // rely that the delay value is an intentional stagger delay style.
          var maxStagger = itemIndex > 0 && (timings.transitionDuration && stagger.transitionDuration === 0 || timings.animationDuration && stagger.animationDuration === 0) && Math.max(stagger.animationDelay, stagger.transitionDelay);
          if (maxStagger) {
            $timeout(triggerAnimationStart, Math.floor(maxStagger * itemIndex * ONE_SECOND), false);
          } else {
            triggerAnimationStart();
          }

          // this will decorate the existing promise runner with pause/resume methods
          runnerHost.resume = function () {
            playPause(true);
          };

          runnerHost.pause = function () {
            playPause(false);
          };

          function triggerAnimationStart() {
            // just incase a stagger animation kicks in when the animation
            // itself was cancelled entirely
            if (animationClosed) return;

            applyBlocking(false);

            forEach(temporaryStyles, function (entry) {
              var key = entry[0];
              var value = entry[1];
              node.style[key] = value;
            });

            applyAnimationClasses(element, options);
            $$jqLite.addClass(element, activeClasses);

            if (flags.recalculateTimingStyles) {
              fullClassName = node.getAttribute('class') + ' ' + preparationClasses;
              cacheKey = gcsHashFn(node, fullClassName);

              timings = computeTimings(node, fullClassName, cacheKey);
              relativeDelay = timings.maxDelay;
              maxDelay = Math.max(relativeDelay, 0);
              maxDuration = timings.maxDuration;

              if (maxDuration === 0) {
                close();
                return;
              }

              flags.hasTransitions = timings.transitionDuration > 0;
              flags.hasAnimations = timings.animationDuration > 0;
            }

            if (flags.applyAnimationDelay) {
              relativeDelay = typeof options.delay !== 'boolean' && truthyTimingValue(options.delay) ? parseFloat(options.delay) : relativeDelay;

              maxDelay = Math.max(relativeDelay, 0);
              timings.animationDelay = relativeDelay;
              delayStyle = getCssDelayStyle(relativeDelay, true);
              temporaryStyles.push(delayStyle);
              node.style[delayStyle[0]] = delayStyle[1];
            }

            maxDelayTime = maxDelay * ONE_SECOND;
            maxDurationTime = maxDuration * ONE_SECOND;

            if (options.easing) {
              var easeProp,
                  easeVal = options.easing;
              if (flags.hasTransitions) {
                easeProp = TRANSITION_PROP + TIMING_KEY;
                temporaryStyles.push([easeProp, easeVal]);
                node.style[easeProp] = easeVal;
              }
              if (flags.hasAnimations) {
                easeProp = ANIMATION_PROP + TIMING_KEY;
                temporaryStyles.push([easeProp, easeVal]);
                node.style[easeProp] = easeVal;
              }
            }

            if (timings.transitionDuration) {
              events.push(TRANSITIONEND_EVENT);
            }

            if (timings.animationDuration) {
              events.push(ANIMATIONEND_EVENT);
            }

            startTime = Date.now();
            var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;
            var endTime = startTime + timerTime;

            var animationsData = element.data(ANIMATE_TIMER_KEY) || [];
            var setupFallbackTimer = true;
            if (animationsData.length) {
              var currentTimerData = animationsData[0];
              setupFallbackTimer = endTime > currentTimerData.expectedEndTime;
              if (setupFallbackTimer) {
                $timeout.cancel(currentTimerData.timer);
              } else {
                animationsData.push(close);
              }
            }

            if (setupFallbackTimer) {
              var timer = $timeout(onAnimationExpired, timerTime, false);
              animationsData[0] = {
                timer: timer,
                expectedEndTime: endTime
              };
              animationsData.push(close);
              element.data(ANIMATE_TIMER_KEY, animationsData);
            }

            if (events.length) {
              element.on(events.join(' '), onAnimationProgress);
            }

            if (options.to) {
              if (options.cleanupStyles) {
                registerRestorableStyles(restoreStyles, node, Object.keys(options.to));
              }
              applyAnimationToStyles(element, options);
            }
          }

          function onAnimationExpired() {
            var animationsData = element.data(ANIMATE_TIMER_KEY);

            // this will be false in the event that the element was
            // removed from the DOM (via a leave animation or something
            // similar)
            if (animationsData) {
              for (var i = 1; i < animationsData.length; i++) {
                animationsData[i]();
              }
              element.removeData(ANIMATE_TIMER_KEY);
            }
          }
        }
      };
    }];
  }];

  var $$AnimateCssDriverProvider = ['$$animationProvider', /** @this */function ($$animationProvider) {
    $$animationProvider.drivers.push('$$animateCssDriver');

    var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';
    var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';

    var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';
    var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';

    function isDocumentFragment(node) {
      return node.parentNode && node.parentNode.nodeType === 11;
    }

    this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document', function ($animateCss, $rootScope, $$AnimateRunner, $rootElement, $sniffer, $$jqLite, $document) {

      // only browsers that support these properties can render animations
      if (!$sniffer.animations && !$sniffer.transitions) return noop;

      var bodyNode = $document[0].body;
      var rootNode = getDomNode($rootElement);

      var rootBodyElement = jqLite(
      // this is to avoid using something that exists outside of the body
      // we also special case the doc fragment case because our unit test code
      // appends the $rootElement to the body after the app has been bootstrapped
      isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode);

      return function initDriverFn(animationDetails) {
        return animationDetails.from && animationDetails.to ? prepareFromToAnchorAnimation(animationDetails.from, animationDetails.to, animationDetails.classes, animationDetails.anchors) : prepareRegularAnimation(animationDetails);
      };

      function filterCssClasses(classes) {
        //remove all the `ng-` stuff
        return classes.replace(/\bng-\S+\b/g, '');
      }

      function getUniqueValues(a, b) {
        if (isString(a)) a = a.split(' ');
        if (isString(b)) b = b.split(' ');
        return a.filter(function (val) {
          return b.indexOf(val) === -1;
        }).join(' ');
      }

      function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {
        var clone = jqLite(getDomNode(outAnchor).cloneNode(true));
        var startingClasses = filterCssClasses(getClassVal(clone));

        outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
        inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);

        clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);

        rootBodyElement.append(clone);

        var animatorIn,
            animatorOut = prepareOutAnimation();

        // the user may not end up using the `out` animation and
        // only making use of the `in` animation or vice-versa.
        // In either case we should allow this and not assume the
        // animation is over unless both animations are not used.
        if (!animatorOut) {
          animatorIn = prepareInAnimation();
          if (!animatorIn) {
            return end();
          }
        }

        var startingAnimator = animatorOut || animatorIn;

        return {
          start: function () {
            var runner;

            var currentAnimation = startingAnimator.start();
            currentAnimation.done(function () {
              currentAnimation = null;
              if (!animatorIn) {
                animatorIn = prepareInAnimation();
                if (animatorIn) {
                  currentAnimation = animatorIn.start();
                  currentAnimation.done(function () {
                    currentAnimation = null;
                    end();
                    runner.complete();
                  });
                  return currentAnimation;
                }
              }
              // in the event that there is no `in` animation
              end();
              runner.complete();
            });

            runner = new $$AnimateRunner({
              end: endFn,
              cancel: endFn
            });

            return runner;

            function endFn() {
              if (currentAnimation) {
                currentAnimation.end();
              }
            }
          }
        };

        function calculateAnchorStyles(anchor) {
          var styles = {};

          var coords = getDomNode(anchor).getBoundingClientRect();

          // we iterate directly since safari messes up and doesn't return
          // all the keys for the coords object when iterated
          forEach(['width', 'height', 'top', 'left'], function (key) {
            var value = coords[key];
            switch (key) {
              case 'top':
                value += bodyNode.scrollTop;
                break;
              case 'left':
                value += bodyNode.scrollLeft;
                break;
            }
            styles[key] = Math.floor(value) + 'px';
          });
          return styles;
        }

        function prepareOutAnimation() {
          var animator = $animateCss(clone, {
            addClass: NG_OUT_ANCHOR_CLASS_NAME,
            delay: true,
            from: calculateAnchorStyles(outAnchor)
          });

          // read the comment within `prepareRegularAnimation` to understand
          // why this check is necessary
          return animator.$$willAnimate ? animator : null;
        }

        function getClassVal(element) {
          return element.attr('class') || '';
        }

        function prepareInAnimation() {
          var endingClasses = filterCssClasses(getClassVal(inAnchor));
          var toAdd = getUniqueValues(endingClasses, startingClasses);
          var toRemove = getUniqueValues(startingClasses, endingClasses);

          var animator = $animateCss(clone, {
            to: calculateAnchorStyles(inAnchor),
            addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,
            removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,
            delay: true
          });

          // read the comment within `prepareRegularAnimation` to understand
          // why this check is necessary
          return animator.$$willAnimate ? animator : null;
        }

        function end() {
          clone.remove();
          outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
          inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
        }
      }

      function prepareFromToAnchorAnimation(from, to, classes, anchors) {
        var fromAnimation = prepareRegularAnimation(from, noop);
        var toAnimation = prepareRegularAnimation(to, noop);

        var anchorAnimations = [];
        forEach(anchors, function (anchor) {
          var outElement = anchor['out'];
          var inElement = anchor['in'];
          var animator = prepareAnchoredAnimation(classes, outElement, inElement);
          if (animator) {
            anchorAnimations.push(animator);
          }
        });

        // no point in doing anything when there are no elements to animate
        if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;

        return {
          start: function () {
            var animationRunners = [];

            if (fromAnimation) {
              animationRunners.push(fromAnimation.start());
            }

            if (toAnimation) {
              animationRunners.push(toAnimation.start());
            }

            forEach(anchorAnimations, function (animation) {
              animationRunners.push(animation.start());
            });

            var runner = new $$AnimateRunner({
              end: endFn,
              cancel: endFn // CSS-driven animations cannot be cancelled, only ended
            });

            $$AnimateRunner.all(animationRunners, function (status) {
              runner.complete(status);
            });

            return runner;

            function endFn() {
              forEach(animationRunners, function (runner) {
                runner.end();
              });
            }
          }
        };
      }

      function prepareRegularAnimation(animationDetails) {
        var element = animationDetails.element;
        var options = animationDetails.options || {};

        if (animationDetails.structural) {
          options.event = animationDetails.event;
          options.structural = true;
          options.applyClassesEarly = true;

          // we special case the leave animation since we want to ensure that
          // the element is removed as soon as the animation is over. Otherwise
          // a flicker might appear or the element may not be removed at all
          if (animationDetails.event === 'leave') {
            options.onDone = options.domOperation;
          }
        }

        // We assign the preparationClasses as the actual animation event since
        // the internals of $animateCss will just suffix the event token values
        // with `-active` to trigger the animation.
        if (options.preparationClasses) {
          options.event = concatWithSpace(options.event, options.preparationClasses);
        }

        var animator = $animateCss(element, options);

        // the driver lookup code inside of $$animation attempts to spawn a
        // driver one by one until a driver returns a.$$willAnimate animator object.
        // $animateCss will always return an object, however, it will pass in
        // a flag as a hint as to whether an animation was detected or not
        return animator.$$willAnimate ? animator : null;
      }
    }];
  }];

  // TODO(matsko): use caching here to speed things up for detection
  // TODO(matsko): add documentation
  //  by the time...

  var $$AnimateJsProvider = ['$animateProvider', /** @this */function ($animateProvider) {
    this.$get = ['$injector', '$$AnimateRunner', '$$jqLite', function ($injector, $$AnimateRunner, $$jqLite) {

      var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
      // $animateJs(element, 'enter');
      return function (element, event, classes, options) {
        var animationClosed = false;

        // the `classes` argument is optional and if it is not used
        // then the classes will be resolved from the element's className
        // property as well as options.addClass/options.removeClass.
        if (arguments.length === 3 && isObject(classes)) {
          options = classes;
          classes = null;
        }

        options = prepareAnimationOptions(options);
        if (!classes) {
          classes = element.attr('class') || '';
          if (options.addClass) {
            classes += ' ' + options.addClass;
          }
          if (options.removeClass) {
            classes += ' ' + options.removeClass;
          }
        }

        var classesToAdd = options.addClass;
        var classesToRemove = options.removeClass;

        // the lookupAnimations function returns a series of animation objects that are
        // matched up with one or more of the CSS classes. These animation objects are
        // defined via the module.animation factory function. If nothing is detected then
        // we don't return anything which then makes $animation query the next driver.
        var animations = lookupAnimations(classes);
        var before, after;
        if (animations.length) {
          var afterFn, beforeFn;
          if (event === 'leave') {
            beforeFn = 'leave';
            afterFn = 'afterLeave'; // TODO(matsko): get rid of this
          } else {
            beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);
            afterFn = event;
          }

          if (event !== 'enter' && event !== 'move') {
            before = packageAnimations(element, event, options, animations, beforeFn);
          }
          after = packageAnimations(element, event, options, animations, afterFn);
        }

        // no matching animations
        if (!before && !after) return;

        function applyOptions() {
          options.domOperation();
          applyAnimationClasses(element, options);
        }

        function close() {
          animationClosed = true;
          applyOptions();
          applyAnimationStyles(element, options);
        }

        var runner;

        return {
          $$willAnimate: true,
          end: function () {
            if (runner) {
              runner.end();
            } else {
              close();
              runner = new $$AnimateRunner();
              runner.complete(true);
            }
            return runner;
          },
          start: function () {
            if (runner) {
              return runner;
            }

            runner = new $$AnimateRunner();
            var closeActiveAnimations;
            var chain = [];

            if (before) {
              chain.push(function (fn) {
                closeActiveAnimations = before(fn);
              });
            }

            if (chain.length) {
              chain.push(function (fn) {
                applyOptions();
                fn(true);
              });
            } else {
              applyOptions();
            }

            if (after) {
              chain.push(function (fn) {
                closeActiveAnimations = after(fn);
              });
            }

            runner.setHost({
              end: function () {
                endAnimations();
              },
              cancel: function () {
                endAnimations(true);
              }
            });

            $$AnimateRunner.chain(chain, onComplete);
            return runner;

            function onComplete(success) {
              close(success);
              runner.complete(success);
            }

            function endAnimations(cancelled) {
              if (!animationClosed) {
                (closeActiveAnimations || noop)(cancelled);
                onComplete(cancelled);
              }
            }
          }
        };

        function executeAnimationFn(fn, element, event, options, onDone) {
          var args;
          switch (event) {
            case 'animate':
              args = [element, options.from, options.to, onDone];
              break;

            case 'setClass':
              args = [element, classesToAdd, classesToRemove, onDone];
              break;

            case 'addClass':
              args = [element, classesToAdd, onDone];
              break;

            case 'removeClass':
              args = [element, classesToRemove, onDone];
              break;

            default:
              args = [element, onDone];
              break;
          }

          args.push(options);

          var value = fn.apply(fn, args);
          if (value) {
            if (isFunction(value.start)) {
              value = value.start();
            }

            if (value instanceof $$AnimateRunner) {
              value.done(onDone);
            } else if (isFunction(value)) {
              // optional onEnd / onCancel callback
              return value;
            }
          }

          return noop;
        }

        function groupEventedAnimations(element, event, options, animations, fnName) {
          var operations = [];
          forEach(animations, function (ani) {
            var animation = ani[fnName];
            if (!animation) return;

            // note that all of these animations will run in parallel
            operations.push(function () {
              var runner;
              var endProgressCb;

              var resolved = false;
              var onAnimationComplete = function (rejected) {
                if (!resolved) {
                  resolved = true;
                  (endProgressCb || noop)(rejected);
                  runner.complete(!rejected);
                }
              };

              runner = new $$AnimateRunner({
                end: function () {
                  onAnimationComplete();
                },
                cancel: function () {
                  onAnimationComplete(true);
                }
              });

              endProgressCb = executeAnimationFn(animation, element, event, options, function (result) {
                var cancelled = result === false;
                onAnimationComplete(cancelled);
              });

              return runner;
            });
          });

          return operations;
        }

        function packageAnimations(element, event, options, animations, fnName) {
          var operations = groupEventedAnimations(element, event, options, animations, fnName);
          if (operations.length === 0) {
            var a, b;
            if (fnName === 'beforeSetClass') {
              a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');
              b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');
            } else if (fnName === 'setClass') {
              a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');
              b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');
            }

            if (a) {
              operations = operations.concat(a);
            }
            if (b) {
              operations = operations.concat(b);
            }
          }

          if (operations.length === 0) return;

          // TODO(matsko): add documentation
          return function startAnimation(callback) {
            var runners = [];
            if (operations.length) {
              forEach(operations, function (animateFn) {
                runners.push(animateFn());
              });
            }

            if (runners.length) {
              $$AnimateRunner.all(runners, callback);
            } else {
              callback();
            }

            return function endFn(reject) {
              forEach(runners, function (runner) {
                if (reject) {
                  runner.cancel();
                } else {
                  runner.end();
                }
              });
            };
          };
        }
      };

      function lookupAnimations(classes) {
        classes = isArray(classes) ? classes : classes.split(' ');
        var matches = [],
            flagMap = {};
        for (var i = 0; i < classes.length; i++) {
          var klass = classes[i],
              animationFactory = $animateProvider.$$registeredAnimations[klass];
          if (animationFactory && !flagMap[klass]) {
            matches.push($injector.get(animationFactory));
            flagMap[klass] = true;
          }
        }
        return matches;
      }
    }];
  }];

  var $$AnimateJsDriverProvider = ['$$animationProvider', /** @this */function ($$animationProvider) {
    $$animationProvider.drivers.push('$$animateJsDriver');
    this.$get = ['$$animateJs', '$$AnimateRunner', function ($$animateJs, $$AnimateRunner) {
      return function initDriverFn(animationDetails) {
        if (animationDetails.from && animationDetails.to) {
          var fromAnimation = prepareAnimation(animationDetails.from);
          var toAnimation = prepareAnimation(animationDetails.to);
          if (!fromAnimation && !toAnimation) return;

          return {
            start: function () {
              var animationRunners = [];

              if (fromAnimation) {
                animationRunners.push(fromAnimation.start());
              }

              if (toAnimation) {
                animationRunners.push(toAnimation.start());
              }

              $$AnimateRunner.all(animationRunners, done);

              var runner = new $$AnimateRunner({
                end: endFnFactory(),
                cancel: endFnFactory()
              });

              return runner;

              function endFnFactory() {
                return function () {
                  forEach(animationRunners, function (runner) {
                    // at this point we cannot cancel animations for groups just yet. 1.5+
                    runner.end();
                  });
                };
              }

              function done(status) {
                runner.complete(status);
              }
            }
          };
        } else {
          return prepareAnimation(animationDetails);
        }
      };

      function prepareAnimation(animationDetails) {
        // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations
        var element = animationDetails.element;
        var event = animationDetails.event;
        var options = animationDetails.options;
        var classes = animationDetails.classes;
        return $$animateJs(element, event, classes, options);
      }
    }];
  }];

  var NG_ANIMATE_ATTR_NAME = 'data-ng-animate';
  var NG_ANIMATE_PIN_DATA = '$ngAnimatePin';
  var $$AnimateQueueProvider = ['$animateProvider', /** @this */function ($animateProvider) {
    var PRE_DIGEST_STATE = 1;
    var RUNNING_STATE = 2;
    var ONE_SPACE = ' ';

    var rules = this.rules = {
      skip: [],
      cancel: [],
      join: []
    };

    function makeTruthyCssClassMap(classString) {
      if (!classString) {
        return null;
      }

      var keys = classString.split(ONE_SPACE);
      var map = Object.create(null);

      forEach(keys, function (key) {
        map[key] = true;
      });
      return map;
    }

    function hasMatchingClasses(newClassString, currentClassString) {
      if (newClassString && currentClassString) {
        var currentClassMap = makeTruthyCssClassMap(currentClassString);
        return newClassString.split(ONE_SPACE).some(function (className) {
          return currentClassMap[className];
        });
      }
    }

    function isAllowed(ruleType, currentAnimation, previousAnimation) {
      return rules[ruleType].some(function (fn) {
        return fn(currentAnimation, previousAnimation);
      });
    }

    function hasAnimationClasses(animation, and) {
      var a = (animation.addClass || '').length > 0;
      var b = (animation.removeClass || '').length > 0;
      return and ? a && b : a || b;
    }

    rules.join.push(function (newAnimation, currentAnimation) {
      // if the new animation is class-based then we can just tack that on
      return !newAnimation.structural && hasAnimationClasses(newAnimation);
    });

    rules.skip.push(function (newAnimation, currentAnimation) {
      // there is no need to animate anything if no classes are being added and
      // there is no structural animation that will be triggered
      return !newAnimation.structural && !hasAnimationClasses(newAnimation);
    });

    rules.skip.push(function (newAnimation, currentAnimation) {
      // why should we trigger a new structural animation if the element will
      // be removed from the DOM anyway?
      return currentAnimation.event === 'leave' && newAnimation.structural;
    });

    rules.skip.push(function (newAnimation, currentAnimation) {
      // if there is an ongoing current animation then don't even bother running the class-based animation
      return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;
    });

    rules.cancel.push(function (newAnimation, currentAnimation) {
      // there can never be two structural animations running at the same time
      return currentAnimation.structural && newAnimation.structural;
    });

    rules.cancel.push(function (newAnimation, currentAnimation) {
      // if the previous animation is already running, but the new animation will
      // be triggered, but the new animation is structural
      return currentAnimation.state === RUNNING_STATE && newAnimation.structural;
    });

    rules.cancel.push(function (newAnimation, currentAnimation) {
      // cancel the animation if classes added / removed in both animation cancel each other out,
      // but only if the current animation isn't structural

      if (currentAnimation.structural) return false;

      var nA = newAnimation.addClass;
      var nR = newAnimation.removeClass;
      var cA = currentAnimation.addClass;
      var cR = currentAnimation.removeClass;

      // early detection to save the global CPU shortage :)
      if (isUndefined(nA) && isUndefined(nR) || isUndefined(cA) && isUndefined(cR)) {
        return false;
      }

      return hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA);
    });

    this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$Map', '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow', '$$isDocumentHidden', function ($$rAF, $rootScope, $rootElement, $document, $$Map, $$animation, $$AnimateRunner, $templateRequest, $$jqLite, $$forceReflow, $$isDocumentHidden) {

      var activeAnimationsLookup = new $$Map();
      var disabledElementsLookup = new $$Map();
      var animationsEnabled = null;

      function postDigestTaskFactory() {
        var postDigestCalled = false;
        return function (fn) {
          // we only issue a call to postDigest before
          // it has first passed. This prevents any callbacks
          // from not firing once the animation has completed
          // since it will be out of the digest cycle.
          if (postDigestCalled) {
            fn();
          } else {
            $rootScope.$$postDigest(function () {
              postDigestCalled = true;
              fn();
            });
          }
        };
      }

      // Wait until all directive and route-related templates are downloaded and
      // compiled. The $templateRequest.totalPendingRequests variable keeps track of
      // all of the remote templates being currently downloaded. If there are no
      // templates currently downloading then the watcher will still fire anyway.
      var deregisterWatch = $rootScope.$watch(function () {
        return $templateRequest.totalPendingRequests === 0;
      }, function (isEmpty) {
        if (!isEmpty) return;
        deregisterWatch();

        // Now that all templates have been downloaded, $animate will wait until
        // the post digest queue is empty before enabling animations. By having two
        // calls to $postDigest calls we can ensure that the flag is enabled at the
        // very end of the post digest queue. Since all of the animations in $animate
        // use $postDigest, it's important that the code below executes at the end.
        // This basically means that the page is fully downloaded and compiled before
        // any animations are triggered.
        $rootScope.$$postDigest(function () {
          $rootScope.$$postDigest(function () {
            // we check for null directly in the event that the application already called
            // .enabled() with whatever arguments that it provided it with
            if (animationsEnabled === null) {
              animationsEnabled = true;
            }
          });
        });
      });

      var callbackRegistry = Object.create(null);

      // remember that the `customFilter`/`classNameFilter` are set during the
      // provider/config stage therefore we can optimize here and setup helper functions
      var customFilter = $animateProvider.customFilter();
      var classNameFilter = $animateProvider.classNameFilter();
      var returnTrue = function () {
        return true;
      };

      var isAnimatableByFilter = customFilter || returnTrue;
      var isAnimatableClassName = !classNameFilter ? returnTrue : function (node, options) {
        var className = [node.getAttribute('class'), options.addClass, options.removeClass].join(' ');
        return classNameFilter.test(className);
      };

      var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

      function normalizeAnimationDetails(element, animation) {
        return mergeAnimationDetails(element, animation, {});
      }

      // IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
      var contains = window.Node.prototype.contains || /** @this */function (arg) {
        // eslint-disable-next-line no-bitwise
        return this === arg || !!(this.compareDocumentPosition(arg) & 16);
      };

      function findCallbacks(targetParentNode, targetNode, event) {
        var matches = [];
        var entries = callbackRegistry[event];
        if (entries) {
          forEach(entries, function (entry) {
            if (contains.call(entry.node, targetNode)) {
              matches.push(entry.callback);
            } else if (event === 'leave' && contains.call(entry.node, targetParentNode)) {
              matches.push(entry.callback);
            }
          });
        }

        return matches;
      }

      function filterFromRegistry(list, matchContainer, matchCallback) {
        var containerNode = extractElementNode(matchContainer);
        return list.filter(function (entry) {
          var isMatch = entry.node === containerNode && (!matchCallback || entry.callback === matchCallback);
          return !isMatch;
        });
      }

      function cleanupEventListeners(phase, node) {
        if (phase === 'close' && !node.parentNode) {
          // If the element is not attached to a parentNode, it has been removed by
          // the domOperation, and we can safely remove the event callbacks
          $animate.off(node);
        }
      }

      var $animate = {
        on: function (event, container, callback) {
          var node = extractElementNode(container);
          callbackRegistry[event] = callbackRegistry[event] || [];
          callbackRegistry[event].push({
            node: node,
            callback: callback
          });

          // Remove the callback when the element is removed from the DOM
          jqLite(container).on('$destroy', function () {
            var animationDetails = activeAnimationsLookup.get(node);

            if (!animationDetails) {
              // If there's an animation ongoing, the callback calling code will remove
              // the event listeners. If we'd remove here, the callbacks would be removed
              // before the animation ends
              $animate.off(event, container, callback);
            }
          });
        },

        off: function (event, container, callback) {
          if (arguments.length === 1 && !isString(arguments[0])) {
            container = arguments[0];
            for (var eventType in callbackRegistry) {
              callbackRegistry[eventType] = filterFromRegistry(callbackRegistry[eventType], container);
            }

            return;
          }

          var entries = callbackRegistry[event];
          if (!entries) return;

          callbackRegistry[event] = arguments.length === 1 ? null : filterFromRegistry(entries, container, callback);
        },

        pin: function (element, parentElement) {
          assertArg(isElement(element), 'element', 'not an element');
          assertArg(isElement(parentElement), 'parentElement', 'not an element');
          element.data(NG_ANIMATE_PIN_DATA, parentElement);
        },

        push: function (element, event, options, domOperation) {
          options = options || {};
          options.domOperation = domOperation;
          return queueAnimation(element, event, options);
        },

        // this method has four signatures:
        //  () - global getter
        //  (bool) - global setter
        //  (element) - element getter
        //  (element, bool) - element setter<F37>
        enabled: function (element, bool) {
          var argCount = arguments.length;

          if (argCount === 0) {
            // () - Global getter
            bool = !!animationsEnabled;
          } else {
            var hasElement = isElement(element);

            if (!hasElement) {
              // (bool) - Global setter
              bool = animationsEnabled = !!element;
            } else {
              var node = getDomNode(element);

              if (argCount === 1) {
                // (element) - Element getter
                bool = !disabledElementsLookup.get(node);
              } else {
                // (element, bool) - Element setter
                disabledElementsLookup.set(node, !bool);
              }
            }
          }

          return bool;
        }
      };

      return $animate;

      function queueAnimation(originalElement, event, initialOptions) {
        // we always make a copy of the options since
        // there should never be any side effects on
        // the input data when running `$animateCss`.
        var options = copy(initialOptions);

        var element = stripCommentsFromElement(originalElement);
        var node = getDomNode(element);
        var parentNode = node && node.parentNode;

        options = prepareAnimationOptions(options);

        // we create a fake runner with a working promise.
        // These methods will become available after the digest has passed
        var runner = new $$AnimateRunner();

        // this is used to trigger callbacks in postDigest mode
        var runInNextPostDigestOrNow = postDigestTaskFactory();

        if (isArray(options.addClass)) {
          options.addClass = options.addClass.join(' ');
        }

        if (options.addClass && !isString(options.addClass)) {
          options.addClass = null;
        }

        if (isArray(options.removeClass)) {
          options.removeClass = options.removeClass.join(' ');
        }

        if (options.removeClass && !isString(options.removeClass)) {
          options.removeClass = null;
        }

        if (options.from && !isObject(options.from)) {
          options.from = null;
        }

        if (options.to && !isObject(options.to)) {
          options.to = null;
        }

        // If animations are hard-disabled for the whole application there is no need to continue.
        // There are also situations where a directive issues an animation for a jqLite wrapper that
        // contains only comment nodes. In this case, there is no way we can perform an animation.
        if (!animationsEnabled || !node || !isAnimatableByFilter(node, event, initialOptions) || !isAnimatableClassName(node, options)) {
          close();
          return runner;
        }

        var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

        var documentHidden = $$isDocumentHidden();

        // This is a hard disable of all animations the element itself, therefore  there is no need to
        // continue further past this point if not enabled
        // Animations are also disabled if the document is currently hidden (page is not visible
        // to the user), because browsers slow down or do not flush calls to requestAnimationFrame
        var skipAnimations = documentHidden || disabledElementsLookup.get(node);
        var existingAnimation = !skipAnimations && activeAnimationsLookup.get(node) || {};
        var hasExistingAnimation = !!existingAnimation.state;

        // there is no point in traversing the same collection of parent ancestors if a followup
        // animation will be run on the same element that already did all that checking work
        if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state !== PRE_DIGEST_STATE)) {
          skipAnimations = !areAnimationsAllowed(node, parentNode, event);
        }

        if (skipAnimations) {
          // Callbacks should fire even if the document is hidden (regression fix for issue #14120)
          if (documentHidden) notifyProgress(runner, event, 'start');
          close();
          if (documentHidden) notifyProgress(runner, event, 'close');
          return runner;
        }

        if (isStructural) {
          closeChildAnimations(node);
        }

        var newAnimation = {
          structural: isStructural,
          element: element,
          event: event,
          addClass: options.addClass,
          removeClass: options.removeClass,
          close: close,
          options: options,
          runner: runner
        };

        if (hasExistingAnimation) {
          var skipAnimationFlag = isAllowed('skip', newAnimation, existingAnimation);
          if (skipAnimationFlag) {
            if (existingAnimation.state === RUNNING_STATE) {
              close();
              return runner;
            } else {
              mergeAnimationDetails(element, existingAnimation, newAnimation);
              return existingAnimation.runner;
            }
          }
          var cancelAnimationFlag = isAllowed('cancel', newAnimation, existingAnimation);
          if (cancelAnimationFlag) {
            if (existingAnimation.state === RUNNING_STATE) {
              // this will end the animation right away and it is safe
              // to do so since the animation is already running and the
              // runner callback code will run in async
              existingAnimation.runner.end();
            } else if (existingAnimation.structural) {
              // this means that the animation is queued into a digest, but
              // hasn't started yet. Therefore it is safe to run the close
              // method which will call the runner methods in async.
              existingAnimation.close();
            } else {
              // this will merge the new animation options into existing animation options
              mergeAnimationDetails(element, existingAnimation, newAnimation);

              return existingAnimation.runner;
            }
          } else {
            // a joined animation means that this animation will take over the existing one
            // so an example would involve a leave animation taking over an enter. Then when
            // the postDigest kicks in the enter will be ignored.
            var joinAnimationFlag = isAllowed('join', newAnimation, existingAnimation);
            if (joinAnimationFlag) {
              if (existingAnimation.state === RUNNING_STATE) {
                normalizeAnimationDetails(element, newAnimation);
              } else {
                applyGeneratedPreparationClasses(element, isStructural ? event : null, options);

                event = newAnimation.event = existingAnimation.event;
                options = mergeAnimationDetails(element, existingAnimation, newAnimation);

                //we return the same runner since only the option values of this animation will
                //be fed into the `existingAnimation`.
                return existingAnimation.runner;
              }
            }
          }
        } else {
          // normalization in this case means that it removes redundant CSS classes that
          // already exist (addClass) or do not exist (removeClass) on the element
          normalizeAnimationDetails(element, newAnimation);
        }

        // when the options are merged and cleaned up we may end up not having to do
        // an animation at all, therefore we should check this before issuing a post
        // digest callback. Structural animations will always run no matter what.
        var isValidAnimation = newAnimation.structural;
        if (!isValidAnimation) {
          // animate (from/to) can be quickly checked first, otherwise we check if any classes are present
          isValidAnimation = newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0 || hasAnimationClasses(newAnimation);
        }

        if (!isValidAnimation) {
          close();
          clearElementAnimationState(node);
          return runner;
        }

        // the counter keeps track of cancelled animations
        var counter = (existingAnimation.counter || 0) + 1;
        newAnimation.counter = counter;

        markElementAnimationState(node, PRE_DIGEST_STATE, newAnimation);

        $rootScope.$$postDigest(function () {
          // It is possible that the DOM nodes inside `originalElement` have been replaced. This can
          // happen if the animated element is a transcluded clone and also has a `templateUrl`
          // directive on it. Therefore, we must recreate `element` in order to interact with the
          // actual DOM nodes.
          // Note: We still need to use the old `node` for certain things, such as looking up in
          //       HashMaps where it was used as the key.

          element = stripCommentsFromElement(originalElement);

          var animationDetails = activeAnimationsLookup.get(node);
          var animationCancelled = !animationDetails;
          animationDetails = animationDetails || {};

          // if addClass/removeClass is called before something like enter then the
          // registered parent element may not be present. The code below will ensure
          // that a final value for parent element is obtained
          var parentElement = element.parent() || [];

          // animate/structural/class-based animations all have requirements. Otherwise there
          // is no point in performing an animation. The parent node must also be set.
          var isValidAnimation = parentElement.length > 0 && (animationDetails.event === 'animate' || animationDetails.structural || hasAnimationClasses(animationDetails));

          // this means that the previous animation was cancelled
          // even if the follow-up animation is the same event
          if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {
            // if another animation did not take over then we need
            // to make sure that the domOperation and options are
            // handled accordingly
            if (animationCancelled) {
              applyAnimationClasses(element, options);
              applyAnimationStyles(element, options);
            }

            // if the event changed from something like enter to leave then we do
            // it, otherwise if it's the same then the end result will be the same too
            if (animationCancelled || isStructural && animationDetails.event !== event) {
              options.domOperation();
              runner.end();
            }

            // in the event that the element animation was not cancelled or a follow-up animation
            // isn't allowed to animate from here then we need to clear the state of the element
            // so that any future animations won't read the expired animation data.
            if (!isValidAnimation) {
              clearElementAnimationState(node);
            }

            return;
          }

          // this combined multiple class to addClass / removeClass into a setClass event
          // so long as a structural event did not take over the animation
          event = !animationDetails.structural && hasAnimationClasses(animationDetails, true) ? 'setClass' : animationDetails.event;

          markElementAnimationState(node, RUNNING_STATE);
          var realRunner = $$animation(element, event, animationDetails.options);

          // this will update the runner's flow-control events based on
          // the `realRunner` object.
          runner.setHost(realRunner);
          notifyProgress(runner, event, 'start', {});

          realRunner.done(function (status) {
            close(!status);
            var animationDetails = activeAnimationsLookup.get(node);
            if (animationDetails && animationDetails.counter === counter) {
              clearElementAnimationState(node);
            }
            notifyProgress(runner, event, 'close', {});
          });
        });

        return runner;

        function notifyProgress(runner, event, phase, data) {
          runInNextPostDigestOrNow(function () {
            var callbacks = findCallbacks(parentNode, node, event);
            if (callbacks.length) {
              // do not optimize this call here to RAF because
              // we don't know how heavy the callback code here will
              // be and if this code is buffered then this can
              // lead to a performance regression.
              $$rAF(function () {
                forEach(callbacks, function (callback) {
                  callback(element, phase, data);
                });
                cleanupEventListeners(phase, node);
              });
            } else {
              cleanupEventListeners(phase, node);
            }
          });
          runner.progress(event, phase, data);
        }

        function close(reject) {
          clearGeneratedClasses(element, options);
          applyAnimationClasses(element, options);
          applyAnimationStyles(element, options);
          options.domOperation();
          runner.complete(!reject);
        }
      }

      function closeChildAnimations(node) {
        var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');
        forEach(children, function (child) {
          var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME), 10);
          var animationDetails = activeAnimationsLookup.get(child);
          if (animationDetails) {
            switch (state) {
              case RUNNING_STATE:
                animationDetails.runner.end();
              /* falls through */
              case PRE_DIGEST_STATE:
                activeAnimationsLookup.delete(child);
                break;
            }
          }
        });
      }

      function clearElementAnimationState(node) {
        node.removeAttribute(NG_ANIMATE_ATTR_NAME);
        activeAnimationsLookup.delete(node);
      }

      /**
       * This fn returns false if any of the following is true:
       * a) animations on any parent element are disabled, and animations on the element aren't explicitly allowed
       * b) a parent element has an ongoing structural animation, and animateChildren is false
       * c) the element is not a child of the body
       * d) the element is not a child of the $rootElement
       */
      function areAnimationsAllowed(node, parentNode, event) {
        var bodyNode = $document[0].body;
        var rootNode = getDomNode($rootElement);

        var bodyNodeDetected = node === bodyNode || node.nodeName === 'HTML';
        var rootNodeDetected = node === rootNode;
        var parentAnimationDetected = false;
        var elementDisabled = disabledElementsLookup.get(node);
        var animateChildren;

        var parentHost = jqLite.data(node, NG_ANIMATE_PIN_DATA);
        if (parentHost) {
          parentNode = getDomNode(parentHost);
        }

        while (parentNode) {
          if (!rootNodeDetected) {
            // angular doesn't want to attempt to animate elements outside of the application
            // therefore we need to ensure that the rootElement is an ancestor of the current element
            rootNodeDetected = parentNode === rootNode;
          }

          if (parentNode.nodeType !== ELEMENT_NODE) {
            // no point in inspecting the #document element
            break;
          }

          var details = activeAnimationsLookup.get(parentNode) || {};
          // either an enter, leave or move animation will commence
          // therefore we can't allow any animations to take place
          // but if a parent animation is class-based then that's ok
          if (!parentAnimationDetected) {
            var parentNodeDisabled = disabledElementsLookup.get(parentNode);

            if (parentNodeDisabled === true && elementDisabled !== false) {
              // disable animations if the user hasn't explicitly enabled animations on the
              // current element
              elementDisabled = true;
              // element is disabled via parent element, no need to check anything else
              break;
            } else if (parentNodeDisabled === false) {
              elementDisabled = false;
            }
            parentAnimationDetected = details.structural;
          }

          if (isUndefined(animateChildren) || animateChildren === true) {
            var value = jqLite.data(parentNode, NG_ANIMATE_CHILDREN_DATA);
            if (isDefined(value)) {
              animateChildren = value;
            }
          }

          // there is no need to continue traversing at this point
          if (parentAnimationDetected && animateChildren === false) break;

          if (!bodyNodeDetected) {
            // we also need to ensure that the element is or will be a part of the body element
            // otherwise it is pointless to even issue an animation to be rendered
            bodyNodeDetected = parentNode === bodyNode;
          }

          if (bodyNodeDetected && rootNodeDetected) {
            // If both body and root have been found, any other checks are pointless,
            // as no animation data should live outside the application
            break;
          }

          if (!rootNodeDetected) {
            // If `rootNode` is not detected, check if `parentNode` is pinned to another element
            parentHost = jqLite.data(parentNode, NG_ANIMATE_PIN_DATA);
            if (parentHost) {
              // The pin target element becomes the next parent element
              parentNode = getDomNode(parentHost);
              continue;
            }
          }

          parentNode = parentNode.parentNode;
        }

        var allowAnimation = (!parentAnimationDetected || animateChildren) && elementDisabled !== true;
        return allowAnimation && rootNodeDetected && bodyNodeDetected;
      }

      function markElementAnimationState(node, state, details) {
        details = details || {};
        details.state = state;

        node.setAttribute(NG_ANIMATE_ATTR_NAME, state);

        var oldValue = activeAnimationsLookup.get(node);
        var newValue = oldValue ? extend(oldValue, details) : details;
        activeAnimationsLookup.set(node, newValue);
      }
    }];
  }];

  /* exported $$AnimationProvider */

  var $$AnimationProvider = ['$animateProvider', /** @this */function ($animateProvider) {
    var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';

    var drivers = this.drivers = [];

    var RUNNER_STORAGE_KEY = '$$animationRunner';

    function setRunner(element, runner) {
      element.data(RUNNER_STORAGE_KEY, runner);
    }

    function removeRunner(element) {
      element.removeData(RUNNER_STORAGE_KEY);
    }

    function getRunner(element) {
      return element.data(RUNNER_STORAGE_KEY);
    }

    this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$Map', '$$rAFScheduler', function ($$jqLite, $rootScope, $injector, $$AnimateRunner, $$Map, $$rAFScheduler) {

      var animationQueue = [];
      var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

      function sortAnimations(animations) {
        var tree = { children: [] };
        var i,
            lookup = new $$Map();

        // this is done first beforehand so that the map
        // is filled with a list of the elements that will be animated
        for (i = 0; i < animations.length; i++) {
          var animation = animations[i];
          lookup.set(animation.domNode, animations[i] = {
            domNode: animation.domNode,
            fn: animation.fn,
            children: []
          });
        }

        for (i = 0; i < animations.length; i++) {
          processNode(animations[i]);
        }

        return flatten(tree);

        function processNode(entry) {
          if (entry.processed) return entry;
          entry.processed = true;

          var elementNode = entry.domNode;
          var parentNode = elementNode.parentNode;
          lookup.set(elementNode, entry);

          var parentEntry;
          while (parentNode) {
            parentEntry = lookup.get(parentNode);
            if (parentEntry) {
              if (!parentEntry.processed) {
                parentEntry = processNode(parentEntry);
              }
              break;
            }
            parentNode = parentNode.parentNode;
          }

          (parentEntry || tree).children.push(entry);
          return entry;
        }

        function flatten(tree) {
          var result = [];
          var queue = [];
          var i;

          for (i = 0; i < tree.children.length; i++) {
            queue.push(tree.children[i]);
          }

          var remainingLevelEntries = queue.length;
          var nextLevelEntries = 0;
          var row = [];

          for (i = 0; i < queue.length; i++) {
            var entry = queue[i];
            if (remainingLevelEntries <= 0) {
              remainingLevelEntries = nextLevelEntries;
              nextLevelEntries = 0;
              result.push(row);
              row = [];
            }
            row.push(entry.fn);
            entry.children.forEach(function (childEntry) {
              nextLevelEntries++;
              queue.push(childEntry);
            });
            remainingLevelEntries--;
          }

          if (row.length) {
            result.push(row);
          }

          return result;
        }
      }

      // TODO(matsko): document the signature in a better way
      return function (element, event, options) {
        options = prepareAnimationOptions(options);
        var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

        // there is no animation at the current moment, however
        // these runner methods will get later updated with the
        // methods leading into the driver's end/cancel methods
        // for now they just stop the animation from starting
        var runner = new $$AnimateRunner({
          end: function () {
            close();
          },
          cancel: function () {
            close(true);
          }
        });

        if (!drivers.length) {
          close();
          return runner;
        }

        setRunner(element, runner);

        var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));
        var tempClasses = options.tempClasses;
        if (tempClasses) {
          classes += ' ' + tempClasses;
          options.tempClasses = null;
        }

        var prepareClassName;
        if (isStructural) {
          prepareClassName = 'ng-' + event + PREPARE_CLASS_SUFFIX;
          $$jqLite.addClass(element, prepareClassName);
        }

        animationQueue.push({
          // this data is used by the postDigest code and passed into
          // the driver step function
          element: element,
          classes: classes,
          event: event,
          structural: isStructural,
          options: options,
          beforeStart: beforeStart,
          close: close
        });

        element.on('$destroy', handleDestroyedElement);

        // we only want there to be one function called within the post digest
        // block. This way we can group animations for all the animations that
        // were apart of the same postDigest flush call.
        if (animationQueue.length > 1) return runner;

        $rootScope.$$postDigest(function () {
          var animations = [];
          forEach(animationQueue, function (entry) {
            // the element was destroyed early on which removed the runner
            // form its storage. This means we can't animate this element
            // at all and it already has been closed due to destruction.
            if (getRunner(entry.element)) {
              animations.push(entry);
            } else {
              entry.close();
            }
          });

          // now any future animations will be in another postDigest
          animationQueue.length = 0;

          var groupedAnimations = groupAnimations(animations);
          var toBeSortedAnimations = [];

          forEach(groupedAnimations, function (animationEntry) {
            toBeSortedAnimations.push({
              domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),
              fn: function triggerAnimationStart() {
                // it's important that we apply the `ng-animate` CSS class and the
                // temporary classes before we do any driver invoking since these
                // CSS classes may be required for proper CSS detection.
                animationEntry.beforeStart();

                var startAnimationFn,
                    closeFn = animationEntry.close;

                // in the event that the element was removed before the digest runs or
                // during the RAF sequencing then we should not trigger the animation.
                var targetElement = animationEntry.anchors ? animationEntry.from.element || animationEntry.to.element : animationEntry.element;

                if (getRunner(targetElement)) {
                  var operation = invokeFirstDriver(animationEntry);
                  if (operation) {
                    startAnimationFn = operation.start;
                  }
                }

                if (!startAnimationFn) {
                  closeFn();
                } else {
                  var animationRunner = startAnimationFn();
                  animationRunner.done(function (status) {
                    closeFn(!status);
                  });
                  updateAnimationRunners(animationEntry, animationRunner);
                }
              }
            });
          });

          // we need to sort each of the animations in order of parent to child
          // relationships. This ensures that the child classes are applied at the
          // right time.
          $$rAFScheduler(sortAnimations(toBeSortedAnimations));
        });

        return runner;

        // TODO(matsko): change to reference nodes
        function getAnchorNodes(node) {
          var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';
          var items = node.hasAttribute(NG_ANIMATE_REF_ATTR) ? [node] : node.querySelectorAll(SELECTOR);
          var anchors = [];
          forEach(items, function (node) {
            var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);
            if (attr && attr.length) {
              anchors.push(node);
            }
          });
          return anchors;
        }

        function groupAnimations(animations) {
          var preparedAnimations = [];
          var refLookup = {};
          forEach(animations, function (animation, index) {
            var element = animation.element;
            var node = getDomNode(element);
            var event = animation.event;
            var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;
            var anchorNodes = animation.structural ? getAnchorNodes(node) : [];

            if (anchorNodes.length) {
              var direction = enterOrMove ? 'to' : 'from';

              forEach(anchorNodes, function (anchor) {
                var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);
                refLookup[key] = refLookup[key] || {};
                refLookup[key][direction] = {
                  animationID: index,
                  element: jqLite(anchor)
                };
              });
            } else {
              preparedAnimations.push(animation);
            }
          });

          var usedIndicesLookup = {};
          var anchorGroups = {};
          forEach(refLookup, function (operations, key) {
            var from = operations.from;
            var to = operations.to;

            if (!from || !to) {
              // only one of these is set therefore we can't have an
              // anchor animation since all three pieces are required
              var index = from ? from.animationID : to.animationID;
              var indexKey = index.toString();
              if (!usedIndicesLookup[indexKey]) {
                usedIndicesLookup[indexKey] = true;
                preparedAnimations.push(animations[index]);
              }
              return;
            }

            var fromAnimation = animations[from.animationID];
            var toAnimation = animations[to.animationID];
            var lookupKey = from.animationID.toString();
            if (!anchorGroups[lookupKey]) {
              var group = anchorGroups[lookupKey] = {
                structural: true,
                beforeStart: function () {
                  fromAnimation.beforeStart();
                  toAnimation.beforeStart();
                },
                close: function () {
                  fromAnimation.close();
                  toAnimation.close();
                },
                classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),
                from: fromAnimation,
                to: toAnimation,
                anchors: [] // TODO(matsko): change to reference nodes
              };

              // the anchor animations require that the from and to elements both have at least
              // one shared CSS class which effectively marries the two elements together to use
              // the same animation driver and to properly sequence the anchor animation.
              if (group.classes.length) {
                preparedAnimations.push(group);
              } else {
                preparedAnimations.push(fromAnimation);
                preparedAnimations.push(toAnimation);
              }
            }

            anchorGroups[lookupKey].anchors.push({
              'out': from.element, 'in': to.element
            });
          });

          return preparedAnimations;
        }

        function cssClassesIntersection(a, b) {
          a = a.split(' ');
          b = b.split(' ');
          var matches = [];

          for (var i = 0; i < a.length; i++) {
            var aa = a[i];
            if (aa.substring(0, 3) === 'ng-') continue;

            for (var j = 0; j < b.length; j++) {
              if (aa === b[j]) {
                matches.push(aa);
                break;
              }
            }
          }

          return matches.join(' ');
        }

        function invokeFirstDriver(animationDetails) {
          // we loop in reverse order since the more general drivers (like CSS and JS)
          // may attempt more elements, but custom drivers are more particular
          for (var i = drivers.length - 1; i >= 0; i--) {
            var driverName = drivers[i];
            var factory = $injector.get(driverName);
            var driver = factory(animationDetails);
            if (driver) {
              return driver;
            }
          }
        }

        function beforeStart() {
          element.addClass(NG_ANIMATE_CLASSNAME);
          if (tempClasses) {
            $$jqLite.addClass(element, tempClasses);
          }
          if (prepareClassName) {
            $$jqLite.removeClass(element, prepareClassName);
            prepareClassName = null;
          }
        }

        function updateAnimationRunners(animation, newRunner) {
          if (animation.from && animation.to) {
            update(animation.from.element);
            update(animation.to.element);
          } else {
            update(animation.element);
          }

          function update(element) {
            var runner = getRunner(element);
            if (runner) runner.setHost(newRunner);
          }
        }

        function handleDestroyedElement() {
          var runner = getRunner(element);
          if (runner && (event !== 'leave' || !options.$$domOperationFired)) {
            runner.end();
          }
        }

        function close(rejected) {
          element.off('$destroy', handleDestroyedElement);
          removeRunner(element);

          applyAnimationClasses(element, options);
          applyAnimationStyles(element, options);
          options.domOperation();

          if (tempClasses) {
            $$jqLite.removeClass(element, tempClasses);
          }

          element.removeClass(NG_ANIMATE_CLASSNAME);
          runner.complete(!rejected);
        }
      };
    }];
  }];

  /**
   * @ngdoc directive
   * @name ngAnimateSwap
   * @restrict A
   * @scope
   *
   * @description
   *
   * ngAnimateSwap is a animation-oriented directive that allows for the container to
   * be removed and entered in whenever the associated expression changes. A
   * common usecase for this directive is a rotating banner or slider component which
   * contains one image being present at a time. When the active image changes
   * then the old image will perform a `leave` animation and the new element
   * will be inserted via an `enter` animation.
   *
   * @animations
   * | Animation                        | Occurs                               |
   * |----------------------------------|--------------------------------------|
   * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM  |
   * | {@link ng.$animate#leave leave}  | when the old element is removed from the DOM |
   *
   * @example
   * <example name="ngAnimateSwap-directive" module="ngAnimateSwapExample"
   *          deps="angular-animate.js"
   *          animations="true" fixBase="true">
   *   <file name="index.html">
   *     <div class="container" ng-controller="AppCtrl">
   *       <div ng-animate-swap="number" class="cell swap-animation" ng-class="colorClass(number)">
   *         {{ number }}
   *       </div>
   *     </div>
   *   </file>
   *   <file name="script.js">
   *     angular.module('ngAnimateSwapExample', ['ngAnimate'])
   *       .controller('AppCtrl', ['$scope', '$interval', function($scope, $interval) {
   *         $scope.number = 0;
   *         $interval(function() {
   *           $scope.number++;
   *         }, 1000);
   *
   *         var colors = ['red','blue','green','yellow','orange'];
   *         $scope.colorClass = function(number) {
   *           return colors[number % colors.length];
   *         };
   *       }]);
   *   </file>
   *  <file name="animations.css">
   *  .container {
   *    height:250px;
   *    width:250px;
   *    position:relative;
   *    overflow:hidden;
   *    border:2px solid black;
   *  }
   *  .container .cell {
   *    font-size:150px;
   *    text-align:center;
   *    line-height:250px;
   *    position:absolute;
   *    top:0;
   *    left:0;
   *    right:0;
   *    border-bottom:2px solid black;
   *  }
   *  .swap-animation.ng-enter, .swap-animation.ng-leave {
   *    transition:0.5s linear all;
   *  }
   *  .swap-animation.ng-enter {
   *    top:-250px;
   *  }
   *  .swap-animation.ng-enter-active {
   *    top:0px;
   *  }
   *  .swap-animation.ng-leave {
   *    top:0px;
   *  }
   *  .swap-animation.ng-leave-active {
   *    top:250px;
   *  }
   *  .red { background:red; }
   *  .green { background:green; }
   *  .blue { background:blue; }
   *  .yellow { background:yellow; }
   *  .orange { background:orange; }
   *  </file>
   * </example>
   */
  var ngAnimateSwapDirective = ['$animate', '$rootScope', function ($animate, $rootScope) {
    return {
      restrict: 'A',
      transclude: 'element',
      terminal: true,
      priority: 600, // we use 600 here to ensure that the directive is caught before others
      link: function (scope, $element, attrs, ctrl, $transclude) {
        var previousElement, previousScope;
        scope.$watchCollection(attrs.ngAnimateSwap || attrs['for'], function (value) {
          if (previousElement) {
            $animate.leave(previousElement);
          }
          if (previousScope) {
            previousScope.$destroy();
            previousScope = null;
          }
          if (value || value === 0) {
            previousScope = scope.$new();
            $transclude(previousScope, function (element) {
              previousElement = element;
              $animate.enter(element, null, $element);
            });
          }
        });
      }
    };
  }];

  /**
   * @ngdoc module
   * @name ngAnimate
   * @description
   *
   * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via
   * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an Angular app.
   *
   * <div doc-module-components="ngAnimate"></div>
   *
   * # Usage
   * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based
   * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For
   * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within
   * the HTML element that the animation will be triggered on.
   *
   * ## Directive Support
   * The following directives are "animation aware":
   *
   * | Directive                                                                                                | Supported Animations                                                     |
   * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
   * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |
   * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |
   * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |
   * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |
   * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |
   * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |
   * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |
   * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |
   * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |
   * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |
   *
   * (More information can be found by visiting each the documentation associated with each directive.)
   *
   * ## CSS-based Animations
   *
   * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML
   * and CSS code we can create an animation that will be picked up by Angular when an underlying directive performs an operation.
   *
   * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:
   *
   * ```html
   * <div ng-if="bool" class="fade">
   *    Fade me in out
   * </div>
   * <button ng-click="bool=true">Fade In!</button>
   * <button ng-click="bool=false">Fade Out!</button>
   * ```
   *
   * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:
   *
   * ```css
   * /&#42; The starting CSS styles for the enter animation &#42;/
   * .fade.ng-enter {
   *   transition:0.5s linear all;
   *   opacity:0;
   * }
   *
   * /&#42; The finishing CSS styles for the enter animation &#42;/
   * .fade.ng-enter.ng-enter-active {
   *   opacity:1;
   * }
   * ```
   *
   * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two
   * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition
   * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.
   *
   * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:
   *
   * ```css
   * /&#42; now the element will fade out before it is removed from the DOM &#42;/
   * .fade.ng-leave {
   *   transition:0.5s linear all;
   *   opacity:1;
   * }
   * .fade.ng-leave.ng-leave-active {
   *   opacity:0;
   * }
   * ```
   *
   * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:
   *
   * ```css
   * /&#42; there is no need to define anything inside of the destination
   * CSS class since the keyframe will take charge of the animation &#42;/
   * .fade.ng-leave {
   *   animation: my_fade_animation 0.5s linear;
   *   -webkit-animation: my_fade_animation 0.5s linear;
   * }
   *
   * @keyframes my_fade_animation {
   *   from { opacity:1; }
   *   to { opacity:0; }
   * }
   *
   * @-webkit-keyframes my_fade_animation {
   *   from { opacity:1; }
   *   to { opacity:0; }
   * }
   * ```
   *
   * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.
   *
   * ### CSS Class-based Animations
   *
   * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different
   * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added
   * and removed.
   *
   * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:
   *
   * ```html
   * <div ng-show="bool" class="fade">
   *   Show and hide me
   * </div>
   * <button ng-click="bool=!bool">Toggle</button>
   *
   * <style>
   * .fade.ng-hide {
   *   transition:0.5s linear all;
   *   opacity:0;
   * }
   * </style>
   * ```
   *
   * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since
   * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.
   *
   * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation
   * with CSS styles.
   *
   * ```html
   * <div ng-class="{on:onOff}" class="highlight">
   *   Highlight this box
   * </div>
   * <button ng-click="onOff=!onOff">Toggle</button>
   *
   * <style>
   * .highlight {
   *   transition:0.5s linear all;
   * }
   * .highlight.on-add {
   *   background:white;
   * }
   * .highlight.on {
   *   background:yellow;
   * }
   * .highlight.on-remove {
   *   background:black;
   * }
   * </style>
   * ```
   *
   * We can also make use of CSS keyframes by placing them within the CSS classes.
   *
   *
   * ### CSS Staggering Animations
   * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
   * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be
   * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
   * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
   * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
   *
   * ```css
   * .my-animation.ng-enter {
   *   /&#42; standard transition code &#42;/
   *   transition: 1s linear all;
   *   opacity:0;
   * }
   * .my-animation.ng-enter-stagger {
   *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
   *   transition-delay: 0.1s;
   *
   *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate
   *     to not accidentally inherit a delay property from another CSS class &#42;/
   *   transition-duration: 0s;
   *
   *   /&#42; if you are using animations instead of transitions you should configure as follows:
   *     animation-delay: 0.1s;
   *     animation-duration: 0s; &#42;/
   * }
   * .my-animation.ng-enter.ng-enter-active {
   *   /&#42; standard transition styles &#42;/
   *   opacity:1;
   * }
   * ```
   *
   * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
   * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
   * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
   * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.
   *
   * The following code will issue the **ng-leave-stagger** event on the element provided:
   *
   * ```js
   * var kids = parent.children();
   *
   * $animate.leave(kids[0]); //stagger index=0
   * $animate.leave(kids[1]); //stagger index=1
   * $animate.leave(kids[2]); //stagger index=2
   * $animate.leave(kids[3]); //stagger index=3
   * $animate.leave(kids[4]); //stagger index=4
   *
   * window.requestAnimationFrame(function() {
   *   //stagger has reset itself
   *   $animate.leave(kids[5]); //stagger index=0
   *   $animate.leave(kids[6]); //stagger index=1
   *
   *   $scope.$digest();
   * });
   * ```
   *
   * Stagger animations are currently only supported within CSS-defined animations.
   *
   * ### The `ng-animate` CSS class
   *
   * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.
   * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).
   *
   * Therefore, animations can be applied to an element using this temporary class directly via CSS.
   *
   * ```css
   * .zipper.ng-animate {
   *   transition:0.5s linear all;
   * }
   * .zipper.ng-enter {
   *   opacity:0;
   * }
   * .zipper.ng-enter.ng-enter-active {
   *   opacity:1;
   * }
   * .zipper.ng-leave {
   *   opacity:1;
   * }
   * .zipper.ng-leave.ng-leave-active {
   *   opacity:0;
   * }
   * ```
   *
   * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove
   * the CSS class once an animation has completed.)
   *
   *
   * ### The `ng-[event]-prepare` class
   *
   * This is a special class that can be used to prevent unwanted flickering / flash of content before
   * the actual animation starts. The class is added as soon as an animation is initialized, but removed
   * before the actual animation starts (after waiting for a $digest).
   * It is also only added for *structural* animations (`enter`, `move`, and `leave`).
   *
   * In practice, flickering can appear when nesting elements with structural animations such as `ngIf`
   * into elements that have class-based animations such as `ngClass`.
   *
   * ```html
   * <div ng-class="{red: myProp}">
   *   <div ng-class="{blue: myProp}">
   *     <div class="message" ng-if="myProp"></div>
   *   </div>
   * </div>
   * ```
   *
   * It is possible that during the `enter` animation, the `.message` div will be briefly visible before it starts animating.
   * In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:
   *
   * ```css
   * .message.ng-enter-prepare {
   *   opacity: 0;
   * }
   *
   * ```
   *
   * ## JavaScript-based Animations
   *
   * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared
   * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the
   * `module.animation()` module function we can register the animation.
   *
   * Let's see an example of a enter/leave animation using `ngRepeat`:
   *
   * ```html
   * <div ng-repeat="item in items" class="slide">
   *   {{ item }}
   * </div>
   * ```
   *
   * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:
   *
   * ```js
   * myModule.animation('.slide', [function() {
   *   return {
   *     // make note that other events (like addClass/removeClass)
   *     // have different function input parameters
   *     enter: function(element, doneFn) {
   *       jQuery(element).fadeIn(1000, doneFn);
   *
   *       // remember to call doneFn so that angular
   *       // knows that the animation has concluded
   *     },
   *
   *     move: function(element, doneFn) {
   *       jQuery(element).fadeIn(1000, doneFn);
   *     },
   *
   *     leave: function(element, doneFn) {
   *       jQuery(element).fadeOut(1000, doneFn);
   *     }
   *   }
   * }]);
   * ```
   *
   * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as
   * greensock.js and velocity.js.
   *
   * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define
   * our animations inside of the same registered animation, however, the function input arguments are a bit different:
   *
   * ```html
   * <div ng-class="color" class="colorful">
   *   this box is moody
   * </div>
   * <button ng-click="color='red'">Change to red</button>
   * <button ng-click="color='blue'">Change to blue</button>
   * <button ng-click="color='green'">Change to green</button>
   * ```
   *
   * ```js
   * myModule.animation('.colorful', [function() {
   *   return {
   *     addClass: function(element, className, doneFn) {
   *       // do some cool animation and call the doneFn
   *     },
   *     removeClass: function(element, className, doneFn) {
   *       // do some cool animation and call the doneFn
   *     },
   *     setClass: function(element, addedClass, removedClass, doneFn) {
   *       // do some cool animation and call the doneFn
   *     }
   *   }
   * }]);
   * ```
   *
   * ## CSS + JS Animations Together
   *
   * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,
   * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking
   * charge of the animation**:
   *
   * ```html
   * <div ng-if="bool" class="slide">
   *   Slide in and out
   * </div>
   * ```
   *
   * ```js
   * myModule.animation('.slide', [function() {
   *   return {
   *     enter: function(element, doneFn) {
   *       jQuery(element).slideIn(1000, doneFn);
   *     }
   *   }
   * }]);
   * ```
   *
   * ```css
   * .slide.ng-enter {
   *   transition:0.5s linear all;
   *   transform:translateY(-100px);
   * }
   * .slide.ng-enter.ng-enter-active {
   *   transform:translateY(0);
   * }
   * ```
   *
   * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the
   * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from
   * our own JS-based animation code:
   *
   * ```js
   * myModule.animation('.slide', ['$animateCss', function($animateCss) {
   *   return {
   *     enter: function(element) {
  *        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.
   *       return $animateCss(element, {
   *         event: 'enter',
   *         structural: true
   *       });
   *     }
   *   }
   * }]);
   * ```
   *
   * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.
   *
   * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or
   * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that
   * data into `$animateCss` directly:
   *
   * ```js
   * myModule.animation('.slide', ['$animateCss', function($animateCss) {
   *   return {
   *     enter: function(element) {
   *       return $animateCss(element, {
   *         event: 'enter',
   *         structural: true,
   *         addClass: 'maroon-setting',
   *         from: { height:0 },
   *         to: { height: 200 }
   *       });
   *     }
   *   }
   * }]);
   * ```
   *
   * Now we can fill in the rest via our transition CSS code:
   *
   * ```css
   * /&#42; the transition tells ngAnimate to make the animation happen &#42;/
   * .slide.ng-enter { transition:0.5s linear all; }
   *
   * /&#42; this extra CSS class will be absorbed into the transition
   * since the $animateCss code is adding the class &#42;/
   * .maroon-setting { background:red; }
   * ```
   *
   * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.
   *
   * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.
   *
   * ## Animation Anchoring (via `ng-animate-ref`)
   *
   * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between
   * structural areas of an application (like views) by pairing up elements using an attribute
   * called `ng-animate-ref`.
   *
   * Let's say for example we have two views that are managed by `ng-view` and we want to show
   * that there is a relationship between two components situated in within these views. By using the
   * `ng-animate-ref` attribute we can identify that the two components are paired together and we
   * can then attach an animation, which is triggered when the view changes.
   *
   * Say for example we have the following template code:
   *
   * ```html
   * <!-- index.html -->
   * <div ng-view class="view-animation">
   * </div>
   *
   * <!-- home.html -->
   * <a href="#/banner-page">
   *   <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
   * </a>
   *
   * <!-- banner-page.html -->
   * <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
   * ```
   *
   * Now, when the view changes (once the link is clicked), ngAnimate will examine the
   * HTML contents to see if there is a match reference between any components in the view
   * that is leaving and the view that is entering. It will scan both the view which is being
   * removed (leave) and inserted (enter) to see if there are any paired DOM elements that
   * contain a matching ref value.
   *
   * The two images match since they share the same ref value. ngAnimate will now create a
   * transport element (which is a clone of the first image element) and it will then attempt
   * to animate to the position of the second image element in the next view. For the animation to
   * work a special CSS class called `ng-anchor` will be added to the transported element.
   *
   * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then
   * ngAnimate will handle the entire transition for us as well as the addition and removal of
   * any changes of CSS classes between the elements:
   *
   * ```css
   * .banner.ng-anchor {
   *   /&#42; this animation will last for 1 second since there are
   *          two phases to the animation (an `in` and an `out` phase) &#42;/
   *   transition:0.5s linear all;
   * }
   * ```
   *
   * We also **must** include animations for the views that are being entered and removed
   * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).
   *
   * ```css
   * .view-animation.ng-enter, .view-animation.ng-leave {
   *   transition:0.5s linear all;
   *   position:fixed;
   *   left:0;
   *   top:0;
   *   width:100%;
   * }
   * .view-animation.ng-enter {
   *   transform:translateX(100%);
   * }
   * .view-animation.ng-leave,
   * .view-animation.ng-enter.ng-enter-active {
   *   transform:translateX(0%);
   * }
   * .view-animation.ng-leave.ng-leave-active {
   *   transform:translateX(-100%);
   * }
   * ```
   *
   * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:
   * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away
   * from its origin. Once that animation is over then the `in` stage occurs which animates the
   * element to its destination. The reason why there are two animations is to give enough time
   * for the enter animation on the new element to be ready.
   *
   * The example above sets up a transition for both the in and out phases, but we can also target the out or
   * in phases directly via `ng-anchor-out` and `ng-anchor-in`.
   *
   * ```css
   * .banner.ng-anchor-out {
   *   transition: 0.5s linear all;
   *
   *   /&#42; the scale will be applied during the out animation,
   *          but will be animated away when the in animation runs &#42;/
   *   transform: scale(1.2);
   * }
   *
   * .banner.ng-anchor-in {
   *   transition: 1s linear all;
   * }
   * ```
   *
   *
   *
   *
   * ### Anchoring Demo
   *
    <example module="anchoringExample"
             name="anchoringExample"
             id="anchoringExample"
             deps="angular-animate.js;angular-route.js"
             animations="true">
      <file name="index.html">
        <a href="#!/">Home</a>
        <hr />
        <div class="view-container">
          <div ng-view class="view"></div>
        </div>
      </file>
      <file name="script.js">
        angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])
          .config(['$routeProvider', function($routeProvider) {
            $routeProvider.when('/', {
              templateUrl: 'home.html',
              controller: 'HomeController as home'
            });
            $routeProvider.when('/profile/:id', {
              templateUrl: 'profile.html',
              controller: 'ProfileController as profile'
            });
          }])
          .run(['$rootScope', function($rootScope) {
            $rootScope.records = [
              { id: 1, title: 'Miss Beulah Roob' },
              { id: 2, title: 'Trent Morissette' },
              { id: 3, title: 'Miss Ava Pouros' },
              { id: 4, title: 'Rod Pouros' },
              { id: 5, title: 'Abdul Rice' },
              { id: 6, title: 'Laurie Rutherford Sr.' },
              { id: 7, title: 'Nakia McLaughlin' },
              { id: 8, title: 'Jordon Blanda DVM' },
              { id: 9, title: 'Rhoda Hand' },
              { id: 10, title: 'Alexandrea Sauer' }
            ];
          }])
          .controller('HomeController', [function() {
            //empty
          }])
          .controller('ProfileController', ['$rootScope', '$routeParams',
              function ProfileController($rootScope, $routeParams) {
            var index = parseInt($routeParams.id, 10);
            var record = $rootScope.records[index - 1];
  
            this.title = record.title;
            this.id = record.id;
          }]);
      </file>
      <file name="home.html">
        <h2>Welcome to the home page</h1>
        <p>Please click on an element</p>
        <a class="record"
           ng-href="#!/profile/{{ record.id }}"
           ng-animate-ref="{{ record.id }}"
           ng-repeat="record in records">
          {{ record.title }}
        </a>
      </file>
      <file name="profile.html">
        <div class="profile record" ng-animate-ref="{{ profile.id }}">
          {{ profile.title }}
        </div>
      </file>
      <file name="animations.css">
        .record {
          display:block;
          font-size:20px;
        }
        .profile {
          background:black;
          color:white;
          font-size:100px;
        }
        .view-container {
          position:relative;
        }
        .view-container > .view.ng-animate {
          position:absolute;
          top:0;
          left:0;
          width:100%;
          min-height:500px;
        }
        .view.ng-enter, .view.ng-leave,
        .record.ng-anchor {
          transition:0.5s linear all;
        }
        .view.ng-enter {
          transform:translateX(100%);
        }
        .view.ng-enter.ng-enter-active, .view.ng-leave {
          transform:translateX(0%);
        }
        .view.ng-leave.ng-leave-active {
          transform:translateX(-100%);
        }
        .record.ng-anchor-out {
          background:red;
        }
      </file>
    </example>
   *
   * ### How is the element transported?
   *
   * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting
   * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element
   * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The
   * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match
   * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied
   * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class
   * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element
   * will become visible since the shim class will be removed.
   *
   * ### How is the morphing handled?
   *
   * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out
   * what CSS classes differ between the starting element and the destination element. These different CSS classes
   * will be added/removed on the anchor element and a transition will be applied (the transition that is provided
   * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will
   * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that
   * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since
   * the cloned element is placed inside of root element which is likely close to the body element).
   *
   * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.
   *
   *
   * ## Using $animate in your directive code
   *
   * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?
   * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's
   * imagine we have a greeting box that shows and hides itself when the data changes
   *
   * ```html
   * <greeting-box active="onOrOff">Hi there</greeting-box>
   * ```
   *
   * ```js
   * ngModule.directive('greetingBox', ['$animate', function($animate) {
   *   return function(scope, element, attrs) {
   *     attrs.$observe('active', function(value) {
   *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');
   *     });
   *   });
   * }]);
   * ```
   *
   * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element
   * in our HTML code then we can trigger a CSS or JS animation to happen.
   *
   * ```css
   * /&#42; normally we would create a CSS class to reference on the element &#42;/
   * greeting-box.on { transition:0.5s linear all; background:green; color:white; }
   * ```
   *
   * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's
   * possible be sure to visit the {@link ng.$animate $animate service API page}.
   *
   *
   * ## Callbacks and Promises
   *
   * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger
   * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has
   * ended by chaining onto the returned promise that animation method returns.
   *
   * ```js
   * // somewhere within the depths of the directive
   * $animate.enter(element, parent).then(function() {
   *   //the animation has completed
   * });
   * ```
   *
   * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case
   * anymore.)
   *
   * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering
   * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view
   * routing controller to hook into that:
   *
   * ```js
   * ngModule.controller('HomePageController', ['$animate', function($animate) {
   *   $animate.on('enter', ngViewElement, function(element) {
   *     // the animation for this route has completed
   *   }]);
   * }])
   * ```
   *
   * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)
   */

  var copy;
  var extend;
  var forEach;
  var isArray;
  var isDefined;
  var isElement;
  var isFunction;
  var isObject;
  var isString;
  var isUndefined;
  var jqLite;
  var noop;

  /**
   * @ngdoc service
   * @name $animate
   * @kind object
   *
   * @description
   * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.
   *
   * Click here {@link ng.$animate to learn more about animations with `$animate`}.
   */
  angular.module('ngAnimate', [], function initAngularHelpers() {
    // Access helpers from angular core.
    // Do it inside a `config` block to ensure `window.angular` is available.
    noop = angular.noop;
    copy = angular.copy;
    extend = angular.extend;
    jqLite = angular.element;
    forEach = angular.forEach;
    isArray = angular.isArray;
    isString = angular.isString;
    isObject = angular.isObject;
    isUndefined = angular.isUndefined;
    isDefined = angular.isDefined;
    isFunction = angular.isFunction;
    isElement = angular.isElement;
  }).info({ angularVersion: '1.6.6' }).directive('ngAnimateSwap', ngAnimateSwapDirective).directive('ngAnimateChildren', $$AnimateChildrenDirective).factory('$$rAFScheduler', $$rAFSchedulerFactory).provider('$$animateQueue', $$AnimateQueueProvider).provider('$$animation', $$AnimationProvider).provider('$animateCss', $AnimateCssProvider).provider('$$animateCssDriver', $$AnimateCssDriverProvider).provider('$$animateJs', $$AnimateJsProvider).provider('$$animateJsDriver', $$AnimateJsDriverProvider);
})(window, window.angular);

/***/ }),
/* 146 */
/***/ (function(module, exports) {

/**
 * @license AngularJS v1.6.6
 * (c) 2010-2017 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular) {
  'use strict';

  /**
   * @ngdoc module
   * @name ngCookies
   * @description
   *
   * # ngCookies
   *
   * The `ngCookies` module provides a convenient wrapper for reading and writing browser cookies.
   *
   *
   * <div doc-module-components="ngCookies"></div>
   *
   * See {@link ngCookies.$cookies `$cookies`} for usage.
   */

  angular.module('ngCookies', ['ng']).info({ angularVersion: '1.6.6' }).
  /**
   * @ngdoc provider
   * @name $cookiesProvider
   * @description
   * Use `$cookiesProvider` to change the default behavior of the {@link ngCookies.$cookies $cookies} service.
   * */
  provider('$cookies', [/** @this */function $CookiesProvider() {
    /**
     * @ngdoc property
     * @name $cookiesProvider#defaults
     * @description
     *
     * Object containing default options to pass when setting cookies.
     *
     * The object may have following properties:
     *
     * - **path** - `{string}` - The cookie will be available only for this path and its
     *   sub-paths. By default, this is the URL that appears in your `<base>` tag.
     * - **domain** - `{string}` - The cookie will be available only for this domain and
     *   its sub-domains. For security reasons the user agent will not accept the cookie
     *   if the current domain is not a sub-domain of this domain or equal to it.
     * - **expires** - `{string|Date}` - String of the form "Wdy, DD Mon YYYY HH:MM:SS GMT"
     *   or a Date object indicating the exact date/time this cookie will expire.
     * - **secure** - `{boolean}` - If `true`, then the cookie will only be available through a
     *   secured connection.
     *
     * Note: By default, the address that appears in your `<base>` tag will be used as the path.
     * This is important so that cookies will be visible for all routes when html5mode is enabled.
     *
     * @example
     *
     * ```js
     * angular.module('cookiesProviderExample', ['ngCookies'])
     *   .config(['$cookiesProvider', function($cookiesProvider) {
     *     // Setting default options
     *     $cookiesProvider.defaults.domain = 'foo.com';
     *     $cookiesProvider.defaults.secure = true;
     *   }]);
     * ```
     **/
    var defaults = this.defaults = {};

    function calcOptions(options) {
      return options ? angular.extend({}, defaults, options) : defaults;
    }

    /**
     * @ngdoc service
     * @name $cookies
     *
     * @description
     * Provides read/write access to browser's cookies.
     *
     * <div class="alert alert-info">
     * Up until Angular 1.3, `$cookies` exposed properties that represented the
     * current browser cookie values. In version 1.4, this behavior has changed, and
     * `$cookies` now provides a standard api of getters, setters etc.
     * </div>
     *
     * Requires the {@link ngCookies `ngCookies`} module to be installed.
     *
     * @example
     *
     * ```js
     * angular.module('cookiesExample', ['ngCookies'])
     *   .controller('ExampleController', ['$cookies', function($cookies) {
     *     // Retrieving a cookie
     *     var favoriteCookie = $cookies.get('myFavorite');
     *     // Setting a cookie
     *     $cookies.put('myFavorite', 'oatmeal');
     *   }]);
     * ```
     */
    this.$get = ['$$cookieReader', '$$cookieWriter', function ($$cookieReader, $$cookieWriter) {
      return {
        /**
         * @ngdoc method
         * @name $cookies#get
         *
         * @description
         * Returns the value of given cookie key
         *
         * @param {string} key Id to use for lookup.
         * @returns {string} Raw cookie value.
         */
        get: function (key) {
          return $$cookieReader()[key];
        },

        /**
         * @ngdoc method
         * @name $cookies#getObject
         *
         * @description
         * Returns the deserialized value of given cookie key
         *
         * @param {string} key Id to use for lookup.
         * @returns {Object} Deserialized cookie value.
         */
        getObject: function (key) {
          var value = this.get(key);
          return value ? angular.fromJson(value) : value;
        },

        /**
         * @ngdoc method
         * @name $cookies#getAll
         *
         * @description
         * Returns a key value object with all the cookies
         *
         * @returns {Object} All cookies
         */
        getAll: function () {
          return $$cookieReader();
        },

        /**
         * @ngdoc method
         * @name $cookies#put
         *
         * @description
         * Sets a value for given cookie key
         *
         * @param {string} key Id for the `value`.
         * @param {string} value Raw value to be stored.
         * @param {Object=} options Options object.
         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}
         */
        put: function (key, value, options) {
          $$cookieWriter(key, value, calcOptions(options));
        },

        /**
         * @ngdoc method
         * @name $cookies#putObject
         *
         * @description
         * Serializes and sets a value for given cookie key
         *
         * @param {string} key Id for the `value`.
         * @param {Object} value Value to be stored.
         * @param {Object=} options Options object.
         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}
         */
        putObject: function (key, value, options) {
          this.put(key, angular.toJson(value), options);
        },

        /**
         * @ngdoc method
         * @name $cookies#remove
         *
         * @description
         * Remove given cookie
         *
         * @param {string} key Id of the key-value pair to delete.
         * @param {Object=} options Options object.
         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}
         */
        remove: function (key, options) {
          $$cookieWriter(key, undefined, calcOptions(options));
        }
      };
    }];
  }]);

  angular.module('ngCookies').
  /**
   * @ngdoc service
   * @name $cookieStore
   * @deprecated
   * sinceVersion="v1.4.0"
   * Please use the {@link ngCookies.$cookies `$cookies`} service instead.
   *
   * @requires $cookies
   *
   * @description
   * Provides a key-value (string-object) storage, that is backed by session cookies.
   * Objects put or retrieved from this storage are automatically serialized or
   * deserialized by angular's toJson/fromJson.
   *
   * Requires the {@link ngCookies `ngCookies`} module to be installed.
   *
   * @example
   *
   * ```js
   * angular.module('cookieStoreExample', ['ngCookies'])
   *   .controller('ExampleController', ['$cookieStore', function($cookieStore) {
   *     // Put cookie
   *     $cookieStore.put('myFavorite','oatmeal');
   *     // Get cookie
   *     var favoriteCookie = $cookieStore.get('myFavorite');
   *     // Removing a cookie
   *     $cookieStore.remove('myFavorite');
   *   }]);
   * ```
   */
  factory('$cookieStore', ['$cookies', function ($cookies) {

    return {
      /**
       * @ngdoc method
       * @name $cookieStore#get
       *
       * @description
       * Returns the value of given cookie key
       *
       * @param {string} key Id to use for lookup.
       * @returns {Object} Deserialized cookie value, undefined if the cookie does not exist.
       */
      get: function (key) {
        return $cookies.getObject(key);
      },

      /**
       * @ngdoc method
       * @name $cookieStore#put
       *
       * @description
       * Sets a value for given cookie key
       *
       * @param {string} key Id for the `value`.
       * @param {Object} value Value to be stored.
       */
      put: function (key, value) {
        $cookies.putObject(key, value);
      },

      /**
       * @ngdoc method
       * @name $cookieStore#remove
       *
       * @description
       * Remove given cookie
       *
       * @param {string} key Id of the key-value pair to delete.
       */
      remove: function (key) {
        $cookies.remove(key);
      }
    };
  }]);

  /**
   * @name $$cookieWriter
   * @requires $document
   *
   * @description
   * This is a private service for writing cookies
   *
   * @param {string} name Cookie name
   * @param {string=} value Cookie value (if undefined, cookie will be deleted)
   * @param {Object=} options Object with options that need to be stored for the cookie.
   */
  function $$CookieWriter($document, $log, $browser) {
    var cookiePath = $browser.baseHref();
    var rawDocument = $document[0];

    function buildCookieString(name, value, options) {
      var path, expires;
      options = options || {};
      expires = options.expires;
      path = angular.isDefined(options.path) ? options.path : cookiePath;
      if (angular.isUndefined(value)) {
        expires = 'Thu, 01 Jan 1970 00:00:00 GMT';
        value = '';
      }
      if (angular.isString(expires)) {
        expires = new Date(expires);
      }

      var str = encodeURIComponent(name) + '=' + encodeURIComponent(value);
      str += path ? ';path=' + path : '';
      str += options.domain ? ';domain=' + options.domain : '';
      str += expires ? ';expires=' + expires.toUTCString() : '';
      str += options.secure ? ';secure' : '';

      // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
      // - 300 cookies
      // - 20 cookies per unique domain
      // - 4096 bytes per cookie
      var cookieLength = str.length + 1;
      if (cookieLength > 4096) {
        $log.warn('Cookie \'' + name + '\' possibly not set or overflowed because it was too large (' + cookieLength + ' > 4096 bytes)!');
      }

      return str;
    }

    return function (name, value, options) {
      rawDocument.cookie = buildCookieString(name, value, options);
    };
  }

  $$CookieWriter.$inject = ['$document', '$log', '$browser'];

  angular.module('ngCookies').provider('$$cookieWriter', /** @this */function $$CookieWriterProvider() {
    this.$get = $$CookieWriter;
  });
})(window, window.angular);

/***/ }),
/* 147 */
/***/ (function(module, exports) {

/*! 
 * angular-loading-bar v0.9.0
 * https://chieffancypants.github.io/angular-loading-bar
 * Copyright (c) 2016 Wes Cruver
 * License: MIT
 */
/*
 * angular-loading-bar
 *
 * intercepts XHR requests and creates a loading bar.
 * Based on the excellent nprogress work by rstacruz (more info in readme)
 *
 * (c) 2013 Wes Cruver
 * License: MIT
 */

(function () {

  'use strict';

  // Alias the loading bar for various backwards compatibilities since the project has matured:

  angular.module('angular-loading-bar', ['cfp.loadingBarInterceptor']);
  angular.module('chieffancypants.loadingBar', ['cfp.loadingBarInterceptor']);

  /**
   * loadingBarInterceptor service
   *
   * Registers itself as an Angular interceptor and listens for XHR requests.
   */
  angular.module('cfp.loadingBarInterceptor', ['cfp.loadingBar']).config(['$httpProvider', function ($httpProvider) {

    var interceptor = ['$q', '$cacheFactory', '$timeout', '$rootScope', '$log', 'cfpLoadingBar', function ($q, $cacheFactory, $timeout, $rootScope, $log, cfpLoadingBar) {

      /**
       * The total number of requests made
       */
      var reqsTotal = 0;

      /**
       * The number of requests completed (either successfully or not)
       */
      var reqsCompleted = 0;

      /**
       * The amount of time spent fetching before showing the loading bar
       */
      var latencyThreshold = cfpLoadingBar.latencyThreshold;

      /**
       * $timeout handle for latencyThreshold
       */
      var startTimeout;

      /**
       * calls cfpLoadingBar.complete() which removes the
       * loading bar from the DOM.
       */
      function setComplete() {
        $timeout.cancel(startTimeout);
        cfpLoadingBar.complete();
        reqsCompleted = 0;
        reqsTotal = 0;
      }

      /**
       * Determine if the response has already been cached
       * @param  {Object}  config the config option from the request
       * @return {Boolean} retrns true if cached, otherwise false
       */
      function isCached(config) {
        var cache;
        var defaultCache = $cacheFactory.get('$http');
        var defaults = $httpProvider.defaults;

        // Choose the proper cache source. Borrowed from angular: $http service
        if ((config.cache || defaults.cache) && config.cache !== false && (config.method === 'GET' || config.method === 'JSONP')) {
          cache = angular.isObject(config.cache) ? config.cache : angular.isObject(defaults.cache) ? defaults.cache : defaultCache;
        }

        var cached = cache !== undefined ? cache.get(config.url) !== undefined : false;

        if (config.cached !== undefined && cached !== config.cached) {
          return config.cached;
        }
        config.cached = cached;
        return cached;
      }

      return {
        'request': function (config) {
          // Check to make sure this request hasn't already been cached and that
          // the requester didn't explicitly ask us to ignore this request:
          if (!config.ignoreLoadingBar && !isCached(config)) {
            $rootScope.$broadcast('cfpLoadingBar:loading', { url: config.url });
            if (reqsTotal === 0) {
              startTimeout = $timeout(function () {
                cfpLoadingBar.start();
              }, latencyThreshold);
            }
            reqsTotal++;
            cfpLoadingBar.set(reqsCompleted / reqsTotal);
          }
          return config;
        },

        'response': function (response) {
          if (!response || !response.config) {
            $log.error('Broken interceptor detected: Config object not supplied in response:\n https://github.com/chieffancypants/angular-loading-bar/pull/50');
            return response;
          }

          if (!response.config.ignoreLoadingBar && !isCached(response.config)) {
            reqsCompleted++;
            $rootScope.$broadcast('cfpLoadingBar:loaded', { url: response.config.url, result: response });
            if (reqsCompleted >= reqsTotal) {
              setComplete();
            } else {
              cfpLoadingBar.set(reqsCompleted / reqsTotal);
            }
          }
          return response;
        },

        'responseError': function (rejection) {
          if (!rejection || !rejection.config) {
            $log.error('Broken interceptor detected: Config object not supplied in rejection:\n https://github.com/chieffancypants/angular-loading-bar/pull/50');
            return $q.reject(rejection);
          }

          if (!rejection.config.ignoreLoadingBar && !isCached(rejection.config)) {
            reqsCompleted++;
            $rootScope.$broadcast('cfpLoadingBar:loaded', { url: rejection.config.url, result: rejection });
            if (reqsCompleted >= reqsTotal) {
              setComplete();
            } else {
              cfpLoadingBar.set(reqsCompleted / reqsTotal);
            }
          }
          return $q.reject(rejection);
        }
      };
    }];

    $httpProvider.interceptors.push(interceptor);
  }]);

  /**
   * Loading Bar
   *
   * This service handles adding and removing the actual element in the DOM.
   * Generally, best practices for DOM manipulation is to take place in a
   * directive, but because the element itself is injected in the DOM only upon
   * XHR requests, and it's likely needed on every view, the best option is to
   * use a service.
   */
  angular.module('cfp.loadingBar', []).provider('cfpLoadingBar', function () {

    this.autoIncrement = true;
    this.includeSpinner = true;
    this.includeBar = true;
    this.latencyThreshold = 100;
    this.startSize = 0.02;
    this.parentSelector = 'body';
    this.spinnerTemplate = '<div id="loading-bar-spinner"><div class="spinner-icon"></div></div>';
    this.loadingBarTemplate = '<div id="loading-bar"><div class="bar"><div class="peg"></div></div></div>';

    this.$get = ['$injector', '$document', '$timeout', '$rootScope', function ($injector, $document, $timeout, $rootScope) {
      var $animate;
      var $parentSelector = this.parentSelector,
          loadingBarContainer = angular.element(this.loadingBarTemplate),
          loadingBar = loadingBarContainer.find('div').eq(0),
          spinner = angular.element(this.spinnerTemplate);

      var incTimeout,
          completeTimeout,
          started = false,
          status = 0;

      var autoIncrement = this.autoIncrement;
      var includeSpinner = this.includeSpinner;
      var includeBar = this.includeBar;
      var startSize = this.startSize;

      /**
       * Inserts the loading bar element into the dom, and sets it to 2%
       */
      function _start() {
        if (!$animate) {
          $animate = $injector.get('$animate');
        }

        $timeout.cancel(completeTimeout);

        // do not continually broadcast the started event:
        if (started) {
          return;
        }

        var document = $document[0];
        var parent = document.querySelector ? document.querySelector($parentSelector) : $document.find($parentSelector)[0];

        if (!parent) {
          parent = document.getElementsByTagName('body')[0];
        }

        var $parent = angular.element(parent);
        var $after = parent.lastChild && angular.element(parent.lastChild);

        $rootScope.$broadcast('cfpLoadingBar:started');
        started = true;

        if (includeBar) {
          $animate.enter(loadingBarContainer, $parent, $after);
        }

        if (includeSpinner) {
          $animate.enter(spinner, $parent, loadingBarContainer);
        }

        _set(startSize);
      }

      /**
       * Set the loading bar's width to a certain percent.
       *
       * @param n any value between 0 and 1
       */
      function _set(n) {
        if (!started) {
          return;
        }
        var pct = n * 100 + '%';
        loadingBar.css('width', pct);
        status = n;

        // increment loadingbar to give the illusion that there is always
        // progress but make sure to cancel the previous timeouts so we don't
        // have multiple incs running at the same time.
        if (autoIncrement) {
          $timeout.cancel(incTimeout);
          incTimeout = $timeout(function () {
            _inc();
          }, 250);
        }
      }

      /**
       * Increments the loading bar by a random amount
       * but slows down as it progresses
       */
      function _inc() {
        if (_status() >= 1) {
          return;
        }

        var rnd = 0;

        // TODO: do this mathmatically instead of through conditions

        var stat = _status();
        if (stat >= 0 && stat < 0.25) {
          // Start out between 3 - 6% increments
          rnd = (Math.random() * (5 - 3 + 1) + 3) / 100;
        } else if (stat >= 0.25 && stat < 0.65) {
          // increment between 0 - 3%
          rnd = Math.random() * 3 / 100;
        } else if (stat >= 0.65 && stat < 0.9) {
          // increment between 0 - 2%
          rnd = Math.random() * 2 / 100;
        } else if (stat >= 0.9 && stat < 0.99) {
          // finally, increment it .5 %
          rnd = 0.005;
        } else {
          // after 99%, don't increment:
          rnd = 0;
        }

        var pct = _status() + rnd;
        _set(pct);
      }

      function _status() {
        return status;
      }

      function _completeAnimation() {
        status = 0;
        started = false;
      }

      function _complete() {
        if (!$animate) {
          $animate = $injector.get('$animate');
        }

        $rootScope.$broadcast('cfpLoadingBar:completed');
        _set(1);

        $timeout.cancel(completeTimeout);

        // Attempt to aggregate any start/complete calls within 500ms:
        completeTimeout = $timeout(function () {
          var promise = $animate.leave(loadingBarContainer, _completeAnimation);
          if (promise && promise.then) {
            promise.then(_completeAnimation);
          }
          $animate.leave(spinner);
        }, 500);
      }

      return {
        start: _start,
        set: _set,
        status: _status,
        inc: _inc,
        complete: _complete,
        autoIncrement: this.autoIncrement,
        includeSpinner: this.includeSpinner,
        latencyThreshold: this.latencyThreshold,
        parentSelector: this.parentSelector,
        startSize: this.startSize
      };
    }]; //
  }); // wtf javascript. srsly
})(); //

/***/ }),
/* 148 */
/***/ (function(module, exports) {

/**
 * @license AngularJS v1.6.6
 * (c) 2010-2017 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular) {
  'use strict';

  /* global shallowCopy: true */

  /**
   * Creates a shallow copy of an object, an array or a primitive.
   *
   * Assumes that there are no proto properties for objects.
   */

  function shallowCopy(src, dst) {
    if (isArray(src)) {
      dst = dst || [];

      for (var i = 0, ii = src.length; i < ii; i++) {
        dst[i] = src[i];
      }
    } else if (isObject(src)) {
      dst = dst || {};

      for (var key in src) {
        if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
          dst[key] = src[key];
        }
      }
    }

    return dst || src;
  }

  /* global shallowCopy: false */

  // `isArray` and `isObject` are necessary for `shallowCopy()` (included via `src/shallowCopy.js`).
  // They are initialized inside the `$RouteProvider`, to ensure `window.angular` is available.
  var isArray;
  var isObject;
  var isDefined;
  var noop;

  /**
   * @ngdoc module
   * @name ngRoute
   * @description
   *
   * # ngRoute
   *
   * The `ngRoute` module provides routing and deeplinking services and directives for angular apps.
   *
   * ## Example
   * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
   *
   *
   * <div doc-module-components="ngRoute"></div>
   */
  /* global -ngRouteModule */
  var ngRouteModule = angular.module('ngRoute', []).info({ angularVersion: '1.6.6' }).provider('$route', $RouteProvider).
  // Ensure `$route` will be instantiated in time to capture the initial `$locationChangeSuccess`
  // event (unless explicitly disabled). This is necessary in case `ngView` is included in an
  // asynchronously loaded template.
  run(instantiateRoute);
  var $routeMinErr = angular.$$minErr('ngRoute');
  var isEagerInstantiationEnabled;

  /**
   * @ngdoc provider
   * @name $routeProvider
   * @this
   *
   * @description
   *
   * Used for configuring routes.
   *
   * ## Example
   * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
   *
   * ## Dependencies
   * Requires the {@link ngRoute `ngRoute`} module to be installed.
   */
  function $RouteProvider() {
    isArray = angular.isArray;
    isObject = angular.isObject;
    isDefined = angular.isDefined;
    noop = angular.noop;

    function inherit(parent, extra) {
      return angular.extend(Object.create(parent), extra);
    }

    var routes = {};

    /**
     * @ngdoc method
     * @name $routeProvider#when
     *
     * @param {string} path Route path (matched against `$location.path`). If `$location.path`
     *    contains redundant trailing slash or is missing one, the route will still match and the
     *    `$location.path` will be updated to add or drop the trailing slash to exactly match the
     *    route definition.
     *
     *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up
     *        to the next slash are matched and stored in `$routeParams` under the given `name`
     *        when the route matches.
     *    * `path` can contain named groups starting with a colon and ending with a star:
     *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`
     *        when the route matches.
     *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.
     *
     *    For example, routes like `/color/:color/largecode/:largecode*\/edit` will match
     *    `/color/brown/largecode/code/with/slashes/edit` and extract:
     *
     *    * `color: brown`
     *    * `largecode: code/with/slashes`.
     *
     *
     * @param {Object} route Mapping information to be assigned to `$route.current` on route
     *    match.
     *
     *    Object properties:
     *
     *    - `controller` – `{(string|Function)=}` – Controller fn that should be associated with
     *      newly created scope or the name of a {@link angular.Module#controller registered
     *      controller} if passed as a string.
     *    - `controllerAs` – `{string=}` – An identifier name for a reference to the controller.
     *      If present, the controller will be published to scope under the `controllerAs` name.
     *    - `template` – `{(string|Function)=}` – html template as a string or a function that
     *      returns an html template as a string which should be used by {@link
     *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.
     *      This property takes precedence over `templateUrl`.
     *
     *      If `template` is a function, it will be called with the following parameters:
     *
     *      - `{Array.<Object>}` - route parameters extracted from the current
     *        `$location.path()` by applying the current route
     *
     *      One of `template` or `templateUrl` is required.
     *
     *    - `templateUrl` – `{(string|Function)=}` – path or function that returns a path to an html
     *      template that should be used by {@link ngRoute.directive:ngView ngView}.
     *
     *      If `templateUrl` is a function, it will be called with the following parameters:
     *
     *      - `{Array.<Object>}` - route parameters extracted from the current
     *        `$location.path()` by applying the current route
     *
     *      One of `templateUrl` or `template` is required.
     *
     *    - `resolve` - `{Object.<string, Function>=}` - An optional map of dependencies which should
     *      be injected into the controller. If any of these dependencies are promises, the router
     *      will wait for them all to be resolved or one to be rejected before the controller is
     *      instantiated.
     *      If all the promises are resolved successfully, the values of the resolved promises are
     *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is
     *      fired. If any of the promises are rejected the
     *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired.
     *      For easier access to the resolved dependencies from the template, the `resolve` map will
     *      be available on the scope of the route, under `$resolve` (by default) or a custom name
     *      specified by the `resolveAs` property (see below). This can be particularly useful, when
     *      working with {@link angular.Module#component components} as route templates.<br />
     *      <div class="alert alert-warning">
     *        **Note:** If your scope already contains a property with this name, it will be hidden
     *        or overwritten. Make sure, you specify an appropriate name for this property, that
     *        does not collide with other properties on the scope.
     *      </div>
     *      The map object is:
     *
     *      - `key` – `{string}`: a name of a dependency to be injected into the controller.
     *      - `factory` - `{string|Function}`: If `string` then it is an alias for a service.
     *        Otherwise if function, then it is {@link auto.$injector#invoke injected}
     *        and the return value is treated as the dependency. If the result is a promise, it is
     *        resolved before its value is injected into the controller. Be aware that
     *        `ngRoute.$routeParams` will still refer to the previous route within these resolve
     *        functions.  Use `$route.current.params` to access the new route parameters, instead.
     *
     *    - `resolveAs` - `{string=}` - The name under which the `resolve` map will be available on
     *      the scope of the route. If omitted, defaults to `$resolve`.
     *
     *    - `redirectTo` – `{(string|Function)=}` – value to update
     *      {@link ng.$location $location} path with and trigger route redirection.
     *
     *      If `redirectTo` is a function, it will be called with the following parameters:
     *
     *      - `{Object.<string>}` - route parameters extracted from the current
     *        `$location.path()` by applying the current route templateUrl.
     *      - `{string}` - current `$location.path()`
     *      - `{Object}` - current `$location.search()`
     *
     *      The custom `redirectTo` function is expected to return a string which will be used
     *      to update `$location.url()`. If the function throws an error, no further processing will
     *      take place and the {@link ngRoute.$route#$routeChangeError $routeChangeError} event will
     *      be fired.
     *
     *      Routes that specify `redirectTo` will not have their controllers, template functions
     *      or resolves called, the `$location` will be changed to the redirect url and route
     *      processing will stop. The exception to this is if the `redirectTo` is a function that
     *      returns `undefined`. In this case the route transition occurs as though there was no
     *      redirection.
     *
     *    - `resolveRedirectTo` – `{Function=}` – a function that will (eventually) return the value
     *      to update {@link ng.$location $location} URL with and trigger route redirection. In
     *      contrast to `redirectTo`, dependencies can be injected into `resolveRedirectTo` and the
     *      return value can be either a string or a promise that will be resolved to a string.
     *
     *      Similar to `redirectTo`, if the return value is `undefined` (or a promise that gets
     *      resolved to `undefined`), no redirection takes place and the route transition occurs as
     *      though there was no redirection.
     *
     *      If the function throws an error or the returned promise gets rejected, no further
     *      processing will take place and the
     *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event will be fired.
     *
     *      `redirectTo` takes precedence over `resolveRedirectTo`, so specifying both on the same
     *      route definition, will cause the latter to be ignored.
     *
     *    - `[reloadOnSearch=true]` - `{boolean=}` - reload route when only `$location.search()`
     *      or `$location.hash()` changes.
     *
     *      If the option is set to `false` and url in the browser changes, then
     *      `$routeUpdate` event is broadcasted on the root scope.
     *
     *    - `[caseInsensitiveMatch=false]` - `{boolean=}` - match routes without being case sensitive
     *
     *      If the option is set to `true`, then the particular route can be matched without being
     *      case sensitive
     *
     * @returns {Object} self
     *
     * @description
     * Adds a new route definition to the `$route` service.
     */
    this.when = function (path, route) {
      //copy original route object to preserve params inherited from proto chain
      var routeCopy = shallowCopy(route);
      if (angular.isUndefined(routeCopy.reloadOnSearch)) {
        routeCopy.reloadOnSearch = true;
      }
      if (angular.isUndefined(routeCopy.caseInsensitiveMatch)) {
        routeCopy.caseInsensitiveMatch = this.caseInsensitiveMatch;
      }
      routes[path] = angular.extend(routeCopy, path && pathRegExp(path, routeCopy));

      // create redirection for trailing slashes
      if (path) {
        var redirectPath = path[path.length - 1] === '/' ? path.substr(0, path.length - 1) : path + '/';

        routes[redirectPath] = angular.extend({ redirectTo: path }, pathRegExp(redirectPath, routeCopy));
      }

      return this;
    };

    /**
     * @ngdoc property
     * @name $routeProvider#caseInsensitiveMatch
     * @description
     *
     * A boolean property indicating if routes defined
     * using this provider should be matched using a case insensitive
     * algorithm. Defaults to `false`.
     */
    this.caseInsensitiveMatch = false;

    /**
     * @param path {string} path
     * @param opts {Object} options
     * @return {?Object}
     *
     * @description
     * Normalizes the given path, returning a regular expression
     * and the original path.
     *
     * Inspired by pathRexp in visionmedia/express/lib/utils.js.
     */
    function pathRegExp(path, opts) {
      var insensitive = opts.caseInsensitiveMatch,
          ret = {
        originalPath: path,
        regexp: path
      },
          keys = ret.keys = [];

      path = path.replace(/([().])/g, '\\$1').replace(/(\/)?:(\w+)(\*\?|[?*])?/g, function (_, slash, key, option) {
        var optional = option === '?' || option === '*?' ? '?' : null;
        var star = option === '*' || option === '*?' ? '*' : null;
        keys.push({ name: key, optional: !!optional });
        slash = slash || '';
        return '' + (optional ? '' : slash) + '(?:' + (optional ? slash : '') + (star && '(.+?)' || '([^/]+)') + (optional || '') + ')' + (optional || '');
      }).replace(/([/$*])/g, '\\$1');

      ret.regexp = new RegExp('^' + path + '$', insensitive ? 'i' : '');
      return ret;
    }

    /**
     * @ngdoc method
     * @name $routeProvider#otherwise
     *
     * @description
     * Sets route definition that will be used on route change when no other route definition
     * is matched.
     *
     * @param {Object|string} params Mapping information to be assigned to `$route.current`.
     * If called with a string, the value maps to `redirectTo`.
     * @returns {Object} self
     */
    this.otherwise = function (params) {
      if (typeof params === 'string') {
        params = { redirectTo: params };
      }
      this.when(null, params);
      return this;
    };

    /**
     * @ngdoc method
     * @name $routeProvider#eagerInstantiationEnabled
     * @kind function
     *
     * @description
     * Call this method as a setter to enable/disable eager instantiation of the
     * {@link ngRoute.$route $route} service upon application bootstrap. You can also call it as a
     * getter (i.e. without any arguments) to get the current value of the
     * `eagerInstantiationEnabled` flag.
     *
     * Instantiating `$route` early is necessary for capturing the initial
     * {@link ng.$location#$locationChangeStart $locationChangeStart} event and navigating to the
     * appropriate route. Usually, `$route` is instantiated in time by the
     * {@link ngRoute.ngView ngView} directive. Yet, in cases where `ngView` is included in an
     * asynchronously loaded template (e.g. in another directive's template), the directive factory
     * might not be called soon enough for `$route` to be instantiated _before_ the initial
     * `$locationChangeSuccess` event is fired. Eager instantiation ensures that `$route` is always
     * instantiated in time, regardless of when `ngView` will be loaded.
     *
     * The default value is true.
     *
     * **Note**:<br />
     * You may want to disable the default behavior when unit-testing modules that depend on
     * `ngRoute`, in order to avoid an unexpected request for the default route's template.
     *
     * @param {boolean=} enabled - If provided, update the internal `eagerInstantiationEnabled` flag.
     *
     * @returns {*} The current value of the `eagerInstantiationEnabled` flag if used as a getter or
     *     itself (for chaining) if used as a setter.
     */
    isEagerInstantiationEnabled = true;
    this.eagerInstantiationEnabled = function eagerInstantiationEnabled(enabled) {
      if (isDefined(enabled)) {
        isEagerInstantiationEnabled = enabled;
        return this;
      }

      return isEagerInstantiationEnabled;
    };

    this.$get = ['$rootScope', '$location', '$routeParams', '$q', '$injector', '$templateRequest', '$sce', '$browser', function ($rootScope, $location, $routeParams, $q, $injector, $templateRequest, $sce, $browser) {

      /**
       * @ngdoc service
       * @name $route
       * @requires $location
       * @requires $routeParams
       *
       * @property {Object} current Reference to the current route definition.
       * The route definition contains:
       *
       *   - `controller`: The controller constructor as defined in the route definition.
       *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for
       *     controller instantiation. The `locals` contain
       *     the resolved values of the `resolve` map. Additionally the `locals` also contain:
       *
       *     - `$scope` - The current route scope.
       *     - `$template` - The current route template HTML.
       *
       *     The `locals` will be assigned to the route scope's `$resolve` property. You can override
       *     the property name, using `resolveAs` in the route definition. See
       *     {@link ngRoute.$routeProvider $routeProvider} for more info.
       *
       * @property {Object} routes Object with all route configuration Objects as its properties.
       *
       * @description
       * `$route` is used for deep-linking URLs to controllers and views (HTML partials).
       * It watches `$location.url()` and tries to map the path to an existing route definition.
       *
       * Requires the {@link ngRoute `ngRoute`} module to be installed.
       *
       * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.
       *
       * The `$route` service is typically used in conjunction with the
       * {@link ngRoute.directive:ngView `ngView`} directive and the
       * {@link ngRoute.$routeParams `$routeParams`} service.
       *
       * @example
       * This example shows how changing the URL hash causes the `$route` to match a route against the
       * URL, and the `ngView` pulls in the partial.
       *
       * <example name="$route-service" module="ngRouteExample"
       *          deps="angular-route.js" fixBase="true">
       *   <file name="index.html">
       *     <div ng-controller="MainController">
       *       Choose:
       *       <a href="Book/Moby">Moby</a> |
       *       <a href="Book/Moby/ch/1">Moby: Ch1</a> |
       *       <a href="Book/Gatsby">Gatsby</a> |
       *       <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
       *       <a href="Book/Scarlet">Scarlet Letter</a><br/>
       *
       *       <div ng-view></div>
       *
       *       <hr />
       *
       *       <pre>$location.path() = {{$location.path()}}</pre>
       *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>
       *       <pre>$route.current.params = {{$route.current.params}}</pre>
       *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>
       *       <pre>$routeParams = {{$routeParams}}</pre>
       *     </div>
       *   </file>
       *
       *   <file name="book.html">
       *     controller: {{name}}<br />
       *     Book Id: {{params.bookId}}<br />
       *   </file>
       *
       *   <file name="chapter.html">
       *     controller: {{name}}<br />
       *     Book Id: {{params.bookId}}<br />
       *     Chapter Id: {{params.chapterId}}
       *   </file>
       *
       *   <file name="script.js">
       *     angular.module('ngRouteExample', ['ngRoute'])
       *
       *      .controller('MainController', function($scope, $route, $routeParams, $location) {
       *          $scope.$route = $route;
       *          $scope.$location = $location;
       *          $scope.$routeParams = $routeParams;
       *      })
       *
       *      .controller('BookController', function($scope, $routeParams) {
       *          $scope.name = 'BookController';
       *          $scope.params = $routeParams;
       *      })
       *
       *      .controller('ChapterController', function($scope, $routeParams) {
       *          $scope.name = 'ChapterController';
       *          $scope.params = $routeParams;
       *      })
       *
       *     .config(function($routeProvider, $locationProvider) {
       *       $routeProvider
       *        .when('/Book/:bookId', {
       *         templateUrl: 'book.html',
       *         controller: 'BookController',
       *         resolve: {
       *           // I will cause a 1 second delay
       *           delay: function($q, $timeout) {
       *             var delay = $q.defer();
       *             $timeout(delay.resolve, 1000);
       *             return delay.promise;
       *           }
       *         }
       *       })
       *       .when('/Book/:bookId/ch/:chapterId', {
       *         templateUrl: 'chapter.html',
       *         controller: 'ChapterController'
       *       });
       *
       *       // configure html5 to get links working on jsfiddle
       *       $locationProvider.html5Mode(true);
       *     });
       *
       *   </file>
       *
       *   <file name="protractor.js" type="protractor">
       *     it('should load and compile correct template', function() {
       *       element(by.linkText('Moby: Ch1')).click();
       *       var content = element(by.css('[ng-view]')).getText();
       *       expect(content).toMatch(/controller: ChapterController/);
       *       expect(content).toMatch(/Book Id: Moby/);
       *       expect(content).toMatch(/Chapter Id: 1/);
       *
       *       element(by.partialLinkText('Scarlet')).click();
       *
       *       content = element(by.css('[ng-view]')).getText();
       *       expect(content).toMatch(/controller: BookController/);
       *       expect(content).toMatch(/Book Id: Scarlet/);
       *     });
       *   </file>
       * </example>
       */

      /**
       * @ngdoc event
       * @name $route#$routeChangeStart
       * @eventType broadcast on root scope
       * @description
       * Broadcasted before a route change. At this  point the route services starts
       * resolving all of the dependencies needed for the route change to occur.
       * Typically this involves fetching the view template as well as any dependencies
       * defined in `resolve` route property. Once  all of the dependencies are resolved
       * `$routeChangeSuccess` is fired.
       *
       * The route change (and the `$location` change that triggered it) can be prevented
       * by calling `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on}
       * for more details about event object.
       *
       * @param {Object} angularEvent Synthetic event object.
       * @param {Route} next Future route information.
       * @param {Route} current Current route information.
       */

      /**
       * @ngdoc event
       * @name $route#$routeChangeSuccess
       * @eventType broadcast on root scope
       * @description
       * Broadcasted after a route change has happened successfully.
       * The `resolve` dependencies are now available in the `current.locals` property.
       *
       * {@link ngRoute.directive:ngView ngView} listens for the directive
       * to instantiate the controller and render the view.
       *
       * @param {Object} angularEvent Synthetic event object.
       * @param {Route} current Current route information.
       * @param {Route|Undefined} previous Previous route information, or undefined if current is
       * first route entered.
       */

      /**
       * @ngdoc event
       * @name $route#$routeChangeError
       * @eventType broadcast on root scope
       * @description
       * Broadcasted if a redirection function fails or any redirection or resolve promises are
       * rejected.
       *
       * @param {Object} angularEvent Synthetic event object
       * @param {Route} current Current route information.
       * @param {Route} previous Previous route information.
       * @param {Route} rejection The thrown error or the rejection reason of the promise. Usually
       * the rejection reason is the error that caused the promise to get rejected.
       */

      /**
       * @ngdoc event
       * @name $route#$routeUpdate
       * @eventType broadcast on root scope
       * @description
       * The `reloadOnSearch` property has been set to false, and we are reusing the same
       * instance of the Controller.
       *
       * @param {Object} angularEvent Synthetic event object
       * @param {Route} current Current/previous route information.
       */

      var forceReload = false,
          preparedRoute,
          preparedRouteIsUpdateOnly,
          $route = {
        routes: routes,

        /**
         * @ngdoc method
         * @name $route#reload
         *
         * @description
         * Causes `$route` service to reload the current route even if
         * {@link ng.$location $location} hasn't changed.
         *
         * As a result of that, {@link ngRoute.directive:ngView ngView}
         * creates new scope and reinstantiates the controller.
         */
        reload: function () {
          forceReload = true;

          var fakeLocationEvent = {
            defaultPrevented: false,
            preventDefault: function fakePreventDefault() {
              this.defaultPrevented = true;
              forceReload = false;
            }
          };

          $rootScope.$evalAsync(function () {
            prepareRoute(fakeLocationEvent);
            if (!fakeLocationEvent.defaultPrevented) commitRoute();
          });
        },

        /**
         * @ngdoc method
         * @name $route#updateParams
         *
         * @description
         * Causes `$route` service to update the current URL, replacing
         * current route parameters with those specified in `newParams`.
         * Provided property names that match the route's path segment
         * definitions will be interpolated into the location's path, while
         * remaining properties will be treated as query params.
         *
         * @param {!Object<string, string>} newParams mapping of URL parameter names to values
         */
        updateParams: function (newParams) {
          if (this.current && this.current.$$route) {
            newParams = angular.extend({}, this.current.params, newParams);
            $location.path(interpolate(this.current.$$route.originalPath, newParams));
            // interpolate modifies newParams, only query params are left
            $location.search(newParams);
          } else {
            throw $routeMinErr('norout', 'Tried updating route when with no current route');
          }
        }
      };

      $rootScope.$on('$locationChangeStart', prepareRoute);
      $rootScope.$on('$locationChangeSuccess', commitRoute);

      return $route;

      /////////////////////////////////////////////////////

      /**
       * @param on {string} current url
       * @param route {Object} route regexp to match the url against
       * @return {?Object}
       *
       * @description
       * Check if the route matches the current url.
       *
       * Inspired by match in
       * visionmedia/express/lib/router/router.js.
       */
      function switchRouteMatcher(on, route) {
        var keys = route.keys,
            params = {};

        if (!route.regexp) return null;

        var m = route.regexp.exec(on);
        if (!m) return null;

        for (var i = 1, len = m.length; i < len; ++i) {
          var key = keys[i - 1];

          var val = m[i];

          if (key && val) {
            params[key.name] = val;
          }
        }
        return params;
      }

      function prepareRoute($locationEvent) {
        var lastRoute = $route.current;

        preparedRoute = parseRoute();
        preparedRouteIsUpdateOnly = preparedRoute && lastRoute && preparedRoute.$$route === lastRoute.$$route && angular.equals(preparedRoute.pathParams, lastRoute.pathParams) && !preparedRoute.reloadOnSearch && !forceReload;

        if (!preparedRouteIsUpdateOnly && (lastRoute || preparedRoute)) {
          if ($rootScope.$broadcast('$routeChangeStart', preparedRoute, lastRoute).defaultPrevented) {
            if ($locationEvent) {
              $locationEvent.preventDefault();
            }
          }
        }
      }

      function commitRoute() {
        var lastRoute = $route.current;
        var nextRoute = preparedRoute;

        if (preparedRouteIsUpdateOnly) {
          lastRoute.params = nextRoute.params;
          angular.copy(lastRoute.params, $routeParams);
          $rootScope.$broadcast('$routeUpdate', lastRoute);
        } else if (nextRoute || lastRoute) {
          forceReload = false;
          $route.current = nextRoute;

          var nextRoutePromise = $q.resolve(nextRoute);

          $browser.$$incOutstandingRequestCount();

          nextRoutePromise.then(getRedirectionData).then(handlePossibleRedirection).then(function (keepProcessingRoute) {
            return keepProcessingRoute && nextRoutePromise.then(resolveLocals).then(function (locals) {
              // after route change
              if (nextRoute === $route.current) {
                if (nextRoute) {
                  nextRoute.locals = locals;
                  angular.copy(nextRoute.params, $routeParams);
                }
                $rootScope.$broadcast('$routeChangeSuccess', nextRoute, lastRoute);
              }
            });
          }).catch(function (error) {
            if (nextRoute === $route.current) {
              $rootScope.$broadcast('$routeChangeError', nextRoute, lastRoute, error);
            }
          }).finally(function () {
            // Because `commitRoute()` is called from a `$rootScope.$evalAsync` block (see
            // `$locationWatch`), this `$$completeOutstandingRequest()` call will not cause
            // `outstandingRequestCount` to hit zero.  This is important in case we are redirecting
            // to a new route which also requires some asynchronous work.

            $browser.$$completeOutstandingRequest(noop);
          });
        }
      }

      function getRedirectionData(route) {
        var data = {
          route: route,
          hasRedirection: false
        };

        if (route) {
          if (route.redirectTo) {
            if (angular.isString(route.redirectTo)) {
              data.path = interpolate(route.redirectTo, route.params);
              data.search = route.params;
              data.hasRedirection = true;
            } else {
              var oldPath = $location.path();
              var oldSearch = $location.search();
              var newUrl = route.redirectTo(route.pathParams, oldPath, oldSearch);

              if (angular.isDefined(newUrl)) {
                data.url = newUrl;
                data.hasRedirection = true;
              }
            }
          } else if (route.resolveRedirectTo) {
            return $q.resolve($injector.invoke(route.resolveRedirectTo)).then(function (newUrl) {
              if (angular.isDefined(newUrl)) {
                data.url = newUrl;
                data.hasRedirection = true;
              }

              return data;
            });
          }
        }

        return data;
      }

      function handlePossibleRedirection(data) {
        var keepProcessingRoute = true;

        if (data.route !== $route.current) {
          keepProcessingRoute = false;
        } else if (data.hasRedirection) {
          var oldUrl = $location.url();
          var newUrl = data.url;

          if (newUrl) {
            $location.url(newUrl).replace();
          } else {
            newUrl = $location.path(data.path).search(data.search).replace().url();
          }

          if (newUrl !== oldUrl) {
            // Exit out and don't process current next value,
            // wait for next location change from redirect
            keepProcessingRoute = false;
          }
        }

        return keepProcessingRoute;
      }

      function resolveLocals(route) {
        if (route) {
          var locals = angular.extend({}, route.resolve);
          angular.forEach(locals, function (value, key) {
            locals[key] = angular.isString(value) ? $injector.get(value) : $injector.invoke(value, null, null, key);
          });
          var template = getTemplateFor(route);
          if (angular.isDefined(template)) {
            locals['$template'] = template;
          }
          return $q.all(locals);
        }
      }

      function getTemplateFor(route) {
        var template, templateUrl;
        if (angular.isDefined(template = route.template)) {
          if (angular.isFunction(template)) {
            template = template(route.params);
          }
        } else if (angular.isDefined(templateUrl = route.templateUrl)) {
          if (angular.isFunction(templateUrl)) {
            templateUrl = templateUrl(route.params);
          }
          if (angular.isDefined(templateUrl)) {
            route.loadedTemplateUrl = $sce.valueOf(templateUrl);
            template = $templateRequest(templateUrl);
          }
        }
        return template;
      }

      /**
       * @returns {Object} the current active route, by matching it against the URL
       */
      function parseRoute() {
        // Match a route
        var params, match;
        angular.forEach(routes, function (route, path) {
          if (!match && (params = switchRouteMatcher($location.path(), route))) {
            match = inherit(route, {
              params: angular.extend({}, $location.search(), params),
              pathParams: params });
            match.$$route = route;
          }
        });
        // No route matched; fallback to "otherwise" route
        return match || routes[null] && inherit(routes[null], { params: {}, pathParams: {} });
      }

      /**
       * @returns {string} interpolation of the redirect path with the parameters
       */
      function interpolate(string, params) {
        var result = [];
        angular.forEach((string || '').split(':'), function (segment, i) {
          if (i === 0) {
            result.push(segment);
          } else {
            var segmentMatch = segment.match(/(\w+)(?:[?*])?(.*)/);
            var key = segmentMatch[1];
            result.push(params[key]);
            result.push(segmentMatch[2] || '');
            delete params[key];
          }
        });
        return result.join('');
      }
    }];
  }

  instantiateRoute.$inject = ['$injector'];
  function instantiateRoute($injector) {
    if (isEagerInstantiationEnabled) {
      // Instantiate `$route`
      $injector.get('$route');
    }
  }

  ngRouteModule.provider('$routeParams', $RouteParamsProvider);

  /**
   * @ngdoc service
   * @name $routeParams
   * @requires $route
   * @this
   *
   * @description
   * The `$routeParams` service allows you to retrieve the current set of route parameters.
   *
   * Requires the {@link ngRoute `ngRoute`} module to be installed.
   *
   * The route parameters are a combination of {@link ng.$location `$location`}'s
   * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.
   * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.
   *
   * In case of parameter name collision, `path` params take precedence over `search` params.
   *
   * The service guarantees that the identity of the `$routeParams` object will remain unchanged
   * (but its properties will likely change) even when a route change occurs.
   *
   * Note that the `$routeParams` are only updated *after* a route change completes successfully.
   * This means that you cannot rely on `$routeParams` being correct in route resolve functions.
   * Instead you can use `$route.current.params` to access the new route's parameters.
   *
   * @example
   * ```js
   *  // Given:
   *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby
   *  // Route: /Chapter/:chapterId/Section/:sectionId
   *  //
   *  // Then
   *  $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}
   * ```
   */
  function $RouteParamsProvider() {
    this.$get = function () {
      return {};
    };
  }

  ngRouteModule.directive('ngView', ngViewFactory);
  ngRouteModule.directive('ngView', ngViewFillContentFactory);

  /**
   * @ngdoc directive
   * @name ngView
   * @restrict ECA
   *
   * @description
   * # Overview
   * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by
   * including the rendered template of the current route into the main layout (`index.html`) file.
   * Every time the current route changes, the included view changes with it according to the
   * configuration of the `$route` service.
   *
   * Requires the {@link ngRoute `ngRoute`} module to be installed.
   *
   * @animations
   * | Animation                        | Occurs                              |
   * |----------------------------------|-------------------------------------|
   * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM |
   * | {@link ng.$animate#leave leave}  | when the old element is removed from to the DOM  |
   *
   * The enter and leave animation occur concurrently.
   *
   * @scope
   * @priority 400
   * @param {string=} onload Expression to evaluate whenever the view updates.
   *
   * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll
   *                  $anchorScroll} to scroll the viewport after the view is updated.
   *
   *                  - If the attribute is not set, disable scrolling.
   *                  - If the attribute is set without value, enable scrolling.
   *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated
   *                    as an expression yields a truthy value.
   * @example
      <example name="ngView-directive" module="ngViewExample"
               deps="angular-route.js;angular-animate.js"
               animations="true" fixBase="true">
        <file name="index.html">
          <div ng-controller="MainCtrl as main">
            Choose:
            <a href="Book/Moby">Moby</a> |
            <a href="Book/Moby/ch/1">Moby: Ch1</a> |
            <a href="Book/Gatsby">Gatsby</a> |
            <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
            <a href="Book/Scarlet">Scarlet Letter</a><br/>
  
            <div class="view-animate-container">
              <div ng-view class="view-animate"></div>
            </div>
            <hr />
  
            <pre>$location.path() = {{main.$location.path()}}</pre>
            <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>
            <pre>$route.current.params = {{main.$route.current.params}}</pre>
            <pre>$routeParams = {{main.$routeParams}}</pre>
          </div>
        </file>
  
        <file name="book.html">
          <div>
            controller: {{book.name}}<br />
            Book Id: {{book.params.bookId}}<br />
          </div>
        </file>
  
        <file name="chapter.html">
          <div>
            controller: {{chapter.name}}<br />
            Book Id: {{chapter.params.bookId}}<br />
            Chapter Id: {{chapter.params.chapterId}}
          </div>
        </file>
  
        <file name="animations.css">
          .view-animate-container {
            position:relative;
            height:100px!important;
            background:white;
            border:1px solid black;
            height:40px;
            overflow:hidden;
          }
  
          .view-animate {
            padding:10px;
          }
  
          .view-animate.ng-enter, .view-animate.ng-leave {
            transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;
  
            display:block;
            width:100%;
            border-left:1px solid black;
  
            position:absolute;
            top:0;
            left:0;
            right:0;
            bottom:0;
            padding:10px;
          }
  
          .view-animate.ng-enter {
            left:100%;
          }
          .view-animate.ng-enter.ng-enter-active {
            left:0;
          }
          .view-animate.ng-leave.ng-leave-active {
            left:-100%;
          }
        </file>
  
        <file name="script.js">
          angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])
            .config(['$routeProvider', '$locationProvider',
              function($routeProvider, $locationProvider) {
                $routeProvider
                  .when('/Book/:bookId', {
                    templateUrl: 'book.html',
                    controller: 'BookCtrl',
                    controllerAs: 'book'
                  })
                  .when('/Book/:bookId/ch/:chapterId', {
                    templateUrl: 'chapter.html',
                    controller: 'ChapterCtrl',
                    controllerAs: 'chapter'
                  });
  
                $locationProvider.html5Mode(true);
            }])
            .controller('MainCtrl', ['$route', '$routeParams', '$location',
              function MainCtrl($route, $routeParams, $location) {
                this.$route = $route;
                this.$location = $location;
                this.$routeParams = $routeParams;
            }])
            .controller('BookCtrl', ['$routeParams', function BookCtrl($routeParams) {
              this.name = 'BookCtrl';
              this.params = $routeParams;
            }])
            .controller('ChapterCtrl', ['$routeParams', function ChapterCtrl($routeParams) {
              this.name = 'ChapterCtrl';
              this.params = $routeParams;
            }]);
  
        </file>
  
        <file name="protractor.js" type="protractor">
          it('should load and compile correct template', function() {
            element(by.linkText('Moby: Ch1')).click();
            var content = element(by.css('[ng-view]')).getText();
            expect(content).toMatch(/controller: ChapterCtrl/);
            expect(content).toMatch(/Book Id: Moby/);
            expect(content).toMatch(/Chapter Id: 1/);
  
            element(by.partialLinkText('Scarlet')).click();
  
            content = element(by.css('[ng-view]')).getText();
            expect(content).toMatch(/controller: BookCtrl/);
            expect(content).toMatch(/Book Id: Scarlet/);
          });
        </file>
      </example>
   */

  /**
   * @ngdoc event
   * @name ngView#$viewContentLoaded
   * @eventType emit on the current ngView scope
   * @description
   * Emitted every time the ngView content is reloaded.
   */
  ngViewFactory.$inject = ['$route', '$anchorScroll', '$animate'];
  function ngViewFactory($route, $anchorScroll, $animate) {
    return {
      restrict: 'ECA',
      terminal: true,
      priority: 400,
      transclude: 'element',
      link: function (scope, $element, attr, ctrl, $transclude) {
        var currentScope,
            currentElement,
            previousLeaveAnimation,
            autoScrollExp = attr.autoscroll,
            onloadExp = attr.onload || '';

        scope.$on('$routeChangeSuccess', update);
        update();

        function cleanupLastView() {
          if (previousLeaveAnimation) {
            $animate.cancel(previousLeaveAnimation);
            previousLeaveAnimation = null;
          }

          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }
          if (currentElement) {
            previousLeaveAnimation = $animate.leave(currentElement);
            previousLeaveAnimation.done(function (response) {
              if (response !== false) previousLeaveAnimation = null;
            });
            currentElement = null;
          }
        }

        function update() {
          var locals = $route.current && $route.current.locals,
              template = locals && locals.$template;

          if (angular.isDefined(template)) {
            var newScope = scope.$new();
            var current = $route.current;

            // Note: This will also link all children of ng-view that were contained in the original
            // html. If that content contains controllers, ... they could pollute/change the scope.
            // However, using ng-view on an element with additional content does not make sense...
            // Note: We can't remove them in the cloneAttchFn of $transclude as that
            // function is called before linking the content, which would apply child
            // directives to non existing elements.
            var clone = $transclude(newScope, function (clone) {
              $animate.enter(clone, null, currentElement || $element).done(function onNgViewEnter(response) {
                if (response !== false && angular.isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                  $anchorScroll();
                }
              });
              cleanupLastView();
            });

            currentElement = clone;
            currentScope = current.scope = newScope;
            currentScope.$emit('$viewContentLoaded');
            currentScope.$eval(onloadExp);
          } else {
            cleanupLastView();
          }
        }
      }
    };
  }

  // This directive is called during the $transclude call of the first `ngView` directive.
  // It will replace and compile the content of the element with the loaded template.
  // We need this directive so that the element content is already filled when
  // the link function of another directive on the same element as ngView
  // is called.
  ngViewFillContentFactory.$inject = ['$compile', '$controller', '$route'];
  function ngViewFillContentFactory($compile, $controller, $route) {
    return {
      restrict: 'ECA',
      priority: -400,
      link: function (scope, $element) {
        var current = $route.current,
            locals = current.locals;

        $element.html(locals.$template);

        var link = $compile($element.contents());

        if (current.controller) {
          locals.$scope = scope;
          var controller = $controller(current.controller, locals);
          if (current.controllerAs) {
            scope[current.controllerAs] = controller;
          }
          $element.data('$ngControllerController', controller);
          $element.children().data('$ngControllerController', controller);
        }
        scope[current.resolveAs || '$resolve'] = locals;

        link(scope);
      }
    };
  }
})(window, window.angular);

/***/ }),
/* 149 */
/***/ (function(module, exports) {

/**
 * @license AngularJS v1.6.6
 * (c) 2010-2017 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular) {
  'use strict';

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *     Any commits to this file should be reviewed with security in mind.  *
   *   Changes to this file can potentially create security vulnerabilities. *
   *          An approval from 2 Core members with history of modifying      *
   *                         this file is required.                          *
   *                                                                         *
   *  Does the change somehow allow for arbitrary javascript to be executed? *
   *    Or allows for someone to change the prototype of built-in objects?   *
   *     Or gives undesired access to variables likes document or window?    *
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  var $sanitizeMinErr = angular.$$minErr('$sanitize');
  var bind;
  var extend;
  var forEach;
  var isDefined;
  var lowercase;
  var noop;
  var nodeContains;
  var htmlParser;
  var htmlSanitizeWriter;

  /**
   * @ngdoc module
   * @name ngSanitize
   * @description
   *
   * # ngSanitize
   *
   * The `ngSanitize` module provides functionality to sanitize HTML.
   *
   *
   * <div doc-module-components="ngSanitize"></div>
   *
   * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
   */

  /**
   * @ngdoc service
   * @name $sanitize
   * @kind function
   *
   * @description
   *   Sanitizes an html string by stripping all potentially dangerous tokens.
   *
   *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are
   *   then serialized back to properly escaped html string. This means that no unsafe input can make
   *   it into the returned string.
   *
   *   The whitelist for URL sanitization of attribute values is configured using the functions
   *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider
   *   `$compileProvider`}.
   *
   *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.
   *
   * @param {string} html HTML input.
   * @returns {string} Sanitized HTML.
   *
   * @example
     <example module="sanitizeExample" deps="angular-sanitize.js" name="sanitize-service">
     <file name="index.html">
       <script>
           angular.module('sanitizeExample', ['ngSanitize'])
             .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {
               $scope.snippet =
                 '<p style="color:blue">an html\n' +
                 '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
                 'snippet</p>';
               $scope.deliberatelyTrustDangerousSnippet = function() {
                 return $sce.trustAsHtml($scope.snippet);
               };
             }]);
       </script>
       <div ng-controller="ExampleController">
          Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
         <table>
           <tr>
             <td>Directive</td>
             <td>How</td>
             <td>Source</td>
             <td>Rendered</td>
           </tr>
           <tr id="bind-html-with-sanitize">
             <td>ng-bind-html</td>
             <td>Automatically uses $sanitize</td>
             <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
             <td><div ng-bind-html="snippet"></div></td>
           </tr>
           <tr id="bind-html-with-trust">
             <td>ng-bind-html</td>
             <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
             <td>
             <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
  &lt;/div&gt;</pre>
             </td>
             <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
           </tr>
           <tr id="bind-default">
             <td>ng-bind</td>
             <td>Automatically escapes</td>
             <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
             <td><div ng-bind="snippet"></div></td>
           </tr>
         </table>
         </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should sanitize the html snippet by default', function() {
         expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).
           toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
       });
  
       it('should inline raw snippet if bound to a trusted value', function() {
         expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).
           toBe("<p style=\"color:blue\">an html\n" +
                "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
                "snippet</p>");
       });
  
       it('should escape snippet without any filter', function() {
         expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).
           toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
                "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
                "snippet&lt;/p&gt;");
       });
  
       it('should update', function() {
         element(by.model('snippet')).clear();
         element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
         expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).
           toBe('new <b>text</b>');
         expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).toBe(
           'new <b onclick="alert(1)">text</b>');
         expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).toBe(
           "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
       });
     </file>
     </example>
   */

  /**
   * @ngdoc provider
   * @name $sanitizeProvider
   * @this
   *
   * @description
   * Creates and configures {@link $sanitize} instance.
   */
  function $SanitizeProvider() {
    var svgEnabled = false;

    this.$get = ['$$sanitizeUri', function ($$sanitizeUri) {
      if (svgEnabled) {
        extend(validElements, svgElements);
      }
      return function (html) {
        var buf = [];
        htmlParser(html, htmlSanitizeWriter(buf, function (uri, isImage) {
          return !/^unsafe:/.test($$sanitizeUri(uri, isImage));
        }));
        return buf.join('');
      };
    }];

    /**
     * @ngdoc method
     * @name $sanitizeProvider#enableSvg
     * @kind function
     *
     * @description
     * Enables a subset of svg to be supported by the sanitizer.
     *
     * <div class="alert alert-warning">
     *   <p>By enabling this setting without taking other precautions, you might expose your
     *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned
     *   outside of the containing element and be rendered over other elements on the page (e.g. a login
     *   link). Such behavior can then result in phishing incidents.</p>
     *
     *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg
     *   tags within the sanitized content:</p>
     *
     *   <br>
     *
     *   <pre><code>
     *   .rootOfTheIncludedContent svg {
     *     overflow: hidden !important;
     *   }
     *   </code></pre>
     * </div>
     *
     * @param {boolean=} flag Enable or disable SVG support in the sanitizer.
     * @returns {boolean|ng.$sanitizeProvider} Returns the currently configured value if called
     *    without an argument or self for chaining otherwise.
     */
    this.enableSvg = function (enableSvg) {
      if (isDefined(enableSvg)) {
        svgEnabled = enableSvg;
        return this;
      } else {
        return svgEnabled;
      }
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////
    // Private stuff
    //////////////////////////////////////////////////////////////////////////////////////////////////

    bind = angular.bind;
    extend = angular.extend;
    forEach = angular.forEach;
    isDefined = angular.isDefined;
    lowercase = angular.lowercase;
    noop = angular.noop;

    htmlParser = htmlParserImpl;
    htmlSanitizeWriter = htmlSanitizeWriterImpl;

    nodeContains = window.Node.prototype.contains || /** @this */function (arg) {
      // eslint-disable-next-line no-bitwise
      return !!(this.compareDocumentPosition(arg) & 16);
    };

    // Regular Expressions for parsing tags and attributes
    var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,

    // Match everything outside of normal chars and " (quote character)
    NON_ALPHANUMERIC_REGEXP = /([^#-~ |!])/g;

    // Good source of info about elements and attributes
    // http://dev.w3.org/html5/spec/Overview.html#semantics
    // http://simon.html5.org/html-elements

    // Safe Void Elements - HTML5
    // http://dev.w3.org/html5/spec/Overview.html#void-elements
    var voidElements = toMap('area,br,col,hr,img,wbr');

    // Elements that you can, intentionally, leave open (and which close themselves)
    // http://dev.w3.org/html5/spec/Overview.html#optional-tags
    var optionalEndTagBlockElements = toMap('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr'),
        optionalEndTagInlineElements = toMap('rp,rt'),
        optionalEndTagElements = extend({}, optionalEndTagInlineElements, optionalEndTagBlockElements);

    // Safe Block Elements - HTML5
    var blockElements = extend({}, optionalEndTagBlockElements, toMap('address,article,' + 'aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul'));

    // Inline Elements - HTML5
    var inlineElements = extend({}, optionalEndTagInlineElements, toMap('a,abbr,acronym,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,' + 'samp,small,span,strike,strong,sub,sup,time,tt,u,var'));

    // SVG Elements
    // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements
    // Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.
    // They can potentially allow for arbitrary javascript to be executed. See #11290
    var svgElements = toMap('circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,' + 'hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,' + 'radialGradient,rect,stop,svg,switch,text,title,tspan');

    // Blocked Elements (will be stripped)
    var blockedElements = toMap('script,style');

    var validElements = extend({}, voidElements, blockElements, inlineElements, optionalEndTagElements);

    //Attributes that have href and hence need to be sanitized
    var uriAttrs = toMap('background,cite,href,longdesc,src,xlink:href');

    var htmlAttrs = toMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' + 'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' + 'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' + 'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' + 'valign,value,vspace,width');

    // SVG attributes (without "id" and "name" attributes)
    // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes
    var svgAttrs = toMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' + 'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' + 'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' + 'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' + 'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' + 'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' + 'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' + 'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' + 'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' + 'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' + 'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' + 'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' + 'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' + 'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' + 'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);

    var validAttrs = extend({}, uriAttrs, svgAttrs, htmlAttrs);

    function toMap(str, lowercaseKeys) {
      var obj = {},
          items = str.split(','),
          i;
      for (i = 0; i < items.length; i++) {
        obj[lowercaseKeys ? lowercase(items[i]) : items[i]] = true;
      }
      return obj;
    }

    /**
     * Create an inert document that contains the dirty HTML that needs sanitizing
     * Depending upon browser support we use one of three strategies for doing this.
     * Support: Safari 10.x -> XHR strategy
     * Support: Firefox -> DomParser strategy
     */
    var getInertBodyElement /* function(html: string): HTMLBodyElement */ = function (window, document) {
      var inertDocument;
      if (document && document.implementation) {
        inertDocument = document.implementation.createHTMLDocument('inert');
      } else {
        throw $sanitizeMinErr('noinert', 'Can\'t create an inert html document');
      }
      var inertBodyElement = (inertDocument.documentElement || inertDocument.getDocumentElement()).querySelector('body');

      // Check for the Safari 10.1 bug - which allows JS to run inside the SVG G element
      inertBodyElement.innerHTML = '<svg><g onload="this.parentNode.remove()"></g></svg>';
      if (!inertBodyElement.querySelector('svg')) {
        return getInertBodyElement_XHR;
      } else {
        // Check for the Firefox bug - which prevents the inner img JS from being sanitized
        inertBodyElement.innerHTML = '<svg><p><style><img src="</style><img src=x onerror=alert(1)//">';
        if (inertBodyElement.querySelector('svg img')) {
          return getInertBodyElement_DOMParser;
        } else {
          return getInertBodyElement_InertDocument;
        }
      }

      function getInertBodyElement_XHR(html) {
        // We add this dummy element to ensure that the rest of the content is parsed as expected
        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the `<head>` tag.
        html = '<remove></remove>' + html;
        try {
          html = encodeURI(html);
        } catch (e) {
          return undefined;
        }
        var xhr = new window.XMLHttpRequest();
        xhr.responseType = 'document';
        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);
        xhr.send(null);
        var body = xhr.response.body;
        body.firstChild.remove();
        return body;
      }

      function getInertBodyElement_DOMParser(html) {
        // We add this dummy element to ensure that the rest of the content is parsed as expected
        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the `<head>` tag.
        html = '<remove></remove>' + html;
        try {
          var body = new window.DOMParser().parseFromString(html, 'text/html').body;
          body.firstChild.remove();
          return body;
        } catch (e) {
          return undefined;
        }
      }

      function getInertBodyElement_InertDocument(html) {
        inertBodyElement.innerHTML = html;

        // Support: IE 9-11 only
        // strip custom-namespaced attributes on IE<=11
        if (document.documentMode) {
          stripCustomNsAttrs(inertBodyElement);
        }

        return inertBodyElement;
      }
    }(window, window.document);

    /**
     * @example
     * htmlParser(htmlString, {
     *     start: function(tag, attrs) {},
     *     end: function(tag) {},
     *     chars: function(text) {},
     *     comment: function(text) {}
     * });
     *
     * @param {string} html string
     * @param {object} handler
     */
    function htmlParserImpl(html, handler) {
      if (html === null || html === undefined) {
        html = '';
      } else if (typeof html !== 'string') {
        html = '' + html;
      }

      var inertBodyElement = getInertBodyElement(html);
      if (!inertBodyElement) return '';

      //mXSS protection
      var mXSSAttempts = 5;
      do {
        if (mXSSAttempts === 0) {
          throw $sanitizeMinErr('uinput', 'Failed to sanitize html because the input is unstable');
        }
        mXSSAttempts--;

        // trigger mXSS if it is going to happen by reading and writing the innerHTML
        html = inertBodyElement.innerHTML;
        inertBodyElement = getInertBodyElement(html);
      } while (html !== inertBodyElement.innerHTML);

      var node = inertBodyElement.firstChild;
      while (node) {
        switch (node.nodeType) {
          case 1:
            // ELEMENT_NODE
            handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));
            break;
          case 3:
            // TEXT NODE
            handler.chars(node.textContent);
            break;
        }

        var nextNode;
        if (!(nextNode = node.firstChild)) {
          if (node.nodeType === 1) {
            handler.end(node.nodeName.toLowerCase());
          }
          nextNode = getNonDescendant('nextSibling', node);
          if (!nextNode) {
            while (nextNode == null) {
              node = getNonDescendant('parentNode', node);
              if (node === inertBodyElement) break;
              nextNode = getNonDescendant('nextSibling', node);
              if (node.nodeType === 1) {
                handler.end(node.nodeName.toLowerCase());
              }
            }
          }
        }
        node = nextNode;
      }

      while (node = inertBodyElement.firstChild) {
        inertBodyElement.removeChild(node);
      }
    }

    function attrToMap(attrs) {
      var map = {};
      for (var i = 0, ii = attrs.length; i < ii; i++) {
        var attr = attrs[i];
        map[attr.name] = attr.value;
      }
      return map;
    }

    /**
     * Escapes all potentially dangerous characters, so that the
     * resulting string can be safely inserted into attribute or
     * element text.
     * @param value
     * @returns {string} escaped text
     */
    function encodeEntities(value) {
      return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (value) {
        var hi = value.charCodeAt(0);
        var low = value.charCodeAt(1);
        return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';
      }).replace(NON_ALPHANUMERIC_REGEXP, function (value) {
        return '&#' + value.charCodeAt(0) + ';';
      }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }

    /**
     * create an HTML/XML writer which writes to buffer
     * @param {Array} buf use buf.join('') to get out sanitized html string
     * @returns {object} in the form of {
     *     start: function(tag, attrs) {},
     *     end: function(tag) {},
     *     chars: function(text) {},
     *     comment: function(text) {}
     * }
     */
    function htmlSanitizeWriterImpl(buf, uriValidator) {
      var ignoreCurrentElement = false;
      var out = bind(buf, buf.push);
      return {
        start: function (tag, attrs) {
          tag = lowercase(tag);
          if (!ignoreCurrentElement && blockedElements[tag]) {
            ignoreCurrentElement = tag;
          }
          if (!ignoreCurrentElement && validElements[tag] === true) {
            out('<');
            out(tag);
            forEach(attrs, function (value, key) {
              var lkey = lowercase(key);
              var isImage = tag === 'img' && lkey === 'src' || lkey === 'background';
              if (validAttrs[lkey] === true && (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
                out(' ');
                out(key);
                out('="');
                out(encodeEntities(value));
                out('"');
              }
            });
            out('>');
          }
        },
        end: function (tag) {
          tag = lowercase(tag);
          if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {
            out('</');
            out(tag);
            out('>');
          }
          // eslint-disable-next-line eqeqeq
          if (tag == ignoreCurrentElement) {
            ignoreCurrentElement = false;
          }
        },
        chars: function (chars) {
          if (!ignoreCurrentElement) {
            out(encodeEntities(chars));
          }
        }
      };
    }

    /**
     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare
     * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want
     * to allow any of these custom attributes. This method strips them all.
     *
     * @param node Root element to process
     */
    function stripCustomNsAttrs(node) {
      while (node) {
        if (node.nodeType === window.Node.ELEMENT_NODE) {
          var attrs = node.attributes;
          for (var i = 0, l = attrs.length; i < l; i++) {
            var attrNode = attrs[i];
            var attrName = attrNode.name.toLowerCase();
            if (attrName === 'xmlns:ns1' || attrName.lastIndexOf('ns1:', 0) === 0) {
              node.removeAttributeNode(attrNode);
              i--;
              l--;
            }
          }
        }

        var nextNode = node.firstChild;
        if (nextNode) {
          stripCustomNsAttrs(nextNode);
        }

        node = getNonDescendant('nextSibling', node);
      }
    }

    function getNonDescendant(propName, node) {
      // An element is clobbered if its `propName` property points to one of its descendants
      var nextNode = node[propName];
      if (nextNode && nodeContains.call(node, nextNode)) {
        throw $sanitizeMinErr('elclob', 'Failed to sanitize html because the element is clobbered: {0}', node.outerHTML || node.outerText);
      }
      return nextNode;
    }
  }

  function sanitizeText(chars) {
    var buf = [];
    var writer = htmlSanitizeWriter(buf, noop);
    writer.chars(chars);
    return buf.join('');
  }

  // define ngSanitize module and register $sanitize service
  angular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider).info({ angularVersion: '1.6.6' });

  /**
   * @ngdoc filter
   * @name linky
   * @kind function
   *
   * @description
   * Finds links in text input and turns them into html links. Supports `http/https/ftp/mailto` and
   * plain email address links.
   *
   * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
   *
   * @param {string} text Input text.
   * @param {string} target Window (`_blank|_self|_parent|_top`) or named frame to open links in.
   * @param {object|function(url)} [attributes] Add custom attributes to the link element.
   *
   *    Can be one of:
   *
   *    - `object`: A map of attributes
   *    - `function`: Takes the url as a parameter and returns a map of attributes
   *
   *    If the map of attributes contains a value for `target`, it overrides the value of
   *    the target parameter.
   *
   *
   * @returns {string} Html-linkified and {@link $sanitize sanitized} text.
   *
   * @usage
     <span ng-bind-html="linky_expression | linky"></span>
   *
   * @example
     <example module="linkyExample" deps="angular-sanitize.js" name="linky-filter">
       <file name="index.html">
         <div ng-controller="ExampleController">
         Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
         <table>
           <tr>
             <th>Filter</th>
             <th>Source</th>
             <th>Rendered</th>
           </tr>
           <tr id="linky-filter">
             <td>linky filter</td>
             <td>
               <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
             </td>
             <td>
               <div ng-bind-html="snippet | linky"></div>
             </td>
           </tr>
           <tr id="linky-target">
            <td>linky target</td>
            <td>
              <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
            </td>
            <td>
              <div ng-bind-html="snippetWithSingleURL | linky:'_blank'"></div>
            </td>
           </tr>
           <tr id="linky-custom-attributes">
            <td>linky custom attributes</td>
            <td>
              <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"&gt;<br>&lt;/div&gt;</pre>
            </td>
            <td>
              <div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"></div>
            </td>
           </tr>
           <tr id="escaped-html">
             <td>no filter</td>
             <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
             <td><div ng-bind="snippet"></div></td>
           </tr>
         </table>
       </file>
       <file name="script.js">
         angular.module('linkyExample', ['ngSanitize'])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.snippet =
               'Pretty text with some links:\n' +
               'http://angularjs.org/,\n' +
               'mailto:us@somewhere.org,\n' +
               'another@somewhere.org,\n' +
               'and one more: ftp://127.0.0.1/.';
             $scope.snippetWithSingleURL = 'http://angularjs.org/';
           }]);
       </file>
       <file name="protractor.js" type="protractor">
         it('should linkify the snippet with urls', function() {
           expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
               toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
                    'another@somewhere.org, and one more: ftp://127.0.0.1/.');
           expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
         });
  
         it('should not linkify snippet without the linky filter', function() {
           expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
               toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
                    'another@somewhere.org, and one more: ftp://127.0.0.1/.');
           expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
         });
  
         it('should update', function() {
           element(by.model('snippet')).clear();
           element(by.model('snippet')).sendKeys('new http://link.');
           expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
               toBe('new http://link.');
           expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
           expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
               .toBe('new http://link.');
         });
  
         it('should work with the target property', function() {
          expect(element(by.id('linky-target')).
              element(by.binding("snippetWithSingleURL | linky:'_blank'")).getText()).
              toBe('http://angularjs.org/');
          expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
         });
  
         it('should optionally add custom attributes', function() {
          expect(element(by.id('linky-custom-attributes')).
              element(by.binding("snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}")).getText()).
              toBe('http://angularjs.org/');
          expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');
         });
       </file>
     </example>
   */
  angular.module('ngSanitize').filter('linky', ['$sanitize', function ($sanitize) {
    var LINKY_URL_REGEXP = /((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,
        MAILTO_REGEXP = /^mailto:/i;

    var linkyMinErr = angular.$$minErr('linky');
    var isDefined = angular.isDefined;
    var isFunction = angular.isFunction;
    var isObject = angular.isObject;
    var isString = angular.isString;

    return function (text, target, attributes) {
      if (text == null || text === '') return text;
      if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);

      var attributesFn = isFunction(attributes) ? attributes : isObject(attributes) ? function getAttributesObject() {
        return attributes;
      } : function getEmptyAttributesObject() {
        return {};
      };

      var match;
      var raw = text;
      var html = [];
      var url;
      var i;
      while (match = raw.match(LINKY_URL_REGEXP)) {
        // We can not end in these as they are sometimes found at the end of the sentence
        url = match[0];
        // if we did not match ftp/http/www/mailto then assume mailto
        if (!match[2] && !match[4]) {
          url = (match[3] ? 'http://' : 'mailto:') + url;
        }
        i = match.index;
        addText(raw.substr(0, i));
        addLink(url, match[0].replace(MAILTO_REGEXP, ''));
        raw = raw.substring(i + match[0].length);
      }
      addText(raw);
      return $sanitize(html.join(''));

      function addText(text) {
        if (!text) {
          return;
        }
        html.push(sanitizeText(text));
      }

      function addLink(url, text) {
        var key,
            linkAttributes = attributesFn(url);
        html.push('<a ');

        for (key in linkAttributes) {
          html.push(key + '="' + linkAttributes[key] + '" ');
        }

        if (isDefined(target) && !('target' in linkAttributes)) {
          html.push('target="', target, '" ');
        }
        html.push('href="', url.replace(/"/g, '&quot;'), '">');
        addText(text);
        html.push('</a>');
      }
    };
  }]);
})(window, window.angular);

/***/ }),
/* 150 */
/***/ (function(module, exports) {

/**
 * @license AngularJS v1.6.6
 * (c) 2010-2017 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular) {
  'use strict';

  /* global ngTouchClickDirectiveFactory: false */

  /**
   * @ngdoc module
   * @name ngTouch
   * @description
   *
   * # ngTouch
   *
   * The `ngTouch` module provides touch events and other helpers for touch-enabled devices.
   * The implementation is based on jQuery Mobile touch event handling
   * ([jquerymobile.com](http://jquerymobile.com/)).
   *
   *
   * See {@link ngTouch.$swipe `$swipe`} for usage.
   *
   * <div doc-module-components="ngTouch"></div>
   *
   */

  // define ngTouch module
  /* global -ngTouch */

  var ngTouch = angular.module('ngTouch', []);

  ngTouch.info({ angularVersion: '1.6.6' });

  ngTouch.provider('$touch', $TouchProvider);

  function nodeName_(element) {
    return angular.lowercase(element.nodeName || element[0] && element[0].nodeName);
  }

  /**
   * @ngdoc provider
   * @name $touchProvider
   *
   * @description
   * The `$touchProvider` allows enabling / disabling {@link ngTouch.ngClick ngTouch's ngClick directive}.
   */
  $TouchProvider.$inject = ['$provide', '$compileProvider'];
  function $TouchProvider($provide, $compileProvider) {

    /**
     * @ngdoc method
     * @name  $touchProvider#ngClickOverrideEnabled
     *
     * @param {boolean=} enabled update the ngClickOverrideEnabled state if provided, otherwise just return the
     * current ngClickOverrideEnabled state
     * @returns {*} current value if used as getter or itself (chaining) if used as setter
     *
     * @kind function
     *
     * @description
     * Call this method to enable/disable {@link ngTouch.ngClick ngTouch's ngClick directive}. If enabled,
     * the default ngClick directive will be replaced by a version that eliminates the 300ms delay for
     * click events on browser for touch-devices.
     *
     * The default is `false`.
     *
     */
    var ngClickOverrideEnabled = false;
    var ngClickDirectiveAdded = false;
    // eslint-disable-next-line no-invalid-this
    this.ngClickOverrideEnabled = function (enabled) {
      if (angular.isDefined(enabled)) {

        if (enabled && !ngClickDirectiveAdded) {
          ngClickDirectiveAdded = true;

          // Use this to identify the correct directive in the delegate
          ngTouchClickDirectiveFactory.$$moduleName = 'ngTouch';
          $compileProvider.directive('ngClick', ngTouchClickDirectiveFactory);

          $provide.decorator('ngClickDirective', ['$delegate', function ($delegate) {
            if (ngClickOverrideEnabled) {
              // drop the default ngClick directive
              $delegate.shift();
            } else {
              // drop the ngTouch ngClick directive if the override has been re-disabled (because
              // we cannot de-register added directives)
              var i = $delegate.length - 1;
              while (i >= 0) {
                if ($delegate[i].$$moduleName === 'ngTouch') {
                  $delegate.splice(i, 1);
                  break;
                }
                i--;
              }
            }

            return $delegate;
          }]);
        }

        ngClickOverrideEnabled = enabled;
        return this;
      }

      return ngClickOverrideEnabled;
    };

    /**
    * @ngdoc service
    * @name $touch
    * @kind object
    *
    * @description
    * Provides the {@link ngTouch.$touch#ngClickOverrideEnabled `ngClickOverrideEnabled`} method.
    *
    */
    // eslint-disable-next-line no-invalid-this
    this.$get = function () {
      return {
        /**
         * @ngdoc method
         * @name  $touch#ngClickOverrideEnabled
         *
         * @returns {*} current value of `ngClickOverrideEnabled` set in the {@link ngTouch.$touchProvider $touchProvider},
         * i.e. if {@link ngTouch.ngClick ngTouch's ngClick} directive is enabled.
         *
         * @kind function
         */
        ngClickOverrideEnabled: function () {
          return ngClickOverrideEnabled;
        }
      };
    };
  }

  /* global ngTouch: false */

  /**
   * @ngdoc service
   * @name $swipe
   *
   * @description
   * The `$swipe` service is a service that abstracts the messier details of hold-and-drag swipe
   * behavior, to make implementing swipe-related directives more convenient.
   *
   * Requires the {@link ngTouch `ngTouch`} module to be installed.
   *
   * `$swipe` is used by the `ngSwipeLeft` and `ngSwipeRight` directives in `ngTouch`.
   *
   * # Usage
   * The `$swipe` service is an object with a single method: `bind`. `bind` takes an element
   * which is to be watched for swipes, and an object with four handler functions. See the
   * documentation for `bind` below.
   */

  ngTouch.factory('$swipe', [function () {
    // The total distance in any direction before we make the call on swipe vs. scroll.
    var MOVE_BUFFER_RADIUS = 10;

    var POINTER_EVENTS = {
      'mouse': {
        start: 'mousedown',
        move: 'mousemove',
        end: 'mouseup'
      },
      'touch': {
        start: 'touchstart',
        move: 'touchmove',
        end: 'touchend',
        cancel: 'touchcancel'
      },
      'pointer': {
        start: 'pointerdown',
        move: 'pointermove',
        end: 'pointerup',
        cancel: 'pointercancel'
      }
    };

    function getCoordinates(event) {
      var originalEvent = event.originalEvent || event;
      var touches = originalEvent.touches && originalEvent.touches.length ? originalEvent.touches : [originalEvent];
      var e = originalEvent.changedTouches && originalEvent.changedTouches[0] || touches[0];

      return {
        x: e.clientX,
        y: e.clientY
      };
    }

    function getEvents(pointerTypes, eventType) {
      var res = [];
      angular.forEach(pointerTypes, function (pointerType) {
        var eventName = POINTER_EVENTS[pointerType][eventType];
        if (eventName) {
          res.push(eventName);
        }
      });
      return res.join(' ');
    }

    return {
      /**
       * @ngdoc method
       * @name $swipe#bind
       *
       * @description
       * The main method of `$swipe`. It takes an element to be watched for swipe motions, and an
       * object containing event handlers.
       * The pointer types that should be used can be specified via the optional
       * third argument, which is an array of strings `'mouse'`, `'touch'` and `'pointer'`. By default,
       * `$swipe` will listen for `mouse`, `touch` and `pointer` events.
       *
       * The four events are `start`, `move`, `end`, and `cancel`. `start`, `move`, and `end`
       * receive as a parameter a coordinates object of the form `{ x: 150, y: 310 }` and the raw
       * `event`. `cancel` receives the raw `event` as its single parameter.
       *
       * `start` is called on either `mousedown`, `touchstart` or `pointerdown`. After this event, `$swipe` is
       * watching for `touchmove`, `mousemove` or `pointermove` events. These events are ignored until the total
       * distance moved in either dimension exceeds a small threshold.
       *
       * Once this threshold is exceeded, either the horizontal or vertical delta is greater.
       * - If the horizontal distance is greater, this is a swipe and `move` and `end` events follow.
       * - If the vertical distance is greater, this is a scroll, and we let the browser take over.
       *   A `cancel` event is sent.
       *
       * `move` is called on `mousemove`, `touchmove` and `pointermove` after the above logic has determined that
       * a swipe is in progress.
       *
       * `end` is called when a swipe is successfully completed with a `touchend`, `mouseup` or `pointerup`.
       *
       * `cancel` is called either on a `touchcancel` or `pointercancel`  from the browser, or when we begin scrolling
       * as described above.
       *
       */
      bind: function (element, eventHandlers, pointerTypes) {
        // Absolute total movement, used to control swipe vs. scroll.
        var totalX, totalY;
        // Coordinates of the start position.
        var startCoords;
        // Last event's position.
        var lastPos;
        // Whether a swipe is active.
        var active = false;

        pointerTypes = pointerTypes || ['mouse', 'touch', 'pointer'];
        element.on(getEvents(pointerTypes, 'start'), function (event) {
          startCoords = getCoordinates(event);
          active = true;
          totalX = 0;
          totalY = 0;
          lastPos = startCoords;
          if (eventHandlers['start']) {
            eventHandlers['start'](startCoords, event);
          }
        });
        var events = getEvents(pointerTypes, 'cancel');
        if (events) {
          element.on(events, function (event) {
            active = false;
            if (eventHandlers['cancel']) {
              eventHandlers['cancel'](event);
            }
          });
        }

        element.on(getEvents(pointerTypes, 'move'), function (event) {
          if (!active) return;

          // Android will send a touchcancel if it thinks we're starting to scroll.
          // So when the total distance (+ or - or both) exceeds 10px in either direction,
          // we either:
          // - On totalX > totalY, we send preventDefault() and treat this as a swipe.
          // - On totalY > totalX, we let the browser handle it as a scroll.

          if (!startCoords) return;
          var coords = getCoordinates(event);

          totalX += Math.abs(coords.x - lastPos.x);
          totalY += Math.abs(coords.y - lastPos.y);

          lastPos = coords;

          if (totalX < MOVE_BUFFER_RADIUS && totalY < MOVE_BUFFER_RADIUS) {
            return;
          }

          // One of totalX or totalY has exceeded the buffer, so decide on swipe vs. scroll.
          if (totalY > totalX) {
            // Allow native scrolling to take over.
            active = false;
            if (eventHandlers['cancel']) {
              eventHandlers['cancel'](event);
            }
            return;
          } else {
            // Prevent the browser from scrolling.
            event.preventDefault();
            if (eventHandlers['move']) {
              eventHandlers['move'](coords, event);
            }
          }
        });

        element.on(getEvents(pointerTypes, 'end'), function (event) {
          if (!active) return;
          active = false;
          if (eventHandlers['end']) {
            eventHandlers['end'](getCoordinates(event), event);
          }
        });
      }
    };
  }]);

  /* global ngTouch: false,
    nodeName_: false
  */

  /**
   * @ngdoc directive
   * @name ngClick
   * @deprecated
   * sinceVersion="v1.5.0"
   * This directive is deprecated and **disabled** by default.
   * The directive will receive no further support and might be removed from future releases.
   * If you need the directive, you can enable it with the {@link ngTouch.$touchProvider $touchProvider#ngClickOverrideEnabled}
   * function. We also recommend that you migrate to [FastClick](https://github.com/ftlabs/fastclick).
   * To learn more about the 300ms delay, this [Telerik article](http://developer.telerik.com/featured/300-ms-click-delay-ios-8/)
   * gives a good overview.
   *
   * @description
   * A more powerful replacement for the default ngClick designed to be used on touchscreen
   * devices. Most mobile browsers wait about 300ms after a tap-and-release before sending
   * the click event. This version handles them immediately, and then prevents the
   * following click event from propagating.
   *
   * Requires the {@link ngTouch `ngTouch`} module to be installed.
   *
   * This directive can fall back to using an ordinary click event, and so works on desktop
   * browsers as well as mobile.
   *
   * This directive also sets the CSS class `ng-click-active` while the element is being held
   * down (by a mouse click or touch) so you can restyle the depressed element if you wish.
   *
   * @element ANY
   * @param {expression} ngClick {@link guide/expression Expression} to evaluate
   * upon tap. (Event object is available as `$event`)
   *
   * @example
      <example module="ngClickExample" deps="angular-touch.js" name="ng-touch-ng-click">
        <file name="index.html">
          <button ng-click="count = count + 1" ng-init="count=0">
            Increment
          </button>
          count: {{ count }}
        </file>
        <file name="script.js">
          angular.module('ngClickExample', ['ngTouch']);
        </file>
      </example>
   */

  var ngTouchClickDirectiveFactory = ['$parse', '$timeout', '$rootElement', function ($parse, $timeout, $rootElement) {
    var TAP_DURATION = 750; // Shorter than 750ms is a tap, longer is a taphold or drag.
    var MOVE_TOLERANCE = 12; // 12px seems to work in most mobile browsers.
    var PREVENT_DURATION = 2500; // 2.5 seconds maximum from preventGhostClick call to click
    var CLICKBUSTER_THRESHOLD = 25; // 25 pixels in any dimension is the limit for busting clicks.

    var ACTIVE_CLASS_NAME = 'ng-click-active';
    var lastPreventedTime;
    var touchCoordinates;
    var lastLabelClickCoordinates;

    // TAP EVENTS AND GHOST CLICKS
    //
    // Why tap events?
    // Mobile browsers detect a tap, then wait a moment (usually ~300ms) to see if you're
    // double-tapping, and then fire a click event.
    //
    // This delay sucks and makes mobile apps feel unresponsive.
    // So we detect touchstart, touchcancel and touchend ourselves and determine when
    // the user has tapped on something.
    //
    // What happens when the browser then generates a click event?
    // The browser, of course, also detects the tap and fires a click after a delay. This results in
    // tapping/clicking twice. We do "clickbusting" to prevent it.
    //
    // How does it work?
    // We attach global touchstart and click handlers, that run during the capture (early) phase.
    // So the sequence for a tap is:
    // - global touchstart: Sets an "allowable region" at the point touched.
    // - element's touchstart: Starts a touch
    // (- touchcancel ends the touch, no click follows)
    // - element's touchend: Determines if the tap is valid (didn't move too far away, didn't hold
    //   too long) and fires the user's tap handler. The touchend also calls preventGhostClick().
    // - preventGhostClick() removes the allowable region the global touchstart created.
    // - The browser generates a click event.
    // - The global click handler catches the click, and checks whether it was in an allowable region.
    //     - If preventGhostClick was called, the region will have been removed, the click is busted.
    //     - If the region is still there, the click proceeds normally. Therefore clicks on links and
    //       other elements without ngTap on them work normally.
    //
    // This is an ugly, terrible hack!
    // Yeah, tell me about it. The alternatives are using the slow click events, or making our users
    // deal with the ghost clicks, so I consider this the least of evils. Fortunately Angular
    // encapsulates this ugly logic away from the user.
    //
    // Why not just put click handlers on the element?
    // We do that too, just to be sure. If the tap event caused the DOM to change,
    // it is possible another element is now in that position. To take account for these possibly
    // distinct elements, the handlers are global and care only about coordinates.

    // Checks if the coordinates are close enough to be within the region.
    function hit(x1, y1, x2, y2) {
      return Math.abs(x1 - x2) < CLICKBUSTER_THRESHOLD && Math.abs(y1 - y2) < CLICKBUSTER_THRESHOLD;
    }

    // Checks a list of allowable regions against a click location.
    // Returns true if the click should be allowed.
    // Splices out the allowable region from the list after it has been used.
    function checkAllowableRegions(touchCoordinates, x, y) {
      for (var i = 0; i < touchCoordinates.length; i += 2) {
        if (hit(touchCoordinates[i], touchCoordinates[i + 1], x, y)) {
          touchCoordinates.splice(i, i + 2);
          return true; // allowable region
        }
      }
      return false; // No allowable region; bust it.
    }

    // Global click handler that prevents the click if it's in a bustable zone and preventGhostClick
    // was called recently.
    function onClick(event) {
      if (Date.now() - lastPreventedTime > PREVENT_DURATION) {
        return; // Too old.
      }

      var touches = event.touches && event.touches.length ? event.touches : [event];
      var x = touches[0].clientX;
      var y = touches[0].clientY;
      // Work around desktop Webkit quirk where clicking a label will fire two clicks (on the label
      // and on the input element). Depending on the exact browser, this second click we don't want
      // to bust has either (0,0), negative coordinates, or coordinates equal to triggering label
      // click event
      if (x < 1 && y < 1) {
        return; // offscreen
      }
      if (lastLabelClickCoordinates && lastLabelClickCoordinates[0] === x && lastLabelClickCoordinates[1] === y) {
        return; // input click triggered by label click
      }
      // reset label click coordinates on first subsequent click
      if (lastLabelClickCoordinates) {
        lastLabelClickCoordinates = null;
      }
      // remember label click coordinates to prevent click busting of trigger click event on input
      if (nodeName_(event.target) === 'label') {
        lastLabelClickCoordinates = [x, y];
      }

      // Look for an allowable region containing this click.
      // If we find one, that means it was created by touchstart and not removed by
      // preventGhostClick, so we don't bust it.
      if (checkAllowableRegions(touchCoordinates, x, y)) {
        return;
      }

      // If we didn't find an allowable region, bust the click.
      event.stopPropagation();
      event.preventDefault();

      // Blur focused form elements
      if (event.target && event.target.blur) {
        event.target.blur();
      }
    }

    // Global touchstart handler that creates an allowable region for a click event.
    // This allowable region can be removed by preventGhostClick if we want to bust it.
    function onTouchStart(event) {
      var touches = event.touches && event.touches.length ? event.touches : [event];
      var x = touches[0].clientX;
      var y = touches[0].clientY;
      touchCoordinates.push(x, y);

      $timeout(function () {
        // Remove the allowable region.
        for (var i = 0; i < touchCoordinates.length; i += 2) {
          if (touchCoordinates[i] === x && touchCoordinates[i + 1] === y) {
            touchCoordinates.splice(i, i + 2);
            return;
          }
        }
      }, PREVENT_DURATION, false);
    }

    // On the first call, attaches some event handlers. Then whenever it gets called, it creates a
    // zone around the touchstart where clicks will get busted.
    function preventGhostClick(x, y) {
      if (!touchCoordinates) {
        $rootElement[0].addEventListener('click', onClick, true);
        $rootElement[0].addEventListener('touchstart', onTouchStart, true);
        touchCoordinates = [];
      }

      lastPreventedTime = Date.now();

      checkAllowableRegions(touchCoordinates, x, y);
    }

    // Actual linking function.
    return function (scope, element, attr) {
      var clickHandler = $parse(attr.ngClick),
          tapping = false,
          tapElement,
          // Used to blur the element after a tap.
      startTime,
          // Used to check if the tap was held too long.
      touchStartX,
          touchStartY;

      function resetState() {
        tapping = false;
        element.removeClass(ACTIVE_CLASS_NAME);
      }

      element.on('touchstart', function (event) {
        tapping = true;
        tapElement = event.target ? event.target : event.srcElement; // IE uses srcElement.
        // Hack for Safari, which can target text nodes instead of containers.
        if (tapElement.nodeType === 3) {
          tapElement = tapElement.parentNode;
        }

        element.addClass(ACTIVE_CLASS_NAME);

        startTime = Date.now();

        // Use jQuery originalEvent
        var originalEvent = event.originalEvent || event;
        var touches = originalEvent.touches && originalEvent.touches.length ? originalEvent.touches : [originalEvent];
        var e = touches[0];
        touchStartX = e.clientX;
        touchStartY = e.clientY;
      });

      element.on('touchcancel', function (event) {
        resetState();
      });

      element.on('touchend', function (event) {
        var diff = Date.now() - startTime;

        // Use jQuery originalEvent
        var originalEvent = event.originalEvent || event;
        var touches = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches : originalEvent.touches && originalEvent.touches.length ? originalEvent.touches : [originalEvent];
        var e = touches[0];
        var x = e.clientX;
        var y = e.clientY;
        var dist = Math.sqrt(Math.pow(x - touchStartX, 2) + Math.pow(y - touchStartY, 2));

        if (tapping && diff < TAP_DURATION && dist < MOVE_TOLERANCE) {
          // Call preventGhostClick so the clickbuster will catch the corresponding click.
          preventGhostClick(x, y);

          // Blur the focused element (the button, probably) before firing the callback.
          // This doesn't work perfectly on Android Chrome, but seems to work elsewhere.
          // I couldn't get anything to work reliably on Android Chrome.
          if (tapElement) {
            tapElement.blur();
          }

          if (!angular.isDefined(attr.disabled) || attr.disabled === false) {
            element.triggerHandler('click', [event]);
          }
        }

        resetState();
      });

      // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
      // something else nearby.
      element.onclick = function (event) {};

      // Actual click handler.
      // There are three different kinds of clicks, only two of which reach this point.
      // - On desktop browsers without touch events, their clicks will always come here.
      // - On mobile browsers, the simulated "fast" click will call this.
      // - But the browser's follow-up slow click will be "busted" before it reaches this handler.
      // Therefore it's safe to use this directive on both mobile and desktop.
      element.on('click', function (event, touchend) {
        scope.$apply(function () {
          clickHandler(scope, { $event: touchend || event });
        });
      });

      element.on('mousedown', function (event) {
        element.addClass(ACTIVE_CLASS_NAME);
      });

      element.on('mousemove mouseup', function (event) {
        element.removeClass(ACTIVE_CLASS_NAME);
      });
    };
  }];

  /* global ngTouch: false */

  /**
   * @ngdoc directive
   * @name ngSwipeLeft
   *
   * @description
   * Specify custom behavior when an element is swiped to the left on a touchscreen device.
   * A leftward swipe is a quick, right-to-left slide of the finger.
   * Though ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag
   * too.
   *
   * To disable the mouse click and drag functionality, add `ng-swipe-disable-mouse` to
   * the `ng-swipe-left` or `ng-swipe-right` DOM Element.
   *
   * Requires the {@link ngTouch `ngTouch`} module to be installed.
   *
   * @element ANY
   * @param {expression} ngSwipeLeft {@link guide/expression Expression} to evaluate
   * upon left swipe. (Event object is available as `$event`)
   *
   * @example
      <example module="ngSwipeLeftExample" deps="angular-touch.js" name="ng-swipe-left">
        <file name="index.html">
          <div ng-show="!showActions" ng-swipe-left="showActions = true">
            Some list content, like an email in the inbox
          </div>
          <div ng-show="showActions" ng-swipe-right="showActions = false">
            <button ng-click="reply()">Reply</button>
            <button ng-click="delete()">Delete</button>
          </div>
        </file>
        <file name="script.js">
          angular.module('ngSwipeLeftExample', ['ngTouch']);
        </file>
      </example>
   */

  /**
   * @ngdoc directive
   * @name ngSwipeRight
   *
   * @description
   * Specify custom behavior when an element is swiped to the right on a touchscreen device.
   * A rightward swipe is a quick, left-to-right slide of the finger.
   * Though ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag
   * too.
   *
   * Requires the {@link ngTouch `ngTouch`} module to be installed.
   *
   * @element ANY
   * @param {expression} ngSwipeRight {@link guide/expression Expression} to evaluate
   * upon right swipe. (Event object is available as `$event`)
   *
   * @example
      <example module="ngSwipeRightExample" deps="angular-touch.js" name="ng-swipe-right">
        <file name="index.html">
          <div ng-show="!showActions" ng-swipe-left="showActions = true">
            Some list content, like an email in the inbox
          </div>
          <div ng-show="showActions" ng-swipe-right="showActions = false">
            <button ng-click="reply()">Reply</button>
            <button ng-click="delete()">Delete</button>
          </div>
        </file>
        <file name="script.js">
          angular.module('ngSwipeRightExample', ['ngTouch']);
        </file>
      </example>
   */

  function makeSwipeDirective(directiveName, direction, eventName) {
    ngTouch.directive(directiveName, ['$parse', '$swipe', function ($parse, $swipe) {
      // The maximum vertical delta for a swipe should be less than 75px.
      var MAX_VERTICAL_DISTANCE = 75;
      // Vertical distance should not be more than a fraction of the horizontal distance.
      var MAX_VERTICAL_RATIO = 0.3;
      // At least a 30px lateral motion is necessary for a swipe.
      var MIN_HORIZONTAL_DISTANCE = 30;

      return function (scope, element, attr) {
        var swipeHandler = $parse(attr[directiveName]);

        var startCoords, valid;

        function validSwipe(coords) {
          // Check that it's within the coordinates.
          // Absolute vertical distance must be within tolerances.
          // Horizontal distance, we take the current X - the starting X.
          // This is negative for leftward swipes and positive for rightward swipes.
          // After multiplying by the direction (-1 for left, +1 for right), legal swipes
          // (ie. same direction as the directive wants) will have a positive delta and
          // illegal ones a negative delta.
          // Therefore this delta must be positive, and larger than the minimum.
          if (!startCoords) return false;
          var deltaY = Math.abs(coords.y - startCoords.y);
          var deltaX = (coords.x - startCoords.x) * direction;
          return valid && // Short circuit for already-invalidated swipes.
          deltaY < MAX_VERTICAL_DISTANCE && deltaX > 0 && deltaX > MIN_HORIZONTAL_DISTANCE && deltaY / deltaX < MAX_VERTICAL_RATIO;
        }

        var pointerTypes = ['touch'];
        if (!angular.isDefined(attr['ngSwipeDisableMouse'])) {
          pointerTypes.push('mouse');
        }
        $swipe.bind(element, {
          'start': function (coords, event) {
            startCoords = coords;
            valid = true;
          },
          'cancel': function (event) {
            valid = false;
          },
          'end': function (coords, event) {
            if (validSwipe(coords)) {
              scope.$apply(function () {
                element.triggerHandler(eventName);
                swipeHandler(scope, { $event: event });
              });
            }
          }
        }, pointerTypes);
      };
    }]);
  }

  // Left is negative X-coordinate, right is positive.
  makeSwipeDirective('ngSwipeLeft', -1, 'swipeleft');
  makeSwipeDirective('ngSwipeRight', 1, 'swiperight');
})(window, window.angular);

/***/ }),
/* 151 */
/***/ (function(module, exports) {

/**
 * @license AngularJS v1.6.6
 * (c) 2010-2017 Google, Inc. http://angularjs.org
 * License: MIT
 */(function(window){'use strict';/* exported
  minErrConfig,
  errorHandlingConfig,
  isValidObjectMaxDepth
*/var minErrConfig={objectMaxDepth:5};/**
 * @ngdoc function
 * @name angular.errorHandlingConfig
 * @module ng
 * @kind function
 *
 * @description
 * Configure several aspects of error handling in AngularJS if used as a setter or return the
 * current configuration if used as a getter. The following options are supported:
 *
 * - **objectMaxDepth**: The maximum depth to which objects are traversed when stringified for error messages.
 *
 * Omitted or undefined options will leave the corresponding configuration values unchanged.
 *
 * @param {Object=} config - The configuration object. May only contain the options that need to be
 *     updated. Supported keys:
 *
 * * `objectMaxDepth`  **{Number}** - The max depth for stringifying objects. Setting to a
 *   non-positive or non-numeric value, removes the max depth limit.
 *   Default: 5
 */function errorHandlingConfig(config){if(isObject(config)){if(isDefined(config.objectMaxDepth)){minErrConfig.objectMaxDepth=isValidObjectMaxDepth(config.objectMaxDepth)?config.objectMaxDepth:NaN;}}else{return minErrConfig;}}/**
 * @private
 * @param {Number} maxDepth
 * @return {boolean}
 */function isValidObjectMaxDepth(maxDepth){return isNumber(maxDepth)&&maxDepth>0;}/**
 * @description
 *
 * This object provides a utility for producing rich Error messages within
 * Angular. It can be called as follows:
 *
 * var exampleMinErr = minErr('example');
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
 *
 * The above creates an instance of minErr in the example namespace. The
 * resulting error will have a namespaced error code of example.one.  The
 * resulting error will replace {0} with the value of foo, and {1} with the
 * value of bar. The object is not restricted in the number of arguments it can
 * take.
 *
 * If fewer arguments are specified than necessary for interpolation, the extra
 * interpolation markers will be preserved in the final string.
 *
 * Since data will be parsed statically during a build step, some restrictions
 * are applied with respect to how minErr instances are created and called.
 * Instances should have names of the form namespaceMinErr for a minErr created
 * using minErr('namespace') . Error codes, namespaces and template strings
 * should all be static strings, not variables or general expressions.
 *
 * @param {string} module The namespace to use for the new minErr instance.
 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
 *   error from returned function, for cases when a particular type of error is useful.
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
 */function minErr(module,ErrorConstructor){ErrorConstructor=ErrorConstructor||Error;return function(){var code=arguments[0],template=arguments[1],message='['+(module?module+':':'')+code+'] ',templateArgs=sliceArgs(arguments,2).map(function(arg){return toDebugString(arg,minErrConfig.objectMaxDepth);}),paramPrefix,i;message+=template.replace(/\{\d+\}/g,function(match){var index=+match.slice(1,-1);if(index<templateArgs.length){return templateArgs[index];}return match;});message+='\nhttp://errors.angularjs.org/1.6.6/'+(module?module+'/':'')+code;for(i=0,paramPrefix='?';i<templateArgs.length;i++,paramPrefix='&'){message+=paramPrefix+'p'+i+'='+encodeURIComponent(templateArgs[i]);}return new ErrorConstructor(message);};}/* We need to tell ESLint what variables are being exported *//* exported
  angular,
  msie,
  jqLite,
  jQuery,
  slice,
  splice,
  push,
  toString,
  minErrConfig,
  errorHandlingConfig,
  isValidObjectMaxDepth,
  ngMinErr,
  angularModule,
  uid,
  REGEX_STRING_REGEXP,
  VALIDITY_STATE_PROPERTY,

  lowercase,
  uppercase,
  manualLowercase,
  manualUppercase,
  nodeName_,
  isArrayLike,
  forEach,
  forEachSorted,
  reverseParams,
  nextUid,
  setHashKey,
  extend,
  toInt,
  inherit,
  merge,
  noop,
  identity,
  valueFn,
  isUndefined,
  isDefined,
  isObject,
  isBlankObject,
  isString,
  isNumber,
  isNumberNaN,
  isDate,
  isError,
  isArray,
  isFunction,
  isRegExp,
  isWindow,
  isScope,
  isFile,
  isFormData,
  isBlob,
  isBoolean,
  isPromiseLike,
  trim,
  escapeForRegexp,
  isElement,
  makeMap,
  includes,
  arrayRemove,
  copy,
  simpleCompare,
  equals,
  csp,
  jq,
  concat,
  sliceArgs,
  bind,
  toJsonReplacer,
  toJson,
  fromJson,
  convertTimezoneToLocal,
  timezoneToOffset,
  startingTag,
  tryDecodeURIComponent,
  parseKeyValue,
  toKeyValue,
  encodeUriSegment,
  encodeUriQuery,
  angularInit,
  bootstrap,
  getTestability,
  snake_case,
  bindJQuery,
  assertArg,
  assertArgFn,
  assertNotHasOwnProperty,
  getter,
  getBlockNodes,
  hasOwnProperty,
  createMap,
  stringify,

  NODE_TYPE_ELEMENT,
  NODE_TYPE_ATTRIBUTE,
  NODE_TYPE_TEXT,
  NODE_TYPE_COMMENT,
  NODE_TYPE_DOCUMENT,
  NODE_TYPE_DOCUMENT_FRAGMENT
*/////////////////////////////////////
/**
 * @ngdoc module
 * @name ng
 * @module ng
 * @installation
 * @description
 *
 * # ng (core module)
 * The ng module is loaded by default when an AngularJS application is started. The module itself
 * contains the essential components for an AngularJS application to function. The table below
 * lists a high level breakdown of each of the services/factories, filters, directives and testing
 * components available within this core module.
 *
 * <div doc-module-components="ng"></div>
 */var REGEX_STRING_REGEXP=/^\/(.+)\/([a-z]*)$/;// The name of a form control's ValidityState property.
// This is used so that it's possible for internal tests to create mock ValidityStates.
var VALIDITY_STATE_PROPERTY='validity';var hasOwnProperty=Object.prototype.hasOwnProperty;/**
 * @ngdoc function
 * @name angular.lowercase
 * @module ng
 * @kind function
 *
 * @deprecated
 * sinceVersion="1.5.0"
 * removeVersion="1.7.0"
 * Use [String.prototype.toLowerCase](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase) instead.
 *
 * @description Converts the specified string to lowercase.
 * @param {string} string String to be converted to lowercase.
 * @returns {string} Lowercased string.
 */var lowercase=function(string){return isString(string)?string.toLowerCase():string;};/**
 * @ngdoc function
 * @name angular.uppercase
 * @module ng
 * @kind function
 *
 * @deprecated
 * sinceVersion="1.5.0"
 * removeVersion="1.7.0"
 * Use [String.prototype.toUpperCase](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase) instead.
 *
 * @description Converts the specified string to uppercase.
 * @param {string} string String to be converted to uppercase.
 * @returns {string} Uppercased string.
 */var uppercase=function(string){return isString(string)?string.toUpperCase():string;};var manualLowercase=function(s){/* eslint-disable no-bitwise */return isString(s)?s.replace(/[A-Z]/g,function(ch){return String.fromCharCode(ch.charCodeAt(0)|32);}):s;/* eslint-enable */};var manualUppercase=function(s){/* eslint-disable no-bitwise */return isString(s)?s.replace(/[a-z]/g,function(ch){return String.fromCharCode(ch.charCodeAt(0)&~32);}):s;/* eslint-enable */};// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
// with correct but slower alternatives. See https://github.com/angular/angular.js/issues/11387
if('i'!=='I'.toLowerCase()){lowercase=manualLowercase;uppercase=manualUppercase;}var msie,// holds major version number for IE, or NaN if UA is not IE.
jqLite,// delay binding since jQuery could be loaded after us.
jQuery,// delay binding
slice=[].slice,splice=[].splice,push=[].push,toString=Object.prototype.toString,getPrototypeOf=Object.getPrototypeOf,ngMinErr=minErr('ng'),/** @name angular */angular=window.angular||(window.angular={}),angularModule,uid=0;// Support: IE 9-11 only
/**
 * documentMode is an IE-only property
 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
 */msie=window.document.documentMode;/**
 * @private
 * @param {*} obj
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
 *                   String ...)
 */function isArrayLike(obj){// `null`, `undefined` and `window` are not array-like
if(obj==null||isWindow(obj))return false;// arrays, strings and jQuery/jqLite objects are array like
// * jqLite is either the jQuery or jqLite constructor function
// * we have to check the existence of jqLite first as this method is called
//   via the forEach method when constructing the jqLite object in the first place
if(isArray(obj)||isString(obj)||jqLite&&obj instanceof jqLite)return true;// Support: iOS 8.2 (not reproducible in simulator)
// "length" in obj used to prevent JIT error (gh-11508)
var length='length'in Object(obj)&&obj.length;// NodeList objects (with `item` method) and
// other objects with suitable length characteristics are array-like
return isNumber(length)&&(length>=0&&(length-1 in obj||obj instanceof Array)||typeof obj.item==='function');}/**
 * @ngdoc function
 * @name angular.forEach
 * @module ng
 * @kind function
 *
 * @description
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
 * is the value of an object property or an array element, `key` is the object property key or
 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
 *
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
 * using the `hasOwnProperty` method.
 *
 * Unlike ES262's
 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
 * providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
 * return the value provided.
 *
   ```js
     var values = {name: 'misko', gender: 'male'};
     var log = [];
     angular.forEach(values, function(value, key) {
       this.push(key + ': ' + value);
     }, log);
     expect(log).toEqual(['name: misko', 'gender: male']);
   ```
 *
 * @param {Object|Array} obj Object to iterate over.
 * @param {Function} iterator Iterator function.
 * @param {Object=} context Object to become context (`this`) for the iterator function.
 * @returns {Object|Array} Reference to `obj`.
 */function forEach(obj,iterator,context){var key,length;if(obj){if(isFunction(obj)){for(key in obj){if(key!=='prototype'&&key!=='length'&&key!=='name'&&obj.hasOwnProperty(key)){iterator.call(context,obj[key],key,obj);}}}else if(isArray(obj)||isArrayLike(obj)){var isPrimitive=typeof obj!=='object';for(key=0,length=obj.length;key<length;key++){if(isPrimitive||key in obj){iterator.call(context,obj[key],key,obj);}}}else if(obj.forEach&&obj.forEach!==forEach){obj.forEach(iterator,context,obj);}else if(isBlankObject(obj)){// createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
for(key in obj){iterator.call(context,obj[key],key,obj);}}else if(typeof obj.hasOwnProperty==='function'){// Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
for(key in obj){if(obj.hasOwnProperty(key)){iterator.call(context,obj[key],key,obj);}}}else{// Slow path for objects which do not have a method `hasOwnProperty`
for(key in obj){if(hasOwnProperty.call(obj,key)){iterator.call(context,obj[key],key,obj);}}}}return obj;}function forEachSorted(obj,iterator,context){var keys=Object.keys(obj).sort();for(var i=0;i<keys.length;i++){iterator.call(context,obj[keys[i]],keys[i]);}return keys;}/**
 * when using forEach the params are value, key, but it is often useful to have key, value.
 * @param {function(string, *)} iteratorFn
 * @returns {function(*, string)}
 */function reverseParams(iteratorFn){return function(value,key){iteratorFn(key,value);};}/**
 * A consistent way of creating unique IDs in angular.
 *
 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
 * we hit number precision issues in JavaScript.
 *
 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
 *
 * @returns {number} an unique alpha-numeric string
 */function nextUid(){return++uid;}/**
 * Set or clear the hashkey for an object.
 * @param obj object
 * @param h the hashkey (!truthy to delete the hashkey)
 */function setHashKey(obj,h){if(h){obj.$$hashKey=h;}else{delete obj.$$hashKey;}}function baseExtend(dst,objs,deep){var h=dst.$$hashKey;for(var i=0,ii=objs.length;i<ii;++i){var obj=objs[i];if(!isObject(obj)&&!isFunction(obj))continue;var keys=Object.keys(obj);for(var j=0,jj=keys.length;j<jj;j++){var key=keys[j];var src=obj[key];if(deep&&isObject(src)){if(isDate(src)){dst[key]=new Date(src.valueOf());}else if(isRegExp(src)){dst[key]=new RegExp(src);}else if(src.nodeName){dst[key]=src.cloneNode(true);}else if(isElement(src)){dst[key]=src.clone();}else{if(!isObject(dst[key]))dst[key]=isArray(src)?[]:{};baseExtend(dst[key],[src],true);}}else{dst[key]=src;}}}setHashKey(dst,h);return dst;}/**
 * @ngdoc function
 * @name angular.extend
 * @module ng
 * @kind function
 *
 * @description
 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
 *
 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
 * {@link angular.merge} for this.
 *
 * @param {Object} dst Destination object.
 * @param {...Object} src Source object(s).
 * @returns {Object} Reference to `dst`.
 */function extend(dst){return baseExtend(dst,slice.call(arguments,1),false);}/**
* @ngdoc function
* @name angular.merge
* @module ng
* @kind function
*
* @description
* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
*
* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
* objects, performing a deep copy.
*
* @deprecated
* sinceVersion="1.6.5"
* This function is deprecated, but will not be removed in the 1.x lifecycle.
* There are edge cases (see {@link angular.merge#known-issues known issues}) that are not
* supported by this function. We suggest
* using [lodash's merge()](https://lodash.com/docs/4.17.4#merge) instead.
*
* @knownIssue
* This is a list of (known) object types that are not handled correctly by this function:
* - [`Blob`](https://developer.mozilla.org/docs/Web/API/Blob)
* - [`MediaStream`](https://developer.mozilla.org/docs/Web/API/MediaStream)
* - [`CanvasGradient`](https://developer.mozilla.org/docs/Web/API/CanvasGradient)
* - AngularJS {@link $rootScope.Scope scopes};
*
* @param {Object} dst Destination object.
* @param {...Object} src Source object(s).
* @returns {Object} Reference to `dst`.
*/function merge(dst){return baseExtend(dst,slice.call(arguments,1),true);}function toInt(str){return parseInt(str,10);}var isNumberNaN=Number.isNaN||function isNumberNaN(num){// eslint-disable-next-line no-self-compare
return num!==num;};function inherit(parent,extra){return extend(Object.create(parent),extra);}/**
 * @ngdoc function
 * @name angular.noop
 * @module ng
 * @kind function
 *
 * @description
 * A function that performs no operations. This function can be useful when writing code in the
 * functional style.
   ```js
     function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   ```
 */function noop(){}noop.$inject=[];/**
 * @ngdoc function
 * @name angular.identity
 * @module ng
 * @kind function
 *
 * @description
 * A function that returns its first argument. This function is useful when writing code in the
 * functional style.
 *
   ```js
   function transformer(transformationFn, value) {
     return (transformationFn || angular.identity)(value);
   };

   // E.g.
   function getResult(fn, input) {
     return (fn || angular.identity)(input);
   };

   getResult(function(n) { return n * 2; }, 21);   // returns 42
   getResult(null, 21);                            // returns 21
   getResult(undefined, 21);                       // returns 21
   ```
 *
 * @param {*} value to be returned.
 * @returns {*} the value passed in.
 */function identity($){return $;}identity.$inject=[];function valueFn(value){return function valueRef(){return value;};}function hasCustomToString(obj){return isFunction(obj.toString)&&obj.toString!==toString;}/**
 * @ngdoc function
 * @name angular.isUndefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is undefined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is undefined.
 */function isUndefined(value){return typeof value==='undefined';}/**
 * @ngdoc function
 * @name angular.isDefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is defined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is defined.
 */function isDefined(value){return typeof value!=='undefined';}/**
 * @ngdoc function
 * @name angular.isObject
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
 * considered to be objects. Note that JavaScript arrays are objects.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Object` but not `null`.
 */function isObject(value){// http://jsperf.com/isobject4
return value!==null&&typeof value==='object';}/**
 * Determine if a value is an object with a null prototype
 *
 * @returns {boolean} True if `value` is an `Object` with a null prototype
 */function isBlankObject(value){return value!==null&&typeof value==='object'&&!getPrototypeOf(value);}/**
 * @ngdoc function
 * @name angular.isString
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `String`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `String`.
 */function isString(value){return typeof value==='string';}/**
 * @ngdoc function
 * @name angular.isNumber
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Number`.
 *
 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
 *
 * If you wish to exclude these then you can use the native
 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
 * method.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Number`.
 */function isNumber(value){return typeof value==='number';}/**
 * @ngdoc function
 * @name angular.isDate
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a value is a date.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Date`.
 */function isDate(value){return toString.call(value)==='[object Date]';}/**
 * @ngdoc function
 * @name angular.isArray
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Array`. Alias of Array.isArray.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Array`.
 */var isArray=Array.isArray;/**
 * @description
 * Determines if a reference is an `Error`.
 * Loosely based on https://www.npmjs.com/package/iserror
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Error`.
 */function isError(value){var tag=toString.call(value);switch(tag){case'[object Error]':return true;case'[object Exception]':return true;case'[object DOMException]':return true;default:return value instanceof Error;}}/**
 * @ngdoc function
 * @name angular.isFunction
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Function`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Function`.
 */function isFunction(value){return typeof value==='function';}/**
 * Determines if a value is a regular expression object.
 *
 * @private
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `RegExp`.
 */function isRegExp(value){return toString.call(value)==='[object RegExp]';}/**
 * Checks if `obj` is a window object.
 *
 * @private
 * @param {*} obj Object to check
 * @returns {boolean} True if `obj` is a window obj.
 */function isWindow(obj){return obj&&obj.window===obj;}function isScope(obj){return obj&&obj.$evalAsync&&obj.$watch;}function isFile(obj){return toString.call(obj)==='[object File]';}function isFormData(obj){return toString.call(obj)==='[object FormData]';}function isBlob(obj){return toString.call(obj)==='[object Blob]';}function isBoolean(value){return typeof value==='boolean';}function isPromiseLike(obj){return obj&&isFunction(obj.then);}var TYPED_ARRAY_REGEXP=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/;function isTypedArray(value){return value&&isNumber(value.length)&&TYPED_ARRAY_REGEXP.test(toString.call(value));}function isArrayBuffer(obj){return toString.call(obj)==='[object ArrayBuffer]';}var trim=function(value){return isString(value)?value.trim():value;};// Copied from:
// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
// Prereq: s is a string.
var escapeForRegexp=function(s){return s.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g,'\\$1')// eslint-disable-next-line no-control-regex
.replace(/\x08/g,'\\x08');};/**
 * @ngdoc function
 * @name angular.isElement
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a DOM element (or wrapped jQuery element).
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
 */function isElement(node){return!!(node&&(node.nodeName// We are a direct element.
||node.prop&&node.attr&&node.find));// We have an on and find method part of jQuery API.
}/**
 * @param str 'key1,key2,...'
 * @returns {object} in the form of {key1:true, key2:true, ...}
 */function makeMap(str){var obj={},items=str.split(','),i;for(i=0;i<items.length;i++){obj[items[i]]=true;}return obj;}function nodeName_(element){return lowercase(element.nodeName||element[0]&&element[0].nodeName);}function includes(array,obj){return Array.prototype.indexOf.call(array,obj)!==-1;}function arrayRemove(array,value){var index=array.indexOf(value);if(index>=0){array.splice(index,1);}return index;}/**
 * @ngdoc function
 * @name angular.copy
 * @module ng
 * @kind function
 *
 * @description
 * Creates a deep copy of `source`, which should be an object or an array.
 *
 * * If no destination is supplied, a copy of the object or array is created.
 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
 *   are deleted and then all elements/properties from the source are copied to it.
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
 * * If `source` is identical to `destination` an exception will be thrown.
 *
 * <br />
 * <div class="alert alert-warning">
 *   Only enumerable properties are taken into account. Non-enumerable properties (both on `source`
 *   and on `destination`) will be ignored.
 * </div>
 *
 * @param {*} source The source that will be used to make a copy.
 *                   Can be any type, including primitives, `null`, and `undefined`.
 * @param {(Object|Array)=} destination Destination into which the source is copied. If
 *     provided, must be of the same type as `source`.
 * @returns {*} The copy or updated `destination`, if `destination` was specified.
 *
 * @example
  <example module="copyExample" name="angular-copy">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form novalidate class="simple-form">
          <label>Name: <input type="text" ng-model="user.name" /></label><br />
          <label>Age:  <input type="number" ng-model="user.age" /></label><br />
          Gender: <label><input type="radio" ng-model="user.gender" value="male" />male</label>
                  <label><input type="radio" ng-model="user.gender" value="female" />female</label><br />
          <button ng-click="reset()">RESET</button>
          <button ng-click="update(user)">SAVE</button>
        </form>
        <pre>form = {{user | json}}</pre>
        <pre>master = {{master | json}}</pre>
      </div>
    </file>
    <file name="script.js">
      // Module: copyExample
      angular.
        module('copyExample', []).
        controller('ExampleController', ['$scope', function($scope) {
          $scope.master = {};

          $scope.reset = function() {
            // Example with 1 argument
            $scope.user = angular.copy($scope.master);
          };

          $scope.update = function(user) {
            // Example with 2 arguments
            angular.copy(user, $scope.master);
          };

          $scope.reset();
        }]);
    </file>
  </example>
 */function copy(source,destination,maxDepth){var stackSource=[];var stackDest=[];maxDepth=isValidObjectMaxDepth(maxDepth)?maxDepth:NaN;if(destination){if(isTypedArray(destination)||isArrayBuffer(destination)){throw ngMinErr('cpta','Can\'t copy! TypedArray destination cannot be mutated.');}if(source===destination){throw ngMinErr('cpi','Can\'t copy! Source and destination are identical.');}// Empty the destination object
if(isArray(destination)){destination.length=0;}else{forEach(destination,function(value,key){if(key!=='$$hashKey'){delete destination[key];}});}stackSource.push(source);stackDest.push(destination);return copyRecurse(source,destination,maxDepth);}return copyElement(source,maxDepth);function copyRecurse(source,destination,maxDepth){maxDepth--;if(maxDepth<0){return'...';}var h=destination.$$hashKey;var key;if(isArray(source)){for(var i=0,ii=source.length;i<ii;i++){destination.push(copyElement(source[i],maxDepth));}}else if(isBlankObject(source)){// createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
for(key in source){destination[key]=copyElement(source[key],maxDepth);}}else if(source&&typeof source.hasOwnProperty==='function'){// Slow path, which must rely on hasOwnProperty
for(key in source){if(source.hasOwnProperty(key)){destination[key]=copyElement(source[key],maxDepth);}}}else{// Slowest path --- hasOwnProperty can't be called as a method
for(key in source){if(hasOwnProperty.call(source,key)){destination[key]=copyElement(source[key],maxDepth);}}}setHashKey(destination,h);return destination;}function copyElement(source,maxDepth){// Simple values
if(!isObject(source)){return source;}// Already copied values
var index=stackSource.indexOf(source);if(index!==-1){return stackDest[index];}if(isWindow(source)||isScope(source)){throw ngMinErr('cpws','Can\'t copy! Making copies of Window or Scope instances is not supported.');}var needsRecurse=false;var destination=copyType(source);if(destination===undefined){destination=isArray(source)?[]:Object.create(getPrototypeOf(source));needsRecurse=true;}stackSource.push(source);stackDest.push(destination);return needsRecurse?copyRecurse(source,destination,maxDepth):destination;}function copyType(source){switch(toString.call(source)){case'[object Int8Array]':case'[object Int16Array]':case'[object Int32Array]':case'[object Float32Array]':case'[object Float64Array]':case'[object Uint8Array]':case'[object Uint8ClampedArray]':case'[object Uint16Array]':case'[object Uint32Array]':return new source.constructor(copyElement(source.buffer),source.byteOffset,source.length);case'[object ArrayBuffer]':// Support: IE10
if(!source.slice){// If we're in this case we know the environment supports ArrayBuffer
/* eslint-disable no-undef */var copied=new ArrayBuffer(source.byteLength);new Uint8Array(copied).set(new Uint8Array(source));/* eslint-enable */return copied;}return source.slice(0);case'[object Boolean]':case'[object Number]':case'[object String]':case'[object Date]':return new source.constructor(source.valueOf());case'[object RegExp]':var re=new RegExp(source.source,source.toString().match(/[^/]*$/)[0]);re.lastIndex=source.lastIndex;return re;case'[object Blob]':return new source.constructor([source],{type:source.type});}if(isFunction(source.cloneNode)){return source.cloneNode(true);}}}// eslint-disable-next-line no-self-compare
function simpleCompare(a,b){return a===b||a!==a&&b!==b;}/**
 * @ngdoc function
 * @name angular.equals
 * @module ng
 * @kind function
 *
 * @description
 * Determines if two objects or two values are equivalent. Supports value types, regular
 * expressions, arrays and objects.
 *
 * Two objects or values are considered equivalent if at least one of the following is true:
 *
 * * Both objects or values pass `===` comparison.
 * * Both objects or values are of the same type and all of their properties are equal by
 *   comparing them with `angular.equals`.
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
 * * Both values represent the same regular expression (In JavaScript,
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
 *   representation matches).
 *
 * During a property comparison, properties of `function` type and properties with names
 * that begin with `$` are ignored.
 *
 * Scope and DOMWindow objects are being compared only by identify (`===`).
 *
 * @param {*} o1 Object or value to compare.
 * @param {*} o2 Object or value to compare.
 * @returns {boolean} True if arguments are equal.
 *
 * @example
   <example module="equalsExample" name="equalsExample">
     <file name="index.html">
      <div ng-controller="ExampleController">
        <form novalidate>
          <h3>User 1</h3>
          Name: <input type="text" ng-model="user1.name">
          Age: <input type="number" ng-model="user1.age">

          <h3>User 2</h3>
          Name: <input type="text" ng-model="user2.name">
          Age: <input type="number" ng-model="user2.age">

          <div>
            <br/>
            <input type="button" value="Compare" ng-click="compare()">
          </div>
          User 1: <pre>{{user1 | json}}</pre>
          User 2: <pre>{{user2 | json}}</pre>
          Equal: <pre>{{result}}</pre>
        </form>
      </div>
    </file>
    <file name="script.js">
        angular.module('equalsExample', []).controller('ExampleController', ['$scope', function($scope) {
          $scope.user1 = {};
          $scope.user2 = {};
          $scope.compare = function() {
            $scope.result = angular.equals($scope.user1, $scope.user2);
          };
        }]);
    </file>
  </example>
 */function equals(o1,o2){if(o1===o2)return true;if(o1===null||o2===null)return false;// eslint-disable-next-line no-self-compare
if(o1!==o1&&o2!==o2)return true;// NaN === NaN
var t1=typeof o1,t2=typeof o2,length,key,keySet;if(t1===t2&&t1==='object'){if(isArray(o1)){if(!isArray(o2))return false;if((length=o1.length)===o2.length){for(key=0;key<length;key++){if(!equals(o1[key],o2[key]))return false;}return true;}}else if(isDate(o1)){if(!isDate(o2))return false;return simpleCompare(o1.getTime(),o2.getTime());}else if(isRegExp(o1)){if(!isRegExp(o2))return false;return o1.toString()===o2.toString();}else{if(isScope(o1)||isScope(o2)||isWindow(o1)||isWindow(o2)||isArray(o2)||isDate(o2)||isRegExp(o2))return false;keySet=createMap();for(key in o1){if(key.charAt(0)==='$'||isFunction(o1[key]))continue;if(!equals(o1[key],o2[key]))return false;keySet[key]=true;}for(key in o2){if(!(key in keySet)&&key.charAt(0)!=='$'&&isDefined(o2[key])&&!isFunction(o2[key]))return false;}return true;}}return false;}var csp=function(){if(!isDefined(csp.rules)){var ngCspElement=window.document.querySelector('[ng-csp]')||window.document.querySelector('[data-ng-csp]');if(ngCspElement){var ngCspAttribute=ngCspElement.getAttribute('ng-csp')||ngCspElement.getAttribute('data-ng-csp');csp.rules={noUnsafeEval:!ngCspAttribute||ngCspAttribute.indexOf('no-unsafe-eval')!==-1,noInlineStyle:!ngCspAttribute||ngCspAttribute.indexOf('no-inline-style')!==-1};}else{csp.rules={noUnsafeEval:noUnsafeEval(),noInlineStyle:false};}}return csp.rules;function noUnsafeEval(){try{// eslint-disable-next-line no-new, no-new-func
new Function('');return false;}catch(e){return true;}}};/**
 * @ngdoc directive
 * @module ng
 * @name ngJq
 *
 * @element ANY
 * @param {string=} ngJq the name of the library available under `window`
 * to be used for angular.element
 * @description
 * Use this directive to force the angular.element library.  This should be
 * used to force either jqLite by leaving ng-jq blank or setting the name of
 * the jquery variable under window (eg. jQuery).
 *
 * Since angular looks for this directive when it is loaded (doesn't wait for the
 * DOMContentLoaded event), it must be placed on an element that comes before the script
 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
 * others ignored.
 *
 * @example
 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
 ```html
 <!doctype html>
 <html ng-app ng-jq>
 ...
 ...
 </html>
 ```
 * @example
 * This example shows how to use a jQuery based library of a different name.
 * The library name must be available at the top most 'window'.
 ```html
 <!doctype html>
 <html ng-app ng-jq="jQueryLib">
 ...
 ...
 </html>
 ```
 */var jq=function(){if(isDefined(jq.name_))return jq.name_;var el;var i,ii=ngAttrPrefixes.length,prefix,name;for(i=0;i<ii;++i){prefix=ngAttrPrefixes[i];el=window.document.querySelector('['+prefix.replace(':','\\:')+'jq]');if(el){name=el.getAttribute(prefix+'jq');break;}}return jq.name_=name;};function concat(array1,array2,index){return array1.concat(slice.call(array2,index));}function sliceArgs(args,startIndex){return slice.call(args,startIndex||0);}/**
 * @ngdoc function
 * @name angular.bind
 * @module ng
 * @kind function
 *
 * @description
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *
 * @param {Object} self Context which `fn` should be evaluated in.
 * @param {function()} fn Function to be bound.
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
 */function bind(self,fn){var curryArgs=arguments.length>2?sliceArgs(arguments,2):[];if(isFunction(fn)&&!(fn instanceof RegExp)){return curryArgs.length?function(){return arguments.length?fn.apply(self,concat(curryArgs,arguments,0)):fn.apply(self,curryArgs);}:function(){return arguments.length?fn.apply(self,arguments):fn.call(self);};}else{// In IE, native methods are not functions so they cannot be bound (note: they don't need to be).
return fn;}}function toJsonReplacer(key,value){var val=value;if(typeof key==='string'&&key.charAt(0)==='$'&&key.charAt(1)==='$'){val=undefined;}else if(isWindow(value)){val='$WINDOW';}else if(value&&window.document===value){val='$DOCUMENT';}else if(isScope(value)){val='$SCOPE';}return val;}/**
 * @ngdoc function
 * @name angular.toJson
 * @module ng
 * @kind function
 *
 * @description
 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
 * stripped since angular uses this notation internally.
 *
 * @param {Object|Array|Date|string|number|boolean} obj Input to be serialized into JSON.
 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
 *    If set to an integer, the JSON output will contain that many spaces per indentation.
 * @returns {string|undefined} JSON-ified string representing `obj`.
 * @knownIssue
 *
 * The Safari browser throws a `RangeError` instead of returning `null` when it tries to stringify a `Date`
 * object with an invalid date value. The only reliable way to prevent this is to monkeypatch the
 * `Date.prototype.toJSON` method as follows:
 *
 * ```
 * var _DatetoJSON = Date.prototype.toJSON;
 * Date.prototype.toJSON = function() {
 *   try {
 *     return _DatetoJSON.call(this);
 *   } catch(e) {
 *     if (e instanceof RangeError) {
 *       return null;
 *     }
 *     throw e;
 *   }
 * };
 * ```
 *
 * See https://github.com/angular/angular.js/pull/14221 for more information.
 */function toJson(obj,pretty){if(isUndefined(obj))return undefined;if(!isNumber(pretty)){pretty=pretty?2:null;}return JSON.stringify(obj,toJsonReplacer,pretty);}/**
 * @ngdoc function
 * @name angular.fromJson
 * @module ng
 * @kind function
 *
 * @description
 * Deserializes a JSON string.
 *
 * @param {string} json JSON string to deserialize.
 * @returns {Object|Array|string|number} Deserialized JSON string.
 */function fromJson(json){return isString(json)?JSON.parse(json):json;}var ALL_COLONS=/:/g;function timezoneToOffset(timezone,fallback){// Support: IE 9-11 only, Edge 13-15+
// IE/Edge do not "understand" colon (`:`) in timezone
timezone=timezone.replace(ALL_COLONS,'');var requestedTimezoneOffset=Date.parse('Jan 01, 1970 00:00:00 '+timezone)/60000;return isNumberNaN(requestedTimezoneOffset)?fallback:requestedTimezoneOffset;}function addDateMinutes(date,minutes){date=new Date(date.getTime());date.setMinutes(date.getMinutes()+minutes);return date;}function convertTimezoneToLocal(date,timezone,reverse){reverse=reverse?-1:1;var dateTimezoneOffset=date.getTimezoneOffset();var timezoneOffset=timezoneToOffset(timezone,dateTimezoneOffset);return addDateMinutes(date,reverse*(timezoneOffset-dateTimezoneOffset));}/**
 * @returns {string} Returns the string representation of the element.
 */function startingTag(element){element=jqLite(element).clone().empty();var elemHtml=jqLite('<div>').append(element).html();try{return element[0].nodeType===NODE_TYPE_TEXT?lowercase(elemHtml):elemHtml.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/,function(match,nodeName){return'<'+lowercase(nodeName);});}catch(e){return lowercase(elemHtml);}}/////////////////////////////////////////////////
/**
 * Tries to decode the URI component without throwing an exception.
 *
 * @private
 * @param str value potential URI component to check.
 * @returns {boolean} True if `value` can be decoded
 * with the decodeURIComponent function.
 */function tryDecodeURIComponent(value){try{return decodeURIComponent(value);}catch(e){// Ignore any invalid uri component.
}}/**
 * Parses an escaped url query string into key-value pairs.
 * @returns {Object.<string,boolean|Array>}
 */function parseKeyValue(/**string*/keyValue){var obj={};forEach((keyValue||'').split('&'),function(keyValue){var splitPoint,key,val;if(keyValue){key=keyValue=keyValue.replace(/\+/g,'%20');splitPoint=keyValue.indexOf('=');if(splitPoint!==-1){key=keyValue.substring(0,splitPoint);val=keyValue.substring(splitPoint+1);}key=tryDecodeURIComponent(key);if(isDefined(key)){val=isDefined(val)?tryDecodeURIComponent(val):true;if(!hasOwnProperty.call(obj,key)){obj[key]=val;}else if(isArray(obj[key])){obj[key].push(val);}else{obj[key]=[obj[key],val];}}}});return obj;}function toKeyValue(obj){var parts=[];forEach(obj,function(value,key){if(isArray(value)){forEach(value,function(arrayValue){parts.push(encodeUriQuery(key,true)+(arrayValue===true?'':'='+encodeUriQuery(arrayValue,true)));});}else{parts.push(encodeUriQuery(key,true)+(value===true?'':'='+encodeUriQuery(value,true)));}});return parts.length?parts.join('&'):'';}/**
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
 * segments:
 *    segment       = *pchar
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */function encodeUriSegment(val){return encodeUriQuery(val,true).replace(/%26/gi,'&').replace(/%3D/gi,'=').replace(/%2B/gi,'+');}/**
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
 * encoded per http://tools.ietf.org/html/rfc3986:
 *    query         = *( pchar / "/" / "?" )
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */function encodeUriQuery(val,pctEncodeSpaces){return encodeURIComponent(val).replace(/%40/gi,'@').replace(/%3A/gi,':').replace(/%24/g,'$').replace(/%2C/gi,',').replace(/%3B/gi,';').replace(/%20/g,pctEncodeSpaces?'%20':'+');}var ngAttrPrefixes=['ng-','data-ng-','ng:','x-ng-'];function getNgAttribute(element,ngAttr){var attr,i,ii=ngAttrPrefixes.length;for(i=0;i<ii;++i){attr=ngAttrPrefixes[i]+ngAttr;if(isString(attr=element.getAttribute(attr))){return attr;}}return null;}function allowAutoBootstrap(document){var script=document.currentScript;if(!script){// Support: IE 9-11 only
// IE does not have `document.currentScript`
return true;}// If the `currentScript` property has been clobbered just return false, since this indicates a probable attack
if(!(script instanceof window.HTMLScriptElement||script instanceof window.SVGScriptElement)){return false;}var attributes=script.attributes;var srcs=[attributes.getNamedItem('src'),attributes.getNamedItem('href'),attributes.getNamedItem('xlink:href')];return srcs.every(function(src){if(!src){return true;}if(!src.value){return false;}var link=document.createElement('a');link.href=src.value;if(document.location.origin===link.origin){// Same-origin resources are always allowed, even for non-whitelisted schemes.
return true;}// Disabled bootstrapping unless angular.js was loaded from a known scheme used on the web.
// This is to prevent angular.js bundled with browser extensions from being used to bypass the
// content security policy in web pages and other browser extensions.
switch(link.protocol){case'http:':case'https:':case'ftp:':case'blob:':case'file:':case'data:':return true;default:return false;}});}// Cached as it has to run during loading so that document.currentScript is available.
var isAutoBootstrapAllowed=allowAutoBootstrap(window.document);/**
 * @ngdoc directive
 * @name ngApp
 * @module ng
 *
 * @element ANY
 * @param {angular.Module} ngApp an optional application
 *   {@link angular.module module} name to load.
 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
 *   tracking down the root of these bugs.
 *
 * @description
 *
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
 * designates the **root element** of the application and is typically placed near the root element
 * of the page - e.g. on the `<body>` or `<html>` tags.
 *
 * There are a few things to keep in mind when using `ngApp`:
 * - only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
 *   found in the document will be used to define the root element to auto-bootstrap as an
 *   application. To run multiple applications in an HTML document you must manually bootstrap them using
 *   {@link angular.bootstrap} instead.
 * - AngularJS applications cannot be nested within each other.
 * - Do not use a directive that uses {@link ng.$compile#transclusion transclusion} on the same element as `ngApp`.
 *   This includes directives such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and
 *   {@link ngRoute.ngView `ngView`}.
 *   Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
 *   causing animations to stop working and making the injector inaccessible from outside the app.
 *
 * You can specify an **AngularJS module** to be used as the root module for the application.  This
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
 * should contain the application code needed or have dependencies on other modules that will
 * contain the code. See {@link angular.module} for more information.
 *
 * In the example below if the `ngApp` directive were not placed on the `html` element then the
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
 * would not be resolved to `3`.
 *
 * `ngApp` is the easiest, and most common way to bootstrap an application.
 *
 <example module="ngAppDemo" name="ng-app">
   <file name="index.html">
   <div ng-controller="ngAppDemoController">
     I can add: {{a}} + {{b}} =  {{ a+b }}
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
     $scope.a = 1;
     $scope.b = 2;
   });
   </file>
 </example>
 *
 * Using `ngStrictDi`, you would see something like this:
 *
 <example ng-app-included="true" name="strict-di">
   <file name="index.html">
   <div ng-app="ngAppStrictDemo" ng-strict-di>
       <div ng-controller="GoodController1">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style (see
              script.js for details)
           </p>
       </div>

       <div ng-controller="GoodController2">
           Name: <input ng-model="name"><br />
           Hello, {{name}}!

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style
              (see script.js for details)
           </p>
       </div>

       <div ng-controller="BadController">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>The controller could not be instantiated, due to relying
              on automatic function annotations (which are disabled in
              strict mode). As such, the content of this section is not
              interpolated, and there should be an error in your web console.
           </p>
       </div>
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppStrictDemo', [])
     // BadController will fail to instantiate, due to relying on automatic function annotation,
     // rather than an explicit annotation
     .controller('BadController', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     })
     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
     // due to using explicit annotations using the array style and $inject property, respectively.
     .controller('GoodController1', ['$scope', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     }])
     .controller('GoodController2', GoodController2);
     function GoodController2($scope) {
       $scope.name = 'World';
     }
     GoodController2.$inject = ['$scope'];
   </file>
   <file name="style.css">
   div[ng-controller] {
       margin-bottom: 1em;
       -webkit-border-radius: 4px;
       border-radius: 4px;
       border: 1px solid;
       padding: .5em;
   }
   div[ng-controller^=Good] {
       border-color: #d6e9c6;
       background-color: #dff0d8;
       color: #3c763d;
   }
   div[ng-controller^=Bad] {
       border-color: #ebccd1;
       background-color: #f2dede;
       color: #a94442;
       margin-bottom: 0;
   }
   </file>
 </example>
 */function angularInit(element,bootstrap){var appElement,module,config={};// The element `element` has priority over any other element.
forEach(ngAttrPrefixes,function(prefix){var name=prefix+'app';if(!appElement&&element.hasAttribute&&element.hasAttribute(name)){appElement=element;module=element.getAttribute(name);}});forEach(ngAttrPrefixes,function(prefix){var name=prefix+'app';var candidate;if(!appElement&&(candidate=element.querySelector('['+name.replace(':','\\:')+']'))){appElement=candidate;module=candidate.getAttribute(name);}});if(appElement){if(!isAutoBootstrapAllowed){window.console.error('Angular: disabling automatic bootstrap. <script> protocol indicates '+'an extension, document.location.href does not match.');return;}config.strictDi=getNgAttribute(appElement,'strict-di')!==null;bootstrap(appElement,module?[module]:[],config);}}/**
 * @ngdoc function
 * @name angular.bootstrap
 * @module ng
 * @description
 * Use this function to manually start up angular application.
 *
 * For more information, see the {@link guide/bootstrap Bootstrap guide}.
 *
 * Angular will detect if it has been loaded into the browser more than once and only allow the
 * first loaded script to be bootstrapped and will report a warning to the browser console for
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
 * multiple instances of Angular try to work on the DOM.
 *
 * <div class="alert alert-warning">
 * **Note:** Protractor based end-to-end tests cannot use this function to bootstrap manually.
 * They must use {@link ng.directive:ngApp ngApp}.
 * </div>
 *
 * <div class="alert alert-warning">
 * **Note:** Do not bootstrap the app on an element with a directive that uses {@link ng.$compile#transclusion transclusion},
 * such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and {@link ngRoute.ngView `ngView`}.
 * Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
 * causing animations to stop working and making the injector inaccessible from outside the app.
 * </div>
 *
 * ```html
 * <!doctype html>
 * <html>
 * <body>
 * <div ng-controller="WelcomeController">
 *   {{greeting}}
 * </div>
 *
 * <script src="angular.js"></script>
 * <script>
 *   var app = angular.module('demo', [])
 *   .controller('WelcomeController', function($scope) {
 *       $scope.greeting = 'Welcome!';
 *   });
 *   angular.bootstrap(document, ['demo']);
 * </script>
 * </body>
 * </html>
 * ```
 *
 * @param {DOMElement} element DOM element which is the root of angular application.
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
 *     Each item in the array should be the name of a predefined module or a (DI annotated)
 *     function that will be invoked by the injector as a `config` block.
 *     See: {@link angular.module modules}
 * @param {Object=} config an object for defining configuration options for the application. The
 *     following keys are supported:
 *
 * * `strictDi` - disable automatic function annotation for the application. This is meant to
 *   assist in finding bugs which break minified code. Defaults to `false`.
 *
 * @returns {auto.$injector} Returns the newly created injector for this app.
 */function bootstrap(element,modules,config){if(!isObject(config))config={};var defaultConfig={strictDi:false};config=extend(defaultConfig,config);var doBootstrap=function(){element=jqLite(element);if(element.injector()){var tag=element[0]===window.document?'document':startingTag(element);// Encode angle brackets to prevent input from being sanitized to empty string #8683.
throw ngMinErr('btstrpd','App already bootstrapped with this element \'{0}\'',tag.replace(/</,'&lt;').replace(/>/,'&gt;'));}modules=modules||[];modules.unshift(['$provide',function($provide){$provide.value('$rootElement',element);}]);if(config.debugInfoEnabled){// Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
modules.push(['$compileProvider',function($compileProvider){$compileProvider.debugInfoEnabled(true);}]);}modules.unshift('ng');var injector=createInjector(modules,config.strictDi);injector.invoke(['$rootScope','$rootElement','$compile','$injector',function bootstrapApply(scope,element,compile,injector){scope.$apply(function(){element.data('$injector',injector);compile(element)(scope);});}]);return injector;};var NG_ENABLE_DEBUG_INFO=/^NG_ENABLE_DEBUG_INFO!/;var NG_DEFER_BOOTSTRAP=/^NG_DEFER_BOOTSTRAP!/;if(window&&NG_ENABLE_DEBUG_INFO.test(window.name)){config.debugInfoEnabled=true;window.name=window.name.replace(NG_ENABLE_DEBUG_INFO,'');}if(window&&!NG_DEFER_BOOTSTRAP.test(window.name)){return doBootstrap();}window.name=window.name.replace(NG_DEFER_BOOTSTRAP,'');angular.resumeBootstrap=function(extraModules){forEach(extraModules,function(module){modules.push(module);});return doBootstrap();};if(isFunction(angular.resumeDeferredBootstrap)){angular.resumeDeferredBootstrap();}}/**
 * @ngdoc function
 * @name angular.reloadWithDebugInfo
 * @module ng
 * @description
 * Use this function to reload the current application with debug information turned on.
 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
 *
 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
 */function reloadWithDebugInfo(){window.name='NG_ENABLE_DEBUG_INFO!'+window.name;window.location.reload();}/**
 * @name angular.getTestability
 * @module ng
 * @description
 * Get the testability service for the instance of Angular on the given
 * element.
 * @param {DOMElement} element DOM element which is the root of angular application.
 */function getTestability(rootElement){var injector=angular.element(rootElement).injector();if(!injector){throw ngMinErr('test','no injector found for element argument to getTestability');}return injector.get('$$testability');}var SNAKE_CASE_REGEXP=/[A-Z]/g;function snake_case(name,separator){separator=separator||'_';return name.replace(SNAKE_CASE_REGEXP,function(letter,pos){return(pos?separator:'')+letter.toLowerCase();});}var bindJQueryFired=false;function bindJQuery(){var originalCleanData;if(bindJQueryFired){return;}// bind to jQuery if present;
var jqName=jq();jQuery=isUndefined(jqName)?window.jQuery:// use jQuery (if present)
!jqName?undefined:// use jqLite
window[jqName];// use jQuery specified by `ngJq`
// Use jQuery if it exists with proper functionality, otherwise default to us.
// Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
// Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
// versions. It will not work for sure with jQuery <1.7, though.
if(jQuery&&jQuery.fn.on){jqLite=jQuery;extend(jQuery.fn,{scope:JQLitePrototype.scope,isolateScope:JQLitePrototype.isolateScope,controller:/** @type {?} */JQLitePrototype.controller,injector:JQLitePrototype.injector,inheritedData:JQLitePrototype.inheritedData});// All nodes removed from the DOM via various jQuery APIs like .remove()
// are passed through jQuery.cleanData. Monkey-patch this method to fire
// the $destroy event on all removed nodes.
originalCleanData=jQuery.cleanData;jQuery.cleanData=function(elems){var events;for(var i=0,elem;(elem=elems[i])!=null;i++){events=jQuery._data(elem,'events');if(events&&events.$destroy){jQuery(elem).triggerHandler('$destroy');}}originalCleanData(elems);};}else{jqLite=JQLite;}angular.element=jqLite;// Prevent double-proxying.
bindJQueryFired=true;}/**
 * throw error if the argument is falsy.
 */function assertArg(arg,name,reason){if(!arg){throw ngMinErr('areq','Argument \'{0}\' is {1}',name||'?',reason||'required');}return arg;}function assertArgFn(arg,name,acceptArrayAnnotation){if(acceptArrayAnnotation&&isArray(arg)){arg=arg[arg.length-1];}assertArg(isFunction(arg),name,'not a function, got '+(arg&&typeof arg==='object'?arg.constructor.name||'Object':typeof arg));return arg;}/**
 * throw error if the name given is hasOwnProperty
 * @param  {String} name    the name to test
 * @param  {String} context the context in which the name is used, such as module or directive
 */function assertNotHasOwnProperty(name,context){if(name==='hasOwnProperty'){throw ngMinErr('badname','hasOwnProperty is not a valid {0} name',context);}}/**
 * Return the value accessible from the object by path. Any undefined traversals are ignored
 * @param {Object} obj starting object
 * @param {String} path path to traverse
 * @param {boolean} [bindFnToScope=true]
 * @returns {Object} value as accessible by path
 *///TODO(misko): this function needs to be removed
function getter(obj,path,bindFnToScope){if(!path)return obj;var keys=path.split('.');var key;var lastInstance=obj;var len=keys.length;for(var i=0;i<len;i++){key=keys[i];if(obj){obj=(lastInstance=obj)[key];}}if(!bindFnToScope&&isFunction(obj)){return bind(lastInstance,obj);}return obj;}/**
 * Return the DOM siblings between the first and last node in the given array.
 * @param {Array} array like object
 * @returns {Array} the inputted object or a jqLite collection containing the nodes
 */function getBlockNodes(nodes){// TODO(perf): update `nodes` instead of creating a new object?
var node=nodes[0];var endNode=nodes[nodes.length-1];var blockNodes;for(var i=1;node!==endNode&&(node=node.nextSibling);i++){if(blockNodes||nodes[i]!==node){if(!blockNodes){blockNodes=jqLite(slice.call(nodes,0,i));}blockNodes.push(node);}}return blockNodes||nodes;}/**
 * Creates a new object without a prototype. This object is useful for lookup without having to
 * guard against prototypically inherited properties via hasOwnProperty.
 *
 * Related micro-benchmarks:
 * - http://jsperf.com/object-create2
 * - http://jsperf.com/proto-map-lookup/2
 * - http://jsperf.com/for-in-vs-object-keys2
 *
 * @returns {Object}
 */function createMap(){return Object.create(null);}function stringify(value){if(value==null){// null || undefined
return'';}switch(typeof value){case'string':break;case'number':value=''+value;break;default:if(hasCustomToString(value)&&!isArray(value)&&!isDate(value)){value=value.toString();}else{value=toJson(value);}}return value;}var NODE_TYPE_ELEMENT=1;var NODE_TYPE_ATTRIBUTE=2;var NODE_TYPE_TEXT=3;var NODE_TYPE_COMMENT=8;var NODE_TYPE_DOCUMENT=9;var NODE_TYPE_DOCUMENT_FRAGMENT=11;/**
 * @ngdoc type
 * @name angular.Module
 * @module ng
 * @description
 *
 * Interface for configuring angular {@link angular.module modules}.
 */function setupModuleLoader(window){var $injectorMinErr=minErr('$injector');var ngMinErr=minErr('ng');function ensure(obj,name,factory){return obj[name]||(obj[name]=factory());}var angular=ensure(window,'angular',Object);// We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
angular.$$minErr=angular.$$minErr||minErr;return ensure(angular,'module',function(){/** @type {Object.<string, angular.Module>} */var modules={};/**
     * @ngdoc function
     * @name angular.module
     * @module ng
     * @description
     *
     * The `angular.module` is a global place for creating, registering and retrieving Angular
     * modules.
     * All modules (angular core or 3rd party) that should be available to an application must be
     * registered using this mechanism.
     *
     * Passing one argument retrieves an existing {@link angular.Module},
     * whereas passing more than one argument creates a new {@link angular.Module}
     *
     *
     * # Module
     *
     * A module is a collection of services, directives, controllers, filters, and configuration information.
     * `angular.module` is used to configure the {@link auto.$injector $injector}.
     *
     * ```js
     * // Create a new module
     * var myModule = angular.module('myModule', []);
     *
     * // register a new service
     * myModule.value('appName', 'MyCoolApp');
     *
     * // configure existing services inside initialization blocks.
     * myModule.config(['$locationProvider', function($locationProvider) {
     *   // Configure existing providers
     *   $locationProvider.hashPrefix('!');
     * }]);
     * ```
     *
     * Then you can create an injector and load your modules like this:
     *
     * ```js
     * var injector = angular.injector(['ng', 'myModule'])
     * ```
     *
     * However it's more likely that you'll just use
     * {@link ng.directive:ngApp ngApp} or
     * {@link angular.bootstrap} to simplify this process for you.
     *
     * @param {!string} name The name of the module to create or retrieve.
     * @param {!Array.<string>=} requires If specified then new module is being created. If
     *        unspecified then the module is being retrieved for further configuration.
     * @param {Function=} configFn Optional configuration function for the module. Same as
     *        {@link angular.Module#config Module#config()}.
     * @returns {angular.Module} new module with the {@link angular.Module} api.
     */return function module(name,requires,configFn){var info={};var assertNotHasOwnProperty=function(name,context){if(name==='hasOwnProperty'){throw ngMinErr('badname','hasOwnProperty is not a valid {0} name',context);}};assertNotHasOwnProperty(name,'module');if(requires&&modules.hasOwnProperty(name)){modules[name]=null;}return ensure(modules,name,function(){if(!requires){throw $injectorMinErr('nomod','Module \'{0}\' is not available! You either misspelled '+'the module name or forgot to load it. If registering a module ensure that you '+'specify the dependencies as the second argument.',name);}/** @type {!Array.<Array.<*>>} */var invokeQueue=[];/** @type {!Array.<Function>} */var configBlocks=[];/** @type {!Array.<Function>} */var runBlocks=[];var config=invokeLater('$injector','invoke','push',configBlocks);/** @type {angular.Module} */var moduleInstance={// Private state
_invokeQueue:invokeQueue,_configBlocks:configBlocks,_runBlocks:runBlocks,/**
           * @ngdoc method
           * @name angular.Module#info
           * @module ng
           *
           * @param {Object=} info Information about the module
           * @returns {Object|Module} The current info object for this module if called as a getter,
           *                          or `this` if called as a setter.
           *
           * @description
           * Read and write custom information about this module.
           * For example you could put the version of the module in here.
           *
           * ```js
           * angular.module('myModule', []).info({ version: '1.0.0' });
           * ```
           *
           * The version could then be read back out by accessing the module elsewhere:
           *
           * ```
           * var version = angular.module('myModule').info().version;
           * ```
           *
           * You can also retrieve this information during runtime via the
           * {@link $injector#modules `$injector.modules`} property:
           *
           * ```js
           * var version = $injector.modules['myModule'].info().version;
           * ```
           */info:function(value){if(isDefined(value)){if(!isObject(value))throw ngMinErr('aobj','Argument \'{0}\' must be an object','value');info=value;return this;}return info;},/**
           * @ngdoc property
           * @name angular.Module#requires
           * @module ng
           *
           * @description
           * Holds the list of modules which the injector will load before the current module is
           * loaded.
           */requires:requires,/**
           * @ngdoc property
           * @name angular.Module#name
           * @module ng
           *
           * @description
           * Name of the module.
           */name:name,/**
           * @ngdoc method
           * @name angular.Module#provider
           * @module ng
           * @param {string} name service name
           * @param {Function} providerType Construction function for creating new instance of the
           *                                service.
           * @description
           * See {@link auto.$provide#provider $provide.provider()}.
           */provider:invokeLaterAndSetModuleName('$provide','provider'),/**
           * @ngdoc method
           * @name angular.Module#factory
           * @module ng
           * @param {string} name service name
           * @param {Function} providerFunction Function for creating new instance of the service.
           * @description
           * See {@link auto.$provide#factory $provide.factory()}.
           */factory:invokeLaterAndSetModuleName('$provide','factory'),/**
           * @ngdoc method
           * @name angular.Module#service
           * @module ng
           * @param {string} name service name
           * @param {Function} constructor A constructor function that will be instantiated.
           * @description
           * See {@link auto.$provide#service $provide.service()}.
           */service:invokeLaterAndSetModuleName('$provide','service'),/**
           * @ngdoc method
           * @name angular.Module#value
           * @module ng
           * @param {string} name service name
           * @param {*} object Service instance object.
           * @description
           * See {@link auto.$provide#value $provide.value()}.
           */value:invokeLater('$provide','value'),/**
           * @ngdoc method
           * @name angular.Module#constant
           * @module ng
           * @param {string} name constant name
           * @param {*} object Constant value.
           * @description
           * Because the constants are fixed, they get applied before other provide methods.
           * See {@link auto.$provide#constant $provide.constant()}.
           */constant:invokeLater('$provide','constant','unshift'),/**
           * @ngdoc method
           * @name angular.Module#decorator
           * @module ng
           * @param {string} name The name of the service to decorate.
           * @param {Function} decorFn This function will be invoked when the service needs to be
           *                           instantiated and should return the decorated service instance.
           * @description
           * See {@link auto.$provide#decorator $provide.decorator()}.
           */decorator:invokeLaterAndSetModuleName('$provide','decorator',configBlocks),/**
           * @ngdoc method
           * @name angular.Module#animation
           * @module ng
           * @param {string} name animation name
           * @param {Function} animationFactory Factory function for creating new instance of an
           *                                    animation.
           * @description
           *
           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
           *
           *
           * Defines an animation hook that can be later used with
           * {@link $animate $animate} service and directives that use this service.
           *
           * ```js
           * module.animation('.animation-name', function($inject1, $inject2) {
           *   return {
           *     eventName : function(element, done) {
           *       //code to run the animation
           *       //once complete, then run done()
           *       return function cancellationFunction(element) {
           *         //code to cancel the animation
           *       }
           *     }
           *   }
           * })
           * ```
           *
           * See {@link ng.$animateProvider#register $animateProvider.register()} and
           * {@link ngAnimate ngAnimate module} for more information.
           */animation:invokeLaterAndSetModuleName('$animateProvider','register'),/**
           * @ngdoc method
           * @name angular.Module#filter
           * @module ng
           * @param {string} name Filter name - this must be a valid angular expression identifier
           * @param {Function} filterFactory Factory function for creating new instance of filter.
           * @description
           * See {@link ng.$filterProvider#register $filterProvider.register()}.
           *
           * <div class="alert alert-warning">
           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
           * (`myapp_subsection_filterx`).
           * </div>
           */filter:invokeLaterAndSetModuleName('$filterProvider','register'),/**
           * @ngdoc method
           * @name angular.Module#controller
           * @module ng
           * @param {string|Object} name Controller name, or an object map of controllers where the
           *    keys are the names and the values are the constructors.
           * @param {Function} constructor Controller constructor function.
           * @description
           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
           */controller:invokeLaterAndSetModuleName('$controllerProvider','register'),/**
           * @ngdoc method
           * @name angular.Module#directive
           * @module ng
           * @param {string|Object} name Directive name, or an object map of directives where the
           *    keys are the names and the values are the factories.
           * @param {Function} directiveFactory Factory function for creating new instance of
           * directives.
           * @description
           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
           */directive:invokeLaterAndSetModuleName('$compileProvider','directive'),/**
           * @ngdoc method
           * @name angular.Module#component
           * @module ng
           * @param {string} name Name of the component in camel-case (i.e. myComp which will match as my-comp)
           * @param {Object} options Component definition object (a simplified
           *    {@link ng.$compile#directive-definition-object directive definition object})
           *
           * @description
           * See {@link ng.$compileProvider#component $compileProvider.component()}.
           */component:invokeLaterAndSetModuleName('$compileProvider','component'),/**
           * @ngdoc method
           * @name angular.Module#config
           * @module ng
           * @param {Function} configFn Execute this function on module load. Useful for service
           *    configuration.
           * @description
           * Use this method to register work which needs to be performed on module loading.
           * For more about how to configure services, see
           * {@link providers#provider-recipe Provider Recipe}.
           */config:config,/**
           * @ngdoc method
           * @name angular.Module#run
           * @module ng
           * @param {Function} initializationFn Execute this function after injector creation.
           *    Useful for application initialization.
           * @description
           * Use this method to register work which should be performed when the injector is done
           * loading all modules.
           */run:function(block){runBlocks.push(block);return this;}};if(configFn){config(configFn);}return moduleInstance;/**
         * @param {string} provider
         * @param {string} method
         * @param {String=} insertMethod
         * @returns {angular.Module}
         */function invokeLater(provider,method,insertMethod,queue){if(!queue)queue=invokeQueue;return function(){queue[insertMethod||'push']([provider,method,arguments]);return moduleInstance;};}/**
         * @param {string} provider
         * @param {string} method
         * @returns {angular.Module}
         */function invokeLaterAndSetModuleName(provider,method,queue){if(!queue)queue=invokeQueue;return function(recipeName,factoryFunction){if(factoryFunction&&isFunction(factoryFunction))factoryFunction.$$moduleName=name;queue.push([provider,method,arguments]);return moduleInstance;};}});};});}/* global shallowCopy: true *//**
 * Creates a shallow copy of an object, an array or a primitive.
 *
 * Assumes that there are no proto properties for objects.
 */function shallowCopy(src,dst){if(isArray(src)){dst=dst||[];for(var i=0,ii=src.length;i<ii;i++){dst[i]=src[i];}}else if(isObject(src)){dst=dst||{};for(var key in src){if(!(key.charAt(0)==='$'&&key.charAt(1)==='$')){dst[key]=src[key];}}}return dst||src;}/* exported toDebugString */function serializeObject(obj,maxDepth){var seen=[];// There is no direct way to stringify object until reaching a specific depth
// and a very deep object can cause a performance issue, so we copy the object
// based on this specific depth and then stringify it.
if(isValidObjectMaxDepth(maxDepth)){// This file is also included in `angular-loader`, so `copy()` might not always be available in
// the closure. Therefore, it is lazily retrieved as `angular.copy()` when needed.
obj=angular.copy(obj,null,maxDepth);}return JSON.stringify(obj,function(key,val){val=toJsonReplacer(key,val);if(isObject(val)){if(seen.indexOf(val)>=0)return'...';seen.push(val);}return val;});}function toDebugString(obj,maxDepth){if(typeof obj==='function'){return obj.toString().replace(/ \{[\s\S]*$/,'');}else if(isUndefined(obj)){return'undefined';}else if(typeof obj!=='string'){return serializeObject(obj,maxDepth);}return obj;}/* global angularModule: true,
  version: true,

  $CompileProvider,

  htmlAnchorDirective,
  inputDirective,
  inputDirective,
  formDirective,
  scriptDirective,
  selectDirective,
  optionDirective,
  ngBindDirective,
  ngBindHtmlDirective,
  ngBindTemplateDirective,
  ngClassDirective,
  ngClassEvenDirective,
  ngClassOddDirective,
  ngCloakDirective,
  ngControllerDirective,
  ngFormDirective,
  ngHideDirective,
  ngIfDirective,
  ngIncludeDirective,
  ngIncludeFillContentDirective,
  ngInitDirective,
  ngNonBindableDirective,
  ngPluralizeDirective,
  ngRepeatDirective,
  ngShowDirective,
  ngStyleDirective,
  ngSwitchDirective,
  ngSwitchWhenDirective,
  ngSwitchDefaultDirective,
  ngOptionsDirective,
  ngTranscludeDirective,
  ngModelDirective,
  ngListDirective,
  ngChangeDirective,
  patternDirective,
  patternDirective,
  requiredDirective,
  requiredDirective,
  minlengthDirective,
  minlengthDirective,
  maxlengthDirective,
  maxlengthDirective,
  ngValueDirective,
  ngModelOptionsDirective,
  ngAttributeAliasDirectives,
  ngEventDirectives,

  $AnchorScrollProvider,
  $AnimateProvider,
  $CoreAnimateCssProvider,
  $$CoreAnimateJsProvider,
  $$CoreAnimateQueueProvider,
  $$AnimateRunnerFactoryProvider,
  $$AnimateAsyncRunFactoryProvider,
  $BrowserProvider,
  $CacheFactoryProvider,
  $ControllerProvider,
  $DateProvider,
  $DocumentProvider,
  $$IsDocumentHiddenProvider,
  $ExceptionHandlerProvider,
  $FilterProvider,
  $$ForceReflowProvider,
  $InterpolateProvider,
  $IntervalProvider,
  $HttpProvider,
  $HttpParamSerializerProvider,
  $HttpParamSerializerJQLikeProvider,
  $HttpBackendProvider,
  $xhrFactoryProvider,
  $jsonpCallbacksProvider,
  $LocationProvider,
  $LogProvider,
  $$MapProvider,
  $ParseProvider,
  $RootScopeProvider,
  $QProvider,
  $$QProvider,
  $$SanitizeUriProvider,
  $SceProvider,
  $SceDelegateProvider,
  $SnifferProvider,
  $TemplateCacheProvider,
  $TemplateRequestProvider,
  $$TestabilityProvider,
  $TimeoutProvider,
  $$RAFProvider,
  $WindowProvider,
  $$jqLiteProvider,
  $$CookieReaderProvider
*//**
 * @ngdoc object
 * @name angular.version
 * @module ng
 * @description
 * An object that contains information about the current AngularJS version.
 *
 * This object has the following properties:
 *
 * - `full` – `{string}` – Full version string, such as "0.9.18".
 * - `major` – `{number}` – Major version number, such as "0".
 * - `minor` – `{number}` – Minor version number, such as "9".
 * - `dot` – `{number}` – Dot version number, such as "18".
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
 */var version={// These placeholder strings will be replaced by grunt's `build` task.
// They need to be double- or single-quoted.
full:'1.6.6',major:1,minor:6,dot:6,codeName:'interdimensional-cable'};function publishExternalAPI(angular){extend(angular,{'errorHandlingConfig':errorHandlingConfig,'bootstrap':bootstrap,'copy':copy,'extend':extend,'merge':merge,'equals':equals,'element':jqLite,'forEach':forEach,'injector':createInjector,'noop':noop,'bind':bind,'toJson':toJson,'fromJson':fromJson,'identity':identity,'isUndefined':isUndefined,'isDefined':isDefined,'isString':isString,'isFunction':isFunction,'isObject':isObject,'isNumber':isNumber,'isElement':isElement,'isArray':isArray,'version':version,'isDate':isDate,'lowercase':lowercase,'uppercase':uppercase,'callbacks':{$$counter:0},'getTestability':getTestability,'reloadWithDebugInfo':reloadWithDebugInfo,'$$minErr':minErr,'$$csp':csp,'$$encodeUriSegment':encodeUriSegment,'$$encodeUriQuery':encodeUriQuery,'$$stringify':stringify});angularModule=setupModuleLoader(window);angularModule('ng',['ngLocale'],['$provide',function ngModule($provide){// $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
$provide.provider({$$sanitizeUri:$$SanitizeUriProvider});$provide.provider('$compile',$CompileProvider).directive({a:htmlAnchorDirective,input:inputDirective,textarea:inputDirective,form:formDirective,script:scriptDirective,select:selectDirective,option:optionDirective,ngBind:ngBindDirective,ngBindHtml:ngBindHtmlDirective,ngBindTemplate:ngBindTemplateDirective,ngClass:ngClassDirective,ngClassEven:ngClassEvenDirective,ngClassOdd:ngClassOddDirective,ngCloak:ngCloakDirective,ngController:ngControllerDirective,ngForm:ngFormDirective,ngHide:ngHideDirective,ngIf:ngIfDirective,ngInclude:ngIncludeDirective,ngInit:ngInitDirective,ngNonBindable:ngNonBindableDirective,ngPluralize:ngPluralizeDirective,ngRepeat:ngRepeatDirective,ngShow:ngShowDirective,ngStyle:ngStyleDirective,ngSwitch:ngSwitchDirective,ngSwitchWhen:ngSwitchWhenDirective,ngSwitchDefault:ngSwitchDefaultDirective,ngOptions:ngOptionsDirective,ngTransclude:ngTranscludeDirective,ngModel:ngModelDirective,ngList:ngListDirective,ngChange:ngChangeDirective,pattern:patternDirective,ngPattern:patternDirective,required:requiredDirective,ngRequired:requiredDirective,minlength:minlengthDirective,ngMinlength:minlengthDirective,maxlength:maxlengthDirective,ngMaxlength:maxlengthDirective,ngValue:ngValueDirective,ngModelOptions:ngModelOptionsDirective}).directive({ngInclude:ngIncludeFillContentDirective}).directive(ngAttributeAliasDirectives).directive(ngEventDirectives);$provide.provider({$anchorScroll:$AnchorScrollProvider,$animate:$AnimateProvider,$animateCss:$CoreAnimateCssProvider,$$animateJs:$$CoreAnimateJsProvider,$$animateQueue:$$CoreAnimateQueueProvider,$$AnimateRunner:$$AnimateRunnerFactoryProvider,$$animateAsyncRun:$$AnimateAsyncRunFactoryProvider,$browser:$BrowserProvider,$cacheFactory:$CacheFactoryProvider,$controller:$ControllerProvider,$document:$DocumentProvider,$$isDocumentHidden:$$IsDocumentHiddenProvider,$exceptionHandler:$ExceptionHandlerProvider,$filter:$FilterProvider,$$forceReflow:$$ForceReflowProvider,$interpolate:$InterpolateProvider,$interval:$IntervalProvider,$http:$HttpProvider,$httpParamSerializer:$HttpParamSerializerProvider,$httpParamSerializerJQLike:$HttpParamSerializerJQLikeProvider,$httpBackend:$HttpBackendProvider,$xhrFactory:$xhrFactoryProvider,$jsonpCallbacks:$jsonpCallbacksProvider,$location:$LocationProvider,$log:$LogProvider,$parse:$ParseProvider,$rootScope:$RootScopeProvider,$q:$QProvider,$$q:$$QProvider,$sce:$SceProvider,$sceDelegate:$SceDelegateProvider,$sniffer:$SnifferProvider,$templateCache:$TemplateCacheProvider,$templateRequest:$TemplateRequestProvider,$$testability:$$TestabilityProvider,$timeout:$TimeoutProvider,$window:$WindowProvider,$$rAF:$$RAFProvider,$$jqLite:$$jqLiteProvider,$$Map:$$MapProvider,$$cookieReader:$$CookieReaderProvider});}]).info({angularVersion:'1.6.6'});}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* global
  JQLitePrototype: true,
  BOOLEAN_ATTR: true,
  ALIASED_ATTR: true
*///////////////////////////////////
//JQLite
//////////////////////////////////
/**
 * @ngdoc function
 * @name angular.element
 * @module ng
 * @kind function
 *
 * @description
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
 *
 * If jQuery is available, `angular.element` is an alias for the
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or **jqLite**.
 *
 * jqLite is a tiny, API-compatible subset of jQuery that allows
 * Angular to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most
 * commonly needed functionality with the goal of having a very small footprint.
 *
 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file. You can also use the
 * {@link ngJq `ngJq`} directive to specify that jqlite should be used over jQuery, or to use a
 * specific version of jQuery if multiple versions exist on the page.
 *
 * <div class="alert alert-info">**Note:** All element references in Angular are always wrapped with jQuery or
 * jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</div>
 *
 * <div class="alert alert-warning">**Note:** Keep in mind that this function will not find elements
 * by tag name / CSS selector. For lookups by tag name, try instead `angular.element(document).find(...)`
 * or `$document.find()`, or use the standard DOM APIs, e.g. `document.querySelectorAll()`.</div>
 *
 * ## Angular's jqLite
 * jqLite provides only the following jQuery methods:
 *
 * - [`addClass()`](http://api.jquery.com/addClass/) - Does not support a function as first argument
 * - [`after()`](http://api.jquery.com/after/)
 * - [`append()`](http://api.jquery.com/append/)
 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
 * - [`bind()`](http://api.jquery.com/bind/) (_deprecated_, use [`on()`](http://api.jquery.com/on/)) - Does not support namespaces, selectors or eventData
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
 * - [`clone()`](http://api.jquery.com/clone/)
 * - [`contents()`](http://api.jquery.com/contents/)
 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`.
 *   As a setter, does not convert numbers to strings or append 'px', and also does not have automatic property prefixing.
 * - [`data()`](http://api.jquery.com/data/)
 * - [`detach()`](http://api.jquery.com/detach/)
 * - [`empty()`](http://api.jquery.com/empty/)
 * - [`eq()`](http://api.jquery.com/eq/)
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
 * - [`hasClass()`](http://api.jquery.com/hasClass/)
 * - [`html()`](http://api.jquery.com/html/)
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
 * - [`prepend()`](http://api.jquery.com/prepend/)
 * - [`prop()`](http://api.jquery.com/prop/)
 * - [`ready()`](http://api.jquery.com/ready/) (_deprecated_, use `angular.element(callback)` instead of `angular.element(document).ready(callback)`)
 * - [`remove()`](http://api.jquery.com/remove/)
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/) - Does not support multiple attributes
 * - [`removeClass()`](http://api.jquery.com/removeClass/) - Does not support a function as first argument
 * - [`removeData()`](http://api.jquery.com/removeData/)
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
 * - [`text()`](http://api.jquery.com/text/)
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/) - Does not support a function as first argument
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers
 * - [`unbind()`](http://api.jquery.com/unbind/) (_deprecated_, use [`off()`](http://api.jquery.com/off/)) - Does not support namespaces or event object as parameter
 * - [`val()`](http://api.jquery.com/val/)
 * - [`wrap()`](http://api.jquery.com/wrap/)
 *
 * ## jQuery/jqLite Extras
 * Angular also provides the following additional methods and events to both jQuery and jqLite:
 *
 * ### Events
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
 *    element before it is removed.
 *
 * ### Methods
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
 *   `'ngModel'`).
 * - `injector()` - retrieves the injector of the current element or its parent.
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
 *   be enabled.
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
 *   parent element is reached.
 *
 * @knownIssue You cannot spy on `angular.element` if you are using Jasmine version 1.x. See
 * https://github.com/angular/angular.js/issues/14251 for more information.
 *
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
 * @returns {Object} jQuery object.
 */JQLite.expando='ng339';var jqCache=JQLite.cache={},jqId=1;/*
 * !!! This is an undocumented "private" function !!!
 */JQLite._data=function(node){//jQuery always returns an object on cache miss
return this.cache[node[this.expando]]||{};};function jqNextId(){return++jqId;}var DASH_LOWERCASE_REGEXP=/-([a-z])/g;var MS_HACK_REGEXP=/^-ms-/;var MOUSE_EVENT_MAP={mouseleave:'mouseout',mouseenter:'mouseover'};var jqLiteMinErr=minErr('jqLite');/**
 * Converts kebab-case to camelCase.
 * There is also a special case for the ms prefix starting with a lowercase letter.
 * @param name Name to normalize
 */function cssKebabToCamel(name){return kebabToCamel(name.replace(MS_HACK_REGEXP,'ms-'));}function fnCamelCaseReplace(all,letter){return letter.toUpperCase();}/**
 * Converts kebab-case to camelCase.
 * @param name Name to normalize
 */function kebabToCamel(name){return name.replace(DASH_LOWERCASE_REGEXP,fnCamelCaseReplace);}var SINGLE_TAG_REGEXP=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;var HTML_REGEXP=/<|&#?\w+;/;var TAG_NAME_REGEXP=/<([\w:-]+)/;var XHTML_TAG_REGEXP=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;var wrapMap={'option':[1,'<select multiple="multiple">','</select>'],'thead':[1,'<table>','</table>'],'col':[2,'<table><colgroup>','</colgroup></table>'],'tr':[2,'<table><tbody>','</tbody></table>'],'td':[3,'<table><tbody><tr>','</tr></tbody></table>'],'_default':[0,'','']};wrapMap.optgroup=wrapMap.option;wrapMap.tbody=wrapMap.tfoot=wrapMap.colgroup=wrapMap.caption=wrapMap.thead;wrapMap.th=wrapMap.td;function jqLiteIsTextNode(html){return!HTML_REGEXP.test(html);}function jqLiteAcceptsData(node){// The window object can accept data but has no nodeType
// Otherwise we are only interested in elements (1) and documents (9)
var nodeType=node.nodeType;return nodeType===NODE_TYPE_ELEMENT||!nodeType||nodeType===NODE_TYPE_DOCUMENT;}function jqLiteHasData(node){for(var key in jqCache[node.ng339]){return true;}return false;}function jqLiteBuildFragment(html,context){var tmp,tag,wrap,fragment=context.createDocumentFragment(),nodes=[],i;if(jqLiteIsTextNode(html)){// Convert non-html into a text node
nodes.push(context.createTextNode(html));}else{// Convert html into DOM nodes
tmp=fragment.appendChild(context.createElement('div'));tag=(TAG_NAME_REGEXP.exec(html)||['',''])[1].toLowerCase();wrap=wrapMap[tag]||wrapMap._default;tmp.innerHTML=wrap[1]+html.replace(XHTML_TAG_REGEXP,'<$1></$2>')+wrap[2];// Descend through wrappers to the right content
i=wrap[0];while(i--){tmp=tmp.lastChild;}nodes=concat(nodes,tmp.childNodes);tmp=fragment.firstChild;tmp.textContent='';}// Remove wrapper from fragment
fragment.textContent='';fragment.innerHTML='';// Clear inner HTML
forEach(nodes,function(node){fragment.appendChild(node);});return fragment;}function jqLiteParseHTML(html,context){context=context||window.document;var parsed;if(parsed=SINGLE_TAG_REGEXP.exec(html)){return[context.createElement(parsed[1])];}if(parsed=jqLiteBuildFragment(html,context)){return parsed.childNodes;}return[];}function jqLiteWrapNode(node,wrapper){var parent=node.parentNode;if(parent){parent.replaceChild(wrapper,node);}wrapper.appendChild(node);}// IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
var jqLiteContains=window.Node.prototype.contains||/** @this */function(arg){// eslint-disable-next-line no-bitwise
return!!(this.compareDocumentPosition(arg)&16);};/////////////////////////////////////////////
function JQLite(element){if(element instanceof JQLite){return element;}var argIsString;if(isString(element)){element=trim(element);argIsString=true;}if(!(this instanceof JQLite)){if(argIsString&&element.charAt(0)!=='<'){throw jqLiteMinErr('nosel','Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');}return new JQLite(element);}if(argIsString){jqLiteAddNodes(this,jqLiteParseHTML(element));}else if(isFunction(element)){jqLiteReady(element);}else{jqLiteAddNodes(this,element);}}function jqLiteClone(element){return element.cloneNode(true);}function jqLiteDealoc(element,onlyDescendants){if(!onlyDescendants&&jqLiteAcceptsData(element))jqLite.cleanData([element]);if(element.querySelectorAll){jqLite.cleanData(element.querySelectorAll('*'));}}function jqLiteOff(element,type,fn,unsupported){if(isDefined(unsupported))throw jqLiteMinErr('offargs','jqLite#off() does not support the `selector` argument');var expandoStore=jqLiteExpandoStore(element);var events=expandoStore&&expandoStore.events;var handle=expandoStore&&expandoStore.handle;if(!handle)return;//no listeners registered
if(!type){for(type in events){if(type!=='$destroy'){element.removeEventListener(type,handle);}delete events[type];}}else{var removeHandler=function(type){var listenerFns=events[type];if(isDefined(fn)){arrayRemove(listenerFns||[],fn);}if(!(isDefined(fn)&&listenerFns&&listenerFns.length>0)){element.removeEventListener(type,handle);delete events[type];}};forEach(type.split(' '),function(type){removeHandler(type);if(MOUSE_EVENT_MAP[type]){removeHandler(MOUSE_EVENT_MAP[type]);}});}}function jqLiteRemoveData(element,name){var expandoId=element.ng339;var expandoStore=expandoId&&jqCache[expandoId];if(expandoStore){if(name){delete expandoStore.data[name];return;}if(expandoStore.handle){if(expandoStore.events.$destroy){expandoStore.handle({},'$destroy');}jqLiteOff(element);}delete jqCache[expandoId];element.ng339=undefined;// don't delete DOM expandos. IE and Chrome don't like it
}}function jqLiteExpandoStore(element,createIfNecessary){var expandoId=element.ng339,expandoStore=expandoId&&jqCache[expandoId];if(createIfNecessary&&!expandoStore){element.ng339=expandoId=jqNextId();expandoStore=jqCache[expandoId]={events:{},data:{},handle:undefined};}return expandoStore;}function jqLiteData(element,key,value){if(jqLiteAcceptsData(element)){var prop;var isSimpleSetter=isDefined(value);var isSimpleGetter=!isSimpleSetter&&key&&!isObject(key);var massGetter=!key;var expandoStore=jqLiteExpandoStore(element,!isSimpleGetter);var data=expandoStore&&expandoStore.data;if(isSimpleSetter){// data('key', value)
data[kebabToCamel(key)]=value;}else{if(massGetter){// data()
return data;}else{if(isSimpleGetter){// data('key')
// don't force creation of expandoStore if it doesn't exist yet
return data&&data[kebabToCamel(key)];}else{// mass-setter: data({key1: val1, key2: val2})
for(prop in key){data[kebabToCamel(prop)]=key[prop];}}}}}}function jqLiteHasClass(element,selector){if(!element.getAttribute)return false;return(' '+(element.getAttribute('class')||'')+' ').replace(/[\n\t]/g,' ').indexOf(' '+selector+' ')>-1;}function jqLiteRemoveClass(element,cssClasses){if(cssClasses&&element.setAttribute){forEach(cssClasses.split(' '),function(cssClass){element.setAttribute('class',trim((' '+(element.getAttribute('class')||'')+' ').replace(/[\n\t]/g,' ').replace(' '+trim(cssClass)+' ',' ')));});}}function jqLiteAddClass(element,cssClasses){if(cssClasses&&element.setAttribute){var existingClasses=(' '+(element.getAttribute('class')||'')+' ').replace(/[\n\t]/g,' ');forEach(cssClasses.split(' '),function(cssClass){cssClass=trim(cssClass);if(existingClasses.indexOf(' '+cssClass+' ')===-1){existingClasses+=cssClass+' ';}});element.setAttribute('class',trim(existingClasses));}}function jqLiteAddNodes(root,elements){// THIS CODE IS VERY HOT. Don't make changes without benchmarking.
if(elements){// if a Node (the most common case)
if(elements.nodeType){root[root.length++]=elements;}else{var length=elements.length;// if an Array or NodeList and not a Window
if(typeof length==='number'&&elements.window!==elements){if(length){for(var i=0;i<length;i++){root[root.length++]=elements[i];}}}else{root[root.length++]=elements;}}}}function jqLiteController(element,name){return jqLiteInheritedData(element,'$'+(name||'ngController')+'Controller');}function jqLiteInheritedData(element,name,value){// if element is the document object work with the html element instead
// this makes $(document).scope() possible
if(element.nodeType===NODE_TYPE_DOCUMENT){element=element.documentElement;}var names=isArray(name)?name:[name];while(element){for(var i=0,ii=names.length;i<ii;i++){if(isDefined(value=jqLite.data(element,names[i])))return value;}// If dealing with a document fragment node with a host element, and no parent, use the host
// element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
// to lookup parent controllers.
element=element.parentNode||element.nodeType===NODE_TYPE_DOCUMENT_FRAGMENT&&element.host;}}function jqLiteEmpty(element){jqLiteDealoc(element,true);while(element.firstChild){element.removeChild(element.firstChild);}}function jqLiteRemove(element,keepData){if(!keepData)jqLiteDealoc(element);var parent=element.parentNode;if(parent)parent.removeChild(element);}function jqLiteDocumentLoaded(action,win){win=win||window;if(win.document.readyState==='complete'){// Force the action to be run async for consistent behavior
// from the action's point of view
// i.e. it will definitely not be in a $apply
win.setTimeout(action);}else{// No need to unbind this handler as load is only ever called once
jqLite(win).on('load',action);}}function jqLiteReady(fn){function trigger(){window.document.removeEventListener('DOMContentLoaded',trigger);window.removeEventListener('load',trigger);fn();}// check if document is already loaded
if(window.document.readyState==='complete'){window.setTimeout(fn);}else{// We can not use jqLite since we are not done loading and jQuery could be loaded later.
// Works for modern browsers and IE9
window.document.addEventListener('DOMContentLoaded',trigger);// Fallback to window.onload for others
window.addEventListener('load',trigger);}}//////////////////////////////////////////
// Functions which are declared directly.
//////////////////////////////////////////
var JQLitePrototype=JQLite.prototype={ready:jqLiteReady,toString:function(){var value=[];forEach(this,function(e){value.push(''+e);});return'['+value.join(', ')+']';},eq:function(index){return index>=0?jqLite(this[index]):jqLite(this[this.length+index]);},length:0,push:push,sort:[].sort,splice:[].splice};//////////////////////////////////////////
// Functions iterating getter/setters.
// these functions return self on setter and
// value on get.
//////////////////////////////////////////
var BOOLEAN_ATTR={};forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','),function(value){BOOLEAN_ATTR[lowercase(value)]=value;});var BOOLEAN_ELEMENTS={};forEach('input,select,option,textarea,button,form,details'.split(','),function(value){BOOLEAN_ELEMENTS[value]=true;});var ALIASED_ATTR={'ngMinlength':'minlength','ngMaxlength':'maxlength','ngMin':'min','ngMax':'max','ngPattern':'pattern','ngStep':'step'};function getBooleanAttrName(element,name){// check dom last since we will most likely fail on name
var booleanAttr=BOOLEAN_ATTR[name.toLowerCase()];// booleanAttr is here twice to minimize DOM access
return booleanAttr&&BOOLEAN_ELEMENTS[nodeName_(element)]&&booleanAttr;}function getAliasedAttrName(name){return ALIASED_ATTR[name];}forEach({data:jqLiteData,removeData:jqLiteRemoveData,hasData:jqLiteHasData,cleanData:function jqLiteCleanData(nodes){for(var i=0,ii=nodes.length;i<ii;i++){jqLiteRemoveData(nodes[i]);}}},function(fn,name){JQLite[name]=fn;});forEach({data:jqLiteData,inheritedData:jqLiteInheritedData,scope:function(element){// Can't use jqLiteData here directly so we stay compatible with jQuery!
return jqLite.data(element,'$scope')||jqLiteInheritedData(element.parentNode||element,['$isolateScope','$scope']);},isolateScope:function(element){// Can't use jqLiteData here directly so we stay compatible with jQuery!
return jqLite.data(element,'$isolateScope')||jqLite.data(element,'$isolateScopeNoTemplate');},controller:jqLiteController,injector:function(element){return jqLiteInheritedData(element,'$injector');},removeAttr:function(element,name){element.removeAttribute(name);},hasClass:jqLiteHasClass,css:function(element,name,value){name=cssKebabToCamel(name);if(isDefined(value)){element.style[name]=value;}else{return element.style[name];}},attr:function(element,name,value){var ret;var nodeType=element.nodeType;if(nodeType===NODE_TYPE_TEXT||nodeType===NODE_TYPE_ATTRIBUTE||nodeType===NODE_TYPE_COMMENT||!element.getAttribute){return;}var lowercasedName=lowercase(name);var isBooleanAttr=BOOLEAN_ATTR[lowercasedName];if(isDefined(value)){// setter
if(value===null||value===false&&isBooleanAttr){element.removeAttribute(name);}else{element.setAttribute(name,isBooleanAttr?lowercasedName:value);}}else{// getter
ret=element.getAttribute(name);if(isBooleanAttr&&ret!==null){ret=lowercasedName;}// Normalize non-existing attributes to undefined (as jQuery).
return ret===null?undefined:ret;}},prop:function(element,name,value){if(isDefined(value)){element[name]=value;}else{return element[name];}},text:function(){getText.$dv='';return getText;function getText(element,value){if(isUndefined(value)){var nodeType=element.nodeType;return nodeType===NODE_TYPE_ELEMENT||nodeType===NODE_TYPE_TEXT?element.textContent:'';}element.textContent=value;}}(),val:function(element,value){if(isUndefined(value)){if(element.multiple&&nodeName_(element)==='select'){var result=[];forEach(element.options,function(option){if(option.selected){result.push(option.value||option.text);}});return result;}return element.value;}element.value=value;},html:function(element,value){if(isUndefined(value)){return element.innerHTML;}jqLiteDealoc(element,true);element.innerHTML=value;},empty:jqLiteEmpty},function(fn,name){/**
   * Properties: writes return selection, reads return first value
   */JQLite.prototype[name]=function(arg1,arg2){var i,key;var nodeCount=this.length;// jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
// in a way that survives minification.
// jqLiteEmpty takes no arguments but is a setter.
if(fn!==jqLiteEmpty&&isUndefined(fn.length===2&&fn!==jqLiteHasClass&&fn!==jqLiteController?arg1:arg2)){if(isObject(arg1)){// we are a write, but the object properties are the key/values
for(i=0;i<nodeCount;i++){if(fn===jqLiteData){// data() takes the whole object in jQuery
fn(this[i],arg1);}else{for(key in arg1){fn(this[i],key,arg1[key]);}}}// return self for chaining
return this;}else{// we are a read, so read the first child.
// TODO: do we still need this?
var value=fn.$dv;// Only if we have $dv do we iterate over all, otherwise it is just the first element.
var jj=isUndefined(value)?Math.min(nodeCount,1):nodeCount;for(var j=0;j<jj;j++){var nodeValue=fn(this[j],arg1,arg2);value=value?value+nodeValue:nodeValue;}return value;}}else{// we are a write, so apply to all children
for(i=0;i<nodeCount;i++){fn(this[i],arg1,arg2);}// return self for chaining
return this;}};});function createEventHandler(element,events){var eventHandler=function(event,type){// jQuery specific api
event.isDefaultPrevented=function(){return event.defaultPrevented;};var eventFns=events[type||event.type];var eventFnsLength=eventFns?eventFns.length:0;if(!eventFnsLength)return;if(isUndefined(event.immediatePropagationStopped)){var originalStopImmediatePropagation=event.stopImmediatePropagation;event.stopImmediatePropagation=function(){event.immediatePropagationStopped=true;if(event.stopPropagation){event.stopPropagation();}if(originalStopImmediatePropagation){originalStopImmediatePropagation.call(event);}};}event.isImmediatePropagationStopped=function(){return event.immediatePropagationStopped===true;};// Some events have special handlers that wrap the real handler
var handlerWrapper=eventFns.specialHandlerWrapper||defaultHandlerWrapper;// Copy event handlers in case event handlers array is modified during execution.
if(eventFnsLength>1){eventFns=shallowCopy(eventFns);}for(var i=0;i<eventFnsLength;i++){if(!event.isImmediatePropagationStopped()){handlerWrapper(element,event,eventFns[i]);}}};// TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
//       events on `element`
eventHandler.elem=element;return eventHandler;}function defaultHandlerWrapper(element,event,handler){handler.call(element,event);}function specialMouseHandlerWrapper(target,event,handler){// Refer to jQuery's implementation of mouseenter & mouseleave
// Read about mouseenter and mouseleave:
// http://www.quirksmode.org/js/events_mouse.html#link8
var related=event.relatedTarget;// For mousenter/leave call the handler if related is outside the target.
// NB: No relatedTarget if the mouse left/entered the browser window
if(!related||related!==target&&!jqLiteContains.call(target,related)){handler.call(target,event);}}//////////////////////////////////////////
// Functions iterating traversal.
// These functions chain results into a single
// selector.
//////////////////////////////////////////
forEach({removeData:jqLiteRemoveData,on:function jqLiteOn(element,type,fn,unsupported){if(isDefined(unsupported))throw jqLiteMinErr('onargs','jqLite#on() does not support the `selector` or `eventData` parameters');// Do not add event handlers to non-elements because they will not be cleaned up.
if(!jqLiteAcceptsData(element)){return;}var expandoStore=jqLiteExpandoStore(element,true);var events=expandoStore.events;var handle=expandoStore.handle;if(!handle){handle=expandoStore.handle=createEventHandler(element,events);}// http://jsperf.com/string-indexof-vs-split
var types=type.indexOf(' ')>=0?type.split(' '):[type];var i=types.length;var addHandler=function(type,specialHandlerWrapper,noEventListener){var eventFns=events[type];if(!eventFns){eventFns=events[type]=[];eventFns.specialHandlerWrapper=specialHandlerWrapper;if(type!=='$destroy'&&!noEventListener){element.addEventListener(type,handle);}}eventFns.push(fn);};while(i--){type=types[i];if(MOUSE_EVENT_MAP[type]){addHandler(MOUSE_EVENT_MAP[type],specialMouseHandlerWrapper);addHandler(type,undefined,true);}else{addHandler(type);}}},off:jqLiteOff,one:function(element,type,fn){element=jqLite(element);//add the listener twice so that when it is called
//you can remove the original function and still be
//able to call element.off(ev, fn) normally
element.on(type,function onFn(){element.off(type,fn);element.off(type,onFn);});element.on(type,fn);},replaceWith:function(element,replaceNode){var index,parent=element.parentNode;jqLiteDealoc(element);forEach(new JQLite(replaceNode),function(node){if(index){parent.insertBefore(node,index.nextSibling);}else{parent.replaceChild(node,element);}index=node;});},children:function(element){var children=[];forEach(element.childNodes,function(element){if(element.nodeType===NODE_TYPE_ELEMENT){children.push(element);}});return children;},contents:function(element){return element.contentDocument||element.childNodes||[];},append:function(element,node){var nodeType=element.nodeType;if(nodeType!==NODE_TYPE_ELEMENT&&nodeType!==NODE_TYPE_DOCUMENT_FRAGMENT)return;node=new JQLite(node);for(var i=0,ii=node.length;i<ii;i++){var child=node[i];element.appendChild(child);}},prepend:function(element,node){if(element.nodeType===NODE_TYPE_ELEMENT){var index=element.firstChild;forEach(new JQLite(node),function(child){element.insertBefore(child,index);});}},wrap:function(element,wrapNode){jqLiteWrapNode(element,jqLite(wrapNode).eq(0).clone()[0]);},remove:jqLiteRemove,detach:function(element){jqLiteRemove(element,true);},after:function(element,newElement){var index=element,parent=element.parentNode;if(parent){newElement=new JQLite(newElement);for(var i=0,ii=newElement.length;i<ii;i++){var node=newElement[i];parent.insertBefore(node,index.nextSibling);index=node;}}},addClass:jqLiteAddClass,removeClass:jqLiteRemoveClass,toggleClass:function(element,selector,condition){if(selector){forEach(selector.split(' '),function(className){var classCondition=condition;if(isUndefined(classCondition)){classCondition=!jqLiteHasClass(element,className);}(classCondition?jqLiteAddClass:jqLiteRemoveClass)(element,className);});}},parent:function(element){var parent=element.parentNode;return parent&&parent.nodeType!==NODE_TYPE_DOCUMENT_FRAGMENT?parent:null;},next:function(element){return element.nextElementSibling;},find:function(element,selector){if(element.getElementsByTagName){return element.getElementsByTagName(selector);}else{return[];}},clone:jqLiteClone,triggerHandler:function(element,event,extraParameters){var dummyEvent,eventFnsCopy,handlerArgs;var eventName=event.type||event;var expandoStore=jqLiteExpandoStore(element);var events=expandoStore&&expandoStore.events;var eventFns=events&&events[eventName];if(eventFns){// Create a dummy event to pass to the handlers
dummyEvent={preventDefault:function(){this.defaultPrevented=true;},isDefaultPrevented:function(){return this.defaultPrevented===true;},stopImmediatePropagation:function(){this.immediatePropagationStopped=true;},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===true;},stopPropagation:noop,type:eventName,target:element};// If a custom event was provided then extend our dummy event with it
if(event.type){dummyEvent=extend(dummyEvent,event);}// Copy event handlers in case event handlers array is modified during execution.
eventFnsCopy=shallowCopy(eventFns);handlerArgs=extraParameters?[dummyEvent].concat(extraParameters):[dummyEvent];forEach(eventFnsCopy,function(fn){if(!dummyEvent.isImmediatePropagationStopped()){fn.apply(element,handlerArgs);}});}}},function(fn,name){/**
   * chaining functions
   */JQLite.prototype[name]=function(arg1,arg2,arg3){var value;for(var i=0,ii=this.length;i<ii;i++){if(isUndefined(value)){value=fn(this[i],arg1,arg2,arg3);if(isDefined(value)){// any function which returns a value needs to be wrapped
value=jqLite(value);}}else{jqLiteAddNodes(value,fn(this[i],arg1,arg2,arg3));}}return isDefined(value)?value:this;};});// bind legacy bind/unbind to on/off
JQLite.prototype.bind=JQLite.prototype.on;JQLite.prototype.unbind=JQLite.prototype.off;// Provider for private $$jqLite service
/** @this */function $$jqLiteProvider(){this.$get=function $$jqLite(){return extend(JQLite,{hasClass:function(node,classes){if(node.attr)node=node[0];return jqLiteHasClass(node,classes);},addClass:function(node,classes){if(node.attr)node=node[0];return jqLiteAddClass(node,classes);},removeClass:function(node,classes){if(node.attr)node=node[0];return jqLiteRemoveClass(node,classes);}});};}/**
 * Computes a hash of an 'obj'.
 * Hash of a:
 *  string is string
 *  number is number as string
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
 *         that is also assigned to the $$hashKey property of the object.
 *
 * @param obj
 * @returns {string} hash string such that the same input will have the same hash string.
 *         The resulting string key is in 'type:hashKey' format.
 */function hashKey(obj,nextUidFn){var key=obj&&obj.$$hashKey;if(key){if(typeof key==='function'){key=obj.$$hashKey();}return key;}var objType=typeof obj;if(objType==='function'||objType==='object'&&obj!==null){key=obj.$$hashKey=objType+':'+(nextUidFn||nextUid)();}else{key=objType+':'+obj;}return key;}// A minimal ES2015 Map implementation.
// Should be bug/feature equivalent to the native implementations of supported browsers
// (for the features required in Angular).
// See https://kangax.github.io/compat-table/es6/#test-Map
var nanKey=Object.create(null);function NgMapShim(){this._keys=[];this._values=[];this._lastKey=NaN;this._lastIndex=-1;}NgMapShim.prototype={_idx:function(key){if(key===this._lastKey){return this._lastIndex;}this._lastKey=key;this._lastIndex=this._keys.indexOf(key);return this._lastIndex;},_transformKey:function(key){return isNumberNaN(key)?nanKey:key;},get:function(key){key=this._transformKey(key);var idx=this._idx(key);if(idx!==-1){return this._values[idx];}},set:function(key,value){key=this._transformKey(key);var idx=this._idx(key);if(idx===-1){idx=this._lastIndex=this._keys.length;}this._keys[idx]=key;this._values[idx]=value;// Support: IE11
// Do not `return this` to simulate the partial IE11 implementation
},delete:function(key){key=this._transformKey(key);var idx=this._idx(key);if(idx===-1){return false;}this._keys.splice(idx,1);this._values.splice(idx,1);this._lastKey=NaN;this._lastIndex=-1;return true;}};// For now, always use `NgMapShim`, even if `window.Map` is available. Some native implementations
// are still buggy (often in subtle ways) and can cause hard-to-debug failures. When native `Map`
// implementations get more stable, we can reconsider switching to `window.Map` (when available).
var NgMap=NgMapShim;var $$MapProvider=[/** @this */function(){this.$get=[function(){return NgMap;}];}];/**
 * @ngdoc function
 * @module ng
 * @name angular.injector
 * @kind function
 *
 * @description
 * Creates an injector object that can be used for retrieving services as well as for
 * dependency injection (see {@link guide/di dependency injection}).
 *
 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
 *     {@link angular.module}. The `ng` module must be explicitly added.
 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
 *     disallows argument name annotation inference.
 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
 *
 * @example
 * Typical usage
 * ```js
 *   // create an injector
 *   var $injector = angular.injector(['ng']);
 *
 *   // use the injector to kick off your application
 *   // use the type inference to auto inject arguments, or use implicit injection
 *   $injector.invoke(function($rootScope, $compile, $document) {
 *     $compile($document)($rootScope);
 *     $rootScope.$digest();
 *   });
 * ```
 *
 * Sometimes you want to get access to the injector of a currently running Angular app
 * from outside Angular. Perhaps, you want to inject and compile some markup after the
 * application has been bootstrapped. You can do this using the extra `injector()` added
 * to JQuery/jqLite elements. See {@link angular.element}.
 *
 * *This is fairly rare but could be the case if a third party library is injecting the
 * markup.*
 *
 * In the following example a new block of HTML containing a `ng-controller`
 * directive is added to the end of the document body by JQuery. We then compile and link
 * it into the current AngularJS scope.
 *
 * ```js
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
 * $(document.body).append($div);
 *
 * angular.element(document).injector().invoke(function($compile) {
 *   var scope = angular.element($div).scope();
 *   $compile($div)(scope);
 * });
 * ```
 *//**
 * @ngdoc module
 * @name auto
 * @installation
 * @description
 *
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
 */var ARROW_ARG=/^([^(]+?)=>/;var FN_ARGS=/^[^(]*\(\s*([^)]*)\)/m;var FN_ARG_SPLIT=/,/;var FN_ARG=/^\s*(_?)(\S+?)\1\s*$/;var STRIP_COMMENTS=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;var $injectorMinErr=minErr('$injector');function stringifyFn(fn){return Function.prototype.toString.call(fn);}function extractArgs(fn){var fnText=stringifyFn(fn).replace(STRIP_COMMENTS,''),args=fnText.match(ARROW_ARG)||fnText.match(FN_ARGS);return args;}function anonFn(fn){// For anonymous functions, showing at the very least the function signature can help in
// debugging.
var args=extractArgs(fn);if(args){return'function('+(args[1]||'').replace(/[\s\r\n]+/,' ')+')';}return'fn';}function annotate(fn,strictDi,name){var $inject,argDecl,last;if(typeof fn==='function'){if(!($inject=fn.$inject)){$inject=[];if(fn.length){if(strictDi){if(!isString(name)||!name){name=fn.name||anonFn(fn);}throw $injectorMinErr('strictdi','{0} is not using explicit annotation and cannot be invoked in strict mode',name);}argDecl=extractArgs(fn);forEach(argDecl[1].split(FN_ARG_SPLIT),function(arg){arg.replace(FN_ARG,function(all,underscore,name){$inject.push(name);});});}fn.$inject=$inject;}}else if(isArray(fn)){last=fn.length-1;assertArgFn(fn[last],'fn');$inject=fn.slice(0,last);}else{assertArgFn(fn,'fn',true);}return $inject;}///////////////////////////////////////
/**
 * @ngdoc service
 * @name $injector
 *
 * @description
 *
 * `$injector` is used to retrieve object instances as defined by
 * {@link auto.$provide provider}, instantiate types, invoke methods,
 * and load modules.
 *
 * The following always holds true:
 *
 * ```js
 *   var $injector = angular.injector();
 *   expect($injector.get('$injector')).toBe($injector);
 *   expect($injector.invoke(function($injector) {
 *     return $injector;
 *   })).toBe($injector);
 * ```
 *
 * # Injection Function Annotation
 *
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
 * following are all valid ways of annotating function with injection arguments and are equivalent.
 *
 * ```js
 *   // inferred (only works if code not minified/obfuscated)
 *   $injector.invoke(function(serviceA){});
 *
 *   // annotated
 *   function explicit(serviceA) {};
 *   explicit.$inject = ['serviceA'];
 *   $injector.invoke(explicit);
 *
 *   // inline
 *   $injector.invoke(['serviceA', function(serviceA){}]);
 * ```
 *
 * ## Inference
 *
 * In JavaScript calling `toString()` on a function returns the function definition. The definition
 * can then be parsed and the function arguments can be extracted. This method of discovering
 * annotations is disallowed when the injector is in strict mode.
 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
 * argument names.
 *
 * ## `$inject` Annotation
 * By adding an `$inject` property onto a function the injection parameters can be specified.
 *
 * ## Inline
 * As an array of injection names, where the last item in the array is the function to call.
 *//**
 * @ngdoc property
 * @name $injector#modules
 * @type {Object}
 * @description
 * A hash containing all the modules that have been loaded into the
 * $injector.
 *
 * You can use this property to find out information about a module via the
 * {@link angular.Module#info `myModule.info(...)`} method.
 *
 * For example:
 *
 * ```
 * var info = $injector.modules['ngAnimate'].info();
 * ```
 *
 * **Do not use this property to attempt to modify the modules after the application
 * has been bootstrapped.**
 *//**
 * @ngdoc method
 * @name $injector#get
 *
 * @description
 * Return an instance of the service.
 *
 * @param {string} name The name of the instance to retrieve.
 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
 * @return {*} The instance.
 *//**
 * @ngdoc method
 * @name $injector#invoke
 *
 * @description
 * Invoke the method and supply the method arguments from the `$injector`.
 *
 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
 *   injected according to the {@link guide/di $inject Annotation} rules.
 * @param {Object=} self The `this` for the invoked method.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 *                         object first, before the `$injector` is consulted.
 * @returns {*} the value returned by the invoked `fn` function.
 *//**
 * @ngdoc method
 * @name $injector#has
 *
 * @description
 * Allows the user to query if the particular service exists.
 *
 * @param {string} name Name of the service to query.
 * @returns {boolean} `true` if injector has given service.
 *//**
 * @ngdoc method
 * @name $injector#instantiate
 * @description
 * Create a new instance of JS type. The method takes a constructor function, invokes the new
 * operator, and supplies all of the arguments to the constructor function as specified by the
 * constructor annotation.
 *
 * @param {Function} Type Annotated constructor function.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 * object first, before the `$injector` is consulted.
 * @returns {Object} new instance of `Type`.
 *//**
 * @ngdoc method
 * @name $injector#annotate
 *
 * @description
 * Returns an array of service names which the function is requesting for injection. This API is
 * used by the injector to determine which services need to be injected into the function when the
 * function is invoked. There are three ways in which the function can be annotated with the needed
 * dependencies.
 *
 * # Argument names
 *
 * The simplest form is to extract the dependencies from the arguments of the function. This is done
 * by converting the function into a string using `toString()` method and extracting the argument
 * names.
 * ```js
 *   // Given
 *   function MyController($scope, $route) {
 *     // ...
 *   }
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * You can disallow this method by using strict injection mode.
 *
 * This method does not work with code minification / obfuscation. For this reason the following
 * annotation strategies are supported.
 *
 * # The `$inject` property
 *
 * If a function has an `$inject` property and its value is an array of strings, then the strings
 * represent names of services to be injected into the function.
 * ```js
 *   // Given
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
 *     // ...
 *   }
 *   // Define function dependencies
 *   MyController['$inject'] = ['$scope', '$route'];
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * # The array notation
 *
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
 * is very inconvenient. In these situations using the array notation to specify the dependencies in
 * a way that survives minification is a better choice:
 *
 * ```js
 *   // We wish to write this (not minification / obfuscation safe)
 *   injector.invoke(function($compile, $rootScope) {
 *     // ...
 *   });
 *
 *   // We are forced to write break inlining
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
 *     // ...
 *   };
 *   tmpFn.$inject = ['$compile', '$rootScope'];
 *   injector.invoke(tmpFn);
 *
 *   // To better support inline function the inline annotation is supported
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
 *     // ...
 *   }]);
 *
 *   // Therefore
 *   expect(injector.annotate(
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
 *    ).toEqual(['$compile', '$rootScope']);
 * ```
 *
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
 * be retrieved as described above.
 *
 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
 *
 * @returns {Array.<string>} The names of the services which the function requires.
 *//**
 * @ngdoc service
 * @name $provide
 *
 * @description
 *
 * The {@link auto.$provide $provide} service has a number of methods for registering components
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
 * {@link angular.Module}.
 *
 * An Angular **service** is a singleton object created by a **service factory**.  These **service
 * factories** are functions which, in turn, are created by a **service provider**.
 * The **service providers** are constructor functions. When instantiated they must contain a
 * property called `$get`, which holds the **service factory** function.
 *
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
 * function to get the instance of the **service**.
 *
 * Often services have no configuration options and there is no need to add methods to the service
 * provider.  The provider will be no more than a constructor function with a `$get` property. For
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
 * services without specifying a provider.
 *
 * * {@link auto.$provide#provider provider(name, provider)} - registers a **service provider** with the
 *     {@link auto.$injector $injector}
 * * {@link auto.$provide#constant constant(name, obj)} - registers a value/object that can be accessed by
 *     providers and services.
 * * {@link auto.$provide#value value(name, obj)} - registers a value/object that can only be accessed by
 *     services, not providers.
 * * {@link auto.$provide#factory factory(name, fn)} - registers a service **factory function**
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
 *     given factory function.
 * * {@link auto.$provide#service service(name, Fn)} - registers a **constructor function**
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
 *      a new object using the given constructor function.
 * * {@link auto.$provide#decorator decorator(name, decorFn)} - registers a **decorator function** that
 *      will be able to modify or replace the implementation of another service.
 *
 * See the individual methods for more information and examples.
 *//**
 * @ngdoc method
 * @name $provide#provider
 * @description
 *
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
 * are constructor functions, whose instances are responsible for "providing" a factory for a
 * service.
 *
 * Service provider names start with the name of the service they provide followed by `Provider`.
 * For example, the {@link ng.$log $log} service has a provider called
 * {@link ng.$logProvider $logProvider}.
 *
 * Service provider objects can have additional methods which allow configuration of the provider
 * and its service. Importantly, you can configure what kind of service is created by the `$get`
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
 * method {@link ng.$logProvider#debugEnabled debugEnabled}
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
 * console or not.
 *
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
                        'Provider'` key.
 * @param {(Object|function())} provider If the provider is:
 *
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
 *   - `Constructor`: a new instance of the provider will be created using
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
 *
 * @returns {Object} registered provider instance

 * @example
 *
 * The following example shows how to create a simple event tracking service and register it using
 * {@link auto.$provide#provider $provide.provider()}.
 *
 * ```js
 *  // Define the eventTracker provider
 *  function EventTrackerProvider() {
 *    var trackingUrl = '/track';
 *
 *    // A provider method for configuring where the tracked events should been saved
 *    this.setTrackingUrl = function(url) {
 *      trackingUrl = url;
 *    };
 *
 *    // The service factory function
 *    this.$get = ['$http', function($http) {
 *      var trackedEvents = {};
 *      return {
 *        // Call this to track an event
 *        event: function(event) {
 *          var count = trackedEvents[event] || 0;
 *          count += 1;
 *          trackedEvents[event] = count;
 *          return count;
 *        },
 *        // Call this to save the tracked events to the trackingUrl
 *        save: function() {
 *          $http.post(trackingUrl, trackedEvents);
 *        }
 *      };
 *    }];
 *  }
 *
 *  describe('eventTracker', function() {
 *    var postSpy;
 *
 *    beforeEach(module(function($provide) {
 *      // Register the eventTracker provider
 *      $provide.provider('eventTracker', EventTrackerProvider);
 *    }));
 *
 *    beforeEach(module(function(eventTrackerProvider) {
 *      // Configure eventTracker provider
 *      eventTrackerProvider.setTrackingUrl('/custom-track');
 *    }));
 *
 *    it('tracks events', inject(function(eventTracker) {
 *      expect(eventTracker.event('login')).toEqual(1);
 *      expect(eventTracker.event('login')).toEqual(2);
 *    }));
 *
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
 *      postSpy = spyOn($http, 'post');
 *      eventTracker.event('login');
 *      eventTracker.save();
 *      expect(postSpy).toHaveBeenCalled();
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
 *    }));
 *  });
 * ```
 *//**
 * @ngdoc method
 * @name $provide#factory
 * @description
 *
 * Register a **service factory**, which will be called to return the service instance.
 * This is short for registering a service where its provider consists of only a `$get` property,
 * which is the given service factory function.
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
 * configure your service in a provider.
 *
 * @param {string} name The name of the instance.
 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service
 * ```js
 *   $provide.factory('ping', ['$http', function($http) {
 *     return function ping() {
 *       return $http.send('/ping');
 *     };
 *   }]);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping();
 *   }]);
 * ```
 *//**
 * @ngdoc method
 * @name $provide#service
 * @description
 *
 * Register a **service constructor**, which will be invoked with `new` to create the service
 * instance.
 * This is short for registering a service where its provider's `$get` property is a factory
 * function that returns an instance instantiated by the injector from the service constructor
 * function.
 *
 * Internally it looks a bit like this:
 *
 * ```
 * {
 *   $get: function() {
 *     return $injector.instantiate(constructor);
 *   }
 * }
 * ```
 *
 *
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
 * as a type/class.
 *
 * @param {string} name The name of the instance.
 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
 *     that will be instantiated.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service using
 * {@link auto.$provide#service $provide.service(class)}.
 * ```js
 *   var Ping = function($http) {
 *     this.$http = $http;
 *   };
 *
 *   Ping.$inject = ['$http'];
 *
 *   Ping.prototype.send = function() {
 *     return this.$http.get('/ping');
 *   };
 *   $provide.service('ping', Ping);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping.send();
 *   }]);
 * ```
 *//**
 * @ngdoc method
 * @name $provide#value
 * @description
 *
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
 * number, an array, an object or a function. This is short for registering a service where its
 * provider's `$get` property is a factory function that takes no arguments and returns the **value
 * service**. That also means it is not possible to inject other services into a value service.
 *
 * Value services are similar to constant services, except that they cannot be injected into a
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
 * an Angular {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the instance.
 * @param {*} value The value.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here are some examples of creating value services.
 * ```js
 *   $provide.value('ADMIN_USER', 'admin');
 *
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
 *
 *   $provide.value('halfOf', function(value) {
 *     return value / 2;
 *   });
 * ```
 *//**
 * @ngdoc method
 * @name $provide#constant
 * @description
 *
 * Register a **constant service** with the {@link auto.$injector $injector}, such as a string,
 * a number, an array, an object or a function. Like the {@link auto.$provide#value value}, it is not
 * possible to inject other services into a constant.
 *
 * But unlike {@link auto.$provide#value value}, a constant can be
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the constant.
 * @param {*} value The constant value.
 * @returns {Object} registered instance
 *
 * @example
 * Here a some examples of creating constants:
 * ```js
 *   $provide.constant('SHARD_HEIGHT', 306);
 *
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
 *
 *   $provide.constant('double', function(value) {
 *     return value * 2;
 *   });
 * ```
 *//**
 * @ngdoc method
 * @name $provide#decorator
 * @description
 *
 * Register a **decorator function** with the {@link auto.$injector $injector}. A decorator function
 * intercepts the creation of a service, allowing it to override or modify the behavior of the
 * service. The return value of the decorator function may be the original service, or a new service
 * that replaces (or wraps and delegates to) the original service.
 *
 * You can find out more about using decorators in the {@link guide/decorators} guide.
 *
 * @param {string} name The name of the service to decorate.
 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
 *    provided and should return the decorated service instance. The function is called using
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
 *    Local injection arguments:
 *
 *    * `$delegate` - The original service instance, which can be replaced, monkey patched, configured,
 *      decorated or delegated to.
 *
 * @example
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
 * calls to {@link ng.$log#error $log.warn()}.
 * ```js
 *   $provide.decorator('$log', ['$delegate', function($delegate) {
 *     $delegate.warn = $delegate.error;
 *     return $delegate;
 *   }]);
 * ```
 */function createInjector(modulesToLoad,strictDi){strictDi=strictDi===true;var INSTANTIATING={},providerSuffix='Provider',path=[],loadedModules=new NgMap(),providerCache={$provide:{provider:supportObject(provider),factory:supportObject(factory),service:supportObject(service),value:supportObject(value),constant:supportObject(constant),decorator:decorator}},providerInjector=providerCache.$injector=createInternalInjector(providerCache,function(serviceName,caller){if(angular.isString(caller)){path.push(caller);}throw $injectorMinErr('unpr','Unknown provider: {0}',path.join(' <- '));}),instanceCache={},protoInstanceInjector=createInternalInjector(instanceCache,function(serviceName,caller){var provider=providerInjector.get(serviceName+providerSuffix,caller);return instanceInjector.invoke(provider.$get,provider,undefined,serviceName);}),instanceInjector=protoInstanceInjector;providerCache['$injector'+providerSuffix]={$get:valueFn(protoInstanceInjector)};instanceInjector.modules=providerInjector.modules=createMap();var runBlocks=loadModules(modulesToLoad);instanceInjector=protoInstanceInjector.get('$injector');instanceInjector.strictDi=strictDi;forEach(runBlocks,function(fn){if(fn)instanceInjector.invoke(fn);});return instanceInjector;////////////////////////////////////
// $provider
////////////////////////////////////
function supportObject(delegate){return function(key,value){if(isObject(key)){forEach(key,reverseParams(delegate));}else{return delegate(key,value);}};}function provider(name,provider_){assertNotHasOwnProperty(name,'service');if(isFunction(provider_)||isArray(provider_)){provider_=providerInjector.instantiate(provider_);}if(!provider_.$get){throw $injectorMinErr('pget','Provider \'{0}\' must define $get factory method.',name);}return providerCache[name+providerSuffix]=provider_;}function enforceReturnValue(name,factory){return(/** @this */function enforcedReturnValue(){var result=instanceInjector.invoke(factory,this);if(isUndefined(result)){throw $injectorMinErr('undef','Provider \'{0}\' must return a value from $get factory method.',name);}return result;});}function factory(name,factoryFn,enforce){return provider(name,{$get:enforce!==false?enforceReturnValue(name,factoryFn):factoryFn});}function service(name,constructor){return factory(name,['$injector',function($injector){return $injector.instantiate(constructor);}]);}function value(name,val){return factory(name,valueFn(val),false);}function constant(name,value){assertNotHasOwnProperty(name,'constant');providerCache[name]=value;instanceCache[name]=value;}function decorator(serviceName,decorFn){var origProvider=providerInjector.get(serviceName+providerSuffix),orig$get=origProvider.$get;origProvider.$get=function(){var origInstance=instanceInjector.invoke(orig$get,origProvider);return instanceInjector.invoke(decorFn,null,{$delegate:origInstance});};}////////////////////////////////////
// Module Loading
////////////////////////////////////
function loadModules(modulesToLoad){assertArg(isUndefined(modulesToLoad)||isArray(modulesToLoad),'modulesToLoad','not an array');var runBlocks=[],moduleFn;forEach(modulesToLoad,function(module){if(loadedModules.get(module))return;loadedModules.set(module,true);function runInvokeQueue(queue){var i,ii;for(i=0,ii=queue.length;i<ii;i++){var invokeArgs=queue[i],provider=providerInjector.get(invokeArgs[0]);provider[invokeArgs[1]].apply(provider,invokeArgs[2]);}}try{if(isString(module)){moduleFn=angularModule(module);instanceInjector.modules[module]=moduleFn;runBlocks=runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);runInvokeQueue(moduleFn._invokeQueue);runInvokeQueue(moduleFn._configBlocks);}else if(isFunction(module)){runBlocks.push(providerInjector.invoke(module));}else if(isArray(module)){runBlocks.push(providerInjector.invoke(module));}else{assertArgFn(module,'module');}}catch(e){if(isArray(module)){module=module[module.length-1];}if(e.message&&e.stack&&e.stack.indexOf(e.message)===-1){// Safari & FF's stack traces don't contain error.message content
// unlike those of Chrome and IE
// So if stack doesn't contain message, we create a new string that contains both.
// Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
// eslint-disable-next-line no-ex-assign
e=e.message+'\n'+e.stack;}throw $injectorMinErr('modulerr','Failed to instantiate module {0} due to:\n{1}',module,e.stack||e.message||e);}});return runBlocks;}////////////////////////////////////
// internal Injector
////////////////////////////////////
function createInternalInjector(cache,factory){function getService(serviceName,caller){if(cache.hasOwnProperty(serviceName)){if(cache[serviceName]===INSTANTIATING){throw $injectorMinErr('cdep','Circular dependency found: {0}',serviceName+' <- '+path.join(' <- '));}return cache[serviceName];}else{try{path.unshift(serviceName);cache[serviceName]=INSTANTIATING;cache[serviceName]=factory(serviceName,caller);return cache[serviceName];}catch(err){if(cache[serviceName]===INSTANTIATING){delete cache[serviceName];}throw err;}finally{path.shift();}}}function injectionArgs(fn,locals,serviceName){var args=[],$inject=createInjector.$$annotate(fn,strictDi,serviceName);for(var i=0,length=$inject.length;i<length;i++){var key=$inject[i];if(typeof key!=='string'){throw $injectorMinErr('itkn','Incorrect injection token! Expected service name as string, got {0}',key);}args.push(locals&&locals.hasOwnProperty(key)?locals[key]:getService(key,serviceName));}return args;}function isClass(func){// Support: IE 9-11 only
// IE 9-11 do not support classes and IE9 leaks with the code below.
if(msie||typeof func!=='function'){return false;}var result=func.$$ngIsClass;if(!isBoolean(result)){// Support: Edge 12-13 only
// See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/6156135/
result=func.$$ngIsClass=/^(?:class\b|constructor\()/.test(stringifyFn(func));}return result;}function invoke(fn,self,locals,serviceName){if(typeof locals==='string'){serviceName=locals;locals=null;}var args=injectionArgs(fn,locals,serviceName);if(isArray(fn)){fn=fn[fn.length-1];}if(!isClass(fn)){// http://jsperf.com/angularjs-invoke-apply-vs-switch
// #5388
return fn.apply(self,args);}else{args.unshift(null);return new(Function.prototype.bind.apply(fn,args))();}}function instantiate(Type,locals,serviceName){// Check if Type is annotated and use just the given function at n-1 as parameter
// e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
var ctor=isArray(Type)?Type[Type.length-1]:Type;var args=injectionArgs(Type,locals,serviceName);// Empty object at position 0 is ignored for invocation with `new`, but required.
args.unshift(null);return new(Function.prototype.bind.apply(ctor,args))();}return{invoke:invoke,instantiate:instantiate,get:getService,annotate:createInjector.$$annotate,has:function(name){return providerCache.hasOwnProperty(name+providerSuffix)||cache.hasOwnProperty(name);}};}}createInjector.$$annotate=annotate;/**
 * @ngdoc provider
 * @name $anchorScrollProvider
 * @this
 *
 * @description
 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
 * {@link ng.$location#hash $location.hash()} changes.
 */function $AnchorScrollProvider(){var autoScrollingEnabled=true;/**
   * @ngdoc method
   * @name $anchorScrollProvider#disableAutoScrolling
   *
   * @description
   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
   * Use this method to disable automatic scrolling.
   *
   * If automatic scrolling is disabled, one must explicitly call
   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
   * current hash.
   */this.disableAutoScrolling=function(){autoScrollingEnabled=false;};/**
   * @ngdoc service
   * @name $anchorScroll
   * @kind function
   * @requires $window
   * @requires $location
   * @requires $rootScope
   *
   * @description
   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
   * in the
   * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document).
   *
   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
   * match any anchor whenever it changes. This can be disabled by calling
   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
   *
   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
   * vertical scroll-offset (either fixed or dynamic).
   *
   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
   *                       {@link ng.$location#hash $location.hash()} will be used.
   *
   * @property {(number|function|jqLite)} yOffset
   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
   * positioned elements at the top of the page, such as navbars, headers etc.
   *
   * `yOffset` can be specified in various ways:
   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
   *   a number representing the offset (in pixels).<br /><br />
   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
   *   the top of the page to the element's bottom will be used as offset.<br />
   *   **Note**: The element will be taken into account only as long as its `position` is set to
   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
   *   their height and/or positioning according to the viewport's size.
   *
   * <br />
   * <div class="alert alert-warning">
   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
   * not some child element.
   * </div>
   *
   * @example
     <example module="anchorScrollExample" name="anchor-scroll">
       <file name="index.html">
         <div id="scrollArea" ng-controller="ScrollController">
           <a ng-click="gotoBottom()">Go to bottom</a>
           <a id="bottom"></a> You're at the bottom!
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollExample', [])
           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
             function($scope, $location, $anchorScroll) {
               $scope.gotoBottom = function() {
                 // set the location.hash to the id of
                 // the element you wish to scroll to.
                 $location.hash('bottom');

                 // call $anchorScroll()
                 $anchorScroll();
               };
             }]);
       </file>
       <file name="style.css">
         #scrollArea {
           height: 280px;
           overflow: auto;
         }

         #bottom {
           display: block;
           margin-top: 2000px;
         }
       </file>
     </example>
   *
   * <hr />
   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
   *
   * @example
     <example module="anchorScrollOffsetExample" name="anchor-scroll-offset">
       <file name="index.html">
         <div class="fixed-header" ng-controller="headerCtrl">
           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
             Go to anchor {{x}}
           </a>
         </div>
         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
           Anchor {{x}} of 5
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollOffsetExample', [])
           .run(['$anchorScroll', function($anchorScroll) {
             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
           }])
           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
             function($anchorScroll, $location, $scope) {
               $scope.gotoAnchor = function(x) {
                 var newHash = 'anchor' + x;
                 if ($location.hash() !== newHash) {
                   // set the $location.hash to `newHash` and
                   // $anchorScroll will automatically scroll to it
                   $location.hash('anchor' + x);
                 } else {
                   // call $anchorScroll() explicitly,
                   // since $location.hash hasn't changed
                   $anchorScroll();
                 }
               };
             }
           ]);
       </file>
       <file name="style.css">
         body {
           padding-top: 50px;
         }

         .anchor {
           border: 2px dashed DarkOrchid;
           padding: 10px 10px 200px 10px;
         }

         .fixed-header {
           background-color: rgba(0, 0, 0, 0.2);
           height: 50px;
           position: fixed;
           top: 0; left: 0; right: 0;
         }

         .fixed-header > a {
           display: inline-block;
           margin: 5px 15px;
         }
       </file>
     </example>
   */this.$get=['$window','$location','$rootScope',function($window,$location,$rootScope){var document=$window.document;// Helper function to get first anchor from a NodeList
// (using `Array#some()` instead of `angular#forEach()` since it's more performant
//  and working in all supported browsers.)
function getFirstAnchor(list){var result=null;Array.prototype.some.call(list,function(element){if(nodeName_(element)==='a'){result=element;return true;}});return result;}function getYOffset(){var offset=scroll.yOffset;if(isFunction(offset)){offset=offset();}else if(isElement(offset)){var elem=offset[0];var style=$window.getComputedStyle(elem);if(style.position!=='fixed'){offset=0;}else{offset=elem.getBoundingClientRect().bottom;}}else if(!isNumber(offset)){offset=0;}return offset;}function scrollTo(elem){if(elem){elem.scrollIntoView();var offset=getYOffset();if(offset){// `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
// This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
// top of the viewport.
//
// IF the number of pixels from the top of `elem` to the end of the page's content is less
// than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
// way down the page.
//
// This is often the case for elements near the bottom of the page.
//
// In such cases we do not need to scroll the whole `offset` up, just the difference between
// the top of the element and the offset, which is enough to align the top of `elem` at the
// desired position.
var elemTop=elem.getBoundingClientRect().top;$window.scrollBy(0,elemTop-offset);}}else{$window.scrollTo(0,0);}}function scroll(hash){// Allow numeric hashes
hash=isString(hash)?hash:isNumber(hash)?hash.toString():$location.hash();var elm;// empty hash, scroll to the top of the page
if(!hash)scrollTo(null);// element with given id
else if(elm=document.getElementById(hash))scrollTo(elm);// first anchor with given name :-D
else if(elm=getFirstAnchor(document.getElementsByName(hash)))scrollTo(elm);// no element and hash === 'top', scroll to the top of the page
else if(hash==='top')scrollTo(null);}// does not scroll when user clicks on anchor link that is currently on
// (no url change, no $location.hash() change), browser native does scroll
if(autoScrollingEnabled){$rootScope.$watch(function autoScrollWatch(){return $location.hash();},function autoScrollWatchAction(newVal,oldVal){// skip the initial scroll if $location.hash is empty
if(newVal===oldVal&&newVal==='')return;jqLiteDocumentLoaded(function(){$rootScope.$evalAsync(scroll);});});}return scroll;}];}var $animateMinErr=minErr('$animate');var ELEMENT_NODE=1;var NG_ANIMATE_CLASSNAME='ng-animate';function mergeClasses(a,b){if(!a&&!b)return'';if(!a)return b;if(!b)return a;if(isArray(a))a=a.join(' ');if(isArray(b))b=b.join(' ');return a+' '+b;}function extractElementNode(element){for(var i=0;i<element.length;i++){var elm=element[i];if(elm.nodeType===ELEMENT_NODE){return elm;}}}function splitClasses(classes){if(isString(classes)){classes=classes.split(' ');}// Use createMap() to prevent class assumptions involving property names in
// Object.prototype
var obj=createMap();forEach(classes,function(klass){// sometimes the split leaves empty string values
// incase extra spaces were applied to the options
if(klass.length){obj[klass]=true;}});return obj;}// if any other type of options value besides an Object value is
// passed into the $animate.method() animation then this helper code
// will be run which will ignore it. While this patch is not the
// greatest solution to this, a lot of existing plugins depend on
// $animate to either call the callback (< 1.2) or return a promise
// that can be changed. This helper function ensures that the options
// are wiped clean incase a callback function is provided.
function prepareAnimateOptions(options){return isObject(options)?options:{};}var $$CoreAnimateJsProvider=/** @this */function(){this.$get=noop;};// this is prefixed with Core since it conflicts with
// the animateQueueProvider defined in ngAnimate/animateQueue.js
var $$CoreAnimateQueueProvider=/** @this */function(){var postDigestQueue=new NgMap();var postDigestElements=[];this.$get=['$$AnimateRunner','$rootScope',function($$AnimateRunner,$rootScope){return{enabled:noop,on:noop,off:noop,pin:noop,push:function(element,event,options,domOperation){if(domOperation){domOperation();}options=options||{};if(options.from){element.css(options.from);}if(options.to){element.css(options.to);}if(options.addClass||options.removeClass){addRemoveClassesPostDigest(element,options.addClass,options.removeClass);}var runner=new $$AnimateRunner();// since there are no animations to run the runner needs to be
// notified that the animation call is complete.
runner.complete();return runner;}};function updateData(data,classes,value){var changed=false;if(classes){classes=isString(classes)?classes.split(' '):isArray(classes)?classes:[];forEach(classes,function(className){if(className){changed=true;data[className]=value;}});}return changed;}function handleCSSClassChanges(){forEach(postDigestElements,function(element){var data=postDigestQueue.get(element);if(data){var existing=splitClasses(element.attr('class'));var toAdd='';var toRemove='';forEach(data,function(status,className){var hasClass=!!existing[className];if(status!==hasClass){if(status){toAdd+=(toAdd.length?' ':'')+className;}else{toRemove+=(toRemove.length?' ':'')+className;}}});forEach(element,function(elm){if(toAdd){jqLiteAddClass(elm,toAdd);}if(toRemove){jqLiteRemoveClass(elm,toRemove);}});postDigestQueue.delete(element);}});postDigestElements.length=0;}function addRemoveClassesPostDigest(element,add,remove){var data=postDigestQueue.get(element)||{};var classesAdded=updateData(data,add,true);var classesRemoved=updateData(data,remove,false);if(classesAdded||classesRemoved){postDigestQueue.set(element,data);postDigestElements.push(element);if(postDigestElements.length===1){$rootScope.$$postDigest(handleCSSClassChanges);}}}}];};/**
 * @ngdoc provider
 * @name $animateProvider
 *
 * @description
 * Default implementation of $animate that doesn't perform any animations, instead just
 * synchronously performs DOM updates and resolves the returned runner promise.
 *
 * In order to enable animations the `ngAnimate` module has to be loaded.
 *
 * To see the functional implementation check out `src/ngAnimate/animate.js`.
 */var $AnimateProvider=['$provide',/** @this */function($provide){var provider=this;var classNameFilter=null;var customFilter=null;this.$$registeredAnimations=Object.create(null);/**
   * @ngdoc method
   * @name $animateProvider#register
   *
   * @description
   * Registers a new injectable animation factory function. The factory function produces the
   * animation object which contains callback functions for each event that is expected to be
   * animated.
   *
   *   * `eventFn`: `function(element, ... , doneFunction, options)`
   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
   *   on the type of animation additional arguments will be injected into the animation function. The
   *   list below explains the function signatures for the different animation methods:
   *
   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
   *   - addClass: function(element, addedClasses, doneFunction, options)
   *   - removeClass: function(element, removedClasses, doneFunction, options)
   *   - enter, leave, move: function(element, doneFunction, options)
   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
   *
   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
   *
   * ```js
   *   return {
   *     //enter, leave, move signature
   *     eventFn : function(element, done, options) {
   *       //code to run the animation
   *       //once complete, then run done()
   *       return function endFunction(wasCancelled) {
   *         //code to cancel the animation
   *       }
   *     }
   *   }
   * ```
   *
   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
   * @param {Function} factory The factory function that will be executed to return the animation
   *                           object.
   */this.register=function(name,factory){if(name&&name.charAt(0)!=='.'){throw $animateMinErr('notcsel','Expecting class selector starting with \'.\' got \'{0}\'.',name);}var key=name+'-animation';provider.$$registeredAnimations[name.substr(1)]=key;$provide.factory(key,factory);};/**
   * @ngdoc method
   * @name $animateProvider#customFilter
   *
   * @description
   * Sets and/or returns the custom filter function that is used to "filter" animations, i.e.
   * determine if an animation is allowed or not. When no filter is specified (the default), no
   * animation will be blocked. Setting the `customFilter` value will only allow animations for
   * which the filter function's return value is truthy.
   *
   * This allows to easily create arbitrarily complex rules for filtering animations, such as
   * allowing specific events only, or enabling animations on specific subtrees of the DOM, etc.
   * Filtering animations can also boost performance for low-powered devices, as well as
   * applications containing a lot of structural operations.
   *
   * <div class="alert alert-success">
   *   **Best Practice:**
   *   Keep the filtering function as lean as possible, because it will be called for each DOM
   *   action (e.g. insertion, removal, class change) performed by "animation-aware" directives.
   *   See {@link guide/animations#which-directives-support-animations- here} for a list of built-in
   *   directives that support animations.
   *   Performing computationally expensive or time-consuming operations on each call of the
   *   filtering function can make your animations sluggish.
   * </div>
   *
   * **Note:** If present, `customFilter` will be checked before
   * {@link $animateProvider#classNameFilter classNameFilter}.
   *
   * @param {Function=} filterFn - The filter function which will be used to filter all animations.
   *   If a falsy value is returned, no animation will be performed. The function will be called
   *   with the following arguments:
   *   - **node** `{DOMElement}` - The DOM element to be animated.
   *   - **event** `{String}` - The name of the animation event (e.g. `enter`, `leave`, `addClass`
   *     etc).
   *   - **options** `{Object}` - A collection of options/styles used for the animation.
   * @return {Function} The current filter function or `null` if there is none set.
   */this.customFilter=function(filterFn){if(arguments.length===1){customFilter=isFunction(filterFn)?filterFn:null;}return customFilter;};/**
   * @ngdoc method
   * @name $animateProvider#classNameFilter
   *
   * @description
   * Sets and/or returns the CSS class regular expression that is checked when performing
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
   * When setting the `classNameFilter` value, animations will only be performed on elements
   * that successfully match the filter expression. This in turn can boost performance
   * for low-powered devices as well as applications containing a lot of structural operations.
   *
   * **Note:** If present, `classNameFilter` will be checked after
   * {@link $animateProvider#customFilter customFilter}. If `customFilter` is present and returns
   * false, `classNameFilter` will not be checked.
   *
   * @param {RegExp=} expression The className expression which will be checked against all animations
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
   */this.classNameFilter=function(expression){if(arguments.length===1){classNameFilter=expression instanceof RegExp?expression:null;if(classNameFilter){var reservedRegex=new RegExp('[(\\s|\\/)]'+NG_ANIMATE_CLASSNAME+'[(\\s|\\/)]');if(reservedRegex.test(classNameFilter.toString())){classNameFilter=null;throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',NG_ANIMATE_CLASSNAME);}}}return classNameFilter;};this.$get=['$$animateQueue',function($$animateQueue){function domInsert(element,parentElement,afterElement){// if for some reason the previous element was removed
// from the dom sometime before this code runs then let's
// just stick to using the parent element as the anchor
if(afterElement){var afterNode=extractElementNode(afterElement);if(afterNode&&!afterNode.parentNode&&!afterNode.previousElementSibling){afterElement=null;}}if(afterElement){afterElement.after(element);}else{parentElement.prepend(element);}}/**
     * @ngdoc service
     * @name $animate
     * @description The $animate service exposes a series of DOM utility methods that provide support
     * for animation hooks. The default behavior is the application of DOM operations, however,
     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
     * to ensure that animation runs with the triggered DOM operation.
     *
     * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't
     * included and only when it is active then the animation hooks that `$animate` triggers will be
     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
     *
     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
     *
     * To learn more about enabling animation support, click here to visit the
     * {@link ngAnimate ngAnimate module page}.
     */return{// we don't call it directly since non-existant arguments may
// be interpreted as null within the sub enabled function
/**
       *
       * @ngdoc method
       * @name $animate#on
       * @kind function
       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
       *    is fired with the following params:
       *
       * ```js
       * $animate.on('enter', container,
       *    function callback(element, phase) {
       *      // cool we detected an enter animation within the container
       *    }
       * );
       * ```
       *
       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
       *     as well as among its children
       * @param {Function} callback the callback function that will be fired when the listener is triggered
       *
       * The arguments present in the callback function are:
       * * `element` - The captured DOM element that the animation was fired on.
       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
       */on:$$animateQueue.on,/**
       *
       * @ngdoc method
       * @name $animate#off
       * @kind function
       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
       * can be used in three different ways depending on the arguments:
       *
       * ```js
       * // remove all the animation event listeners listening for `enter`
       * $animate.off('enter');
       *
       * // remove listeners for all animation events from the container element
       * $animate.off(container);
       *
       * // remove all the animation event listeners listening for `enter` on the given element and its children
       * $animate.off('enter', container);
       *
       * // remove the event listener function provided by `callback` that is set
       * // to listen for `enter` on the given `container` as well as its children
       * $animate.off('enter', container, callback);
       * ```
       *
       * @param {string|DOMElement} event|container the animation event (e.g. enter, leave, move,
       * addClass, removeClass, etc...), or the container element. If it is the element, all other
       * arguments are ignored.
       * @param {DOMElement=} container the container element the event listener was placed on
       * @param {Function=} callback the callback function that was registered as the listener
       */off:$$animateQueue.off,/**
       * @ngdoc method
       * @name $animate#pin
       * @kind function
       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
       *    element despite being outside the realm of the application or within another application. Say for example if the application
       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
       *
       *    Note that this feature is only active when the `ngAnimate` module is used.
       *
       * @param {DOMElement} element the external element that will be pinned
       * @param {DOMElement} parentElement the host parent element that will be associated with the external element
       */pin:$$animateQueue.pin,/**
       *
       * @ngdoc method
       * @name $animate#enabled
       * @kind function
       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
       * function can be called in four ways:
       *
       * ```js
       * // returns true or false
       * $animate.enabled();
       *
       * // changes the enabled state for all animations
       * $animate.enabled(false);
       * $animate.enabled(true);
       *
       * // returns true or false if animations are enabled for an element
       * $animate.enabled(element);
       *
       * // changes the enabled state for an element and its children
       * $animate.enabled(element, true);
       * $animate.enabled(element, false);
       * ```
       *
       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
       * @param {boolean=} enabled whether or not the animations will be enabled for the element
       *
       * @return {boolean} whether or not animations are enabled
       */enabled:$$animateQueue.enabled,/**
       * @ngdoc method
       * @name $animate#cancel
       * @kind function
       * @description Cancels the provided animation.
       *
       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
       */cancel:function(runner){if(runner.end){runner.end();}},/**
       *
       * @ngdoc method
       * @name $animate#enter
       * @kind function
       * @description Inserts the element into the DOM either after the `after` element (if provided) or
       *   as the first child within the `parent` element and then triggers an animation.
       *   A promise is returned that will be resolved during the next digest once the animation
       *   has completed.
       *
       * @param {DOMElement} element the element which will be inserted into the DOM
       * @param {DOMElement} parent the parent element which will append the element as
       *   a child (so long as the after element is not present)
       * @param {DOMElement=} after the sibling element after which the element will be appended
       * @param {object=} options an optional collection of options/styles that will be applied to the element.
       *   The object can have the following properties:
       *
       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
       *
       * @return {Promise} the animation callback promise
       */enter:function(element,parent,after,options){parent=parent&&jqLite(parent);after=after&&jqLite(after);parent=parent||after.parent();domInsert(element,parent,after);return $$animateQueue.push(element,'enter',prepareAnimateOptions(options));},/**
       *
       * @ngdoc method
       * @name $animate#move
       * @kind function
       * @description Inserts (moves) the element into its new position in the DOM either after
       *   the `after` element (if provided) or as the first child within the `parent` element
       *   and then triggers an animation. A promise is returned that will be resolved
       *   during the next digest once the animation has completed.
       *
       * @param {DOMElement} element the element which will be moved into the new DOM position
       * @param {DOMElement} parent the parent element which will append the element as
       *   a child (so long as the after element is not present)
       * @param {DOMElement=} after the sibling element after which the element will be appended
       * @param {object=} options an optional collection of options/styles that will be applied to the element.
       *   The object can have the following properties:
       *
       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
       *
       * @return {Promise} the animation callback promise
       */move:function(element,parent,after,options){parent=parent&&jqLite(parent);after=after&&jqLite(after);parent=parent||after.parent();domInsert(element,parent,after);return $$animateQueue.push(element,'move',prepareAnimateOptions(options));},/**
       * @ngdoc method
       * @name $animate#leave
       * @kind function
       * @description Triggers an animation and then removes the element from the DOM.
       * When the function is called a promise is returned that will be resolved during the next
       * digest once the animation has completed.
       *
       * @param {DOMElement} element the element which will be removed from the DOM
       * @param {object=} options an optional collection of options/styles that will be applied to the element.
       *   The object can have the following properties:
       *
       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
       *
       * @return {Promise} the animation callback promise
       */leave:function(element,options){return $$animateQueue.push(element,'leave',prepareAnimateOptions(options),function(){element.remove();});},/**
       * @ngdoc method
       * @name $animate#addClass
       * @kind function
       *
       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
       *   animation if element already contains the CSS class or if the class is removed at a later step.
       *   Note that class-based animations are treated differently compared to structural animations
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
       *   depending if CSS or JavaScript animations are used.
       *
       * @param {DOMElement} element the element which the CSS classes will be applied to
       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
       * @param {object=} options an optional collection of options/styles that will be applied to the element.
       *   The object can have the following properties:
       *
       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
       *
       * @return {Promise} the animation callback promise
       */addClass:function(element,className,options){options=prepareAnimateOptions(options);options.addClass=mergeClasses(options.addclass,className);return $$animateQueue.push(element,'addClass',options);},/**
       * @ngdoc method
       * @name $animate#removeClass
       * @kind function
       *
       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
       *   animation if element does not contain the CSS class or if the class is added at a later step.
       *   Note that class-based animations are treated differently compared to structural animations
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
       *   depending if CSS or JavaScript animations are used.
       *
       * @param {DOMElement} element the element which the CSS classes will be applied to
       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
       * @param {object=} options an optional collection of options/styles that will be applied to the element.
       *   The object can have the following properties:
       *
       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
       *
       * @return {Promise} the animation callback promise
       */removeClass:function(element,className,options){options=prepareAnimateOptions(options);options.removeClass=mergeClasses(options.removeClass,className);return $$animateQueue.push(element,'removeClass',options);},/**
       * @ngdoc method
       * @name $animate#setClass
       * @kind function
       *
       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
       *    passed. Note that class-based animations are treated differently compared to structural animations
       *    (like enter, move and leave) since the CSS classes may be added/removed at different points
       *    depending if CSS or JavaScript animations are used.
       *
       * @param {DOMElement} element the element which the CSS classes will be applied to
       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
       * @param {object=} options an optional collection of options/styles that will be applied to the element.
       *   The object can have the following properties:
       *
       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
       *
       * @return {Promise} the animation callback promise
       */setClass:function(element,add,remove,options){options=prepareAnimateOptions(options);options.addClass=mergeClasses(options.addClass,add);options.removeClass=mergeClasses(options.removeClass,remove);return $$animateQueue.push(element,'setClass',options);},/**
       * @ngdoc method
       * @name $animate#animate
       * @kind function
       *
       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
       * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take
       * on the provided styles. For example, if a transition animation is set for the given className, then the provided `from` and
       * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding
       * style in `to`, the style in `from` is applied immediately, and no animation is run.
       * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`
       * method (or as part of the `options` parameter):
       *
       * ```js
       * ngModule.animation('.my-inline-animation', function() {
       *   return {
       *     animate : function(element, from, to, done, options) {
       *       //animation
       *       done();
       *     }
       *   }
       * });
       * ```
       *
       * @param {DOMElement} element the element which the CSS styles will be applied to
       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
       *    (Note that if no animation is detected then this value will not be applied to the element.)
       * @param {object=} options an optional collection of options/styles that will be applied to the element.
       *   The object can have the following properties:
       *
       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
       *
       * @return {Promise} the animation callback promise
       */animate:function(element,from,to,className,options){options=prepareAnimateOptions(options);options.from=options.from?extend(options.from,from):from;options.to=options.to?extend(options.to,to):to;className=className||'ng-inline-animate';options.tempClasses=mergeClasses(options.tempClasses,className);return $$animateQueue.push(element,'animate',options);}};}];}];var $$AnimateAsyncRunFactoryProvider=/** @this */function(){this.$get=['$$rAF',function($$rAF){var waitQueue=[];function waitForTick(fn){waitQueue.push(fn);if(waitQueue.length>1)return;$$rAF(function(){for(var i=0;i<waitQueue.length;i++){waitQueue[i]();}waitQueue=[];});}return function(){var passed=false;waitForTick(function(){passed=true;});return function(callback){if(passed){callback();}else{waitForTick(callback);}};};}];};var $$AnimateRunnerFactoryProvider=/** @this */function(){this.$get=['$q','$sniffer','$$animateAsyncRun','$$isDocumentHidden','$timeout',function($q,$sniffer,$$animateAsyncRun,$$isDocumentHidden,$timeout){var INITIAL_STATE=0;var DONE_PENDING_STATE=1;var DONE_COMPLETE_STATE=2;AnimateRunner.chain=function(chain,callback){var index=0;next();function next(){if(index===chain.length){callback(true);return;}chain[index](function(response){if(response===false){callback(false);return;}index++;next();});}};AnimateRunner.all=function(runners,callback){var count=0;var status=true;forEach(runners,function(runner){runner.done(onProgress);});function onProgress(response){status=status&&response;if(++count===runners.length){callback(status);}}};function AnimateRunner(host){this.setHost(host);var rafTick=$$animateAsyncRun();var timeoutTick=function(fn){$timeout(fn,0,false);};this._doneCallbacks=[];this._tick=function(fn){if($$isDocumentHidden()){timeoutTick(fn);}else{rafTick(fn);}};this._state=0;}AnimateRunner.prototype={setHost:function(host){this.host=host||{};},done:function(fn){if(this._state===DONE_COMPLETE_STATE){fn();}else{this._doneCallbacks.push(fn);}},progress:noop,getPromise:function(){if(!this.promise){var self=this;this.promise=$q(function(resolve,reject){self.done(function(status){if(status===false){reject();}else{resolve();}});});}return this.promise;},then:function(resolveHandler,rejectHandler){return this.getPromise().then(resolveHandler,rejectHandler);},'catch':function(handler){return this.getPromise()['catch'](handler);},'finally':function(handler){return this.getPromise()['finally'](handler);},pause:function(){if(this.host.pause){this.host.pause();}},resume:function(){if(this.host.resume){this.host.resume();}},end:function(){if(this.host.end){this.host.end();}this._resolve(true);},cancel:function(){if(this.host.cancel){this.host.cancel();}this._resolve(false);},complete:function(response){var self=this;if(self._state===INITIAL_STATE){self._state=DONE_PENDING_STATE;self._tick(function(){self._resolve(response);});}},_resolve:function(response){if(this._state!==DONE_COMPLETE_STATE){forEach(this._doneCallbacks,function(fn){fn(response);});this._doneCallbacks.length=0;this._state=DONE_COMPLETE_STATE;}}};return AnimateRunner;}];};/* exported $CoreAnimateCssProvider *//**
 * @ngdoc service
 * @name $animateCss
 * @kind object
 * @this
 *
 * @description
 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
 * then the `$animateCss` service will actually perform animations.
 *
 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
 */var $CoreAnimateCssProvider=function(){this.$get=['$$rAF','$q','$$AnimateRunner',function($$rAF,$q,$$AnimateRunner){return function(element,initialOptions){// all of the animation functions should create
// a copy of the options data, however, if a
// parent service has already created a copy then
// we should stick to using that
var options=initialOptions||{};if(!options.$$prepared){options=copy(options);}// there is no point in applying the styles since
// there is no animation that goes on at all in
// this version of $animateCss.
if(options.cleanupStyles){options.from=options.to=null;}if(options.from){element.css(options.from);options.from=null;}var closed,runner=new $$AnimateRunner();return{start:run,end:run};function run(){$$rAF(function(){applyAnimationContents();if(!closed){runner.complete();}closed=true;});return runner;}function applyAnimationContents(){if(options.addClass){element.addClass(options.addClass);options.addClass=null;}if(options.removeClass){element.removeClass(options.removeClass);options.removeClass=null;}if(options.to){element.css(options.to);options.to=null;}}};}];};/* global stripHash: true *//**
 * ! This is a private undocumented service !
 *
 * @name $browser
 * @requires $log
 * @description
 * This object has two goals:
 *
 * - hide all the global state in the browser caused by the window object
 * - abstract away all the browser specific features and inconsistencies
 *
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
 * service, which can be used for convenient testing of the application without the interaction with
 * the real browser apis.
 *//**
 * @param {object} window The global window object.
 * @param {object} document jQuery wrapped document.
 * @param {object} $log window.console or an object with the same interface.
 * @param {object} $sniffer $sniffer service
 */function Browser(window,document,$log,$sniffer){var self=this,location=window.location,history=window.history,setTimeout=window.setTimeout,clearTimeout=window.clearTimeout,pendingDeferIds={};self.isMock=false;var outstandingRequestCount=0;var outstandingRequestCallbacks=[];// TODO(vojta): remove this temporary api
self.$$completeOutstandingRequest=completeOutstandingRequest;self.$$incOutstandingRequestCount=function(){outstandingRequestCount++;};/**
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
   */function completeOutstandingRequest(fn){try{fn.apply(null,sliceArgs(arguments,1));}finally{outstandingRequestCount--;if(outstandingRequestCount===0){while(outstandingRequestCallbacks.length){try{outstandingRequestCallbacks.pop()();}catch(e){$log.error(e);}}}}}function getHash(url){var index=url.indexOf('#');return index===-1?'':url.substr(index);}/**
   * @private
   * Note: this method is used only by scenario runner
   * TODO(vojta): prefix this method with $$ ?
   * @param {function()} callback Function that will be called when no outstanding request
   */self.notifyWhenNoOutstandingRequests=function(callback){if(outstandingRequestCount===0){callback();}else{outstandingRequestCallbacks.push(callback);}};//////////////////////////////////////////////////////////////
// URL API
//////////////////////////////////////////////////////////////
var cachedState,lastHistoryState,lastBrowserUrl=location.href,baseElement=document.find('base'),pendingLocation=null,getCurrentState=!$sniffer.history?noop:function getCurrentState(){try{return history.state;}catch(e){// MSIE can reportedly throw when there is no state (UNCONFIRMED).
}};cacheState();/**
   * @name $browser#url
   *
   * @description
   * GETTER:
   * Without any argument, this method just returns current value of location.href.
   *
   * SETTER:
   * With at least one argument, this method sets url to new value.
   * If html5 history api supported, pushState/replaceState is used, otherwise
   * location.href/location.replace is used.
   * Returns its own instance to allow chaining
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to change url.
   *
   * @param {string} url New url (when used as setter)
   * @param {boolean=} replace Should new url replace current history record?
   * @param {object=} state object to use with pushState/replaceState
   */self.url=function(url,replace,state){// In modern browsers `history.state` is `null` by default; treating it separately
// from `undefined` would cause `$browser.url('/foo')` to change `history.state`
// to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
if(isUndefined(state)){state=null;}// Android Browser BFCache causes location, history reference to become stale.
if(location!==window.location)location=window.location;if(history!==window.history)history=window.history;// setter
if(url){var sameState=lastHistoryState===state;// Don't change anything if previous and current URLs and states match. This also prevents
// IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
// See https://github.com/angular/angular.js/commit/ffb2701
if(lastBrowserUrl===url&&(!$sniffer.history||sameState)){return self;}var sameBase=lastBrowserUrl&&stripHash(lastBrowserUrl)===stripHash(url);lastBrowserUrl=url;lastHistoryState=state;// Don't use history API if only the hash changed
// due to a bug in IE10/IE11 which leads
// to not firing a `hashchange` nor `popstate` event
// in some cases (see #9143).
if($sniffer.history&&(!sameBase||!sameState)){history[replace?'replaceState':'pushState'](state,'',url);cacheState();}else{if(!sameBase){pendingLocation=url;}if(replace){location.replace(url);}else if(!sameBase){location.href=url;}else{location.hash=getHash(url);}if(location.href!==url){pendingLocation=url;}}if(pendingLocation){pendingLocation=url;}return self;// getter
}else{// - pendingLocation is needed as browsers don't allow to read out
//   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
//   https://openradar.appspot.com/22186109).
// - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
return pendingLocation||location.href.replace(/%27/g,'\'');}};/**
   * @name $browser#state
   *
   * @description
   * This method is a getter.
   *
   * Return history.state or null if history.state is undefined.
   *
   * @returns {object} state
   */self.state=function(){return cachedState;};var urlChangeListeners=[],urlChangeInit=false;function cacheStateAndFireUrlChange(){pendingLocation=null;fireStateOrUrlChange();}// This variable should be used *only* inside the cacheState function.
var lastCachedState=null;function cacheState(){// This should be the only place in $browser where `history.state` is read.
cachedState=getCurrentState();cachedState=isUndefined(cachedState)?null:cachedState;// Prevent callbacks fo fire twice if both hashchange & popstate were fired.
if(equals(cachedState,lastCachedState)){cachedState=lastCachedState;}lastCachedState=cachedState;lastHistoryState=cachedState;}function fireStateOrUrlChange(){var prevLastHistoryState=lastHistoryState;cacheState();if(lastBrowserUrl===self.url()&&prevLastHistoryState===cachedState){return;}lastBrowserUrl=self.url();lastHistoryState=cachedState;forEach(urlChangeListeners,function(listener){listener(self.url(),cachedState);});}/**
   * @name $browser#onUrlChange
   *
   * @description
   * Register callback function that will be called, when url changes.
   *
   * It's only called when the url is changed from outside of angular:
   * - user types different url into address bar
   * - user clicks on history (forward/back) button
   * - user clicks on a link
   *
   * It's not called when url is changed by $browser.url() method
   *
   * The listener gets called with new url as parameter.
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to monitor url changes in angular apps.
   *
   * @param {function(string)} listener Listener function to be called when url changes.
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
   */self.onUrlChange=function(callback){// TODO(vojta): refactor to use node's syntax for events
if(!urlChangeInit){// We listen on both (hashchange/popstate) when available, as some browsers don't
// fire popstate when user changes the address bar and don't fire hashchange when url
// changed by push/replaceState
// html5 history api - popstate event
if($sniffer.history)jqLite(window).on('popstate',cacheStateAndFireUrlChange);// hashchange event
jqLite(window).on('hashchange',cacheStateAndFireUrlChange);urlChangeInit=true;}urlChangeListeners.push(callback);return callback;};/**
   * @private
   * Remove popstate and hashchange handler from window.
   *
   * NOTE: this api is intended for use only by $rootScope.
   */self.$$applicationDestroyed=function(){jqLite(window).off('hashchange popstate',cacheStateAndFireUrlChange);};/**
   * Checks whether the url has changed outside of Angular.
   * Needs to be exported to be able to check for changes that have been done in sync,
   * as hashchange/popstate events fire in async.
   */self.$$checkUrlChange=fireStateOrUrlChange;//////////////////////////////////////////////////////////////
// Misc API
//////////////////////////////////////////////////////////////
/**
   * @name $browser#baseHref
   *
   * @description
   * Returns current <base href>
   * (always relative - without domain)
   *
   * @returns {string} The current base href
   */self.baseHref=function(){var href=baseElement.attr('href');return href?href.replace(/^(https?:)?\/\/[^/]*/,''):'';};/**
   * @name $browser#defer
   * @param {function()} fn A function, who's execution should be deferred.
   * @param {number=} [delay=0] of milliseconds to defer the function execution.
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
   *
   * @description
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
   *
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
   * via `$browser.defer.flush()`.
   *
   */self.defer=function(fn,delay){var timeoutId;outstandingRequestCount++;timeoutId=setTimeout(function(){delete pendingDeferIds[timeoutId];completeOutstandingRequest(fn);},delay||0);pendingDeferIds[timeoutId]=true;return timeoutId;};/**
   * @name $browser#defer.cancel
   *
   * @description
   * Cancels a deferred task identified with `deferId`.
   *
   * @param {*} deferId Token returned by the `$browser.defer` function.
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
   *                    canceled.
   */self.defer.cancel=function(deferId){if(pendingDeferIds[deferId]){delete pendingDeferIds[deferId];clearTimeout(deferId);completeOutstandingRequest(noop);return true;}return false;};}/** @this */function $BrowserProvider(){this.$get=['$window','$log','$sniffer','$document',function($window,$log,$sniffer,$document){return new Browser($window,$document,$log,$sniffer);}];}/**
 * @ngdoc service
 * @name $cacheFactory
 * @this
 *
 * @description
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
 * them.
 *
 * ```js
 *
 *  var cache = $cacheFactory('cacheId');
 *  expect($cacheFactory.get('cacheId')).toBe(cache);
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
 *
 *  cache.put("key", "value");
 *  cache.put("another key", "another value");
 *
 *  // We've specified no options on creation
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
 *
 * ```
 *
 *
 * @param {string} cacheId Name or id of the newly created cache.
 * @param {object=} options Options object that specifies the cache behavior. Properties:
 *
 *   - `{number=}` `capacity` — turns the cache into LRU cache.
 *
 * @returns {object} Newly created cache object with the following set of methods:
 *
 * - `{object}` `info()` — Returns id, size, and options of cache.
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
 *   it.
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
 * - `{void}` `removeAll()` — Removes all cached values.
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
 *
 * @example
   <example module="cacheExampleApp" name="cache-factory">
     <file name="index.html">
       <div ng-controller="CacheController">
         <input ng-model="newCacheKey" placeholder="Key">
         <input ng-model="newCacheValue" placeholder="Value">
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

         <p ng-if="keys.length">Cached Values</p>
         <div ng-repeat="key in keys">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="cache.get(key)"></b>
         </div>

         <p>Cache Info</p>
         <div ng-repeat="(key, value) in cache.info()">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="value"></b>
         </div>
       </div>
     </file>
     <file name="script.js">
       angular.module('cacheExampleApp', []).
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
           $scope.keys = [];
           $scope.cache = $cacheFactory('cacheId');
           $scope.put = function(key, value) {
             if (angular.isUndefined($scope.cache.get(key))) {
               $scope.keys.push(key);
             }
             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
           };
         }]);
     </file>
     <file name="style.css">
       p {
         margin: 10px 0 3px;
       }
     </file>
   </example>
 */function $CacheFactoryProvider(){this.$get=function(){var caches={};function cacheFactory(cacheId,options){if(cacheId in caches){throw minErr('$cacheFactory')('iid','CacheId \'{0}\' is already taken!',cacheId);}var size=0,stats=extend({},options,{id:cacheId}),data=createMap(),capacity=options&&options.capacity||Number.MAX_VALUE,lruHash=createMap(),freshEnd=null,staleEnd=null;/**
       * @ngdoc type
       * @name $cacheFactory.Cache
       *
       * @description
       * A cache object used to store and retrieve data, primarily used by
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
       * templates and other data.
       *
       * ```js
       *  angular.module('superCache')
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
       *      return $cacheFactory('super-cache');
       *    }]);
       * ```
       *
       * Example test:
       *
       * ```js
       *  it('should behave like a cache', inject(function(superCache) {
       *    superCache.put('key', 'value');
       *    superCache.put('another key', 'another value');
       *
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 2
       *    });
       *
       *    superCache.remove('another key');
       *    expect(superCache.get('another key')).toBeUndefined();
       *
       *    superCache.removeAll();
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 0
       *    });
       *  }));
       * ```
       */return caches[cacheId]={/**
         * @ngdoc method
         * @name $cacheFactory.Cache#put
         * @kind function
         *
         * @description
         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
         * retrieved later, and incrementing the size of the cache if the key was not already
         * present in the cache. If behaving like an LRU cache, it will also remove stale
         * entries from the set.
         *
         * It will not insert undefined values into the cache.
         *
         * @param {string} key the key under which the cached data is stored.
         * @param {*} value the value to store alongside the key. If it is undefined, the key
         *    will not be stored.
         * @returns {*} the value stored.
         */put:function(key,value){if(isUndefined(value))return;if(capacity<Number.MAX_VALUE){var lruEntry=lruHash[key]||(lruHash[key]={key:key});refresh(lruEntry);}if(!(key in data))size++;data[key]=value;if(size>capacity){this.remove(staleEnd.key);}return value;},/**
         * @ngdoc method
         * @name $cacheFactory.Cache#get
         * @kind function
         *
         * @description
         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the data to be retrieved
         * @returns {*} the value stored.
         */get:function(key){if(capacity<Number.MAX_VALUE){var lruEntry=lruHash[key];if(!lruEntry)return;refresh(lruEntry);}return data[key];},/**
         * @ngdoc method
         * @name $cacheFactory.Cache#remove
         * @kind function
         *
         * @description
         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the entry to be removed
         */remove:function(key){if(capacity<Number.MAX_VALUE){var lruEntry=lruHash[key];if(!lruEntry)return;if(lruEntry===freshEnd)freshEnd=lruEntry.p;if(lruEntry===staleEnd)staleEnd=lruEntry.n;link(lruEntry.n,lruEntry.p);delete lruHash[key];}if(!(key in data))return;delete data[key];size--;},/**
         * @ngdoc method
         * @name $cacheFactory.Cache#removeAll
         * @kind function
         *
         * @description
         * Clears the cache object of any entries.
         */removeAll:function(){data=createMap();size=0;lruHash=createMap();freshEnd=staleEnd=null;},/**
         * @ngdoc method
         * @name $cacheFactory.Cache#destroy
         * @kind function
         *
         * @description
         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
         * removing it from the {@link $cacheFactory $cacheFactory} set.
         */destroy:function(){data=null;stats=null;lruHash=null;delete caches[cacheId];},/**
         * @ngdoc method
         * @name $cacheFactory.Cache#info
         * @kind function
         *
         * @description
         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
         *
         * @returns {object} an object with the following properties:
         *   <ul>
         *     <li>**id**: the id of the cache instance</li>
         *     <li>**size**: the number of entries kept in the cache instance</li>
         *     <li>**...**: any additional properties from the options object when creating the
         *       cache.</li>
         *   </ul>
         */info:function(){return extend({},stats,{size:size});}};/**
       * makes the `entry` the freshEnd of the LRU linked list
       */function refresh(entry){if(entry!==freshEnd){if(!staleEnd){staleEnd=entry;}else if(staleEnd===entry){staleEnd=entry.n;}link(entry.n,entry.p);link(entry,freshEnd);freshEnd=entry;freshEnd.n=null;}}/**
       * bidirectionally links two entries of the LRU linked list
       */function link(nextEntry,prevEntry){if(nextEntry!==prevEntry){if(nextEntry)nextEntry.p=prevEntry;//p stands for previous, 'prev' didn't minify
if(prevEntry)prevEntry.n=nextEntry;//n stands for next, 'next' didn't minify
}}}/**
   * @ngdoc method
   * @name $cacheFactory#info
   *
   * @description
   * Get information about all the caches that have been created
   *
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
   */cacheFactory.info=function(){var info={};forEach(caches,function(cache,cacheId){info[cacheId]=cache.info();});return info;};/**
   * @ngdoc method
   * @name $cacheFactory#get
   *
   * @description
   * Get access to a cache object by the `cacheId` used when it was created.
   *
   * @param {string} cacheId Name or id of a cache to access.
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
   */cacheFactory.get=function(cacheId){return caches[cacheId];};return cacheFactory;};}/**
 * @ngdoc service
 * @name $templateCache
 * @this
 *
 * @description
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
 * can load templates directly into the cache in a `script` tag, or by consuming the
 * `$templateCache` service directly.
 *
 * Adding via the `script` tag:
 *
 * ```html
 *   <script type="text/ng-template" id="templateId.html">
 *     <p>This is the content of the template</p>
 *   </script>
 * ```
 *
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
 * element with ng-app attribute), otherwise the template will be ignored.
 *
 * Adding via the `$templateCache` service:
 *
 * ```js
 * var myApp = angular.module('myApp', []);
 * myApp.run(function($templateCache) {
 *   $templateCache.put('templateId.html', 'This is the content of the template');
 * });
 * ```
 *
 * To retrieve the template later, simply use it in your component:
 * ```js
 * myApp.component('myComponent', {
 *    templateUrl: 'templateId.html'
 * });
 * ```
 *
 * or get it via the `$templateCache` service:
 * ```js
 * $templateCache.get('templateId.html')
 * ```
 *
 * See {@link ng.$cacheFactory $cacheFactory}.
 *
 */function $TemplateCacheProvider(){this.$get=['$cacheFactory',function($cacheFactory){return $cacheFactory('templates');}];}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables like document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
 *
 * DOM-related variables:
 *
 * - "node" - DOM Node
 * - "element" - DOM Element or Node
 * - "$node" or "$element" - jqLite-wrapped node or element
 *
 *
 * Compiler related stuff:
 *
 * - "linkFn" - linking fn of a single directive
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
 *//**
 * @ngdoc service
 * @name $compile
 * @kind function
 *
 * @description
 * Compiles an HTML string or DOM into a template and produces a template function, which
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
 *
 * The compilation is a process of walking the DOM tree and matching DOM elements to
 * {@link ng.$compileProvider#directive directives}.
 *
 * <div class="alert alert-warning">
 * **Note:** This document is an in-depth reference of all directive options.
 * For a gentle introduction to directives with examples of common use cases,
 * see the {@link guide/directive directive guide}.
 * </div>
 *
 * ## Comprehensive Directive API
 *
 * There are many different options for a directive.
 *
 * The difference resides in the return value of the factory function.
 * You can either return a {@link $compile#directive-definition-object Directive Definition Object (see below)}
 * that defines the directive properties, or just the `postLink` function (all other properties will have
 * the default values).
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's recommended to use the "directive definition object" form.
 * </div>
 *
 * Here's an example directive declared with a Directive Definition Object:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       {@link $compile#-priority- priority}: 0,
 *       {@link $compile#-template- template}: '<div></div>', // or // function(tElement, tAttrs) { ... },
 *       // or
 *       // {@link $compile#-templateurl- templateUrl}: 'directive.html', // or // function(tElement, tAttrs) { ... },
 *       {@link $compile#-transclude- transclude}: false,
 *       {@link $compile#-restrict- restrict}: 'A',
 *       {@link $compile#-templatenamespace- templateNamespace}: 'html',
 *       {@link $compile#-scope- scope}: false,
 *       {@link $compile#-controller- controller}: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
 *       {@link $compile#-controlleras- controllerAs}: 'stringIdentifier',
 *       {@link $compile#-bindtocontroller- bindToController}: false,
 *       {@link $compile#-require- require}: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       {@link $compile#-multielement- multiElement}: false,
 *       {@link $compile#-compile- compile}: function compile(tElement, tAttrs, transclude) {
 *         return {
 *            {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },
 *            {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }
 *         }
 *         // or
 *         // return function postLink( ... ) { ... }
 *       },
 *       // or
 *       // {@link $compile#-link- link}: {
 *       //  {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },
 *       //  {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }
 *       // }
 *       // or
 *       // {@link $compile#-link- link}: function postLink( ... ) { ... }
 *     };
 *     return directiveDefinitionObject;
 *   });
 * ```
 *
 * <div class="alert alert-warning">
 * **Note:** Any unspecified options will use the default value. You can see the default values below.
 * </div>
 *
 * Therefore the above can be simplified as:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       link: function postLink(scope, iElement, iAttrs) { ... }
 *     };
 *     return directiveDefinitionObject;
 *     // or
 *     // return function postLink(scope, iElement, iAttrs) { ... }
 *   });
 * ```
 *
 * ### Life-cycle hooks
 * Directive controllers can provide the following methods that are called by Angular at points in the life-cycle of the
 * directive:
 * * `$onInit()` - Called on each controller after all the controllers on an element have been constructed and
 *   had their bindings initialized (and before the pre &amp; post linking functions for the directives on
 *   this element). This is a good place to put initialization code for your controller.
 * * `$onChanges(changesObj)` - Called whenever one-way (`<`) or interpolation (`@`) bindings are updated. The
 *   `changesObj` is a hash whose keys are the names of the bound properties that have changed, and the values are an
 *   object of the form `{ currentValue, previousValue, isFirstChange() }`. Use this hook to trigger updates within a
 *   component such as cloning the bound value to prevent accidental mutation of the outer value. Note that this will
 *   also be called when your bindings are initialized.
 * * `$doCheck()` - Called on each turn of the digest cycle. Provides an opportunity to detect and act on
 *   changes. Any actions that you wish to take in response to the changes that you detect must be
 *   invoked from this hook; implementing this has no effect on when `$onChanges` is called. For example, this hook
 *   could be useful if you wish to perform a deep equality check, or to check a Date object, changes to which would not
 *   be detected by Angular's change detector and thus not trigger `$onChanges`. This hook is invoked with no arguments;
 *   if detecting changes, you must store the previous value(s) for comparison to the current values.
 * * `$onDestroy()` - Called on a controller when its containing scope is destroyed. Use this hook for releasing
 *   external resources, watches and event handlers. Note that components have their `$onDestroy()` hooks called in
 *   the same order as the `$scope.$broadcast` events are triggered, which is top down. This means that parent
 *   components will have their `$onDestroy()` hook called before child components.
 * * `$postLink()` - Called after this controller's element and its children have been linked. Similar to the post-link
 *   function this hook can be used to set up DOM event handlers and do direct DOM manipulation.
 *   Note that child elements that contain `templateUrl` directives will not have been compiled and linked since
 *   they are waiting for their template to load asynchronously and their own compilation and linking has been
 *   suspended until that occurs.
 *
 * #### Comparison with Angular 2 life-cycle hooks
 * Angular 2 also uses life-cycle hooks for its components. While the Angular 1 life-cycle hooks are similar there are
 * some differences that you should be aware of, especially when it comes to moving your code from Angular 1 to Angular 2:
 *
 * * Angular 1 hooks are prefixed with `$`, such as `$onInit`. Angular 2 hooks are prefixed with `ng`, such as `ngOnInit`.
 * * Angular 1 hooks can be defined on the controller prototype or added to the controller inside its constructor.
 *   In Angular 2 you can only define hooks on the prototype of the Component class.
 * * Due to the differences in change-detection, you may get many more calls to `$doCheck` in Angular 1 than you would to
 *   `ngDoCheck` in Angular 2
 * * Changes to the model inside `$doCheck` will trigger new turns of the digest loop, which will cause the changes to be
 *   propagated throughout the application.
 *   Angular 2 does not allow the `ngDoCheck` hook to trigger a change outside of the component. It will either throw an
 *   error or do nothing depending upon the state of `enableProdMode()`.
 *
 * #### Life-cycle hook examples
 *
 * This example shows how you can check for mutations to a Date object even though the identity of the object
 * has not changed.
 *
 * <example name="doCheckDateExample" module="do-check-module">
 *   <file name="app.js">
 *     angular.module('do-check-module', [])
 *       .component('app', {
 *         template:
 *           'Month: <input ng-model="$ctrl.month" ng-change="$ctrl.updateDate()">' +
 *           'Date: {{ $ctrl.date }}' +
 *           '<test date="$ctrl.date"></test>',
 *         controller: function() {
 *           this.date = new Date();
 *           this.month = this.date.getMonth();
 *           this.updateDate = function() {
 *             this.date.setMonth(this.month);
 *           };
 *         }
 *       })
 *       .component('test', {
 *         bindings: { date: '<' },
 *         template:
 *           '<pre>{{ $ctrl.log | json }}</pre>',
 *         controller: function() {
 *           var previousValue;
 *           this.log = [];
 *           this.$doCheck = function() {
 *             var currentValue = this.date && this.date.valueOf();
 *             if (previousValue !== currentValue) {
 *               this.log.push('doCheck: date mutated: ' + this.date);
 *               previousValue = currentValue;
 *             }
 *           };
 *         }
 *       });
 *   </file>
 *   <file name="index.html">
 *     <app></app>
 *   </file>
 * </example>
 *
 * This example show how you might use `$doCheck` to trigger changes in your component's inputs even if the
 * actual identity of the component doesn't change. (Be aware that cloning and deep equality checks on large
 * arrays or objects can have a negative impact on your application performance)
 *
 * <example name="doCheckArrayExample" module="do-check-module">
 *   <file name="index.html">
 *     <div ng-init="items = []">
 *       <button ng-click="items.push(items.length)">Add Item</button>
 *       <button ng-click="items = []">Reset Items</button>
 *       <pre>{{ items }}</pre>
 *       <test items="items"></test>
 *     </div>
 *   </file>
 *   <file name="app.js">
 *      angular.module('do-check-module', [])
 *        .component('test', {
 *          bindings: { items: '<' },
 *          template:
 *            '<pre>{{ $ctrl.log | json }}</pre>',
 *          controller: function() {
 *            this.log = [];
 *
 *            this.$doCheck = function() {
 *              if (this.items_ref !== this.items) {
 *                this.log.push('doCheck: items changed');
 *                this.items_ref = this.items;
 *              }
 *              if (!angular.equals(this.items_clone, this.items)) {
 *                this.log.push('doCheck: items mutated');
 *                this.items_clone = angular.copy(this.items);
 *              }
 *            };
 *          }
 *        });
 *   </file>
 * </example>
 *
 *
 * ### Directive Definition Object
 *
 * The directive definition object provides instructions to the {@link ng.$compile
 * compiler}. The attributes are:
 *
 * #### `multiElement`
 * When this property is set to true (default is `false`), the HTML compiler will collect DOM nodes between
 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
 * together as the directive elements. It is recommended that this feature be used on directives
 * which are not strictly behavioral (such as {@link ngClick}), and which
 * do not manipulate or replace child nodes (such as {@link ngInclude}).
 *
 * #### `priority`
 * When there are multiple directives defined on a single DOM element, sometimes it
 * is necessary to specify the order in which the directives are applied. The `priority` is used
 * to sort the directives before their `compile` functions get called. Priority is defined as a
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
 * are also run in priority order, but post-link functions are run in reverse order. The order
 * of directives with the same priority is undefined. The default priority is `0`.
 *
 * #### `terminal`
 * If set to true then the current `priority` will be the last set of directives
 * which will execute (any directives at the current priority will still execute
 * as the order of execution on same `priority` is undefined). Note that expressions
 * and other directives used in the directive's template will also be excluded from execution.
 *
 * #### `scope`
 * The scope property can be `false`, `true`, or an object:
 *
 * * **`false` (default):** No scope will be created for the directive. The directive will use its
 * parent's scope.
 *
 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
 * the directive's element. If multiple directives on the same element request a new scope,
 * only one new scope is created.
 *
 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's template.
 * The 'isolate' scope differs from normal scope in that it does not prototypically
 * inherit from its parent scope. This is useful when creating reusable components, which should not
 * accidentally read or modify data in the parent scope. Note that an isolate scope
 * directive without a `template` or `templateUrl` will not apply the isolate scope
 * to its children elements.
 *
 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
 * directive's element. These local properties are useful for aliasing values for templates. The keys in
 * the object hash map to the name of the property on the isolate scope; the values define how the property
 * is bound to the parent scope, via matching attributes on the directive's element:
 *
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
 *   always a string since DOM attributes are strings. If no `attr` name is specified then the
 *   attribute name is assumed to be the same as the local name. Given `<my-component
 *   my-attr="hello {{name}}">` and the isolate scope definition `scope: { localName:'@myAttr' }`,
 *   the directive's scope property `localName` will reflect the interpolated value of `hello
 *   {{name}}`. As the `name` attribute changes so will the `localName` property on the directive's
 *   scope. The `name` is read from the parent scope (not the directive's scope).
 *
 * * `=` or `=attr` - set up a bidirectional binding between a local scope property and an expression
 *   passed via the attribute `attr`. The expression is evaluated in the context of the parent scope.
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the local
 *   name. Given `<my-component my-attr="parentModel">` and the isolate scope definition `scope: {
 *   localModel: '=myAttr' }`, the property `localModel` on the directive's scope will reflect the
 *   value of `parentModel` on the parent scope. Changes to `parentModel` will be reflected in
 *   `localModel` and vice versa. Optional attributes should be marked as such with a question mark:
 *   `=?` or `=?attr`. If the binding expression is non-assignable, or if the attribute isn't
 *   optional and doesn't exist, an exception ({@link error/$compile/nonassign `$compile:nonassign`})
 *   will be thrown upon discovering changes to the local value, since it will be impossible to sync
 *   them back to the parent scope. By default, the {@link ng.$rootScope.Scope#$watch `$watch`}
 *   method is used for tracking changes, and the equality check is based on object identity.
 *   However, if an object literal or an array literal is passed as the binding expression, the
 *   equality check is done by value (using the {@link angular.equals} function). It's also possible
 *   to watch the evaluated value shallowly with {@link ng.$rootScope.Scope#$watchCollection
 *   `$watchCollection`}: use `=*` or `=*attr` (`=*?` or `=*?attr` if the attribute is optional).
 *
  * * `<` or `<attr` - set up a one-way (one-directional) binding between a local scope property and an
 *   expression passed via the attribute `attr`. The expression is evaluated in the context of the
 *   parent scope. If no `attr` name is specified then the attribute name is assumed to be the same as the
 *   local name. You can also make the binding optional by adding `?`: `<?` or `<?attr`.
 *
 *   For example, given `<my-component my-attr="parentModel">` and directive definition of
 *   `scope: { localModel:'<myAttr' }`, then the isolated scope property `localModel` will reflect the
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
 *   in `localModel`, but changes in `localModel` will not reflect in `parentModel`. There are however
 *   two caveats:
 *     1. one-way binding does not copy the value from the parent to the isolate scope, it simply
 *     sets the same value. That means if your bound value is an object, changes to its properties
 *     in the isolated scope will be reflected in the parent scope (because both reference the same object).
 *     2. one-way binding watches changes to the **identity** of the parent value. That means the
 *     {@link ng.$rootScope.Scope#$watch `$watch`} on the parent value only fires if the reference
 *     to the value has changed. In most cases, this should not be of concern, but can be important
 *     to know if you one-way bind to an object, and then replace that object in the isolated scope.
 *     If you now change a property of the object in your parent scope, the change will not be
 *     propagated to the isolated scope, because the identity of the object on the parent scope
 *     has not changed. Instead you must assign a new object.
 *
 *   One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings
 *   back to the parent. However, it does not make this completely impossible.
 *
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope. If
 *   no `attr` name is specified then the attribute name is assumed to be the same as the local name.
 *   Given `<my-component my-attr="count = count + value">` and the isolate scope definition `scope: {
 *   localFn:'&myAttr' }`, the isolate scope property `localFn` will point to a function wrapper for
 *   the `count = count + value` expression. Often it's desirable to pass data from the isolated scope
 *   via an expression to the parent scope. This can be done by passing a map of local variable names
 *   and values into the expression wrapper fn. For example, if the expression is `increment(amount)`
 *   then we can specify the amount value by calling the `localFn` as `localFn({amount: 22})`.
 *
 * In general it's possible to apply more than one directive to one element, but there might be limitations
 * depending on the type of scope required by the directives. The following points will help explain these limitations.
 * For simplicity only two directives are taken into account, but it is also applicable for several directives:
 *
 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
 * * **child scope** + **no scope** =>  Both directives will share one single child scope
 * * **child scope** + **child scope** =>  Both directives will share one single child scope
 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
 * its parent's scope
 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
 * be applied to the same element.
 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
 * cannot be applied to the same element.
 *
 *
 * #### `bindToController`
 * This property is used to bind scope properties directly to the controller. It can be either
 * `true` or an object hash with the same format as the `scope` property.
 *
 * When an isolate scope is used for a directive (see above), `bindToController: true` will
 * allow a component to have its properties bound to the controller, rather than to scope.
 *
 * After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller
 * properties. You can access these bindings once they have been initialized by providing a controller method called
 * `$onInit`, which is called after all the controllers on an element have been constructed and had their bindings
 * initialized.
 *
 * <div class="alert alert-warning">
 * **Deprecation warning:** if `$compileProcvider.preAssignBindingsEnabled(true)` was called, bindings for non-ES6 class
 * controllers are bound to `this` before the controller constructor is called but this use is now deprecated. Please
 * place initialization code that relies upon bindings inside a `$onInit` method on the controller, instead.
 * </div>
 *
 * It is also possible to set `bindToController` to an object hash with the same format as the `scope` property.
 * This will set up the scope bindings to the controller directly. Note that `scope` can still be used
 * to define which kind of scope is created. By default, no scope is created. Use `scope: {}` to create an isolate
 * scope (useful for component directives).
 *
 * If both `bindToController` and `scope` are defined and have object hashes, `bindToController` overrides `scope`.
 *
 *
 * #### `controller`
 * Controller constructor function. The controller is instantiated before the
 * pre-linking phase and can be accessed by other directives (see
 * `require` attribute). This allows the directives to communicate with each other and augment
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
 *
 * * `$scope` - Current scope associated with the element
 * * `$element` - Current element
 * * `$attrs` - Current attributes object for the element
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
 *   `function([scope], cloneLinkingFn, futureParentElement, slotName)`:
 *    * `scope`: (optional) override the scope.
 *    * `cloneLinkingFn`: (optional) argument to create clones of the original transcluded content.
 *    * `futureParentElement` (optional):
 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
 *          and when the `cloneLinkingFn` is passed,
 *          as those elements need to created and cloned in a special way when they are defined outside their
 *          usual containers (e.g. like `<svg>`).
 *        * See also the `directive.templateNamespace` property.
 *    * `slotName`: (optional) the name of the slot to transclude. If falsy (e.g. `null`, `undefined` or `''`)
 *      then the default transclusion is provided.
 *    The `$transclude` function also has a method on it, `$transclude.isSlotFilled(slotName)`, which returns
 *    `true` if the specified slot contains content (i.e. one or more DOM nodes).
 *
 * #### `require`
 * Require another directive and inject its controller as the fourth argument to the linking function. The
 * `require` property can be a string, an array or an object:
 * * a **string** containing the name of the directive to pass to the linking function
 * * an **array** containing the names of directives to pass to the linking function. The argument passed to the
 * linking function will be an array of controllers in the same order as the names in the `require` property
 * * an **object** whose property values are the names of the directives to pass to the linking function. The argument
 * passed to the linking function will also be an object with matching keys, whose values will hold the corresponding
 * controllers.
 *
 * If the `require` property is an object and `bindToController` is truthy, then the required controllers are
 * bound to the controller using the keys of the `require` property. This binding occurs after all the controllers
 * have been constructed but before `$onInit` is called.
 * If the name of the required controller is the same as the local name (the key), the name can be
 * omitted. For example, `{parentDir: '^^'}` is equivalent to `{parentDir: '^^parentDir'}`.
 * See the {@link $compileProvider#component} helper for an example of how this can be used.
 * If no such required directive(s) can be found, or if the directive does not have a controller, then an error is
 * raised (unless no link function is specified and the required controllers are not being bound to the directive
 * controller, in which case error checking is skipped). The name can be prefixed with:
 *
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
 *   `null` to the `link` fn if not found.
 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
 *   `null` to the `link` fn if not found.
 *
 *
 * #### `controllerAs`
 * Identifier name for a reference to the controller in the directive's scope.
 * This allows the controller to be referenced from the directive template. This is especially
 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
 * `controllerAs` reference might overwrite a property that already exists on the parent scope.
 *
 *
 * #### `restrict`
 * String of subset of `EACM` which restricts the directive to a specific directive
 * declaration style. If omitted, the defaults (elements and attributes) are used.
 *
 * * `E` - Element name (default): `<my-directive></my-directive>`
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
 * * `C` - Class: `<div class="my-directive: exp;"></div>`
 * * `M` - Comment: `<!-- directive: my-directive exp -->`
 *
 *
 * #### `templateNamespace`
 * String representing the document type used by the markup in the template.
 * AngularJS needs this information as those elements need to be created and cloned
 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
 *
 * * `html` - All root nodes in the template are HTML. Root nodes may also be
 *   top-level elements such as `<svg>` or `<math>`.
 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
 *
 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
 *
 * #### `template`
 * HTML markup that may:
 * * Replace the contents of the directive's element (default).
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
 * * Wrap the contents of the directive's element (if `transclude` is true).
 *
 * Value may be:
 *
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
 *   function api below) and returns a string value.
 *
 *
 * #### `templateUrl`
 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
 *
 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
 * for later when the template has been resolved.  In the meantime it will continue to compile and link
 * sibling and parent elements as though this element had not contained any directives.
 *
 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
 * case when only one deeply nested directive has `templateUrl`.
 *
 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
 *
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
 * a string value representing the url.  In either case, the template URL is passed through {@link
 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
 *
 *
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
 * specify what the template should replace. Defaults to `false`.
 *
 * * `true` - the template will replace the directive's element.
 * * `false` - the template will replace the contents of the directive's element.
 *
 * The replacement process migrates all of the attributes / classes from the old element to the new
 * one. See the {@link guide/directive#template-expanding-directive
 * Directives Guide} for an example.
 *
 * There are very few scenarios where element replacement is required for the application function,
 * the main one being reusable custom components that are used within SVG contexts
 * (because SVG doesn't work with custom elements in the DOM tree).
 *
 * #### `transclude`
 * Extract the contents of the element where the directive appears and make it available to the directive.
 * The contents are compiled and provided to the directive as a **transclusion function**. See the
 * {@link $compile#transclusion Transclusion} section below.
 *
 *
 * #### `compile`
 *
 * ```js
 *   function compile(tElement, tAttrs, transclude) { ... }
 * ```
 *
 * The compile function deals with transforming the template DOM. Since most directives do not do
 * template transformation, it is not used often. The compile function takes the following arguments:
 *
 *   * `tElement` - template element - The element where the directive has been declared. It is
 *     safe to do template transformation on the element and child elements only.
 *
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
 *     between all directive compile functions.
 *
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
 *
 * <div class="alert alert-warning">
 * **Note:** The template instance and the link instance may be different objects if the template has
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
 * should be done in a linking function rather than in a compile function.
 * </div>

 * <div class="alert alert-warning">
 * **Note:** The compile function cannot handle directives that recursively use themselves in their
 * own templates or compile functions. Compiling these directives results in an infinite loop and
 * stack overflow errors.
 *
 * This can be avoided by manually using $compile in the postLink function to imperatively compile
 * a directive's template instead of relying on automatic template compilation via `template` or
 * `templateUrl` declaration or manual compilation inside the compile function.
 * </div>
 *
 * <div class="alert alert-danger">
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
 *   to the link function instead.
 * </div>

 * A compile function can have a return value which can be either a function or an object.
 *
 * * returning a (post-link) function - is equivalent to registering the linking function via the
 *   `link` property of the config object when the compile function is empty.
 *
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
 *   control when a linking function should be called during the linking phase. See info about
 *   pre-linking and post-linking functions below.
 *
 *
 * #### `link`
 * This property is used only if the `compile` property is not defined.
 *
 * ```js
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
 * ```
 *
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
 * executed after the template has been cloned. This is where most of the directive logic will be
 * put.
 *
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
 *
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
 *     manipulate the children of the element only in `postLink` function since the children have
 *     already been linked.
 *
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
 *     between all directive linking functions.
 *
 *   * `controller` - the directive's required controller instance(s) - Instances are shared
 *     among all directives, which allows the directives to use the controllers as a communication
 *     channel. The exact value depends on the directive's `require` property:
 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
 *       * `string`: the controller instance
 *       * `array`: array of controller instances
 *
 *     If a required controller cannot be found, and it is optional, the instance is `null`,
 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
 *
 *     Note that you can also require the directive's own controller - it will be made available like
 *     any other controller.
 *
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
 *     This is the same as the `$transclude` parameter of directive controllers,
 *     see {@link ng.$compile#-controller- the controller section for details}.
 *     `function([scope], cloneLinkingFn, futureParentElement)`.
 *
 * #### Pre-linking function
 *
 * Executed before the child elements are linked. Not safe to do DOM transformation since the
 * compiler linking function will fail to locate the correct elements for linking.
 *
 * #### Post-linking function
 *
 * Executed after the child elements are linked.
 *
 * Note that child elements that contain `templateUrl` directives will not have been compiled
 * and linked since they are waiting for their template to load asynchronously and their own
 * compilation and linking has been suspended until that occurs.
 *
 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
 * for their async templates to be resolved.
 *
 *
 * ### Transclusion
 *
 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
 * scope from where they were taken.
 *
 * Transclusion is used (often with {@link ngTransclude}) to insert the
 * original contents of a directive's element into a specified place in the template of the directive.
 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
 * content has access to the properties on the scope from which it was taken, even if the directive
 * has isolated scope.
 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
 *
 * This makes it possible for the widget to have private state for its template, while the transcluded
 * content has access to its originating scope.
 *
 * <div class="alert alert-warning">
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
 * Testing Transclusion Directives}.
 * </div>
 *
 * There are three kinds of transclusion depending upon whether you want to transclude just the contents of the
 * directive's element, the entire element or multiple parts of the element contents:
 *
 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
 * * `'element'` - transclude the whole of the directive's element including any directives on this
 *   element that defined at a lower priority than this directive. When used, the `template`
 *   property is ignored.
 * * **`{...}` (an object hash):** - map elements of the content onto transclusion "slots" in the template.
 *
 * **Mult-slot transclusion** is declared by providing an object for the `transclude` property.
 *
 * This object is a map where the keys are the name of the slot to fill and the value is an element selector
 * used to match the HTML to the slot. The element selector should be in normalized form (e.g. `myElement`)
 * and will match the standard element variants (e.g. `my-element`, `my:element`, `data-my-element`, etc).
 *
 * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
 *
 * If the element selector is prefixed with a `?` then that slot is optional.
 *
 * For example, the transclude object `{ slotA: '?myCustomElement' }` maps `<my-custom-element>` elements to
 * the `slotA` slot, which can be accessed via the `$transclude` function or via the {@link ngTransclude} directive.
 *
 * Slots that are not marked as optional (`?`) will trigger a compile time error if there are no matching elements
 * in the transclude content. If you wish to know if an optional slot was filled with content, then you can call
 * `$transclude.isSlotFilled(slotName)` on the transclude function passed to the directive's link function and
 * injectable into the directive's controller.
 *
 *
 * #### Transclusion Functions
 *
 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
 * function** to the directive's `link` function and `controller`. This transclusion function is a special
 * **linking function** that will return the compiled contents linked to a new transclusion scope.
 *
 * <div class="alert alert-info">
 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
 * ngTransclude will deal with it for us.
 * </div>
 *
 * If you want to manually control the insertion and removal of the transcluded content in your directive
 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
 *
 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
 * content and the `scope` is the newly created transclusion scope, which the clone will be linked to.
 *
 * <div class="alert alert-info">
 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a transclude function
 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
 * </div>
 *
 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
 * attach function**:
 *
 * ```js
 * var transcludedContent, transclusionScope;
 *
 * $transclude(function(clone, scope) {
 *   element.append(clone);
 *   transcludedContent = clone;
 *   transclusionScope = scope;
 * });
 * ```
 *
 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
 * associated transclusion scope:
 *
 * ```js
 * transcludedContent.remove();
 * transclusionScope.$destroy();
 * ```
 *
 * <div class="alert alert-info">
 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
 * then you are also responsible for calling `$destroy` on the transclusion scope.
 * </div>
 *
 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
 * automatically destroy their transcluded clones as necessary so you do not need to worry about this if
 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
 *
 *
 * #### Transclusion Scopes
 *
 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
 * was taken.
 *
 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
 * like this:
 *
 * ```html
 * <div ng-app>
 *   <div isolate>
 *     <div transclusion>
 *     </div>
 *   </div>
 * </div>
 * ```
 *
 * The `$parent` scope hierarchy will look like this:
 *
   ```
   - $rootScope
     - isolate
       - transclusion
   ```
 *
 * but the scopes will inherit prototypically from different scopes to their `$parent`.
 *
   ```
   - $rootScope
     - transclusion
   - isolate
   ```
 *
 *
 * ### Attributes
 *
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
 * `link()` or `compile()` functions. It has a variety of uses.
 *
 * * *Accessing normalized attribute names:* Directives like 'ngBind' can be expressed in many ways:
 *   'ng:bind', `data-ng-bind`, or 'x-ng-bind'. The attributes object allows for normalized access
 *   to the attributes.
 *
 * * *Directive inter-communication:* All directives share the same instance of the attributes
 *   object which allows the directives to use the attributes object as inter directive
 *   communication.
 *
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
 *   allowing other directives to read the interpolated value.
 *
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
 *   the only way to easily get the actual value because during the linking phase the interpolation
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
 *
 * ```js
 * function linkingFn(scope, elm, attrs, ctrl) {
 *   // get the attribute value
 *   console.log(attrs.ngModel);
 *
 *   // change the attribute
 *   attrs.$set('ngModel', 'new value');
 *
 *   // observe changes to interpolated attribute
 *   attrs.$observe('ngModel', function(value) {
 *     console.log('ngModel has changed value to ' + value);
 *   });
 * }
 * ```
 *
 * ## Example
 *
 * <div class="alert alert-warning">
 * **Note**: Typically directives are registered with `module.directive`. The example below is
 * to illustrate how `$compile` works.
 * </div>
 *
 <example module="compileExample" name="compile">
   <file name="index.html">
    <script>
      angular.module('compileExample', [], function($compileProvider) {
        // configure new 'compile' directive by passing a directive
        // factory function. The factory function injects the '$compile'
        $compileProvider.directive('compile', function($compile) {
          // directive factory creates a link function
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                 // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
              }
            );
          };
        });
      })
      .controller('GreeterController', ['$scope', function($scope) {
        $scope.name = 'Angular';
        $scope.html = 'Hello {{name}}';
      }]);
    </script>
    <div ng-controller="GreeterController">
      <input ng-model="name"> <br/>
      <textarea ng-model="html"></textarea> <br/>
      <div compile="html"></div>
    </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should auto compile', function() {
       var textarea = $('textarea');
       var output = $('div[compile]');
       // The initial state reads 'Hello Angular'.
       expect(output.getText()).toBe('Hello Angular');
       textarea.clear();
       textarea.sendKeys('{{name}}!');
       expect(output.getText()).toBe('Angular!');
     });
   </file>
 </example>

 *
 *
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
 *
 * <div class="alert alert-danger">
 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
 *   e.g. will not use the right outer scope. Please pass the transclude function as a
 *   `parentBoundTranscludeFn` to the link function instead.
 * </div>
 *
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
 *                 root element(s), not their children)
 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
 * (a DOM element/tree) to a scope. Where:
 *
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
 *
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
 *      * `scope` - is the current scope with which the linking function is working with.
 *
 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
 *  keys may be used to control linking behavior:
 *
 *      * `parentBoundTranscludeFn` - the transclude function made available to
 *        directives; if given, it will be passed through to the link functions of
 *        directives found in `element` during compilation.
 *      * `transcludeControllers` - an object hash with keys that map controller names
 *        to a hash with the key `instance`, which maps to the controller instance;
 *        if given, it will make the controllers available to directives on the compileNode:
 *        ```
 *        {
 *          parent: {
 *            instance: parentControllerInstance
 *          }
 *        }
 *        ```
 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
 *        the cloned elements; only needed for transcludes that are allowed to contain non html
 *        elements (e.g. SVG elements). See also the directive.controller property.
 *
 * Calling the linking function returns the element of the template. It is either the original
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
 *
 * After linking the view is not updated until after a call to $digest which typically is done by
 * Angular automatically.
 *
 * If you need access to the bound view, there are two ways to do it:
 *
 * - If you are not asking the linking function to clone the template, create the DOM element(s)
 *   before you send them to the compiler and keep this reference around.
 *   ```js
 *     var element = $compile('<p>{{total}}</p>')(scope);
 *   ```
 *
 * - if on the other hand, you need the element to be cloned, the view reference from the original
 *   example would not point to the clone, but rather to the original template that was cloned. In
 *   this case, you can access the clone via the cloneAttachFn:
 *   ```js
 *     var templateElement = angular.element('<p>{{total}}</p>'),
 *         scope = ....;
 *
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
 *       //attach the clone to DOM document at the right place
 *     });
 *
 *     //now we have reference to the cloned DOM via `clonedElement`
 *   ```
 *
 *
 * For information on how the compiler works, see the
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
 *
 * @knownIssue
 *
 * ### Double Compilation
 *
   Double compilation occurs when an already compiled part of the DOM gets
   compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues,
   and memory leaks. Refer to the Compiler Guide {@link guide/compiler#double-compilation-and-how-to-avoid-it
   section on double compilation} for an in-depth explanation and ways to avoid it.
 *
 */var $compileMinErr=minErr('$compile');function UNINITIALIZED_VALUE(){}var _UNINITIALIZED_VALUE=new UNINITIALIZED_VALUE();/**
 * @ngdoc provider
 * @name $compileProvider
 *
 * @description
 */$CompileProvider.$inject=['$provide','$$sanitizeUriProvider'];/** @this */function $CompileProvider($provide,$$sanitizeUriProvider){var hasDirectives={},Suffix='Directive',COMMENT_DIRECTIVE_REGEXP=/^\s*directive:\s*([\w-]+)\s+(.*)$/,CLASS_DIRECTIVE_REGEXP=/(([\w-]+)(?::([^;]+))?;?)/,ALL_OR_NOTHING_ATTRS=makeMap('ngSrc,ngSrcset,src,srcset'),REQUIRE_PREFIX_REGEXP=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/;// Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
// The assumption is that future DOM event attribute names will begin with
// 'on' and be composed of only English letters.
var EVENT_HANDLER_ATTR_REGEXP=/^(on[a-z]+|formaction)$/;var bindingCache=createMap();function parseIsolateBindings(scope,directiveName,isController){var LOCAL_REGEXP=/^\s*([@&<]|=(\*?))(\??)\s*([\w$]*)\s*$/;var bindings=createMap();forEach(scope,function(definition,scopeName){if(definition in bindingCache){bindings[scopeName]=bindingCache[definition];return;}var match=definition.match(LOCAL_REGEXP);if(!match){throw $compileMinErr('iscp','Invalid {3} for directive \'{0}\'.'+' Definition: {... {1}: \'{2}\' ...}',directiveName,scopeName,definition,isController?'controller bindings definition':'isolate scope definition');}bindings[scopeName]={mode:match[1][0],collection:match[2]==='*',optional:match[3]==='?',attrName:match[4]||scopeName};if(match[4]){bindingCache[definition]=bindings[scopeName];}});return bindings;}function parseDirectiveBindings(directive,directiveName){var bindings={isolateScope:null,bindToController:null};if(isObject(directive.scope)){if(directive.bindToController===true){bindings.bindToController=parseIsolateBindings(directive.scope,directiveName,true);bindings.isolateScope={};}else{bindings.isolateScope=parseIsolateBindings(directive.scope,directiveName,false);}}if(isObject(directive.bindToController)){bindings.bindToController=parseIsolateBindings(directive.bindToController,directiveName,true);}if(bindings.bindToController&&!directive.controller){// There is no controller
throw $compileMinErr('noctrl','Cannot bind to controller without directive \'{0}\'s controller.',directiveName);}return bindings;}function assertValidDirectiveName(name){var letter=name.charAt(0);if(!letter||letter!==lowercase(letter)){throw $compileMinErr('baddir','Directive/Component name \'{0}\' is invalid. The first character must be a lowercase letter',name);}if(name!==name.trim()){throw $compileMinErr('baddir','Directive/Component name \'{0}\' is invalid. The name should not contain leading or trailing whitespaces',name);}}function getDirectiveRequire(directive){var require=directive.require||directive.controller&&directive.name;if(!isArray(require)&&isObject(require)){forEach(require,function(value,key){var match=value.match(REQUIRE_PREFIX_REGEXP);var name=value.substring(match[0].length);if(!name)require[key]=match[0]+key;});}return require;}function getDirectiveRestrict(restrict,name){if(restrict&&!(isString(restrict)&&/[EACM]/.test(restrict))){throw $compileMinErr('badrestrict','Restrict property \'{0}\' of directive \'{1}\' is invalid',restrict,name);}return restrict||'EA';}/**
   * @ngdoc method
   * @name $compileProvider#directive
   * @kind function
   *
   * @description
   * Register a new directive with the compiler.
   *
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
   *    names and the values are the factories.
   * @param {Function|Array} directiveFactory An injectable directive factory function. See the
   *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.
   * @returns {ng.$compileProvider} Self for chaining.
   */this.directive=function registerDirective(name,directiveFactory){assertArg(name,'name');assertNotHasOwnProperty(name,'directive');if(isString(name)){assertValidDirectiveName(name);assertArg(directiveFactory,'directiveFactory');if(!hasDirectives.hasOwnProperty(name)){hasDirectives[name]=[];$provide.factory(name+Suffix,['$injector','$exceptionHandler',function($injector,$exceptionHandler){var directives=[];forEach(hasDirectives[name],function(directiveFactory,index){try{var directive=$injector.invoke(directiveFactory);if(isFunction(directive)){directive={compile:valueFn(directive)};}else if(!directive.compile&&directive.link){directive.compile=valueFn(directive.link);}directive.priority=directive.priority||0;directive.index=index;directive.name=directive.name||name;directive.require=getDirectiveRequire(directive);directive.restrict=getDirectiveRestrict(directive.restrict,name);directive.$$moduleName=directiveFactory.$$moduleName;directives.push(directive);}catch(e){$exceptionHandler(e);}});return directives;}]);}hasDirectives[name].push(directiveFactory);}else{forEach(name,reverseParams(registerDirective));}return this;};/**
   * @ngdoc method
   * @name $compileProvider#component
   * @module ng
   * @param {string|Object} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`),
   *    or an object map of components where the keys are the names and the values are the component definition objects.
   * @param {Object} options Component definition object (a simplified
   *    {@link ng.$compile#directive-definition-object directive definition object}),
   *    with the following properties (all optional):
   *
   *    - `controller` – `{(string|function()=}` – controller constructor function that should be
   *      associated with newly created scope or the name of a {@link ng.$compile#-controller-
   *      registered controller} if passed as a string. An empty `noop` function by default.
   *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.
   *      If present, the controller will be published to scope under the `controllerAs` name.
   *      If not present, this will default to be `$ctrl`.
   *    - `template` – `{string=|function()=}` – html template as a string or a function that
   *      returns an html template as a string which should be used as the contents of this component.
   *      Empty string by default.
   *
   *      If `template` is a function, then it is {@link auto.$injector#invoke injected} with
   *      the following locals:
   *
   *      - `$element` - Current element
   *      - `$attrs` - Current attributes object for the element
   *
   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
   *      template that should be used  as the contents of this component.
   *
   *      If `templateUrl` is a function, then it is {@link auto.$injector#invoke injected} with
   *      the following locals:
   *
   *      - `$element` - Current element
   *      - `$attrs` - Current attributes object for the element
   *
   *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.
   *      Component properties are always bound to the component controller and not to the scope.
   *      See {@link ng.$compile#-bindtocontroller- `bindToController`}.
   *    - `transclude` – `{boolean=}` – whether {@link $compile#transclusion content transclusion} is enabled.
   *      Disabled by default.
   *    - `require` - `{Object<string, string>=}` - requires the controllers of other directives and binds them to
   *      this component's controller. The object keys specify the property names under which the required
   *      controllers (object values) will be bound. See {@link ng.$compile#-require- `require`}.
   *    - `$...` – additional properties to attach to the directive factory function and the controller
   *      constructor function. (This is used by the component router to annotate)
   *
   * @returns {ng.$compileProvider} the compile provider itself, for chaining of function calls.
   * @description
   * Register a **component definition** with the compiler. This is a shorthand for registering a special
   * type of directive, which represents a self-contained UI component in your application. Such components
   * are always isolated (i.e. `scope: {}`) and are always restricted to elements (i.e. `restrict: 'E'`).
   *
   * Component definitions are very simple and do not require as much configuration as defining general
   * directives. Component definitions usually consist only of a template and a controller backing it.
   *
   * In order to make the definition easier, components enforce best practices like use of `controllerAs`,
   * `bindToController`. They always have **isolate scope** and are restricted to elements.
   *
   * Here are a few examples of how you would usually define components:
   *
   * ```js
   *   var myMod = angular.module(...);
   *   myMod.component('myComp', {
   *     template: '<div>My name is {{$ctrl.name}}</div>',
   *     controller: function() {
   *       this.name = 'shahar';
   *     }
   *   });
   *
   *   myMod.component('myComp', {
   *     template: '<div>My name is {{$ctrl.name}}</div>',
   *     bindings: {name: '@'}
   *   });
   *
   *   myMod.component('myComp', {
   *     templateUrl: 'views/my-comp.html',
   *     controller: 'MyCtrl',
   *     controllerAs: 'ctrl',
   *     bindings: {name: '@'}
   *   });
   *
   * ```
   * For more examples, and an in-depth guide, see the {@link guide/component component guide}.
   *
   * <br />
   * See also {@link ng.$compileProvider#directive $compileProvider.directive()}.
   */this.component=function registerComponent(name,options){if(!isString(name)){forEach(name,reverseParams(bind(this,registerComponent)));return this;}var controller=options.controller||function(){};function factory($injector){function makeInjectable(fn){if(isFunction(fn)||isArray(fn)){return(/** @this */function(tElement,tAttrs){return $injector.invoke(fn,this,{$element:tElement,$attrs:tAttrs});});}else{return fn;}}var template=!options.template&&!options.templateUrl?'':options.template;var ddo={controller:controller,controllerAs:identifierForController(options.controller)||options.controllerAs||'$ctrl',template:makeInjectable(template),templateUrl:makeInjectable(options.templateUrl),transclude:options.transclude,scope:{},bindToController:options.bindings||{},restrict:'E',require:options.require};// Copy annotations (starting with $) over to the DDO
forEach(options,function(val,key){if(key.charAt(0)==='$')ddo[key]=val;});return ddo;}// TODO(pete) remove the following `forEach` before we release 1.6.0
// The component-router@0.2.0 looks for the annotations on the controller constructor
// Nothing in Angular looks for annotations on the factory function but we can't remove
// it from 1.5.x yet.
// Copy any annotation properties (starting with $) over to the factory and controller constructor functions
// These could be used by libraries such as the new component router
forEach(options,function(val,key){if(key.charAt(0)==='$'){factory[key]=val;// Don't try to copy over annotations to named controller
if(isFunction(controller))controller[key]=val;}});factory.$inject=['$injector'];return this.directive(name,factory);};/**
   * @ngdoc method
   * @name $compileProvider#aHrefSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */this.aHrefSanitizationWhitelist=function(regexp){if(isDefined(regexp)){$$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);return this;}else{return $$sanitizeUriProvider.aHrefSanitizationWhitelist();}};/**
   * @ngdoc method
   * @name $compileProvider#imgSrcSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */this.imgSrcSanitizationWhitelist=function(regexp){if(isDefined(regexp)){$$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);return this;}else{return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();}};/**
   * @ngdoc method
   * @name  $compileProvider#debugInfoEnabled
   *
   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
   * current debugInfoEnabled state
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   *
   * @kind function
   *
   * @description
   * Call this method to enable/disable various debug runtime information in the compiler such as adding
   * binding information and a reference to the current scope on to DOM elements.
   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
   * * `ng-binding` CSS class
   * * `$binding` data property containing an array of the binding expressions
   *
   * You may want to disable this in production for a significant performance boost. See
   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
   *
   * The default value is true.
   */var debugInfoEnabled=true;this.debugInfoEnabled=function(enabled){if(isDefined(enabled)){debugInfoEnabled=enabled;return this;}return debugInfoEnabled;};/**
   * @ngdoc method
   * @name  $compileProvider#preAssignBindingsEnabled
   *
   * @param {boolean=} enabled update the preAssignBindingsEnabled state if provided, otherwise just return the
   * current preAssignBindingsEnabled state
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   *
   * @kind function
   *
   * @description
   * Call this method to enable/disable whether directive controllers are assigned bindings before
   * calling the controller's constructor.
   * If enabled (true), the compiler assigns the value of each of the bindings to the
   * properties of the controller object before the constructor of this object is called.
   *
   * If disabled (false), the compiler calls the constructor first before assigning bindings.
   *
   * The default value is false.
   *
   * @deprecated
   * sinceVersion="1.6.0"
   * removeVersion="1.7.0"
   *
   * This method and the option to assign the bindings before calling the controller's constructor
   * will be removed in v1.7.0.
   */var preAssignBindingsEnabled=false;this.preAssignBindingsEnabled=function(enabled){if(isDefined(enabled)){preAssignBindingsEnabled=enabled;return this;}return preAssignBindingsEnabled;};/**
   * @ngdoc method
   * @name  $compileProvider#strictComponentBindingsEnabled
   *
   * @param {boolean=} enabled update the strictComponentBindingsEnabled state if provided, otherwise just return the
   * current strictComponentBindingsEnabled state
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   *
   * @kind function
   *
   * @description
   * Call this method to enable/disable strict component bindings check. If enabled, the compiler will enforce that
   * for all bindings of a component that are not set as optional with `?`, an attribute needs to be provided
   * on the component's HTML tag.
   *
   * The default value is false.
   */var strictComponentBindingsEnabled=false;this.strictComponentBindingsEnabled=function(enabled){if(isDefined(enabled)){strictComponentBindingsEnabled=enabled;return this;}return strictComponentBindingsEnabled;};var TTL=10;/**
   * @ngdoc method
   * @name $compileProvider#onChangesTtl
   * @description
   *
   * Sets the number of times `$onChanges` hooks can trigger new changes before giving up and
   * assuming that the model is unstable.
   *
   * The current default is 10 iterations.
   *
   * In complex applications it's possible that dependencies between `$onChanges` hooks and bindings will result
   * in several iterations of calls to these hooks. However if an application needs more than the default 10
   * iterations to stabilize then you should investigate what is causing the model to continuously change during
   * the `$onChanges` hook execution.
   *
   * Increasing the TTL could have performance implications, so you should not change it without proper justification.
   *
   * @param {number} limit The number of `$onChanges` hook iterations.
   * @returns {number|object} the current limit (or `this` if called as a setter for chaining)
   */this.onChangesTtl=function(value){if(arguments.length){TTL=value;return this;}return TTL;};var commentDirectivesEnabledConfig=true;/**
   * @ngdoc method
   * @name $compileProvider#commentDirectivesEnabled
   * @description
   *
   * It indicates to the compiler
   * whether or not directives on comments should be compiled.
   * Defaults to `true`.
   *
   * Calling this function with false disables the compilation of directives
   * on comments for the whole application.
   * This results in a compilation performance gain,
   * as the compiler doesn't have to check comments when looking for directives.
   * This should however only be used if you are sure that no comment directives are used in
   * the application (including any 3rd party directives).
   *
   * @param {boolean} enabled `false` if the compiler may ignore directives on comments
   * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)
   */this.commentDirectivesEnabled=function(value){if(arguments.length){commentDirectivesEnabledConfig=value;return this;}return commentDirectivesEnabledConfig;};var cssClassDirectivesEnabledConfig=true;/**
   * @ngdoc method
   * @name $compileProvider#cssClassDirectivesEnabled
   * @description
   *
   * It indicates to the compiler
   * whether or not directives on element classes should be compiled.
   * Defaults to `true`.
   *
   * Calling this function with false disables the compilation of directives
   * on element classes for the whole application.
   * This results in a compilation performance gain,
   * as the compiler doesn't have to check element classes when looking for directives.
   * This should however only be used if you are sure that no class directives are used in
   * the application (including any 3rd party directives).
   *
   * @param {boolean} enabled `false` if the compiler may ignore directives on element classes
   * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)
   */this.cssClassDirectivesEnabled=function(value){if(arguments.length){cssClassDirectivesEnabledConfig=value;return this;}return cssClassDirectivesEnabledConfig;};this.$get=['$injector','$interpolate','$exceptionHandler','$templateRequest','$parse','$controller','$rootScope','$sce','$animate','$$sanitizeUri',function($injector,$interpolate,$exceptionHandler,$templateRequest,$parse,$controller,$rootScope,$sce,$animate,$$sanitizeUri){var SIMPLE_ATTR_NAME=/^\w/;var specialAttrHolder=window.document.createElement('div');var commentDirectivesEnabled=commentDirectivesEnabledConfig;var cssClassDirectivesEnabled=cssClassDirectivesEnabledConfig;var onChangesTtl=TTL;// The onChanges hooks should all be run together in a single digest
// When changes occur, the call to trigger their hooks will be added to this queue
var onChangesQueue;// This function is called in a $$postDigest to trigger all the onChanges hooks in a single digest
function flushOnChangesQueue(){try{if(! --onChangesTtl){// We have hit the TTL limit so reset everything
onChangesQueue=undefined;throw $compileMinErr('infchng','{0} $onChanges() iterations reached. Aborting!\n',TTL);}// We must run this hook in an apply since the $$postDigest runs outside apply
$rootScope.$apply(function(){var errors=[];for(var i=0,ii=onChangesQueue.length;i<ii;++i){try{onChangesQueue[i]();}catch(e){errors.push(e);}}// Reset the queue to trigger a new schedule next time there is a change
onChangesQueue=undefined;if(errors.length){throw errors;}});}finally{onChangesTtl++;}}function Attributes(element,attributesToCopy){if(attributesToCopy){var keys=Object.keys(attributesToCopy);var i,l,key;for(i=0,l=keys.length;i<l;i++){key=keys[i];this[key]=attributesToCopy[key];}}else{this.$attr={};}this.$$element=element;}Attributes.prototype={/**
       * @ngdoc method
       * @name $compile.directive.Attributes#$normalize
       * @kind function
       *
       * @description
       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
       * `data-`) to its normalized, camelCase form.
       *
       * Also there is special case for Moz prefix starting with upper case letter.
       *
       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
       *
       * @param {string} name Name to normalize
       */$normalize:directiveNormalize,/**
       * @ngdoc method
       * @name $compile.directive.Attributes#$addClass
       * @kind function
       *
       * @description
       * Adds the CSS class value specified by the classVal parameter to the element. If animations
       * are enabled then an animation will be triggered for the class addition.
       *
       * @param {string} classVal The className value that will be added to the element
       */$addClass:function(classVal){if(classVal&&classVal.length>0){$animate.addClass(this.$$element,classVal);}},/**
       * @ngdoc method
       * @name $compile.directive.Attributes#$removeClass
       * @kind function
       *
       * @description
       * Removes the CSS class value specified by the classVal parameter from the element. If
       * animations are enabled then an animation will be triggered for the class removal.
       *
       * @param {string} classVal The className value that will be removed from the element
       */$removeClass:function(classVal){if(classVal&&classVal.length>0){$animate.removeClass(this.$$element,classVal);}},/**
       * @ngdoc method
       * @name $compile.directive.Attributes#$updateClass
       * @kind function
       *
       * @description
       * Adds and removes the appropriate CSS class values to the element based on the difference
       * between the new and old CSS class values (specified as newClasses and oldClasses).
       *
       * @param {string} newClasses The current CSS className value
       * @param {string} oldClasses The former CSS className value
       */$updateClass:function(newClasses,oldClasses){var toAdd=tokenDifference(newClasses,oldClasses);if(toAdd&&toAdd.length){$animate.addClass(this.$$element,toAdd);}var toRemove=tokenDifference(oldClasses,newClasses);if(toRemove&&toRemove.length){$animate.removeClass(this.$$element,toRemove);}},/**
       * Set a normalized attribute on the element in a way such that all directives
       * can share the attribute. This function properly handles boolean attributes.
       * @param {string} key Normalized key. (ie ngAttribute)
       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
       *     Defaults to true.
       * @param {string=} attrName Optional none normalized name. Defaults to key.
       */$set:function(key,value,writeAttr,attrName){// TODO: decide whether or not to throw an error if "class"
//is set through this function since it may cause $updateClass to
//become unstable.
var node=this.$$element[0],booleanKey=getBooleanAttrName(node,key),aliasedKey=getAliasedAttrName(key),observer=key,nodeName;if(booleanKey){this.$$element.prop(key,value);attrName=booleanKey;}else if(aliasedKey){this[aliasedKey]=value;observer=aliasedKey;}this[key]=value;// translate normalized key to actual key
if(attrName){this.$attr[key]=attrName;}else{attrName=this.$attr[key];if(!attrName){this.$attr[key]=attrName=snake_case(key,'-');}}nodeName=nodeName_(this.$$element);if(nodeName==='a'&&(key==='href'||key==='xlinkHref')||nodeName==='img'&&key==='src'){// sanitize a[href] and img[src] values
this[key]=value=$$sanitizeUri(value,key==='src');}else if(nodeName==='img'&&key==='srcset'&&isDefined(value)){// sanitize img[srcset] values
var result='';// first check if there are spaces because it's not the same pattern
var trimmedSrcset=trim(value);//                (   999x   ,|   999w   ,|   ,|,   )
var srcPattern=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;var pattern=/\s/.test(trimmedSrcset)?srcPattern:/(,)/;// split srcset into tuple of uri and descriptor except for the last item
var rawUris=trimmedSrcset.split(pattern);// for each tuples
var nbrUrisWith2parts=Math.floor(rawUris.length/2);for(var i=0;i<nbrUrisWith2parts;i++){var innerIdx=i*2;// sanitize the uri
result+=$$sanitizeUri(trim(rawUris[innerIdx]),true);// add the descriptor
result+=' '+trim(rawUris[innerIdx+1]);}// split the last item into uri and descriptor
var lastTuple=trim(rawUris[i*2]).split(/\s/);// sanitize the last uri
result+=$$sanitizeUri(trim(lastTuple[0]),true);// and add the last descriptor if any
if(lastTuple.length===2){result+=' '+trim(lastTuple[1]);}this[key]=value=result;}if(writeAttr!==false){if(value===null||isUndefined(value)){this.$$element.removeAttr(attrName);}else{if(SIMPLE_ATTR_NAME.test(attrName)){this.$$element.attr(attrName,value);}else{setSpecialAttr(this.$$element[0],attrName,value);}}}// fire observers
var $$observers=this.$$observers;if($$observers){forEach($$observers[observer],function(fn){try{fn(value);}catch(e){$exceptionHandler(e);}});}},/**
       * @ngdoc method
       * @name $compile.directive.Attributes#$observe
       * @kind function
       *
       * @description
       * Observes an interpolated attribute.
       *
       * The observer function will be invoked once during the next `$digest` following
       * compilation. The observer is then invoked whenever the interpolated value
       * changes.
       *
       * @param {string} key Normalized key. (ie ngAttribute) .
       * @param {function(interpolatedValue)} fn Function that will be called whenever
                the interpolated value of the attribute changes.
       *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation
       *        guide} for more info.
       * @returns {function()} Returns a deregistration function for this observer.
       */$observe:function(key,fn){var attrs=this,$$observers=attrs.$$observers||(attrs.$$observers=createMap()),listeners=$$observers[key]||($$observers[key]=[]);listeners.push(fn);$rootScope.$evalAsync(function(){if(!listeners.$$inter&&attrs.hasOwnProperty(key)&&!isUndefined(attrs[key])){// no one registered attribute interpolation function, so lets call it manually
fn(attrs[key]);}});return function(){arrayRemove(listeners,fn);};}};function setSpecialAttr(element,attrName,value){// Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`
// so we have to jump through some hoops to get such an attribute
// https://github.com/angular/angular.js/pull/13318
specialAttrHolder.innerHTML='<span '+attrName+'>';var attributes=specialAttrHolder.firstChild.attributes;var attribute=attributes[0];// We have to remove the attribute from its container element before we can add it to the destination element
attributes.removeNamedItem(attribute.name);attribute.value=value;element.attributes.setNamedItem(attribute);}function safeAddClass($element,className){try{$element.addClass(className);}catch(e){// ignore, since it means that we are trying to set class on
// SVG element, where class name is read-only.
}}var startSymbol=$interpolate.startSymbol(),endSymbol=$interpolate.endSymbol(),denormalizeTemplate=startSymbol==='{{'&&endSymbol==='}}'?identity:function denormalizeTemplate(template){return template.replace(/\{\{/g,startSymbol).replace(/}}/g,endSymbol);},NG_ATTR_BINDING=/^ngAttr[A-Z]/;var MULTI_ELEMENT_DIR_RE=/^(.+)Start$/;compile.$$addBindingInfo=debugInfoEnabled?function $$addBindingInfo($element,binding){var bindings=$element.data('$binding')||[];if(isArray(binding)){bindings=bindings.concat(binding);}else{bindings.push(binding);}$element.data('$binding',bindings);}:noop;compile.$$addBindingClass=debugInfoEnabled?function $$addBindingClass($element){safeAddClass($element,'ng-binding');}:noop;compile.$$addScopeInfo=debugInfoEnabled?function $$addScopeInfo($element,scope,isolated,noTemplate){var dataName=isolated?noTemplate?'$isolateScopeNoTemplate':'$isolateScope':'$scope';$element.data(dataName,scope);}:noop;compile.$$addScopeClass=debugInfoEnabled?function $$addScopeClass($element,isolated){safeAddClass($element,isolated?'ng-isolate-scope':'ng-scope');}:noop;compile.$$createComment=function(directiveName,comment){var content='';if(debugInfoEnabled){content=' '+(directiveName||'')+': ';if(comment)content+=comment+' ';}return window.document.createComment(content);};return compile;//================================
function compile($compileNodes,transcludeFn,maxPriority,ignoreDirective,previousCompileContext){if(!($compileNodes instanceof jqLite)){// jquery always rewraps, whereas we need to preserve the original selector so that we can
// modify it.
$compileNodes=jqLite($compileNodes);}var compositeLinkFn=compileNodes($compileNodes,transcludeFn,$compileNodes,maxPriority,ignoreDirective,previousCompileContext);compile.$$addScopeClass($compileNodes);var namespace=null;return function publicLinkFn(scope,cloneConnectFn,options){if(!$compileNodes){throw $compileMinErr('multilink','This element has already been linked.');}assertArg(scope,'scope');if(previousCompileContext&&previousCompileContext.needsNewScope){// A parent directive did a replace and a directive on this element asked
// for transclusion, which caused us to lose a layer of element on which
// we could hold the new transclusion scope, so we will create it manually
// here.
scope=scope.$parent.$new();}options=options||{};var parentBoundTranscludeFn=options.parentBoundTranscludeFn,transcludeControllers=options.transcludeControllers,futureParentElement=options.futureParentElement;// When `parentBoundTranscludeFn` is passed, it is a
// `controllersBoundTransclude` function (it was previously passed
// as `transclude` to directive.link) so we must unwrap it to get
// its `boundTranscludeFn`
if(parentBoundTranscludeFn&&parentBoundTranscludeFn.$$boundTransclude){parentBoundTranscludeFn=parentBoundTranscludeFn.$$boundTransclude;}if(!namespace){namespace=detectNamespaceForChildElements(futureParentElement);}var $linkNode;if(namespace!=='html'){// When using a directive with replace:true and templateUrl the $compileNodes
// (or a child element inside of them)
// might change, so we need to recreate the namespace adapted compileNodes
// for call to the link function.
// Note: This will already clone the nodes...
$linkNode=jqLite(wrapTemplate(namespace,jqLite('<div>').append($compileNodes).html()));}else if(cloneConnectFn){// important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
// and sometimes changes the structure of the DOM.
$linkNode=JQLitePrototype.clone.call($compileNodes);}else{$linkNode=$compileNodes;}if(transcludeControllers){for(var controllerName in transcludeControllers){$linkNode.data('$'+controllerName+'Controller',transcludeControllers[controllerName].instance);}}compile.$$addScopeInfo($linkNode,scope);if(cloneConnectFn)cloneConnectFn($linkNode,scope);if(compositeLinkFn)compositeLinkFn(scope,$linkNode,$linkNode,parentBoundTranscludeFn);if(!cloneConnectFn){$compileNodes=compositeLinkFn=null;}return $linkNode;};}function detectNamespaceForChildElements(parentElement){// TODO: Make this detect MathML as well...
var node=parentElement&&parentElement[0];if(!node){return'html';}else{return nodeName_(node)!=='foreignobject'&&toString.call(node).match(/SVG/)?'svg':'html';}}/**
     * Compile function matches each node in nodeList against the directives. Once all directives
     * for a particular node are collected their compile functions are executed. The compile
     * functions return values - the linking functions - are combined into a composite linking
     * function, which is the a linking function for the node.
     *
     * @param {NodeList} nodeList an array of nodes or NodeList to compile
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *        scope argument is auto-generated to the new child of the transcluded parent scope.
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
     *        the rootElement must be set the jqLite collection of the compile root. This is
     *        needed so that the jqLite collection items can be replaced with widgets.
     * @param {number=} maxPriority Max directive priority.
     * @returns {Function} A composite linking function of all of the matched directives or null.
     */function compileNodes(nodeList,transcludeFn,$rootElement,maxPriority,ignoreDirective,previousCompileContext){var linkFns=[],// `nodeList` can be either an element's `.childNodes` (live NodeList)
// or a jqLite/jQuery collection or an array
notLiveList=isArray(nodeList)||nodeList instanceof jqLite,attrs,directives,nodeLinkFn,childNodes,childLinkFn,linkFnFound,nodeLinkFnFound;for(var i=0;i<nodeList.length;i++){attrs=new Attributes();// Support: IE 11 only
// Workaround for #11781 and #14924
if(msie===11){mergeConsecutiveTextNodes(nodeList,i,notLiveList);}// We must always refer to `nodeList[i]` hereafter,
// since the nodes can be replaced underneath us.
directives=collectDirectives(nodeList[i],[],attrs,i===0?maxPriority:undefined,ignoreDirective);nodeLinkFn=directives.length?applyDirectivesToNode(directives,nodeList[i],attrs,transcludeFn,$rootElement,null,[],[],previousCompileContext):null;if(nodeLinkFn&&nodeLinkFn.scope){compile.$$addScopeClass(attrs.$$element);}childLinkFn=nodeLinkFn&&nodeLinkFn.terminal||!(childNodes=nodeList[i].childNodes)||!childNodes.length?null:compileNodes(childNodes,nodeLinkFn?(nodeLinkFn.transcludeOnThisElement||!nodeLinkFn.templateOnThisElement)&&nodeLinkFn.transclude:transcludeFn);if(nodeLinkFn||childLinkFn){linkFns.push(i,nodeLinkFn,childLinkFn);linkFnFound=true;nodeLinkFnFound=nodeLinkFnFound||nodeLinkFn;}//use the previous context only for the first element in the virtual group
previousCompileContext=null;}// return a linking function if we have found anything, null otherwise
return linkFnFound?compositeLinkFn:null;function compositeLinkFn(scope,nodeList,$rootElement,parentBoundTranscludeFn){var nodeLinkFn,childLinkFn,node,childScope,i,ii,idx,childBoundTranscludeFn;var stableNodeList;if(nodeLinkFnFound){// copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
// offsets don't get screwed up
var nodeListLength=nodeList.length;stableNodeList=new Array(nodeListLength);// create a sparse array by only copying the elements which have a linkFn
for(i=0;i<linkFns.length;i+=3){idx=linkFns[i];stableNodeList[idx]=nodeList[idx];}}else{stableNodeList=nodeList;}for(i=0,ii=linkFns.length;i<ii;){node=stableNodeList[linkFns[i++]];nodeLinkFn=linkFns[i++];childLinkFn=linkFns[i++];if(nodeLinkFn){if(nodeLinkFn.scope){childScope=scope.$new();compile.$$addScopeInfo(jqLite(node),childScope);}else{childScope=scope;}if(nodeLinkFn.transcludeOnThisElement){childBoundTranscludeFn=createBoundTranscludeFn(scope,nodeLinkFn.transclude,parentBoundTranscludeFn);}else if(!nodeLinkFn.templateOnThisElement&&parentBoundTranscludeFn){childBoundTranscludeFn=parentBoundTranscludeFn;}else if(!parentBoundTranscludeFn&&transcludeFn){childBoundTranscludeFn=createBoundTranscludeFn(scope,transcludeFn);}else{childBoundTranscludeFn=null;}nodeLinkFn(childLinkFn,childScope,node,$rootElement,childBoundTranscludeFn);}else if(childLinkFn){childLinkFn(scope,node.childNodes,undefined,parentBoundTranscludeFn);}}}}function mergeConsecutiveTextNodes(nodeList,idx,notLiveList){var node=nodeList[idx];var parent=node.parentNode;var sibling;if(node.nodeType!==NODE_TYPE_TEXT){return;}while(true){sibling=parent?node.nextSibling:nodeList[idx+1];if(!sibling||sibling.nodeType!==NODE_TYPE_TEXT){break;}node.nodeValue=node.nodeValue+sibling.nodeValue;if(sibling.parentNode){sibling.parentNode.removeChild(sibling);}if(notLiveList&&sibling===nodeList[idx+1]){nodeList.splice(idx+1,1);}}}function createBoundTranscludeFn(scope,transcludeFn,previousBoundTranscludeFn){function boundTranscludeFn(transcludedScope,cloneFn,controllers,futureParentElement,containingScope){if(!transcludedScope){transcludedScope=scope.$new(false,containingScope);transcludedScope.$$transcluded=true;}return transcludeFn(transcludedScope,cloneFn,{parentBoundTranscludeFn:previousBoundTranscludeFn,transcludeControllers:controllers,futureParentElement:futureParentElement});}// We need  to attach the transclusion slots onto the `boundTranscludeFn`
// so that they are available inside the `controllersBoundTransclude` function
var boundSlots=boundTranscludeFn.$$slots=createMap();for(var slotName in transcludeFn.$$slots){if(transcludeFn.$$slots[slotName]){boundSlots[slotName]=createBoundTranscludeFn(scope,transcludeFn.$$slots[slotName],previousBoundTranscludeFn);}else{boundSlots[slotName]=null;}}return boundTranscludeFn;}/**
     * Looks for directives on the given node and adds them to the directive collection which is
     * sorted.
     *
     * @param node Node to search.
     * @param directives An array to which the directives are added to. This array is sorted before
     *        the function returns.
     * @param attrs The shared attrs object which is used to populate the normalized attributes.
     * @param {number=} maxPriority Max directive priority.
     */function collectDirectives(node,directives,attrs,maxPriority,ignoreDirective){var nodeType=node.nodeType,attrsMap=attrs.$attr,match,nodeName,className;switch(nodeType){case NODE_TYPE_ELEMENT:/* Element */nodeName=nodeName_(node);// use the node name: <directive>
addDirective(directives,directiveNormalize(nodeName),'E',maxPriority,ignoreDirective);// iterate over the attributes
for(var attr,name,nName,ngAttrName,value,isNgAttr,nAttrs=node.attributes,j=0,jj=nAttrs&&nAttrs.length;j<jj;j++){var attrStartName=false;var attrEndName=false;attr=nAttrs[j];name=attr.name;value=attr.value;// support ngAttr attribute binding
ngAttrName=directiveNormalize(name);isNgAttr=NG_ATTR_BINDING.test(ngAttrName);if(isNgAttr){name=name.replace(PREFIX_REGEXP,'').substr(8).replace(/_(.)/g,function(match,letter){return letter.toUpperCase();});}var multiElementMatch=ngAttrName.match(MULTI_ELEMENT_DIR_RE);if(multiElementMatch&&directiveIsMultiElement(multiElementMatch[1])){attrStartName=name;attrEndName=name.substr(0,name.length-5)+'end';name=name.substr(0,name.length-6);}nName=directiveNormalize(name.toLowerCase());attrsMap[nName]=name;if(isNgAttr||!attrs.hasOwnProperty(nName)){attrs[nName]=value;if(getBooleanAttrName(node,nName)){attrs[nName]=true;// presence means true
}}addAttrInterpolateDirective(node,directives,value,nName,isNgAttr);addDirective(directives,nName,'A',maxPriority,ignoreDirective,attrStartName,attrEndName);}if(nodeName==='input'&&node.getAttribute('type')==='hidden'){// Hidden input elements can have strange behaviour when navigating back to the page
// This tells the browser not to try to cache and reinstate previous values
node.setAttribute('autocomplete','off');}// use class as directive
if(!cssClassDirectivesEnabled)break;className=node.className;if(isObject(className)){// Maybe SVGAnimatedString
className=className.animVal;}if(isString(className)&&className!==''){while(match=CLASS_DIRECTIVE_REGEXP.exec(className)){nName=directiveNormalize(match[2]);if(addDirective(directives,nName,'C',maxPriority,ignoreDirective)){attrs[nName]=trim(match[3]);}className=className.substr(match.index+match[0].length);}}break;case NODE_TYPE_TEXT:/* Text Node */addTextInterpolateDirective(directives,node.nodeValue);break;case NODE_TYPE_COMMENT:/* Comment */if(!commentDirectivesEnabled)break;collectCommentDirectives(node,directives,attrs,maxPriority,ignoreDirective);break;}directives.sort(byPriority);return directives;}function collectCommentDirectives(node,directives,attrs,maxPriority,ignoreDirective){// function created because of performance, try/catch disables
// the optimization of the whole function #14848
try{var match=COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);if(match){var nName=directiveNormalize(match[1]);if(addDirective(directives,nName,'M',maxPriority,ignoreDirective)){attrs[nName]=trim(match[2]);}}}catch(e){// turns out that under some circumstances IE9 throws errors when one attempts to read
// comment's node value.
// Just ignore it and continue. (Can't seem to reproduce in test case.)
}}/**
     * Given a node with a directive-start it collects all of the siblings until it finds
     * directive-end.
     * @param node
     * @param attrStart
     * @param attrEnd
     * @returns {*}
     */function groupScan(node,attrStart,attrEnd){var nodes=[];var depth=0;if(attrStart&&node.hasAttribute&&node.hasAttribute(attrStart)){do{if(!node){throw $compileMinErr('uterdir','Unterminated attribute, found \'{0}\' but no matching \'{1}\' found.',attrStart,attrEnd);}if(node.nodeType===NODE_TYPE_ELEMENT){if(node.hasAttribute(attrStart))depth++;if(node.hasAttribute(attrEnd))depth--;}nodes.push(node);node=node.nextSibling;}while(depth>0);}else{nodes.push(node);}return jqLite(nodes);}/**
     * Wrapper for linking function which converts normal linking function into a grouped
     * linking function.
     * @param linkFn
     * @param attrStart
     * @param attrEnd
     * @returns {Function}
     */function groupElementsLinkFnWrapper(linkFn,attrStart,attrEnd){return function groupedElementsLink(scope,element,attrs,controllers,transcludeFn){element=groupScan(element[0],attrStart,attrEnd);return linkFn(scope,element,attrs,controllers,transcludeFn);};}/**
     * A function generator that is used to support both eager and lazy compilation
     * linking function.
     * @param eager
     * @param $compileNodes
     * @param transcludeFn
     * @param maxPriority
     * @param ignoreDirective
     * @param previousCompileContext
     * @returns {Function}
     */function compilationGenerator(eager,$compileNodes,transcludeFn,maxPriority,ignoreDirective,previousCompileContext){var compiled;if(eager){return compile($compileNodes,transcludeFn,maxPriority,ignoreDirective,previousCompileContext);}return(/** @this */function lazyCompilation(){if(!compiled){compiled=compile($compileNodes,transcludeFn,maxPriority,ignoreDirective,previousCompileContext);// Null out all of these references in order to make them eligible for garbage collection
// since this is a potentially long lived closure
$compileNodes=transcludeFn=previousCompileContext=null;}return compiled.apply(this,arguments);});}/**
     * Once the directives have been collected, their compile functions are executed. This method
     * is responsible for inlining directive templates as well as terminating the application
     * of the directives if the terminal directive has been reached.
     *
     * @param {Array} directives Array of collected directives to execute their compile function.
     *        this needs to be pre-sorted by priority order.
     * @param {Node} compileNode The raw DOM node to apply the compile functions to
     * @param {Object} templateAttrs The shared attribute function
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *                                                  scope argument is auto-generated to the new
     *                                                  child of the transcluded parent scope.
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
     *                              argument has the root jqLite array so that we can replace nodes
     *                              on it.
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
     *                                           compiling the transclusion.
     * @param {Array.<Function>} preLinkFns
     * @param {Array.<Function>} postLinkFns
     * @param {Object} previousCompileContext Context used for previous compilation of the current
     *                                        node
     * @returns {Function} linkFn
     */function applyDirectivesToNode(directives,compileNode,templateAttrs,transcludeFn,jqCollection,originalReplaceDirective,preLinkFns,postLinkFns,previousCompileContext){previousCompileContext=previousCompileContext||{};var terminalPriority=-Number.MAX_VALUE,newScopeDirective=previousCompileContext.newScopeDirective,controllerDirectives=previousCompileContext.controllerDirectives,newIsolateScopeDirective=previousCompileContext.newIsolateScopeDirective,templateDirective=previousCompileContext.templateDirective,nonTlbTranscludeDirective=previousCompileContext.nonTlbTranscludeDirective,hasTranscludeDirective=false,hasTemplate=false,hasElementTranscludeDirective=previousCompileContext.hasElementTranscludeDirective,$compileNode=templateAttrs.$$element=jqLite(compileNode),directive,directiveName,$template,replaceDirective=originalReplaceDirective,childTranscludeFn=transcludeFn,linkFn,didScanForMultipleTransclusion=false,mightHaveMultipleTransclusionError=false,directiveValue;// executes all directives on the current element
for(var i=0,ii=directives.length;i<ii;i++){directive=directives[i];var attrStart=directive.$$start;var attrEnd=directive.$$end;// collect multiblock sections
if(attrStart){$compileNode=groupScan(compileNode,attrStart,attrEnd);}$template=undefined;if(terminalPriority>directive.priority){break;// prevent further processing of directives
}directiveValue=directive.scope;if(directiveValue){// skip the check for directives with async templates, we'll check the derived sync
// directive when the template arrives
if(!directive.templateUrl){if(isObject(directiveValue)){// This directive is trying to add an isolated scope.
// Check that there is no scope of any kind already
assertNoDuplicate('new/isolated scope',newIsolateScopeDirective||newScopeDirective,directive,$compileNode);newIsolateScopeDirective=directive;}else{// This directive is trying to add a child scope.
// Check that there is no isolated scope already
assertNoDuplicate('new/isolated scope',newIsolateScopeDirective,directive,$compileNode);}}newScopeDirective=newScopeDirective||directive;}directiveName=directive.name;// If we encounter a condition that can result in transclusion on the directive,
// then scan ahead in the remaining directives for others that may cause a multiple
// transclusion error to be thrown during the compilation process.  If a matching directive
// is found, then we know that when we encounter a transcluded directive, we need to eagerly
// compile the `transclude` function rather than doing it lazily in order to throw
// exceptions at the correct time
if(!didScanForMultipleTransclusion&&(directive.replace&&(directive.templateUrl||directive.template)||directive.transclude&&!directive.$$tlb)){var candidateDirective;for(var scanningIndex=i+1;candidateDirective=directives[scanningIndex++];){if(candidateDirective.transclude&&!candidateDirective.$$tlb||candidateDirective.replace&&(candidateDirective.templateUrl||candidateDirective.template)){mightHaveMultipleTransclusionError=true;break;}}didScanForMultipleTransclusion=true;}if(!directive.templateUrl&&directive.controller){controllerDirectives=controllerDirectives||createMap();assertNoDuplicate('\''+directiveName+'\' controller',controllerDirectives[directiveName],directive,$compileNode);controllerDirectives[directiveName]=directive;}directiveValue=directive.transclude;if(directiveValue){hasTranscludeDirective=true;// Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
// This option should only be used by directives that know how to safely handle element transclusion,
// where the transcluded nodes are added or replaced after linking.
if(!directive.$$tlb){assertNoDuplicate('transclusion',nonTlbTranscludeDirective,directive,$compileNode);nonTlbTranscludeDirective=directive;}if(directiveValue==='element'){hasElementTranscludeDirective=true;terminalPriority=directive.priority;$template=$compileNode;$compileNode=templateAttrs.$$element=jqLite(compile.$$createComment(directiveName,templateAttrs[directiveName]));compileNode=$compileNode[0];replaceWith(jqCollection,sliceArgs($template),compileNode);// Support: Chrome < 50
// https://github.com/angular/angular.js/issues/14041
// In the versions of V8 prior to Chrome 50, the document fragment that is created
// in the `replaceWith` function is improperly garbage collected despite still
// being referenced by the `parentNode` property of all of the child nodes.  By adding
// a reference to the fragment via a different property, we can avoid that incorrect
// behavior.
// TODO: remove this line after Chrome 50 has been released
$template[0].$$parentNode=$template[0].parentNode;childTranscludeFn=compilationGenerator(mightHaveMultipleTransclusionError,$template,transcludeFn,terminalPriority,replaceDirective&&replaceDirective.name,{// Don't pass in:
// - controllerDirectives - otherwise we'll create duplicates controllers
// - newIsolateScopeDirective or templateDirective - combining templates with
//   element transclusion doesn't make sense.
//
// We need only nonTlbTranscludeDirective so that we prevent putting transclusion
// on the same element more than once.
nonTlbTranscludeDirective:nonTlbTranscludeDirective});}else{var slots=createMap();if(!isObject(directiveValue)){$template=jqLite(jqLiteClone(compileNode)).contents();}else{// We have transclusion slots,
// collect them up, compile them and store their transclusion functions
$template=[];var slotMap=createMap();var filledSlots=createMap();// Parse the element selectors
forEach(directiveValue,function(elementSelector,slotName){// If an element selector starts with a ? then it is optional
var optional=elementSelector.charAt(0)==='?';elementSelector=optional?elementSelector.substring(1):elementSelector;slotMap[elementSelector]=slotName;// We explicitly assign `null` since this implies that a slot was defined but not filled.
// Later when calling boundTransclusion functions with a slot name we only error if the
// slot is `undefined`
slots[slotName]=null;// filledSlots contains `true` for all slots that are either optional or have been
// filled. This is used to check that we have not missed any required slots
filledSlots[slotName]=optional;});// Add the matching elements into their slot
forEach($compileNode.contents(),function(node){var slotName=slotMap[directiveNormalize(nodeName_(node))];if(slotName){filledSlots[slotName]=true;slots[slotName]=slots[slotName]||[];slots[slotName].push(node);}else{$template.push(node);}});// Check for required slots that were not filled
forEach(filledSlots,function(filled,slotName){if(!filled){throw $compileMinErr('reqslot','Required transclusion slot `{0}` was not filled.',slotName);}});for(var slotName in slots){if(slots[slotName]){// Only define a transclusion function if the slot was filled
slots[slotName]=compilationGenerator(mightHaveMultipleTransclusionError,slots[slotName],transcludeFn);}}}$compileNode.empty();// clear contents
childTranscludeFn=compilationGenerator(mightHaveMultipleTransclusionError,$template,transcludeFn,undefined,undefined,{needsNewScope:directive.$$isolateScope||directive.$$newScope});childTranscludeFn.$$slots=slots;}}if(directive.template){hasTemplate=true;assertNoDuplicate('template',templateDirective,directive,$compileNode);templateDirective=directive;directiveValue=isFunction(directive.template)?directive.template($compileNode,templateAttrs):directive.template;directiveValue=denormalizeTemplate(directiveValue);if(directive.replace){replaceDirective=directive;if(jqLiteIsTextNode(directiveValue)){$template=[];}else{$template=removeComments(wrapTemplate(directive.templateNamespace,trim(directiveValue)));}compileNode=$template[0];if($template.length!==1||compileNode.nodeType!==NODE_TYPE_ELEMENT){throw $compileMinErr('tplrt','Template for directive \'{0}\' must have exactly one root element. {1}',directiveName,'');}replaceWith(jqCollection,$compileNode,compileNode);var newTemplateAttrs={$attr:{}};// combine directives from the original node and from the template:
// - take the array of directives for this element
// - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
// - collect directives from the template and sort them by priority
// - combine directives as: processed + template + unprocessed
var templateDirectives=collectDirectives(compileNode,[],newTemplateAttrs);var unprocessedDirectives=directives.splice(i+1,directives.length-(i+1));if(newIsolateScopeDirective||newScopeDirective){// The original directive caused the current element to be replaced but this element
// also needs to have a new scope, so we need to tell the template directives
// that they would need to get their scope from further up, if they require transclusion
markDirectiveScope(templateDirectives,newIsolateScopeDirective,newScopeDirective);}directives=directives.concat(templateDirectives).concat(unprocessedDirectives);mergeTemplateAttributes(templateAttrs,newTemplateAttrs);ii=directives.length;}else{$compileNode.html(directiveValue);}}if(directive.templateUrl){hasTemplate=true;assertNoDuplicate('template',templateDirective,directive,$compileNode);templateDirective=directive;if(directive.replace){replaceDirective=directive;}// eslint-disable-next-line no-func-assign
nodeLinkFn=compileTemplateUrl(directives.splice(i,directives.length-i),$compileNode,templateAttrs,jqCollection,hasTranscludeDirective&&childTranscludeFn,preLinkFns,postLinkFns,{controllerDirectives:controllerDirectives,newScopeDirective:newScopeDirective!==directive&&newScopeDirective,newIsolateScopeDirective:newIsolateScopeDirective,templateDirective:templateDirective,nonTlbTranscludeDirective:nonTlbTranscludeDirective});ii=directives.length;}else if(directive.compile){try{linkFn=directive.compile($compileNode,templateAttrs,childTranscludeFn);var context=directive.$$originalDirective||directive;if(isFunction(linkFn)){addLinkFns(null,bind(context,linkFn),attrStart,attrEnd);}else if(linkFn){addLinkFns(bind(context,linkFn.pre),bind(context,linkFn.post),attrStart,attrEnd);}}catch(e){$exceptionHandler(e,startingTag($compileNode));}}if(directive.terminal){nodeLinkFn.terminal=true;terminalPriority=Math.max(terminalPriority,directive.priority);}}nodeLinkFn.scope=newScopeDirective&&newScopeDirective.scope===true;nodeLinkFn.transcludeOnThisElement=hasTranscludeDirective;nodeLinkFn.templateOnThisElement=hasTemplate;nodeLinkFn.transclude=childTranscludeFn;previousCompileContext.hasElementTranscludeDirective=hasElementTranscludeDirective;// might be normal or delayed nodeLinkFn depending on if templateUrl is present
return nodeLinkFn;////////////////////
function addLinkFns(pre,post,attrStart,attrEnd){if(pre){if(attrStart)pre=groupElementsLinkFnWrapper(pre,attrStart,attrEnd);pre.require=directive.require;pre.directiveName=directiveName;if(newIsolateScopeDirective===directive||directive.$$isolateScope){pre=cloneAndAnnotateFn(pre,{isolateScope:true});}preLinkFns.push(pre);}if(post){if(attrStart)post=groupElementsLinkFnWrapper(post,attrStart,attrEnd);post.require=directive.require;post.directiveName=directiveName;if(newIsolateScopeDirective===directive||directive.$$isolateScope){post=cloneAndAnnotateFn(post,{isolateScope:true});}postLinkFns.push(post);}}function nodeLinkFn(childLinkFn,scope,linkNode,$rootElement,boundTranscludeFn){var i,ii,linkFn,isolateScope,controllerScope,elementControllers,transcludeFn,$element,attrs,scopeBindingInfo;if(compileNode===linkNode){attrs=templateAttrs;$element=templateAttrs.$$element;}else{$element=jqLite(linkNode);attrs=new Attributes($element,templateAttrs);}controllerScope=scope;if(newIsolateScopeDirective){isolateScope=scope.$new(true);}else if(newScopeDirective){controllerScope=scope.$parent;}if(boundTranscludeFn){// track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
// is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
transcludeFn=controllersBoundTransclude;transcludeFn.$$boundTransclude=boundTranscludeFn;// expose the slots on the `$transclude` function
transcludeFn.isSlotFilled=function(slotName){return!!boundTranscludeFn.$$slots[slotName];};}if(controllerDirectives){elementControllers=setupControllers($element,attrs,transcludeFn,controllerDirectives,isolateScope,scope,newIsolateScopeDirective);}if(newIsolateScopeDirective){// Initialize isolate scope bindings for new isolate scope directive.
compile.$$addScopeInfo($element,isolateScope,true,!(templateDirective&&(templateDirective===newIsolateScopeDirective||templateDirective===newIsolateScopeDirective.$$originalDirective)));compile.$$addScopeClass($element,true);isolateScope.$$isolateBindings=newIsolateScopeDirective.$$isolateBindings;scopeBindingInfo=initializeDirectiveBindings(scope,attrs,isolateScope,isolateScope.$$isolateBindings,newIsolateScopeDirective);if(scopeBindingInfo.removeWatches){isolateScope.$on('$destroy',scopeBindingInfo.removeWatches);}}// Initialize bindToController bindings
for(var name in elementControllers){var controllerDirective=controllerDirectives[name];var controller=elementControllers[name];var bindings=controllerDirective.$$bindings.bindToController;if(preAssignBindingsEnabled){if(bindings){controller.bindingInfo=initializeDirectiveBindings(controllerScope,attrs,controller.instance,bindings,controllerDirective);}else{controller.bindingInfo={};}var controllerResult=controller();if(controllerResult!==controller.instance){// If the controller constructor has a return value, overwrite the instance
// from setupControllers
controller.instance=controllerResult;$element.data('$'+controllerDirective.name+'Controller',controllerResult);if(controller.bindingInfo.removeWatches){controller.bindingInfo.removeWatches();}controller.bindingInfo=initializeDirectiveBindings(controllerScope,attrs,controller.instance,bindings,controllerDirective);}}else{controller.instance=controller();$element.data('$'+controllerDirective.name+'Controller',controller.instance);controller.bindingInfo=initializeDirectiveBindings(controllerScope,attrs,controller.instance,bindings,controllerDirective);}}// Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy
forEach(controllerDirectives,function(controllerDirective,name){var require=controllerDirective.require;if(controllerDirective.bindToController&&!isArray(require)&&isObject(require)){extend(elementControllers[name].instance,getControllers(name,require,$element,elementControllers));}});// Handle the init and destroy lifecycle hooks on all controllers that have them
forEach(elementControllers,function(controller){var controllerInstance=controller.instance;if(isFunction(controllerInstance.$onChanges)){try{controllerInstance.$onChanges(controller.bindingInfo.initialChanges);}catch(e){$exceptionHandler(e);}}if(isFunction(controllerInstance.$onInit)){try{controllerInstance.$onInit();}catch(e){$exceptionHandler(e);}}if(isFunction(controllerInstance.$doCheck)){controllerScope.$watch(function(){controllerInstance.$doCheck();});controllerInstance.$doCheck();}if(isFunction(controllerInstance.$onDestroy)){controllerScope.$on('$destroy',function callOnDestroyHook(){controllerInstance.$onDestroy();});}});// PRELINKING
for(i=0,ii=preLinkFns.length;i<ii;i++){linkFn=preLinkFns[i];invokeLinkFn(linkFn,linkFn.isolateScope?isolateScope:scope,$element,attrs,linkFn.require&&getControllers(linkFn.directiveName,linkFn.require,$element,elementControllers),transcludeFn);}// RECURSION
// We only pass the isolate scope, if the isolate directive has a template,
// otherwise the child elements do not belong to the isolate directive.
var scopeToChild=scope;if(newIsolateScopeDirective&&(newIsolateScopeDirective.template||newIsolateScopeDirective.templateUrl===null)){scopeToChild=isolateScope;}if(childLinkFn){childLinkFn(scopeToChild,linkNode.childNodes,undefined,boundTranscludeFn);}// POSTLINKING
for(i=postLinkFns.length-1;i>=0;i--){linkFn=postLinkFns[i];invokeLinkFn(linkFn,linkFn.isolateScope?isolateScope:scope,$element,attrs,linkFn.require&&getControllers(linkFn.directiveName,linkFn.require,$element,elementControllers),transcludeFn);}// Trigger $postLink lifecycle hooks
forEach(elementControllers,function(controller){var controllerInstance=controller.instance;if(isFunction(controllerInstance.$postLink)){controllerInstance.$postLink();}});// This is the function that is injected as `$transclude`.
// Note: all arguments are optional!
function controllersBoundTransclude(scope,cloneAttachFn,futureParentElement,slotName){var transcludeControllers;// No scope passed in:
if(!isScope(scope)){slotName=futureParentElement;futureParentElement=cloneAttachFn;cloneAttachFn=scope;scope=undefined;}if(hasElementTranscludeDirective){transcludeControllers=elementControllers;}if(!futureParentElement){futureParentElement=hasElementTranscludeDirective?$element.parent():$element;}if(slotName){// slotTranscludeFn can be one of three things:
//  * a transclude function - a filled slot
//  * `null` - an optional slot that was not filled
//  * `undefined` - a slot that was not declared (i.e. invalid)
var slotTranscludeFn=boundTranscludeFn.$$slots[slotName];if(slotTranscludeFn){return slotTranscludeFn(scope,cloneAttachFn,transcludeControllers,futureParentElement,scopeToChild);}else if(isUndefined(slotTranscludeFn)){throw $compileMinErr('noslot','No parent directive that requires a transclusion with slot name "{0}". '+'Element: {1}',slotName,startingTag($element));}}else{return boundTranscludeFn(scope,cloneAttachFn,transcludeControllers,futureParentElement,scopeToChild);}}}}function getControllers(directiveName,require,$element,elementControllers){var value;if(isString(require)){var match=require.match(REQUIRE_PREFIX_REGEXP);var name=require.substring(match[0].length);var inheritType=match[1]||match[3];var optional=match[2]==='?';//If only parents then start at the parent element
if(inheritType==='^^'){$element=$element.parent();//Otherwise attempt getting the controller from elementControllers in case
//the element is transcluded (and has no data) and to avoid .data if possible
}else{value=elementControllers&&elementControllers[name];value=value&&value.instance;}if(!value){var dataName='$'+name+'Controller';value=inheritType?$element.inheritedData(dataName):$element.data(dataName);}if(!value&&!optional){throw $compileMinErr('ctreq','Controller \'{0}\', required by directive \'{1}\', can\'t be found!',name,directiveName);}}else if(isArray(require)){value=[];for(var i=0,ii=require.length;i<ii;i++){value[i]=getControllers(directiveName,require[i],$element,elementControllers);}}else if(isObject(require)){value={};forEach(require,function(controller,property){value[property]=getControllers(directiveName,controller,$element,elementControllers);});}return value||null;}function setupControllers($element,attrs,transcludeFn,controllerDirectives,isolateScope,scope,newIsolateScopeDirective){var elementControllers=createMap();for(var controllerKey in controllerDirectives){var directive=controllerDirectives[controllerKey];var locals={$scope:directive===newIsolateScopeDirective||directive.$$isolateScope?isolateScope:scope,$element:$element,$attrs:attrs,$transclude:transcludeFn};var controller=directive.controller;if(controller==='@'){controller=attrs[directive.name];}var controllerInstance=$controller(controller,locals,true,directive.controllerAs);// For directives with element transclusion the element is a comment.
// In this case .data will not attach any data.
// Instead, we save the controllers for the element in a local hash and attach to .data
// later, once we have the actual element.
elementControllers[directive.name]=controllerInstance;$element.data('$'+directive.name+'Controller',controllerInstance.instance);}return elementControllers;}// Depending upon the context in which a directive finds itself it might need to have a new isolated
// or child scope created. For instance:
// * if the directive has been pulled into a template because another directive with a higher priority
// asked for element transclusion
// * if the directive itself asks for transclusion but it is at the root of a template and the original
// element was replaced. See https://github.com/angular/angular.js/issues/12936
function markDirectiveScope(directives,isolateScope,newScope){for(var j=0,jj=directives.length;j<jj;j++){directives[j]=inherit(directives[j],{$$isolateScope:isolateScope,$$newScope:newScope});}}/**
     * looks up the directive and decorates it with exception handling and proper parameters. We
     * call this the boundDirective.
     *
     * @param {string} name name of the directive to look up.
     * @param {string} location The directive must be found in specific format.
     *   String containing any of theses characters:
     *
     *   * `E`: element name
     *   * `A': attribute
     *   * `C`: class
     *   * `M`: comment
     * @returns {boolean} true if directive was added.
     */function addDirective(tDirectives,name,location,maxPriority,ignoreDirective,startAttrName,endAttrName){if(name===ignoreDirective)return null;var match=null;if(hasDirectives.hasOwnProperty(name)){for(var directive,directives=$injector.get(name+Suffix),i=0,ii=directives.length;i<ii;i++){directive=directives[i];if((isUndefined(maxPriority)||maxPriority>directive.priority)&&directive.restrict.indexOf(location)!==-1){if(startAttrName){directive=inherit(directive,{$$start:startAttrName,$$end:endAttrName});}if(!directive.$$bindings){var bindings=directive.$$bindings=parseDirectiveBindings(directive,directive.name);if(isObject(bindings.isolateScope)){directive.$$isolateBindings=bindings.isolateScope;}}tDirectives.push(directive);match=directive;}}}return match;}/**
     * looks up the directive and returns true if it is a multi-element directive,
     * and therefore requires DOM nodes between -start and -end markers to be grouped
     * together.
     *
     * @param {string} name name of the directive to look up.
     * @returns true if directive was registered as multi-element.
     */function directiveIsMultiElement(name){if(hasDirectives.hasOwnProperty(name)){for(var directive,directives=$injector.get(name+Suffix),i=0,ii=directives.length;i<ii;i++){directive=directives[i];if(directive.multiElement){return true;}}}return false;}/**
     * When the element is replaced with HTML template then the new attributes
     * on the template need to be merged with the existing attributes in the DOM.
     * The desired effect is to have both of the attributes present.
     *
     * @param {object} dst destination attributes (original DOM)
     * @param {object} src source attributes (from the directive template)
     */function mergeTemplateAttributes(dst,src){var srcAttr=src.$attr,dstAttr=dst.$attr;// reapply the old attributes to the new element
forEach(dst,function(value,key){if(key.charAt(0)!=='$'){if(src[key]&&src[key]!==value){if(value.length){value+=(key==='style'?';':' ')+src[key];}else{value=src[key];}}dst.$set(key,value,true,srcAttr[key]);}});// copy the new attributes on the old attrs object
forEach(src,function(value,key){// Check if we already set this attribute in the loop above.
// `dst` will never contain hasOwnProperty as DOM parser won't let it.
// You will get an "InvalidCharacterError: DOM Exception 5" error if you
// have an attribute like "has-own-property" or "data-has-own-property", etc.
if(!dst.hasOwnProperty(key)&&key.charAt(0)!=='$'){dst[key]=value;if(key!=='class'&&key!=='style'){dstAttr[key]=srcAttr[key];}}});}function compileTemplateUrl(directives,$compileNode,tAttrs,$rootElement,childTranscludeFn,preLinkFns,postLinkFns,previousCompileContext){var linkQueue=[],afterTemplateNodeLinkFn,afterTemplateChildLinkFn,beforeTemplateCompileNode=$compileNode[0],origAsyncDirective=directives.shift(),derivedSyncDirective=inherit(origAsyncDirective,{templateUrl:null,transclude:null,replace:null,$$originalDirective:origAsyncDirective}),templateUrl=isFunction(origAsyncDirective.templateUrl)?origAsyncDirective.templateUrl($compileNode,tAttrs):origAsyncDirective.templateUrl,templateNamespace=origAsyncDirective.templateNamespace;$compileNode.empty();$templateRequest(templateUrl).then(function(content){var compileNode,tempTemplateAttrs,$template,childBoundTranscludeFn;content=denormalizeTemplate(content);if(origAsyncDirective.replace){if(jqLiteIsTextNode(content)){$template=[];}else{$template=removeComments(wrapTemplate(templateNamespace,trim(content)));}compileNode=$template[0];if($template.length!==1||compileNode.nodeType!==NODE_TYPE_ELEMENT){throw $compileMinErr('tplrt','Template for directive \'{0}\' must have exactly one root element. {1}',origAsyncDirective.name,templateUrl);}tempTemplateAttrs={$attr:{}};replaceWith($rootElement,$compileNode,compileNode);var templateDirectives=collectDirectives(compileNode,[],tempTemplateAttrs);if(isObject(origAsyncDirective.scope)){// the original directive that caused the template to be loaded async required
// an isolate scope
markDirectiveScope(templateDirectives,true);}directives=templateDirectives.concat(directives);mergeTemplateAttributes(tAttrs,tempTemplateAttrs);}else{compileNode=beforeTemplateCompileNode;$compileNode.html(content);}directives.unshift(derivedSyncDirective);afterTemplateNodeLinkFn=applyDirectivesToNode(directives,compileNode,tAttrs,childTranscludeFn,$compileNode,origAsyncDirective,preLinkFns,postLinkFns,previousCompileContext);forEach($rootElement,function(node,i){if(node===compileNode){$rootElement[i]=$compileNode[0];}});afterTemplateChildLinkFn=compileNodes($compileNode[0].childNodes,childTranscludeFn);while(linkQueue.length){var scope=linkQueue.shift(),beforeTemplateLinkNode=linkQueue.shift(),linkRootElement=linkQueue.shift(),boundTranscludeFn=linkQueue.shift(),linkNode=$compileNode[0];if(scope.$$destroyed)continue;if(beforeTemplateLinkNode!==beforeTemplateCompileNode){var oldClasses=beforeTemplateLinkNode.className;if(!(previousCompileContext.hasElementTranscludeDirective&&origAsyncDirective.replace)){// it was cloned therefore we have to clone as well.
linkNode=jqLiteClone(compileNode);}replaceWith(linkRootElement,jqLite(beforeTemplateLinkNode),linkNode);// Copy in CSS classes from original node
safeAddClass(jqLite(linkNode),oldClasses);}if(afterTemplateNodeLinkFn.transcludeOnThisElement){childBoundTranscludeFn=createBoundTranscludeFn(scope,afterTemplateNodeLinkFn.transclude,boundTranscludeFn);}else{childBoundTranscludeFn=boundTranscludeFn;}afterTemplateNodeLinkFn(afterTemplateChildLinkFn,scope,linkNode,$rootElement,childBoundTranscludeFn);}linkQueue=null;}).catch(function(error){if(isError(error)){$exceptionHandler(error);}});return function delayedNodeLinkFn(ignoreChildLinkFn,scope,node,rootElement,boundTranscludeFn){var childBoundTranscludeFn=boundTranscludeFn;if(scope.$$destroyed)return;if(linkQueue){linkQueue.push(scope,node,rootElement,childBoundTranscludeFn);}else{if(afterTemplateNodeLinkFn.transcludeOnThisElement){childBoundTranscludeFn=createBoundTranscludeFn(scope,afterTemplateNodeLinkFn.transclude,boundTranscludeFn);}afterTemplateNodeLinkFn(afterTemplateChildLinkFn,scope,node,rootElement,childBoundTranscludeFn);}};}/**
     * Sorting function for bound directives.
     */function byPriority(a,b){var diff=b.priority-a.priority;if(diff!==0)return diff;if(a.name!==b.name)return a.name<b.name?-1:1;return a.index-b.index;}function assertNoDuplicate(what,previousDirective,directive,element){function wrapModuleNameIfDefined(moduleName){return moduleName?' (module: '+moduleName+')':'';}if(previousDirective){throw $compileMinErr('multidir','Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',previousDirective.name,wrapModuleNameIfDefined(previousDirective.$$moduleName),directive.name,wrapModuleNameIfDefined(directive.$$moduleName),what,startingTag(element));}}function addTextInterpolateDirective(directives,text){var interpolateFn=$interpolate(text,true);if(interpolateFn){directives.push({priority:0,compile:function textInterpolateCompileFn(templateNode){var templateNodeParent=templateNode.parent(),hasCompileParent=!!templateNodeParent.length;// When transcluding a template that has bindings in the root
// we don't have a parent and thus need to add the class during linking fn.
if(hasCompileParent)compile.$$addBindingClass(templateNodeParent);return function textInterpolateLinkFn(scope,node){var parent=node.parent();if(!hasCompileParent)compile.$$addBindingClass(parent);compile.$$addBindingInfo(parent,interpolateFn.expressions);scope.$watch(interpolateFn,function interpolateFnWatchAction(value){node[0].nodeValue=value;});};}});}}function wrapTemplate(type,template){type=lowercase(type||'html');switch(type){case'svg':case'math':var wrapper=window.document.createElement('div');wrapper.innerHTML='<'+type+'>'+template+'</'+type+'>';return wrapper.childNodes[0].childNodes;default:return template;}}function getTrustedContext(node,attrNormalizedName){if(attrNormalizedName==='srcdoc'){return $sce.HTML;}var tag=nodeName_(node);// All tags with src attributes require a RESOURCE_URL value, except for
// img and various html5 media tags.
if(attrNormalizedName==='src'||attrNormalizedName==='ngSrc'){if(['img','video','audio','source','track'].indexOf(tag)===-1){return $sce.RESOURCE_URL;}// maction[xlink:href] can source SVG.  It's not limited to <maction>.
}else if(attrNormalizedName==='xlinkHref'||tag==='form'&&attrNormalizedName==='action'||// links can be stylesheets or imports, which can run script in the current origin
tag==='link'&&attrNormalizedName==='href'){return $sce.RESOURCE_URL;}}function addAttrInterpolateDirective(node,directives,value,name,isNgAttr){var trustedContext=getTrustedContext(node,name);var mustHaveExpression=!isNgAttr;var allOrNothing=ALL_OR_NOTHING_ATTRS[name]||isNgAttr;var interpolateFn=$interpolate(value,mustHaveExpression,trustedContext,allOrNothing);// no interpolation found -> ignore
if(!interpolateFn)return;if(name==='multiple'&&nodeName_(node)==='select'){throw $compileMinErr('selmulti','Binding to the \'multiple\' attribute is not supported. Element: {0}',startingTag(node));}if(EVENT_HANDLER_ATTR_REGEXP.test(name)){throw $compileMinErr('nodomevents','Interpolations for HTML DOM event attributes are disallowed.  Please use the '+'ng- versions (such as ng-click instead of onclick) instead.');}directives.push({priority:100,compile:function(){return{pre:function attrInterpolatePreLinkFn(scope,element,attr){var $$observers=attr.$$observers||(attr.$$observers=createMap());// If the attribute has changed since last $interpolate()ed
var newValue=attr[name];if(newValue!==value){// we need to interpolate again since the attribute value has been updated
// (e.g. by another directive's compile function)
// ensure unset/empty values make interpolateFn falsy
interpolateFn=newValue&&$interpolate(newValue,true,trustedContext,allOrNothing);value=newValue;}// if attribute was updated so that there is no interpolation going on we don't want to
// register any observers
if(!interpolateFn)return;// initialize attr object so that it's ready in case we need the value for isolate
// scope initialization, otherwise the value would not be available from isolate
// directive's linking fn during linking phase
attr[name]=interpolateFn(scope);($$observers[name]||($$observers[name]=[])).$$inter=true;(attr.$$observers&&attr.$$observers[name].$$scope||scope).$watch(interpolateFn,function interpolateFnWatchAction(newValue,oldValue){//special case for class attribute addition + removal
//so that class changes can tap into the animation
//hooks provided by the $animate service. Be sure to
//skip animations when the first digest occurs (when
//both the new and the old values are the same) since
//the CSS classes are the non-interpolated values
if(name==='class'&&newValue!==oldValue){attr.$updateClass(newValue,oldValue);}else{attr.$set(name,newValue);}});}};}});}/**
     * This is a special jqLite.replaceWith, which can replace items which
     * have no parents, provided that the containing jqLite collection is provided.
     *
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
     *                               in the root of the tree.
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
     *                                  the shell, but replace its DOM node reference.
     * @param {Node} newNode The new DOM node.
     */function replaceWith($rootElement,elementsToRemove,newNode){var firstElementToRemove=elementsToRemove[0],removeCount=elementsToRemove.length,parent=firstElementToRemove.parentNode,i,ii;if($rootElement){for(i=0,ii=$rootElement.length;i<ii;i++){if($rootElement[i]===firstElementToRemove){$rootElement[i++]=newNode;for(var j=i,j2=j+removeCount-1,jj=$rootElement.length;j<jj;j++,j2++){if(j2<jj){$rootElement[j]=$rootElement[j2];}else{delete $rootElement[j];}}$rootElement.length-=removeCount-1;// If the replaced element is also the jQuery .context then replace it
// .context is a deprecated jQuery api, so we should set it only when jQuery set it
// http://api.jquery.com/context/
if($rootElement.context===firstElementToRemove){$rootElement.context=newNode;}break;}}}if(parent){parent.replaceChild(newNode,firstElementToRemove);}// Append all the `elementsToRemove` to a fragment. This will...
// - remove them from the DOM
// - allow them to still be traversed with .nextSibling
// - allow a single fragment.qSA to fetch all elements being removed
var fragment=window.document.createDocumentFragment();for(i=0;i<removeCount;i++){fragment.appendChild(elementsToRemove[i]);}if(jqLite.hasData(firstElementToRemove)){// Copy over user data (that includes Angular's $scope etc.). Don't copy private
// data here because there's no public interface in jQuery to do that and copying over
// event listeners (which is the main use of private data) wouldn't work anyway.
jqLite.data(newNode,jqLite.data(firstElementToRemove));// Remove $destroy event listeners from `firstElementToRemove`
jqLite(firstElementToRemove).off('$destroy');}// Cleanup any data/listeners on the elements and children.
// This includes invoking the $destroy event on any elements with listeners.
jqLite.cleanData(fragment.querySelectorAll('*'));// Update the jqLite collection to only contain the `newNode`
for(i=1;i<removeCount;i++){delete elementsToRemove[i];}elementsToRemove[0]=newNode;elementsToRemove.length=1;}function cloneAndAnnotateFn(fn,annotation){return extend(function(){return fn.apply(null,arguments);},fn,annotation);}function invokeLinkFn(linkFn,scope,$element,attrs,controllers,transcludeFn){try{linkFn(scope,$element,attrs,controllers,transcludeFn);}catch(e){$exceptionHandler(e,startingTag($element));}}function strictBindingsCheck(attrName,directiveName){if(strictComponentBindingsEnabled){throw $compileMinErr('missingattr','Attribute \'{0}\' of \'{1}\' is non-optional and must be set!',attrName,directiveName);}}// Set up $watches for isolate scope and controller bindings.
function initializeDirectiveBindings(scope,attrs,destination,bindings,directive){var removeWatchCollection=[];var initialChanges={};var changes;forEach(bindings,function initializeBinding(definition,scopeName){var attrName=definition.attrName,optional=definition.optional,mode=definition.mode,// @, =, <, or &
lastValue,parentGet,parentSet,compare,removeWatch;switch(mode){case'@':if(!optional&&!hasOwnProperty.call(attrs,attrName)){strictBindingsCheck(attrName,directive.name);destination[scopeName]=attrs[attrName]=undefined;}removeWatch=attrs.$observe(attrName,function(value){if(isString(value)||isBoolean(value)){var oldValue=destination[scopeName];recordChanges(scopeName,value,oldValue);destination[scopeName]=value;}});attrs.$$observers[attrName].$$scope=scope;lastValue=attrs[attrName];if(isString(lastValue)){// If the attribute has been provided then we trigger an interpolation to ensure
// the value is there for use in the link fn
destination[scopeName]=$interpolate(lastValue)(scope);}else if(isBoolean(lastValue)){// If the attributes is one of the BOOLEAN_ATTR then Angular will have converted
// the value to boolean rather than a string, so we special case this situation
destination[scopeName]=lastValue;}initialChanges[scopeName]=new SimpleChange(_UNINITIALIZED_VALUE,destination[scopeName]);removeWatchCollection.push(removeWatch);break;case'=':if(!hasOwnProperty.call(attrs,attrName)){if(optional)break;strictBindingsCheck(attrName,directive.name);attrs[attrName]=undefined;}if(optional&&!attrs[attrName])break;parentGet=$parse(attrs[attrName]);if(parentGet.literal){compare=equals;}else{compare=simpleCompare;}parentSet=parentGet.assign||function(){// reset the change, or we will throw this exception on every $digest
lastValue=destination[scopeName]=parentGet(scope);throw $compileMinErr('nonassign','Expression \'{0}\' in attribute \'{1}\' used with directive \'{2}\' is non-assignable!',attrs[attrName],attrName,directive.name);};lastValue=destination[scopeName]=parentGet(scope);var parentValueWatch=function parentValueWatch(parentValue){if(!compare(parentValue,destination[scopeName])){// we are out of sync and need to copy
if(!compare(parentValue,lastValue)){// parent changed and it has precedence
destination[scopeName]=parentValue;}else{// if the parent can be assigned then do so
parentSet(scope,parentValue=destination[scopeName]);}}lastValue=parentValue;return lastValue;};parentValueWatch.$stateful=true;if(definition.collection){removeWatch=scope.$watchCollection(attrs[attrName],parentValueWatch);}else{removeWatch=scope.$watch($parse(attrs[attrName],parentValueWatch),null,parentGet.literal);}removeWatchCollection.push(removeWatch);break;case'<':if(!hasOwnProperty.call(attrs,attrName)){if(optional)break;strictBindingsCheck(attrName,directive.name);attrs[attrName]=undefined;}if(optional&&!attrs[attrName])break;parentGet=$parse(attrs[attrName]);var deepWatch=parentGet.literal;var initialValue=destination[scopeName]=parentGet(scope);initialChanges[scopeName]=new SimpleChange(_UNINITIALIZED_VALUE,destination[scopeName]);removeWatch=scope.$watch(parentGet,function parentValueWatchAction(newValue,oldValue){if(oldValue===newValue){if(oldValue===initialValue||deepWatch&&equals(oldValue,initialValue)){return;}oldValue=initialValue;}recordChanges(scopeName,newValue,oldValue);destination[scopeName]=newValue;},deepWatch);removeWatchCollection.push(removeWatch);break;case'&':if(!optional&&!hasOwnProperty.call(attrs,attrName)){strictBindingsCheck(attrName,directive.name);}// Don't assign Object.prototype method to scope
parentGet=attrs.hasOwnProperty(attrName)?$parse(attrs[attrName]):noop;// Don't assign noop to destination if expression is not valid
if(parentGet===noop&&optional)break;destination[scopeName]=function(locals){return parentGet(scope,locals);};break;}});function recordChanges(key,currentValue,previousValue){if(isFunction(destination.$onChanges)&&!simpleCompare(currentValue,previousValue)){// If we have not already scheduled the top level onChangesQueue handler then do so now
if(!onChangesQueue){scope.$$postDigest(flushOnChangesQueue);onChangesQueue=[];}// If we have not already queued a trigger of onChanges for this controller then do so now
if(!changes){changes={};onChangesQueue.push(triggerOnChangesHook);}// If the has been a change on this property already then we need to reuse the previous value
if(changes[key]){previousValue=changes[key].previousValue;}// Store this change
changes[key]=new SimpleChange(previousValue,currentValue);}}function triggerOnChangesHook(){destination.$onChanges(changes);// Now clear the changes so that we schedule onChanges when more changes arrive
changes=undefined;}return{initialChanges:initialChanges,removeWatches:removeWatchCollection.length&&function removeWatches(){for(var i=0,ii=removeWatchCollection.length;i<ii;++i){removeWatchCollection[i]();}}};}}];}function SimpleChange(previous,current){this.previousValue=previous;this.currentValue=current;}SimpleChange.prototype.isFirstChange=function(){return this.previousValue===_UNINITIALIZED_VALUE;};var PREFIX_REGEXP=/^((?:x|data)[:\-_])/i;var SPECIAL_CHARS_REGEXP=/[:\-_]+(.)/g;/**
 * Converts all accepted directives format into proper directive name.
 * @param name Name to normalize
 */function directiveNormalize(name){return name.replace(PREFIX_REGEXP,'').replace(SPECIAL_CHARS_REGEXP,fnCamelCaseReplace);}/**
 * @ngdoc type
 * @name $compile.directive.Attributes
 *
 * @description
 * A shared object between directive compile / linking functions which contains normalized DOM
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
 * needed since all of these are treated as equivalent in Angular:
 *
 * ```
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
 * ```
 *//**
 * @ngdoc property
 * @name $compile.directive.Attributes#$attr
 *
 * @description
 * A map of DOM element attribute names to the normalized name. This is
 * needed to do reverse lookup from normalized name back to actual name.
 *//**
 * @ngdoc method
 * @name $compile.directive.Attributes#$set
 * @kind function
 *
 * @description
 * Set DOM element attribute value.
 *
 *
 * @param {string} name Normalized element attribute name of the property to modify. The name is
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
 *          property to the original name.
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
 *//**
 * Closure compiler type information
 */function nodesetLinkingFn(/* angular.Scope */scope,/* NodeList */nodeList,/* Element */rootElement,/* function(Function) */boundTranscludeFn){}function directiveLinkingFn(/* nodesetLinkingFn */nodesetLinkingFn,/* angular.Scope */scope,/* Node */node,/* Element */rootElement,/* function(Function) */boundTranscludeFn){}function tokenDifference(str1,str2){var values='',tokens1=str1.split(/\s+/),tokens2=str2.split(/\s+/);outer:for(var i=0;i<tokens1.length;i++){var token=tokens1[i];for(var j=0;j<tokens2.length;j++){if(token===tokens2[j])continue outer;}values+=(values.length>0?' ':'')+token;}return values;}function removeComments(jqNodes){jqNodes=jqLite(jqNodes);var i=jqNodes.length;if(i<=1){return jqNodes;}while(i--){var node=jqNodes[i];if(node.nodeType===NODE_TYPE_COMMENT||node.nodeType===NODE_TYPE_TEXT&&node.nodeValue.trim()===''){splice.call(jqNodes,i,1);}}return jqNodes;}var $controllerMinErr=minErr('$controller');var CNTRL_REG=/^(\S+)(\s+as\s+([\w$]+))?$/;function identifierForController(controller,ident){if(ident&&isString(ident))return ident;if(isString(controller)){var match=CNTRL_REG.exec(controller);if(match)return match[3];}}/**
 * @ngdoc provider
 * @name $controllerProvider
 * @this
 *
 * @description
 * The {@link ng.$controller $controller service} is used by Angular to create new
 * controllers.
 *
 * This provider allows controller registration via the
 * {@link ng.$controllerProvider#register register} method.
 */function $ControllerProvider(){var controllers={},globals=false;/**
   * @ngdoc method
   * @name $controllerProvider#has
   * @param {string} name Controller name to check.
   */this.has=function(name){return controllers.hasOwnProperty(name);};/**
   * @ngdoc method
   * @name $controllerProvider#register
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
   *    the names and the values are the constructors.
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
   *    annotations in the array notation).
   */this.register=function(name,constructor){assertNotHasOwnProperty(name,'controller');if(isObject(name)){extend(controllers,name);}else{controllers[name]=constructor;}};/**
   * @ngdoc method
   * @name $controllerProvider#allowGlobals
   * @description If called, allows `$controller` to find controller constructors on `window`
   *
   * @deprecated
   * sinceVersion="v1.3.0"
   * removeVersion="v1.7.0"
   * This method of finding controllers has been deprecated.
   */this.allowGlobals=function(){globals=true;};this.$get=['$injector','$window',function($injector,$window){/**
     * @ngdoc service
     * @name $controller
     * @requires $injector
     *
     * @param {Function|string} constructor If called with a function then it's considered to be the
     *    controller constructor function. Otherwise it's considered to be a string which is used
     *    to retrieve the controller constructor using the following steps:
     *
     *    * check if a controller with given name is registered via `$controllerProvider`
     *    * check if evaluating the string on the current scope returns a constructor
     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
     *      `window` object (deprecated, not recommended)
     *
     *    The string can use the `controller as property` syntax, where the controller instance is published
     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
     *    to work correctly.
     *
     * @param {Object} locals Injection locals for Controller.
     * @return {Object} Instance of given controller.
     *
     * @description
     * `$controller` service is responsible for instantiating controllers.
     *
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
     */return function $controller(expression,locals,later,ident){// PRIVATE API:
//   param `later` --- indicates that the controller's constructor is invoked at a later time.
//                     If true, $controller will allocate the object with the correct
//                     prototype chain, but will not invoke the controller until a returned
//                     callback is invoked.
//   param `ident` --- An optional label which overrides the label parsed from the controller
//                     expression, if any.
var instance,match,constructor,identifier;later=later===true;if(ident&&isString(ident)){identifier=ident;}if(isString(expression)){match=expression.match(CNTRL_REG);if(!match){throw $controllerMinErr('ctrlfmt','Badly formed controller string \'{0}\'. '+'Must match `__name__ as __id__` or `__name__`.',expression);}constructor=match[1];identifier=identifier||match[3];expression=controllers.hasOwnProperty(constructor)?controllers[constructor]:getter(locals.$scope,constructor,true)||(globals?getter($window,constructor,true):undefined);if(!expression){throw $controllerMinErr('ctrlreg','The controller with the name \'{0}\' is not registered.',constructor);}assertArgFn(expression,constructor,true);}if(later){// Instantiate controller later:
// This machinery is used to create an instance of the object before calling the
// controller's constructor itself.
//
// This allows properties to be added to the controller before the constructor is
// invoked. Primarily, this is used for isolate scope bindings in $compile.
//
// This feature is not intended for use by applications, and is thus not documented
// publicly.
// Object creation: http://jsperf.com/create-constructor/2
var controllerPrototype=(isArray(expression)?expression[expression.length-1]:expression).prototype;instance=Object.create(controllerPrototype||null);if(identifier){addIdentifier(locals,identifier,instance,constructor||expression.name);}return extend(function $controllerInit(){var result=$injector.invoke(expression,instance,locals,constructor);if(result!==instance&&(isObject(result)||isFunction(result))){instance=result;if(identifier){// If result changed, re-assign controllerAs value to scope.
addIdentifier(locals,identifier,instance,constructor||expression.name);}}return instance;},{instance:instance,identifier:identifier});}instance=$injector.instantiate(expression,locals,constructor);if(identifier){addIdentifier(locals,identifier,instance,constructor||expression.name);}return instance;};function addIdentifier(locals,identifier,instance,name){if(!(locals&&isObject(locals.$scope))){throw minErr('$controller')('noscp','Cannot export controller \'{0}\' as \'{1}\'! No $scope object provided via `locals`.',name,identifier);}locals.$scope[identifier]=instance;}}];}/**
 * @ngdoc service
 * @name $document
 * @requires $window
 * @this
 *
 * @description
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
 *
 * @example
   <example module="documentExample" name="document">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <p>$document title: <b ng-bind="title"></b></p>
         <p>window.document title: <b ng-bind="windowTitle"></b></p>
       </div>
     </file>
     <file name="script.js">
       angular.module('documentExample', [])
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
           $scope.title = $document[0].title;
           $scope.windowTitle = angular.element(window.document)[0].title;
         }]);
     </file>
   </example>
 */function $DocumentProvider(){this.$get=['$window',function(window){return jqLite(window.document);}];}/**
 * @private
 * @this
 * Listens for document visibility change and makes the current status accessible.
 */function $$IsDocumentHiddenProvider(){this.$get=['$document','$rootScope',function($document,$rootScope){var doc=$document[0];var hidden=doc&&doc.hidden;$document.on('visibilitychange',changeListener);$rootScope.$on('$destroy',function(){$document.off('visibilitychange',changeListener);});function changeListener(){hidden=doc.hidden;}return function(){return hidden;};}];}/**
 * @ngdoc service
 * @name $exceptionHandler
 * @requires ng.$log
 * @this
 *
 * @description
 * Any uncaught exception in angular expressions is delegated to this service.
 * The default implementation simply delegates to `$log.error` which logs it into
 * the browser console.
 *
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
 *
 * ## Example:
 *
 * The example below will overwrite the default `$exceptionHandler` in order to (a) log uncaught
 * errors to the backend for later inspection by the developers and (b) to use `$log.warn()` instead
 * of `$log.error()`.
 *
 * ```js
 *   angular.
 *     module('exceptionOverwrite', []).
 *     factory('$exceptionHandler', ['$log', 'logErrorsToBackend', function($log, logErrorsToBackend) {
 *       return function myExceptionHandler(exception, cause) {
 *         logErrorsToBackend(exception, cause);
 *         $log.warn(exception, cause);
 *       };
 *     }]);
 * ```
 *
 * <hr />
 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
 * (unless executed during a digest).
 *
 * If you wish, you can manually delegate exceptions, e.g.
 * `try { ... } catch(e) { $exceptionHandler(e); }`
 *
 * @param {Error} exception Exception associated with the error.
 * @param {string=} cause Optional information about the context in which
 *       the error was thrown.
 *
 */function $ExceptionHandlerProvider(){this.$get=['$log',function($log){return function(exception,cause){$log.error.apply($log,arguments);};}];}var $$ForceReflowProvider=/** @this */function(){this.$get=['$document',function($document){return function(domNode){//the line below will force the browser to perform a repaint so
//that all the animated elements within the animation frame will
//be properly updated and drawn on screen. This is required to
//ensure that the preparation animation is properly flushed so that
//the active state picks up from there. DO NOT REMOVE THIS LINE.
//DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
//WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
//WILL TAKE YEARS AWAY FROM YOUR LIFE.
if(domNode){if(!domNode.nodeType&&domNode instanceof jqLite){domNode=domNode[0];}}else{domNode=$document[0].body;}return domNode.offsetWidth+1;};}];};var APPLICATION_JSON='application/json';var CONTENT_TYPE_APPLICATION_JSON={'Content-Type':APPLICATION_JSON+';charset=utf-8'};var JSON_START=/^\[|^\{(?!\{)/;var JSON_ENDS={'[':/]$/,'{':/}$/};var JSON_PROTECTION_PREFIX=/^\)]\}',?\n/;var $httpMinErr=minErr('$http');function serializeValue(v){if(isObject(v)){return isDate(v)?v.toISOString():toJson(v);}return v;}/** @this */function $HttpParamSerializerProvider(){/**
   * @ngdoc service
   * @name $httpParamSerializer
   * @description
   *
   * Default {@link $http `$http`} params serializer that converts objects to strings
   * according to the following rules:
   *
   * * `{'foo': 'bar'}` results in `foo=bar`
   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D` (stringified and encoded representation of an object)
   *
   * Note that serializer will sort the request parameters alphabetically.
   * */this.$get=function(){return function ngParamSerializer(params){if(!params)return'';var parts=[];forEachSorted(params,function(value,key){if(value===null||isUndefined(value)||isFunction(value))return;if(isArray(value)){forEach(value,function(v){parts.push(encodeUriQuery(key)+'='+encodeUriQuery(serializeValue(v)));});}else{parts.push(encodeUriQuery(key)+'='+encodeUriQuery(serializeValue(value)));}});return parts.join('&');};};}/** @this */function $HttpParamSerializerJQLikeProvider(){/**
   * @ngdoc service
   * @name $httpParamSerializerJQLike
   *
   * @description
   *
   * Alternative {@link $http `$http`} params serializer that follows
   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
   * The serializer will also sort the params alphabetically.
   *
   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
   *
   * ```js
   * $http({
   *   url: myUrl,
   *   method: 'GET',
   *   params: myParams,
   *   paramSerializer: '$httpParamSerializerJQLike'
   * });
   * ```
   *
   * It is also possible to set it as the default `paramSerializer` in the
   * {@link $httpProvider#defaults `$httpProvider`}.
   *
   * Additionally, you can inject the serializer and use it explicitly, for example to serialize
   * form data for submission:
   *
   * ```js
   * .controller(function($http, $httpParamSerializerJQLike) {
   *   //...
   *
   *   $http({
   *     url: myUrl,
   *     method: 'POST',
   *     data: $httpParamSerializerJQLike(myData),
   *     headers: {
   *       'Content-Type': 'application/x-www-form-urlencoded'
   *     }
   *   });
   *
   * });
   * ```
   *
   * */this.$get=function(){return function jQueryLikeParamSerializer(params){if(!params)return'';var parts=[];serialize(params,'',true);return parts.join('&');function serialize(toSerialize,prefix,topLevel){if(toSerialize===null||isUndefined(toSerialize))return;if(isArray(toSerialize)){forEach(toSerialize,function(value,index){serialize(value,prefix+'['+(isObject(value)?index:'')+']');});}else if(isObject(toSerialize)&&!isDate(toSerialize)){forEachSorted(toSerialize,function(value,key){serialize(value,prefix+(topLevel?'':'[')+key+(topLevel?'':']'));});}else{parts.push(encodeUriQuery(prefix)+'='+encodeUriQuery(serializeValue(toSerialize)));}}};};}function defaultHttpResponseTransform(data,headers){if(isString(data)){// Strip json vulnerability protection prefix and trim whitespace
var tempData=data.replace(JSON_PROTECTION_PREFIX,'').trim();if(tempData){var contentType=headers('Content-Type');var hasJsonContentType=contentType&&contentType.indexOf(APPLICATION_JSON)===0;if(hasJsonContentType||isJsonLike(tempData)){try{data=fromJson(tempData);}catch(e){if(!hasJsonContentType){return data;}throw $httpMinErr('baddata','Data must be a valid JSON object. Received: "{0}". '+'Parse error: "{1}"',data,e);}}}}return data;}function isJsonLike(str){var jsonStart=str.match(JSON_START);return jsonStart&&JSON_ENDS[jsonStart[0]].test(str);}/**
 * Parse headers into key value object
 *
 * @param {string} headers Raw headers as a string
 * @returns {Object} Parsed headers as key value object
 */function parseHeaders(headers){var parsed=createMap(),i;function fillInParsed(key,val){if(key){parsed[key]=parsed[key]?parsed[key]+', '+val:val;}}if(isString(headers)){forEach(headers.split('\n'),function(line){i=line.indexOf(':');fillInParsed(lowercase(trim(line.substr(0,i))),trim(line.substr(i+1)));});}else if(isObject(headers)){forEach(headers,function(headerVal,headerKey){fillInParsed(lowercase(headerKey),trim(headerVal));});}return parsed;}/**
 * Returns a function that provides access to parsed headers.
 *
 * Headers are lazy parsed when first requested.
 * @see parseHeaders
 *
 * @param {(string|Object)} headers Headers to provide access to.
 * @returns {function(string=)} Returns a getter function which if called with:
 *
 *   - if called with an argument returns a single header value or null
 *   - if called with no arguments returns an object containing all headers.
 */function headersGetter(headers){var headersObj;return function(name){if(!headersObj)headersObj=parseHeaders(headers);if(name){var value=headersObj[lowercase(name)];if(value===undefined){value=null;}return value;}return headersObj;};}/**
 * Chain all given functions
 *
 * This function is used for both request and response transforming
 *
 * @param {*} data Data to transform.
 * @param {function(string=)} headers HTTP headers getter fn.
 * @param {number} status HTTP status code of the response.
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
 * @returns {*} Transformed data.
 */function transformData(data,headers,status,fns){if(isFunction(fns)){return fns(data,headers,status);}forEach(fns,function(fn){data=fn(data,headers,status);});return data;}function isSuccess(status){return 200<=status&&status<300;}/**
 * @ngdoc provider
 * @name $httpProvider
 * @this
 *
 * @description
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
 * */function $HttpProvider(){/**
   * @ngdoc property
   * @name $httpProvider#defaults
   * @description
   *
   * Object containing default values for all {@link ng.$http $http} requests.
   *
   * - **`defaults.cache`** - {boolean|Object} - A boolean value or object created with
   * {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of HTTP responses
   * by default. See {@link $http#caching $http Caching} for more information.
   *
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
   * setting default headers.
   *     - **`defaults.headers.common`**
   *     - **`defaults.headers.post`**
   *     - **`defaults.headers.put`**
   *     - **`defaults.headers.patch`**
   *
   * - **`defaults.jsonpCallbackParam`** - `{string}` - the name of the query parameter that passes the name of the
   * callback in a JSONP request. The value of this parameter will be replaced with the expression generated by the
   * {@link $jsonpCallbacks} service. Defaults to `'callback'`.
   *
   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
   *  used to the prepare string representation of request parameters (specified as an object).
   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
   *
   * - **`defaults.transformRequest`** -
   * `{Array<function(data, headersGetter)>|function(data, headersGetter)}` -
   * An array of functions (or a single function) which are applied to the request data.
   * By default, this is an array with one request transformation function:
   *
   *   - If the `data` property of the request configuration object contains an object, serialize it
   *     into JSON format.
   *
   * - **`defaults.transformResponse`** -
   * `{Array<function(data, headersGetter, status)>|function(data, headersGetter, status)}` -
   * An array of functions (or a single function) which are applied to the response data. By default,
   * this is an array which applies one response transformation function that does two things:
   *
   *  - If XSRF prefix is detected, strip it
   *    (see {@link ng.$http#security-considerations Security Considerations in the $http docs}).
   *  - If the `Content-Type` is `application/json` or the response looks like JSON,
   *    deserialize it using a JSON parser.
   *
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
   * Defaults value is `'XSRF-TOKEN'`.
   *
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
   *
   **/var defaults=this.defaults={// transform incoming response data
transformResponse:[defaultHttpResponseTransform],// transform outgoing request data
transformRequest:[function(d){return isObject(d)&&!isFile(d)&&!isBlob(d)&&!isFormData(d)?toJson(d):d;}],// default headers
headers:{common:{'Accept':'application/json, text/plain, */*'},post:shallowCopy(CONTENT_TYPE_APPLICATION_JSON),put:shallowCopy(CONTENT_TYPE_APPLICATION_JSON),patch:shallowCopy(CONTENT_TYPE_APPLICATION_JSON)},xsrfCookieName:'XSRF-TOKEN',xsrfHeaderName:'X-XSRF-TOKEN',paramSerializer:'$httpParamSerializer',jsonpCallbackParam:'callback'};var useApplyAsync=false;/**
   * @ngdoc method
   * @name $httpProvider#useApplyAsync
   * @description
   *
   * Configure $http service to combine processing of multiple http responses received at around
   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
   * significant performance improvement for bigger applications that make many HTTP requests
   * concurrently (common during application bootstrap).
   *
   * Defaults to false. If no value is specified, returns the current configured value.
   *
   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
   *    to load and share the same digest cycle.
   *
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
   *    otherwise, returns the current configured value.
   **/this.useApplyAsync=function(value){if(isDefined(value)){useApplyAsync=!!value;return this;}return useApplyAsync;};/**
   * @ngdoc property
   * @name $httpProvider#interceptors
   * @description
   *
   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
   * pre-processing of request or postprocessing of responses.
   *
   * These service factories are ordered by request, i.e. they are applied in the same order as the
   * array, on request, but reverse order, on response.
   *
   * {@link ng.$http#interceptors Interceptors detailed info}
   **/var interceptorFactories=this.interceptors=[];this.$get=['$browser','$httpBackend','$$cookieReader','$cacheFactory','$rootScope','$q','$injector','$sce',function($browser,$httpBackend,$$cookieReader,$cacheFactory,$rootScope,$q,$injector,$sce){var defaultCache=$cacheFactory('$http');/**
     * Make sure that default param serializer is exposed as a function
     */defaults.paramSerializer=isString(defaults.paramSerializer)?$injector.get(defaults.paramSerializer):defaults.paramSerializer;/**
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
     * The reversal is needed so that we can build up the interception chain around the
     * server request.
     */var reversedInterceptors=[];forEach(interceptorFactories,function(interceptorFactory){reversedInterceptors.unshift(isString(interceptorFactory)?$injector.get(interceptorFactory):$injector.invoke(interceptorFactory));});/**
     * @ngdoc service
     * @kind function
     * @name $http
     * @requires ng.$httpBackend
     * @requires $cacheFactory
     * @requires $rootScope
     * @requires $q
     * @requires $injector
     *
     * @description
     * The `$http` service is a core Angular service that facilitates communication with the remote
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
     *
     * For unit testing applications that use `$http` service, see
     * {@link ngMock.$httpBackend $httpBackend mock}.
     *
     * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
     *
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
     * it is important to familiarize yourself with these APIs and the guarantees they provide.
     *
     *
     * ## General usage
     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
     *
     * ```js
     *   // Simple GET request example:
     *   $http({
     *     method: 'GET',
     *     url: '/someUrl'
     *   }).then(function successCallback(response) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }, function errorCallback(response) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     * The response object has these properties:
     *
     *   - **data** – `{string|Object}` – The response body transformed with the transform
     *     functions.
     *   - **status** – `{number}` – HTTP status code of the response.
     *   - **headers** – `{function([headerName])}` – Header getter function.
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
     *   - **statusText** – `{string}` – HTTP status text of the response.
     *   - **xhrStatus** – `{string}` – Status of the XMLHttpRequest (`complete`, `error`, `timeout` or `abort`).
     *
     * A response status code between 200 and 299 is considered a success status and will result in
     * the success callback being called. Any response status code outside of that range is
     * considered an error status and will result in the error callback being called.
     * Also, status codes less than -1 are normalized to zero. -1 usually means the request was
     * aborted, e.g. using a `config.timeout`.
     * Note that if the response is a redirect, XMLHttpRequest will transparently follow it, meaning
     * that the outcome (success or error) will be determined by the final response status code.
     *
     *
     * ## Shortcut methods
     *
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
     * last argument.
     *
     * ```js
     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
     * ```
     *
     * Complete list of shortcut methods:
     *
     * - {@link ng.$http#get $http.get}
     * - {@link ng.$http#head $http.head}
     * - {@link ng.$http#post $http.post}
     * - {@link ng.$http#put $http.put}
     * - {@link ng.$http#delete $http.delete}
     * - {@link ng.$http#jsonp $http.jsonp}
     * - {@link ng.$http#patch $http.patch}
     *
     *
     * ## Writing Unit Tests that use $http
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
     * request using trained responses.
     *
     * ```
     * $httpBackend.expectGET(...);
     * $http.get(...);
     * $httpBackend.flush();
     * ```
     *
     * ## Setting HTTP Headers
     *
     * The $http service will automatically add certain HTTP headers to all requests. These defaults
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
     * object, which currently contains this default configuration:
     *
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
     *   - <code>Accept: application/json, text/plain, \*&#65279;/&#65279;\*</code>
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
     *   - `Content-Type: application/json`
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
     *   - `Content-Type: application/json`
     *
     * To add or overwrite these defaults, simply add or remove a property from these configuration
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
     * with the lowercased HTTP method name as the key, e.g.
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
     *
     * The defaults can also be set at runtime via the `$http.defaults` object in the same
     * fashion. For example:
     *
     * ```
     * module.run(function($http) {
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w';
     * });
     * ```
     *
     * In addition, you can supply a `headers` property in the config object passed when
     * calling `$http(config)`, which overrides the defaults without changing them globally.
     *
     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
     * Use the `headers` property, setting the desired header to `undefined`. For example:
     *
     * ```js
     * var req = {
     *  method: 'POST',
     *  url: 'http://example.com',
     *  headers: {
     *    'Content-Type': undefined
     *  },
     *  data: { test: 'test' }
     * }
     *
     * $http(req).then(function(){...}, function(){...});
     * ```
     *
     * ## Transforming Requests and Responses
     *
     * Both requests and responses can be transformed using transformation functions: `transformRequest`
     * and `transformResponse`. These properties can be a single function that returns
     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
     *
     * <div class="alert alert-warning">
     * **Note:** Angular does not make a copy of the `data` parameter before it is passed into the `transformRequest` pipeline.
     * That means changes to the properties of `data` are not local to the transform function (since Javascript passes objects by reference).
     * For example, when calling `$http.get(url, $scope.myObject)`, modifications to the object's properties in a transformRequest
     * function will be reflected on the scope and in any templates where the object is data-bound.
     * To prevent this, transform functions should have no side-effects.
     * If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.
     * </div>
     *
     * ### Default Transformations
     *
     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
     * `defaults.transformResponse` properties. If a request does not provide its own transformations
     * then these will be applied.
     *
     * You can augment or replace the default transformations by modifying these properties by adding to or
     * replacing the array.
     *
     * Angular provides the following default transformations:
     *
     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`) is
     * an array with one function that does the following:
     *
     * - If the `data` property of the request configuration object contains an object, serialize it
     *   into JSON format.
     *
     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`) is
     * an array with one function that does the following:
     *
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
     *  - If the `Content-Type` is `application/json` or the response looks like JSON,
   *      deserialize it using a JSON parser.
     *
     *
     * ### Overriding the Default Transformations Per Request
     *
     * If you wish to override the request/response transformations only for a single request then provide
     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
     * into `$http`.
     *
     * Note that if you provide these properties on the config object the default transformations will be
     * overwritten. If you wish to augment the default transformations then you must include them in your
     * local transformation array.
     *
     * The following code demonstrates adding a new response transformation to be run after the default response
     * transformations have been run.
     *
     * ```js
     * function appendTransform(defaults, transform) {
     *
     *   // We can't guarantee that the default transformation is an array
     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
     *
     *   // Append the new transformation to the defaults
     *   return defaults.concat(transform);
     * }
     *
     * $http({
     *   url: '...',
     *   method: 'GET',
     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
     *     return doTransform(value);
     *   })
     * });
     * ```
     *
     *
     * ## Caching
     *
     * {@link ng.$http `$http`} responses are not cached by default. To enable caching, you must
     * set the config.cache value or the default cache value to TRUE or to a cache object (created
     * with {@link ng.$cacheFactory `$cacheFactory`}). If defined, the value of config.cache takes
     * precedence over the default cache value.
     *
     * In order to:
     *   * cache all responses - set the default cache value to TRUE or to a cache object
     *   * cache a specific response - set config.cache value to TRUE or to a cache object
     *
     * If caching is enabled, but neither the default cache nor config.cache are set to a cache object,
     * then the default `$cacheFactory("$http")` object is used.
     *
     * The default cache value can be set by updating the
     * {@link ng.$http#defaults `$http.defaults.cache`} property or the
     * {@link $httpProvider#defaults `$httpProvider.defaults.cache`} property.
     *
     * When caching is enabled, {@link ng.$http `$http`} stores the response from the server using
     * the relevant cache object. The next time the same request is made, the response is returned
     * from the cache without sending a request to the server.
     *
     * Take note that:
     *
     *   * Only GET and JSONP requests are cached.
     *   * The cache key is the request URL including search parameters; headers are not considered.
     *   * Cached responses are returned asynchronously, in the same way as responses from the server.
     *   * If multiple identical requests are made using the same cache, which is not yet populated,
     *     one request will be made to the server and remaining requests will return the same response.
     *   * A cache-control header on the response does not affect if or how responses are cached.
     *
     *
     * ## Interceptors
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication, or any kind of synchronous or
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
     * able to intercept requests before they are handed to the server and
     * responses before they are handed over to the application code that
     * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
     *
     * The interceptors are service factories that are registered with the `$httpProvider` by
     * adding them to the `$httpProvider.interceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor.
     *
     * There are two kinds of interceptors (and two kinds of rejection interceptors):
     *
     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
     *     modify the `config` object or create a new one. The function needs to return the `config`
     *     object directly, or a promise containing the `config` or a new `config` object.
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *   * `response`: interceptors get called with http `response` object. The function is free to
     *     modify the `response` object or create a new one. The function needs to return the `response`
     *     object directly, or as a promise containing the `response` or a new `response` object.
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *
     *
     * ```js
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config;
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response;
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       }
     *     };
     *   });
     *
     *   $httpProvider.interceptors.push('myHttpInterceptor');
     *
     *
     *   // alternatively, register the interceptor via an anonymous factory
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *
     *       'response': function(response) {
     *          // same as above
     *       }
     *     };
     *   });
     * ```
     *
     * ## Security Considerations
     *
     * When designing web applications, consider security threats from:
     *
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
     *
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
     * pre-configured with strategies that address these issues, but for this to work backend server
     * cooperation is required.
     *
     * ### JSON Vulnerability Protection
     *
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * allows third party website to turn your JSON resource URL into
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
     * Angular will automatically strip the prefix before processing it as JSON.
     *
     * For example if your server needs to return:
     * ```js
     * ['one','two']
     * ```
     *
     * which is vulnerable to attack, your server can return:
     * ```js
     * )]}',
     * ['one','two']
     * ```
     *
     * Angular will strip the prefix, before processing the JSON.
     *
     *
     * ### Cross Site Request Forgery (XSRF) Protection
     *
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by
     * which the attacker can trick an authenticated user into unknowingly executing actions on your
     * website. Angular provides a mechanism to counter XSRF. When performing XHR requests, the
     * $http service reads a token from a cookie (by default, `XSRF-TOKEN`) and sets it as an HTTP
     * header (`X-XSRF-TOKEN`). Since only JavaScript that runs on your domain could read the
     * cookie, your server can be assured that the XHR came from JavaScript running on your domain.
     * The header will not be set for cross-domain requests.
     *
     * To take advantage of this, your server needs to set a token in a JavaScript readable session
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
     * that only JavaScript running on your domain could have sent the request. The token must be
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
     * making up its own tokens). We recommend that the token is a digest of your site's
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
     * for added security.
     *
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
     * or the per-request config object.
     *
     * In order to prevent collisions in environments where multiple Angular apps share the
     * same domain or subdomain, we recommend that each application uses unique cookie name.
     *
     * @param {object} config Object describing the request to be made and how it should be
     *    processed. The object has following properties:
     *
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
     *    - **url** – `{string|TrustedObject}` – Absolute or relative URL of the resource that is being requested;
     *      or an object created by a call to `$sce.trustAsResourceUrl(url)`.
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
     *      with the `paramSerializer` and appended as GET parameters.
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
     *      HTTP headers to send to the server. If the return value of a function is null, the
     *      header will not be sent. Functions accept a config object as an argument.
     *    - **eventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest object.
     *      To bind events to the XMLHttpRequest upload object, use `uploadEventHandlers`.
     *      The handler will be called in the context of a `$apply` block.
     *    - **uploadEventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest upload
     *      object. To bind events to the XMLHttpRequest object, use `eventHandlers`.
     *      The handler will be called in the context of a `$apply` block.
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
     *    - **transformRequest** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      request body and headers and returns its transformed (typically serialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **transformResponse** –
     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      response body, headers and status and returns its transformed (typically deserialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
     *      prepare the string representation of request parameters (specified as an object).
     *      If specified as string, it is interpreted as function registered with the
     *      {@link $injector $injector}, which means you can create your own serializer
     *      by registering it as a {@link auto.$provide#service service}.
     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
     *    - **cache** – `{boolean|Object}` – A boolean value or object created with
     *      {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of the HTTP response.
     *      See {@link $http#caching $http Caching} for more information.
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
     *      that should abort the request when resolved.
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.
     *    - **responseType** - `{string}` - see
     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
     *
     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
     *                        when the request succeeds or fails.
     *
     *
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
     *   requests. This is primarily meant to be used for debugging purposes.
     *
     *
     * @example
<example module="httpExample" name="http-service">
<file name="index.html">
  <div ng-controller="FetchController">
    <select ng-model="method" aria-label="Request method">
      <option>GET</option>
      <option>JSONP</option>
    </select>
    <input type="text" ng-model="url" size="80" aria-label="URL" />
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
    <button id="samplejsonpbtn"
      ng-click="updateModel('JSONP',
                    'https://angularjs.org/greet.php?name=Super%20Hero')">
      Sample JSONP
    </button>
    <button id="invalidjsonpbtn"
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist')">
        Invalid JSONP
      </button>
    <pre>http status code: {{status}}</pre>
    <pre>http response data: {{data}}</pre>
  </div>
</file>
<file name="script.js">
  angular.module('httpExample', [])
    .config(['$sceDelegateProvider', function($sceDelegateProvider) {
      // We must whitelist the JSONP endpoint that we are using to show that we trust it
      $sceDelegateProvider.resourceUrlWhitelist([
        'self',
        'https://angularjs.org/**'
      ]);
    }])
    .controller('FetchController', ['$scope', '$http', '$templateCache',
      function($scope, $http, $templateCache) {
        $scope.method = 'GET';
        $scope.url = 'http-hello.html';

        $scope.fetch = function() {
          $scope.code = null;
          $scope.response = null;

          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
            then(function(response) {
              $scope.status = response.status;
              $scope.data = response.data;
            }, function(response) {
              $scope.data = response.data || 'Request failed';
              $scope.status = response.status;
          });
        };

        $scope.updateModel = function(method, url) {
          $scope.method = method;
          $scope.url = url;
        };
      }]);
</file>
<file name="http-hello.html">
  Hello, $http!
</file>
<file name="protractor.js" type="protractor">
  var status = element(by.binding('status'));
  var data = element(by.binding('data'));
  var fetchBtn = element(by.id('fetchbtn'));
  var sampleGetBtn = element(by.id('samplegetbtn'));
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

  it('should make an xhr GET request', function() {
    sampleGetBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Hello, \$http!/);
  });

// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
// it('should make a JSONP request to angularjs.org', function() {
//   var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
//   sampleJsonpBtn.click();
//   fetchBtn.click();
//   expect(status.getText()).toMatch('200');
//   expect(data.getText()).toMatch(/Super Hero!/);
// });

  it('should make JSONP request to invalid URL and invoke the error handler',
      function() {
    invalidJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('0');
    expect(data.getText()).toMatch('Request failed');
  });
</file>
</example>
     */function $http(requestConfig){if(!isObject(requestConfig)){throw minErr('$http')('badreq','Http request configuration must be an object.  Received: {0}',requestConfig);}if(!isString($sce.valueOf(requestConfig.url))){throw minErr('$http')('badreq','Http request configuration url must be a string or a $sce trusted object.  Received: {0}',requestConfig.url);}var config=extend({method:'get',transformRequest:defaults.transformRequest,transformResponse:defaults.transformResponse,paramSerializer:defaults.paramSerializer,jsonpCallbackParam:defaults.jsonpCallbackParam},requestConfig);config.headers=mergeHeaders(requestConfig);config.method=uppercase(config.method);config.paramSerializer=isString(config.paramSerializer)?$injector.get(config.paramSerializer):config.paramSerializer;$browser.$$incOutstandingRequestCount();var requestInterceptors=[];var responseInterceptors=[];var promise=$q.resolve(config);// apply interceptors
forEach(reversedInterceptors,function(interceptor){if(interceptor.request||interceptor.requestError){requestInterceptors.unshift(interceptor.request,interceptor.requestError);}if(interceptor.response||interceptor.responseError){responseInterceptors.push(interceptor.response,interceptor.responseError);}});promise=chainInterceptors(promise,requestInterceptors);promise=promise.then(serverRequest);promise=chainInterceptors(promise,responseInterceptors);promise=promise.finally(completeOutstandingRequest);return promise;function chainInterceptors(promise,interceptors){for(var i=0,ii=interceptors.length;i<ii;){var thenFn=interceptors[i++];var rejectFn=interceptors[i++];promise=promise.then(thenFn,rejectFn);}interceptors.length=0;return promise;}function completeOutstandingRequest(){$browser.$$completeOutstandingRequest(noop);}function executeHeaderFns(headers,config){var headerContent,processedHeaders={};forEach(headers,function(headerFn,header){if(isFunction(headerFn)){headerContent=headerFn(config);if(headerContent!=null){processedHeaders[header]=headerContent;}}else{processedHeaders[header]=headerFn;}});return processedHeaders;}function mergeHeaders(config){var defHeaders=defaults.headers,reqHeaders=extend({},config.headers),defHeaderName,lowercaseDefHeaderName,reqHeaderName;defHeaders=extend({},defHeaders.common,defHeaders[lowercase(config.method)]);// using for-in instead of forEach to avoid unnecessary iteration after header has been found
defaultHeadersIteration:for(defHeaderName in defHeaders){lowercaseDefHeaderName=lowercase(defHeaderName);for(reqHeaderName in reqHeaders){if(lowercase(reqHeaderName)===lowercaseDefHeaderName){continue defaultHeadersIteration;}}reqHeaders[defHeaderName]=defHeaders[defHeaderName];}// execute if header value is a function for merged headers
return executeHeaderFns(reqHeaders,shallowCopy(config));}function serverRequest(config){var headers=config.headers;var reqData=transformData(config.data,headersGetter(headers),undefined,config.transformRequest);// strip content-type if data is undefined
if(isUndefined(reqData)){forEach(headers,function(value,header){if(lowercase(header)==='content-type'){delete headers[header];}});}if(isUndefined(config.withCredentials)&&!isUndefined(defaults.withCredentials)){config.withCredentials=defaults.withCredentials;}// send request
return sendReq(config,reqData).then(transformResponse,transformResponse);}function transformResponse(response){// make a copy since the response must be cacheable
var resp=extend({},response);resp.data=transformData(response.data,response.headers,response.status,config.transformResponse);return isSuccess(response.status)?resp:$q.reject(resp);}}$http.pendingRequests=[];/**
     * @ngdoc method
     * @name $http#get
     *
     * @description
     * Shortcut method to perform `GET` request.
     *
     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     *//**
     * @ngdoc method
     * @name $http#delete
     *
     * @description
     * Shortcut method to perform `DELETE` request.
     *
     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     *//**
     * @ngdoc method
     * @name $http#head
     *
     * @description
     * Shortcut method to perform `HEAD` request.
     *
     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     *//**
     * @ngdoc method
     * @name $http#jsonp
     *
     * @description
     * Shortcut method to perform `JSONP` request.
     *
     * Note that, since JSONP requests are sensitive because the response is given full access to the browser,
     * the url must be declared, via {@link $sce} as a trusted resource URL.
     * You can trust a URL by adding it to the whitelist via
     * {@link $sceDelegateProvider#resourceUrlWhitelist  `$sceDelegateProvider.resourceUrlWhitelist`} or
     * by explicitly trusting the URL via {@link $sce#trustAsResourceUrl `$sce.trustAsResourceUrl(url)`}.
     *
     * JSONP requests must specify a callback to be used in the response from the server. This callback
     * is passed as a query parameter in the request. You must specify the name of this parameter by
     * setting the `jsonpCallbackParam` property on the request config object.
     *
     * ```
     * $http.jsonp('some/trusted/url', {jsonpCallbackParam: 'callback'})
     * ```
     *
     * You can also specify a default callback parameter name in `$http.defaults.jsonpCallbackParam`.
     * Initially this is set to `'callback'`.
     *
     * <div class="alert alert-danger">
     * You can no longer use the `JSON_CALLBACK` string as a placeholder for specifying where the callback
     * parameter value should go.
     * </div>
     *
     * If you would like to customise where and how the callbacks are stored then try overriding
     * or decorating the {@link $jsonpCallbacks} service.
     *
     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */createShortMethods('get','delete','head','jsonp');/**
     * @ngdoc method
     * @name $http#post
     *
     * @description
     * Shortcut method to perform `POST` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     *//**
     * @ngdoc method
     * @name $http#put
     *
     * @description
     * Shortcut method to perform `PUT` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     *//**
      * @ngdoc method
      * @name $http#patch
      *
      * @description
      * Shortcut method to perform `PATCH` request.
      *
      * @param {string} url Relative or absolute URL specifying the destination of the request
      * @param {*} data Request content
      * @param {Object=} config Optional configuration object
      * @returns {HttpPromise} Future object
      */createShortMethodsWithData('post','put','patch');/**
         * @ngdoc property
         * @name $http#defaults
         *
         * @description
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
         * default headers, withCredentials as well as request and response transformations.
         *
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
         */$http.defaults=defaults;return $http;function createShortMethods(names){forEach(arguments,function(name){$http[name]=function(url,config){return $http(extend({},config||{},{method:name,url:url}));};});}function createShortMethodsWithData(name){forEach(arguments,function(name){$http[name]=function(url,data,config){return $http(extend({},config||{},{method:name,url:url,data:data}));};});}/**
     * Makes the request.
     *
     * !!! ACCESSES CLOSURE VARS:
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
     */function sendReq(config,reqData){var deferred=$q.defer(),promise=deferred.promise,cache,cachedResp,reqHeaders=config.headers,isJsonp=lowercase(config.method)==='jsonp',url=config.url;if(isJsonp){// JSONP is a pretty sensitive operation where we're allowing a script to have full access to
// our DOM and JS space.  So we require that the URL satisfies SCE.RESOURCE_URL.
url=$sce.getTrustedResourceUrl(url);}else if(!isString(url)){// If it is not a string then the URL must be a $sce trusted object
url=$sce.valueOf(url);}url=buildUrl(url,config.paramSerializer(config.params));if(isJsonp){// Check the url and add the JSONP callback placeholder
url=sanitizeJsonpCallbackParam(url,config.jsonpCallbackParam);}$http.pendingRequests.push(config);promise.then(removePendingReq,removePendingReq);if((config.cache||defaults.cache)&&config.cache!==false&&(config.method==='GET'||config.method==='JSONP')){cache=isObject(config.cache)?config.cache:isObject(/** @type {?} */defaults.cache)?/** @type {?} */defaults.cache:defaultCache;}if(cache){cachedResp=cache.get(url);if(isDefined(cachedResp)){if(isPromiseLike(cachedResp)){// cached request has already been sent, but there is no response yet
cachedResp.then(resolvePromiseWithResult,resolvePromiseWithResult);}else{// serving from cache
if(isArray(cachedResp)){resolvePromise(cachedResp[1],cachedResp[0],shallowCopy(cachedResp[2]),cachedResp[3],cachedResp[4]);}else{resolvePromise(cachedResp,200,{},'OK','complete');}}}else{// put the promise for the non-transformed response into cache as a placeholder
cache.put(url,promise);}}// if we won't have the response in cache, set the xsrf headers and
// send the request to the backend
if(isUndefined(cachedResp)){var xsrfValue=urlIsSameOrigin(config.url)?$$cookieReader()[config.xsrfCookieName||defaults.xsrfCookieName]:undefined;if(xsrfValue){reqHeaders[config.xsrfHeaderName||defaults.xsrfHeaderName]=xsrfValue;}$httpBackend(config.method,url,reqData,done,reqHeaders,config.timeout,config.withCredentials,config.responseType,createApplyHandlers(config.eventHandlers),createApplyHandlers(config.uploadEventHandlers));}return promise;function createApplyHandlers(eventHandlers){if(eventHandlers){var applyHandlers={};forEach(eventHandlers,function(eventHandler,key){applyHandlers[key]=function(event){if(useApplyAsync){$rootScope.$applyAsync(callEventHandler);}else if($rootScope.$$phase){callEventHandler();}else{$rootScope.$apply(callEventHandler);}function callEventHandler(){eventHandler(event);}};});return applyHandlers;}}/**
       * Callback registered to $httpBackend():
       *  - caches the response if desired
       *  - resolves the raw $http promise
       *  - calls $apply
       */function done(status,response,headersString,statusText,xhrStatus){if(cache){if(isSuccess(status)){cache.put(url,[status,response,parseHeaders(headersString),statusText,xhrStatus]);}else{// remove promise from the cache
cache.remove(url);}}function resolveHttpPromise(){resolvePromise(response,status,headersString,statusText,xhrStatus);}if(useApplyAsync){$rootScope.$applyAsync(resolveHttpPromise);}else{resolveHttpPromise();if(!$rootScope.$$phase)$rootScope.$apply();}}/**
       * Resolves the raw $http promise.
       */function resolvePromise(response,status,headers,statusText,xhrStatus){//status: HTTP response status code, 0, -1 (aborted by timeout / promise)
status=status>=-1?status:0;(isSuccess(status)?deferred.resolve:deferred.reject)({data:response,status:status,headers:headersGetter(headers),config:config,statusText:statusText,xhrStatus:xhrStatus});}function resolvePromiseWithResult(result){resolvePromise(result.data,result.status,shallowCopy(result.headers()),result.statusText,result.xhrStatus);}function removePendingReq(){var idx=$http.pendingRequests.indexOf(config);if(idx!==-1)$http.pendingRequests.splice(idx,1);}}function buildUrl(url,serializedParams){if(serializedParams.length>0){url+=(url.indexOf('?')===-1?'?':'&')+serializedParams;}return url;}function sanitizeJsonpCallbackParam(url,key){if(/[&?][^=]+=JSON_CALLBACK/.test(url)){// Throw if the url already contains a reference to JSON_CALLBACK
throw $httpMinErr('badjsonp','Illegal use of JSON_CALLBACK in url, "{0}"',url);}var callbackParamRegex=new RegExp('[&?]'+key+'=');if(callbackParamRegex.test(url)){// Throw if the callback param was already provided
throw $httpMinErr('badjsonp','Illegal use of callback param, "{0}", in url, "{1}"',key,url);}// Add in the JSON_CALLBACK callback param value
url+=(url.indexOf('?')===-1?'?':'&')+key+'=JSON_CALLBACK';return url;}}];}/**
 * @ngdoc service
 * @name $xhrFactory
 * @this
 *
 * @description
 * Factory function used to create XMLHttpRequest objects.
 *
 * Replace or decorate this service to create your own custom XMLHttpRequest objects.
 *
 * ```
 * angular.module('myApp', [])
 * .factory('$xhrFactory', function() {
 *   return function createXhr(method, url) {
 *     return new window.XMLHttpRequest({mozSystem: true});
 *   };
 * });
 * ```
 *
 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
 * @param {string} url URL of the request.
 */function $xhrFactoryProvider(){this.$get=function(){return function createXhr(){return new window.XMLHttpRequest();};};}/**
 * @ngdoc service
 * @name $httpBackend
 * @requires $jsonpCallbacks
 * @requires $document
 * @requires $xhrFactory
 * @this
 *
 * @description
 * HTTP backend used by the {@link ng.$http service} that delegates to
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
 *
 * You should never need to use this service directly, instead use the higher-level abstractions:
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
 *
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
 * $httpBackend} which can be trained with responses.
 */function $HttpBackendProvider(){this.$get=['$browser','$jsonpCallbacks','$document','$xhrFactory',function($browser,$jsonpCallbacks,$document,$xhrFactory){return createHttpBackend($browser,$xhrFactory,$browser.defer,$jsonpCallbacks,$document[0]);}];}function createHttpBackend($browser,createXhr,$browserDefer,callbacks,rawDocument){// TODO(vojta): fix the signature
return function(method,url,post,callback,headers,timeout,withCredentials,responseType,eventHandlers,uploadEventHandlers){url=url||$browser.url();if(lowercase(method)==='jsonp'){var callbackPath=callbacks.createCallback(url);var jsonpDone=jsonpReq(url,callbackPath,function(status,text){// jsonpReq only ever sets status to 200 (OK), 404 (ERROR) or -1 (WAITING)
var response=status===200&&callbacks.getResponse(callbackPath);completeRequest(callback,status,response,'',text,'complete');callbacks.removeCallback(callbackPath);});}else{var xhr=createXhr(method,url);xhr.open(method,url,true);forEach(headers,function(value,key){if(isDefined(value)){xhr.setRequestHeader(key,value);}});xhr.onload=function requestLoaded(){var statusText=xhr.statusText||'';// responseText is the old-school way of retrieving response (supported by IE9)
// response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
var response='response'in xhr?xhr.response:xhr.responseText;// normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
var status=xhr.status===1223?204:xhr.status;// fix status code when it is 0 (0 status is undocumented).
// Occurs when accessing file resources or on Android 4.1 stock browser
// while retrieving files from application cache.
if(status===0){status=response?200:urlResolve(url).protocol==='file'?404:0;}completeRequest(callback,status,response,xhr.getAllResponseHeaders(),statusText,'complete');};var requestError=function(){// The response is always empty
// See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
completeRequest(callback,-1,null,null,'','error');};var requestAborted=function(){completeRequest(callback,-1,null,null,'','abort');};var requestTimeout=function(){// The response is always empty
// See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
completeRequest(callback,-1,null,null,'','timeout');};xhr.onerror=requestError;xhr.onabort=requestAborted;xhr.ontimeout=requestTimeout;forEach(eventHandlers,function(value,key){xhr.addEventListener(key,value);});forEach(uploadEventHandlers,function(value,key){xhr.upload.addEventListener(key,value);});if(withCredentials){xhr.withCredentials=true;}if(responseType){try{xhr.responseType=responseType;}catch(e){// WebKit added support for the json responseType value on 09/03/2013
// https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
// known to throw when setting the value "json" as the response type. Other older
// browsers implementing the responseType
//
// The json response type can be ignored if not supported, because JSON payloads are
// parsed on the client-side regardless.
if(responseType!=='json'){throw e;}}}xhr.send(isUndefined(post)?null:post);}if(timeout>0){var timeoutId=$browserDefer(timeoutRequest,timeout);}else if(isPromiseLike(timeout)){timeout.then(timeoutRequest);}function timeoutRequest(){if(jsonpDone){jsonpDone();}if(xhr){xhr.abort();}}function completeRequest(callback,status,response,headersString,statusText,xhrStatus){// cancel timeout and subsequent timeout promise resolution
if(isDefined(timeoutId)){$browserDefer.cancel(timeoutId);}jsonpDone=xhr=null;callback(status,response,headersString,statusText,xhrStatus);}};function jsonpReq(url,callbackPath,done){url=url.replace('JSON_CALLBACK',callbackPath);// we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
// - fetches local scripts via XHR and evals them
// - adds and immediately removes script elements from the document
var script=rawDocument.createElement('script'),callback=null;script.type='text/javascript';script.src=url;script.async=true;callback=function(event){script.removeEventListener('load',callback);script.removeEventListener('error',callback);rawDocument.body.removeChild(script);script=null;var status=-1;var text='unknown';if(event){if(event.type==='load'&&!callbacks.wasCalled(callbackPath)){event={type:'error'};}text=event.type;status=event.type==='error'?404:200;}if(done){done(status,text);}};script.addEventListener('load',callback);script.addEventListener('error',callback);rawDocument.body.appendChild(script);return callback;}}var $interpolateMinErr=angular.$interpolateMinErr=minErr('$interpolate');$interpolateMinErr.throwNoconcat=function(text){throw $interpolateMinErr('noconcat','Error while interpolating: {0}\nStrict Contextual Escaping disallows '+'interpolations that concatenate multiple expressions when a trusted value is '+'required.  See http://docs.angularjs.org/api/ng.$sce',text);};$interpolateMinErr.interr=function(text,err){return $interpolateMinErr('interr','Can\'t interpolate: {0}\n{1}',text,err.toString());};/**
 * @ngdoc provider
 * @name $interpolateProvider
 * @this
 *
 * @description
 *
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
 *
 * <div class="alert alert-danger">
 * This feature is sometimes used to mix different markup languages, e.g. to wrap an Angular
 * template within a Python Jinja template (or any other template language). Mixing templating
 * languages is **very dangerous**. The embedding template language will not safely escape Angular
 * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)
 * security bugs!
 * </div>
 *
 * @example
<example name="custom-interpolation-markup" module="customInterpolationApp">
<file name="index.html">
<script>
  var customInterpolationApp = angular.module('customInterpolationApp', []);

  customInterpolationApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('//');
    $interpolateProvider.endSymbol('//');
  });


  customInterpolationApp.controller('DemoController', function() {
      this.label = "This binding is brought you by // interpolation symbols.";
  });
</script>
<div ng-controller="DemoController as demo">
    //demo.label//
</div>
</file>
<file name="protractor.js" type="protractor">
  it('should interpolate binding with custom symbols', function() {
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });
</file>
</example>
 */function $InterpolateProvider(){var startSymbol='{{';var endSymbol='}}';/**
   * @ngdoc method
   * @name $interpolateProvider#startSymbol
   * @description
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
   *
   * @param {string=} value new value to set the starting symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */this.startSymbol=function(value){if(value){startSymbol=value;return this;}else{return startSymbol;}};/**
   * @ngdoc method
   * @name $interpolateProvider#endSymbol
   * @description
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
   *
   * @param {string=} value new value to set the ending symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */this.endSymbol=function(value){if(value){endSymbol=value;return this;}else{return endSymbol;}};this.$get=['$parse','$exceptionHandler','$sce',function($parse,$exceptionHandler,$sce){var startSymbolLength=startSymbol.length,endSymbolLength=endSymbol.length,escapedStartRegexp=new RegExp(startSymbol.replace(/./g,escape),'g'),escapedEndRegexp=new RegExp(endSymbol.replace(/./g,escape),'g');function escape(ch){return'\\\\\\'+ch;}function unescapeText(text){return text.replace(escapedStartRegexp,startSymbol).replace(escapedEndRegexp,endSymbol);}// TODO: this is the same as the constantWatchDelegate in parse.js
function constantWatchDelegate(scope,listener,objectEquality,constantInterp){var unwatch=scope.$watch(function constantInterpolateWatch(scope){unwatch();return constantInterp(scope);},listener,objectEquality);return unwatch;}/**
     * @ngdoc service
     * @name $interpolate
     * @kind function
     *
     * @requires $parse
     * @requires $sce
     *
     * @description
     *
     * Compiles a string with markup into an interpolation function. This service is used by the
     * HTML {@link ng.$compile $compile} service for data binding. See
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
     * interpolation markup.
     *
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var exp = $interpolate('Hello {{name | uppercase}}!');
     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
     * ```
     *
     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
     * `true`, the interpolation function will return `undefined` unless all embedded expressions
     * evaluate to a value other than `undefined`.
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var context = {greeting: 'Hello', name: undefined };
     *
     *   // default "forgiving" mode
     *   var exp = $interpolate('{{greeting}} {{name}}!');
     *   expect(exp(context)).toEqual('Hello !');
     *
     *   // "allOrNothing" mode
     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
     *   expect(exp(context)).toBeUndefined();
     *   context.name = 'Angular';
     *   expect(exp(context)).toEqual('Hello Angular!');
     * ```
     *
     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
     *
     * #### Escaped Interpolation
     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
     * or binding.
     *
     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
     * degree, while also enabling code examples to work without relying on the
     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
     *
     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
     * interpolation start/end markers with their escaped counterparts.**
     *
     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
     * output when the $interpolate service processes the text. So, for HTML elements interpolated
     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
     * this is typically useful only when user-data is used in rendering a template from the server, or
     * when otherwise untrusted data is used by a directive.
     *
     * <example name="interpolation">
     *  <file name="index.html">
     *    <div ng-init="username='A user'">
     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
     *        </p>
     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
     *        application, but fails to accomplish their task, because the server has correctly
     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
     *        characters.</p>
     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
     *        from the database by an administrator.</p>
     *    </div>
     *  </file>
     * </example>
     *
     * @knownIssue
     * It is currently not possible for an interpolated expression to contain the interpolation end
     * symbol. For example, `{{ '}}' }}` will be incorrectly interpreted as `{{ ' }}` + `' }}`, i.e.
     * an interpolated expression consisting of a single-quote (`'`) and the `' }}` string.
     *
     * @knownIssue
     * All directives and components must use the standard `{{` `}}` interpolation symbols
     * in their templates. If you change the application interpolation symbols the {@link $compile}
     * service will attempt to denormalize the standard symbols to the custom symbols.
     * The denormalization process is not clever enough to know not to replace instances of the standard
     * symbols where they would not normally be treated as interpolation symbols. For example in the following
     * code snippet the closing braces of the literal object will get incorrectly denormalized:
     *
     * ```
     * <div data-context='{"context":{"id":3,"type":"page"}}">
     * ```
     *
     * The workaround is to ensure that such instances are separated by whitespace:
     * ```
     * <div data-context='{"context":{"id":3,"type":"page"} }">
     * ```
     *
     * See https://github.com/angular/angular.js/pull/14610#issuecomment-219401099 for more information.
     *
     * @param {string} text The text with markup to interpolate.
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
     *    embedded expression in order to return an interpolation function. Strings with no
     *    embedded expression will return null for the interpolation function.
     * @param {string=} trustedContext when provided, the returned function passes the interpolated
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
     *    provides Strict Contextual Escaping for details.
     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
     *    unless all embedded expressions evaluate to a value other than `undefined`.
     * @returns {function(context)} an interpolation function which is used to compute the
     *    interpolated string. The function has these parameters:
     *
     * - `context`: evaluation context for all expressions embedded in the interpolated text
     */function $interpolate(text,mustHaveExpression,trustedContext,allOrNothing){// Provide a quick exit and simplified result function for text with no interpolation
if(!text.length||text.indexOf(startSymbol)===-1){var constantInterp;if(!mustHaveExpression){var unescapedText=unescapeText(text);constantInterp=valueFn(unescapedText);constantInterp.exp=text;constantInterp.expressions=[];constantInterp.$$watchDelegate=constantWatchDelegate;}return constantInterp;}allOrNothing=!!allOrNothing;var startIndex,endIndex,index=0,expressions=[],parseFns=[],textLength=text.length,exp,concat=[],expressionPositions=[];while(index<textLength){if((startIndex=text.indexOf(startSymbol,index))!==-1&&(endIndex=text.indexOf(endSymbol,startIndex+startSymbolLength))!==-1){if(index!==startIndex){concat.push(unescapeText(text.substring(index,startIndex)));}exp=text.substring(startIndex+startSymbolLength,endIndex);expressions.push(exp);parseFns.push($parse(exp,parseStringifyInterceptor));index=endIndex+endSymbolLength;expressionPositions.push(concat.length);concat.push('');}else{// we did not find an interpolation, so we have to add the remainder to the separators array
if(index!==textLength){concat.push(unescapeText(text.substring(index)));}break;}}// Concatenating expressions makes it hard to reason about whether some combination of
// concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
// single expression be used for iframe[src], object[src], etc., we ensure that the value
// that's used is assigned or constructed by some JS code somewhere that is more testable or
// make it obvious that you bound the value to some user controlled value.  This helps reduce
// the load when auditing for XSS issues.
if(trustedContext&&concat.length>1){$interpolateMinErr.throwNoconcat(text);}if(!mustHaveExpression||expressions.length){var compute=function(values){for(var i=0,ii=expressions.length;i<ii;i++){if(allOrNothing&&isUndefined(values[i]))return;concat[expressionPositions[i]]=values[i];}return concat.join('');};var getValue=function(value){return trustedContext?$sce.getTrusted(trustedContext,value):$sce.valueOf(value);};return extend(function interpolationFn(context){var i=0;var ii=expressions.length;var values=new Array(ii);try{for(;i<ii;i++){values[i]=parseFns[i](context);}return compute(values);}catch(err){$exceptionHandler($interpolateMinErr.interr(text,err));}},{// all of these properties are undocumented for now
exp:text,//just for compatibility with regular watchers created via $watch
expressions:expressions,$$watchDelegate:function(scope,listener){var lastValue;return scope.$watchGroup(parseFns,/** @this */function interpolateFnWatcher(values,oldValues){var currValue=compute(values);if(isFunction(listener)){listener.call(this,currValue,values!==oldValues?lastValue:currValue,scope);}lastValue=currValue;});}});}function parseStringifyInterceptor(value){try{value=getValue(value);return allOrNothing&&!isDefined(value)?value:stringify(value);}catch(err){$exceptionHandler($interpolateMinErr.interr(text,err));}}}/**
     * @ngdoc method
     * @name $interpolate#startSymbol
     * @description
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
     *
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
     * the symbol.
     *
     * @returns {string} start symbol.
     */$interpolate.startSymbol=function(){return startSymbol;};/**
     * @ngdoc method
     * @name $interpolate#endSymbol
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
     * the symbol.
     *
     * @returns {string} end symbol.
     */$interpolate.endSymbol=function(){return endSymbol;};return $interpolate;}];}/** @this */function $IntervalProvider(){this.$get=['$rootScope','$window','$q','$$q','$browser',function($rootScope,$window,$q,$$q,$browser){var intervals={};/**
      * @ngdoc service
      * @name $interval
      *
      * @description
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
      * milliseconds.
      *
      * The return value of registering an interval function is a promise. This promise will be
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
      * run indefinitely if `count` is not defined. The value of the notification will be the
      * number of iterations that have run.
      * To cancel an interval, call `$interval.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
      * time.
      *
      * <div class="alert alert-warning">
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
      * with them.  In particular they are not automatically destroyed when a controller's scope or a
      * directive's element are destroyed.
      * You should take this into consideration and make sure to always cancel the interval at the
      * appropriate moment.  See the example below for more details on how and when to do this.
      * </div>
      *
      * @param {function()} fn A function that should be called repeatedly. If no additional arguments
      *   are passed (see below), the function is called with the current iteration count.
      * @param {number} delay Number of milliseconds between each function call.
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
      *   indefinitely.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @param {...*=} Pass additional parameters to the executed function.
      * @returns {promise} A promise which will be notified on each iteration. It will resolve once all iterations of the interval complete.
      *
      * @example
      * <example module="intervalExample" name="interval-service">
      * <file name="index.html">
      *   <script>
      *     angular.module('intervalExample', [])
      *       .controller('ExampleController', ['$scope', '$interval',
      *         function($scope, $interval) {
      *           $scope.format = 'M/d/yy h:mm:ss a';
      *           $scope.blood_1 = 100;
      *           $scope.blood_2 = 120;
      *
      *           var stop;
      *           $scope.fight = function() {
      *             // Don't start a new fight if we are already fighting
      *             if ( angular.isDefined(stop) ) return;
      *
      *             stop = $interval(function() {
      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
      *                 $scope.blood_1 = $scope.blood_1 - 3;
      *                 $scope.blood_2 = $scope.blood_2 - 4;
      *               } else {
      *                 $scope.stopFight();
      *               }
      *             }, 100);
      *           };
      *
      *           $scope.stopFight = function() {
      *             if (angular.isDefined(stop)) {
      *               $interval.cancel(stop);
      *               stop = undefined;
      *             }
      *           };
      *
      *           $scope.resetFight = function() {
      *             $scope.blood_1 = 100;
      *             $scope.blood_2 = 120;
      *           };
      *
      *           $scope.$on('$destroy', function() {
      *             // Make sure that the interval is destroyed too
      *             $scope.stopFight();
      *           });
      *         }])
      *       // Register the 'myCurrentTime' directive factory method.
      *       // We inject $interval and dateFilter service since the factory method is DI.
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
      *         function($interval, dateFilter) {
      *           // return the directive link function. (compile function not needed)
      *           return function(scope, element, attrs) {
      *             var format,  // date format
      *                 stopTime; // so that we can cancel the time updates
      *
      *             // used to update the UI
      *             function updateTime() {
      *               element.text(dateFilter(new Date(), format));
      *             }
      *
      *             // watch the expression, and update the UI on change.
      *             scope.$watch(attrs.myCurrentTime, function(value) {
      *               format = value;
      *               updateTime();
      *             });
      *
      *             stopTime = $interval(updateTime, 1000);
      *
      *             // listen on DOM destroy (removal) event, and cancel the next UI update
      *             // to prevent updating time after the DOM element was removed.
      *             element.on('$destroy', function() {
      *               $interval.cancel(stopTime);
      *             });
      *           }
      *         }]);
      *   </script>
      *
      *   <div>
      *     <div ng-controller="ExampleController">
      *       <label>Date format: <input ng-model="format"></label> <hr/>
      *       Current time is: <span my-current-time="format"></span>
      *       <hr/>
      *       Blood 1 : <font color='red'>{{blood_1}}</font>
      *       Blood 2 : <font color='red'>{{blood_2}}</font>
      *       <button type="button" data-ng-click="fight()">Fight</button>
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
      *     </div>
      *   </div>
      *
      * </file>
      * </example>
      */function interval(fn,delay,count,invokeApply){var hasParams=arguments.length>4,args=hasParams?sliceArgs(arguments,4):[],setInterval=$window.setInterval,clearInterval=$window.clearInterval,iteration=0,skipApply=isDefined(invokeApply)&&!invokeApply,deferred=(skipApply?$$q:$q).defer(),promise=deferred.promise;count=isDefined(count)?count:0;promise.$$intervalId=setInterval(function tick(){if(skipApply){$browser.defer(callback);}else{$rootScope.$evalAsync(callback);}deferred.notify(iteration++);if(count>0&&iteration>=count){deferred.resolve(iteration);clearInterval(promise.$$intervalId);delete intervals[promise.$$intervalId];}if(!skipApply)$rootScope.$apply();},delay);intervals[promise.$$intervalId]=deferred;return promise;function callback(){if(!hasParams){fn(iteration);}else{fn.apply(null,args);}}}/**
      * @ngdoc method
      * @name $interval#cancel
      *
      * @description
      * Cancels a task associated with the `promise`.
      *
      * @param {Promise=} promise returned by the `$interval` function.
      * @returns {boolean} Returns `true` if the task was successfully canceled.
      */interval.cancel=function(promise){if(promise&&promise.$$intervalId in intervals){// Interval cancels should not report as unhandled promise.
markQExceptionHandled(intervals[promise.$$intervalId].promise);intervals[promise.$$intervalId].reject('canceled');$window.clearInterval(promise.$$intervalId);delete intervals[promise.$$intervalId];return true;}return false;};return interval;}];}/**
 * @ngdoc service
 * @name $jsonpCallbacks
 * @requires $window
 * @description
 * This service handles the lifecycle of callbacks to handle JSONP requests.
 * Override this service if you wish to customise where the callbacks are stored and
 * how they vary compared to the requested url.
 */var $jsonpCallbacksProvider=/** @this */function(){this.$get=function(){var callbacks=angular.callbacks;var callbackMap={};function createCallback(callbackId){var callback=function(data){callback.data=data;callback.called=true;};callback.id=callbackId;return callback;}return{/**
       * @ngdoc method
       * @name $jsonpCallbacks#createCallback
       * @param {string} url the url of the JSONP request
       * @returns {string} the callback path to send to the server as part of the JSONP request
       * @description
       * {@link $httpBackend} calls this method to create a callback and get hold of the path to the callback
       * to pass to the server, which will be used to call the callback with its payload in the JSONP response.
       */createCallback:function(url){var callbackId='_'+(callbacks.$$counter++).toString(36);var callbackPath='angular.callbacks.'+callbackId;var callback=createCallback(callbackId);callbackMap[callbackPath]=callbacks[callbackId]=callback;return callbackPath;},/**
       * @ngdoc method
       * @name $jsonpCallbacks#wasCalled
       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
       * @returns {boolean} whether the callback has been called, as a result of the JSONP response
       * @description
       * {@link $httpBackend} calls this method to find out whether the JSONP response actually called the
       * callback that was passed in the request.
       */wasCalled:function(callbackPath){return callbackMap[callbackPath].called;},/**
       * @ngdoc method
       * @name $jsonpCallbacks#getResponse
       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
       * @returns {*} the data received from the response via the registered callback
       * @description
       * {@link $httpBackend} calls this method to get hold of the data that was provided to the callback
       * in the JSONP response.
       */getResponse:function(callbackPath){return callbackMap[callbackPath].data;},/**
       * @ngdoc method
       * @name $jsonpCallbacks#removeCallback
       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
       * @description
       * {@link $httpBackend} calls this method to remove the callback after the JSONP request has
       * completed or timed-out.
       */removeCallback:function(callbackPath){var callback=callbackMap[callbackPath];delete callbacks[callback.id];delete callbackMap[callbackPath];}};};};/**
 * @ngdoc service
 * @name $locale
 *
 * @description
 * $locale service provides localization rules for various Angular components. As of right now the
 * only public api is:
 *
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
 */var PATH_MATCH=/^([^?#]*)(\?([^#]*))?(#(.*))?$/,DEFAULT_PORTS={'http':80,'https':443,'ftp':21};var $locationMinErr=minErr('$location');/**
 * Encode path using encodeUriSegment, ignoring forward slashes
 *
 * @param {string} path Path to encode
 * @returns {string}
 */function encodePath(path){var segments=path.split('/'),i=segments.length;while(i--){segments[i]=encodeUriSegment(segments[i]);}return segments.join('/');}function parseAbsoluteUrl(absoluteUrl,locationObj){var parsedUrl=urlResolve(absoluteUrl);locationObj.$$protocol=parsedUrl.protocol;locationObj.$$host=parsedUrl.hostname;locationObj.$$port=toInt(parsedUrl.port)||DEFAULT_PORTS[parsedUrl.protocol]||null;}var DOUBLE_SLASH_REGEX=/^\s*[\\/]{2,}/;function parseAppUrl(url,locationObj){if(DOUBLE_SLASH_REGEX.test(url)){throw $locationMinErr('badpath','Invalid url "{0}".',url);}var prefixed=url.charAt(0)!=='/';if(prefixed){url='/'+url;}var match=urlResolve(url);locationObj.$$path=decodeURIComponent(prefixed&&match.pathname.charAt(0)==='/'?match.pathname.substring(1):match.pathname);locationObj.$$search=parseKeyValue(match.search);locationObj.$$hash=decodeURIComponent(match.hash);// make sure path starts with '/';
if(locationObj.$$path&&locationObj.$$path.charAt(0)!=='/'){locationObj.$$path='/'+locationObj.$$path;}}function startsWith(str,search){return str.slice(0,search.length)===search;}/**
 *
 * @param {string} base
 * @param {string} url
 * @returns {string} returns text from `url` after `base` or `undefined` if it does not begin with
 *                   the expected string.
 */function stripBaseUrl(base,url){if(startsWith(url,base)){return url.substr(base.length);}}function stripHash(url){var index=url.indexOf('#');return index===-1?url:url.substr(0,index);}function trimEmptyHash(url){return url.replace(/(#.+)|#$/,'$1');}function stripFile(url){return url.substr(0,stripHash(url).lastIndexOf('/')+1);}/* return the server only (scheme://host:port) */function serverBase(url){return url.substring(0,url.indexOf('/',url.indexOf('//')+2));}/**
 * LocationHtml5Url represents a URL
 * This object is exposed as $location service when HTML5 mode is enabled and supported
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} appBaseNoFile application base URL stripped of any filename
 * @param {string} basePrefix URL path prefix
 */function LocationHtml5Url(appBase,appBaseNoFile,basePrefix){this.$$html5=true;basePrefix=basePrefix||'';parseAbsoluteUrl(appBase,this);/**
   * Parse given HTML5 (regular) URL string into properties
   * @param {string} url HTML5 URL
   * @private
   */this.$$parse=function(url){var pathUrl=stripBaseUrl(appBaseNoFile,url);if(!isString(pathUrl)){throw $locationMinErr('ipthprfx','Invalid url "{0}", missing path prefix "{1}".',url,appBaseNoFile);}parseAppUrl(pathUrl,this);if(!this.$$path){this.$$path='/';}this.$$compose();};/**
   * Compose url and update `absUrl` property
   * @private
   */this.$$compose=function(){var search=toKeyValue(this.$$search),hash=this.$$hash?'#'+encodeUriSegment(this.$$hash):'';this.$$url=encodePath(this.$$path)+(search?'?'+search:'')+hash;this.$$absUrl=appBaseNoFile+this.$$url.substr(1);// first char is always '/'
this.$$urlUpdatedByLocation=true;};this.$$parseLinkUrl=function(url,relHref){if(relHref&&relHref[0]==='#'){// special case for links to hash fragments:
// keep the old url and only replace the hash fragment
this.hash(relHref.slice(1));return true;}var appUrl,prevAppUrl;var rewrittenUrl;if(isDefined(appUrl=stripBaseUrl(appBase,url))){prevAppUrl=appUrl;if(basePrefix&&isDefined(appUrl=stripBaseUrl(basePrefix,appUrl))){rewrittenUrl=appBaseNoFile+(stripBaseUrl('/',appUrl)||appUrl);}else{rewrittenUrl=appBase+prevAppUrl;}}else if(isDefined(appUrl=stripBaseUrl(appBaseNoFile,url))){rewrittenUrl=appBaseNoFile+appUrl;}else if(appBaseNoFile===url+'/'){rewrittenUrl=appBaseNoFile;}if(rewrittenUrl){this.$$parse(rewrittenUrl);}return!!rewrittenUrl;};}/**
 * LocationHashbangUrl represents URL
 * This object is exposed as $location service when developer doesn't opt into html5 mode.
 * It also serves as the base class for html5 mode fallback on legacy browsers.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} appBaseNoFile application base URL stripped of any filename
 * @param {string} hashPrefix hashbang prefix
 */function LocationHashbangUrl(appBase,appBaseNoFile,hashPrefix){parseAbsoluteUrl(appBase,this);/**
   * Parse given hashbang URL into properties
   * @param {string} url Hashbang URL
   * @private
   */this.$$parse=function(url){var withoutBaseUrl=stripBaseUrl(appBase,url)||stripBaseUrl(appBaseNoFile,url);var withoutHashUrl;if(!isUndefined(withoutBaseUrl)&&withoutBaseUrl.charAt(0)==='#'){// The rest of the URL starts with a hash so we have
// got either a hashbang path or a plain hash fragment
withoutHashUrl=stripBaseUrl(hashPrefix,withoutBaseUrl);if(isUndefined(withoutHashUrl)){// There was no hashbang prefix so we just have a hash fragment
withoutHashUrl=withoutBaseUrl;}}else{// There was no hashbang path nor hash fragment:
// If we are in HTML5 mode we use what is left as the path;
// Otherwise we ignore what is left
if(this.$$html5){withoutHashUrl=withoutBaseUrl;}else{withoutHashUrl='';if(isUndefined(withoutBaseUrl)){appBase=url;/** @type {?} */this.replace();}}}parseAppUrl(withoutHashUrl,this);this.$$path=removeWindowsDriveName(this.$$path,withoutHashUrl,appBase);this.$$compose();/*
     * In Windows, on an anchor node on documents loaded from
     * the filesystem, the browser will return a pathname
     * prefixed with the drive name ('/C:/path') when a
     * pathname without a drive is set:
     *  * a.setAttribute('href', '/foo')
     *   * a.pathname === '/C:/foo' //true
     *
     * Inside of Angular, we're always using pathnames that
     * do not include drive names for routing.
     */function removeWindowsDriveName(path,url,base){/*
      Matches paths for file protocol on windows,
      such as /C:/foo/bar, and captures only /foo/bar.
      */var windowsFilePathExp=/^\/[A-Z]:(\/.*)/;var firstPathSegmentMatch;//Get the relative path from the input URL.
if(startsWith(url,base)){url=url.replace(base,'');}// The input URL intentionally contains a first path segment that ends with a colon.
if(windowsFilePathExp.exec(url)){return path;}firstPathSegmentMatch=windowsFilePathExp.exec(path);return firstPathSegmentMatch?firstPathSegmentMatch[1]:path;}};/**
   * Compose hashbang URL and update `absUrl` property
   * @private
   */this.$$compose=function(){var search=toKeyValue(this.$$search),hash=this.$$hash?'#'+encodeUriSegment(this.$$hash):'';this.$$url=encodePath(this.$$path)+(search?'?'+search:'')+hash;this.$$absUrl=appBase+(this.$$url?hashPrefix+this.$$url:'');this.$$urlUpdatedByLocation=true;};this.$$parseLinkUrl=function(url,relHref){if(stripHash(appBase)===stripHash(url)){this.$$parse(url);return true;}return false;};}/**
 * LocationHashbangUrl represents URL
 * This object is exposed as $location service when html5 history api is enabled but the browser
 * does not support it.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} appBaseNoFile application base URL stripped of any filename
 * @param {string} hashPrefix hashbang prefix
 */function LocationHashbangInHtml5Url(appBase,appBaseNoFile,hashPrefix){this.$$html5=true;LocationHashbangUrl.apply(this,arguments);this.$$parseLinkUrl=function(url,relHref){if(relHref&&relHref[0]==='#'){// special case for links to hash fragments:
// keep the old url and only replace the hash fragment
this.hash(relHref.slice(1));return true;}var rewrittenUrl;var appUrl;if(appBase===stripHash(url)){rewrittenUrl=url;}else if(appUrl=stripBaseUrl(appBaseNoFile,url)){rewrittenUrl=appBase+hashPrefix+appUrl;}else if(appBaseNoFile===url+'/'){rewrittenUrl=appBaseNoFile;}if(rewrittenUrl){this.$$parse(rewrittenUrl);}return!!rewrittenUrl;};this.$$compose=function(){var search=toKeyValue(this.$$search),hash=this.$$hash?'#'+encodeUriSegment(this.$$hash):'';this.$$url=encodePath(this.$$path)+(search?'?'+search:'')+hash;// include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
this.$$absUrl=appBase+hashPrefix+this.$$url;this.$$urlUpdatedByLocation=true;};}var locationPrototype={/**
   * Ensure absolute URL is initialized.
   * @private
   */$$absUrl:'',/**
   * Are we in html5 mode?
   * @private
   */$$html5:false,/**
   * Has any change been replacing?
   * @private
   */$$replace:false,/**
   * @ngdoc method
   * @name $location#absUrl
   *
   * @description
   * This method is getter only.
   *
   * Return full URL representation with all segments encoded according to rules specified in
   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
   * var absUrl = $location.absUrl();
   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
   * ```
   *
   * @return {string} full URL
   */absUrl:locationGetter('$$absUrl'),/**
   * @ngdoc method
   * @name $location#url
   *
   * @description
   * This method is getter / setter.
   *
   * Return URL (e.g. `/path?a=b#hash`) when called without any parameter.
   *
   * Change path, search and hash, when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
   * var url = $location.url();
   * // => "/some/path?foo=bar&baz=xoxo"
   * ```
   *
   * @param {string=} url New URL without base prefix (e.g. `/path?a=b#hash`)
   * @return {string} url
   */url:function(url){if(isUndefined(url)){return this.$$url;}var match=PATH_MATCH.exec(url);if(match[1]||url==='')this.path(decodeURIComponent(match[1]));if(match[2]||match[1]||url==='')this.search(match[3]||'');this.hash(match[5]||'');return this;},/**
   * @ngdoc method
   * @name $location#protocol
   *
   * @description
   * This method is getter only.
   *
   * Return protocol of current URL.
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
   * var protocol = $location.protocol();
   * // => "http"
   * ```
   *
   * @return {string} protocol of current URL
   */protocol:locationGetter('$$protocol'),/**
   * @ngdoc method
   * @name $location#host
   *
   * @description
   * This method is getter only.
   *
   * Return host of current URL.
   *
   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
   * var host = $location.host();
   * // => "example.com"
   *
   * // given URL http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
   * host = $location.host();
   * // => "example.com"
   * host = location.host;
   * // => "example.com:8080"
   * ```
   *
   * @return {string} host of current URL.
   */host:locationGetter('$$host'),/**
   * @ngdoc method
   * @name $location#port
   *
   * @description
   * This method is getter only.
   *
   * Return port of current URL.
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
   * var port = $location.port();
   * // => 80
   * ```
   *
   * @return {Number} port
   */port:locationGetter('$$port'),/**
   * @ngdoc method
   * @name $location#path
   *
   * @description
   * This method is getter / setter.
   *
   * Return path of current URL when called without any parameter.
   *
   * Change path when called with parameter and return `$location`.
   *
   * Note: Path should always begin with forward slash (/), this method will add the forward slash
   * if it is missing.
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
   * var path = $location.path();
   * // => "/some/path"
   * ```
   *
   * @param {(string|number)=} path New path
   * @return {(string|object)} path if called with no parameters, or `$location` if called with a parameter
   */path:locationGetterSetter('$$path',function(path){path=path!==null?path.toString():'';return path.charAt(0)==='/'?path:'/'+path;}),/**
   * @ngdoc method
   * @name $location#search
   *
   * @description
   * This method is getter / setter.
   *
   * Return search part (as object) of current URL when called without any parameter.
   *
   * Change search part when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
   * var searchObject = $location.search();
   * // => {foo: 'bar', baz: 'xoxo'}
   *
   * // set foo to 'yipee'
   * $location.search('foo', 'yipee');
   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
   * ```
   *
   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
   * hash object.
   *
   * When called with a single argument the method acts as a setter, setting the `search` component
   * of `$location` to the specified value.
   *
   * If the argument is a hash object containing an array of values, these values will be encoded
   * as duplicate search parameters in the URL.
   *
   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
   * will override only a single search property.
   *
   * If `paramValue` is an array, it will override the property of the `search` component of
   * `$location` specified via the first argument.
   *
   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
   *
   * If `paramValue` is `true`, the property specified via the first argument will be added with no
   * value nor trailing equal sign.
   *
   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
   * one or more arguments returns `$location` object itself.
   */search:function(search,paramValue){switch(arguments.length){case 0:return this.$$search;case 1:if(isString(search)||isNumber(search)){search=search.toString();this.$$search=parseKeyValue(search);}else if(isObject(search)){search=copy(search,{});// remove object undefined or null properties
forEach(search,function(value,key){if(value==null)delete search[key];});this.$$search=search;}else{throw $locationMinErr('isrcharg','The first argument of the `$location#search()` call must be a string or an object.');}break;default:if(isUndefined(paramValue)||paramValue===null){delete this.$$search[search];}else{this.$$search[search]=paramValue;}}this.$$compose();return this;},/**
   * @ngdoc method
   * @name $location#hash
   *
   * @description
   * This method is getter / setter.
   *
   * Returns the hash fragment when called without any parameters.
   *
   * Changes the hash fragment when called with a parameter and returns `$location`.
   *
   *
   * ```js
   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
   * var hash = $location.hash();
   * // => "hashValue"
   * ```
   *
   * @param {(string|number)=} hash New hash fragment
   * @return {string} hash
   */hash:locationGetterSetter('$$hash',function(hash){return hash!==null?hash.toString():'';}),/**
   * @ngdoc method
   * @name $location#replace
   *
   * @description
   * If called, all changes to $location during the current `$digest` will replace the current history
   * record, instead of adding a new one.
   */replace:function(){this.$$replace=true;return this;}};forEach([LocationHashbangInHtml5Url,LocationHashbangUrl,LocationHtml5Url],function(Location){Location.prototype=Object.create(locationPrototype);/**
   * @ngdoc method
   * @name $location#state
   *
   * @description
   * This method is getter / setter.
   *
   * Return the history state object when called without any parameter.
   *
   * Change the history state object when called with one parameter and return `$location`.
   * The state object is later passed to `pushState` or `replaceState`.
   *
   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
   * older browsers (like IE9 or Android < 4.0), don't use this method.
   *
   * @param {object=} state State object for pushState or replaceState
   * @return {object} state
   */Location.prototype.state=function(state){if(!arguments.length){return this.$$state;}if(Location!==LocationHtml5Url||!this.$$html5){throw $locationMinErr('nostate','History API state support is available only '+'in HTML5 mode and only in browsers supporting HTML5 History API');}// The user might modify `stateObject` after invoking `$location.state(stateObject)`
// but we're changing the $$state reference to $browser.state() during the $digest
// so the modification window is narrow.
this.$$state=isUndefined(state)?null:state;this.$$urlUpdatedByLocation=true;return this;};});function locationGetter(property){return(/** @this */function(){return this[property];});}function locationGetterSetter(property,preprocess){return(/** @this */function(value){if(isUndefined(value)){return this[property];}this[property]=preprocess(value);this.$$compose();return this;});}/**
 * @ngdoc service
 * @name $location
 *
 * @requires $rootElement
 *
 * @description
 * The $location service parses the URL in the browser address bar (based on the
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
 * available to your application. Changes to the URL in the address bar are reflected into
 * $location service and changes to $location are reflected into the browser address bar.
 *
 * **The $location service:**
 *
 * - Exposes the current URL in the browser address bar, so you can
 *   - Watch and observe the URL.
 *   - Change the URL.
 * - Synchronizes the URL with the browser when the user
 *   - Changes the address bar.
 *   - Clicks the back or forward button (or clicks a History link).
 *   - Clicks on a link.
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
 *
 * For more information see {@link guide/$location Developer Guide: Using $location}
 *//**
 * @ngdoc provider
 * @name $locationProvider
 * @this
 *
 * @description
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
 */function $LocationProvider(){var hashPrefix='!',html5Mode={enabled:false,requireBase:true,rewriteLinks:true};/**
   * @ngdoc method
   * @name $locationProvider#hashPrefix
   * @description
   * The default value for the prefix is `'!'`.
   * @param {string=} prefix Prefix for hash part (containing path and search)
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */this.hashPrefix=function(prefix){if(isDefined(prefix)){hashPrefix=prefix;return this;}else{return hashPrefix;}};/**
   * @ngdoc method
   * @name $locationProvider#html5Mode
   * @description
   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
   *   properties:
   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
   *     support `pushState`.
   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
   *     See the {@link guide/$location $location guide for more information}
   *   - **rewriteLinks** - `{boolean|string}` - (default: `true`) When html5Mode is enabled,
   *     enables/disables URL rewriting for relative links. If set to a string, URL rewriting will
   *     only happen on links with an attribute that matches the given string. For example, if set
   *     to `'internal-link'`, then the URL will only be rewritten for `<a internal-link>` links.
   *     Note that [attribute name normalization](guide/directive#normalization) does not apply
   *     here, so `'internalLink'` will **not** match `'internal-link'`.
   *
   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
   */this.html5Mode=function(mode){if(isBoolean(mode)){html5Mode.enabled=mode;return this;}else if(isObject(mode)){if(isBoolean(mode.enabled)){html5Mode.enabled=mode.enabled;}if(isBoolean(mode.requireBase)){html5Mode.requireBase=mode.requireBase;}if(isBoolean(mode.rewriteLinks)||isString(mode.rewriteLinks)){html5Mode.rewriteLinks=mode.rewriteLinks;}return this;}else{return html5Mode;}};/**
   * @ngdoc event
   * @name $location#$locationChangeStart
   * @eventType broadcast on root scope
   * @description
   * Broadcasted before a URL will change.
   *
   * This change can be prevented by calling
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
   * details about event object. Upon successful change
   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   *//**
   * @ngdoc event
   * @name $location#$locationChangeSuccess
   * @eventType broadcast on root scope
   * @description
   * Broadcasted after a URL was changed.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   */this.$get=['$rootScope','$browser','$sniffer','$rootElement','$window',function($rootScope,$browser,$sniffer,$rootElement,$window){var $location,LocationMode,baseHref=$browser.baseHref(),// if base[href] is undefined, it defaults to ''
initialUrl=$browser.url(),appBase;if(html5Mode.enabled){if(!baseHref&&html5Mode.requireBase){throw $locationMinErr('nobase','$location in HTML5 mode requires a <base> tag to be present!');}appBase=serverBase(initialUrl)+(baseHref||'/');LocationMode=$sniffer.history?LocationHtml5Url:LocationHashbangInHtml5Url;}else{appBase=stripHash(initialUrl);LocationMode=LocationHashbangUrl;}var appBaseNoFile=stripFile(appBase);$location=new LocationMode(appBase,appBaseNoFile,'#'+hashPrefix);$location.$$parseLinkUrl(initialUrl,initialUrl);$location.$$state=$browser.state();var IGNORE_URI_REGEXP=/^\s*(javascript|mailto):/i;function setBrowserUrlWithFallback(url,replace,state){var oldUrl=$location.url();var oldState=$location.$$state;try{$browser.url(url,replace,state);// Make sure $location.state() returns referentially identical (not just deeply equal)
// state object; this makes possible quick checking if the state changed in the digest
// loop. Checking deep equality would be too expensive.
$location.$$state=$browser.state();}catch(e){// Restore old values if pushState fails
$location.url(oldUrl);$location.$$state=oldState;throw e;}}$rootElement.on('click',function(event){var rewriteLinks=html5Mode.rewriteLinks;// TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
// currently we open nice url link and redirect then
if(!rewriteLinks||event.ctrlKey||event.metaKey||event.shiftKey||event.which===2||event.button===2)return;var elm=jqLite(event.target);// traverse the DOM up to find first A tag
while(nodeName_(elm[0])!=='a'){// ignore rewriting if no A tag (reached root element, or no parent - removed from document)
if(elm[0]===$rootElement[0]||!(elm=elm.parent())[0])return;}if(isString(rewriteLinks)&&isUndefined(elm.attr(rewriteLinks)))return;var absHref=elm.prop('href');// get the actual href attribute - see
// http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
var relHref=elm.attr('href')||elm.attr('xlink:href');if(isObject(absHref)&&absHref.toString()==='[object SVGAnimatedString]'){// SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
// an animation.
absHref=urlResolve(absHref.animVal).href;}// Ignore when url is started with javascript: or mailto:
if(IGNORE_URI_REGEXP.test(absHref))return;if(absHref&&!elm.attr('target')&&!event.isDefaultPrevented()){if($location.$$parseLinkUrl(absHref,relHref)){// We do a preventDefault for all urls that are part of the angular application,
// in html5mode and also without, so that we are able to abort navigation without
// getting double entries in the location history.
event.preventDefault();// update location manually
if($location.absUrl()!==$browser.url()){$rootScope.$apply();// hack to work around FF6 bug 684208 when scenario runner clicks on links
$window.angular['ff-684208-preventDefault']=true;}}}});// rewrite hashbang url <> html5 url
if(trimEmptyHash($location.absUrl())!==trimEmptyHash(initialUrl)){$browser.url($location.absUrl(),true);}var initializing=true;// update $location when $browser url changes
$browser.onUrlChange(function(newUrl,newState){if(!startsWith(newUrl,appBaseNoFile)){// If we are navigating outside of the app then force a reload
$window.location.href=newUrl;return;}$rootScope.$evalAsync(function(){var oldUrl=$location.absUrl();var oldState=$location.$$state;var defaultPrevented;newUrl=trimEmptyHash(newUrl);$location.$$parse(newUrl);$location.$$state=newState;defaultPrevented=$rootScope.$broadcast('$locationChangeStart',newUrl,oldUrl,newState,oldState).defaultPrevented;// if the location was changed by a `$locationChangeStart` handler then stop
// processing this location change
if($location.absUrl()!==newUrl)return;if(defaultPrevented){$location.$$parse(oldUrl);$location.$$state=oldState;setBrowserUrlWithFallback(oldUrl,false,oldState);}else{initializing=false;afterLocationChange(oldUrl,oldState);}});if(!$rootScope.$$phase)$rootScope.$digest();});// update browser
$rootScope.$watch(function $locationWatch(){if(initializing||$location.$$urlUpdatedByLocation){$location.$$urlUpdatedByLocation=false;var oldUrl=trimEmptyHash($browser.url());var newUrl=trimEmptyHash($location.absUrl());var oldState=$browser.state();var currentReplace=$location.$$replace;var urlOrStateChanged=oldUrl!==newUrl||$location.$$html5&&$sniffer.history&&oldState!==$location.$$state;if(initializing||urlOrStateChanged){initializing=false;$rootScope.$evalAsync(function(){var newUrl=$location.absUrl();var defaultPrevented=$rootScope.$broadcast('$locationChangeStart',newUrl,oldUrl,$location.$$state,oldState).defaultPrevented;// if the location was changed by a `$locationChangeStart` handler then stop
// processing this location change
if($location.absUrl()!==newUrl)return;if(defaultPrevented){$location.$$parse(oldUrl);$location.$$state=oldState;}else{if(urlOrStateChanged){setBrowserUrlWithFallback(newUrl,currentReplace,oldState===$location.$$state?null:$location.$$state);}afterLocationChange(oldUrl,oldState);}});}}$location.$$replace=false;// we don't need to return anything because $evalAsync will make the digest loop dirty when
// there is a change
});return $location;function afterLocationChange(oldUrl,oldState){$rootScope.$broadcast('$locationChangeSuccess',$location.absUrl(),oldUrl,$location.$$state,oldState);}}];}/**
 * @ngdoc service
 * @name $log
 * @requires $window
 *
 * @description
 * Simple service for logging. Default implementation safely writes the message
 * into the browser's console (if present).
 *
 * The main purpose of this service is to simplify debugging and troubleshooting.
 *
 * To reveal the location of the calls to `$log` in the JavaScript console,
 * you can "blackbox" the AngularJS source in your browser:
 *
 * [Mozilla description of blackboxing](https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Black_box_a_source).
 * [Chrome description of blackboxing](https://developer.chrome.com/devtools/docs/blackboxing).
 *
 * Note: Not all browsers support blackboxing.
 *
 * The default is to log `debug` messages. You can use
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
 *
 * @example
   <example module="logExample" name="log-service">
     <file name="script.js">
       angular.module('logExample', [])
         .controller('LogController', ['$scope', '$log', function($scope, $log) {
           $scope.$log = $log;
           $scope.message = 'Hello World!';
         }]);
     </file>
     <file name="index.html">
       <div ng-controller="LogController">
         <p>Reload this page with open console, enter text and hit the log button...</p>
         <label>Message:
         <input type="text" ng-model="message" /></label>
         <button ng-click="$log.log(message)">log</button>
         <button ng-click="$log.warn(message)">warn</button>
         <button ng-click="$log.info(message)">info</button>
         <button ng-click="$log.error(message)">error</button>
         <button ng-click="$log.debug(message)">debug</button>
       </div>
     </file>
   </example>
 *//**
 * @ngdoc provider
 * @name $logProvider
 * @this
 *
 * @description
 * Use the `$logProvider` to configure how the application logs messages
 */function $LogProvider(){var debug=true,self=this;/**
   * @ngdoc method
   * @name $logProvider#debugEnabled
   * @description
   * @param {boolean=} flag enable or disable debug level messages
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */this.debugEnabled=function(flag){if(isDefined(flag)){debug=flag;return this;}else{return debug;}};this.$get=['$window',function($window){// Support: IE 9-11, Edge 12-14+
// IE/Edge display errors in such a way that it requires the user to click in 4 places
// to see the stack trace. There is no way to feature-detect it so there's a chance
// of the user agent sniffing to go wrong but since it's only about logging, this shouldn't
// break apps. Other browsers display errors in a sensible way and some of them map stack
// traces along source maps if available so it makes sense to let browsers display it
// as they want.
var formatStackTrace=msie||/\bEdge\//.test($window.navigator&&$window.navigator.userAgent);return{/**
       * @ngdoc method
       * @name $log#log
       *
       * @description
       * Write a log message
       */log:consoleLog('log'),/**
       * @ngdoc method
       * @name $log#info
       *
       * @description
       * Write an information message
       */info:consoleLog('info'),/**
       * @ngdoc method
       * @name $log#warn
       *
       * @description
       * Write a warning message
       */warn:consoleLog('warn'),/**
       * @ngdoc method
       * @name $log#error
       *
       * @description
       * Write an error message
       */error:consoleLog('error'),/**
       * @ngdoc method
       * @name $log#debug
       *
       * @description
       * Write a debug message
       */debug:function(){var fn=consoleLog('debug');return function(){if(debug){fn.apply(self,arguments);}};}()};function formatError(arg){if(isError(arg)){if(arg.stack&&formatStackTrace){arg=arg.message&&arg.stack.indexOf(arg.message)===-1?'Error: '+arg.message+'\n'+arg.stack:arg.stack;}else if(arg.sourceURL){arg=arg.message+'\n'+arg.sourceURL+':'+arg.line;}}return arg;}function consoleLog(type){var console=$window.console||{},logFn=console[type]||console.log||noop;return function(){var args=[];forEach(arguments,function(arg){args.push(formatError(arg));});// Support: IE 9 only
// console methods don't inherit from Function.prototype in IE 9 so we can't
// call `logFn.apply(console, args)` directly.
return Function.prototype.apply.call(logFn,console,args);};}}];}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */var $parseMinErr=minErr('$parse');var objectValueOf={}.constructor.prototype.valueOf;// Sandboxing Angular Expressions
// ------------------------------
// Angular expressions are no longer sandboxed. So it is now even easier to access arbitrary JS code by
// various means such as obtaining a reference to native JS functions like the Function constructor.
//
// As an example, consider the following Angular expression:
//
//   {}.toString.constructor('alert("evil JS code")')
//
// It is important to realize that if you create an expression from a string that contains user provided
// content then it is possible that your application contains a security vulnerability to an XSS style attack.
//
// See https://docs.angularjs.org/guide/security
function getStringValue(name){// Property names must be strings. This means that non-string objects cannot be used
// as keys in an object. Any non-string object, including a number, is typecasted
// into a string via the toString method.
// -- MDN, https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names
//
// So, to ensure that we are checking the same `name` that JavaScript would use, we cast it
// to a string. It's not always possible. If `name` is an object and its `toString` method is
// 'broken' (doesn't return a string, isn't a function, etc.), an error will be thrown:
//
// TypeError: Cannot convert object to primitive value
//
// For performance reasons, we don't catch this error here and allow it to propagate up the call
// stack. Note that you'll get the same error in JavaScript if you try to access a property using
// such a 'broken' object as a key.
return name+'';}var OPERATORS=createMap();forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '),function(operator){OPERATORS[operator]=true;});var ESCAPE={'n':'\n','f':'\f','r':'\r','t':'\t','v':'\v','\'':'\'','"':'"'};/////////////////////////////////////////
/**
 * @constructor
 */var Lexer=function Lexer(options){this.options=options;};Lexer.prototype={constructor:Lexer,lex:function(text){this.text=text;this.index=0;this.tokens=[];while(this.index<this.text.length){var ch=this.text.charAt(this.index);if(ch==='"'||ch==='\''){this.readString(ch);}else if(this.isNumber(ch)||ch==='.'&&this.isNumber(this.peek())){this.readNumber();}else if(this.isIdentifierStart(this.peekMultichar())){this.readIdent();}else if(this.is(ch,'(){}[].,;:?')){this.tokens.push({index:this.index,text:ch});this.index++;}else if(this.isWhitespace(ch)){this.index++;}else{var ch2=ch+this.peek();var ch3=ch2+this.peek(2);var op1=OPERATORS[ch];var op2=OPERATORS[ch2];var op3=OPERATORS[ch3];if(op1||op2||op3){var token=op3?ch3:op2?ch2:ch;this.tokens.push({index:this.index,text:token,operator:true});this.index+=token.length;}else{this.throwError('Unexpected next character ',this.index,this.index+1);}}}return this.tokens;},is:function(ch,chars){return chars.indexOf(ch)!==-1;},peek:function(i){var num=i||1;return this.index+num<this.text.length?this.text.charAt(this.index+num):false;},isNumber:function(ch){return'0'<=ch&&ch<='9'&&typeof ch==='string';},isWhitespace:function(ch){// IE treats non-breaking space as \u00A0
return ch===' '||ch==='\r'||ch==='\t'||ch==='\n'||ch==='\v'||ch==='\u00A0';},isIdentifierStart:function(ch){return this.options.isIdentifierStart?this.options.isIdentifierStart(ch,this.codePointAt(ch)):this.isValidIdentifierStart(ch);},isValidIdentifierStart:function(ch){return'a'<=ch&&ch<='z'||'A'<=ch&&ch<='Z'||'_'===ch||ch==='$';},isIdentifierContinue:function(ch){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(ch,this.codePointAt(ch)):this.isValidIdentifierContinue(ch);},isValidIdentifierContinue:function(ch,cp){return this.isValidIdentifierStart(ch,cp)||this.isNumber(ch);},codePointAt:function(ch){if(ch.length===1)return ch.charCodeAt(0);// eslint-disable-next-line no-bitwise
return(ch.charCodeAt(0)<<10)+ch.charCodeAt(1)-0x35FDC00;},peekMultichar:function(){var ch=this.text.charAt(this.index);var peek=this.peek();if(!peek){return ch;}var cp1=ch.charCodeAt(0);var cp2=peek.charCodeAt(0);if(cp1>=0xD800&&cp1<=0xDBFF&&cp2>=0xDC00&&cp2<=0xDFFF){return ch+peek;}return ch;},isExpOperator:function(ch){return ch==='-'||ch==='+'||this.isNumber(ch);},throwError:function(error,start,end){end=end||this.index;var colStr=isDefined(start)?'s '+start+'-'+this.index+' ['+this.text.substring(start,end)+']':' '+end;throw $parseMinErr('lexerr','Lexer Error: {0} at column{1} in expression [{2}].',error,colStr,this.text);},readNumber:function(){var number='';var start=this.index;while(this.index<this.text.length){var ch=lowercase(this.text.charAt(this.index));if(ch==='.'||this.isNumber(ch)){number+=ch;}else{var peekCh=this.peek();if(ch==='e'&&this.isExpOperator(peekCh)){number+=ch;}else if(this.isExpOperator(ch)&&peekCh&&this.isNumber(peekCh)&&number.charAt(number.length-1)==='e'){number+=ch;}else if(this.isExpOperator(ch)&&(!peekCh||!this.isNumber(peekCh))&&number.charAt(number.length-1)==='e'){this.throwError('Invalid exponent');}else{break;}}this.index++;}this.tokens.push({index:start,text:number,constant:true,value:Number(number)});},readIdent:function(){var start=this.index;this.index+=this.peekMultichar().length;while(this.index<this.text.length){var ch=this.peekMultichar();if(!this.isIdentifierContinue(ch)){break;}this.index+=ch.length;}this.tokens.push({index:start,text:this.text.slice(start,this.index),identifier:true});},readString:function(quote){var start=this.index;this.index++;var string='';var rawString=quote;var escape=false;while(this.index<this.text.length){var ch=this.text.charAt(this.index);rawString+=ch;if(escape){if(ch==='u'){var hex=this.text.substring(this.index+1,this.index+5);if(!hex.match(/[\da-f]{4}/i)){this.throwError('Invalid unicode escape [\\u'+hex+']');}this.index+=4;string+=String.fromCharCode(parseInt(hex,16));}else{var rep=ESCAPE[ch];string=string+(rep||ch);}escape=false;}else if(ch==='\\'){escape=true;}else if(ch===quote){this.index++;this.tokens.push({index:start,text:rawString,constant:true,value:string});return;}else{string+=ch;}this.index++;}this.throwError('Unterminated quote',start);}};var AST=function AST(lexer,options){this.lexer=lexer;this.options=options;};AST.Program='Program';AST.ExpressionStatement='ExpressionStatement';AST.AssignmentExpression='AssignmentExpression';AST.ConditionalExpression='ConditionalExpression';AST.LogicalExpression='LogicalExpression';AST.BinaryExpression='BinaryExpression';AST.UnaryExpression='UnaryExpression';AST.CallExpression='CallExpression';AST.MemberExpression='MemberExpression';AST.Identifier='Identifier';AST.Literal='Literal';AST.ArrayExpression='ArrayExpression';AST.Property='Property';AST.ObjectExpression='ObjectExpression';AST.ThisExpression='ThisExpression';AST.LocalsExpression='LocalsExpression';// Internal use only
AST.NGValueParameter='NGValueParameter';AST.prototype={ast:function(text){this.text=text;this.tokens=this.lexer.lex(text);var value=this.program();if(this.tokens.length!==0){this.throwError('is an unexpected token',this.tokens[0]);}return value;},program:function(){var body=[];while(true){if(this.tokens.length>0&&!this.peek('}',')',';',']'))body.push(this.expressionStatement());if(!this.expect(';')){return{type:AST.Program,body:body};}}},expressionStatement:function(){return{type:AST.ExpressionStatement,expression:this.filterChain()};},filterChain:function(){var left=this.expression();while(this.expect('|')){left=this.filter(left);}return left;},expression:function(){return this.assignment();},assignment:function(){var result=this.ternary();if(this.expect('=')){if(!isAssignable(result)){throw $parseMinErr('lval','Trying to assign a value to a non l-value');}result={type:AST.AssignmentExpression,left:result,right:this.assignment(),operator:'='};}return result;},ternary:function(){var test=this.logicalOR();var alternate;var consequent;if(this.expect('?')){alternate=this.expression();if(this.consume(':')){consequent=this.expression();return{type:AST.ConditionalExpression,test:test,alternate:alternate,consequent:consequent};}}return test;},logicalOR:function(){var left=this.logicalAND();while(this.expect('||')){left={type:AST.LogicalExpression,operator:'||',left:left,right:this.logicalAND()};}return left;},logicalAND:function(){var left=this.equality();while(this.expect('&&')){left={type:AST.LogicalExpression,operator:'&&',left:left,right:this.equality()};}return left;},equality:function(){var left=this.relational();var token;while(token=this.expect('==','!=','===','!==')){left={type:AST.BinaryExpression,operator:token.text,left:left,right:this.relational()};}return left;},relational:function(){var left=this.additive();var token;while(token=this.expect('<','>','<=','>=')){left={type:AST.BinaryExpression,operator:token.text,left:left,right:this.additive()};}return left;},additive:function(){var left=this.multiplicative();var token;while(token=this.expect('+','-')){left={type:AST.BinaryExpression,operator:token.text,left:left,right:this.multiplicative()};}return left;},multiplicative:function(){var left=this.unary();var token;while(token=this.expect('*','/','%')){left={type:AST.BinaryExpression,operator:token.text,left:left,right:this.unary()};}return left;},unary:function(){var token;if(token=this.expect('+','-','!')){return{type:AST.UnaryExpression,operator:token.text,prefix:true,argument:this.unary()};}else{return this.primary();}},primary:function(){var primary;if(this.expect('(')){primary=this.filterChain();this.consume(')');}else if(this.expect('[')){primary=this.arrayDeclaration();}else if(this.expect('{')){primary=this.object();}else if(this.selfReferential.hasOwnProperty(this.peek().text)){primary=copy(this.selfReferential[this.consume().text]);}else if(this.options.literals.hasOwnProperty(this.peek().text)){primary={type:AST.Literal,value:this.options.literals[this.consume().text]};}else if(this.peek().identifier){primary=this.identifier();}else if(this.peek().constant){primary=this.constant();}else{this.throwError('not a primary expression',this.peek());}var next;while(next=this.expect('(','[','.')){if(next.text==='('){primary={type:AST.CallExpression,callee:primary,arguments:this.parseArguments()};this.consume(')');}else if(next.text==='['){primary={type:AST.MemberExpression,object:primary,property:this.expression(),computed:true};this.consume(']');}else if(next.text==='.'){primary={type:AST.MemberExpression,object:primary,property:this.identifier(),computed:false};}else{this.throwError('IMPOSSIBLE');}}return primary;},filter:function(baseExpression){var args=[baseExpression];var result={type:AST.CallExpression,callee:this.identifier(),arguments:args,filter:true};while(this.expect(':')){args.push(this.expression());}return result;},parseArguments:function(){var args=[];if(this.peekToken().text!==')'){do{args.push(this.filterChain());}while(this.expect(','));}return args;},identifier:function(){var token=this.consume();if(!token.identifier){this.throwError('is not a valid identifier',token);}return{type:AST.Identifier,name:token.text};},constant:function(){// TODO check that it is a constant
return{type:AST.Literal,value:this.consume().value};},arrayDeclaration:function(){var elements=[];if(this.peekToken().text!==']'){do{if(this.peek(']')){// Support trailing commas per ES5.1.
break;}elements.push(this.expression());}while(this.expect(','));}this.consume(']');return{type:AST.ArrayExpression,elements:elements};},object:function(){var properties=[],property;if(this.peekToken().text!=='}'){do{if(this.peek('}')){// Support trailing commas per ES5.1.
break;}property={type:AST.Property,kind:'init'};if(this.peek().constant){property.key=this.constant();property.computed=false;this.consume(':');property.value=this.expression();}else if(this.peek().identifier){property.key=this.identifier();property.computed=false;if(this.peek(':')){this.consume(':');property.value=this.expression();}else{property.value=property.key;}}else if(this.peek('[')){this.consume('[');property.key=this.expression();this.consume(']');property.computed=true;this.consume(':');property.value=this.expression();}else{this.throwError('invalid key',this.peek());}properties.push(property);}while(this.expect(','));}this.consume('}');return{type:AST.ObjectExpression,properties:properties};},throwError:function(msg,token){throw $parseMinErr('syntax','Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',token.text,msg,token.index+1,this.text,this.text.substring(token.index));},consume:function(e1){if(this.tokens.length===0){throw $parseMinErr('ueoe','Unexpected end of expression: {0}',this.text);}var token=this.expect(e1);if(!token){this.throwError('is unexpected, expecting ['+e1+']',this.peek());}return token;},peekToken:function(){if(this.tokens.length===0){throw $parseMinErr('ueoe','Unexpected end of expression: {0}',this.text);}return this.tokens[0];},peek:function(e1,e2,e3,e4){return this.peekAhead(0,e1,e2,e3,e4);},peekAhead:function(i,e1,e2,e3,e4){if(this.tokens.length>i){var token=this.tokens[i];var t=token.text;if(t===e1||t===e2||t===e3||t===e4||!e1&&!e2&&!e3&&!e4){return token;}}return false;},expect:function(e1,e2,e3,e4){var token=this.peek(e1,e2,e3,e4);if(token){this.tokens.shift();return token;}return false;},selfReferential:{'this':{type:AST.ThisExpression},'$locals':{type:AST.LocalsExpression}}};function ifDefined(v,d){return typeof v!=='undefined'?v:d;}function plusFn(l,r){if(typeof l==='undefined')return r;if(typeof r==='undefined')return l;return l+r;}function isStateless($filter,filterName){var fn=$filter(filterName);return!fn.$stateful;}var PURITY_ABSOLUTE=1;var PURITY_RELATIVE=2;// Detect nodes which could depend on non-shallow state of objects
function isPure(node,parentIsPure){switch(node.type){// Computed members might invoke a stateful toString()
case AST.MemberExpression:if(node.computed){return false;}break;// Unary always convert to primative
case AST.UnaryExpression:return PURITY_ABSOLUTE;// The binary + operator can invoke a stateful toString().
case AST.BinaryExpression:return node.operator!=='+'?PURITY_ABSOLUTE:false;// Functions / filters probably read state from within objects
case AST.CallExpression:return false;}return undefined===parentIsPure?PURITY_RELATIVE:parentIsPure;}function findConstantAndWatchExpressions(ast,$filter,parentIsPure){var allConstants;var argsToWatch;var isStatelessFilter;var astIsPure=ast.isPure=isPure(ast,parentIsPure);switch(ast.type){case AST.Program:allConstants=true;forEach(ast.body,function(expr){findConstantAndWatchExpressions(expr.expression,$filter,astIsPure);allConstants=allConstants&&expr.expression.constant;});ast.constant=allConstants;break;case AST.Literal:ast.constant=true;ast.toWatch=[];break;case AST.UnaryExpression:findConstantAndWatchExpressions(ast.argument,$filter,astIsPure);ast.constant=ast.argument.constant;ast.toWatch=ast.argument.toWatch;break;case AST.BinaryExpression:findConstantAndWatchExpressions(ast.left,$filter,astIsPure);findConstantAndWatchExpressions(ast.right,$filter,astIsPure);ast.constant=ast.left.constant&&ast.right.constant;ast.toWatch=ast.left.toWatch.concat(ast.right.toWatch);break;case AST.LogicalExpression:findConstantAndWatchExpressions(ast.left,$filter,astIsPure);findConstantAndWatchExpressions(ast.right,$filter,astIsPure);ast.constant=ast.left.constant&&ast.right.constant;ast.toWatch=ast.constant?[]:[ast];break;case AST.ConditionalExpression:findConstantAndWatchExpressions(ast.test,$filter,astIsPure);findConstantAndWatchExpressions(ast.alternate,$filter,astIsPure);findConstantAndWatchExpressions(ast.consequent,$filter,astIsPure);ast.constant=ast.test.constant&&ast.alternate.constant&&ast.consequent.constant;ast.toWatch=ast.constant?[]:[ast];break;case AST.Identifier:ast.constant=false;ast.toWatch=[ast];break;case AST.MemberExpression:findConstantAndWatchExpressions(ast.object,$filter,astIsPure);if(ast.computed){findConstantAndWatchExpressions(ast.property,$filter,astIsPure);}ast.constant=ast.object.constant&&(!ast.computed||ast.property.constant);ast.toWatch=ast.constant?[]:[ast];break;case AST.CallExpression:isStatelessFilter=ast.filter?isStateless($filter,ast.callee.name):false;allConstants=isStatelessFilter;argsToWatch=[];forEach(ast.arguments,function(expr){findConstantAndWatchExpressions(expr,$filter,astIsPure);allConstants=allConstants&&expr.constant;argsToWatch.push.apply(argsToWatch,expr.toWatch);});ast.constant=allConstants;ast.toWatch=isStatelessFilter?argsToWatch:[ast];break;case AST.AssignmentExpression:findConstantAndWatchExpressions(ast.left,$filter,astIsPure);findConstantAndWatchExpressions(ast.right,$filter,astIsPure);ast.constant=ast.left.constant&&ast.right.constant;ast.toWatch=[ast];break;case AST.ArrayExpression:allConstants=true;argsToWatch=[];forEach(ast.elements,function(expr){findConstantAndWatchExpressions(expr,$filter,astIsPure);allConstants=allConstants&&expr.constant;argsToWatch.push.apply(argsToWatch,expr.toWatch);});ast.constant=allConstants;ast.toWatch=argsToWatch;break;case AST.ObjectExpression:allConstants=true;argsToWatch=[];forEach(ast.properties,function(property){findConstantAndWatchExpressions(property.value,$filter,astIsPure);allConstants=allConstants&&property.value.constant;argsToWatch.push.apply(argsToWatch,property.value.toWatch);if(property.computed){//`{[key]: value}` implicitly does `key.toString()` which may be non-pure
findConstantAndWatchExpressions(property.key,$filter,/*parentIsPure=*/false);allConstants=allConstants&&property.key.constant;argsToWatch.push.apply(argsToWatch,property.key.toWatch);}});ast.constant=allConstants;ast.toWatch=argsToWatch;break;case AST.ThisExpression:ast.constant=false;ast.toWatch=[];break;case AST.LocalsExpression:ast.constant=false;ast.toWatch=[];break;}}function getInputs(body){if(body.length!==1)return;var lastExpression=body[0].expression;var candidate=lastExpression.toWatch;if(candidate.length!==1)return candidate;return candidate[0]!==lastExpression?candidate:undefined;}function isAssignable(ast){return ast.type===AST.Identifier||ast.type===AST.MemberExpression;}function assignableAST(ast){if(ast.body.length===1&&isAssignable(ast.body[0].expression)){return{type:AST.AssignmentExpression,left:ast.body[0].expression,right:{type:AST.NGValueParameter},operator:'='};}}function isLiteral(ast){return ast.body.length===0||ast.body.length===1&&(ast.body[0].expression.type===AST.Literal||ast.body[0].expression.type===AST.ArrayExpression||ast.body[0].expression.type===AST.ObjectExpression);}function isConstant(ast){return ast.constant;}function ASTCompiler($filter){this.$filter=$filter;}ASTCompiler.prototype={compile:function(ast){var self=this;this.state={nextId:0,filters:{},fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]};findConstantAndWatchExpressions(ast,self.$filter);var extra='';var assignable;this.stage='assign';if(assignable=assignableAST(ast)){this.state.computing='assign';var result=this.nextId();this.recurse(assignable,result);this.return_(result);extra='fn.assign='+this.generateFunction('assign','s,v,l');}var toWatch=getInputs(ast.body);self.stage='inputs';forEach(toWatch,function(watch,key){var fnKey='fn'+key;self.state[fnKey]={vars:[],body:[],own:{}};self.state.computing=fnKey;var intoId=self.nextId();self.recurse(watch,intoId);self.return_(intoId);self.state.inputs.push({name:fnKey,isPure:watch.isPure});watch.watchId=key;});this.state.computing='fn';this.stage='main';this.recurse(ast);var fnString=// The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
// This is a workaround for this until we do a better job at only removing the prefix only when we should.
'"'+this.USE+' '+this.STRICT+'";\n'+this.filterPrefix()+'var fn='+this.generateFunction('fn','s,l,a,i')+extra+this.watchFns()+'return fn;';// eslint-disable-next-line no-new-func
var fn=new Function('$filter','getStringValue','ifDefined','plus',fnString)(this.$filter,getStringValue,ifDefined,plusFn);this.state=this.stage=undefined;return fn;},USE:'use',STRICT:'strict',watchFns:function(){var result=[];var inputs=this.state.inputs;var self=this;forEach(inputs,function(input){result.push('var '+input.name+'='+self.generateFunction(input.name,'s'));if(input.isPure){result.push(input.name,'.isPure='+JSON.stringify(input.isPure)+';');}});if(inputs.length){result.push('fn.inputs=['+inputs.map(function(i){return i.name;}).join(',')+'];');}return result.join('');},generateFunction:function(name,params){return'function('+params+'){'+this.varsPrefix(name)+this.body(name)+'};';},filterPrefix:function(){var parts=[];var self=this;forEach(this.state.filters,function(id,filter){parts.push(id+'=$filter('+self.escape(filter)+')');});if(parts.length)return'var '+parts.join(',')+';';return'';},varsPrefix:function(section){return this.state[section].vars.length?'var '+this.state[section].vars.join(',')+';':'';},body:function(section){return this.state[section].body.join('');},recurse:function(ast,intoId,nameId,recursionFn,create,skipWatchIdCheck){var left,right,self=this,args,expression,computed;recursionFn=recursionFn||noop;if(!skipWatchIdCheck&&isDefined(ast.watchId)){intoId=intoId||this.nextId();this.if_('i',this.lazyAssign(intoId,this.computedMember('i',ast.watchId)),this.lazyRecurse(ast,intoId,nameId,recursionFn,create,true));return;}switch(ast.type){case AST.Program:forEach(ast.body,function(expression,pos){self.recurse(expression.expression,undefined,undefined,function(expr){right=expr;});if(pos!==ast.body.length-1){self.current().body.push(right,';');}else{self.return_(right);}});break;case AST.Literal:expression=this.escape(ast.value);this.assign(intoId,expression);recursionFn(intoId||expression);break;case AST.UnaryExpression:this.recurse(ast.argument,undefined,undefined,function(expr){right=expr;});expression=ast.operator+'('+this.ifDefined(right,0)+')';this.assign(intoId,expression);recursionFn(expression);break;case AST.BinaryExpression:this.recurse(ast.left,undefined,undefined,function(expr){left=expr;});this.recurse(ast.right,undefined,undefined,function(expr){right=expr;});if(ast.operator==='+'){expression=this.plus(left,right);}else if(ast.operator==='-'){expression=this.ifDefined(left,0)+ast.operator+this.ifDefined(right,0);}else{expression='('+left+')'+ast.operator+'('+right+')';}this.assign(intoId,expression);recursionFn(expression);break;case AST.LogicalExpression:intoId=intoId||this.nextId();self.recurse(ast.left,intoId);self.if_(ast.operator==='&&'?intoId:self.not(intoId),self.lazyRecurse(ast.right,intoId));recursionFn(intoId);break;case AST.ConditionalExpression:intoId=intoId||this.nextId();self.recurse(ast.test,intoId);self.if_(intoId,self.lazyRecurse(ast.alternate,intoId),self.lazyRecurse(ast.consequent,intoId));recursionFn(intoId);break;case AST.Identifier:intoId=intoId||this.nextId();if(nameId){nameId.context=self.stage==='inputs'?'s':this.assign(this.nextId(),this.getHasOwnProperty('l',ast.name)+'?l:s');nameId.computed=false;nameId.name=ast.name;}self.if_(self.stage==='inputs'||self.not(self.getHasOwnProperty('l',ast.name)),function(){self.if_(self.stage==='inputs'||'s',function(){if(create&&create!==1){self.if_(self.isNull(self.nonComputedMember('s',ast.name)),self.lazyAssign(self.nonComputedMember('s',ast.name),'{}'));}self.assign(intoId,self.nonComputedMember('s',ast.name));});},intoId&&self.lazyAssign(intoId,self.nonComputedMember('l',ast.name)));recursionFn(intoId);break;case AST.MemberExpression:left=nameId&&(nameId.context=this.nextId())||this.nextId();intoId=intoId||this.nextId();self.recurse(ast.object,left,undefined,function(){self.if_(self.notNull(left),function(){if(ast.computed){right=self.nextId();self.recurse(ast.property,right);self.getStringValue(right);if(create&&create!==1){self.if_(self.not(self.computedMember(left,right)),self.lazyAssign(self.computedMember(left,right),'{}'));}expression=self.computedMember(left,right);self.assign(intoId,expression);if(nameId){nameId.computed=true;nameId.name=right;}}else{if(create&&create!==1){self.if_(self.isNull(self.nonComputedMember(left,ast.property.name)),self.lazyAssign(self.nonComputedMember(left,ast.property.name),'{}'));}expression=self.nonComputedMember(left,ast.property.name);self.assign(intoId,expression);if(nameId){nameId.computed=false;nameId.name=ast.property.name;}}},function(){self.assign(intoId,'undefined');});recursionFn(intoId);},!!create);break;case AST.CallExpression:intoId=intoId||this.nextId();if(ast.filter){right=self.filter(ast.callee.name);args=[];forEach(ast.arguments,function(expr){var argument=self.nextId();self.recurse(expr,argument);args.push(argument);});expression=right+'('+args.join(',')+')';self.assign(intoId,expression);recursionFn(intoId);}else{right=self.nextId();left={};args=[];self.recurse(ast.callee,right,left,function(){self.if_(self.notNull(right),function(){forEach(ast.arguments,function(expr){self.recurse(expr,ast.constant?undefined:self.nextId(),undefined,function(argument){args.push(argument);});});if(left.name){expression=self.member(left.context,left.name,left.computed)+'('+args.join(',')+')';}else{expression=right+'('+args.join(',')+')';}self.assign(intoId,expression);},function(){self.assign(intoId,'undefined');});recursionFn(intoId);});}break;case AST.AssignmentExpression:right=this.nextId();left={};this.recurse(ast.left,undefined,left,function(){self.if_(self.notNull(left.context),function(){self.recurse(ast.right,right);expression=self.member(left.context,left.name,left.computed)+ast.operator+right;self.assign(intoId,expression);recursionFn(intoId||expression);});},1);break;case AST.ArrayExpression:args=[];forEach(ast.elements,function(expr){self.recurse(expr,ast.constant?undefined:self.nextId(),undefined,function(argument){args.push(argument);});});expression='['+args.join(',')+']';this.assign(intoId,expression);recursionFn(intoId||expression);break;case AST.ObjectExpression:args=[];computed=false;forEach(ast.properties,function(property){if(property.computed){computed=true;}});if(computed){intoId=intoId||this.nextId();this.assign(intoId,'{}');forEach(ast.properties,function(property){if(property.computed){left=self.nextId();self.recurse(property.key,left);}else{left=property.key.type===AST.Identifier?property.key.name:''+property.key.value;}right=self.nextId();self.recurse(property.value,right);self.assign(self.member(intoId,left,property.computed),right);});}else{forEach(ast.properties,function(property){self.recurse(property.value,ast.constant?undefined:self.nextId(),undefined,function(expr){args.push(self.escape(property.key.type===AST.Identifier?property.key.name:''+property.key.value)+':'+expr);});});expression='{'+args.join(',')+'}';this.assign(intoId,expression);}recursionFn(intoId||expression);break;case AST.ThisExpression:this.assign(intoId,'s');recursionFn(intoId||'s');break;case AST.LocalsExpression:this.assign(intoId,'l');recursionFn(intoId||'l');break;case AST.NGValueParameter:this.assign(intoId,'v');recursionFn(intoId||'v');break;}},getHasOwnProperty:function(element,property){var key=element+'.'+property;var own=this.current().own;if(!own.hasOwnProperty(key)){own[key]=this.nextId(false,element+'&&('+this.escape(property)+' in '+element+')');}return own[key];},assign:function(id,value){if(!id)return;this.current().body.push(id,'=',value,';');return id;},filter:function(filterName){if(!this.state.filters.hasOwnProperty(filterName)){this.state.filters[filterName]=this.nextId(true);}return this.state.filters[filterName];},ifDefined:function(id,defaultValue){return'ifDefined('+id+','+this.escape(defaultValue)+')';},plus:function(left,right){return'plus('+left+','+right+')';},return_:function(id){this.current().body.push('return ',id,';');},if_:function(test,alternate,consequent){if(test===true){alternate();}else{var body=this.current().body;body.push('if(',test,'){');alternate();body.push('}');if(consequent){body.push('else{');consequent();body.push('}');}}},not:function(expression){return'!('+expression+')';},isNull:function(expression){return expression+'==null';},notNull:function(expression){return expression+'!=null';},nonComputedMember:function(left,right){var SAFE_IDENTIFIER=/^[$_a-zA-Z][$_a-zA-Z0-9]*$/;var UNSAFE_CHARACTERS=/[^$_a-zA-Z0-9]/g;if(SAFE_IDENTIFIER.test(right)){return left+'.'+right;}else{return left+'["'+right.replace(UNSAFE_CHARACTERS,this.stringEscapeFn)+'"]';}},computedMember:function(left,right){return left+'['+right+']';},member:function(left,right,computed){if(computed)return this.computedMember(left,right);return this.nonComputedMember(left,right);},getStringValue:function(item){this.assign(item,'getStringValue('+item+')');},lazyRecurse:function(ast,intoId,nameId,recursionFn,create,skipWatchIdCheck){var self=this;return function(){self.recurse(ast,intoId,nameId,recursionFn,create,skipWatchIdCheck);};},lazyAssign:function(id,value){var self=this;return function(){self.assign(id,value);};},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(c){return'\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);},escape:function(value){if(isString(value))return'\''+value.replace(this.stringEscapeRegex,this.stringEscapeFn)+'\'';if(isNumber(value))return value.toString();if(value===true)return'true';if(value===false)return'false';if(value===null)return'null';if(typeof value==='undefined')return'undefined';throw $parseMinErr('esc','IMPOSSIBLE');},nextId:function(skip,init){var id='v'+this.state.nextId++;if(!skip){this.current().vars.push(id+(init?'='+init:''));}return id;},current:function(){return this.state[this.state.computing];}};function ASTInterpreter($filter){this.$filter=$filter;}ASTInterpreter.prototype={compile:function(ast){var self=this;findConstantAndWatchExpressions(ast,self.$filter);var assignable;var assign;if(assignable=assignableAST(ast)){assign=this.recurse(assignable);}var toWatch=getInputs(ast.body);var inputs;if(toWatch){inputs=[];forEach(toWatch,function(watch,key){var input=self.recurse(watch);input.isPure=watch.isPure;watch.input=input;inputs.push(input);watch.watchId=key;});}var expressions=[];forEach(ast.body,function(expression){expressions.push(self.recurse(expression.expression));});var fn=ast.body.length===0?noop:ast.body.length===1?expressions[0]:function(scope,locals){var lastValue;forEach(expressions,function(exp){lastValue=exp(scope,locals);});return lastValue;};if(assign){fn.assign=function(scope,value,locals){return assign(scope,locals,value);};}if(inputs){fn.inputs=inputs;}return fn;},recurse:function(ast,context,create){var left,right,self=this,args;if(ast.input){return this.inputs(ast.input,ast.watchId);}switch(ast.type){case AST.Literal:return this.value(ast.value,context);case AST.UnaryExpression:right=this.recurse(ast.argument);return this['unary'+ast.operator](right,context);case AST.BinaryExpression:left=this.recurse(ast.left);right=this.recurse(ast.right);return this['binary'+ast.operator](left,right,context);case AST.LogicalExpression:left=this.recurse(ast.left);right=this.recurse(ast.right);return this['binary'+ast.operator](left,right,context);case AST.ConditionalExpression:return this['ternary?:'](this.recurse(ast.test),this.recurse(ast.alternate),this.recurse(ast.consequent),context);case AST.Identifier:return self.identifier(ast.name,context,create);case AST.MemberExpression:left=this.recurse(ast.object,false,!!create);if(!ast.computed){right=ast.property.name;}if(ast.computed)right=this.recurse(ast.property);return ast.computed?this.computedMember(left,right,context,create):this.nonComputedMember(left,right,context,create);case AST.CallExpression:args=[];forEach(ast.arguments,function(expr){args.push(self.recurse(expr));});if(ast.filter)right=this.$filter(ast.callee.name);if(!ast.filter)right=this.recurse(ast.callee,true);return ast.filter?function(scope,locals,assign,inputs){var values=[];for(var i=0;i<args.length;++i){values.push(args[i](scope,locals,assign,inputs));}var value=right.apply(undefined,values,inputs);return context?{context:undefined,name:undefined,value:value}:value;}:function(scope,locals,assign,inputs){var rhs=right(scope,locals,assign,inputs);var value;if(rhs.value!=null){var values=[];for(var i=0;i<args.length;++i){values.push(args[i](scope,locals,assign,inputs));}value=rhs.value.apply(rhs.context,values);}return context?{value:value}:value;};case AST.AssignmentExpression:left=this.recurse(ast.left,true,1);right=this.recurse(ast.right);return function(scope,locals,assign,inputs){var lhs=left(scope,locals,assign,inputs);var rhs=right(scope,locals,assign,inputs);lhs.context[lhs.name]=rhs;return context?{value:rhs}:rhs;};case AST.ArrayExpression:args=[];forEach(ast.elements,function(expr){args.push(self.recurse(expr));});return function(scope,locals,assign,inputs){var value=[];for(var i=0;i<args.length;++i){value.push(args[i](scope,locals,assign,inputs));}return context?{value:value}:value;};case AST.ObjectExpression:args=[];forEach(ast.properties,function(property){if(property.computed){args.push({key:self.recurse(property.key),computed:true,value:self.recurse(property.value)});}else{args.push({key:property.key.type===AST.Identifier?property.key.name:''+property.key.value,computed:false,value:self.recurse(property.value)});}});return function(scope,locals,assign,inputs){var value={};for(var i=0;i<args.length;++i){if(args[i].computed){value[args[i].key(scope,locals,assign,inputs)]=args[i].value(scope,locals,assign,inputs);}else{value[args[i].key]=args[i].value(scope,locals,assign,inputs);}}return context?{value:value}:value;};case AST.ThisExpression:return function(scope){return context?{value:scope}:scope;};case AST.LocalsExpression:return function(scope,locals){return context?{value:locals}:locals;};case AST.NGValueParameter:return function(scope,locals,assign){return context?{value:assign}:assign;};}},'unary+':function(argument,context){return function(scope,locals,assign,inputs){var arg=argument(scope,locals,assign,inputs);if(isDefined(arg)){arg=+arg;}else{arg=0;}return context?{value:arg}:arg;};},'unary-':function(argument,context){return function(scope,locals,assign,inputs){var arg=argument(scope,locals,assign,inputs);if(isDefined(arg)){arg=-arg;}else{arg=-0;}return context?{value:arg}:arg;};},'unary!':function(argument,context){return function(scope,locals,assign,inputs){var arg=!argument(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary+':function(left,right,context){return function(scope,locals,assign,inputs){var lhs=left(scope,locals,assign,inputs);var rhs=right(scope,locals,assign,inputs);var arg=plusFn(lhs,rhs);return context?{value:arg}:arg;};},'binary-':function(left,right,context){return function(scope,locals,assign,inputs){var lhs=left(scope,locals,assign,inputs);var rhs=right(scope,locals,assign,inputs);var arg=(isDefined(lhs)?lhs:0)-(isDefined(rhs)?rhs:0);return context?{value:arg}:arg;};},'binary*':function(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)*right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary/':function(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)/right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary%':function(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)%right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary===':function(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)===right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary!==':function(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)!==right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary==':function(left,right,context){return function(scope,locals,assign,inputs){// eslint-disable-next-line eqeqeq
var arg=left(scope,locals,assign,inputs)==right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary!=':function(left,right,context){return function(scope,locals,assign,inputs){// eslint-disable-next-line eqeqeq
var arg=left(scope,locals,assign,inputs)!=right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary<':function(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)<right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary>':function(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)>right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary<=':function(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)<=right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary>=':function(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)>=right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary&&':function(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)&&right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'binary||':function(left,right,context){return function(scope,locals,assign,inputs){var arg=left(scope,locals,assign,inputs)||right(scope,locals,assign,inputs);return context?{value:arg}:arg;};},'ternary?:':function(test,alternate,consequent,context){return function(scope,locals,assign,inputs){var arg=test(scope,locals,assign,inputs)?alternate(scope,locals,assign,inputs):consequent(scope,locals,assign,inputs);return context?{value:arg}:arg;};},value:function(value,context){return function(){return context?{context:undefined,name:undefined,value:value}:value;};},identifier:function(name,context,create){return function(scope,locals,assign,inputs){var base=locals&&name in locals?locals:scope;if(create&&create!==1&&base&&base[name]==null){base[name]={};}var value=base?base[name]:undefined;if(context){return{context:base,name:name,value:value};}else{return value;}};},computedMember:function(left,right,context,create){return function(scope,locals,assign,inputs){var lhs=left(scope,locals,assign,inputs);var rhs;var value;if(lhs!=null){rhs=right(scope,locals,assign,inputs);rhs=getStringValue(rhs);if(create&&create!==1){if(lhs&&!lhs[rhs]){lhs[rhs]={};}}value=lhs[rhs];}if(context){return{context:lhs,name:rhs,value:value};}else{return value;}};},nonComputedMember:function(left,right,context,create){return function(scope,locals,assign,inputs){var lhs=left(scope,locals,assign,inputs);if(create&&create!==1){if(lhs&&lhs[right]==null){lhs[right]={};}}var value=lhs!=null?lhs[right]:undefined;if(context){return{context:lhs,name:right,value:value};}else{return value;}};},inputs:function(input,watchId){return function(scope,value,locals,inputs){if(inputs)return inputs[watchId];return input(scope,value,locals);};}};/**
 * @constructor
 */function Parser(lexer,$filter,options){this.ast=new AST(lexer,options);this.astCompiler=options.csp?new ASTInterpreter($filter):new ASTCompiler($filter);}Parser.prototype={constructor:Parser,parse:function(text){var ast=this.ast.ast(text);var fn=this.astCompiler.compile(ast);fn.literal=isLiteral(ast);fn.constant=isConstant(ast);return fn;}};function getValueOf(value){return isFunction(value.valueOf)?value.valueOf():objectValueOf.call(value);}///////////////////////////////////
/**
 * @ngdoc service
 * @name $parse
 * @kind function
 *
 * @description
 *
 * Converts Angular {@link guide/expression expression} into a function.
 *
 * ```js
 *   var getter = $parse('user.name');
 *   var setter = getter.assign;
 *   var context = {user:{name:'angular'}};
 *   var locals = {user:{name:'local'}};
 *
 *   expect(getter(context)).toEqual('angular');
 *   setter(context, 'newValue');
 *   expect(context.user.name).toEqual('newValue');
 *   expect(getter(context, locals)).toEqual('local');
 * ```
 *
 *
 * @param {string} expression String expression to compile.
 * @returns {function(context, locals)} a function which represents the compiled expression:
 *
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
 *      are evaluated against (typically a scope object).
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
 *      `context`.
 *
 *    The returned function also has the following properties:
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
 *        literal.
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
 *        constant literals.
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
 *        set to a function to change its value on the given context.
 *
 *//**
 * @ngdoc provider
 * @name $parseProvider
 * @this
 *
 * @description
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
 *  service.
 */function $ParseProvider(){var cache=createMap();var literals={'true':true,'false':false,'null':null,'undefined':undefined};var identStart,identContinue;/**
   * @ngdoc method
   * @name $parseProvider#addLiteral
   * @description
   *
   * Configure $parse service to add literal values that will be present as literal at expressions.
   *
   * @param {string} literalName Token for the literal value. The literal name value must be a valid literal name.
   * @param {*} literalValue Value for this literal. All literal values must be primitives or `undefined`.
   *
   **/this.addLiteral=function(literalName,literalValue){literals[literalName]=literalValue;};/**
  * @ngdoc method
  * @name $parseProvider#setIdentifierFns
  *
  * @description
  *
  * Allows defining the set of characters that are allowed in Angular expressions. The function
  * `identifierStart` will get called to know if a given character is a valid character to be the
  * first character for an identifier. The function `identifierContinue` will get called to know if
  * a given character is a valid character to be a follow-up identifier character. The functions
  * `identifierStart` and `identifierContinue` will receive as arguments the single character to be
  * identifier and the character code point. These arguments will be `string` and `numeric`. Keep in
  * mind that the `string` parameter can be two characters long depending on the character
  * representation. It is expected for the function to return `true` or `false`, whether that
  * character is allowed or not.
  *
  * Since this function will be called extensively, keep the implementation of these functions fast,
  * as the performance of these functions have a direct impact on the expressions parsing speed.
  *
  * @param {function=} identifierStart The function that will decide whether the given character is
  *   a valid identifier start character.
  * @param {function=} identifierContinue The function that will decide whether the given character is
  *   a valid identifier continue character.
  */this.setIdentifierFns=function(identifierStart,identifierContinue){identStart=identifierStart;identContinue=identifierContinue;return this;};this.$get=['$filter',function($filter){var noUnsafeEval=csp().noUnsafeEval;var $parseOptions={csp:noUnsafeEval,literals:copy(literals),isIdentifierStart:isFunction(identStart)&&identStart,isIdentifierContinue:isFunction(identContinue)&&identContinue};return $parse;function $parse(exp,interceptorFn){var parsedExpression,oneTime,cacheKey;switch(typeof exp){case'string':exp=exp.trim();cacheKey=exp;parsedExpression=cache[cacheKey];if(!parsedExpression){if(exp.charAt(0)===':'&&exp.charAt(1)===':'){oneTime=true;exp=exp.substring(2);}var lexer=new Lexer($parseOptions);var parser=new Parser(lexer,$filter,$parseOptions);parsedExpression=parser.parse(exp);if(parsedExpression.constant){parsedExpression.$$watchDelegate=constantWatchDelegate;}else if(oneTime){parsedExpression.$$watchDelegate=parsedExpression.literal?oneTimeLiteralWatchDelegate:oneTimeWatchDelegate;}else if(parsedExpression.inputs){parsedExpression.$$watchDelegate=inputsWatchDelegate;}cache[cacheKey]=parsedExpression;}return addInterceptor(parsedExpression,interceptorFn);case'function':return addInterceptor(exp,interceptorFn);default:return addInterceptor(noop,interceptorFn);}}function expressionInputDirtyCheck(newValue,oldValueOfValue,compareObjectIdentity){if(newValue==null||oldValueOfValue==null){// null/undefined
return newValue===oldValueOfValue;}if(typeof newValue==='object'){// attempt to convert the value to a primitive type
// TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
//             be cheaply dirty-checked
newValue=getValueOf(newValue);if(typeof newValue==='object'&&!compareObjectIdentity){// objects/arrays are not supported - deep-watching them would be too expensive
return false;}// fall-through to the primitive equality check
}//Primitive or NaN
// eslint-disable-next-line no-self-compare
return newValue===oldValueOfValue||newValue!==newValue&&oldValueOfValue!==oldValueOfValue;}function inputsWatchDelegate(scope,listener,objectEquality,parsedExpression,prettyPrintExpression){var inputExpressions=parsedExpression.inputs;var lastResult;if(inputExpressions.length===1){var oldInputValueOf=expressionInputDirtyCheck;// init to something unique so that equals check fails
inputExpressions=inputExpressions[0];return scope.$watch(function expressionInputWatch(scope){var newInputValue=inputExpressions(scope);if(!expressionInputDirtyCheck(newInputValue,oldInputValueOf,inputExpressions.isPure)){lastResult=parsedExpression(scope,undefined,undefined,[newInputValue]);oldInputValueOf=newInputValue&&getValueOf(newInputValue);}return lastResult;},listener,objectEquality,prettyPrintExpression);}var oldInputValueOfValues=[];var oldInputValues=[];for(var i=0,ii=inputExpressions.length;i<ii;i++){oldInputValueOfValues[i]=expressionInputDirtyCheck;// init to something unique so that equals check fails
oldInputValues[i]=null;}return scope.$watch(function expressionInputsWatch(scope){var changed=false;for(var i=0,ii=inputExpressions.length;i<ii;i++){var newInputValue=inputExpressions[i](scope);if(changed||(changed=!expressionInputDirtyCheck(newInputValue,oldInputValueOfValues[i],inputExpressions[i].isPure))){oldInputValues[i]=newInputValue;oldInputValueOfValues[i]=newInputValue&&getValueOf(newInputValue);}}if(changed){lastResult=parsedExpression(scope,undefined,undefined,oldInputValues);}return lastResult;},listener,objectEquality,prettyPrintExpression);}function oneTimeWatchDelegate(scope,listener,objectEquality,parsedExpression,prettyPrintExpression){var unwatch,lastValue;if(parsedExpression.inputs){unwatch=inputsWatchDelegate(scope,oneTimeListener,objectEquality,parsedExpression,prettyPrintExpression);}else{unwatch=scope.$watch(oneTimeWatch,oneTimeListener,objectEquality);}return unwatch;function oneTimeWatch(scope){return parsedExpression(scope);}function oneTimeListener(value,old,scope){lastValue=value;if(isFunction(listener)){listener(value,old,scope);}if(isDefined(value)){scope.$$postDigest(function(){if(isDefined(lastValue)){unwatch();}});}}}function oneTimeLiteralWatchDelegate(scope,listener,objectEquality,parsedExpression){var unwatch,lastValue;unwatch=scope.$watch(function oneTimeWatch(scope){return parsedExpression(scope);},function oneTimeListener(value,old,scope){lastValue=value;if(isFunction(listener)){listener(value,old,scope);}if(isAllDefined(value)){scope.$$postDigest(function(){if(isAllDefined(lastValue))unwatch();});}},objectEquality);return unwatch;function isAllDefined(value){var allDefined=true;forEach(value,function(val){if(!isDefined(val))allDefined=false;});return allDefined;}}function constantWatchDelegate(scope,listener,objectEquality,parsedExpression){var unwatch=scope.$watch(function constantWatch(scope){unwatch();return parsedExpression(scope);},listener,objectEquality);return unwatch;}function addInterceptor(parsedExpression,interceptorFn){if(!interceptorFn)return parsedExpression;var watchDelegate=parsedExpression.$$watchDelegate;var useInputs=false;var regularWatch=watchDelegate!==oneTimeLiteralWatchDelegate&&watchDelegate!==oneTimeWatchDelegate;var fn=regularWatch?function regularInterceptedExpression(scope,locals,assign,inputs){var value=useInputs&&inputs?inputs[0]:parsedExpression(scope,locals,assign,inputs);return interceptorFn(value,scope,locals);}:function oneTimeInterceptedExpression(scope,locals,assign,inputs){var value=parsedExpression(scope,locals,assign,inputs);var result=interceptorFn(value,scope,locals);// we only return the interceptor's result if the
// initial value is defined (for bind-once)
return isDefined(value)?result:value;};// Propagate $$watchDelegates other then inputsWatchDelegate
useInputs=!parsedExpression.inputs;if(watchDelegate&&watchDelegate!==inputsWatchDelegate){fn.$$watchDelegate=watchDelegate;fn.inputs=parsedExpression.inputs;}else if(!interceptorFn.$stateful){// Treat interceptor like filters - assume non-stateful by default and use the inputsWatchDelegate
fn.$$watchDelegate=inputsWatchDelegate;fn.inputs=parsedExpression.inputs?parsedExpression.inputs:[parsedExpression];}if(fn.inputs){fn.inputs=fn.inputs.map(function(e){// Remove the isPure flag of inputs when it is not absolute because they are now wrapped in a
// potentially non-pure interceptor function.
if(e.isPure===PURITY_RELATIVE){return function depurifier(s){return e(s);};}return e;});}return fn;}}];}/**
 * @ngdoc service
 * @name $q
 * @requires $rootScope
 *
 * @description
 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
 * when they are done processing.
 *
 * This is a [Promises/A+](https://promisesaplus.com/)-compliant implementation of promises/deferred
 * objects inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).
 *
 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
 * implementations, and the other which resembles ES6 (ES2015) promises to some degree.
 *
 * # $q constructor
 *
 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
 * function as the first argument. This is similar to the native Promise implementation from ES6,
 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
 *
 * While the constructor-style use is supported, not all of the supporting methods from ES6 promises are
 * available yet.
 *
 * It can be used like so:
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
 *     return $q(function(resolve, reject) {
 *       setTimeout(function() {
 *         if (okToGreet(name)) {
 *           resolve('Hello, ' + name + '!');
 *         } else {
 *           reject('Greeting ' + name + ' is not allowed.');
 *         }
 *       }, 1000);
 *     });
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   });
 * ```
 *
 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
 *
 * Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.
 *
 * However, the more traditional CommonJS-style usage is still available, and documented below.
 *
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
 * interface for interacting with an object that represents the result of an action that is
 * performed asynchronously, and may or may not be finished at any given point in time.
 *
 * From the perspective of dealing with error handling, deferred and promise APIs are to
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     var deferred = $q.defer();
 *
 *     setTimeout(function() {
 *       deferred.notify('About to greet ' + name + '.');
 *
 *       if (okToGreet(name)) {
 *         deferred.resolve('Hello, ' + name + '!');
 *       } else {
 *         deferred.reject('Greeting ' + name + ' is not allowed.');
 *       }
 *     }, 1000);
 *
 *     return deferred.promise;
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   }, function(update) {
 *     alert('Got notification: ' + update);
 *   });
 * ```
 *
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
 * comes in the way of guarantees that promise and deferred APIs make, see
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
 *
 * Additionally the promise api allows for composition that is very hard to do with the
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
 * section on serial or parallel joining of promises.
 *
 * # The Deferred API
 *
 * A new instance of deferred is constructed by calling `$q.defer()`.
 *
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
 * that can be used for signaling the successful or unsuccessful completion, as well as the status
 * of the task.
 *
 * **Methods**
 *
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
 *   constructed via `$q.reject`, the promise will be rejected instead.
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
 *   resolving it with a rejection constructed via `$q.reject`.
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
 *   multiple times before the promise is either resolved or rejected.
 *
 * **Properties**
 *
 * - promise – `{Promise}` – promise object associated with this deferred.
 *
 *
 * # The Promise API
 *
 * A new promise instance is created when a deferred instance is created and can be retrieved by
 * calling `deferred.promise`.
 *
 * The purpose of the promise object is to allow for interested parties to get access to the result
 * of the deferred task when it completes.
 *
 * **Methods**
 *
 * - `then(successCallback, [errorCallback], [notifyCallback])` – regardless of when the promise was or
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
 *   as soon as the result is available. The callbacks are called with a single argument: the result
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
 *   provide a progress indication, before the promise is resolved or rejected.
 *
 *   This method *returns a new promise* which is resolved or rejected via the return value of the
 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
 *   with the value which is resolved in that promise using
 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
 *   resolved or rejected from the notifyCallback method. The errorCallback and notifyCallback
 *   arguments are optional.
 *
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
 *
 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
 *   but to do so without modifying the final value. This is useful to release resources or do some
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
 *   more information.
 *
 * # Chaining promises
 *
 * Because calling the `then` method of a promise returns a new derived promise, it is easily
 * possible to create a chain of promises:
 *
 * ```js
 *   promiseB = promiseA.then(function(result) {
 *     return result + 1;
 *   });
 *
 *   // promiseB will be resolved immediately after promiseA is resolved and its value
 *   // will be the result of promiseA incremented by 1
 * ```
 *
 * It is possible to create chains of any length and since a promise can be resolved with another
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
 * $http's response interceptors.
 *
 *
 * # Differences between Kris Kowal's Q and $q
 *
 *  There are two main differences:
 *
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
 *   mechanism in angular, which means faster propagation of resolution or rejection into your
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
 *   all the important functionality needed for common async tasks.
 *
 * # Testing
 *
 *  ```js
 *    it('should simulate promise', inject(function($q, $rootScope) {
 *      var deferred = $q.defer();
 *      var promise = deferred.promise;
 *      var resolvedValue;
 *
 *      promise.then(function(value) { resolvedValue = value; });
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Simulate resolving of promise
 *      deferred.resolve(123);
 *      // Note that the 'then' function does not get called synchronously.
 *      // This is because we want the promise API to always be async, whether or not
 *      // it got called synchronously or asynchronously.
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Propagate promise resolution to 'then' functions using $apply().
 *      $rootScope.$apply();
 *      expect(resolvedValue).toEqual(123);
 *    }));
 *  ```
 *
 * @param {function(function, function)} resolver Function which is responsible for resolving or
 *   rejecting the newly created promise. The first parameter is a function which resolves the
 *   promise, the second parameter is a function which rejects the promise.
 *
 * @returns {Promise} The newly created promise.
 *//**
 * @ngdoc provider
 * @name $qProvider
 * @this
 *
 * @description
 */function $QProvider(){var errorOnUnhandledRejections=true;this.$get=['$rootScope','$exceptionHandler',function($rootScope,$exceptionHandler){return qFactory(function(callback){$rootScope.$evalAsync(callback);},$exceptionHandler,errorOnUnhandledRejections);}];/**
   * @ngdoc method
   * @name $qProvider#errorOnUnhandledRejections
   * @kind function
   *
   * @description
   * Retrieves or overrides whether to generate an error when a rejected promise is not handled.
   * This feature is enabled by default.
   *
   * @param {boolean=} value Whether to generate an error when a rejected promise is not handled.
   * @returns {boolean|ng.$qProvider} Current value when called without a new value or self for
   *    chaining otherwise.
   */this.errorOnUnhandledRejections=function(value){if(isDefined(value)){errorOnUnhandledRejections=value;return this;}else{return errorOnUnhandledRejections;}};}/** @this */function $$QProvider(){var errorOnUnhandledRejections=true;this.$get=['$browser','$exceptionHandler',function($browser,$exceptionHandler){return qFactory(function(callback){$browser.defer(callback);},$exceptionHandler,errorOnUnhandledRejections);}];this.errorOnUnhandledRejections=function(value){if(isDefined(value)){errorOnUnhandledRejections=value;return this;}else{return errorOnUnhandledRejections;}};}/**
 * Constructs a promise manager.
 *
 * @param {function(function)} nextTick Function for executing functions in the next turn.
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
 *     debugging purposes.
 * @param {boolean=} errorOnUnhandledRejections Whether an error should be generated on unhandled
 *     promises rejections.
 * @returns {object} Promise manager.
 */function qFactory(nextTick,exceptionHandler,errorOnUnhandledRejections){var $qMinErr=minErr('$q',TypeError);var queueSize=0;var checkQueue=[];/**
   * @ngdoc method
   * @name ng.$q#defer
   * @kind function
   *
   * @description
   * Creates a `Deferred` object which represents a task which will finish in the future.
   *
   * @returns {Deferred} Returns a new instance of deferred.
   */function defer(){return new Deferred();}function Deferred(){var promise=this.promise=new Promise();//Non prototype methods necessary to support unbound execution :/
this.resolve=function(val){resolvePromise(promise,val);};this.reject=function(reason){rejectPromise(promise,reason);};this.notify=function(progress){notifyPromise(promise,progress);};}function Promise(){this.$$state={status:0};}extend(Promise.prototype,{then:function(onFulfilled,onRejected,progressBack){if(isUndefined(onFulfilled)&&isUndefined(onRejected)&&isUndefined(progressBack)){return this;}var result=new Promise();this.$$state.pending=this.$$state.pending||[];this.$$state.pending.push([result,onFulfilled,onRejected,progressBack]);if(this.$$state.status>0)scheduleProcessQueue(this.$$state);return result;},'catch':function(callback){return this.then(null,callback);},'finally':function(callback,progressBack){return this.then(function(value){return handleCallback(value,resolve,callback);},function(error){return handleCallback(error,reject,callback);},progressBack);}});function processQueue(state){var fn,promise,pending;pending=state.pending;state.processScheduled=false;state.pending=undefined;try{for(var i=0,ii=pending.length;i<ii;++i){markQStateExceptionHandled(state);promise=pending[i][0];fn=pending[i][state.status];try{if(isFunction(fn)){resolvePromise(promise,fn(state.value));}else if(state.status===1){resolvePromise(promise,state.value);}else{rejectPromise(promise,state.value);}}catch(e){rejectPromise(promise,e);}}}finally{--queueSize;if(errorOnUnhandledRejections&&queueSize===0){nextTick(processChecks);}}}function processChecks(){// eslint-disable-next-line no-unmodified-loop-condition
while(!queueSize&&checkQueue.length){var toCheck=checkQueue.shift();if(!isStateExceptionHandled(toCheck)){markQStateExceptionHandled(toCheck);var errorMessage='Possibly unhandled rejection: '+toDebugString(toCheck.value);if(isError(toCheck.value)){exceptionHandler(toCheck.value,errorMessage);}else{exceptionHandler(errorMessage);}}}}function scheduleProcessQueue(state){if(errorOnUnhandledRejections&&!state.pending&&state.status===2&&!isStateExceptionHandled(state)){if(queueSize===0&&checkQueue.length===0){nextTick(processChecks);}checkQueue.push(state);}if(state.processScheduled||!state.pending)return;state.processScheduled=true;++queueSize;nextTick(function(){processQueue(state);});}function resolvePromise(promise,val){if(promise.$$state.status)return;if(val===promise){$$reject(promise,$qMinErr('qcycle','Expected promise to be resolved with value other than itself \'{0}\'',val));}else{$$resolve(promise,val);}}function $$resolve(promise,val){var then;var done=false;try{if(isObject(val)||isFunction(val))then=val.then;if(isFunction(then)){promise.$$state.status=-1;then.call(val,doResolve,doReject,doNotify);}else{promise.$$state.value=val;promise.$$state.status=1;scheduleProcessQueue(promise.$$state);}}catch(e){doReject(e);}function doResolve(val){if(done)return;done=true;$$resolve(promise,val);}function doReject(val){if(done)return;done=true;$$reject(promise,val);}function doNotify(progress){notifyPromise(promise,progress);}}function rejectPromise(promise,reason){if(promise.$$state.status)return;$$reject(promise,reason);}function $$reject(promise,reason){promise.$$state.value=reason;promise.$$state.status=2;scheduleProcessQueue(promise.$$state);}function notifyPromise(promise,progress){var callbacks=promise.$$state.pending;if(promise.$$state.status<=0&&callbacks&&callbacks.length){nextTick(function(){var callback,result;for(var i=0,ii=callbacks.length;i<ii;i++){result=callbacks[i][0];callback=callbacks[i][3];try{notifyPromise(result,isFunction(callback)?callback(progress):progress);}catch(e){exceptionHandler(e);}}});}}/**
   * @ngdoc method
   * @name $q#reject
   * @kind function
   *
   * @description
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
   * a promise chain, you don't need to worry about it.
   *
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
   * a promise error callback and you want to forward the error to the promise derived from the
   * current promise, you have to "rethrow" the error by returning a rejection constructed via
   * `reject`.
   *
   * ```js
   *   promiseB = promiseA.then(function(result) {
   *     // success: do something and resolve promiseB
   *     //          with the old or a new result
   *     return result;
   *   }, function(reason) {
   *     // error: handle the error if possible and
   *     //        resolve promiseB with newPromiseOrValue,
   *     //        otherwise forward the rejection to promiseB
   *     if (canHandle(reason)) {
   *      // handle the error and recover
   *      return newPromiseOrValue;
   *     }
   *     return $q.reject(reason);
   *   });
   * ```
   *
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
   */function reject(reason){var result=new Promise();rejectPromise(result,reason);return result;}function handleCallback(value,resolver,callback){var callbackOutput=null;try{if(isFunction(callback))callbackOutput=callback();}catch(e){return reject(e);}if(isPromiseLike(callbackOutput)){return callbackOutput.then(function(){return resolver(value);},reject);}else{return resolver(value);}}/**
   * @ngdoc method
   * @name $q#when
   * @kind function
   *
   * @description
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
   * This is useful when you are dealing with an object that might or might not be a promise, or if
   * the promise comes from a source that can't be trusted.
   *
   * @param {*} value Value or a promise
   * @param {Function=} successCallback
   * @param {Function=} errorCallback
   * @param {Function=} progressCallback
   * @returns {Promise} Returns a promise of the passed value or promise
   */function when(value,callback,errback,progressBack){var result=new Promise();resolvePromise(result,value);return result.then(callback,errback,progressBack);}/**
   * @ngdoc method
   * @name $q#resolve
   * @kind function
   *
   * @description
   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
   *
   * @param {*} value Value or a promise
   * @param {Function=} successCallback
   * @param {Function=} errorCallback
   * @param {Function=} progressCallback
   * @returns {Promise} Returns a promise of the passed value or promise
   */var resolve=when;/**
   * @ngdoc method
   * @name $q#all
   * @kind function
   *
   * @description
   * Combines multiple promises into a single promise that is resolved when all of the input
   * promises are resolved.
   *
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
   *   with the same rejection value.
   */function all(promises){var result=new Promise(),counter=0,results=isArray(promises)?[]:{};forEach(promises,function(promise,key){counter++;when(promise).then(function(value){results[key]=value;if(! --counter)resolvePromise(result,results);},function(reason){rejectPromise(result,reason);});});if(counter===0){resolvePromise(result,results);}return result;}/**
   * @ngdoc method
   * @name $q#race
   * @kind function
   *
   * @description
   * Returns a promise that resolves or rejects as soon as one of those promises
   * resolves or rejects, with the value or reason from that promise.
   *
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
   * @returns {Promise} a promise that resolves or rejects as soon as one of the `promises`
   * resolves or rejects, with the value or reason from that promise.
   */function race(promises){var deferred=defer();forEach(promises,function(promise){when(promise).then(deferred.resolve,deferred.reject);});return deferred.promise;}function $Q(resolver){if(!isFunction(resolver)){throw $qMinErr('norslvr','Expected resolverFn, got \'{0}\'',resolver);}var promise=new Promise();function resolveFn(value){resolvePromise(promise,value);}function rejectFn(reason){rejectPromise(promise,reason);}resolver(resolveFn,rejectFn);return promise;}// Let's make the instanceof operator work for promises, so that
// `new $q(fn) instanceof $q` would evaluate to true.
$Q.prototype=Promise.prototype;$Q.defer=defer;$Q.reject=reject;$Q.when=when;$Q.resolve=resolve;$Q.all=all;$Q.race=race;return $Q;}function isStateExceptionHandled(state){return!!state.pur;}function markQStateExceptionHandled(state){state.pur=true;}function markQExceptionHandled(q){markQStateExceptionHandled(q.$$state);}/** @this */function $$RAFProvider(){//rAF
this.$get=['$window','$timeout',function($window,$timeout){var requestAnimationFrame=$window.requestAnimationFrame||$window.webkitRequestAnimationFrame;var cancelAnimationFrame=$window.cancelAnimationFrame||$window.webkitCancelAnimationFrame||$window.webkitCancelRequestAnimationFrame;var rafSupported=!!requestAnimationFrame;var raf=rafSupported?function(fn){var id=requestAnimationFrame(fn);return function(){cancelAnimationFrame(id);};}:function(fn){var timer=$timeout(fn,16.66,false);// 1000 / 60 = 16.666
return function(){$timeout.cancel(timer);};};raf.supported=rafSupported;return raf;}];}/**
 * DESIGN NOTES
 *
 * The design decisions behind the scope are heavily favored for speed and memory consumption.
 *
 * The typical use of scope is to watch the expressions, which most of the time return the same
 * value as last time so we optimize the operation.
 *
 * Closures construction is expensive in terms of speed as well as memory:
 *   - No closures, instead use prototypical inheritance for API
 *   - Internal state needs to be stored on scope directly, which means that private state is
 *     exposed as $$____ properties
 *
 * Loop operations are optimized by using while(count--) { ... }
 *   - This means that in order to keep the same order of execution as addition we have to add
 *     items to the array at the beginning (unshift) instead of at the end (push)
 *
 * Child scopes are created and removed often
 *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists
 *
 * There are fewer watches than observers. This is why you don't want the observer to be implemented
 * in the same way as watch. Watch requires return of the initialization function which is expensive
 * to construct.
 *//**
 * @ngdoc provider
 * @name $rootScopeProvider
 * @description
 *
 * Provider for the $rootScope service.
 *//**
 * @ngdoc method
 * @name $rootScopeProvider#digestTtl
 * @description
 *
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
 * assuming that the model is unstable.
 *
 * The current default is 10 iterations.
 *
 * In complex applications it's possible that the dependencies between `$watch`s will result in
 * several digest iterations. However if an application needs more than the default 10 digest
 * iterations for its model to stabilize then you should investigate what is causing the model to
 * continuously change during the digest.
 *
 * Increasing the TTL could have performance implications, so you should not change it without
 * proper justification.
 *
 * @param {number} limit The number of digest iterations.
 *//**
 * @ngdoc service
 * @name $rootScope
 * @this
 *
 * @description
 *
 * Every application has a single root {@link ng.$rootScope.Scope scope}.
 * All other scopes are descendant scopes of the root scope. Scopes provide separation
 * between the model and the view, via a mechanism for watching the model for changes.
 * They also provide event emission/broadcast and subscription facility. See the
 * {@link guide/scope developer guide on scopes}.
 */function $RootScopeProvider(){var TTL=10;var $rootScopeMinErr=minErr('$rootScope');var lastDirtyWatch=null;var applyAsyncId=null;this.digestTtl=function(value){if(arguments.length){TTL=value;}return TTL;};function createChildScopeClass(parent){function ChildScope(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null;this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=0;this.$id=nextUid();this.$$ChildScope=null;}ChildScope.prototype=parent;return ChildScope;}this.$get=['$exceptionHandler','$parse','$browser',function($exceptionHandler,$parse,$browser){function destroyChildScope($event){$event.currentScope.$$destroyed=true;}function cleanUpScope($scope){// Support: IE 9 only
if(msie===9){// There is a memory leak in IE9 if all child scopes are not disconnected
// completely when a scope is destroyed. So this code will recurse up through
// all this scopes children
//
// See issue https://github.com/angular/angular.js/issues/10706
if($scope.$$childHead){cleanUpScope($scope.$$childHead);}if($scope.$$nextSibling){cleanUpScope($scope.$$nextSibling);}}// The code below works around IE9 and V8's memory leaks
//
// See:
// - https://code.google.com/p/v8/issues/detail?id=2073#c26
// - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
// - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451
$scope.$parent=$scope.$$nextSibling=$scope.$$prevSibling=$scope.$$childHead=$scope.$$childTail=$scope.$root=$scope.$$watchers=null;}/**
     * @ngdoc type
     * @name $rootScope.Scope
     *
     * @description
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
     * {@link auto.$injector $injector}. Child scopes are created using the
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
     * an in-depth introduction and usage examples.
     *
     *
     * # Inheritance
     * A scope can inherit from a parent scope, as in this example:
     * ```js
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
     * ```
     *
     * When interacting with `Scope` in tests, additional helper methods are available on the
     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
     * details.
     *
     *
     * @param {Object.<string, function()>=} providers Map of service factory which need to be
     *                                       provided for the current scope. Defaults to {@link ng}.
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
     *                              append/override services provided by `providers`. This is handy
     *                              when unit-testing and having the need to override a default
     *                              service.
     * @returns {Object} Newly created scope.
     *
     */function Scope(){this.$id=nextUid();this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null;this.$root=this;this.$$destroyed=false;this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=0;this.$$isolateBindings=null;}/**
     * @ngdoc property
     * @name $rootScope.Scope#$id
     *
     * @description
     * Unique scope ID (monotonically increasing) useful for debugging.
     *//**
      * @ngdoc property
      * @name $rootScope.Scope#$parent
      *
      * @description
      * Reference to the parent scope.
      *//**
       * @ngdoc property
       * @name $rootScope.Scope#$root
       *
       * @description
       * Reference to the root scope.
       */Scope.prototype={constructor:Scope,/**
       * @ngdoc method
       * @name $rootScope.Scope#$new
       * @kind function
       *
       * @description
       * Creates a new child {@link ng.$rootScope.Scope scope}.
       *
       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
       *
       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
       * desired for the scope and its child scopes to be permanently detached from the parent and
       * thus stop participating in model change detection and listener notification by invoking.
       *
       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
       *         parent scope. The scope is isolated, as it can not see parent scope properties.
       *         When creating widgets, it is useful for the widget to not accidentally read parent
       *         state.
       *
       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
       *                              of the newly created scope. Defaults to `this` scope if not provided.
       *                              This is used when creating a transclude scope to correctly place it
       *                              in the scope hierarchy while maintaining the correct prototypical
       *                              inheritance.
       *
       * @returns {Object} The newly created child scope.
       *
       */$new:function(isolate,parent){var child;parent=parent||this;if(isolate){child=new Scope();child.$root=this.$root;}else{// Only create a child scope class if somebody asks for one,
// but cache it to allow the VM to optimize lookups.
if(!this.$$ChildScope){this.$$ChildScope=createChildScopeClass(this);}child=new this.$$ChildScope();}child.$parent=parent;child.$$prevSibling=parent.$$childTail;if(parent.$$childHead){parent.$$childTail.$$nextSibling=child;parent.$$childTail=child;}else{parent.$$childHead=parent.$$childTail=child;}// When the new scope is not isolated or we inherit from `this`, and
// the parent scope is destroyed, the property `$$destroyed` is inherited
// prototypically. In all other cases, this property needs to be set
// when the parent scope is destroyed.
// The listener needs to be added after the parent is set
if(isolate||parent!==this)child.$on('$destroy',destroyChildScope);return child;},/**
       * @ngdoc method
       * @name $rootScope.Scope#$watch
       * @kind function
       *
       * @description
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
       *
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
       *   its value when executed multiple times with the same input because it may be executed multiple
       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).)
       * - The `listener` is called only when the value from the current `watchExpression` and the
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
       *   see below). Inequality is determined according to reference inequality,
       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
       *    via the `!==` Javascript operator, unless `objectEquality == true`
       *   (see next point)
       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
       *   according to the {@link angular.equals} function. To save the value of the object for
       *   later comparison, the {@link angular.copy} function is used. This therefore means that
       *   watching complex objects will have adverse memory and performance implications.
       * - This should not be used to watch for changes in objects that are
       *   or contain [File](https://developer.mozilla.org/docs/Web/API/File) objects due to limitations with {@link angular.copy `angular.copy`}.
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
       *   iteration limit is 10 to prevent an infinite loop deadlock.
       *
       *
       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
       * you can register a `watchExpression` function with no `listener`. (Be prepared for
       * multiple calls to your `watchExpression` because it will execute multiple times in a
       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
       *
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
       * watcher. In rare cases, this is undesirable because the listener is called when the result
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
       * listener was called due to initialization.
       *
       *
       *
       * # Example
       * ```js
           // let's assume that scope was dependency injected as the $rootScope
           var scope = $rootScope;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);



           // Using a function as a watchExpression
           var food;
           scope.foodCounter = 0;
           expect(scope.foodCounter).toEqual(0);
           scope.$watch(
             // This function returns the value being watched. It is called for each turn of the $digest loop
             function() { return food; },
             // This is the change listener, called when the value returned from the above function changes
             function(newValue, oldValue) {
               if ( newValue !== oldValue ) {
                 // Only increment the counter if the value changed
                 scope.foodCounter = scope.foodCounter + 1;
               }
             }
           );
           // No digest has been run so the counter will be zero
           expect(scope.foodCounter).toEqual(0);

           // Run the digest but since food has not changed count will still be zero
           scope.$digest();
           expect(scope.foodCounter).toEqual(0);

           // Update food and run digest.  Now the counter will increment
           food = 'cheeseburger';
           scope.$digest();
           expect(scope.foodCounter).toEqual(1);

       * ```
       *
       *
       *
       * @param {(function()|string)} watchExpression Expression that is evaluated on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
       *    a call to the `listener`.
       *
       *    - `string`: Evaluated as {@link guide/expression expression}
       *    - `function(scope)`: called with current `scope` as a parameter.
       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
       *    of `watchExpression` changes.
       *
       *    - `newVal` contains the current value of the `watchExpression`
       *    - `oldVal` contains the previous value of the `watchExpression`
       *    - `scope` refers to the current scope
       * @param {boolean=} [objectEquality=false] Compare for object equality using {@link angular.equals} instead of
       *     comparing for reference equality.
       * @returns {function()} Returns a deregistration function for this listener.
       */$watch:function(watchExp,listener,objectEquality,prettyPrintExpression){var get=$parse(watchExp);if(get.$$watchDelegate){return get.$$watchDelegate(this,listener,objectEquality,get,watchExp);}var scope=this,array=scope.$$watchers,watcher={fn:listener,last:initWatchVal,get:get,exp:prettyPrintExpression||watchExp,eq:!!objectEquality};lastDirtyWatch=null;if(!isFunction(listener)){watcher.fn=noop;}if(!array){array=scope.$$watchers=[];array.$$digestWatchIndex=-1;}// we use unshift since we use a while loop in $digest for speed.
// the while loop reads in reverse order.
array.unshift(watcher);array.$$digestWatchIndex++;incrementWatchersCount(this,1);return function deregisterWatch(){var index=arrayRemove(array,watcher);if(index>=0){incrementWatchersCount(scope,-1);if(index<array.$$digestWatchIndex){array.$$digestWatchIndex--;}}lastDirtyWatch=null;};},/**
       * @ngdoc method
       * @name $rootScope.Scope#$watchGroup
       * @kind function
       *
       * @description
       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
       * If any one expression in the collection changes the `listener` is executed.
       *
       * - The items in the `watchExpressions` array are observed via the standard `$watch` operation. Their return
       *   values are examined for changes on every call to `$digest`.
       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
       *
       * `$watchGroup` is more performant than watching each expression individually, and should be
       * used when the listener does not need to know which expression has changed.
       * If the listener needs to know which expression has changed,
       * {@link ng.$rootScope.Scope#$watch $watch()} or
       * {@link ng.$rootScope.Scope#$watchCollection $watchCollection()} should be used.
       *
       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
       *
       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
       *    expression in `watchExpressions` changes
       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`
       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`.
       *
       *    Note that `newValues` and `oldValues` reflect the differences in each **individual**
       *    expression, and not the difference of the values between each call of the listener.
       *    That means the difference between `newValues` and `oldValues` cannot be used to determine
       *    which expression has changed / remained stable:
       *
       *    ```js
       *
       *    $scope.$watchGroup(['v1', 'v2'], function(newValues, oldValues) {
       *      console.log(newValues, oldValues);
       *    });
       *
       *    // newValues, oldValues initially
       *    // [undefined, undefined], [undefined, undefined]
       *
       *    $scope.v1 = 'a';
       *    $scope.v2 = 'a';
       *
       *    // ['a', 'a'], [undefined, undefined]
       *
       *    $scope.v2 = 'b'
       *
       *    // v1 hasn't changed since it became `'a'`, therefore its oldValue is still `undefined`
       *    // ['a', 'b'], [undefined, 'a']
       *
       *    ```
       *
       *    The `scope` refers to the current scope.
       * @returns {function()} Returns a de-registration function for all listeners.
       */$watchGroup:function(watchExpressions,listener){var oldValues=new Array(watchExpressions.length);var newValues=new Array(watchExpressions.length);var deregisterFns=[];var self=this;var changeReactionScheduled=false;var firstRun=true;if(!watchExpressions.length){// No expressions means we call the listener ASAP
var shouldCall=true;self.$evalAsync(function(){if(shouldCall)listener(newValues,newValues,self);});return function deregisterWatchGroup(){shouldCall=false;};}if(watchExpressions.length===1){// Special case size of one
return this.$watch(watchExpressions[0],function watchGroupAction(value,oldValue,scope){newValues[0]=value;oldValues[0]=oldValue;listener(newValues,value===oldValue?newValues:oldValues,scope);});}forEach(watchExpressions,function(expr,i){var unwatchFn=self.$watch(expr,function watchGroupSubAction(value,oldValue){newValues[i]=value;oldValues[i]=oldValue;if(!changeReactionScheduled){changeReactionScheduled=true;self.$evalAsync(watchGroupAction);}});deregisterFns.push(unwatchFn);});function watchGroupAction(){changeReactionScheduled=false;if(firstRun){firstRun=false;listener(newValues,newValues,self);}else{listener(newValues,oldValues,self);}}return function deregisterWatchGroup(){while(deregisterFns.length){deregisterFns.shift()();}};},/**
       * @ngdoc method
       * @name $rootScope.Scope#$watchCollection
       * @kind function
       *
       * @description
       * Shallow watches the properties of an object and fires whenever any of the properties change
       * (for arrays, this implies watching the array items; for object maps, this implies watching
       * the properties). If a change is detected, the `listener` callback is fired.
       *
       * - The `obj` collection is observed via standard $watch operation and is examined on every
       *   call to $digest() to see if any items have been added, removed, or moved.
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
       *   adding, removing, and moving items belonging to an object or array.
       *
       *
       * # Example
       * ```js
          $scope.names = ['igor', 'matias', 'misko', 'james'];
          $scope.dataCount = 4;

          $scope.$watchCollection('names', function(newNames, oldNames) {
            $scope.dataCount = newNames.length;
          });

          expect($scope.dataCount).toEqual(4);
          $scope.$digest();

          //still at 4 ... no changes
          expect($scope.dataCount).toEqual(4);

          $scope.names.pop();
          $scope.$digest();

          //now there's been a change
          expect($scope.dataCount).toEqual(3);
       * ```
       *
       *
       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
       *    expression value should evaluate to an object or an array which is observed on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
       *    collection will trigger a call to the `listener`.
       *
       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
       *    when a change is detected.
       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
       *    - The `oldCollection` object is a copy of the former collection data.
       *      Due to performance considerations, the`oldCollection` value is computed only if the
       *      `listener` function declares two or more arguments.
       *    - The `scope` argument refers to the current scope.
       *
       * @returns {function()} Returns a de-registration function for this listener. When the
       *    de-registration function is executed, the internal watch operation is terminated.
       */$watchCollection:function(obj,listener){$watchCollectionInterceptor.$stateful=true;var self=this;// the current value, updated on each dirty-check run
var newValue;// a shallow copy of the newValue from the last dirty-check run,
// updated to match newValue during dirty-check run
var oldValue;// a shallow copy of the newValue from when the last change happened
var veryOldValue;// only track veryOldValue if the listener is asking for it
var trackVeryOldValue=listener.length>1;var changeDetected=0;var changeDetector=$parse(obj,$watchCollectionInterceptor);var internalArray=[];var internalObject={};var initRun=true;var oldLength=0;function $watchCollectionInterceptor(_value){newValue=_value;var newLength,key,bothNaN,newItem,oldItem;// If the new value is undefined, then return undefined as the watch may be a one-time watch
if(isUndefined(newValue))return;if(!isObject(newValue)){// if primitive
if(oldValue!==newValue){oldValue=newValue;changeDetected++;}}else if(isArrayLike(newValue)){if(oldValue!==internalArray){// we are transitioning from something which was not an array into array.
oldValue=internalArray;oldLength=oldValue.length=0;changeDetected++;}newLength=newValue.length;if(oldLength!==newLength){// if lengths do not match we need to trigger change notification
changeDetected++;oldValue.length=oldLength=newLength;}// copy the items to oldValue and look for changes.
for(var i=0;i<newLength;i++){oldItem=oldValue[i];newItem=newValue[i];// eslint-disable-next-line no-self-compare
bothNaN=oldItem!==oldItem&&newItem!==newItem;if(!bothNaN&&oldItem!==newItem){changeDetected++;oldValue[i]=newItem;}}}else{if(oldValue!==internalObject){// we are transitioning from something which was not an object into object.
oldValue=internalObject={};oldLength=0;changeDetected++;}// copy the items to oldValue and look for changes.
newLength=0;for(key in newValue){if(hasOwnProperty.call(newValue,key)){newLength++;newItem=newValue[key];oldItem=oldValue[key];if(key in oldValue){// eslint-disable-next-line no-self-compare
bothNaN=oldItem!==oldItem&&newItem!==newItem;if(!bothNaN&&oldItem!==newItem){changeDetected++;oldValue[key]=newItem;}}else{oldLength++;oldValue[key]=newItem;changeDetected++;}}}if(oldLength>newLength){// we used to have more keys, need to find them and destroy them.
changeDetected++;for(key in oldValue){if(!hasOwnProperty.call(newValue,key)){oldLength--;delete oldValue[key];}}}}return changeDetected;}function $watchCollectionAction(){if(initRun){initRun=false;listener(newValue,newValue,self);}else{listener(newValue,veryOldValue,self);}// make a copy for the next time a collection is changed
if(trackVeryOldValue){if(!isObject(newValue)){//primitive
veryOldValue=newValue;}else if(isArrayLike(newValue)){veryOldValue=new Array(newValue.length);for(var i=0;i<newValue.length;i++){veryOldValue[i]=newValue[i];}}else{// if object
veryOldValue={};for(var key in newValue){if(hasOwnProperty.call(newValue,key)){veryOldValue[key]=newValue[key];}}}}}return this.$watch(changeDetector,$watchCollectionAction);},/**
       * @ngdoc method
       * @name $rootScope.Scope#$digest
       * @kind function
       *
       * @description
       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
       * until no more listeners are firing. This means that it is possible to get into an infinite
       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
       * iterations exceeds 10.
       *
       * Usually, you don't call `$digest()` directly in
       * {@link ng.directive:ngController controllers} or in
       * {@link ng.$compileProvider#directive directives}.
       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
       *
       * If you want to be notified whenever `$digest()` is called,
       * you can register a `watchExpression` function with
       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
       *
       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
       *
       * # Example
       * ```js
           var scope = ...;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);
       * ```
       *
       */$digest:function(){var watch,value,last,fn,get,watchers,dirty,ttl=TTL,next,current,target=this,watchLog=[],logIdx,asyncTask;beginPhase('$digest');// Check for changes to browser url that happened in sync before the call to $digest
$browser.$$checkUrlChange();if(this===$rootScope&&applyAsyncId!==null){// If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
// cancel the scheduled $apply and flush the queue of expressions to be evaluated.
$browser.defer.cancel(applyAsyncId);flushApplyAsync();}lastDirtyWatch=null;do{// "while dirty" loop
dirty=false;current=target;// It's safe for asyncQueuePosition to be a local variable here because this loop can't
// be reentered recursively. Calling $digest from a function passed to $evalAsync would
// lead to a '$digest already in progress' error.
for(var asyncQueuePosition=0;asyncQueuePosition<asyncQueue.length;asyncQueuePosition++){try{asyncTask=asyncQueue[asyncQueuePosition];fn=asyncTask.fn;fn(asyncTask.scope,asyncTask.locals);}catch(e){$exceptionHandler(e);}lastDirtyWatch=null;}asyncQueue.length=0;traverseScopesLoop:do{// "traverse the scopes" loop
if(watchers=current.$$watchers){// process our watches
watchers.$$digestWatchIndex=watchers.length;while(watchers.$$digestWatchIndex--){try{watch=watchers[watchers.$$digestWatchIndex];// Most common watches are on primitives, in which case we can short
// circuit it with === operator, only when === fails do we use .equals
if(watch){get=watch.get;if((value=get(current))!==(last=watch.last)&&!(watch.eq?equals(value,last):isNumberNaN(value)&&isNumberNaN(last))){dirty=true;lastDirtyWatch=watch;watch.last=watch.eq?copy(value,null):value;fn=watch.fn;fn(value,last===initWatchVal?value:last,current);if(ttl<5){logIdx=4-ttl;if(!watchLog[logIdx])watchLog[logIdx]=[];watchLog[logIdx].push({msg:isFunction(watch.exp)?'fn: '+(watch.exp.name||watch.exp.toString()):watch.exp,newVal:value,oldVal:last});}}else if(watch===lastDirtyWatch){// If the most recently dirty watcher is now clean, short circuit since the remaining watchers
// have already been tested.
dirty=false;break traverseScopesLoop;}}}catch(e){$exceptionHandler(e);}}}// Insanity Warning: scope depth-first traversal
// yes, this code is a bit crazy, but it works and we have tests to prove it!
// this piece should be kept in sync with the traversal in $broadcast
if(!(next=current.$$watchersCount&&current.$$childHead||current!==target&&current.$$nextSibling)){while(current!==target&&!(next=current.$$nextSibling)){current=current.$parent;}}}while(current=next);// `break traverseScopesLoop;` takes us to here
if((dirty||asyncQueue.length)&&!ttl--){clearPhase();throw $rootScopeMinErr('infdig','{0} $digest() iterations reached. Aborting!\n'+'Watchers fired in the last 5 iterations: {1}',TTL,watchLog);}}while(dirty||asyncQueue.length);clearPhase();// postDigestQueuePosition isn't local here because this loop can be reentered recursively.
while(postDigestQueuePosition<postDigestQueue.length){try{postDigestQueue[postDigestQueuePosition++]();}catch(e){$exceptionHandler(e);}}postDigestQueue.length=postDigestQueuePosition=0;// Check for changes to browser url that happened during the $digest
// (for which no event is fired; e.g. via `history.pushState()`)
$browser.$$checkUrlChange();},/**
       * @ngdoc event
       * @name $rootScope.Scope#$destroy
       * @eventType broadcast on scope being destroyed
       *
       * @description
       * Broadcasted when a scope and its children are being destroyed.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       *//**
       * @ngdoc method
       * @name $rootScope.Scope#$destroy
       * @kind function
       *
       * @description
       * Removes the current scope (and all of its children) from the parent scope. Removal implies
       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
       * propagate to the current scope and its children. Removal also implies that the current
       * scope is eligible for garbage collection.
       *
       * The `$destroy()` is usually used by directives such as
       * {@link ng.directive:ngRepeat ngRepeat} for managing the
       * unrolling of the loop.
       *
       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
       * Application code can register a `$destroy` event handler that will give it a chance to
       * perform any necessary cleanup.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */$destroy:function(){// We can't destroy a scope that has been already destroyed.
if(this.$$destroyed)return;var parent=this.$parent;this.$broadcast('$destroy');this.$$destroyed=true;if(this===$rootScope){//Remove handlers attached to window when $rootScope is removed
$browser.$$applicationDestroyed();}incrementWatchersCount(this,-this.$$watchersCount);for(var eventName in this.$$listenerCount){decrementListenerCount(this,this.$$listenerCount[eventName],eventName);}// sever all the references to parent scopes (after this cleanup, the current scope should
// not be retained by any of our references and should be eligible for garbage collection)
if(parent&&parent.$$childHead===this)parent.$$childHead=this.$$nextSibling;if(parent&&parent.$$childTail===this)parent.$$childTail=this.$$prevSibling;if(this.$$prevSibling)this.$$prevSibling.$$nextSibling=this.$$nextSibling;if(this.$$nextSibling)this.$$nextSibling.$$prevSibling=this.$$prevSibling;// Disable listeners, watchers and apply/digest methods
this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=noop;this.$on=this.$watch=this.$watchGroup=function(){return noop;};this.$$listeners={};// Disconnect the next sibling to prevent `cleanUpScope` destroying those too
this.$$nextSibling=null;cleanUpScope(this);},/**
       * @ngdoc method
       * @name $rootScope.Scope#$eval
       * @kind function
       *
       * @description
       * Executes the `expression` on the current scope and returns the result. Any exceptions in
       * the expression are propagated (uncaught). This is useful when evaluating Angular
       * expressions.
       *
       * # Example
       * ```js
           var scope = ng.$rootScope.Scope();
           scope.a = 1;
           scope.b = 2;

           expect(scope.$eval('a+b')).toEqual(3);
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
       * ```
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       * @returns {*} The result of evaluating the expression.
       */$eval:function(expr,locals){return $parse(expr)(this,locals);},/**
       * @ngdoc method
       * @name $rootScope.Scope#$evalAsync
       * @kind function
       *
       * @description
       * Executes the expression on the current scope at a later point in time.
       *
       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
       * that:
       *
       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
       *     rendering).
       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
       *     `expression` execution.
       *
       * Any exceptions from the execution of the expression are forwarded to the
       * {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
       * will be scheduled. However, it is encouraged to always call code that changes the model
       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       */$evalAsync:function(expr,locals){// if we are outside of an $digest loop and this is the first time we are scheduling async
// task also schedule async auto-flush
if(!$rootScope.$$phase&&!asyncQueue.length){$browser.defer(function(){if(asyncQueue.length){$rootScope.$digest();}});}asyncQueue.push({scope:this,fn:$parse(expr),locals:locals});},$$postDigest:function(fn){postDigestQueue.push(fn);},/**
       * @ngdoc method
       * @name $rootScope.Scope#$apply
       * @kind function
       *
       * @description
       * `$apply()` is used to execute an expression in angular from outside of the angular
       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
       * Because we are calling into the angular framework we need to perform proper scope life
       * cycle of {@link ng.$exceptionHandler exception handling},
       * {@link ng.$rootScope.Scope#$digest executing watches}.
       *
       * ## Life cycle
       *
       * # Pseudo-Code of `$apply()`
       * ```js
           function $apply(expr) {
             try {
               return $eval(expr);
             } catch (e) {
               $exceptionHandler(e);
             } finally {
               $root.$digest();
             }
           }
       * ```
       *
       *
       * Scope's `$apply()` method transitions through the following stages:
       *
       * 1. The {@link guide/expression expression} is executed using the
       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
       * 2. Any exceptions from the execution of the expression are forwarded to the
       *    {@link ng.$exceptionHandler $exceptionHandler} service.
       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
       *
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       *
       * @returns {*} The result of evaluating the expression.
       */$apply:function(expr){try{beginPhase('$apply');try{return this.$eval(expr);}finally{clearPhase();}}catch(e){$exceptionHandler(e);}finally{try{$rootScope.$digest();}catch(e){$exceptionHandler(e);// eslint-disable-next-line no-unsafe-finally
throw e;}}},/**
       * @ngdoc method
       * @name $rootScope.Scope#$applyAsync
       * @kind function
       *
       * @description
       * Schedule the invocation of $apply to occur at a later time. The actual time difference
       * varies across browsers, but is typically around ~10 milliseconds.
       *
       * This can be used to queue up multiple expressions which need to be evaluated in the same
       * digest.
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       */$applyAsync:function(expr){var scope=this;if(expr){applyAsyncQueue.push($applyAsyncExpression);}expr=$parse(expr);scheduleApplyAsync();function $applyAsyncExpression(){scope.$eval(expr);}},/**
       * @ngdoc method
       * @name $rootScope.Scope#$on
       * @kind function
       *
       * @description
       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
       * discussion of event life cycle.
       *
       * The event listener function format is: `function(event, args...)`. The `event` object
       * passed into the listener has the following attributes:
       *
       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
       *     `$broadcast`-ed.
       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
       *     event propagates through the scope hierarchy, this property is set to null.
       *   - `name` - `{string}`: name of the event.
       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
       *     further event propagation (available only for events that were `$emit`-ed).
       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
       *     to true.
       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
       *
       * @param {string} name Event name to listen on.
       * @param {function(event, ...args)} listener Function to call when the event is emitted.
       * @returns {function()} Returns a deregistration function for this listener.
       */$on:function(name,listener){var namedListeners=this.$$listeners[name];if(!namedListeners){this.$$listeners[name]=namedListeners=[];}namedListeners.push(listener);var current=this;do{if(!current.$$listenerCount[name]){current.$$listenerCount[name]=0;}current.$$listenerCount[name]++;}while(current=current.$parent);var self=this;return function(){var indexOfListener=namedListeners.indexOf(listener);if(indexOfListener!==-1){namedListeners[indexOfListener]=null;decrementListenerCount(self,1,name);}};},/**
       * @ngdoc method
       * @name $rootScope.Scope#$emit
       * @kind function
       *
       * @description
       * Dispatches an event `name` upwards through the scope hierarchy notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$emit` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
       * registered listeners along the way. The event will stop propagating if one of the listeners
       * cancels it.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to emit.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
       */$emit:function(name,args){var empty=[],namedListeners,scope=this,stopPropagation=false,event={name:name,targetScope:scope,stopPropagation:function(){stopPropagation=true;},preventDefault:function(){event.defaultPrevented=true;},defaultPrevented:false},listenerArgs=concat([event],arguments,1),i,length;do{namedListeners=scope.$$listeners[name]||empty;event.currentScope=scope;for(i=0,length=namedListeners.length;i<length;i++){// if listeners were deregistered, defragment the array
if(!namedListeners[i]){namedListeners.splice(i,1);i--;length--;continue;}try{//allow all listeners attached to the current scope to run
namedListeners[i].apply(null,listenerArgs);}catch(e){$exceptionHandler(e);}}//if any listener on the current scope stops propagation, prevent bubbling
if(stopPropagation){event.currentScope=null;return event;}//traverse upwards
scope=scope.$parent;}while(scope);event.currentScope=null;return event;},/**
       * @ngdoc method
       * @name $rootScope.Scope#$broadcast
       * @kind function
       *
       * @description
       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$broadcast` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
       * scope and calls all registered listeners along the way. The event cannot be canceled.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to broadcast.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
       */$broadcast:function(name,args){var target=this,current=target,next=target,event={name:name,targetScope:target,preventDefault:function(){event.defaultPrevented=true;},defaultPrevented:false};if(!target.$$listenerCount[name])return event;var listenerArgs=concat([event],arguments,1),listeners,i,length;//down while you can, then up and next sibling or up and next sibling until back at root
while(current=next){event.currentScope=current;listeners=current.$$listeners[name]||[];for(i=0,length=listeners.length;i<length;i++){// if listeners were deregistered, defragment the array
if(!listeners[i]){listeners.splice(i,1);i--;length--;continue;}try{listeners[i].apply(null,listenerArgs);}catch(e){$exceptionHandler(e);}}// Insanity Warning: scope depth-first traversal
// yes, this code is a bit crazy, but it works and we have tests to prove it!
// this piece should be kept in sync with the traversal in $digest
// (though it differs due to having the extra check for $$listenerCount)
if(!(next=current.$$listenerCount[name]&&current.$$childHead||current!==target&&current.$$nextSibling)){while(current!==target&&!(next=current.$$nextSibling)){current=current.$parent;}}}event.currentScope=null;return event;}};var $rootScope=new Scope();//The internal queues. Expose them on the $rootScope for debugging/testing purposes.
var asyncQueue=$rootScope.$$asyncQueue=[];var postDigestQueue=$rootScope.$$postDigestQueue=[];var applyAsyncQueue=$rootScope.$$applyAsyncQueue=[];var postDigestQueuePosition=0;return $rootScope;function beginPhase(phase){if($rootScope.$$phase){throw $rootScopeMinErr('inprog','{0} already in progress',$rootScope.$$phase);}$rootScope.$$phase=phase;}function clearPhase(){$rootScope.$$phase=null;}function incrementWatchersCount(current,count){do{current.$$watchersCount+=count;}while(current=current.$parent);}function decrementListenerCount(current,count,name){do{current.$$listenerCount[name]-=count;if(current.$$listenerCount[name]===0){delete current.$$listenerCount[name];}}while(current=current.$parent);}/**
     * function used as an initial value for watchers.
     * because it's unique we can easily tell it apart from other values
     */function initWatchVal(){}function flushApplyAsync(){while(applyAsyncQueue.length){try{applyAsyncQueue.shift()();}catch(e){$exceptionHandler(e);}}applyAsyncId=null;}function scheduleApplyAsync(){if(applyAsyncId===null){applyAsyncId=$browser.defer(function(){$rootScope.$apply(flushApplyAsync);});}}}];}/**
 * @ngdoc service
 * @name $rootElement
 *
 * @description
 * The root element of Angular application. This is either the element where {@link
 * ng.directive:ngApp ngApp} was declared or the element passed into
 * {@link angular.bootstrap}. The element represents the root element of application. It is also the
 * location where the application's {@link auto.$injector $injector} service gets
 * published, and can be retrieved using `$rootElement.injector()`.
 */// the implementation is in angular.bootstrap
/**
 * @this
 * @description
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
 */function $$SanitizeUriProvider(){var aHrefSanitizationWhitelist=/^\s*(https?|ftp|mailto|tel|file):/,imgSrcSanitizationWhitelist=/^\s*((https?|ftp|file|blob):|data:image\/)/;/**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */this.aHrefSanitizationWhitelist=function(regexp){if(isDefined(regexp)){aHrefSanitizationWhitelist=regexp;return this;}return aHrefSanitizationWhitelist;};/**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */this.imgSrcSanitizationWhitelist=function(regexp){if(isDefined(regexp)){imgSrcSanitizationWhitelist=regexp;return this;}return imgSrcSanitizationWhitelist;};this.$get=function(){return function sanitizeUri(uri,isImage){var regex=isImage?imgSrcSanitizationWhitelist:aHrefSanitizationWhitelist;var normalizedVal;normalizedVal=urlResolve(uri).href;if(normalizedVal!==''&&!normalizedVal.match(regex)){return'unsafe:'+normalizedVal;}return uri;};};}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* exported $SceProvider, $SceDelegateProvider */var $sceMinErr=minErr('$sce');var SCE_CONTEXTS={// HTML is used when there's HTML rendered (e.g. ng-bind-html, iframe srcdoc binding).
HTML:'html',// Style statements or stylesheets. Currently unused in AngularJS.
CSS:'css',// An URL used in a context where it does not refer to a resource that loads code. Currently
// unused in AngularJS.
URL:'url',// RESOURCE_URL is a subtype of URL used where the referred-to resource could be interpreted as
// code. (e.g. ng-include, script src binding, templateUrl)
RESOURCE_URL:'resourceUrl',// Script. Currently unused in AngularJS.
JS:'js'};// Helper functions follow.
var UNDERSCORE_LOWERCASE_REGEXP=/_([a-z])/g;function snakeToCamel(name){return name.replace(UNDERSCORE_LOWERCASE_REGEXP,fnCamelCaseReplace);}function adjustMatcher(matcher){if(matcher==='self'){return matcher;}else if(isString(matcher)){// Strings match exactly except for 2 wildcards - '*' and '**'.
// '*' matches any character except those from the set ':/.?&'.
// '**' matches any character (like .* in a RegExp).
// More than 2 *'s raises an error as it's ill defined.
if(matcher.indexOf('***')>-1){throw $sceMinErr('iwcard','Illegal sequence *** in string matcher.  String: {0}',matcher);}matcher=escapeForRegexp(matcher).replace(/\\\*\\\*/g,'.*').replace(/\\\*/g,'[^:/.?&;]*');return new RegExp('^'+matcher+'$');}else if(isRegExp(matcher)){// The only other type of matcher allowed is a Regexp.
// Match entire URL / disallow partial matches.
// Flags are reset (i.e. no global, ignoreCase or multiline)
return new RegExp('^'+matcher.source+'$');}else{throw $sceMinErr('imatcher','Matchers may only be "self", string patterns or RegExp objects');}}function adjustMatchers(matchers){var adjustedMatchers=[];if(isDefined(matchers)){forEach(matchers,function(matcher){adjustedMatchers.push(adjustMatcher(matcher));});}return adjustedMatchers;}/**
 * @ngdoc service
 * @name $sceDelegate
 * @kind function
 *
 * @description
 *
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
 * Contextual Escaping (SCE)} services to AngularJS.
 *
 * For an overview of this service and the functionnality it provides in AngularJS, see the main
 * page for {@link ng.$sce SCE}. The current page is targeted for developers who need to alter how
 * SCE works in their application, which shouldn't be needed in most cases.
 *
 * <div class="alert alert-danger">
 * AngularJS strongly relies on contextual escaping for the security of bindings: disabling or
 * modifying this might cause cross site scripting (XSS) vulnerabilities. For libraries owners,
 * changes to this service will also influence users, so be extra careful and document your changes.
 * </div>
 *
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
 * work because `$sce` delegates to `$sceDelegate` for these operations.
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
 *
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
 * can override it completely to change the behavior of `$sce`, the common case would
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 *//**
 * @ngdoc provider
 * @name $sceDelegateProvider
 * @this
 *
 * @description
 *
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
 * $sceDelegate service}, used as a delegate for {@link ng.$sce Strict Contextual Escaping (SCE)}.
 *
 * The `$sceDelegateProvider` allows one to get/set the whitelists and blacklists used to ensure
 * that the URLs used for sourcing AngularJS templates and other script-running URLs are safe (all
 * places that use the `$sce.RESOURCE_URL` context). See
 * {@link ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist}
 * and
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist},
 *
 * For the general details about this service in Angular, read the main page for {@link ng.$sce
 * Strict Contextual Escaping (SCE)}.
 *
 * **Example**:  Consider the following case. <a name="example"></a>
 *
 * - your app is hosted at url `http://myapp.example.com/`
 * - but some of your templates are hosted on other domains you control such as
 *   `http://srv01.assets.example.com/`, `http://srv02.assets.example.com/`, etc.
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
 *
 * Here is what a secure configuration for this scenario might look like:
 *
 * ```
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
 *    $sceDelegateProvider.resourceUrlWhitelist([
 *      // Allow same origin resource loads.
 *      'self',
 *      // Allow loading from our assets domain.  Notice the difference between * and **.
 *      'http://srv*.assets.example.com/**'
 *    ]);
 *
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
 *    $sceDelegateProvider.resourceUrlBlacklist([
 *      'http://myapp.example.com/clickThru**'
 *    ]);
 *  });
 * ```
 * Note that an empty whitelist will block every resource URL from being loaded, and will require
 * you to manually mark each one as trusted with `$sce.trustAsResourceUrl`. However, templates
 * requested by {@link ng.$templateRequest $templateRequest} that are present in
 * {@link ng.$templateCache $templateCache} will not go through this check. If you have a mechanism
 * to populate your templates in that cache at config time, then it is a good idea to remove 'self'
 * from that whitelist. This helps to mitigate the security impact of certain types of issues, like
 * for instance attacker-controlled `ng-includes`.
 */function $SceDelegateProvider(){this.SCE_CONTEXTS=SCE_CONTEXTS;// Resource URLs can also be trusted by policy.
var resourceUrlWhitelist=['self'],resourceUrlBlacklist=[];/**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlWhitelist
   * @kind function
   *
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   * @return {Array} The currently set whitelist array.
   *
   * @description
   * Sets/Gets the whitelist of trusted resource URLs.
   *
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
   * same origin resource requests.
   *
   * <div class="alert alert-warning">
   * **Note:** the default whitelist of 'self' is not recommended if your app shares its origin
   * with other apps! It is a good idea to limit it to only your application's directory.
   * </div>
   */this.resourceUrlWhitelist=function(value){if(arguments.length){resourceUrlWhitelist=adjustMatchers(value);}return resourceUrlWhitelist;};/**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlBlacklist
   * @kind function
   *
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.</p><p>
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.</p><p>
   *     The typical usage for the blacklist is to **block
   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
   *     these would otherwise be trusted but actually return content from the redirected domain.
   *     </p><p>
   *     Finally, **the blacklist overrides the whitelist** and has the final say.
   *
   * @return {Array} The currently set blacklist array.
   *
   * @description
   * Sets/Gets the blacklist of trusted resource URLs.
   *
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
   * is no blacklist.)
   */this.resourceUrlBlacklist=function(value){if(arguments.length){resourceUrlBlacklist=adjustMatchers(value);}return resourceUrlBlacklist;};this.$get=['$injector',function($injector){var htmlSanitizer=function htmlSanitizer(html){throw $sceMinErr('unsafe','Attempting to use an unsafe value in a safe context.');};if($injector.has('$sanitize')){htmlSanitizer=$injector.get('$sanitize');}function matchUrl(matcher,parsedUrl){if(matcher==='self'){return urlIsSameOrigin(parsedUrl);}else{// definitely a regex.  See adjustMatchers()
return!!matcher.exec(parsedUrl.href);}}function isResourceUrlAllowedByPolicy(url){var parsedUrl=urlResolve(url.toString());var i,n,allowed=false;// Ensure that at least one item from the whitelist allows this url.
for(i=0,n=resourceUrlWhitelist.length;i<n;i++){if(matchUrl(resourceUrlWhitelist[i],parsedUrl)){allowed=true;break;}}if(allowed){// Ensure that no item from the blacklist blocked this url.
for(i=0,n=resourceUrlBlacklist.length;i<n;i++){if(matchUrl(resourceUrlBlacklist[i],parsedUrl)){allowed=false;break;}}}return allowed;}function generateHolderType(Base){var holderType=function TrustedValueHolderType(trustedValue){this.$$unwrapTrustedValue=function(){return trustedValue;};};if(Base){holderType.prototype=new Base();}holderType.prototype.valueOf=function sceValueOf(){return this.$$unwrapTrustedValue();};holderType.prototype.toString=function sceToString(){return this.$$unwrapTrustedValue().toString();};return holderType;}var trustedValueHolderBase=generateHolderType(),byType={};byType[SCE_CONTEXTS.HTML]=generateHolderType(trustedValueHolderBase);byType[SCE_CONTEXTS.CSS]=generateHolderType(trustedValueHolderBase);byType[SCE_CONTEXTS.URL]=generateHolderType(trustedValueHolderBase);byType[SCE_CONTEXTS.JS]=generateHolderType(trustedValueHolderBase);byType[SCE_CONTEXTS.RESOURCE_URL]=generateHolderType(byType[SCE_CONTEXTS.URL]);/**
     * @ngdoc method
     * @name $sceDelegate#trustAs
     *
     * @description
     * Returns a trusted representation of the parameter for the specified context. This trusted
     * object will later on be used as-is, without any security check, by bindings or directives
     * that require this security context.
     * For instance, marking a string as trusted for the `$sce.HTML` context will entirely bypass
     * the potential `$sanitize` call in corresponding `$sce.HTML` bindings or directives, such as
     * `ng-bind-html`. Note that in most cases you won't need to call this function: if you have the
     * sanitizer loaded, passing the value itself will render all the HTML that does not pose a
     * security risk.
     *
     * See {@link ng.$sceDelegate#getTrusted getTrusted} for the function that will consume those
     * trusted values, and {@link ng.$sce $sce} for general documentation about strict contextual
     * escaping.
     *
     * @param {string} type The context in which this value is safe for use, e.g. `$sce.URL`,
     *     `$sce.RESOURCE_URL`, `$sce.HTML`, `$sce.JS` or `$sce.CSS`.
     *
     * @param {*} value The value that should be considered trusted.
     * @return {*} A trusted representation of value, that can be used in the given context.
     */function trustAs(type,trustedValue){var Constructor=byType.hasOwnProperty(type)?byType[type]:null;if(!Constructor){throw $sceMinErr('icontext','Attempted to trust a value in invalid context. Context: {0}; Value: {1}',type,trustedValue);}if(trustedValue===null||isUndefined(trustedValue)||trustedValue===''){return trustedValue;}// All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
// mutable objects, we ensure here that the value passed in is actually a string.
if(typeof trustedValue!=='string'){throw $sceMinErr('itype','Attempted to trust a non-string value in a content requiring a string: Context: {0}',type);}return new Constructor(trustedValue);}/**
     * @ngdoc method
     * @name $sceDelegate#valueOf
     *
     * @description
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
     *
     * If the passed parameter is not a value that had been returned by {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, it must be returned as-is.
     *
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
     *     call or anything else.
     * @return {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
     *     `value` unchanged.
     */function valueOf(maybeTrusted){if(maybeTrusted instanceof trustedValueHolderBase){return maybeTrusted.$$unwrapTrustedValue();}else{return maybeTrusted;}}/**
     * @ngdoc method
     * @name $sceDelegate#getTrusted
     *
     * @description
     * Takes any input, and either returns a value that's safe to use in the specified context, or
     * throws an exception.
     *
     * In practice, there are several cases. When given a string, this function runs checks
     * and sanitization to make it safe without prior assumptions. When given the result of a {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call, it returns the originally supplied
     * value if that value's context is valid for this call's context. Finally, this function can
     * also throw when there is no way to turn `maybeTrusted` in a safe value (e.g., no sanitization
     * is available or possible.)
     *
     * @param {string} type The context in which this value is to be used (such as `$sce.HTML`).
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} call, or anything else (which will not be considered trusted.)
     * @return {*} A version of the value that's safe to use in the given context, or throws an
     *     exception if this is impossible.
     */function getTrusted(type,maybeTrusted){if(maybeTrusted===null||isUndefined(maybeTrusted)||maybeTrusted===''){return maybeTrusted;}var constructor=byType.hasOwnProperty(type)?byType[type]:null;// If maybeTrusted is a trusted class instance or subclass instance, then unwrap and return
// as-is.
if(constructor&&maybeTrusted instanceof constructor){return maybeTrusted.$$unwrapTrustedValue();}// Otherwise, if we get here, then we may either make it safe, or throw an exception. This
// depends on the context: some are sanitizatible (HTML), some use whitelists (RESOURCE_URL),
// some are impossible to do (JS). This step isn't implemented for CSS and URL, as AngularJS
// has no corresponding sinks.
if(type===SCE_CONTEXTS.RESOURCE_URL){// RESOURCE_URL uses a whitelist.
if(isResourceUrlAllowedByPolicy(maybeTrusted)){return maybeTrusted;}else{throw $sceMinErr('insecurl','Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',maybeTrusted.toString());}}else if(type===SCE_CONTEXTS.HTML){// htmlSanitizer throws its own error when no sanitizer is available.
return htmlSanitizer(maybeTrusted);}// Default error when the $sce service has no way to make the input safe.
throw $sceMinErr('unsafe','Attempting to use an unsafe value in a safe context.');}return{trustAs:trustAs,getTrusted:getTrusted,valueOf:valueOf};}];}/**
 * @ngdoc provider
 * @name $sceProvider
 * @this
 *
 * @description
 *
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
 * -   enable/disable Strict Contextual Escaping (SCE) in a module
 * -   override the default implementation with a custom delegate
 *
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
 *//**
 * @ngdoc service
 * @name $sce
 * @kind function
 *
 * @description
 *
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
 *
 * # Strict Contextual Escaping
 *
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS constrains bindings to only render
 * trusted values. Its goal is to assist in writing code in a way that (a) is secure by default, and
 * (b) makes auditing for security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
 *
 * ## Overview
 *
 * To systematically block XSS security bugs, AngularJS treats all values as untrusted by default in
 * HTML or sensitive URL bindings. When binding untrusted values, AngularJS will automatically
 * run security checks on them (sanitizations, whitelists, depending on context), or throw when it
 * cannot guarantee the security of the result. That behavior depends strongly on contexts: HTML
 * can be sanitized, but template URLs cannot, for instance.
 *
 * To illustrate this, consider the `ng-bind-html` directive. It renders its value directly as HTML:
 * we call that the *context*. When given an untrusted input, AngularJS will attempt to sanitize it
 * before rendering if a sanitizer is available, and throw otherwise. To bypass sanitization and
 * render the input as-is, you will need to mark it as trusted for that context before attempting
 * to bind it.
 *
 * As of version 1.2, AngularJS ships with SCE enabled by default.
 *
 * ## In practice
 *
 * Here's an example of a binding in a privileged context:
 *
 * ```
 * <input ng-model="userHtml" aria-label="User input">
 * <div ng-bind-html="userHtml"></div>
 * ```
 *
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
 * disabled, this application allows the user to render arbitrary HTML into the DIV, which would
 * be an XSS security bug. In a more realistic example, one may be rendering user comments, blog
 * articles, etc. via bindings. (HTML is just one example of a context where rendering user
 * controlled input creates security vulnerabilities.)
 *
 * For the case of HTML, you might use a library, either on the client side, or on the server side,
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
 *
 * How would you ensure that every place that used these types of bindings was bound to a value that
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
 * properties/fields and forgot to update the binding to the sanitized value?
 *
 * To be secure by default, AngularJS makes sure bindings go through that sanitization, or
 * any similar validation process, unless there's a good reason to trust the given value in this
 * context.  That trust is formalized with a function call. This means that as a developer, you
 * can assume all untrusted bindings are safe. Then, to audit your code for binding security issues,
 * you just need to ensure the values you mark as trusted indeed are safe - because they were
 * received from your server, sanitized by your library, etc. You can organize your codebase to
 * help with this - perhaps allowing only the files in a specific directory to do this.
 * Ensuring that the internal API exposed by that code doesn't markup arbitrary values as safe then
 * becomes a more manageable task.
 *
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
 * build the trusted versions of your values.
 *
 * ## How does it work?
 *
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
 * $sce.getTrusted(context, value)} rather than to the value directly.  Think of this function as
 * a way to enforce the required security context in your data sink. Directives use {@link
 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs
 * the {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals. Also,
 * when binding without directives, AngularJS will understand the context of your bindings
 * automatically.
 *
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
 * simplified):
 *
 * ```
 * var ngBindHtmlDirective = ['$sce', function($sce) {
 *   return function(scope, element, attr) {
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
 *       element.html(value || '');
 *     });
 *   };
 * }];
 * ```
 *
 * ## Impact on loading templates
 *
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
 * `templateUrl`'s specified by {@link guide/directive directives}.
 *
 * By default, Angular only loads templates from the same domain and protocol as the application
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
 * protocols, you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
 *
 * *Please note*:
 * The browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy apply in addition to this and may further restrict whether the template is successfully
 * loaded.  This means that without the right CORS policy, loading templates from a different domain
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
 * browsers.
 *
 * ## This feels like too much overhead
 *
 * It's important to remember that SCE only applies to interpolation expressions.
 *
 * If your expressions are constant literals, they're automatically trusted and you don't need to
 * call `$sce.trustAs` on them (e.g.
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works. The `$sceDelegate` will
 * also use the `$sanitize` service if it is available when binding untrusted values to
 * `$sce.HTML` context. AngularJS provides an implementation in `angular-sanitize.js`, and if you
 * wish to use it, you will also need to depend on the {@link ngSanitize `ngSanitize`} module in
 * your application.
 *
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
 * templates in `ng-include` from your application's domain without having to even know about SCE.
 * It blocks loading templates from other domains or loading templates over http from an https
 * served document.  You can change these by setting your own custom {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
 *
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
 * application that's secure and can be audited to verify that with much more ease than bolting
 * security onto an application later.
 *
 * <a name="contexts"></a>
 * ## What trusted context types are supported?
 *
 * | Context             | Notes          |
 * |---------------------|----------------|
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered, and the {@link ngSanitize.$sanitize $sanitize} service is available (implemented by the {@link ngSanitize ngSanitize} module) this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently, no bindings require this context. Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=`, `<img src=`, and some others sanitize their urls and don't constitute an SCE context.) |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG`, `VIDEO`, `AUDIO`, `SOURCE`, and `TRACK` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does (it's not just the URL that matters, but also what is at the end of it), and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently, no bindings require this context.  Feel free to use it in your own directives. |
 *
 *
 * Be aware that `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
 * through {@link ng.$sce#getTrusted $sce.getTrusted}. There's no CSS-, URL-, or JS-context bindings
 * in AngularJS currently, so their corresponding `$sce.trustAs` functions aren't useful yet. This
 * might evolve.
 *
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *
 *  Each element in these arrays must be one of the following:
 *
 *  - **'self'**
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
 *      domain** as the application document using the **same protocol**.
 *  - **String** (except the special value `'self'`)
 *    - The string is matched against the full *normalized / absolute URL* of the resource
 *      being tested (substring matches are not good enough.)
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
 *      match themselves.
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
 *      in a whitelist.
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
 *      http://foo.example.com/templates/**).
 *  - **RegExp** (*see caveat below*)
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
 *      is highly recommended to use the string patterns and only fall back to regular expressions
 *      as a last resort.
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
 *    - If you are generating your JavaScript from some other templating engine (not
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
 *      remember to escape your regular expression (and be aware that you might need more than
 *      one level of escaping depending on your templating engine and the way you interpolated
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
 *      enough before coding your own.  E.g. Ruby has
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
 *      Closure library's [goog.string.regExpEscape(s)](
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
 *
 * ## Show me an example using SCE.
 *
 * <example module="mySceApp" deps="angular-sanitize.js" name="sce-service">
 * <file name="index.html">
 *   <div ng-controller="AppController as myCtrl">
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
 *     <b>User comments</b><br>
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
 *     exploit.
 *     <div class="well">
 *       <div ng-repeat="userComment in myCtrl.userComments">
 *         <b>{{userComment.name}}</b>:
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
 *         <br>
 *       </div>
 *     </div>
 *   </div>
 * </file>
 *
 * <file name="script.js">
 *   angular.module('mySceApp', ['ngSanitize'])
 *     .controller('AppController', ['$http', '$templateCache', '$sce',
 *       function AppController($http, $templateCache, $sce) {
 *         var self = this;
 *         $http.get('test_data.json', {cache: $templateCache}).then(function(response) {
 *           self.userComments = response.data;
 *         });
 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *             'sanitization.&quot;">Hover over this text.</span>');
 *       }]);
 * </file>
 *
 * <file name="test_data.json">
 * [
 *   { "name": "Alice",
 *     "htmlComment":
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
 *   },
 *   { "name": "Bob",
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
 *   }
 * ]
 * </file>
 *
 * <file name="protractor.js" type="protractor">
 *   describe('SCE doc demo', function() {
 *     it('should sanitize untrusted values', function() {
 *       expect(element.all(by.css('.htmlComment')).first().getAttribute('innerHTML'))
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
 *     });
 *
 *     it('should NOT sanitize explicitly trusted values', function() {
 *       expect(element(by.id('explicitlyTrustedHtml')).getAttribute('innerHTML')).toBe(
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *           'sanitization.&quot;">Hover over this text.</span>');
 *     });
 *   });
 * </file>
 * </example>
 *
 *
 *
 * ## Can I disable SCE completely?
 *
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
 * for little coding overhead.  It will be much harder to take an SCE disabled application and
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
 * for cases where you have a lot of existing code that was written before SCE was introduced and
 * you're migrating them a module at a time. Also do note that this is an app-wide setting, so if
 * you are writing a library, you will cause security bugs applications using it.
 *
 * That said, here's how you can completely disable SCE:
 *
 * ```
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
 *   // Completely disable SCE.  For demonstration purposes only!
 *   // Do not use in new projects or libraries.
 *   $sceProvider.enabled(false);
 * });
 * ```
 *
 */function $SceProvider(){var enabled=true;/**
   * @ngdoc method
   * @name $sceProvider#enabled
   * @kind function
   *
   * @param {boolean=} value If provided, then enables/disables SCE application-wide.
   * @return {boolean} True if SCE is enabled, false otherwise.
   *
   * @description
   * Enables/disables SCE and returns the current value.
   */this.enabled=function(value){if(arguments.length){enabled=!!value;}return enabled;};/* Design notes on the default implementation for SCE.
   *
   * The API contract for the SCE delegate
   * -------------------------------------
   * The SCE delegate object must provide the following 3 methods:
   *
   * - trustAs(contextEnum, value)
   *     This method is used to tell the SCE service that the provided value is OK to use in the
   *     contexts specified by contextEnum.  It must return an object that will be accepted by
   *     getTrusted() for a compatible contextEnum and return this value.
   *
   * - valueOf(value)
   *     For values that were not produced by trustAs(), return them as is.  For values that were
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
   *     such a value.
   *
   * - getTrusted(contextEnum, value)
   *     This function should return the a value that is safe to use in the context specified by
   *     contextEnum or throw and exception otherwise.
   *
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
   * instance, an implementation could maintain a registry of all trusted objects by context.  In
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
   * return the same object passed in if it was found in the registry under a compatible context or
   * throw an exception otherwise.  An implementation might only wrap values some of the time based
   * on some criteria.  getTrusted() might return a value and not throw an exception for special
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
   *
   *
   * A note on the inheritance model for SCE contexts
   * ------------------------------------------------
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
   * is purely an implementation details.
   *
   * The contract is simply this:
   *
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
   *     will also succeed.
   *
   * Inheritance happens to capture this in a natural way. In some future, we may not use
   * inheritance anymore. That is OK because no code outside of sce.js and sceSpecs.js would need to
   * be aware of this detail.
   */this.$get=['$parse','$sceDelegate',function($parse,$sceDelegate){// Support: IE 9-11 only
// Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
// the "expression(javascript expression)" syntax which is insecure.
if(enabled&&msie<8){throw $sceMinErr('iequirks','Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks '+'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML '+'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');}var sce=shallowCopy(SCE_CONTEXTS);/**
     * @ngdoc method
     * @name $sce#isEnabled
     * @kind function
     *
     * @return {Boolean} True if SCE is enabled, false otherwise.  If you want to set the value, you
     *     have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
     *
     * @description
     * Returns a boolean indicating if SCE is enabled.
     */sce.isEnabled=function(){return enabled;};sce.trustAs=$sceDelegate.trustAs;sce.getTrusted=$sceDelegate.getTrusted;sce.valueOf=$sceDelegate.valueOf;if(!enabled){sce.trustAs=sce.getTrusted=function(type,value){return value;};sce.valueOf=identity;}/**
     * @ngdoc method
     * @name $sce#parseAs
     *
     * @description
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
     * *result*)}
     *
     * @param {string} type The SCE context in which this result will be used.
     * @param {string} expression String expression to compile.
     * @return {function(context, locals)} A function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the
     *      strings are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values
     *      in `context`.
     */sce.parseAs=function sceParseAs(type,expr){var parsed=$parse(expr);if(parsed.literal&&parsed.constant){return parsed;}else{return $parse(expr,function(value){return sce.getTrusted(type,value);});}};/**
     * @ngdoc method
     * @name $sce#trustAs
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}. As such, returns a
     * wrapped object that represents your value, and the trust you have in its safety for the given
     * context. AngularJS can then use that value as-is in bindings of the specified secure context.
     * This is used in bindings for `ng-bind-html`, `ng-include`, and most `src` attribute
     * interpolations. See {@link ng.$sce $sce} for strict contextual escaping.
     *
     * @param {string} type The context in which this value is safe for use, e.g. `$sce.URL`,
     *     `$sce.RESOURCE_URL`, `$sce.HTML`, `$sce.JS` or `$sce.CSS`.
     *
     * @param {*} value The value that that should be considered trusted.
     * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`
     *     in the context you specified.
     *//**
     * @ngdoc method
     * @name $sce#trustAsHtml
     *
     * @description
     * Shorthand method.  `$sce.trustAsHtml(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
     *
     * @param {*} value The value to mark as trusted for `$sce.HTML` context.
     * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`
     *     in `$sce.HTML` context (like `ng-bind-html`).
     *//**
     * @ngdoc method
     * @name $sce#trustAsCss
     *
     * @description
     * Shorthand method.  `$sce.trustAsCss(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.CSS, value)`}
     *
     * @param {*} value The value to mark as trusted for `$sce.CSS` context.
     * @return {*} A wrapped version of value that can be used as a trusted variant
     *     of your `value` in `$sce.CSS` context. This context is currently unused, so there are
     *     almost no reasons to use this function so far.
     *//**
     * @ngdoc method
     * @name $sce#trustAsUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
     *
     * @param {*} value The value to mark as trusted for `$sce.URL` context.
     * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`
     *     in `$sce.URL` context. That context is currently unused, so there are almost no reasons
     *     to use this function so far.
     *//**
     * @ngdoc method
     * @name $sce#trustAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to mark as trusted for `$sce.RESOURCE_URL` context.
     * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`
     *     in `$sce.RESOURCE_URL` context (template URLs in `ng-include`, most `src` attribute
     *     bindings, ...)
     *//**
     * @ngdoc method
     * @name $sce#trustAsJs
     *
     * @description
     * Shorthand method.  `$sce.trustAsJs(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
     *
     * @param {*} value The value to mark as trusted for `$sce.JS` context.
     * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`
     *     in `$sce.JS` context. That context is currently unused, so there are almost no reasons to
     *     use this function so far.
     *//**
     * @ngdoc method
     * @name $sce#getTrusted
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
     * takes any input, and either returns a value that's safe to use in the specified context,
     * or throws an exception. This function is aware of trusted values created by the `trustAs`
     * function and its shorthands, and when contexts are appropriate, returns the unwrapped value
     * as-is. Finally, this function can also throw when there is no way to turn `maybeTrusted` in a
     * safe value (e.g., no sanitization is available or possible.)
     *
     * @param {string} type The context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs
     *     `$sce.trustAs`} call, or anything else (which will not be considered trusted.)
     * @return {*} A version of the value that's safe to use in the given context, or throws an
     *     exception if this is impossible.
     *//**
     * @ngdoc method
     * @name $sce#getTrustedHtml
     *
     * @description
     * Shorthand method.  `$sce.getTrustedHtml(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @return {*} The return value of `$sce.getTrusted($sce.HTML, value)`
     *//**
     * @ngdoc method
     * @name $sce#getTrustedCss
     *
     * @description
     * Shorthand method.  `$sce.getTrustedCss(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @return {*} The return value of `$sce.getTrusted($sce.CSS, value)`
     *//**
     * @ngdoc method
     * @name $sce#getTrustedUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @return {*} The return value of `$sce.getTrusted($sce.URL, value)`
     *//**
     * @ngdoc method
     * @name $sce#getTrustedResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
     * @return {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
     *//**
     * @ngdoc method
     * @name $sce#getTrustedJs
     *
     * @description
     * Shorthand method.  `$sce.getTrustedJs(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @return {*} The return value of `$sce.getTrusted($sce.JS, value)`
     *//**
     * @ngdoc method
     * @name $sce#parseAsHtml
     *
     * @description
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
     *
     * @param {string} expression String expression to compile.
     * @return {function(context, locals)} A function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the
     *      strings are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values
     *      in `context`.
     *//**
     * @ngdoc method
     * @name $sce#parseAsCss
     *
     * @description
     * Shorthand method.  `$sce.parseAsCss(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @return {function(context, locals)} A function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the
     *      strings are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values
     *      in `context`.
     *//**
     * @ngdoc method
     * @name $sce#parseAsUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @return {function(context, locals)} A function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the
     *      strings are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values
     *      in `context`.
     *//**
     * @ngdoc method
     * @name $sce#parseAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @return {function(context, locals)} A function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the
     *      strings are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values
     *      in `context`.
     *//**
     * @ngdoc method
     * @name $sce#parseAsJs
     *
     * @description
     * Shorthand method.  `$sce.parseAsJs(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @return {function(context, locals)} A function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the
     *      strings are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values
     *      in `context`.
     */// Shorthand delegations.
var parse=sce.parseAs,getTrusted=sce.getTrusted,trustAs=sce.trustAs;forEach(SCE_CONTEXTS,function(enumValue,name){var lName=lowercase(name);sce[snakeToCamel('parse_as_'+lName)]=function(expr){return parse(enumValue,expr);};sce[snakeToCamel('get_trusted_'+lName)]=function(value){return getTrusted(enumValue,value);};sce[snakeToCamel('trust_as_'+lName)]=function(value){return trustAs(enumValue,value);};});return sce;}];}/* exported $SnifferProvider *//**
 * !!! This is an undocumented "private" service !!!
 *
 * @name $sniffer
 * @requires $window
 * @requires $document
 * @this
 *
 * @property {boolean} history Does the browser support html5 history api ?
 * @property {boolean} transitions Does the browser support CSS transition events ?
 * @property {boolean} animations Does the browser support CSS animation events ?
 *
 * @description
 * This is very simple implementation of testing browser's features.
 */function $SnifferProvider(){this.$get=['$window','$document',function($window,$document){var eventSupport={},// Chrome Packaged Apps are not allowed to access `history.pushState`.
// If not sandboxed, they can be detected by the presence of `chrome.app.runtime`
// (see https://developer.chrome.com/apps/api_index). If sandboxed, they can be detected by
// the presence of an extension runtime ID and the absence of other Chrome runtime APIs
// (see https://developer.chrome.com/apps/manifest/sandbox).
// (NW.js apps have access to Chrome APIs, but do support `history`.)
isNw=$window.nw&&$window.nw.process,isChromePackagedApp=!isNw&&$window.chrome&&($window.chrome.app&&$window.chrome.app.runtime||!$window.chrome.app&&$window.chrome.runtime&&$window.chrome.runtime.id),hasHistoryPushState=!isChromePackagedApp&&$window.history&&$window.history.pushState,android=toInt((/android (\d+)/.exec(lowercase(($window.navigator||{}).userAgent))||[])[1]),boxee=/Boxee/i.test(($window.navigator||{}).userAgent),document=$document[0]||{},bodyStyle=document.body&&document.body.style,transitions=false,animations=false;if(bodyStyle){// Support: Android <5, Blackberry Browser 10, default Chrome in Android 4.4.x
// Mentioned browsers need a -webkit- prefix for transitions & animations.
transitions=!!('transition'in bodyStyle||'webkitTransition'in bodyStyle);animations=!!('animation'in bodyStyle||'webkitAnimation'in bodyStyle);}return{// Android has history.pushState, but it does not update location correctly
// so let's not use the history API at all.
// http://code.google.com/p/android/issues/detail?id=17471
// https://github.com/angular/angular.js/issues/904
// older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
// so let's not use the history API also
// We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
history:!!(hasHistoryPushState&&!(android<4)&&!boxee),hasEvent:function(event){// Support: IE 9-11 only
// IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
// it. In particular the event is not fired when backspace or delete key are pressed or
// when cut operation is performed.
// IE10+ implements 'input' event but it erroneously fires under various situations,
// e.g. when placeholder changes, or a form is focused.
if(event==='input'&&msie)return false;if(isUndefined(eventSupport[event])){var divElm=document.createElement('div');eventSupport[event]='on'+event in divElm;}return eventSupport[event];},csp:csp(),transitions:transitions,animations:animations,android:android};}];}var $templateRequestMinErr=minErr('$compile');/**
 * @ngdoc provider
 * @name $templateRequestProvider
 * @this
 *
 * @description
 * Used to configure the options passed to the {@link $http} service when making a template request.
 *
 * For example, it can be used for specifying the "Accept" header that is sent to the server, when
 * requesting a template.
 */function $TemplateRequestProvider(){var httpOptions;/**
   * @ngdoc method
   * @name $templateRequestProvider#httpOptions
   * @description
   * The options to be passed to the {@link $http} service when making the request.
   * You can use this to override options such as the "Accept" header for template requests.
   *
   * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the
   * options if not overridden here.
   *
   * @param {string=} value new value for the {@link $http} options.
   * @returns {string|self} Returns the {@link $http} options when used as getter and self if used as setter.
   */this.httpOptions=function(val){if(val){httpOptions=val;return this;}return httpOptions;};/**
   * @ngdoc service
   * @name $templateRequest
   *
   * @description
   * The `$templateRequest` service runs security checks then downloads the provided template using
   * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
   * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
   * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
   * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
   * when `tpl` is of type string and `$templateCache` has the matching entry.
   *
   * If you want to pass custom options to the `$http` service, such as setting the Accept header you
   * can configure this via {@link $templateRequestProvider#httpOptions}.
   *
   * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
   * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
   *
   * @return {Promise} a promise for the HTTP response data of the given URL.
   *
   * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
   */this.$get=['$exceptionHandler','$templateCache','$http','$q','$sce',function($exceptionHandler,$templateCache,$http,$q,$sce){function handleRequestFn(tpl,ignoreRequestError){handleRequestFn.totalPendingRequests++;// We consider the template cache holds only trusted templates, so
// there's no need to go through whitelisting again for keys that already
// are included in there. This also makes Angular accept any script
// directive, no matter its name. However, we still need to unwrap trusted
// types.
if(!isString(tpl)||isUndefined($templateCache.get(tpl))){tpl=$sce.getTrustedResourceUrl(tpl);}var transformResponse=$http.defaults&&$http.defaults.transformResponse;if(isArray(transformResponse)){transformResponse=transformResponse.filter(function(transformer){return transformer!==defaultHttpResponseTransform;});}else if(transformResponse===defaultHttpResponseTransform){transformResponse=null;}return $http.get(tpl,extend({cache:$templateCache,transformResponse:transformResponse},httpOptions)).finally(function(){handleRequestFn.totalPendingRequests--;}).then(function(response){$templateCache.put(tpl,response.data);return response.data;},handleError);function handleError(resp){if(!ignoreRequestError){resp=$templateRequestMinErr('tpload','Failed to load template: {0} (HTTP status: {1} {2})',tpl,resp.status,resp.statusText);$exceptionHandler(resp);}return $q.reject(resp);}}handleRequestFn.totalPendingRequests=0;return handleRequestFn;}];}/** @this */function $$TestabilityProvider(){this.$get=['$rootScope','$browser','$location',function($rootScope,$browser,$location){/**
     * @name $testability
     *
     * @description
     * The private $$testability service provides a collection of methods for use when debugging
     * or by automated test and debugging tools.
     */var testability={};/**
     * @name $$testability#findBindings
     *
     * @description
     * Returns an array of elements that are bound (via ng-bind or {{}})
     * to expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The binding expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression. Filters and whitespace are ignored.
     */testability.findBindings=function(element,expression,opt_exactMatch){var bindings=element.getElementsByClassName('ng-binding');var matches=[];forEach(bindings,function(binding){var dataBinding=angular.element(binding).data('$binding');if(dataBinding){forEach(dataBinding,function(bindingName){if(opt_exactMatch){var matcher=new RegExp('(^|\\s)'+escapeForRegexp(expression)+'(\\s|\\||$)');if(matcher.test(bindingName)){matches.push(binding);}}else{if(bindingName.indexOf(expression)!==-1){matches.push(binding);}}});}});return matches;};/**
     * @name $$testability#findModels
     *
     * @description
     * Returns an array of elements that are two-way found via ng-model to
     * expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The model expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression.
     */testability.findModels=function(element,expression,opt_exactMatch){var prefixes=['ng-','data-ng-','ng\\:'];for(var p=0;p<prefixes.length;++p){var attributeEquals=opt_exactMatch?'=':'*=';var selector='['+prefixes[p]+'model'+attributeEquals+'"'+expression+'"]';var elements=element.querySelectorAll(selector);if(elements.length){return elements;}}};/**
     * @name $$testability#getLocation
     *
     * @description
     * Shortcut for getting the location in a browser agnostic way. Returns
     *     the path, search, and hash. (e.g. /path?a=b#hash)
     */testability.getLocation=function(){return $location.url();};/**
     * @name $$testability#setLocation
     *
     * @description
     * Shortcut for navigating to a location without doing a full page reload.
     *
     * @param {string} url The location url (path, search and hash,
     *     e.g. /path?a=b#hash) to go to.
     */testability.setLocation=function(url){if(url!==$location.url()){$location.url(url);$rootScope.$digest();}};/**
     * @name $$testability#whenStable
     *
     * @description
     * Calls the callback when $timeout and $http requests are completed.
     *
     * @param {function} callback
     */testability.whenStable=function(callback){$browser.notifyWhenNoOutstandingRequests(callback);};return testability;}];}/** @this */function $TimeoutProvider(){this.$get=['$rootScope','$browser','$q','$$q','$exceptionHandler',function($rootScope,$browser,$q,$$q,$exceptionHandler){var deferreds={};/**
      * @ngdoc service
      * @name $timeout
      *
      * @description
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
      * block and delegates any exceptions to
      * {@link ng.$exceptionHandler $exceptionHandler} service.
      *
      * The return value of calling `$timeout` is a promise, which will be resolved when
      * the delay has passed and the timeout function, if provided, is executed.
      *
      * To cancel a timeout request, call `$timeout.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
      * synchronously flush the queue of deferred functions.
      *
      * If you only want a promise that will be resolved after some specified delay
      * then you can call `$timeout` without the `fn` function.
      *
      * @param {function()=} fn A function, whose execution should be delayed.
      * @param {number=} [delay=0] Delay in milliseconds.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @param {...*=} Pass additional parameters to the executed function.
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The promise
      *   will be resolved with the return value of the `fn` function.
      *
      */function timeout(fn,delay,invokeApply){if(!isFunction(fn)){invokeApply=delay;delay=fn;fn=noop;}var args=sliceArgs(arguments,3),skipApply=isDefined(invokeApply)&&!invokeApply,deferred=(skipApply?$$q:$q).defer(),promise=deferred.promise,timeoutId;timeoutId=$browser.defer(function(){try{deferred.resolve(fn.apply(null,args));}catch(e){deferred.reject(e);$exceptionHandler(e);}finally{delete deferreds[promise.$$timeoutId];}if(!skipApply)$rootScope.$apply();},delay);promise.$$timeoutId=timeoutId;deferreds[timeoutId]=deferred;return promise;}/**
      * @ngdoc method
      * @name $timeout#cancel
      *
      * @description
      * Cancels a task associated with the `promise`. As a result of this, the promise will be
      * resolved with a rejection.
      *
      * @param {Promise=} promise Promise returned by the `$timeout` function.
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
      *   canceled.
      */timeout.cancel=function(promise){if(promise&&promise.$$timeoutId in deferreds){// Timeout cancels should not report an unhandled promise.
markQExceptionHandled(deferreds[promise.$$timeoutId].promise);deferreds[promise.$$timeoutId].reject('canceled');delete deferreds[promise.$$timeoutId];return $browser.defer.cancel(promise.$$timeoutId);}return false;};return timeout;}];}// NOTE:  The usage of window and document instead of $window and $document here is
// deliberate.  This service depends on the specific behavior of anchor nodes created by the
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
// doesn't know about mocked locations and resolves URLs to the real document - which is
// exactly the behavior needed here.  There is little value is mocking these out for this
// service.
var urlParsingNode=window.document.createElement('a');var originUrl=urlResolve(window.location.href);/**
 *
 * Implementation Notes for non-IE browsers
 * ----------------------------------------
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
 * URL will be resolved into an absolute URL in the context of the application document.
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
 * properties are all populated to reflect the normalized URL.  This approach has wide
 * compatibility - Safari 1+, Mozilla 1+ etc.  See
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *
 * Implementation Notes for IE
 * ---------------------------
 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
 * work around that by performing the parsing in a 2nd step by taking a previously normalized
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
 * properties such as protocol, hostname, port, etc.
 *
 * References:
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *   http://url.spec.whatwg.org/#urlutils
 *   https://github.com/angular/angular.js/pull/2902
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
 *
 * @kind function
 * @param {string} url The URL to be parsed.
 * @description Normalizes and parses a URL.
 * @returns {object} Returns the normalized URL as a dictionary.
 *
 *   | member name   | Description    |
 *   |---------------|----------------|
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
 *   | protocol      | The protocol including the trailing colon                              |
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
 *   | search        | The search params, minus the question mark                             |
 *   | hash          | The hash string, minus the hash symbol
 *   | hostname      | The hostname
 *   | port          | The port, without ":"
 *   | pathname      | The pathname, beginning with "/"
 *
 */function urlResolve(url){var href=url;// Support: IE 9-11 only
if(msie){// Normalize before parse.  Refer Implementation Notes on why this is
// done in two steps on IE.
urlParsingNode.setAttribute('href',href);href=urlParsingNode.href;}urlParsingNode.setAttribute('href',href);// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
return{href:urlParsingNode.href,protocol:urlParsingNode.protocol?urlParsingNode.protocol.replace(/:$/,''):'',host:urlParsingNode.host,search:urlParsingNode.search?urlParsingNode.search.replace(/^\?/,''):'',hash:urlParsingNode.hash?urlParsingNode.hash.replace(/^#/,''):'',hostname:urlParsingNode.hostname,port:urlParsingNode.port,pathname:urlParsingNode.pathname.charAt(0)==='/'?urlParsingNode.pathname:'/'+urlParsingNode.pathname};}/**
 * Parse a request URL and determine whether this is a same-origin request as the application document.
 *
 * @param {string|object} requestUrl The url of the request as a string that will be resolved
 * or a parsed URL object.
 * @returns {boolean} Whether the request is for the same origin as the application document.
 */function urlIsSameOrigin(requestUrl){var parsed=isString(requestUrl)?urlResolve(requestUrl):requestUrl;return parsed.protocol===originUrl.protocol&&parsed.host===originUrl.host;}/**
 * @ngdoc service
 * @name $window
 * @this
 *
 * @description
 * A reference to the browser's `window` object. While `window`
 * is globally available in JavaScript, it causes testability problems, because
 * it is a global variable. In angular we always refer to it through the
 * `$window` service, so it may be overridden, removed or mocked for testing.
 *
 * Expressions, like the one defined for the `ngClick` directive in the example
 * below, are evaluated with respect to the current scope.  Therefore, there is
 * no risk of inadvertently coding in a dependency on a global value in such an
 * expression.
 *
 * @example
   <example module="windowExample" name="window-service">
     <file name="index.html">
       <script>
         angular.module('windowExample', [])
           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
             $scope.greeting = 'Hello, World!';
             $scope.doGreeting = function(greeting) {
               $window.alert(greeting);
             };
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="text" ng-model="greeting" aria-label="greeting" />
         <button ng-click="doGreeting(greeting)">ALERT</button>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
      it('should display the greeting in the input box', function() {
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
     </file>
   </example>
 */function $WindowProvider(){this.$get=valueFn(window);}/**
 * @name $$cookieReader
 * @requires $document
 *
 * @description
 * This is a private service for reading cookies used by $http and ngCookies
 *
 * @return {Object} a key/value map of the current cookies
 */function $$CookieReader($document){var rawDocument=$document[0]||{};var lastCookies={};var lastCookieString='';function safeGetCookie(rawDocument){try{return rawDocument.cookie||'';}catch(e){return'';}}function safeDecodeURIComponent(str){try{return decodeURIComponent(str);}catch(e){return str;}}return function(){var cookieArray,cookie,i,index,name;var currentCookieString=safeGetCookie(rawDocument);if(currentCookieString!==lastCookieString){lastCookieString=currentCookieString;cookieArray=lastCookieString.split('; ');lastCookies={};for(i=0;i<cookieArray.length;i++){cookie=cookieArray[i];index=cookie.indexOf('=');if(index>0){//ignore nameless cookies
name=safeDecodeURIComponent(cookie.substring(0,index));// the first value that is seen for a cookie is the most
// specific one.  values for the same cookie name that
// follow are for less specific paths.
if(isUndefined(lastCookies[name])){lastCookies[name]=safeDecodeURIComponent(cookie.substring(index+1));}}}}return lastCookies;};}$$CookieReader.$inject=['$document'];/** @this */function $$CookieReaderProvider(){this.$get=$$CookieReader;}/* global currencyFilter: true,
 dateFilter: true,
 filterFilter: true,
 jsonFilter: true,
 limitToFilter: true,
 lowercaseFilter: true,
 numberFilter: true,
 orderByFilter: true,
 uppercaseFilter: true,
 *//**
 * @ngdoc provider
 * @name $filterProvider
 * @description
 *
 * Filters are just functions which transform input to an output. However filters need to be
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
 * annotated with dependencies and is responsible for creating a filter function.
 *
 * <div class="alert alert-warning">
 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
 * (`myapp_subsection_filterx`).
 * </div>
 *
 * ```js
 *   // Filter registration
 *   function MyModule($provide, $filterProvider) {
 *     // create a service to demonstrate injection (not always needed)
 *     $provide.value('greet', function(name){
 *       return 'Hello ' + name + '!';
 *     });
 *
 *     // register a filter factory which uses the
 *     // greet service to demonstrate DI.
 *     $filterProvider.register('greet', function(greet){
 *       // return the filter function which uses the greet service
 *       // to generate salutation
 *       return function(text) {
 *         // filters need to be forgiving so check input validity
 *         return text && greet(text) || text;
 *       };
 *     });
 *   }
 * ```
 *
 * The filter function is registered with the `$injector` under the filter name suffix with
 * `Filter`.
 *
 * ```js
 *   it('should be the same instance', inject(
 *     function($filterProvider) {
 *       $filterProvider.register('reverse', function(){
 *         return ...;
 *       });
 *     },
 *     function($filter, reverseFilter) {
 *       expect($filter('reverse')).toBe(reverseFilter);
 *     });
 * ```
 *
 *
 * For more information about how angular filters work, and how to create your own filters, see
 * {@link guide/filter Filters} in the Angular Developer Guide.
 *//**
 * @ngdoc service
 * @name $filter
 * @kind function
 * @description
 * Filters are used for formatting data displayed to the user.
 *
 * They can be used in view templates, controllers or services.Angular comes
 * with a collection of [built-in filters](api/ng/filter), but it is easy to
 * define your own as well.
 *
 * The general syntax in templates is as follows:
 *
 * ```html
 * {{ expression [| filter_name[:parameter_value] ... ] }}
 * ```
 *
 * @param {String} name Name of the filter function to retrieve
 * @return {Function} the filter function
 * @example
   <example name="$filter" module="filterExample">
     <file name="index.html">
       <div ng-controller="MainCtrl">
        <h3>{{ originalText }}</h3>
        <h3>{{ filteredText }}</h3>
       </div>
     </file>

     <file name="script.js">
      angular.module('filterExample', [])
      .controller('MainCtrl', function($scope, $filter) {
        $scope.originalText = 'hello';
        $scope.filteredText = $filter('uppercase')($scope.originalText);
      });
     </file>
   </example>
  */$FilterProvider.$inject=['$provide'];/** @this */function $FilterProvider($provide){var suffix='Filter';/**
   * @ngdoc method
   * @name $filterProvider#register
   * @param {string|Object} name Name of the filter function, or an object map of filters where
   *    the keys are the filter names and the values are the filter factories.
   *
   *    <div class="alert alert-warning">
   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
   *    (`myapp_subsection_filterx`).
   *    </div>
    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
   *    of the registered filter instances.
   */function register(name,factory){if(isObject(name)){var filters={};forEach(name,function(filter,key){filters[key]=register(key,filter);});return filters;}else{return $provide.factory(name+suffix,factory);}}this.register=register;this.$get=['$injector',function($injector){return function(name){return $injector.get(name+suffix);};}];////////////////////////////////////////
/* global
    currencyFilter: false,
    dateFilter: false,
    filterFilter: false,
    jsonFilter: false,
    limitToFilter: false,
    lowercaseFilter: false,
    numberFilter: false,
    orderByFilter: false,
    uppercaseFilter: false
  */register('currency',currencyFilter);register('date',dateFilter);register('filter',filterFilter);register('json',jsonFilter);register('limitTo',limitToFilter);register('lowercase',lowercaseFilter);register('number',numberFilter);register('orderBy',orderByFilter);register('uppercase',uppercaseFilter);}/**
 * @ngdoc filter
 * @name filter
 * @kind function
 *
 * @description
 * Selects a subset of items from `array` and returns it as a new array.
 *
 * @param {Array} array The source array.
 * <div class="alert alert-info">
 *   **Note**: If the array contains objects that reference themselves, filtering is not possible.
 * </div>
 * @param {string|Object|function()} expression The predicate to be used for selecting items from
 *   `array`.
 *
 *   Can be one of:
 *
 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
 *     objects with string properties in `array` that match this string will be returned. This also
 *     applies to nested object properties.
 *     The predicate can be negated by prefixing the string with `!`.
 *
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
 *     which have property `name` containing "M" and property `phone` containing "1". A special
 *     property name (`$` by default) can be used (e.g. as in `{$: "text"}`) to accept a match
 *     against any property of the object or its nested object properties. That's equivalent to the
 *     simple substring match with a `string` as described above. The special property name can be
 *     overwritten, using the `anyPropertyKey` parameter.
 *     The predicate can be negated by prefixing the string with `!`.
 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
 *     not containing "M".
 *
 *     Note that a named property will match properties on the same level only, while the special
 *     `$` property will match properties on the same level or deeper. E.g. an array item like
 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
 *     **will** be matched by `{$: 'John'}`.
 *
 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
 *     The function is called for each element of the array, with the element, its index, and
 *     the entire array itself as arguments.
 *
 *     The final result is an array of those elements that the predicate returned true for.
 *
 * @param {function(actual, expected)|true|false} [comparator] Comparator which is used in
 *     determining if values retrieved using `expression` (when it is not a function) should be
 *     considered a match based on the expected value (from the filter expression) and actual
 *     value (from the object in the array).
 *
 *   Can be one of:
 *
 *   - `function(actual, expected)`:
 *     The function will be given the object value and the predicate value to compare and
 *     should return true if both values should be considered equal.
 *
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
 *     This is essentially strict comparison of expected and actual.
 *
 *   - `false`: A short hand for a function which will look for a substring match in a case
 *     insensitive way. Primitive values are converted to strings. Objects are not compared against
 *     primitives, unless they have a custom `toString` method (e.g. `Date` objects).
 *
 *
 *   Defaults to `false`.
 *
 * @param {string} [anyPropertyKey] The special property name that matches against any property.
 *     By default `$`.
 *
 * @example
   <example name="filter-filter">
     <file name="index.html">
       <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                {name:'Mary', phone:'800-BIG-MARY'},
                                {name:'Mike', phone:'555-4321'},
                                {name:'Adam', phone:'555-5678'},
                                {name:'Julie', phone:'555-8765'},
                                {name:'Juliette', phone:'555-5678'}]"></div>

       <label>Search: <input ng-model="searchText"></label>
       <table id="searchTextResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:searchText">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
       <hr>
       <label>Any: <input ng-model="search.$"></label> <br>
       <label>Name only <input ng-model="search.name"></label><br>
       <label>Phone only <input ng-model="search.phone"></label><br>
       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
       <table id="searchObjResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friendObj in friends | filter:search:strict">
           <td>{{friendObj.name}}</td>
           <td>{{friendObj.phone}}</td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       var expectFriendNames = function(expectedNames, key) {
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
           arr.forEach(function(wd, i) {
             expect(wd.getText()).toMatch(expectedNames[i]);
           });
         });
       };

       it('should search across all fields when filtering with a string', function() {
         var searchText = element(by.model('searchText'));
         searchText.clear();
         searchText.sendKeys('m');
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

         searchText.clear();
         searchText.sendKeys('76');
         expectFriendNames(['John', 'Julie'], 'friend');
       });

       it('should search in specific fields when filtering with a predicate object', function() {
         var searchAny = element(by.model('search.$'));
         searchAny.clear();
         searchAny.sendKeys('i');
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
       });
       it('should use a equal comparison when comparator is true', function() {
         var searchName = element(by.model('search.name'));
         var strict = element(by.model('strict'));
         searchName.clear();
         searchName.sendKeys('Julie');
         strict.click();
         expectFriendNames(['Julie'], 'friendObj');
       });
     </file>
   </example>
 */function filterFilter(){return function(array,expression,comparator,anyPropertyKey){if(!isArrayLike(array)){if(array==null){return array;}else{throw minErr('filter')('notarray','Expected array but received: {0}',array);}}anyPropertyKey=anyPropertyKey||'$';var expressionType=getTypeForFilter(expression);var predicateFn;var matchAgainstAnyProp;switch(expressionType){case'function':predicateFn=expression;break;case'boolean':case'null':case'number':case'string':matchAgainstAnyProp=true;// falls through
case'object':predicateFn=createPredicateFn(expression,comparator,anyPropertyKey,matchAgainstAnyProp);break;default:return array;}return Array.prototype.filter.call(array,predicateFn);};}// Helper functions for `filterFilter`
function createPredicateFn(expression,comparator,anyPropertyKey,matchAgainstAnyProp){var shouldMatchPrimitives=isObject(expression)&&anyPropertyKey in expression;var predicateFn;if(comparator===true){comparator=equals;}else if(!isFunction(comparator)){comparator=function(actual,expected){if(isUndefined(actual)){// No substring matching against `undefined`
return false;}if(actual===null||expected===null){// No substring matching against `null`; only match against `null`
return actual===expected;}if(isObject(expected)||isObject(actual)&&!hasCustomToString(actual)){// Should not compare primitives against objects, unless they have custom `toString` method
return false;}actual=lowercase(''+actual);expected=lowercase(''+expected);return actual.indexOf(expected)!==-1;};}predicateFn=function(item){if(shouldMatchPrimitives&&!isObject(item)){return deepCompare(item,expression[anyPropertyKey],comparator,anyPropertyKey,false);}return deepCompare(item,expression,comparator,anyPropertyKey,matchAgainstAnyProp);};return predicateFn;}function deepCompare(actual,expected,comparator,anyPropertyKey,matchAgainstAnyProp,dontMatchWholeObject){var actualType=getTypeForFilter(actual);var expectedType=getTypeForFilter(expected);if(expectedType==='string'&&expected.charAt(0)==='!'){return!deepCompare(actual,expected.substring(1),comparator,anyPropertyKey,matchAgainstAnyProp);}else if(isArray(actual)){// In case `actual` is an array, consider it a match
// if ANY of it's items matches `expected`
return actual.some(function(item){return deepCompare(item,expected,comparator,anyPropertyKey,matchAgainstAnyProp);});}switch(actualType){case'object':var key;if(matchAgainstAnyProp){for(key in actual){// Under certain, rare, circumstances, key may not be a string and `charAt` will be undefined
// See: https://github.com/angular/angular.js/issues/15644
if(key.charAt&&key.charAt(0)!=='$'&&deepCompare(actual[key],expected,comparator,anyPropertyKey,true)){return true;}}return dontMatchWholeObject?false:deepCompare(actual,expected,comparator,anyPropertyKey,false);}else if(expectedType==='object'){for(key in expected){var expectedVal=expected[key];if(isFunction(expectedVal)||isUndefined(expectedVal)){continue;}var matchAnyProperty=key===anyPropertyKey;var actualVal=matchAnyProperty?actual:actual[key];if(!deepCompare(actualVal,expectedVal,comparator,anyPropertyKey,matchAnyProperty,matchAnyProperty)){return false;}}return true;}else{return comparator(actual,expected);}case'function':return false;default:return comparator(actual,expected);}}// Used for easily differentiating between `null` and actual `object`
function getTypeForFilter(val){return val===null?'null':typeof val;}var MAX_DIGITS=22;var DECIMAL_SEP='.';var ZERO_CHAR='0';/**
 * @ngdoc filter
 * @name currency
 * @kind function
 *
 * @description
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
 * symbol for current locale is used.
 *
 * @param {number} amount Input to filter.
 * @param {string=} symbol Currency symbol or identifier to be displayed.
 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
 * @returns {string} Formatted number.
 *
 *
 * @example
   <example module="currencyExample" name="currency-filter">
     <file name="index.html">
       <script>
         angular.module('currencyExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.amount = 1234.56;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="number" ng-model="amount" aria-label="amount"> <br>
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span><br>
         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should init with 1234.56', function() {
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
       });
       it('should update', function() {
         if (browser.params.browser === 'safari') {
           // Safari does not understand the minus key. See
           // https://github.com/angular/protractor/issues/481
           return;
         }
         element(by.model('amount')).clear();
         element(by.model('amount')).sendKeys('-1234');
         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
       });
     </file>
   </example>
 */currencyFilter.$inject=['$locale'];function currencyFilter($locale){var formats=$locale.NUMBER_FORMATS;return function(amount,currencySymbol,fractionSize){if(isUndefined(currencySymbol)){currencySymbol=formats.CURRENCY_SYM;}if(isUndefined(fractionSize)){fractionSize=formats.PATTERNS[1].maxFrac;}// if null or undefined pass it through
return amount==null?amount:formatNumber(amount,formats.PATTERNS[1],formats.GROUP_SEP,formats.DECIMAL_SEP,fractionSize).replace(/\u00A4/g,currencySymbol);};}/**
 * @ngdoc filter
 * @name number
 * @kind function
 *
 * @description
 * Formats a number as text.
 *
 * If the input is null or undefined, it will just be returned.
 * If the input is infinite (Infinity or -Infinity), the Infinity symbol '∞' or '-∞' is returned, respectively.
 * If the input is not a number an empty string is returned.
 *
 *
 * @param {number|string} number Number to format.
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
 * If this is not provided then the fraction size is computed from the current locale's number
 * formatting pattern. In the case of the default locale, it will be 3.
 * @returns {string} Number rounded to `fractionSize` appropriately formatted based on the current
 *                   locale (e.g., in the en_US locale it will have "." as the decimal separator and
 *                   include "," group separators after each third digit).
 *
 * @example
   <example module="numberFilterExample" name="number-filter">
     <file name="index.html">
       <script>
         angular.module('numberFilterExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.val = 1234.56789;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <label>Enter number: <input ng-model='val'></label><br>
         Default formatting: <span id='number-default'>{{val | number}}</span><br>
         No fractions: <span>{{val | number:0}}</span><br>
         Negative number: <span>{{-val | number:4}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format numbers', function() {
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
       });

       it('should update', function() {
         element(by.model('val')).clear();
         element(by.model('val')).sendKeys('3374.333');
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
      });
     </file>
   </example>
 */numberFilter.$inject=['$locale'];function numberFilter($locale){var formats=$locale.NUMBER_FORMATS;return function(number,fractionSize){// if null or undefined pass it through
return number==null?number:formatNumber(number,formats.PATTERNS[0],formats.GROUP_SEP,formats.DECIMAL_SEP,fractionSize);};}/**
 * Parse a number (as a string) into three components that can be used
 * for formatting the number.
 *
 * (Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/)
 *
 * @param  {string} numStr The number to parse
 * @return {object} An object describing this number, containing the following keys:
 *  - d : an array of digits containing leading zeros as necessary
 *  - i : the number of the digits in `d` that are to the left of the decimal point
 *  - e : the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`
 *
 */function parse(numStr){var exponent=0,digits,numberOfIntegerDigits;var i,j,zeros;// Decimal point?
if((numberOfIntegerDigits=numStr.indexOf(DECIMAL_SEP))>-1){numStr=numStr.replace(DECIMAL_SEP,'');}// Exponential form?
if((i=numStr.search(/e/i))>0){// Work out the exponent.
if(numberOfIntegerDigits<0)numberOfIntegerDigits=i;numberOfIntegerDigits+=+numStr.slice(i+1);numStr=numStr.substring(0,i);}else if(numberOfIntegerDigits<0){// There was no decimal point or exponent so it is an integer.
numberOfIntegerDigits=numStr.length;}// Count the number of leading zeros.
for(i=0;numStr.charAt(i)===ZERO_CHAR;i++){/* empty */}if(i===(zeros=numStr.length)){// The digits are all zero.
digits=[0];numberOfIntegerDigits=1;}else{// Count the number of trailing zeros
zeros--;while(numStr.charAt(zeros)===ZERO_CHAR)zeros--;// Trailing zeros are insignificant so ignore them
numberOfIntegerDigits-=i;digits=[];// Convert string to array of digits without leading/trailing zeros.
for(j=0;i<=zeros;i++,j++){digits[j]=+numStr.charAt(i);}}// If the number overflows the maximum allowed digits then use an exponent.
if(numberOfIntegerDigits>MAX_DIGITS){digits=digits.splice(0,MAX_DIGITS-1);exponent=numberOfIntegerDigits-1;numberOfIntegerDigits=1;}return{d:digits,e:exponent,i:numberOfIntegerDigits};}/**
 * Round the parsed number to the specified number of decimal places
 * This function changed the parsedNumber in-place
 */function roundNumber(parsedNumber,fractionSize,minFrac,maxFrac){var digits=parsedNumber.d;var fractionLen=digits.length-parsedNumber.i;// determine fractionSize if it is not specified; `+fractionSize` converts it to a number
fractionSize=isUndefined(fractionSize)?Math.min(Math.max(minFrac,fractionLen),maxFrac):+fractionSize;// The index of the digit to where rounding is to occur
var roundAt=fractionSize+parsedNumber.i;var digit=digits[roundAt];if(roundAt>0){// Drop fractional digits beyond `roundAt`
digits.splice(Math.max(parsedNumber.i,roundAt));// Set non-fractional digits beyond `roundAt` to 0
for(var j=roundAt;j<digits.length;j++){digits[j]=0;}}else{// We rounded to zero so reset the parsedNumber
fractionLen=Math.max(0,fractionLen);parsedNumber.i=1;digits.length=Math.max(1,roundAt=fractionSize+1);digits[0]=0;for(var i=1;i<roundAt;i++)digits[i]=0;}if(digit>=5){if(roundAt-1<0){for(var k=0;k>roundAt;k--){digits.unshift(0);parsedNumber.i++;}digits.unshift(1);parsedNumber.i++;}else{digits[roundAt-1]++;}}// Pad out with zeros to get the required fraction length
for(;fractionLen<Math.max(0,fractionSize);fractionLen++)digits.push(0);// Do any carrying, e.g. a digit was rounded up to 10
var carry=digits.reduceRight(function(carry,d,i,digits){d=d+carry;digits[i]=d%10;return Math.floor(d/10);},0);if(carry){digits.unshift(carry);parsedNumber.i++;}}/**
 * Format a number into a string
 * @param  {number} number       The number to format
 * @param  {{
 *           minFrac, // the minimum number of digits required in the fraction part of the number
 *           maxFrac, // the maximum number of digits required in the fraction part of the number
 *           gSize,   // number of digits in each group of separated digits
 *           lgSize,  // number of digits in the last group of digits before the decimal separator
 *           negPre,  // the string to go in front of a negative number (e.g. `-` or `(`))
 *           posPre,  // the string to go in front of a positive number
 *           negSuf,  // the string to go after a negative number (e.g. `)`)
 *           posSuf   // the string to go after a positive number
 *         }} pattern
 * @param  {string} groupSep     The string to separate groups of number (e.g. `,`)
 * @param  {string} decimalSep   The string to act as the decimal separator (e.g. `.`)
 * @param  {[type]} fractionSize The size of the fractional part of the number
 * @return {string}              The number formatted as a string
 */function formatNumber(number,pattern,groupSep,decimalSep,fractionSize){if(!(isString(number)||isNumber(number))||isNaN(number))return'';var isInfinity=!isFinite(number);var isZero=false;var numStr=Math.abs(number)+'',formattedText='',parsedNumber;if(isInfinity){formattedText='\u221e';}else{parsedNumber=parse(numStr);roundNumber(parsedNumber,fractionSize,pattern.minFrac,pattern.maxFrac);var digits=parsedNumber.d;var integerLen=parsedNumber.i;var exponent=parsedNumber.e;var decimals=[];isZero=digits.reduce(function(isZero,d){return isZero&&!d;},true);// pad zeros for small numbers
while(integerLen<0){digits.unshift(0);integerLen++;}// extract decimals digits
if(integerLen>0){decimals=digits.splice(integerLen,digits.length);}else{decimals=digits;digits=[0];}// format the integer digits with grouping separators
var groups=[];if(digits.length>=pattern.lgSize){groups.unshift(digits.splice(-pattern.lgSize,digits.length).join(''));}while(digits.length>pattern.gSize){groups.unshift(digits.splice(-pattern.gSize,digits.length).join(''));}if(digits.length){groups.unshift(digits.join(''));}formattedText=groups.join(groupSep);// append the decimal digits
if(decimals.length){formattedText+=decimalSep+decimals.join('');}if(exponent){formattedText+='e+'+exponent;}}if(number<0&&!isZero){return pattern.negPre+formattedText+pattern.negSuf;}else{return pattern.posPre+formattedText+pattern.posSuf;}}function padNumber(num,digits,trim,negWrap){var neg='';if(num<0||negWrap&&num<=0){if(negWrap){num=-num+1;}else{num=-num;neg='-';}}num=''+num;while(num.length<digits)num=ZERO_CHAR+num;if(trim){num=num.substr(num.length-digits);}return neg+num;}function dateGetter(name,size,offset,trim,negWrap){offset=offset||0;return function(date){var value=date['get'+name]();if(offset>0||value>-offset){value+=offset;}if(value===0&&offset===-12)value=12;return padNumber(value,size,trim,negWrap);};}function dateStrGetter(name,shortForm,standAlone){return function(date,formats){var value=date['get'+name]();var propPrefix=(standAlone?'STANDALONE':'')+(shortForm?'SHORT':'');var get=uppercase(propPrefix+name);return formats[get][value];};}function timeZoneGetter(date,formats,offset){var zone=-1*offset;var paddedZone=zone>=0?'+':'';paddedZone+=padNumber(Math[zone>0?'floor':'ceil'](zone/60),2)+padNumber(Math.abs(zone%60),2);return paddedZone;}function getFirstThursdayOfYear(year){// 0 = index of January
var dayOfWeekOnFirst=new Date(year,0,1).getDay();// 4 = index of Thursday (+1 to account for 1st = 5)
// 11 = index of *next* Thursday (+1 account for 1st = 12)
return new Date(year,0,(dayOfWeekOnFirst<=4?5:12)-dayOfWeekOnFirst);}function getThursdayThisWeek(datetime){return new Date(datetime.getFullYear(),datetime.getMonth(),// 4 = index of Thursday
datetime.getDate()+(4-datetime.getDay()));}function weekGetter(size){return function(date){var firstThurs=getFirstThursdayOfYear(date.getFullYear()),thisThurs=getThursdayThisWeek(date);var diff=+thisThurs-+firstThurs,result=1+Math.round(diff/6.048e8);// 6.048e8 ms per week
return padNumber(result,size);};}function ampmGetter(date,formats){return date.getHours()<12?formats.AMPMS[0]:formats.AMPMS[1];}function eraGetter(date,formats){return date.getFullYear()<=0?formats.ERAS[0]:formats.ERAS[1];}function longEraGetter(date,formats){return date.getFullYear()<=0?formats.ERANAMES[0]:formats.ERANAMES[1];}var DATE_FORMATS={yyyy:dateGetter('FullYear',4,0,false,true),yy:dateGetter('FullYear',2,0,true,true),y:dateGetter('FullYear',1,0,false,true),MMMM:dateStrGetter('Month'),MMM:dateStrGetter('Month',true),MM:dateGetter('Month',2,1),M:dateGetter('Month',1,1),LLLL:dateStrGetter('Month',false,true),dd:dateGetter('Date',2),d:dateGetter('Date',1),HH:dateGetter('Hours',2),H:dateGetter('Hours',1),hh:dateGetter('Hours',2,-12),h:dateGetter('Hours',1,-12),mm:dateGetter('Minutes',2),m:dateGetter('Minutes',1),ss:dateGetter('Seconds',2),s:dateGetter('Seconds',1),// while ISO 8601 requires fractions to be prefixed with `.` or `,`
// we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
sss:dateGetter('Milliseconds',3),EEEE:dateStrGetter('Day'),EEE:dateStrGetter('Day',true),a:ampmGetter,Z:timeZoneGetter,ww:weekGetter(2),w:weekGetter(1),G:eraGetter,GG:eraGetter,GGG:eraGetter,GGGG:longEraGetter};var DATE_FORMATS_SPLIT=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/,NUMBER_STRING=/^-?\d+$/;/**
 * @ngdoc filter
 * @name date
 * @kind function
 *
 * @description
 *   Formats `date` to a string based on the requested `format`.
 *
 *   `format` string can be composed of the following elements:
 *
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
 *   * `'MMMM'`: Month in year (January-December)
 *   * `'MMM'`: Month in year (Jan-Dec)
 *   * `'MM'`: Month in year, padded (01-12)
 *   * `'M'`: Month in year (1-12)
 *   * `'LLLL'`: Stand-alone month in year (January-December)
 *   * `'dd'`: Day in month, padded (01-31)
 *   * `'d'`: Day in month (1-31)
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
 *   * `'EEE'`: Day in Week, (Sun-Sat)
 *   * `'HH'`: Hour in day, padded (00-23)
 *   * `'H'`: Hour in day (0-23)
 *   * `'hh'`: Hour in AM/PM, padded (01-12)
 *   * `'h'`: Hour in AM/PM, (1-12)
 *   * `'mm'`: Minute in hour, padded (00-59)
 *   * `'m'`: Minute in hour (0-59)
 *   * `'ss'`: Second in minute, padded (00-59)
 *   * `'s'`: Second in minute (0-59)
 *   * `'sss'`: Millisecond in second, padded (000-999)
 *   * `'a'`: AM/PM marker
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
 *
 *   `format` string can also be one of the following predefined
 *   {@link guide/i18n localizable formats}:
 *
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
 *     (e.g. Sep 3, 2010 12:05:08 PM)
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
 *     (e.g. Friday, September 3, 2010)
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
 *
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
 *   (e.g. `"h 'o''clock'"`).
 *
 *   Any other characters in the `format` string will be output as-is.
 *
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
 *    specified in the string input, the time is considered to be in the local timezone.
 * @param {string=} format Formatting rules (see Description). If not specified,
 *    `mediumDate` is used.
 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
 *    If not specified, the timezone of the browser will be used.
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
 *
 * @example
   <example name="filter-date">
     <file name="index.html">
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
           <span>{{1288323623006 | date:'medium'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format date', function() {
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
            toMatch(/2010-10-2\d \d{2}:\d{2}:\d{2} (-|\+)?\d{4}/);
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
       });
     </file>
   </example>
 */dateFilter.$inject=['$locale'];function dateFilter($locale){var R_ISO8601_STR=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;// 1        2       3         4          5          6          7          8  9     10      11
function jsonStringToDate(string){var match;if(match=string.match(R_ISO8601_STR)){var date=new Date(0),tzHour=0,tzMin=0,dateSetter=match[8]?date.setUTCFullYear:date.setFullYear,timeSetter=match[8]?date.setUTCHours:date.setHours;if(match[9]){tzHour=toInt(match[9]+match[10]);tzMin=toInt(match[9]+match[11]);}dateSetter.call(date,toInt(match[1]),toInt(match[2])-1,toInt(match[3]));var h=toInt(match[4]||0)-tzHour;var m=toInt(match[5]||0)-tzMin;var s=toInt(match[6]||0);var ms=Math.round(parseFloat('0.'+(match[7]||0))*1000);timeSetter.call(date,h,m,s,ms);return date;}return string;}return function(date,format,timezone){var text='',parts=[],fn,match;format=format||'mediumDate';format=$locale.DATETIME_FORMATS[format]||format;if(isString(date)){date=NUMBER_STRING.test(date)?toInt(date):jsonStringToDate(date);}if(isNumber(date)){date=new Date(date);}if(!isDate(date)||!isFinite(date.getTime())){return date;}while(format){match=DATE_FORMATS_SPLIT.exec(format);if(match){parts=concat(parts,match,1);format=parts.pop();}else{parts.push(format);format=null;}}var dateTimezoneOffset=date.getTimezoneOffset();if(timezone){dateTimezoneOffset=timezoneToOffset(timezone,dateTimezoneOffset);date=convertTimezoneToLocal(date,timezone,true);}forEach(parts,function(value){fn=DATE_FORMATS[value];text+=fn?fn(date,$locale.DATETIME_FORMATS,dateTimezoneOffset):value==='\'\''?'\'':value.replace(/(^'|'$)/g,'').replace(/''/g,'\'');});return text;};}/**
 * @ngdoc filter
 * @name json
 * @kind function
 *
 * @description
 *   Allows you to convert a JavaScript object into JSON string.
 *
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
 *   the binding is automatically converted to JSON.
 *
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
 * @returns {string} JSON string.
 *
 *
 * @example
   <example name="filter-json">
     <file name="index.html">
       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
     </file>
     <file name="protractor.js" type="protractor">
       it('should jsonify filtered objects', function() {
         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n {2}"name": ?"value"\n}/);
         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n {4}"name": ?"value"\n}/);
       });
     </file>
   </example>
 *
 */function jsonFilter(){return function(object,spacing){if(isUndefined(spacing)){spacing=2;}return toJson(object,spacing);};}/**
 * @ngdoc filter
 * @name lowercase
 * @kind function
 * @description
 * Converts string to lowercase.
 *
 * See the {@link ng.uppercase uppercase filter documentation} for a functionally identical example.
 *
 * @see angular.lowercase
 */var lowercaseFilter=valueFn(lowercase);/**
 * @ngdoc filter
 * @name uppercase
 * @kind function
 * @description
 * Converts string to uppercase.
 * @example
   <example module="uppercaseFilterExample" name="filter-uppercase">
     <file name="index.html">
       <script>
         angular.module('uppercaseFilterExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.title = 'This is a title';
           }]);
       </script>
       <div ng-controller="ExampleController">
         <!-- This title should be formatted normally -->
         <h1>{{title}}</h1>
         <!-- This title should be capitalized -->
         <h1>{{title | uppercase}}</h1>
       </div>
     </file>
   </example>
 */var uppercaseFilter=valueFn(uppercase);/**
 * @ngdoc filter
 * @name limitTo
 * @kind function
 *
 * @description
 * Creates a new array or string containing only a specified number of elements. The elements are
 * taken from either the beginning or the end of the source array, string or number, as specified by
 * the value and sign (positive or negative) of `limit`. Other array-like objects are also supported
 * (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). If a number is used as input,
 * it is converted to a string.
 *
 * @param {Array|ArrayLike|string|number} input - Array/array-like, string or number to be limited.
 * @param {string|number} limit - The length of the returned array or string. If the `limit` number
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
 *     If the number is negative, `limit` number  of items from the end of the source array/string
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
 *     the input will be returned unchanged.
 * @param {(string|number)=} begin - Index at which to begin limitation. As a negative index,
 *     `begin` indicates an offset from the end of `input`. Defaults to `0`.
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if the input had
 *     less than `limit` elements.
 *
 * @example
   <example module="limitToExample" name="limit-to-filter">
     <file name="index.html">
       <script>
         angular.module('limitToExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.numbers = [1,2,3,4,5,6,7,8,9];
             $scope.letters = "abcdefghi";
             $scope.longNumber = 2345432342;
             $scope.numLimit = 3;
             $scope.letterLimit = 3;
             $scope.longNumberLimit = 3;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <label>
            Limit {{numbers}} to:
            <input type="number" step="1" ng-model="numLimit">
         </label>
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
         <label>
            Limit {{letters}} to:
            <input type="number" step="1" ng-model="letterLimit">
         </label>
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
         <label>
            Limit {{longNumber}} to:
            <input type="number" step="1" ng-model="longNumberLimit">
         </label>
         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       var numLimitInput = element(by.model('numLimit'));
       var letterLimitInput = element(by.model('letterLimit'));
       var longNumberLimitInput = element(by.model('longNumberLimit'));
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

       it('should limit the number array to first three items', function() {
         expect(numLimitInput.getAttribute('value')).toBe('3');
         expect(letterLimitInput.getAttribute('value')).toBe('3');
         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
         expect(limitedLetters.getText()).toEqual('Output letters: abc');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
       });

       // There is a bug in safari and protractor that doesn't like the minus key
       // it('should update the output when -3 is entered', function() {
       //   numLimitInput.clear();
       //   numLimitInput.sendKeys('-3');
       //   letterLimitInput.clear();
       //   letterLimitInput.sendKeys('-3');
       //   longNumberLimitInput.clear();
       //   longNumberLimitInput.sendKeys('-3');
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
       // });

       it('should not exceed the maximum size of input array', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('100');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('100');
         longNumberLimitInput.clear();
         longNumberLimitInput.sendKeys('100');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
       });
     </file>
   </example>
*/function limitToFilter(){return function(input,limit,begin){if(Math.abs(Number(limit))===Infinity){limit=Number(limit);}else{limit=toInt(limit);}if(isNumberNaN(limit))return input;if(isNumber(input))input=input.toString();if(!isArrayLike(input))return input;begin=!begin||isNaN(begin)?0:toInt(begin);begin=begin<0?Math.max(0,input.length+begin):begin;if(limit>=0){return sliceFn(input,begin,begin+limit);}else{if(begin===0){return sliceFn(input,limit,input.length);}else{return sliceFn(input,Math.max(0,begin+limit),begin);}}};}function sliceFn(input,begin,end){if(isString(input))return input.slice(begin,end);return slice.call(input,begin,end);}/**
 * @ngdoc filter
 * @name orderBy
 * @kind function
 *
 * @description
 * Returns an array containing the items from the specified `collection`, ordered by a `comparator`
 * function based on the values computed using the `expression` predicate.
 *
 * For example, `[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'` would result in
 * `[{id: 'bar'}, {id: 'foo'}]`.
 *
 * The `collection` can be an Array or array-like object (e.g. NodeList, jQuery object, TypedArray,
 * String, etc).
 *
 * The `expression` can be a single predicate, or a list of predicates each serving as a tie-breaker
 * for the preceding one. The `expression` is evaluated against each item and the output is used
 * for comparing with other items.
 *
 * You can change the sorting order by setting `reverse` to `true`. By default, items are sorted in
 * ascending order.
 *
 * The comparison is done using the `comparator` function. If none is specified, a default, built-in
 * comparator is used (see below for details - in a nutshell, it compares numbers numerically and
 * strings alphabetically).
 *
 * ### Under the hood
 *
 * Ordering the specified `collection` happens in two phases:
 *
 * 1. All items are passed through the predicate (or predicates), and the returned values are saved
 *    along with their type (`string`, `number` etc). For example, an item `{label: 'foo'}`, passed
 *    through a predicate that extracts the value of the `label` property, would be transformed to:
 *    ```
 *    {
 *      value: 'foo',
 *      type: 'string',
 *      index: ...
 *    }
 *    ```
 * 2. The comparator function is used to sort the items, based on the derived values, types and
 *    indices.
 *
 * If you use a custom comparator, it will be called with pairs of objects of the form
 * `{value: ..., type: '...', index: ...}` and is expected to return `0` if the objects are equal
 * (as far as the comparator is concerned), `-1` if the 1st one should be ranked higher than the
 * second, or `1` otherwise.
 *
 * In order to ensure that the sorting will be deterministic across platforms, if none of the
 * specified predicates can distinguish between two items, `orderBy` will automatically introduce a
 * dummy predicate that returns the item's index as `value`.
 * (If you are using a custom comparator, make sure it can handle this predicate as well.)
 *
 * If a custom comparator still can't distinguish between two items, then they will be sorted based
 * on their index using the built-in comparator.
 *
 * Finally, in an attempt to simplify things, if a predicate returns an object as the extracted
 * value for an item, `orderBy` will try to convert that object to a primitive value, before passing
 * it to the comparator. The following rules govern the conversion:
 *
 * 1. If the object has a `valueOf()` method that returns a primitive, its return value will be
 *    used instead.<br />
 *    (If the object has a `valueOf()` method that returns another object, then the returned object
 *    will be used in subsequent steps.)
 * 2. If the object has a custom `toString()` method (i.e. not the one inherited from `Object`) that
 *    returns a primitive, its return value will be used instead.<br />
 *    (If the object has a `toString()` method that returns another object, then the returned object
 *    will be used in subsequent steps.)
 * 3. No conversion; the object itself is used.
 *
 * ### The default comparator
 *
 * The default, built-in comparator should be sufficient for most usecases. In short, it compares
 * numbers numerically, strings alphabetically (and case-insensitively), for objects falls back to
 * using their index in the original collection, and sorts values of different types by type.
 *
 * More specifically, it follows these steps to determine the relative order of items:
 *
 * 1. If the compared values are of different types, compare the types themselves alphabetically.
 * 2. If both values are of type `string`, compare them alphabetically in a case- and
 *    locale-insensitive way.
 * 3. If both values are objects, compare their indices instead.
 * 4. Otherwise, return:
 *    -  `0`, if the values are equal (by strict equality comparison, i.e. using `===`).
 *    - `-1`, if the 1st value is "less than" the 2nd value (compared using the `<` operator).
 *    -  `1`, otherwise.
 *
 * **Note:** If you notice numbers not being sorted as expected, make sure they are actually being
 *           saved as numbers and not strings.
 * **Note:** For the purpose of sorting, `null` values are treated as the string `'null'` (i.e.
 *           `type: 'string'`, `value: 'null'`). This may cause unexpected sort order relative to
 *           other values.
 *
 * @param {Array|ArrayLike} collection - The collection (array or array-like object) to sort.
 * @param {(Function|string|Array.<Function|string>)=} expression - A predicate (or list of
 *    predicates) to be used by the comparator to determine the order of elements.
 *
 *    Can be one of:
 *
 *    - `Function`: A getter function. This function will be called with each item as argument and
 *      the return value will be used for sorting.
 *    - `string`: An Angular expression. This expression will be evaluated against each item and the
 *      result will be used for sorting. For example, use `'label'` to sort by a property called
 *      `label` or `'label.substring(0, 3)'` to sort by the first 3 characters of the `label`
 *      property.<br />
 *      (The result of a constant expression is interpreted as a property name to be used for
 *      comparison. For example, use `'"special name"'` (note the extra pair of quotes) to sort by a
 *      property called `special name`.)<br />
 *      An expression can be optionally prefixed with `+` or `-` to control the sorting direction,
 *      ascending or descending. For example, `'+label'` or `'-label'`. If no property is provided,
 *      (e.g. `'+'` or `'-'`), the collection element itself is used in comparisons.
 *    - `Array`: An array of function and/or string predicates. If a predicate cannot determine the
 *      relative order of two items, the next predicate is used as a tie-breaker.
 *
 * **Note:** If the predicate is missing or empty then it defaults to `'+'`.
 *
 * @param {boolean=} reverse - If `true`, reverse the sorting order.
 * @param {(Function)=} comparator - The comparator function used to determine the relative order of
 *    value pairs. If omitted, the built-in comparator will be used.
 *
 * @returns {Array} - The sorted array.
 *
 *
 * @example
 * ### Ordering a table with `ngRepeat`
 *
 * The example below demonstrates a simple {@link ngRepeat ngRepeat}, where the data is sorted by
 * age in descending order (expression is set to `'-age'`). The `comparator` is not set, which means
 * it defaults to the built-in comparator.
 *
   <example name="orderBy-static" module="orderByExample1">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <table class="friends">
           <tr>
             <th>Name</th>
             <th>Phone Number</th>
             <th>Age</th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:'-age'">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
     <file name="script.js">
       angular.module('orderByExample1', [])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.friends = [
             {name: 'John',   phone: '555-1212',  age: 10},
             {name: 'Mary',   phone: '555-9876',  age: 19},
             {name: 'Mike',   phone: '555-4321',  age: 21},
             {name: 'Adam',   phone: '555-5678',  age: 35},
             {name: 'Julie',  phone: '555-8765',  age: 29}
           ];
         }]);
     </file>
     <file name="style.css">
       .friends {
         border-collapse: collapse;
       }

       .friends th {
         border-bottom: 1px solid;
       }
       .friends td, .friends th {
         border-left: 1px solid;
         padding: 5px 10px;
       }
       .friends td:first-child, .friends th:first-child {
         border-left: none;
       }
     </file>
     <file name="protractor.js" type="protractor">
       // Element locators
       var names = element.all(by.repeater('friends').column('friend.name'));

       it('should sort friends by age in reverse order', function() {
         expect(names.get(0).getText()).toBe('Adam');
         expect(names.get(1).getText()).toBe('Julie');
         expect(names.get(2).getText()).toBe('Mike');
         expect(names.get(3).getText()).toBe('Mary');
         expect(names.get(4).getText()).toBe('John');
       });
     </file>
   </example>
 * <hr />
 *
 * @example
 * ### Changing parameters dynamically
 *
 * All parameters can be changed dynamically. The next example shows how you can make the columns of
 * a table sortable, by binding the `expression` and `reverse` parameters to scope properties.
 *
   <example name="orderBy-dynamic" module="orderByExample2">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
         <hr/>
         <button ng-click="propertyName = null; reverse = false">Set to unsorted</button>
         <hr/>
         <table class="friends">
           <tr>
             <th>
               <button ng-click="sortBy('name')">Name</button>
               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
             </th>
             <th>
               <button ng-click="sortBy('phone')">Phone Number</button>
               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
             </th>
             <th>
               <button ng-click="sortBy('age')">Age</button>
               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
             </th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:propertyName:reverse">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
     <file name="script.js">
       angular.module('orderByExample2', [])
         .controller('ExampleController', ['$scope', function($scope) {
           var friends = [
             {name: 'John',   phone: '555-1212',  age: 10},
             {name: 'Mary',   phone: '555-9876',  age: 19},
             {name: 'Mike',   phone: '555-4321',  age: 21},
             {name: 'Adam',   phone: '555-5678',  age: 35},
             {name: 'Julie',  phone: '555-8765',  age: 29}
           ];

           $scope.propertyName = 'age';
           $scope.reverse = true;
           $scope.friends = friends;

           $scope.sortBy = function(propertyName) {
             $scope.reverse = ($scope.propertyName === propertyName) ? !$scope.reverse : false;
             $scope.propertyName = propertyName;
           };
         }]);
     </file>
     <file name="style.css">
       .friends {
         border-collapse: collapse;
       }

       .friends th {
         border-bottom: 1px solid;
       }
       .friends td, .friends th {
         border-left: 1px solid;
         padding: 5px 10px;
       }
       .friends td:first-child, .friends th:first-child {
         border-left: none;
       }

       .sortorder:after {
         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
       }
       .sortorder.reverse:after {
         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
       }
     </file>
     <file name="protractor.js" type="protractor">
       // Element locators
       var unsortButton = element(by.partialButtonText('unsorted'));
       var nameHeader = element(by.partialButtonText('Name'));
       var phoneHeader = element(by.partialButtonText('Phone'));
       var ageHeader = element(by.partialButtonText('Age'));
       var firstName = element(by.repeater('friends').column('friend.name').row(0));
       var lastName = element(by.repeater('friends').column('friend.name').row(4));

       it('should sort friends by some property, when clicking on the column header', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         phoneHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Mary');

         nameHeader.click();
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('Mike');

         ageHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Adam');
       });

       it('should sort friends in reverse order, when clicking on the same column', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         ageHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Adam');

         ageHeader.click();
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');
       });

       it('should restore the original order, when clicking "Set to unsorted"', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         unsortButton.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Julie');
       });
     </file>
   </example>
 * <hr />
 *
 * @example
 * ### Using `orderBy` inside a controller
 *
 * It is also possible to call the `orderBy` filter manually, by injecting `orderByFilter`, and
 * calling it with the desired parameters. (Alternatively, you could inject the `$filter` factory
 * and retrieve the `orderBy` filter with `$filter('orderBy')`.)
 *
   <example name="orderBy-call-manually" module="orderByExample3">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
         <hr/>
         <button ng-click="sortBy(null)">Set to unsorted</button>
         <hr/>
         <table class="friends">
           <tr>
             <th>
               <button ng-click="sortBy('name')">Name</button>
               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
             </th>
             <th>
               <button ng-click="sortBy('phone')">Phone Number</button>
               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
             </th>
             <th>
               <button ng-click="sortBy('age')">Age</button>
               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
             </th>
           </tr>
           <tr ng-repeat="friend in friends">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
     <file name="script.js">
       angular.module('orderByExample3', [])
         .controller('ExampleController', ['$scope', 'orderByFilter', function($scope, orderBy) {
           var friends = [
             {name: 'John',   phone: '555-1212',  age: 10},
             {name: 'Mary',   phone: '555-9876',  age: 19},
             {name: 'Mike',   phone: '555-4321',  age: 21},
             {name: 'Adam',   phone: '555-5678',  age: 35},
             {name: 'Julie',  phone: '555-8765',  age: 29}
           ];

           $scope.propertyName = 'age';
           $scope.reverse = true;
           $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);

           $scope.sortBy = function(propertyName) {
             $scope.reverse = (propertyName !== null && $scope.propertyName === propertyName)
                 ? !$scope.reverse : false;
             $scope.propertyName = propertyName;
             $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);
           };
         }]);
     </file>
     <file name="style.css">
       .friends {
         border-collapse: collapse;
       }

       .friends th {
         border-bottom: 1px solid;
       }
       .friends td, .friends th {
         border-left: 1px solid;
         padding: 5px 10px;
       }
       .friends td:first-child, .friends th:first-child {
         border-left: none;
       }

       .sortorder:after {
         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
       }
       .sortorder.reverse:after {
         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
       }
     </file>
     <file name="protractor.js" type="protractor">
       // Element locators
       var unsortButton = element(by.partialButtonText('unsorted'));
       var nameHeader = element(by.partialButtonText('Name'));
       var phoneHeader = element(by.partialButtonText('Phone'));
       var ageHeader = element(by.partialButtonText('Age'));
       var firstName = element(by.repeater('friends').column('friend.name').row(0));
       var lastName = element(by.repeater('friends').column('friend.name').row(4));

       it('should sort friends by some property, when clicking on the column header', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         phoneHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Mary');

         nameHeader.click();
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('Mike');

         ageHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Adam');
       });

       it('should sort friends in reverse order, when clicking on the same column', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         ageHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Adam');

         ageHeader.click();
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');
       });

       it('should restore the original order, when clicking "Set to unsorted"', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         unsortButton.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Julie');
       });
     </file>
   </example>
 * <hr />
 *
 * @example
 * ### Using a custom comparator
 *
 * If you have very specific requirements about the way items are sorted, you can pass your own
 * comparator function. For example, you might need to compare some strings in a locale-sensitive
 * way. (When specifying a custom comparator, you also need to pass a value for the `reverse`
 * argument - passing `false` retains the default sorting order, i.e. ascending.)
 *
   <example name="orderBy-custom-comparator" module="orderByExample4">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <div class="friends-container custom-comparator">
           <h3>Locale-sensitive Comparator</h3>
           <table class="friends">
             <tr>
               <th>Name</th>
               <th>Favorite Letter</th>
             </tr>
             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter':false:localeSensitiveComparator">
               <td>{{friend.name}}</td>
               <td>{{friend.favoriteLetter}}</td>
             </tr>
           </table>
         </div>
         <div class="friends-container default-comparator">
           <h3>Default Comparator</h3>
           <table class="friends">
             <tr>
               <th>Name</th>
               <th>Favorite Letter</th>
             </tr>
             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter'">
               <td>{{friend.name}}</td>
               <td>{{friend.favoriteLetter}}</td>
             </tr>
           </table>
         </div>
       </div>
     </file>
     <file name="script.js">
       angular.module('orderByExample4', [])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.friends = [
             {name: 'John',   favoriteLetter: 'Ä'},
             {name: 'Mary',   favoriteLetter: 'Ü'},
             {name: 'Mike',   favoriteLetter: 'Ö'},
             {name: 'Adam',   favoriteLetter: 'H'},
             {name: 'Julie',  favoriteLetter: 'Z'}
           ];

           $scope.localeSensitiveComparator = function(v1, v2) {
             // If we don't get strings, just compare by index
             if (v1.type !== 'string' || v2.type !== 'string') {
               return (v1.index < v2.index) ? -1 : 1;
             }

             // Compare strings alphabetically, taking locale into account
             return v1.value.localeCompare(v2.value);
           };
         }]);
     </file>
     <file name="style.css">
       .friends-container {
         display: inline-block;
         margin: 0 30px;
       }

       .friends {
         border-collapse: collapse;
       }

       .friends th {
         border-bottom: 1px solid;
       }
       .friends td, .friends th {
         border-left: 1px solid;
         padding: 5px 10px;
       }
       .friends td:first-child, .friends th:first-child {
         border-left: none;
       }
     </file>
     <file name="protractor.js" type="protractor">
       // Element locators
       var container = element(by.css('.custom-comparator'));
       var names = container.all(by.repeater('friends').column('friend.name'));

       it('should sort friends by favorite letter (in correct alphabetical order)', function() {
         expect(names.get(0).getText()).toBe('John');
         expect(names.get(1).getText()).toBe('Adam');
         expect(names.get(2).getText()).toBe('Mike');
         expect(names.get(3).getText()).toBe('Mary');
         expect(names.get(4).getText()).toBe('Julie');
       });
     </file>
   </example>
 *
 */orderByFilter.$inject=['$parse'];function orderByFilter($parse){return function(array,sortPredicate,reverseOrder,compareFn){if(array==null)return array;if(!isArrayLike(array)){throw minErr('orderBy')('notarray','Expected array but received: {0}',array);}if(!isArray(sortPredicate)){sortPredicate=[sortPredicate];}if(sortPredicate.length===0){sortPredicate=['+'];}var predicates=processPredicates(sortPredicate);var descending=reverseOrder?-1:1;// Define the `compare()` function. Use a default comparator if none is specified.
var compare=isFunction(compareFn)?compareFn:defaultCompare;// The next three lines are a version of a Swartzian Transform idiom from Perl
// (sometimes called the Decorate-Sort-Undecorate idiom)
// See https://en.wikipedia.org/wiki/Schwartzian_transform
var compareValues=Array.prototype.map.call(array,getComparisonObject);compareValues.sort(doComparison);array=compareValues.map(function(item){return item.value;});return array;function getComparisonObject(value,index){// NOTE: We are adding an extra `tieBreaker` value based on the element's index.
// This will be used to keep the sort stable when none of the input predicates can
// distinguish between two elements.
return{value:value,tieBreaker:{value:index,type:'number',index:index},predicateValues:predicates.map(function(predicate){return getPredicateValue(predicate.get(value),index);})};}function doComparison(v1,v2){for(var i=0,ii=predicates.length;i<ii;i++){var result=compare(v1.predicateValues[i],v2.predicateValues[i]);if(result){return result*predicates[i].descending*descending;}}return(compare(v1.tieBreaker,v2.tieBreaker)||defaultCompare(v1.tieBreaker,v2.tieBreaker))*descending;}};function processPredicates(sortPredicates){return sortPredicates.map(function(predicate){var descending=1,get=identity;if(isFunction(predicate)){get=predicate;}else if(isString(predicate)){if(predicate.charAt(0)==='+'||predicate.charAt(0)==='-'){descending=predicate.charAt(0)==='-'?-1:1;predicate=predicate.substring(1);}if(predicate!==''){get=$parse(predicate);if(get.constant){var key=get();get=function(value){return value[key];};}}}return{get:get,descending:descending};});}function isPrimitive(value){switch(typeof value){case'number':/* falls through */case'boolean':/* falls through */case'string':return true;default:return false;}}function objectValue(value){// If `valueOf` is a valid function use that
if(isFunction(value.valueOf)){value=value.valueOf();if(isPrimitive(value))return value;}// If `toString` is a valid function and not the one from `Object.prototype` use that
if(hasCustomToString(value)){value=value.toString();if(isPrimitive(value))return value;}return value;}function getPredicateValue(value,index){var type=typeof value;if(value===null){type='string';value='null';}else if(type==='object'){value=objectValue(value);}return{value:value,type:type,index:index};}function defaultCompare(v1,v2){var result=0;var type1=v1.type;var type2=v2.type;if(type1===type2){var value1=v1.value;var value2=v2.value;if(type1==='string'){// Compare strings case-insensitively
value1=value1.toLowerCase();value2=value2.toLowerCase();}else if(type1==='object'){// For basic objects, use the position of the object
// in the collection instead of the value
if(isObject(value1))value1=v1.index;if(isObject(value2))value2=v2.index;}if(value1!==value2){result=value1<value2?-1:1;}}else{result=type1<type2?-1:1;}return result;}}function ngDirective(directive){if(isFunction(directive)){directive={link:directive};}directive.restrict=directive.restrict||'AC';return valueFn(directive);}/**
 * @ngdoc directive
 * @name a
 * @restrict E
 *
 * @description
 * Modifies the default behavior of the html a tag so that the default action is prevented when
 * the href attribute is empty.
 *
 * For dynamically creating `href` attributes for a tags, see the {@link ng.ngHref `ngHref`} directive.
 */var htmlAnchorDirective=valueFn({restrict:'E',compile:function(element,attr){if(!attr.href&&!attr.xlinkHref){return function(scope,element){// If the linked element is not an anchor tag anymore, do nothing
if(element[0].nodeName.toLowerCase()!=='a')return;// SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
var href=toString.call(element.prop('href'))==='[object SVGAnimatedString]'?'xlink:href':'href';element.on('click',function(event){// if we have no href url, then don't navigate anywhere.
if(!element.attr(href)){event.preventDefault();}});};}}});/**
 * @ngdoc directive
 * @name ngHref
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in an href attribute will
 * make the link go to the wrong URL if the user clicks it before
 * Angular has a chance to replace the `{{hash}}` markup with its
 * value. Until Angular replaces the markup the link will be broken
 * and will most likely return a 404 error. The `ngHref` directive
 * solves this problem.
 *
 * The wrong way to write it:
 * ```html
 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * @element A
 * @param {template} ngHref any string which can contain `{{}}` markup.
 *
 * @example
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
 * in links and their different behaviors:
    <example name="ng-href">
      <file name="index.html">
        <input ng-model="value" /><br />
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
      </file>
      <file name="protractor.js" type="protractor">
        it('should execute ng-click but not reload when href without value', function() {
          element(by.id('link-1')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when href empty string', function() {
          element(by.id('link-2')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click and change url when ng-href specified', function() {
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

          element(by.id('link-3')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.

          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/123$/);
            });
          }, 5000, 'page should navigate to /123');
        });

        it('should execute ng-click but not reload when href empty string and name specified', function() {
          element(by.id('link-4')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when no href but name specified', function() {
          element(by.id('link-5')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
        });

        it('should only change url when only ng-href', function() {
          element(by.model('value')).clear();
          element(by.model('value')).sendKeys('6');
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

          element(by.id('link-6')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.
          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/6$/);
            });
          }, 5000, 'page should navigate to /6');
        });
      </file>
    </example>
 *//**
 * @ngdoc directive
 * @name ngSrc
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrc` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
 * ```
 *
 * @element IMG
 * @param {template} ngSrc any string which can contain `{{}}` markup.
 *//**
 * @ngdoc directive
 * @name ngSrcset
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrcset` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
 * ```
 *
 * @element IMG
 * @param {template} ngSrcset any string which can contain `{{}}` markup.
 *//**
 * @ngdoc directive
 * @name ngDisabled
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * This directive sets the `disabled` attribute on the element (typically a form control,
 * e.g. `input`, `button`, `select` etc.) if the
 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `disabled`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * @example
    <example name="ng-disabled">
      <file name="index.html">
        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
        <button ng-model="button" ng-disabled="checked">Button</button>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle button', function() {
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
 *     then the `disabled` attribute will be set on the element
 *//**
 * @ngdoc directive
 * @name ngChecked
 * @restrict A
 * @priority 100
 *
 * @description
 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
 *
 * Note that this directive should not be used together with {@link ngModel `ngModel`},
 * as this can lead to unexpected behavior.
 *
 * A special directive is necessary because we cannot use interpolation inside the `checked`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * @example
    <example name="ng-checked">
      <file name="index.html">
        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
      </file>
      <file name="protractor.js" type="protractor">
        it('should check both checkBoxes', function() {
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
          element(by.model('master')).click();
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
 *     then the `checked` attribute will be set on the element
 *//**
 * @ngdoc directive
 * @name ngReadonly
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * Sets the `readonly` attribute on the element, if the expression inside `ngReadonly` is truthy.
 * Note that `readonly` applies only to `input` elements with specific types. [See the input docs on
 * MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) for more information.
 *
 * A special directive is necessary because we cannot use interpolation inside the `readonly`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * @example
    <example name="ng-readonly">
      <file name="index.html">
        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle readonly attr', function() {
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
 *     then special attribute "readonly" will be set on the element
 *//**
 * @ngdoc directive
 * @name ngSelected
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * Sets the `selected` attribute on the element, if the expression inside `ngSelected` is truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `selected`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * <div class="alert alert-warning">
 *   **Note:** `ngSelected` does not interact with the `select` and `ngModel` directives, it only
 *   sets the `selected` attribute on the element. If you are using `ngModel` on the select, you
 *   should not use `ngSelected` on the options, as `ngModel` will set the select value and
 *   selected options.
 * </div>
 *
 * @example
    <example name="ng-selected">
      <file name="index.html">
        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
        <select aria-label="ngSelected demo">
          <option>Hello!</option>
          <option id="greet" ng-selected="selected">Greetings!</option>
        </select>
      </file>
      <file name="protractor.js" type="protractor">
        it('should select Greetings!', function() {
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
          element(by.model('selected')).click();
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element OPTION
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
 *     then special attribute "selected" will be set on the element
 *//**
 * @ngdoc directive
 * @name ngOpen
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * Sets the `open` attribute on the element, if the expression inside `ngOpen` is truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `open`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * ## A note about browser compatibility
 *
 * Internet Explorer and Edge do not support the `details` element, it is
 * recommended to use {@link ng.ngShow} and {@link ng.ngHide} instead.
 *
 * @example
     <example name="ng-open">
       <file name="index.html">
         <label>Toggle details: <input type="checkbox" ng-model="open"></label><br/>
         <details id="details" ng-open="open">
            <summary>List</summary>
            <ul>
              <li>Apple</li>
              <li>Orange</li>
              <li>Durian</li>
            </ul>
         </details>
       </file>
       <file name="protractor.js" type="protractor">
         it('should toggle open', function() {
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
           element(by.model('open')).click();
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
         });
       </file>
     </example>
 *
 * @element DETAILS
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
 *     then special attribute "open" will be set on the element
 */var ngAttributeAliasDirectives={};// boolean attrs are evaluated
forEach(BOOLEAN_ATTR,function(propName,attrName){// binding to multiple is not supported
if(propName==='multiple')return;function defaultLinkFn(scope,element,attr){scope.$watch(attr[normalized],function ngBooleanAttrWatchAction(value){attr.$set(attrName,!!value);});}var normalized=directiveNormalize('ng-'+attrName);var linkFn=defaultLinkFn;if(propName==='checked'){linkFn=function(scope,element,attr){// ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
if(attr.ngModel!==attr[normalized]){defaultLinkFn(scope,element,attr);}};}ngAttributeAliasDirectives[normalized]=function(){return{restrict:'A',priority:100,link:linkFn};};});// aliased input attrs are evaluated
forEach(ALIASED_ATTR,function(htmlAttr,ngAttr){ngAttributeAliasDirectives[ngAttr]=function(){return{priority:100,link:function(scope,element,attr){//special case ngPattern when a literal regular expression value
//is used as the expression (this way we don't have to watch anything).
if(ngAttr==='ngPattern'&&attr.ngPattern.charAt(0)==='/'){var match=attr.ngPattern.match(REGEX_STRING_REGEXP);if(match){attr.$set('ngPattern',new RegExp(match[1],match[2]));return;}}scope.$watch(attr[ngAttr],function ngAttrAliasWatchAction(value){attr.$set(ngAttr,value);});}};};});// ng-src, ng-srcset, ng-href are interpolated
forEach(['src','srcset','href'],function(attrName){var normalized=directiveNormalize('ng-'+attrName);ngAttributeAliasDirectives[normalized]=function(){return{priority:99,// it needs to run after the attributes are interpolated
link:function(scope,element,attr){var propName=attrName,name=attrName;if(attrName==='href'&&toString.call(element.prop('href'))==='[object SVGAnimatedString]'){name='xlinkHref';attr.$attr[name]='xlink:href';propName=null;}attr.$observe(normalized,function(value){if(!value){if(attrName==='href'){attr.$set(name,null);}return;}attr.$set(name,value);// Support: IE 9-11 only
// On IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
// then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
// to set the property as well to achieve the desired effect.
// We use attr[attrName] value since $set can sanitize the url.
if(msie&&propName)element.prop(propName,attr[name]);});}};};});/* global -nullFormCtrl, -PENDING_CLASS, -SUBMITTED_CLASS
 */var nullFormCtrl={$addControl:noop,$$renameControl:nullFormRenameControl,$removeControl:noop,$setValidity:noop,$setDirty:noop,$setPristine:noop,$setSubmitted:noop},PENDING_CLASS='ng-pending',SUBMITTED_CLASS='ng-submitted';function nullFormRenameControl(control,name){control.$name=name;}/**
 * @ngdoc type
 * @name form.FormController
 *
 * @property {boolean} $pristine True if user has not interacted with the form yet.
 * @property {boolean} $dirty True if user has already interacted with the form.
 * @property {boolean} $valid True if all of the containing forms and controls are valid.
 * @property {boolean} $invalid True if at least one containing control or form is invalid.
 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
 *
 * @property {Object} $pending An object hash, containing references to controls or forms with
 *  pending validators, where:
 *
 *  - keys are validations tokens (error names).
 *  - values are arrays of controls or forms that have a pending validator for the given error name.
 *
 * See {@link form.FormController#$error $error} for a list of built-in validation tokens.
 *
 * @property {Object} $error An object hash, containing references to controls or forms with failing
 *  validators, where:
 *
 *  - keys are validation tokens (error names),
 *  - values are arrays of controls or forms that have a failing validator for the given error name.
 *
 *  Built-in validation tokens:
 *  - `email`
 *  - `max`
 *  - `maxlength`
 *  - `min`
 *  - `minlength`
 *  - `number`
 *  - `pattern`
 *  - `required`
 *  - `url`
 *  - `date`
 *  - `datetimelocal`
 *  - `time`
 *  - `week`
 *  - `month`
 *
 * @description
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
 * such as being valid/invalid or dirty/pristine.
 *
 * Each {@link ng.directive:form form} directive creates an instance
 * of `FormController`.
 *
 *///asks for $scope to fool the BC controller module
FormController.$inject=['$element','$attrs','$scope','$animate','$interpolate'];function FormController($element,$attrs,$scope,$animate,$interpolate){this.$$controls=[];// init state
this.$error={};this.$$success={};this.$pending=undefined;this.$name=$interpolate($attrs.name||$attrs.ngForm||'')($scope);this.$dirty=false;this.$pristine=true;this.$valid=true;this.$invalid=false;this.$submitted=false;this.$$parentForm=nullFormCtrl;this.$$element=$element;this.$$animate=$animate;setupValidity(this);}FormController.prototype={/**
   * @ngdoc method
   * @name form.FormController#$rollbackViewValue
   *
   * @description
   * Rollback all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is typically needed by the reset button of
   * a form that uses `ng-model-options` to pend updates.
   */$rollbackViewValue:function(){forEach(this.$$controls,function(control){control.$rollbackViewValue();});},/**
   * @ngdoc method
   * @name form.FormController#$commitViewValue
   *
   * @description
   * Commit all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */$commitViewValue:function(){forEach(this.$$controls,function(control){control.$commitViewValue();});},/**
   * @ngdoc method
   * @name form.FormController#$addControl
   * @param {object} control control object, either a {@link form.FormController} or an
   * {@link ngModel.NgModelController}
   *
   * @description
   * Register a control with the form. Input elements using ngModelController do this automatically
   * when they are linked.
   *
   * Note that the current state of the control will not be reflected on the new parent form. This
   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
   * state.
   *
   * However, if the method is used programmatically, for example by adding dynamically created controls,
   * or controls that have been previously removed without destroying their corresponding DOM element,
   * it's the developers responsibility to make sure the current state propagates to the parent form.
   *
   * For example, if an input control is added that is already `$dirty` and has `$error` properties,
   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
   */$addControl:function(control){// Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
// and not added to the scope.  Now we throw an error.
assertNotHasOwnProperty(control.$name,'input');this.$$controls.push(control);if(control.$name){this[control.$name]=control;}control.$$parentForm=this;},// Private API: rename a form control
$$renameControl:function(control,newName){var oldName=control.$name;if(this[oldName]===control){delete this[oldName];}this[newName]=control;control.$name=newName;},/**
   * @ngdoc method
   * @name form.FormController#$removeControl
   * @param {object} control control object, either a {@link form.FormController} or an
   * {@link ngModel.NgModelController}
   *
   * @description
   * Deregister a control from the form.
   *
   * Input elements using ngModelController do this automatically when they are destroyed.
   *
   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
   * different from case to case. For example, removing the only `$dirty` control from a form may or
   * may not mean that the form is still `$dirty`.
   */$removeControl:function(control){if(control.$name&&this[control.$name]===control){delete this[control.$name];}forEach(this.$pending,function(value,name){// eslint-disable-next-line no-invalid-this
this.$setValidity(name,null,control);},this);forEach(this.$error,function(value,name){// eslint-disable-next-line no-invalid-this
this.$setValidity(name,null,control);},this);forEach(this.$$success,function(value,name){// eslint-disable-next-line no-invalid-this
this.$setValidity(name,null,control);},this);arrayRemove(this.$$controls,control);control.$$parentForm=nullFormCtrl;},/**
   * @ngdoc method
   * @name form.FormController#$setDirty
   *
   * @description
   * Sets the form to a dirty state.
   *
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
   * state (ng-dirty class). This method will also propagate to parent forms.
   */$setDirty:function(){this.$$animate.removeClass(this.$$element,PRISTINE_CLASS);this.$$animate.addClass(this.$$element,DIRTY_CLASS);this.$dirty=true;this.$pristine=false;this.$$parentForm.$setDirty();},/**
   * @ngdoc method
   * @name form.FormController#$setPristine
   *
   * @description
   * Sets the form to its pristine state.
   *
   * This method sets the form's `$pristine` state to true, the `$dirty` state to false, removes
   * the `ng-dirty` class and adds the `ng-pristine` class. Additionally, it sets the `$submitted`
   * state to false.
   *
   * This method will also propagate to all the controls contained in this form.
   *
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
   * saving or resetting it.
   */$setPristine:function(){this.$$animate.setClass(this.$$element,PRISTINE_CLASS,DIRTY_CLASS+' '+SUBMITTED_CLASS);this.$dirty=false;this.$pristine=true;this.$submitted=false;forEach(this.$$controls,function(control){control.$setPristine();});},/**
   * @ngdoc method
   * @name form.FormController#$setUntouched
   *
   * @description
   * Sets the form to its untouched state.
   *
   * This method can be called to remove the 'ng-touched' class and set the form controls to their
   * untouched state (ng-untouched class).
   *
   * Setting a form controls back to their untouched state is often useful when setting the form
   * back to its pristine state.
   */$setUntouched:function(){forEach(this.$$controls,function(control){control.$setUntouched();});},/**
   * @ngdoc method
   * @name form.FormController#$setSubmitted
   *
   * @description
   * Sets the form to its submitted state.
   */$setSubmitted:function(){this.$$animate.addClass(this.$$element,SUBMITTED_CLASS);this.$submitted=true;this.$$parentForm.$setSubmitted();}};/**
 * @ngdoc method
 * @name form.FormController#$setValidity
 *
 * @description
 * Change the validity state of the form, and notify the parent form (if any).
 *
 * Application developers will rarely need to call this method directly. It is used internally, by
 * {@link ngModel.NgModelController#$setValidity NgModelController.$setValidity()}, to propagate a
 * control's validity state to the parent `FormController`.
 *
 * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be
 *        assigned to either `$error[validationErrorKey]` or `$pending[validationErrorKey]` (for
 *        unfulfilled `$asyncValidators`), so that it is available for data-binding. The
 *        `validationErrorKey` should be in camelCase and will get converted into dash-case for
 *        class name. Example: `myError` will result in `ng-valid-my-error` and
 *        `ng-invalid-my-error` classes and can be bound to as `{{ someForm.$error.myError }}`.
 * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending
 *        (undefined),  or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
 *        Skipped is used by AngularJS when validators do not run because of parse errors and when
 *        `$asyncValidators` do not run because any of the `$validators` failed.
 * @param {NgModelController | FormController} controller - The controller whose validity state is
 *        triggering the change.
 */addSetValidityMethod({clazz:FormController,set:function(object,property,controller){var list=object[property];if(!list){object[property]=[controller];}else{var index=list.indexOf(controller);if(index===-1){list.push(controller);}}},unset:function(object,property,controller){var list=object[property];if(!list){return;}arrayRemove(list,controller);if(list.length===0){delete object[property];}}});/**
 * @ngdoc directive
 * @name ngForm
 * @restrict EAC
 *
 * @description
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
 * sub-group of controls needs to be determined.
 *
 * Note: the purpose of `ngForm` is to group controls,
 * but not to be a replacement for the `<form>` tag with all of its capabilities
 * (e.g. posting to the server, ...).
 *
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 *//**
 * @ngdoc directive
 * @name form
 * @restrict E
 *
 * @description
 * Directive that instantiates
 * {@link form.FormController FormController}.
 *
 * If the `name` attribute is specified, the form controller is published onto the current scope under
 * this name.
 *
 * # Alias: {@link ng.directive:ngForm `ngForm`}
 *
 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to
 * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group
 * of controls needs to be determined.
 *
 * # CSS classes
 *  - `ng-valid` is set if the form is valid.
 *  - `ng-invalid` is set if the form is invalid.
 *  - `ng-pending` is set if the form is pending.
 *  - `ng-pristine` is set if the form is pristine.
 *  - `ng-dirty` is set if the form is dirty.
 *  - `ng-submitted` is set if the form was submitted.
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 *
 * # Submitting a form and preventing the default action
 *
 * Since the role of forms in client-side Angular applications is different than in classical
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
 * page reload that sends the data to the server. Instead some javascript logic should be triggered
 * to handle the form submission in an application-specific way.
 *
 * For this reason, Angular prevents the default action (form submission to the server) unless the
 * `<form>` element has an `action` attribute specified.
 *
 * You can use one of the following two ways to specify what javascript method should be called when
 * a form is submitted:
 *
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
 * - {@link ng.directive:ngClick ngClick} directive on the first
  *  button or input field of type submit (input[type=submit])
 *
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
 * or {@link ng.directive:ngClick ngClick} directives.
 * This is because of the following form submission rules in the HTML specification:
 *
 * - If a form has only one input field then hitting enter in this field triggers form submit
 * (`ngSubmit`)
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
 * doesn't trigger submit
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
 *
 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * ## Animation Hooks
 *
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
 * other validations that are performed within the form. Animations in ngForm are similar to how
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
 * as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style a form element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-form {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-form.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
    <example name="ng-form" deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
      <file name="index.html">
       <script>
         angular.module('formExample', [])
           .controller('FormController', ['$scope', function($scope) {
             $scope.userType = 'guest';
           }]);
       </script>
       <style>
        .my-form {
          transition:all linear 0.5s;
          background: transparent;
        }
        .my-form.ng-invalid {
          background: red;
        }
       </style>
       <form name="myForm" ng-controller="FormController" class="my-form">
         userType: <input name="input" ng-model="userType" required>
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
         <code>userType = {{userType}}</code><br>
         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
         <code>myForm.$valid = {{myForm.$valid}}</code><br>
         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        it('should initialize to model', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));

          expect(userType.getText()).toContain('guest');
          expect(valid.getText()).toContain('true');
        });

        it('should be invalid if empty', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));
          var userInput = element(by.model('userType'));

          userInput.clear();
          userInput.sendKeys('');

          expect(userType.getText()).toEqual('userType =');
          expect(valid.getText()).toContain('false');
        });
      </file>
    </example>
 *
 * @param {string=} name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 */var formDirectiveFactory=function(isNgForm){return['$timeout','$parse',function($timeout,$parse){var formDirective={name:'form',restrict:isNgForm?'EAC':'E',require:['form','^^?form'],//first is the form's own ctrl, second is an optional parent form
controller:FormController,compile:function ngFormCompile(formElement,attr){// Setup initial state of the control
formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);var nameAttr=attr.name?'name':isNgForm&&attr.ngForm?'ngForm':false;return{pre:function ngFormPreLink(scope,formElement,attr,ctrls){var controller=ctrls[0];// if `action` attr is not present on the form, prevent the default action (submission)
if(!('action'in attr)){// we can't use jq events because if a form is destroyed during submission the default
// action is not prevented. see #1238
//
// IE 9 is not affected because it doesn't fire a submit event and try to do a full
// page reload if the form was destroyed by submission of the form via a click handler
// on a button in the form. Looks like an IE9 specific bug.
var handleFormSubmission=function(event){scope.$apply(function(){controller.$commitViewValue();controller.$setSubmitted();});event.preventDefault();};formElement[0].addEventListener('submit',handleFormSubmission);// unregister the preventDefault listener so that we don't not leak memory but in a
// way that will achieve the prevention of the default action.
formElement.on('$destroy',function(){$timeout(function(){formElement[0].removeEventListener('submit',handleFormSubmission);},0,false);});}var parentFormCtrl=ctrls[1]||controller.$$parentForm;parentFormCtrl.$addControl(controller);var setter=nameAttr?getSetter(controller.$name):noop;if(nameAttr){setter(scope,controller);attr.$observe(nameAttr,function(newValue){if(controller.$name===newValue)return;setter(scope,undefined);controller.$$parentForm.$$renameControl(controller,newValue);setter=getSetter(controller.$name);setter(scope,controller);});}formElement.on('$destroy',function(){controller.$$parentForm.$removeControl(controller);setter(scope,undefined);extend(controller,nullFormCtrl);//stop propagating child destruction handlers upwards
});}};}};return formDirective;function getSetter(expression){if(expression===''){//create an assignable expression, so forms with an empty name can be renamed later
return $parse('this[""]').assign;}return $parse(expression).assign||noop;}}];};var formDirective=formDirectiveFactory();var ngFormDirective=formDirectiveFactory(true);// helper methods
function setupValidity(instance){instance.$$classCache={};instance.$$classCache[INVALID_CLASS]=!(instance.$$classCache[VALID_CLASS]=instance.$$element.hasClass(VALID_CLASS));}function addSetValidityMethod(context){var clazz=context.clazz,set=context.set,unset=context.unset;clazz.prototype.$setValidity=function(validationErrorKey,state,controller){if(isUndefined(state)){createAndSet(this,'$pending',validationErrorKey,controller);}else{unsetAndCleanup(this,'$pending',validationErrorKey,controller);}if(!isBoolean(state)){unset(this.$error,validationErrorKey,controller);unset(this.$$success,validationErrorKey,controller);}else{if(state){unset(this.$error,validationErrorKey,controller);set(this.$$success,validationErrorKey,controller);}else{set(this.$error,validationErrorKey,controller);unset(this.$$success,validationErrorKey,controller);}}if(this.$pending){cachedToggleClass(this,PENDING_CLASS,true);this.$valid=this.$invalid=undefined;toggleValidationCss(this,'',null);}else{cachedToggleClass(this,PENDING_CLASS,false);this.$valid=isObjectEmpty(this.$error);this.$invalid=!this.$valid;toggleValidationCss(this,'',this.$valid);}// re-read the state as the set/unset methods could have
// combined state in this.$error[validationError] (used for forms),
// where setting/unsetting only increments/decrements the value,
// and does not replace it.
var combinedState;if(this.$pending&&this.$pending[validationErrorKey]){combinedState=undefined;}else if(this.$error[validationErrorKey]){combinedState=false;}else if(this.$$success[validationErrorKey]){combinedState=true;}else{combinedState=null;}toggleValidationCss(this,validationErrorKey,combinedState);this.$$parentForm.$setValidity(validationErrorKey,combinedState,this);};function createAndSet(ctrl,name,value,controller){if(!ctrl[name]){ctrl[name]={};}set(ctrl[name],value,controller);}function unsetAndCleanup(ctrl,name,value,controller){if(ctrl[name]){unset(ctrl[name],value,controller);}if(isObjectEmpty(ctrl[name])){ctrl[name]=undefined;}}function cachedToggleClass(ctrl,className,switchValue){if(switchValue&&!ctrl.$$classCache[className]){ctrl.$$animate.addClass(ctrl.$$element,className);ctrl.$$classCache[className]=true;}else if(!switchValue&&ctrl.$$classCache[className]){ctrl.$$animate.removeClass(ctrl.$$element,className);ctrl.$$classCache[className]=false;}}function toggleValidationCss(ctrl,validationErrorKey,isValid){validationErrorKey=validationErrorKey?'-'+snake_case(validationErrorKey,'-'):'';cachedToggleClass(ctrl,VALID_CLASS+validationErrorKey,isValid===true);cachedToggleClass(ctrl,INVALID_CLASS+validationErrorKey,isValid===false);}}function isObjectEmpty(obj){if(obj){for(var prop in obj){if(obj.hasOwnProperty(prop)){return false;}}}return true;}/* global
  VALID_CLASS: false,
  INVALID_CLASS: false,
  PRISTINE_CLASS: false,
  DIRTY_CLASS: false,
  ngModelMinErr: false
*/// Regex code was initially obtained from SO prior to modification: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
var ISO_DATE_REGEXP=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/;// See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)
// Note: We are being more lenient, because browsers are too.
//   1. Scheme
//   2. Slashes
//   3. Username
//   4. Password
//   5. Hostname
//   6. Port
//   7. Path
//   8. Query
//   9. Fragment
//                 1111111111111111 222   333333    44444        55555555555555555555555     666     77777777     8888888     999
var URL_REGEXP=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i;// eslint-disable-next-line max-len
var EMAIL_REGEXP=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;var NUMBER_REGEXP=/^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;var DATE_REGEXP=/^(\d{4,})-(\d{2})-(\d{2})$/;var DATETIMELOCAL_REGEXP=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;var WEEK_REGEXP=/^(\d{4,})-W(\d\d)$/;var MONTH_REGEXP=/^(\d{4,})-(\d\d)$/;var TIME_REGEXP=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;var PARTIAL_VALIDATION_EVENTS='keydown wheel mousedown';var PARTIAL_VALIDATION_TYPES=createMap();forEach('date,datetime-local,month,time,week'.split(','),function(type){PARTIAL_VALIDATION_TYPES[type]=true;});var inputType={/**
   * @ngdoc input
   * @name input[text]
   *
   * @description
   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
   *
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Adds `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
   *    This parameter is ignored for input[type=password] controls, which will never trim the
   *    input.
   *
   * @example
      <example name="text-input-directive" module="textInputExample">
        <file name="index.html">
         <script>
           angular.module('textInputExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 text: 'guest',
                 word: /^\s*\w*\s*$/
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>Single word:
             <input type="text" name="input" ng-model="example.text"
                    ng-pattern="example.word" required ng-trim="false">
           </label>
           <div role="alert">
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.pattern">
               Single word only!</span>
           </div>
           <code>text = {{example.text}}</code><br/>
           <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br/>
           <code>myForm.input.$error = {{myForm.input.$error}}</code><br/>
           <code>myForm.$valid = {{myForm.$valid}}</code><br/>
           <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('example.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('guest');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if multi word', function() {
            input.clear();
            input.sendKeys('hello world');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */'text':textInputType,/**
     * @ngdoc input
     * @name input[date]
     *
     * @description
     * Input with date validation and transformation. In browsers that do not yet support
     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
     * modern browsers do not yet support this input type, it is important to provide cues to users on the
     * expected input format via a placeholder or label.
     *
     * The model must always be a Date object, otherwise Angular will throw an error.
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
     *
     * The timezone to be used to read/write the `Date` instance in the model can be defined using
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
     *   constraint validation.
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
     *   constraint validation.
     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="date-input-directive" module="dateInputExample">
     <file name="index.html">
       <script>
          angular.module('dateInputExample', [])
            .controller('DateController', ['$scope', function($scope) {
              $scope.example = {
                value: new Date(2013, 9, 22)
              };
            }]);
       </script>
       <form name="myForm" ng-controller="DateController as dateCtrl">
          <label for="exampleInput">Pick a date in 2013:</label>
          <input type="date" id="exampleInput" name="input" ng-model="example.value"
              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
          <div role="alert">
            <span class="error" ng-show="myForm.input.$error.required">
                Required!</span>
            <span class="error" ng-show="myForm.input.$error.date">
                Not a valid date!</span>
           </div>
           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
       </form>
     </file>
     <file name="protractor.js" type="protractor">
        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
        var valid = element(by.binding('myForm.input.$valid'));

        // currently protractor/webdriver does not support
        // sending keys to all known HTML5 input controls
        // for various browsers (see https://github.com/angular/protractor/issues/562).
        function setInput(val) {
          // set the value of the element and force validation.
          var scr = "var ipt = document.getElementById('exampleInput'); " +
          "ipt.value = '" + val + "';" +
          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
          browser.executeScript(scr);
        }

        it('should initialize to model', function() {
          expect(value.getText()).toContain('2013-10-22');
          expect(valid.getText()).toContain('myForm.input.$valid = true');
        });

        it('should be invalid if empty', function() {
          setInput('');
          expect(value.getText()).toEqual('value =');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });

        it('should be invalid if over max', function() {
          setInput('2015-01-01');
          expect(value.getText()).toContain('');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });
     </file>
     </example>
     */'date':createDateInputType('date',DATE_REGEXP,createDateParser(DATE_REGEXP,['yyyy','MM','dd']),'yyyy-MM-dd'),/**
    * @ngdoc input
    * @name input[datetime-local]
    *
    * @description
    * Input with datetime validation and transformation. In browsers that do not yet support
    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
    *
    * The model must always be a Date object, otherwise Angular will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * @param {string} ngModel Assignable angular expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
    *   Note that `min` will also add native HTML5 constraint validation.
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
    *   Note that `max` will also add native HTML5 constraint validation.
    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange Angular expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="datetimelocal-input-directive" module="dateExample">
    <file name="index.html">
      <script>
        angular.module('dateExample', [])
          .controller('DateController', ['$scope', function($scope) {
            $scope.example = {
              value: new Date(2010, 11, 28, 14, 57)
            };
          }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        <label for="exampleInput">Pick a date between in 2013:</label>
        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
        <div role="alert">
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.datetimelocal">
              Not a valid date!</span>
        </div>
        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2010-12-28T14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01-01T23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */'datetime-local':createDateInputType('datetimelocal',DATETIMELOCAL_REGEXP,createDateParser(DATETIMELOCAL_REGEXP,['yyyy','MM','dd','HH','mm','ss','sss']),'yyyy-MM-ddTHH:mm:ss.sss'),/**
   * @ngdoc input
   * @name input[time]
   *
   * @description
   * Input with time validation and transformation. In browsers that do not yet support
   * the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
   *
   * The model must always be a Date object, otherwise Angular will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
   *   native HTML5 constraint validation.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
   *   native HTML5 constraint validation.
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="time-input-directive" module="timeExample">
   <file name="index.html">
     <script>
      angular.module('timeExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(1970, 0, 1, 14, 57, 0)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
        <label for="exampleInput">Pick a time between 8am and 5pm:</label>
        <input type="time" id="exampleInput" name="input" ng-model="example.value"
            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
        <div role="alert">
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.time">
              Not a valid date!</span>
        </div>
        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */'time':createDateInputType('time',TIME_REGEXP,createDateParser(TIME_REGEXP,['HH','mm','ss','sss']),'HH:mm:ss.sss'),/**
    * @ngdoc input
    * @name input[week]
    *
    * @description
    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * week format (yyyy-W##), for example: `2013-W02`.
    *
    * The model must always be a Date object, otherwise Angular will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * @param {string} ngModel Assignable angular expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
    *   native HTML5 constraint validation.
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
    *   native HTML5 constraint validation.
    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange Angular expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="week-input-directive" module="weekExample">
    <file name="index.html">
      <script>
      angular.module('weekExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 0, 3)
          };
        }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        <label>Pick a date between in 2013:
          <input id="exampleInput" type="week" name="input" ng-model="example.value"
                 placeholder="YYYY-W##" min="2012-W32"
                 max="2013-W52" required />
        </label>
        <div role="alert">
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.week">
              Not a valid date!</span>
        </div>
        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-Www"'));
      var valid = element(by.binding('myForm.input.$valid'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-W01');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-W01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */'week':createDateInputType('week',WEEK_REGEXP,weekParser,'yyyy-Www'),/**
   * @ngdoc input
   * @name input[month]
   *
   * @description
   * Input with month validation and transformation. In browsers that do not yet support
   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * month format (yyyy-MM), for example: `2009-01`.
   *
   * The model must always be a Date object, otherwise Angular will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   * If the model is not set to the first of the month, the next view to model update will set it
   * to the first of the month.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
   *   native HTML5 constraint validation.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
   *   native HTML5 constraint validation.
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.

   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="month-input-directive" module="monthExample">
   <file name="index.html">
     <script>
      angular.module('monthExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 9, 1)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
       <label for="exampleInput">Pick a month in 2013:</label>
       <input id="exampleInput" type="month" name="input" ng-model="example.value"
          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
       <div role="alert">
         <span class="error" ng-show="myForm.input.$error.required">
            Required!</span>
         <span class="error" ng-show="myForm.input.$error.month">
            Not a valid month!</span>
       </div>
       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM"'));
      var valid = element(by.binding('myForm.input.$valid'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-10');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */'month':createDateInputType('month',MONTH_REGEXP,createDateParser(MONTH_REGEXP,['yyyy','MM']),'yyyy-MM'),/**
   * @ngdoc input
   * @name input[number]
   *
   * @description
   * Text input with number validation and transformation. Sets the `number` validation
   * error if not a valid number.
   *
   * <div class="alert alert-warning">
   * The model must always be of type `number` otherwise Angular will throw an error.
   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
   * error docs for more information and an example of how to convert your model if necessary.
   * </div>
   *
   * ## Issues with HTML5 constraint validation
   *
   * In browsers that follow the
   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
   * If a non-number is entered in the input, the browser will report the value as an empty string,
   * which means the view / model values in `ngModel` and subsequently the scope value
   * will also be an empty string.
   *
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   *    Can be interpolated.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   *    Can be interpolated.
   * @param {string=} ngMin Like `min`, sets the `min` validation error key if the value entered is less than `ngMin`,
   *    but does not trigger HTML5 native validation. Takes an expression.
   * @param {string=} ngMax Like `max`, sets the `max` validation error key if the value entered is greater than `ngMax`,
   *    but does not trigger HTML5 native validation. Takes an expression.
   * @param {string=} step Sets the `step` validation error key if the value entered does not fit the `step` constraint.
   *    Can be interpolated.
   * @param {string=} ngStep Like `step`, sets the `step` validation error key if the value entered does not fit the `ngStep` constraint,
   *    but does not trigger HTML5 native validation. Takes an expression.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="number-input-directive" module="numberExample">
        <file name="index.html">
         <script>
           angular.module('numberExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 value: 12
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>Number:
             <input type="number" name="input" ng-model="example.value"
                    min="0" max="99" required>
          </label>
           <div role="alert">
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.number">
               Not valid number!</span>
           </div>
           <tt>value = {{example.value}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var value = element(by.binding('example.value'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.value'));

          it('should initialize to model', function() {
            expect(value.getText()).toContain('12');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if over max', function() {
            input.clear();
            input.sendKeys('123');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */'number':numberInputType,/**
   * @ngdoc input
   * @name input[url]
   *
   * @description
   * Text input with URL validation. Sets the `url` validation error key if the content is not a
   * valid URL.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
   * the built-in validators (see the {@link guide/forms Forms guide})
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="url-input-directive" module="urlExample">
        <file name="index.html">
         <script>
           angular.module('urlExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.url = {
                 text: 'http://google.com'
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>URL:
             <input type="url" name="input" ng-model="url.text" required>
           <label>
           <div role="alert">
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.url">
               Not valid url!</span>
           </div>
           <tt>text = {{url.text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('url.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('url.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('http://google.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not url', function() {
            input.clear();
            input.sendKeys('box');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */'url':urlInputType,/**
   * @ngdoc input
   * @name input[email]
   *
   * @description
   * Text input with email validation. Sets the `email` validation error key if not a valid email
   * address.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="email-input-directive" module="emailExample">
        <file name="index.html">
         <script>
           angular.module('emailExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.email = {
                 text: 'me@example.com'
               };
             }]);
         </script>
           <form name="myForm" ng-controller="ExampleController">
             <label>Email:
               <input type="email" name="input" ng-model="email.text" required>
             </label>
             <div role="alert">
               <span class="error" ng-show="myForm.input.$error.required">
                 Required!</span>
               <span class="error" ng-show="myForm.input.$error.email">
                 Not valid email!</span>
             </div>
             <tt>text = {{email.text}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
           </form>
         </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('email.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('email.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('me@example.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not email', function() {
            input.clear();
            input.sendKeys('xxx');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */'email':emailInputType,/**
   * @ngdoc input
   * @name input[radio]
   *
   * @description
   * HTML radio button.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string} value The value to which the `ngModel` expression should be set when selected.
   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
   *    is selected. Should be used instead of the `value` attribute if you need
   *    a non-string `ngModel` (`boolean`, `array`, ...).
   *
   * @example
      <example name="radio-input-directive" module="radioExample">
        <file name="index.html">
         <script>
           angular.module('radioExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.color = {
                 name: 'blue'
               };
               $scope.specialValue = {
                 "id": "12345",
                 "value": "green"
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>
             <input type="radio" ng-model="color.name" value="red">
             Red
           </label><br/>
           <label>
             <input type="radio" ng-model="color.name" ng-value="specialValue">
             Green
           </label><br/>
           <label>
             <input type="radio" ng-model="color.name" value="blue">
             Blue
           </label><br/>
           <tt>color = {{color.name | json}}</tt><br/>
          </form>
          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var inputs = element.all(by.model('color.name'));
            var color = element(by.binding('color.name'));

            expect(color.getText()).toContain('blue');

            inputs.get(0).click();
            expect(color.getText()).toContain('red');

            inputs.get(1).click();
            expect(color.getText()).toContain('green');
          });
        </file>
      </example>
   */'radio':radioInputType,/**
   * @ngdoc input
   * @name input[range]
   *
   * @description
   * Native range input with validation and transformation.
   *
   * The model for the range input must always be a `Number`.
   *
   * IE9 and other browsers that do not support the `range` type fall back
   * to a text input without any default values for `min`, `max` and `step`. Model binding,
   * validation and number parsing are nevertheless supported.
   *
   * Browsers that support range (latest Chrome, Safari, Firefox, Edge) treat `input[range]`
   * in a way that never allows the input to hold an invalid value. That means:
   * - any non-numerical value is set to `(max + min) / 2`.
   * - any numerical value that is less than the current min val, or greater than the current max val
   * is set to the min / max val respectively.
   * - additionally, the current `step` is respected, so the nearest value that satisfies a step
   * is used.
   *
   * See the [HTML Spec on input[type=range]](https://www.w3.org/TR/html5/forms.html#range-state-(type=range))
   * for more info.
   *
   * This has the following consequences for Angular:
   *
   * Since the element value should always reflect the current model value, a range input
   * will set the bound ngModel expression to the value that the browser has set for the
   * input element. For example, in the following input `<input type="range" ng-model="model.value">`,
   * if the application sets `model.value = null`, the browser will set the input to `'50'`.
   * Angular will then set the model to `50`, to prevent input and model value being out of sync.
   *
   * That means the model for range will immediately be set to `50` after `ngModel` has been
   * initialized. It also means a range input can never have the required error.
   *
   * This does not only affect changes to the model value, but also to the values of the `min`,
   * `max`, and `step` attributes. When these change in a way that will cause the browser to modify
   * the input value, Angular will also update the model value.
   *
   * Automatic value adjustment also means that a range input element can never have the `required`,
   * `min`, or `max` errors.
   *
   * However, `step` is currently only fully implemented by Firefox. Other browsers have problems
   * when the step value changes dynamically - they do not adjust the element value correctly, but
   * instead may set the `stepMismatch` error. If that's the case, the Angular will set the `step`
   * error on the input, and set the model to `undefined`.
   *
   * Note that `input[range]` is not compatible with`ngMax`, `ngMin`, and `ngStep`, because they do
   * not set the `min` and `max` attributes, which means that the browser won't automatically adjust
   * the input value based on their values, and will always assume min = 0, max = 100, and step = 1.
   *
   * @param {string}  ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation to ensure that the value entered is greater
   *                  than `min`. Can be interpolated.
   * @param {string=} max Sets the `max` validation to ensure that the value entered is less than `max`.
   *                  Can be interpolated.
   * @param {string=} step Sets the `step` validation to ensure that the value entered matches the `step`
   *                  Can be interpolated.
   * @param {string=} ngChange Angular expression to be executed when the ngModel value changes due
   *                  to user interaction with the input element.
   * @param {expression=} ngChecked If the expression is truthy, then the `checked` attribute will be set on the
   *                      element. **Note** : `ngChecked` should not be used alongside `ngModel`.
   *                      Checkout {@link ng.directive:ngChecked ngChecked} for usage.
   *
   * @example
      <example name="range-input-directive" module="rangeExample">
        <file name="index.html">
          <script>
            angular.module('rangeExample', [])
              .controller('ExampleController', ['$scope', function($scope) {
                $scope.value = 75;
                $scope.min = 10;
                $scope.max = 90;
              }]);
          </script>
          <form name="myForm" ng-controller="ExampleController">

            Model as range: <input type="range" name="range" ng-model="value" min="{{min}}"  max="{{max}}">
            <hr>
            Model as number: <input type="number" ng-model="value"><br>
            Min: <input type="number" ng-model="min"><br>
            Max: <input type="number" ng-model="max"><br>
            value = <code>{{value}}</code><br/>
            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>
            myForm.range.$error = <code>{{myForm.range.$error}}</code>
          </form>
        </file>
      </example>

   * ## Range Input with ngMin & ngMax attributes

   * @example
      <example name="range-input-directive-ng" module="rangeExample">
        <file name="index.html">
          <script>
            angular.module('rangeExample', [])
              .controller('ExampleController', ['$scope', function($scope) {
                $scope.value = 75;
                $scope.min = 10;
                $scope.max = 90;
              }]);
          </script>
          <form name="myForm" ng-controller="ExampleController">
            Model as range: <input type="range" name="range" ng-model="value" ng-min="min" ng-max="max">
            <hr>
            Model as number: <input type="number" ng-model="value"><br>
            Min: <input type="number" ng-model="min"><br>
            Max: <input type="number" ng-model="max"><br>
            value = <code>{{value}}</code><br/>
            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>
            myForm.range.$error = <code>{{myForm.range.$error}}</code>
          </form>
        </file>
      </example>

   */'range':rangeInputType,/**
   * @ngdoc input
   * @name input[checkbox]
   *
   * @description
   * HTML checkbox.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="checkbox-input-directive" module="checkboxExample">
        <file name="index.html">
         <script>
           angular.module('checkboxExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.checkboxModel = {
                value1 : true,
                value2 : 'YES'
              };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>Value1:
             <input type="checkbox" ng-model="checkboxModel.value1">
           </label><br/>
           <label>Value2:
             <input type="checkbox" ng-model="checkboxModel.value2"
                    ng-true-value="'YES'" ng-false-value="'NO'">
            </label><br/>
           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var value1 = element(by.binding('checkboxModel.value1'));
            var value2 = element(by.binding('checkboxModel.value2'));

            expect(value1.getText()).toContain('true');
            expect(value2.getText()).toContain('YES');

            element(by.model('checkboxModel.value1')).click();
            element(by.model('checkboxModel.value2')).click();

            expect(value1.getText()).toContain('false');
            expect(value2.getText()).toContain('NO');
          });
        </file>
      </example>
   */'checkbox':checkboxInputType,'hidden':noop,'button':noop,'submit':noop,'reset':noop,'file':noop};function stringBasedInputType(ctrl){ctrl.$formatters.push(function(value){return ctrl.$isEmpty(value)?value:value.toString();});}function textInputType(scope,element,attr,ctrl,$sniffer,$browser){baseInputType(scope,element,attr,ctrl,$sniffer,$browser);stringBasedInputType(ctrl);}function baseInputType(scope,element,attr,ctrl,$sniffer,$browser){var type=lowercase(element[0].type);// In composition mode, users are still inputting intermediate text buffer,
// hold the listener until composition is done.
// More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
if(!$sniffer.android){var composing=false;element.on('compositionstart',function(){composing=true;});element.on('compositionend',function(){composing=false;listener();});}var timeout;var listener=function(ev){if(timeout){$browser.defer.cancel(timeout);timeout=null;}if(composing)return;var value=element.val(),event=ev&&ev.type;// By default we will trim the value
// If the attribute ng-trim exists we will avoid trimming
// If input type is 'password', the value is never trimmed
if(type!=='password'&&(!attr.ngTrim||attr.ngTrim!=='false')){value=trim(value);}// If a control is suffering from bad input (due to native validators), browsers discard its
// value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
// control's value is the same empty value twice in a row.
if(ctrl.$viewValue!==value||value===''&&ctrl.$$hasNativeValidators){ctrl.$setViewValue(value,event);}};// if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
// input event on backspace, delete or cut
if($sniffer.hasEvent('input')){element.on('input',listener);}else{var deferListener=function(ev,input,origValue){if(!timeout){timeout=$browser.defer(function(){timeout=null;if(!input||input.value!==origValue){listener(ev);}});}};element.on('keydown',/** @this */function(event){var key=event.keyCode;// ignore
//    command            modifiers                   arrows
if(key===91||15<key&&key<19||37<=key&&key<=40)return;deferListener(event,this,this.value);});// if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
if($sniffer.hasEvent('paste')){element.on('paste cut',deferListener);}}// if user paste into input using mouse on older browser
// or form autocomplete on newer browser, we need "change" event to catch it
element.on('change',listener);// Some native input types (date-family) have the ability to change validity without
// firing any input/change events.
// For these event types, when native validators are present and the browser supports the type,
// check for validity changes on various DOM events.
if(PARTIAL_VALIDATION_TYPES[type]&&ctrl.$$hasNativeValidators&&type===attr.type){element.on(PARTIAL_VALIDATION_EVENTS,/** @this */function(ev){if(!timeout){var validity=this[VALIDITY_STATE_PROPERTY];var origBadInput=validity.badInput;var origTypeMismatch=validity.typeMismatch;timeout=$browser.defer(function(){timeout=null;if(validity.badInput!==origBadInput||validity.typeMismatch!==origTypeMismatch){listener(ev);}});}});}ctrl.$render=function(){// Workaround for Firefox validation #12102.
var value=ctrl.$isEmpty(ctrl.$viewValue)?'':ctrl.$viewValue;if(element.val()!==value){element.val(value);}};}function weekParser(isoWeek,existingDate){if(isDate(isoWeek)){return isoWeek;}if(isString(isoWeek)){WEEK_REGEXP.lastIndex=0;var parts=WEEK_REGEXP.exec(isoWeek);if(parts){var year=+parts[1],week=+parts[2],hours=0,minutes=0,seconds=0,milliseconds=0,firstThurs=getFirstThursdayOfYear(year),addDays=(week-1)*7;if(existingDate){hours=existingDate.getHours();minutes=existingDate.getMinutes();seconds=existingDate.getSeconds();milliseconds=existingDate.getMilliseconds();}return new Date(year,0,firstThurs.getDate()+addDays,hours,minutes,seconds,milliseconds);}}return NaN;}function createDateParser(regexp,mapping){return function(iso,date){var parts,map;if(isDate(iso)){return iso;}if(isString(iso)){// When a date is JSON'ified to wraps itself inside of an extra
// set of double quotes. This makes the date parsing code unable
// to match the date string and parse it as a date.
if(iso.charAt(0)==='"'&&iso.charAt(iso.length-1)==='"'){iso=iso.substring(1,iso.length-1);}if(ISO_DATE_REGEXP.test(iso)){return new Date(iso);}regexp.lastIndex=0;parts=regexp.exec(iso);if(parts){parts.shift();if(date){map={yyyy:date.getFullYear(),MM:date.getMonth()+1,dd:date.getDate(),HH:date.getHours(),mm:date.getMinutes(),ss:date.getSeconds(),sss:date.getMilliseconds()/1000};}else{map={yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0};}forEach(parts,function(part,index){if(index<mapping.length){map[mapping[index]]=+part;}});return new Date(map.yyyy,map.MM-1,map.dd,map.HH,map.mm,map.ss||0,map.sss*1000||0);}}return NaN;};}function createDateInputType(type,regexp,parseDate,format){return function dynamicDateInputType(scope,element,attr,ctrl,$sniffer,$browser,$filter){badInputChecker(scope,element,attr,ctrl);baseInputType(scope,element,attr,ctrl,$sniffer,$browser);var timezone=ctrl&&ctrl.$options.getOption('timezone');var previousDate;ctrl.$$parserName=type;ctrl.$parsers.push(function(value){if(ctrl.$isEmpty(value))return null;if(regexp.test(value)){// Note: We cannot read ctrl.$modelValue, as there might be a different
// parser/formatter in the processing chain so that the model
// contains some different data format!
var parsedDate=parseDate(value,previousDate);if(timezone){parsedDate=convertTimezoneToLocal(parsedDate,timezone);}return parsedDate;}return undefined;});ctrl.$formatters.push(function(value){if(value&&!isDate(value)){throw ngModelMinErr('datefmt','Expected `{0}` to be a date',value);}if(isValidDate(value)){previousDate=value;if(previousDate&&timezone){previousDate=convertTimezoneToLocal(previousDate,timezone,true);}return $filter('date')(value,format,timezone);}else{previousDate=null;return'';}});if(isDefined(attr.min)||attr.ngMin){var minVal;ctrl.$validators.min=function(value){return!isValidDate(value)||isUndefined(minVal)||parseDate(value)>=minVal;};attr.$observe('min',function(val){minVal=parseObservedDateValue(val);ctrl.$validate();});}if(isDefined(attr.max)||attr.ngMax){var maxVal;ctrl.$validators.max=function(value){return!isValidDate(value)||isUndefined(maxVal)||parseDate(value)<=maxVal;};attr.$observe('max',function(val){maxVal=parseObservedDateValue(val);ctrl.$validate();});}function isValidDate(value){// Invalid Date: getTime() returns NaN
return value&&!(value.getTime&&value.getTime()!==value.getTime());}function parseObservedDateValue(val){return isDefined(val)&&!isDate(val)?parseDate(val)||undefined:val;}};}function badInputChecker(scope,element,attr,ctrl){var node=element[0];var nativeValidation=ctrl.$$hasNativeValidators=isObject(node.validity);if(nativeValidation){ctrl.$parsers.push(function(value){var validity=element.prop(VALIDITY_STATE_PROPERTY)||{};return validity.badInput||validity.typeMismatch?undefined:value;});}}function numberFormatterParser(ctrl){ctrl.$$parserName='number';ctrl.$parsers.push(function(value){if(ctrl.$isEmpty(value))return null;if(NUMBER_REGEXP.test(value))return parseFloat(value);return undefined;});ctrl.$formatters.push(function(value){if(!ctrl.$isEmpty(value)){if(!isNumber(value)){throw ngModelMinErr('numfmt','Expected `{0}` to be a number',value);}value=value.toString();}return value;});}function parseNumberAttrVal(val){if(isDefined(val)&&!isNumber(val)){val=parseFloat(val);}return!isNumberNaN(val)?val:undefined;}function isNumberInteger(num){// See http://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript#14794066
// (minus the assumption that `num` is a number)
// eslint-disable-next-line no-bitwise
return(num|0)===num;}function countDecimals(num){var numString=num.toString();var decimalSymbolIndex=numString.indexOf('.');if(decimalSymbolIndex===-1){if(-1<num&&num<1){// It may be in the exponential notation format (`1e-X`)
var match=/e-(\d+)$/.exec(numString);if(match){return Number(match[1]);}}return 0;}return numString.length-decimalSymbolIndex-1;}function isValidForStep(viewValue,stepBase,step){// At this point `stepBase` and `step` are expected to be non-NaN values
// and `viewValue` is expected to be a valid stringified number.
var value=Number(viewValue);var isNonIntegerValue=!isNumberInteger(value);var isNonIntegerStepBase=!isNumberInteger(stepBase);var isNonIntegerStep=!isNumberInteger(step);// Due to limitations in Floating Point Arithmetic (e.g. `0.3 - 0.2 !== 0.1` or
// `0.5 % 0.1 !== 0`), we need to convert all numbers to integers.
if(isNonIntegerValue||isNonIntegerStepBase||isNonIntegerStep){var valueDecimals=isNonIntegerValue?countDecimals(value):0;var stepBaseDecimals=isNonIntegerStepBase?countDecimals(stepBase):0;var stepDecimals=isNonIntegerStep?countDecimals(step):0;var decimalCount=Math.max(valueDecimals,stepBaseDecimals,stepDecimals);var multiplier=Math.pow(10,decimalCount);value=value*multiplier;stepBase=stepBase*multiplier;step=step*multiplier;if(isNonIntegerValue)value=Math.round(value);if(isNonIntegerStepBase)stepBase=Math.round(stepBase);if(isNonIntegerStep)step=Math.round(step);}return(value-stepBase)%step===0;}function numberInputType(scope,element,attr,ctrl,$sniffer,$browser){badInputChecker(scope,element,attr,ctrl);numberFormatterParser(ctrl);baseInputType(scope,element,attr,ctrl,$sniffer,$browser);var minVal;var maxVal;if(isDefined(attr.min)||attr.ngMin){ctrl.$validators.min=function(value){return ctrl.$isEmpty(value)||isUndefined(minVal)||value>=minVal;};attr.$observe('min',function(val){minVal=parseNumberAttrVal(val);// TODO(matsko): implement validateLater to reduce number of validations
ctrl.$validate();});}if(isDefined(attr.max)||attr.ngMax){ctrl.$validators.max=function(value){return ctrl.$isEmpty(value)||isUndefined(maxVal)||value<=maxVal;};attr.$observe('max',function(val){maxVal=parseNumberAttrVal(val);// TODO(matsko): implement validateLater to reduce number of validations
ctrl.$validate();});}if(isDefined(attr.step)||attr.ngStep){var stepVal;ctrl.$validators.step=function(modelValue,viewValue){return ctrl.$isEmpty(viewValue)||isUndefined(stepVal)||isValidForStep(viewValue,minVal||0,stepVal);};attr.$observe('step',function(val){stepVal=parseNumberAttrVal(val);// TODO(matsko): implement validateLater to reduce number of validations
ctrl.$validate();});}}function rangeInputType(scope,element,attr,ctrl,$sniffer,$browser){badInputChecker(scope,element,attr,ctrl);numberFormatterParser(ctrl);baseInputType(scope,element,attr,ctrl,$sniffer,$browser);var supportsRange=ctrl.$$hasNativeValidators&&element[0].type==='range',minVal=supportsRange?0:undefined,maxVal=supportsRange?100:undefined,stepVal=supportsRange?1:undefined,validity=element[0].validity,hasMinAttr=isDefined(attr.min),hasMaxAttr=isDefined(attr.max),hasStepAttr=isDefined(attr.step);var originalRender=ctrl.$render;ctrl.$render=supportsRange&&isDefined(validity.rangeUnderflow)&&isDefined(validity.rangeOverflow)?//Browsers that implement range will set these values automatically, but reading the adjusted values after
//$render would cause the min / max validators to be applied with the wrong value
function rangeRender(){originalRender();ctrl.$setViewValue(element.val());}:originalRender;if(hasMinAttr){ctrl.$validators.min=supportsRange?// Since all browsers set the input to a valid value, we don't need to check validity
function noopMinValidator(){return true;}:// non-support browsers validate the min val
function minValidator(modelValue,viewValue){return ctrl.$isEmpty(viewValue)||isUndefined(minVal)||viewValue>=minVal;};setInitialValueAndObserver('min',minChange);}if(hasMaxAttr){ctrl.$validators.max=supportsRange?// Since all browsers set the input to a valid value, we don't need to check validity
function noopMaxValidator(){return true;}:// non-support browsers validate the max val
function maxValidator(modelValue,viewValue){return ctrl.$isEmpty(viewValue)||isUndefined(maxVal)||viewValue<=maxVal;};setInitialValueAndObserver('max',maxChange);}if(hasStepAttr){ctrl.$validators.step=supportsRange?function nativeStepValidator(){// Currently, only FF implements the spec on step change correctly (i.e. adjusting the
// input element value to a valid value). It's possible that other browsers set the stepMismatch
// validity error instead, so we can at least report an error in that case.
return!validity.stepMismatch;}:// ngStep doesn't set the setp attr, so the browser doesn't adjust the input value as setting step would
function stepValidator(modelValue,viewValue){return ctrl.$isEmpty(viewValue)||isUndefined(stepVal)||isValidForStep(viewValue,minVal||0,stepVal);};setInitialValueAndObserver('step',stepChange);}function setInitialValueAndObserver(htmlAttrName,changeFn){// interpolated attributes set the attribute value only after a digest, but we need the
// attribute value when the input is first rendered, so that the browser can adjust the
// input value based on the min/max value
element.attr(htmlAttrName,attr[htmlAttrName]);attr.$observe(htmlAttrName,changeFn);}function minChange(val){minVal=parseNumberAttrVal(val);// ignore changes before model is initialized
if(isNumberNaN(ctrl.$modelValue)){return;}if(supportsRange){var elVal=element.val();// IE11 doesn't set the el val correctly if the minVal is greater than the element value
if(minVal>elVal){elVal=minVal;element.val(elVal);}ctrl.$setViewValue(elVal);}else{// TODO(matsko): implement validateLater to reduce number of validations
ctrl.$validate();}}function maxChange(val){maxVal=parseNumberAttrVal(val);// ignore changes before model is initialized
if(isNumberNaN(ctrl.$modelValue)){return;}if(supportsRange){var elVal=element.val();// IE11 doesn't set the el val correctly if the maxVal is less than the element value
if(maxVal<elVal){element.val(maxVal);// IE11 and Chrome don't set the value to the minVal when max < min
elVal=maxVal<minVal?minVal:maxVal;}ctrl.$setViewValue(elVal);}else{// TODO(matsko): implement validateLater to reduce number of validations
ctrl.$validate();}}function stepChange(val){stepVal=parseNumberAttrVal(val);// ignore changes before model is initialized
if(isNumberNaN(ctrl.$modelValue)){return;}// Some browsers don't adjust the input value correctly, but set the stepMismatch error
if(supportsRange&&ctrl.$viewValue!==element.val()){ctrl.$setViewValue(element.val());}else{// TODO(matsko): implement validateLater to reduce number of validations
ctrl.$validate();}}}function urlInputType(scope,element,attr,ctrl,$sniffer,$browser){// Note: no badInputChecker here by purpose as `url` is only a validation
// in browsers, i.e. we can always read out input.value even if it is not valid!
baseInputType(scope,element,attr,ctrl,$sniffer,$browser);stringBasedInputType(ctrl);ctrl.$$parserName='url';ctrl.$validators.url=function(modelValue,viewValue){var value=modelValue||viewValue;return ctrl.$isEmpty(value)||URL_REGEXP.test(value);};}function emailInputType(scope,element,attr,ctrl,$sniffer,$browser){// Note: no badInputChecker here by purpose as `url` is only a validation
// in browsers, i.e. we can always read out input.value even if it is not valid!
baseInputType(scope,element,attr,ctrl,$sniffer,$browser);stringBasedInputType(ctrl);ctrl.$$parserName='email';ctrl.$validators.email=function(modelValue,viewValue){var value=modelValue||viewValue;return ctrl.$isEmpty(value)||EMAIL_REGEXP.test(value);};}function radioInputType(scope,element,attr,ctrl){var doTrim=!attr.ngTrim||trim(attr.ngTrim)!=='false';// make the name unique, if not defined
if(isUndefined(attr.name)){element.attr('name',nextUid());}var listener=function(ev){var value;if(element[0].checked){value=attr.value;if(doTrim){value=trim(value);}ctrl.$setViewValue(value,ev&&ev.type);}};element.on('click',listener);ctrl.$render=function(){var value=attr.value;if(doTrim){value=trim(value);}element[0].checked=value===ctrl.$viewValue;};attr.$observe('value',ctrl.$render);}function parseConstantExpr($parse,context,name,expression,fallback){var parseFn;if(isDefined(expression)){parseFn=$parse(expression);if(!parseFn.constant){throw ngModelMinErr('constexpr','Expected constant expression for `{0}`, but saw '+'`{1}`.',name,expression);}return parseFn(context);}return fallback;}function checkboxInputType(scope,element,attr,ctrl,$sniffer,$browser,$filter,$parse){var trueValue=parseConstantExpr($parse,scope,'ngTrueValue',attr.ngTrueValue,true);var falseValue=parseConstantExpr($parse,scope,'ngFalseValue',attr.ngFalseValue,false);var listener=function(ev){ctrl.$setViewValue(element[0].checked,ev&&ev.type);};element.on('click',listener);ctrl.$render=function(){element[0].checked=ctrl.$viewValue;};// Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
// This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
// it to a boolean.
ctrl.$isEmpty=function(value){return value===false;};ctrl.$formatters.push(function(value){return equals(value,trueValue);});ctrl.$parsers.push(function(value){return value?trueValue:falseValue;});}/**
 * @ngdoc directive
 * @name textarea
 * @restrict E
 *
 * @description
 * HTML textarea element control with angular data-binding. The data-binding and validation
 * properties of this element are exactly the same as those of the
 * {@link ng.directive:input input element}.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
 *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
 *    If the expression evaluates to a RegExp object, then this is used directly.
 *    If the expression evaluates to a string, then it will be converted to a RegExp
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
 *    `new RegExp('^abc$')`.<br />
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
 *    start at the index of the last search's match, thus not taking the whole input value into
 *    account.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 *
 * @knownIssue
 *
 * When specifying the `placeholder` attribute of `<textarea>`, Internet Explorer will temporarily
 * insert the placeholder value as the textarea's content. If the placeholder value contains
 * interpolation (`{{ ... }}`), an error will be logged in the console when Angular tries to update
 * the value of the by-then-removed text node. This doesn't affect the functionality of the
 * textarea, but can be undesirable.
 *
 * You can work around this Internet Explorer issue by using `ng-attr-placeholder` instead of
 * `placeholder` on textareas, whenever you need interpolation in the placeholder value. You can
 * find more details on `ngAttr` in the
 * [Interpolation](guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes) section of the
 * Developer Guide.
 *//**
 * @ngdoc directive
 * @name input
 * @restrict E
 *
 * @description
 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
 * input state control, and validation.
 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
 *
 * <div class="alert alert-warning">
 * **Note:** Not every feature offered is available for all input types.
 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
 * </div>
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {boolean=} ngRequired Sets `required` attribute if set to true
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
 *    value does not match a RegExp found by evaluating the Angular expression given in the attribute value.
 *    If the expression evaluates to a RegExp object, then this is used directly.
 *    If the expression evaluates to a string, then it will be converted to a RegExp
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
 *    `new RegExp('^abc$')`.<br />
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
 *    start at the index of the last search's match, thus not taking the whole input value into
 *    account.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 *    This parameter is ignored for input[type=password] controls, which will never trim the
 *    input.
 *
 * @example
    <example name="input-directive" module="inputExample">
      <file name="index.html">
       <script>
          angular.module('inputExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.user = {name: 'guest', last: 'visitor'};
            }]);
       </script>
       <div ng-controller="ExampleController">
         <form name="myForm">
           <label>
              User name:
              <input type="text" name="userName" ng-model="user.name" required>
           </label>
           <div role="alert">
             <span class="error" ng-show="myForm.userName.$error.required">
              Required!</span>
           </div>
           <label>
              Last name:
              <input type="text" name="lastName" ng-model="user.last"
              ng-minlength="3" ng-maxlength="10">
           </label>
           <div role="alert">
             <span class="error" ng-show="myForm.lastName.$error.minlength">
               Too short!</span>
             <span class="error" ng-show="myForm.lastName.$error.maxlength">
               Too long!</span>
           </div>
         </form>
         <hr>
         <tt>user = {{user}}</tt><br/>
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
       </div>
      </file>
      <file name="protractor.js" type="protractor">
        var user = element(by.exactBinding('user'));
        var userNameValid = element(by.binding('myForm.userName.$valid'));
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
        var lastNameError = element(by.binding('myForm.lastName.$error'));
        var formValid = element(by.binding('myForm.$valid'));
        var userNameInput = element(by.model('user.name'));
        var userLastInput = element(by.model('user.last'));

        it('should initialize to model', function() {
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
          expect(userNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if empty when required', function() {
          userNameInput.clear();
          userNameInput.sendKeys('');

          expect(user.getText()).toContain('{"last":"visitor"}');
          expect(userNameValid.getText()).toContain('false');
          expect(formValid.getText()).toContain('false');
        });

        it('should be valid if empty when min length is set', function() {
          userLastInput.clear();
          userLastInput.sendKeys('');

          expect(user.getText()).toContain('{"name":"guest","last":""}');
          expect(lastNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if less than required min length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('xx');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('minlength');
          expect(formValid.getText()).toContain('false');
        });

        it('should be invalid if longer than max length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('some ridiculously long name');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('maxlength');
          expect(formValid.getText()).toContain('false');
        });
      </file>
    </example>
 */var inputDirective=['$browser','$sniffer','$filter','$parse',function($browser,$sniffer,$filter,$parse){return{restrict:'E',require:['?ngModel'],link:{pre:function(scope,element,attr,ctrls){if(ctrls[0]){(inputType[lowercase(attr.type)]||inputType.text)(scope,element,attr,ctrls[0],$sniffer,$browser,$filter,$parse);}}}};}];var CONSTANT_VALUE_REGEXP=/^(true|false|\d+)$/;/**
 * @ngdoc directive
 * @name ngValue
 *
 * @description
 * Binds the given expression to the value of the element.
 *
 * It is mainly used on {@link input[radio] `input[radio]`} and option elements,
 * so that when the element is selected, the {@link ngModel `ngModel`} of that element (or its
 * {@link select `select`} parent element) is set to the bound value. It is especially useful
 * for dynamically generated lists using {@link ngRepeat `ngRepeat`}, as shown below.
 *
 * It can also be used to achieve one-way binding of a given expression to an input element
 * such as an `input[text]` or a `textarea`, when that element does not use ngModel.
 *
 * @element input
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
 * and `value` property of the element.
 *
 * @example
    <example name="ngValue-directive" module="valueExample">
      <file name="index.html">
       <script>
          angular.module('valueExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.names = ['pizza', 'unicorns', 'robots'];
              $scope.my = { favorite: 'unicorns' };
            }]);
       </script>
        <form ng-controller="ExampleController">
          <h2>Which is your favorite?</h2>
            <label ng-repeat="name in names" for="{{name}}">
              {{name}}
              <input type="radio"
                     ng-model="my.favorite"
                     ng-value="name"
                     id="{{name}}"
                     name="favorite">
            </label>
          <div>You chose {{my.favorite}}</div>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        var favorite = element(by.binding('my.favorite'));

        it('should initialize to model', function() {
          expect(favorite.getText()).toContain('unicorns');
        });
        it('should bind the values to the inputs', function() {
          element.all(by.model('my.favorite')).get(0).click();
          expect(favorite.getText()).toContain('pizza');
        });
      </file>
    </example>
 */var ngValueDirective=function(){/**
   *  inputs use the value attribute as their default value if the value property is not set.
   *  Once the value property has been set (by adding input), it will not react to changes to
   *  the value attribute anymore. Setting both attribute and property fixes this behavior, and
   *  makes it possible to use ngValue as a sort of one-way bind.
   */function updateElementValue(element,attr,value){// Support: IE9 only
// In IE9 values are converted to string (e.g. `input.value = null` results in `input.value === 'null'`).
var propValue=isDefined(value)?value:msie===9?'':null;element.prop('value',propValue);attr.$set('value',value);}return{restrict:'A',priority:100,compile:function(tpl,tplAttr){if(CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)){return function ngValueConstantLink(scope,elm,attr){var value=scope.$eval(attr.ngValue);updateElementValue(elm,attr,value);};}else{return function ngValueLink(scope,elm,attr){scope.$watch(attr.ngValue,function valueWatchAction(value){updateElementValue(elm,attr,value);});};}}};};/**
 * @ngdoc directive
 * @name ngBind
 * @restrict AC
 *
 * @description
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
 * with the value of a given expression, and to update the text content when the value of that
 * expression changes.
 *
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
 * `{{ expression }}` which is similar but less verbose.
 *
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
 * element attribute, it makes the bindings invisible to the user while the page is loading.
 *
 * An alternative solution to this problem would be using the
 * {@link ng.directive:ngCloak ngCloak} directive.
 *
 *
 * @element ANY
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
 *
 * @example
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <example module="bindExample" name="ng-bind">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.name = 'Whirled';
           }]);
       </script>
       <div ng-controller="ExampleController">
         <label>Enter name: <input type="text" ng-model="name"></label><br>
         Hello <span ng-bind="name"></span>!
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var nameInput = element(by.model('name'));

         expect(element(by.binding('name')).getText()).toBe('Whirled');
         nameInput.clear();
         nameInput.sendKeys('world');
         expect(element(by.binding('name')).getText()).toBe('world');
       });
     </file>
   </example>
 */var ngBindDirective=['$compile',function($compile){return{restrict:'AC',compile:function ngBindCompile(templateElement){$compile.$$addBindingClass(templateElement);return function ngBindLink(scope,element,attr){$compile.$$addBindingInfo(element,attr.ngBind);element=element[0];scope.$watch(attr.ngBind,function ngBindWatchAction(value){element.textContent=stringify(value);});};}};}];/**
 * @ngdoc directive
 * @name ngBindTemplate
 *
 * @description
 * The `ngBindTemplate` directive specifies that the element
 * text content should be replaced with the interpolation of the template
 * in the `ngBindTemplate` attribute.
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
 * expressions. This directive is needed since some HTML elements
 * (such as TITLE and OPTION) cannot contain SPAN elements.
 *
 * @element ANY
 * @param {string} ngBindTemplate template of form
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
 *
 * @example
 * Try it here: enter text in text box and watch the greeting change.
   <example module="bindExample" name="ng-bind-template">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.salutation = 'Hello';
             $scope.name = 'World';
           }]);
       </script>
       <div ng-controller="ExampleController">
        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
        <label>Name: <input type="text" ng-model="name"></label><br>
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var salutationElem = element(by.binding('salutation'));
         var salutationInput = element(by.model('salutation'));
         var nameInput = element(by.model('name'));

         expect(salutationElem.getText()).toBe('Hello World!');

         salutationInput.clear();
         salutationInput.sendKeys('Greetings');
         nameInput.clear();
         nameInput.sendKeys('user');

         expect(salutationElem.getText()).toBe('Greetings user!');
       });
     </file>
   </example>
 */var ngBindTemplateDirective=['$interpolate','$compile',function($interpolate,$compile){return{compile:function ngBindTemplateCompile(templateElement){$compile.$$addBindingClass(templateElement);return function ngBindTemplateLink(scope,element,attr){var interpolateFn=$interpolate(element.attr(attr.$attr.ngBindTemplate));$compile.$$addBindingInfo(element,interpolateFn.expressions);element=element[0];attr.$observe('ngBindTemplate',function(value){element.textContent=isUndefined(value)?'':value;});};}};}];/**
 * @ngdoc directive
 * @name ngBindHtml
 *
 * @description
 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
 *
 * You may also bypass sanitization for values you know are safe. To do so, bind to
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
 *
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
 * will have an exception (instead of an exploit.)
 *
 * @element ANY
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
 *
 * @example

   <example module="bindHtmlExample" deps="angular-sanitize.js" name="ng-bind-html">
     <file name="index.html">
       <div ng-controller="ExampleController">
        <p ng-bind-html="myHTML"></p>
       </div>
     </file>

     <file name="script.js">
       angular.module('bindHtmlExample', ['ngSanitize'])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.myHTML =
              'I am an <code>HTML</code>string with ' +
              '<a href="#">links!</a> and other <em>stuff</em>';
         }]);
     </file>

     <file name="protractor.js" type="protractor">
       it('should check ng-bind-html', function() {
         expect(element(by.binding('myHTML')).getText()).toBe(
             'I am an HTMLstring with links! and other stuff');
       });
     </file>
   </example>
 */var ngBindHtmlDirective=['$sce','$parse','$compile',function($sce,$parse,$compile){return{restrict:'A',compile:function ngBindHtmlCompile(tElement,tAttrs){var ngBindHtmlGetter=$parse(tAttrs.ngBindHtml);var ngBindHtmlWatch=$parse(tAttrs.ngBindHtml,function sceValueOf(val){// Unwrap the value to compare the actual inner safe value, not the wrapper object.
return $sce.valueOf(val);});$compile.$$addBindingClass(tElement);return function ngBindHtmlLink(scope,element,attr){$compile.$$addBindingInfo(element,attr.ngBindHtml);scope.$watch(ngBindHtmlWatch,function ngBindHtmlWatchAction(){// The watched value is the unwrapped value. To avoid re-escaping, use the direct getter.
var value=ngBindHtmlGetter(scope);element.html($sce.getTrustedHtml(value)||'');});};}};}];/**
 * @ngdoc directive
 * @name ngChange
 *
 * @description
 * Evaluate the given expression when the user changes the input.
 * The expression is evaluated immediately, unlike the JavaScript onchange event
 * which only triggers at the end of a change (usually, when the user leaves the
 * form element or presses the return key).
 *
 * The `ngChange` expression is only evaluated when a change in the input value causes
 * a new value to be committed to the model.
 *
 * It will not be evaluated:
 * * if the value returned from the `$parsers` transformation pipeline has not changed
 * * if the input has continued to be invalid since the model will stay `null`
 * * if the model is changed programmatically and not by a change to the input value
 *
 *
 * Note, this directive requires `ngModel` to be present.
 *
 * @element input
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
 * in input value.
 *
 * @example
 * <example name="ngChange-directive" module="changeExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('changeExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.counter = 0;
 *           $scope.change = function() {
 *             $scope.counter++;
 *           };
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
 *       <label for="ng-change-example2">Confirmed</label><br />
 *       <tt>debug = {{confirmed}}</tt><br/>
 *       <tt>counter = {{counter}}</tt><br/>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var counter = element(by.binding('counter'));
 *     var debug = element(by.binding('confirmed'));
 *
 *     it('should evaluate the expression if changing from view', function() {
 *       expect(counter.getText()).toContain('0');
 *
 *       element(by.id('ng-change-example1')).click();
 *
 *       expect(counter.getText()).toContain('1');
 *       expect(debug.getText()).toContain('true');
 *     });
 *
 *     it('should not evaluate the expression if changing from model', function() {
 *       element(by.id('ng-change-example2')).click();

 *       expect(counter.getText()).toContain('0');
 *       expect(debug.getText()).toContain('true');
 *     });
 *   </file>
 * </example>
 */var ngChangeDirective=valueFn({restrict:'A',require:'ngModel',link:function(scope,element,attr,ctrl){ctrl.$viewChangeListeners.push(function(){scope.$eval(attr.ngChange);});}});/* exported
  ngClassDirective,
  ngClassEvenDirective,
  ngClassOddDirective
*/function classDirective(name,selector){name='ngClass'+name;var indexWatchExpression;return['$parse',function($parse){return{restrict:'AC',link:function(scope,element,attr){var expression=attr[name].trim();var isOneTime=expression.charAt(0)===':'&&expression.charAt(1)===':';var watchInterceptor=isOneTime?toFlatValue:toClassString;var watchExpression=$parse(expression,watchInterceptor);var watchAction=isOneTime?ngClassOneTimeWatchAction:ngClassWatchAction;var classCounts=element.data('$classCounts');var oldModulo=true;var oldClassString;if(!classCounts){// Use createMap() to prevent class assumptions involving property
// names in Object.prototype
classCounts=createMap();element.data('$classCounts',classCounts);}if(name!=='ngClass'){if(!indexWatchExpression){indexWatchExpression=$parse('$index',function moduloTwo($index){// eslint-disable-next-line no-bitwise
return $index&1;});}scope.$watch(indexWatchExpression,ngClassIndexWatchAction);}scope.$watch(watchExpression,watchAction,isOneTime);function addClasses(classString){classString=digestClassCounts(split(classString),1);attr.$addClass(classString);}function removeClasses(classString){classString=digestClassCounts(split(classString),-1);attr.$removeClass(classString);}function updateClasses(oldClassString,newClassString){var oldClassArray=split(oldClassString);var newClassArray=split(newClassString);var toRemoveArray=arrayDifference(oldClassArray,newClassArray);var toAddArray=arrayDifference(newClassArray,oldClassArray);var toRemoveString=digestClassCounts(toRemoveArray,-1);var toAddString=digestClassCounts(toAddArray,1);attr.$addClass(toAddString);attr.$removeClass(toRemoveString);}function digestClassCounts(classArray,count){var classesToUpdate=[];forEach(classArray,function(className){if(count>0||classCounts[className]){classCounts[className]=(classCounts[className]||0)+count;if(classCounts[className]===+(count>0)){classesToUpdate.push(className);}}});return classesToUpdate.join(' ');}function ngClassIndexWatchAction(newModulo){// This watch-action should run before the `ngClass[OneTime]WatchAction()`, thus it
// adds/removes `oldClassString`. If the `ngClass` expression has changed as well, the
// `ngClass[OneTime]WatchAction()` will update the classes.
if(newModulo===selector){addClasses(oldClassString);}else{removeClasses(oldClassString);}oldModulo=newModulo;}function ngClassOneTimeWatchAction(newClassValue){var newClassString=toClassString(newClassValue);if(newClassString!==oldClassString){ngClassWatchAction(newClassString);}}function ngClassWatchAction(newClassString){if(oldModulo===selector){updateClasses(oldClassString,newClassString);}oldClassString=newClassString;}}};}];// Helpers
function arrayDifference(tokens1,tokens2){if(!tokens1||!tokens1.length)return[];if(!tokens2||!tokens2.length)return tokens1;var values=[];outer:for(var i=0;i<tokens1.length;i++){var token=tokens1[i];for(var j=0;j<tokens2.length;j++){if(token===tokens2[j])continue outer;}values.push(token);}return values;}function split(classString){return classString&&classString.split(' ');}function toClassString(classValue){var classString=classValue;if(isArray(classValue)){classString=classValue.map(toClassString).join(' ');}else if(isObject(classValue)){classString=Object.keys(classValue).filter(function(key){return classValue[key];}).join(' ');}return classString;}function toFlatValue(classValue){var flatValue=classValue;if(isArray(classValue)){flatValue=classValue.map(toFlatValue);}else if(isObject(classValue)){var hasUndefined=false;flatValue=Object.keys(classValue).filter(function(key){var value=classValue[key];if(!hasUndefined&&isUndefined(value)){hasUndefined=true;}return value;});if(hasUndefined){// Prevent the `oneTimeLiteralWatchInterceptor` from unregistering
// the watcher, by including at least one `undefined` value.
flatValue.push(undefined);}}return flatValue;}}/**
 * @ngdoc directive
 * @name ngClass
 * @restrict AC
 *
 * @description
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
 * an expression that represents all classes to be added.
 *
 * The directive operates in three different ways, depending on which of three types the expression
 * evaluates to:
 *
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
 * names.
 *
 * 2. If the expression evaluates to an object, then for each key-value pair of the
 * object with a truthy value the corresponding key is used as a class name.
 *
 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
 * to give you more control over what CSS classes appear. See the code below for an example of this.
 *
 *
 * The directive won't add duplicate classes if a particular class was already set.
 *
 * When the expression changes, the previously added classes are removed and only then are the
 * new classes added.
 *
 * @knownIssue
 * You should not use {@link guide/interpolation interpolation} in the value of the `class`
 * attribute, when using the `ngClass` directive on the same element.
 * See {@link guide/interpolation#known-issues here} for more info.
 *
 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#addClass addClass}       | just before the class is applied to the element   |
 * | {@link ng.$animate#removeClass removeClass} | just before the class is removed from the element |
 *
 * @element ANY
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class
 *   names, an array, or a map of class names to boolean values. In the case of a map, the
 *   names of the properties whose values are truthy will be added as css classes to the
 *   element.
 *
 * @example Example that demonstrates basic bindings via ngClass directive.
   <example name="ng-class">
     <file name="index.html">
       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
       <label>
          <input type="checkbox" ng-model="deleted">
          deleted (apply "strike" class)
       </label><br>
       <label>
          <input type="checkbox" ng-model="important">
          important (apply "bold" class)
       </label><br>
       <label>
          <input type="checkbox" ng-model="error">
          error (apply "has-error" class)
       </label>
       <hr>
       <p ng-class="style">Using String Syntax</p>
       <input type="text" ng-model="style"
              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
       <hr>
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
       <input ng-model="style1"
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
       <input ng-model="style2"
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
       <input ng-model="style3"
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
       <hr>
       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
     </file>
     <file name="style.css">
       .strike {
           text-decoration: line-through;
       }
       .bold {
           font-weight: bold;
       }
       .red {
           color: red;
       }
       .has-error {
           color: red;
           background-color: yellow;
       }
       .orange {
           color: orange;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var ps = element.all(by.css('p'));

       it('should let you toggle the class', function() {

         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);

         element(by.model('important')).click();
         expect(ps.first().getAttribute('class')).toMatch(/bold/);

         element(by.model('error')).click();
         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
       });

       it('should let you toggle string example', function() {
         expect(ps.get(1).getAttribute('class')).toBe('');
         element(by.model('style')).clear();
         element(by.model('style')).sendKeys('red');
         expect(ps.get(1).getAttribute('class')).toBe('red');
       });

       it('array example should have 3 classes', function() {
         expect(ps.get(2).getAttribute('class')).toBe('');
         element(by.model('style1')).sendKeys('bold');
         element(by.model('style2')).sendKeys('strike');
         element(by.model('style3')).sendKeys('red');
         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
       });

       it('array with map example should have 2 classes', function() {
         expect(ps.last().getAttribute('class')).toBe('');
         element(by.model('style4')).sendKeys('bold');
         element(by.model('warning')).click();
         expect(ps.last().getAttribute('class')).toBe('bold orange');
       });
     </file>
   </example>

   ## Animations

   The example below demonstrates how to perform animations using ngClass.

   <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-class">
     <file name="index.html">
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
      <br>
      <span class="base-class" ng-class="myVar">Sample Text</span>
     </file>
     <file name="style.css">
       .base-class {
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

       .base-class.my-class {
         color: red;
         font-size:3em;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class', function() {
         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);

         element(by.id('setbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).
           toMatch(/my-class/);

         element(by.id('clearbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);
       });
     </file>
   </example>


   ## ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link $animate#addClass $animate.addClass} and
   {@link $animate#removeClass $animate.removeClass}.
 */var ngClassDirective=classDirective('',true);/**
 * @ngdoc directive
 * @name ngClassOdd
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example name="ng-class-odd">
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}}
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */var ngClassOddDirective=classDirective('Odd',0);/**
 * @ngdoc directive
 * @name ngClassEven
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
 *   result of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example name="ng-class-even">
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}} &nbsp; &nbsp; &nbsp;
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */var ngClassEvenDirective=classDirective('Even',1);/**
 * @ngdoc directive
 * @name ngCloak
 * @restrict AC
 *
 * @description
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
 * directive to avoid the undesirable flicker effect caused by the html template display.
 *
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
 * of the browser view.
 *
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
 * `angular.min.js`.
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```css
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
 * ```
 *
 * When this css rule is loaded by the browser, all html elements (including their children) that
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
 * during the compilation of the template it deletes the `ngCloak` element attribute, making
 * the compiled element visible.
 *
 * For the best result, the `angular.js` script must be loaded in the head section of the html
 * document; alternatively, the css rule above must be included in the external stylesheet of the
 * application.
 *
 * @element ANY
 *
 * @example
   <example name="ng-cloak">
     <file name="index.html">
        <div id="template1" ng-cloak>{{ 'hello' }}</div>
        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should remove the template directive and css class', function() {
         expect($('#template1').getAttribute('ng-cloak')).
           toBeNull();
         expect($('#template2').getAttribute('ng-cloak')).
           toBeNull();
       });
     </file>
   </example>
 *
 */var ngCloakDirective=ngDirective({compile:function(element,attr){attr.$set('ngCloak',undefined);element.removeClass('ng-cloak');}});/**
 * @ngdoc directive
 * @name ngController
 *
 * @description
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
 * supports the principles behind the Model-View-Controller design pattern.
 *
 * MVC components in angular:
 *
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
 *   are accessed through bindings.
 * * View — The template (HTML with data bindings) that is rendered into the View.
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
 *   logic behind the application to decorate the scope with functions and values
 *
 * Note that you can also attach controllers to the DOM by declaring it in a route definition
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
 * and executed twice.
 *
 * @element ANY
 * @scope
 * @priority 500
 * @param {expression} ngController Name of a constructor function registered with the current
 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
 * that on the current scope evaluates to a constructor function.
 *
 * The controller instance can be published into a scope property by specifying
 * `ng-controller="as propertyName"`.
 *
 * If the current `$controllerProvider` is configured to use globals (via
 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
 * also be the name of a globally accessible constructor function (deprecated, not recommended).
 *
 * @example
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
 * greeting are methods declared on the controller (see source tab). These methods can
 * easily be called from the angular markup. Any changes to the data are automatically reflected
 * in the View without the need for a manual update.
 *
 * Two different declaration styles are included below:
 *
 * * one binds methods and properties directly onto the controller using `this`:
 * `ng-controller="SettingsController1 as settings"`
 * * one injects `$scope` into the controller:
 * `ng-controller="SettingsController2"`
 *
 * The second option is more common in the Angular community, and is generally used in boilerplates
 * and in this guide. However, there are advantages to binding properties directly to the controller
 * and avoiding scope.
 *
 * * Using `controller as` makes it obvious which controller you are accessing in the template when
 * multiple controllers apply to an element.
 * * If you are writing your controllers as classes you have easier access to the properties and
 * methods, which will appear on the scope, from inside the controller code.
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
 * inheritance masking primitives.
 *
 * This example demonstrates the `controller as` syntax.
 *
 * <example name="ngControllerAs" module="controllerAsExample">
 *   <file name="index.html">
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
 *      <button ng-click="settings.greet()">greet</button><br/>
 *      Contact:
 *      <ul>
 *        <li ng-repeat="contact in settings.contacts">
 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
 *             <option>phone</option>
 *             <option>email</option>
 *          </select>
 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
 *          <button ng-click="settings.clearContact(contact)">clear</button>
 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
 *        </li>
 *        <li><button ng-click="settings.addContact()">add</button></li>
 *     </ul>
 *    </div>
 *   </file>
 *   <file name="app.js">
 *    angular.module('controllerAsExample', [])
 *      .controller('SettingsController1', SettingsController1);
 *
 *    function SettingsController1() {
 *      this.name = 'John Smith';
 *      this.contacts = [
 *        {type: 'phone', value: '408 555 1212'},
 *        {type: 'email', value: 'john.smith@example.org'}
 *      ];
 *    }
 *
 *    SettingsController1.prototype.greet = function() {
 *      alert(this.name);
 *    };
 *
 *    SettingsController1.prototype.addContact = function() {
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
 *    };
 *
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
 *     var index = this.contacts.indexOf(contactToRemove);
 *      this.contacts.splice(index, 1);
 *    };
 *
 *    SettingsController1.prototype.clearContact = function(contact) {
 *      contact.type = 'phone';
 *      contact.value = '';
 *    };
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should check controller as', function() {
 *       var container = element(by.id('ctrl-as-exmpl'));
 *         expect(container.element(by.model('settings.name'))
 *           .getAttribute('value')).toBe('John Smith');
 *
 *       var firstRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(0));
 *       var secondRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(1));
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('408 555 1212');
 *
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('john.smith@example.org');
 *
 *       firstRepeat.element(by.buttonText('clear')).click();
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('');
 *
 *       container.element(by.buttonText('add')).click();
 *
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
 *           .element(by.model('contact.value'))
 *           .getAttribute('value'))
 *           .toBe('yourname@example.org');
 *     });
 *   </file>
 * </example>
 *
 * This example demonstrates the "attach to `$scope`" style of controller.
 *
 * <example name="ngController" module="controllerExample">
 *  <file name="index.html">
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
 *     <label>Name: <input type="text" ng-model="name"/></label>
 *     <button ng-click="greet()">greet</button><br/>
 *     Contact:
 *     <ul>
 *       <li ng-repeat="contact in contacts">
 *         <select ng-model="contact.type" id="select_{{$index}}">
 *            <option>phone</option>
 *            <option>email</option>
 *         </select>
 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
 *         <button ng-click="clearContact(contact)">clear</button>
 *         <button ng-click="removeContact(contact)">X</button>
 *       </li>
 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
 *    </ul>
 *   </div>
 *  </file>
 *  <file name="app.js">
 *   angular.module('controllerExample', [])
 *     .controller('SettingsController2', ['$scope', SettingsController2]);
 *
 *   function SettingsController2($scope) {
 *     $scope.name = 'John Smith';
 *     $scope.contacts = [
 *       {type:'phone', value:'408 555 1212'},
 *       {type:'email', value:'john.smith@example.org'}
 *     ];
 *
 *     $scope.greet = function() {
 *       alert($scope.name);
 *     };
 *
 *     $scope.addContact = function() {
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
 *     };
 *
 *     $scope.removeContact = function(contactToRemove) {
 *       var index = $scope.contacts.indexOf(contactToRemove);
 *       $scope.contacts.splice(index, 1);
 *     };
 *
 *     $scope.clearContact = function(contact) {
 *       contact.type = 'phone';
 *       contact.value = '';
 *     };
 *   }
 *  </file>
 *  <file name="protractor.js" type="protractor">
 *    it('should check controller', function() {
 *      var container = element(by.id('ctrl-exmpl'));
 *
 *      expect(container.element(by.model('name'))
 *          .getAttribute('value')).toBe('John Smith');
 *
 *      var firstRepeat =
 *          container.element(by.repeater('contact in contacts').row(0));
 *      var secondRepeat =
 *          container.element(by.repeater('contact in contacts').row(1));
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('408 555 1212');
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('john.smith@example.org');
 *
 *      firstRepeat.element(by.buttonText('clear')).click();
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('');
 *
 *      container.element(by.buttonText('add')).click();
 *
 *      expect(container.element(by.repeater('contact in contacts').row(2))
 *          .element(by.model('contact.value'))
 *          .getAttribute('value'))
 *          .toBe('yourname@example.org');
 *    });
 *  </file>
 *</example>

 */var ngControllerDirective=[function(){return{restrict:'A',scope:true,controller:'@',priority:500};}];/**
 * @ngdoc directive
 * @name ngCsp
 *
 * @restrict A
 * @element ANY
 * @description
 *
 * Angular has some features that can conflict with certain restrictions that are applied when using
 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
 *
 * If you intend to implement CSP with these rules then you must tell Angular not to use these
 * features.
 *
 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
 *
 *
 * The following default rules in CSP affect Angular:
 *
 * * The use of `eval()`, `Function(string)` and similar functions to dynamically create and execute
 * code from strings is forbidden. Angular makes use of this in the {@link $parse} service to
 * provide a 30% increase in the speed of evaluating Angular expressions. (This CSP rule can be
 * disabled with the CSP keyword `unsafe-eval`, but it is generally not recommended as it would
 * weaken the protections offered by CSP.)
 *
 * * The use of inline resources, such as inline `<script>` and `<style>` elements, are forbidden.
 * This prevents apps from injecting custom styles directly into the document. Angular makes use of
 * this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}). To make these
 * directives work when a CSP rule is blocking inline styles, you must link to the `angular-csp.css`
 * in your HTML manually. (This CSP rule can be disabled with the CSP keyword `unsafe-inline`, but
 * it is generally not recommended as it would weaken the protections offered by CSP.)
 *
 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking dynamic code
 * creation from strings (e.g., `unsafe-eval` not specified in CSP header) and automatically
 * deactivates this feature in the {@link $parse} service. This autodetection, however, triggers a
 * CSP error to be logged in the console:
 *
 * ```
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
 * script in the following Content Security Policy directive: "default-src 'self'". Note that
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
 * ```
 *
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
 * directive on an element of the HTML document that appears before the `<script>` tag that loads
 * the `angular.js` file.
 *
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
 *
 * You can specify which of the CSP related Angular features should be deactivated by providing
 * a value for the `ng-csp` attribute. The options are as follows:
 *
 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM
 *
 * * no-unsafe-eval: this stops Angular from optimizing $parse with unsafe eval of strings
 *
 * You can use these values in the following combinations:
 *
 *
 * * No declaration means that Angular will assume that you can do inline styles, but it will do
 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous
 * versions of Angular.
 *
 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline
 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous
 * versions of Angular.
 *
 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can
 * inject inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
 *
 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can
 * run eval - no automatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
 *
 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject
 * styles nor use eval, which is the same as an empty: ng-csp.
 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
 *
 * @example
 * This example shows how to apply the `ngCsp` directive to the `html` tag.
   ```html
     <!doctype html>
     <html ng-app ng-csp>
     ...
     ...
     </html>
   ```
  * @example
      <!-- Note: the `.csp` suffix in the example name triggers CSP mode in our http server! -->
      <example name="example.csp" module="cspExample" ng-csp="true">
        <file name="index.html">
          <div ng-controller="MainController as ctrl">
            <div>
              <button ng-click="ctrl.inc()" id="inc">Increment</button>
              <span id="counter">
                {{ctrl.counter}}
              </span>
            </div>

            <div>
              <button ng-click="ctrl.evil()" id="evil">Evil</button>
              <span id="evilError">
                {{ctrl.evilError}}
              </span>
            </div>
          </div>
        </file>
        <file name="script.js">
           angular.module('cspExample', [])
             .controller('MainController', function MainController() {
                this.counter = 0;
                this.inc = function() {
                  this.counter++;
                };
                this.evil = function() {
                  try {
                    eval('1+2'); // eslint-disable-line no-eval
                  } catch (e) {
                    this.evilError = e.message;
                  }
                };
              });
        </file>
        <file name="protractor.js" type="protractor">
          var util, webdriver;

          var incBtn = element(by.id('inc'));
          var counter = element(by.id('counter'));
          var evilBtn = element(by.id('evil'));
          var evilError = element(by.id('evilError'));

          function getAndClearSevereErrors() {
            return browser.manage().logs().get('browser').then(function(browserLog) {
              return browserLog.filter(function(logEntry) {
                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
              });
            });
          }

          function clearErrors() {
            getAndClearSevereErrors();
          }

          function expectNoErrors() {
            getAndClearSevereErrors().then(function(filteredLog) {
              expect(filteredLog.length).toEqual(0);
              if (filteredLog.length) {
                console.log('browser console errors: ' + util.inspect(filteredLog));
              }
            });
          }

          function expectError(regex) {
            getAndClearSevereErrors().then(function(filteredLog) {
              var found = false;
              filteredLog.forEach(function(log) {
                if (log.message.match(regex)) {
                  found = true;
                }
              });
              if (!found) {
                throw new Error('expected an error that matches ' + regex);
              }
            });
          }

          beforeEach(function() {
            util = require('util');
            webdriver = require('selenium-webdriver');
          });

          // For now, we only test on Chrome,
          // as Safari does not load the page with Protractor's injected scripts,
          // and Firefox webdriver always disables content security policy (#6358)
          if (browser.params.browser !== 'chrome') {
            return;
          }

          it('should not report errors when the page is loaded', function() {
            // clear errors so we are not dependent on previous tests
            clearErrors();
            // Need to reload the page as the page is already loaded when
            // we come here
            browser.driver.getCurrentUrl().then(function(url) {
              browser.get(url);
            });
            expectNoErrors();
          });

          it('should evaluate expressions', function() {
            expect(counter.getText()).toEqual('0');
            incBtn.click();
            expect(counter.getText()).toEqual('1');
            expectNoErrors();
          });

          it('should throw and report an error when using "eval"', function() {
            evilBtn.click();
            expect(evilError.getText()).toMatch(/Content Security Policy/);
            expectError(/Content Security Policy/);
          });
        </file>
      </example>
  */// `ngCsp` is not implemented as a proper directive any more, because we need it be processed while
// we bootstrap the app (before `$parse` is instantiated). For this reason, we just have the `csp()`
// fn that looks for the `ng-csp` attribute anywhere in the current doc.
/**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * The ngClick directive allows you to specify custom behavior when
 * an element is clicked.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
 * click. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-click">
     <file name="index.html">
      <button ng-click="count = count + 1" ng-init="count=0">
        Increment
      </button>
      <span>
        count: {{count}}
      </span>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-click', function() {
         expect(element(by.binding('count')).getText()).toMatch('0');
         element(by.css('button')).click();
         expect(element(by.binding('count')).getText()).toMatch('1');
       });
     </file>
   </example>
 *//*
 * A collection of directives that allows creation of custom event handlers that are defined as
 * angular expressions and are compiled and executed within the current scope.
 */var ngEventDirectives={};// For events that might fire synchronously during DOM manipulation
// we need to execute their event handlers asynchronously using $evalAsync,
// so that they are not executed in an inconsistent state.
var forceAsyncEvents={'blur':true,'focus':true};forEach('click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),function(eventName){var directiveName=directiveNormalize('ng-'+eventName);ngEventDirectives[directiveName]=['$parse','$rootScope',function($parse,$rootScope){return{restrict:'A',compile:function($element,attr){// NOTE:
// We expose the powerful `$event` object on the scope that provides access to the Window,
// etc. This is OK, because expressions are not sandboxed any more (and the expression
// sandbox was never meant to be a security feature anyway).
var fn=$parse(attr[directiveName]);return function ngEventHandler(scope,element){element.on(eventName,function(event){var callback=function(){fn(scope,{$event:event});};if(forceAsyncEvents[eventName]&&$rootScope.$$phase){scope.$evalAsync(callback);}else{scope.$apply(callback);}});};}};}];});/**
 * @ngdoc directive
 * @name ngDblclick
 *
 * @description
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
 * a dblclick. (The Event object is available as `$event`)
 *
 * @example
   <example name="ng-dblclick">
     <file name="index.html">
      <button ng-dblclick="count = count + 1" ng-init="count=0">
        Increment (on double click)
      </button>
      count: {{count}}
     </file>
   </example>
 *//**
 * @ngdoc directive
 * @name ngMousedown
 *
 * @description
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mousedown">
     <file name="index.html">
      <button ng-mousedown="count = count + 1" ng-init="count=0">
        Increment (on mouse down)
      </button>
      count: {{count}}
     </file>
   </example>
 *//**
 * @ngdoc directive
 * @name ngMouseup
 *
 * @description
 * Specify custom behavior on mouseup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mouseup">
     <file name="index.html">
      <button ng-mouseup="count = count + 1" ng-init="count=0">
        Increment (on mouse up)
      </button>
      count: {{count}}
     </file>
   </example>
 *//**
 * @ngdoc directive
 * @name ngMouseover
 *
 * @description
 * Specify custom behavior on mouseover event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mouseover">
     <file name="index.html">
      <button ng-mouseover="count = count + 1" ng-init="count=0">
        Increment (when mouse is over)
      </button>
      count: {{count}}
     </file>
   </example>
 *//**
 * @ngdoc directive
 * @name ngMouseenter
 *
 * @description
 * Specify custom behavior on mouseenter event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mouseenter">
     <file name="index.html">
      <button ng-mouseenter="count = count + 1" ng-init="count=0">
        Increment (when mouse enters)
      </button>
      count: {{count}}
     </file>
   </example>
 *//**
 * @ngdoc directive
 * @name ngMouseleave
 *
 * @description
 * Specify custom behavior on mouseleave event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mouseleave">
     <file name="index.html">
      <button ng-mouseleave="count = count + 1" ng-init="count=0">
        Increment (when mouse leaves)
      </button>
      count: {{count}}
     </file>
   </example>
 *//**
 * @ngdoc directive
 * @name ngMousemove
 *
 * @description
 * Specify custom behavior on mousemove event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mousemove">
     <file name="index.html">
      <button ng-mousemove="count = count + 1" ng-init="count=0">
        Increment (when mouse moves)
      </button>
      count: {{count}}
     </file>
   </example>
 *//**
 * @ngdoc directive
 * @name ngKeydown
 *
 * @description
 * Specify custom behavior on keydown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example name="ng-keydown">
     <file name="index.html">
      <input ng-keydown="count = count + 1" ng-init="count=0">
      key down count: {{count}}
     </file>
   </example>
 *//**
 * @ngdoc directive
 * @name ngKeyup
 *
 * @description
 * Specify custom behavior on keyup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example name="ng-keyup">
     <file name="index.html">
       <p>Typing in the input box below updates the key count</p>
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

       <p>Typing in the input box below updates the keycode</p>
       <input ng-keyup="event=$event">
       <p>event keyCode: {{ event.keyCode }}</p>
       <p>event altKey: {{ event.altKey }}</p>
     </file>
   </example>
 *//**
 * @ngdoc directive
 * @name ngKeypress
 *
 * @description
 * Specify custom behavior on keypress event.
 *
 * @element ANY
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
 * and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example name="ng-keypress">
     <file name="index.html">
      <input ng-keypress="count = count + 1" ng-init="count=0">
      key press count: {{count}}
     </file>
   </example>
 *//**
 * @ngdoc directive
 * @name ngSubmit
 *
 * @description
 * Enables binding angular expressions to onsubmit events.
 *
 * Additionally it prevents the default action (which for form means sending the request to the
 * server and reloading the current page), but only if the form does not contain `action`,
 * `data-action`, or `x-action` attributes.
 *
 * <div class="alert alert-warning">
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
 * `ngSubmit` handlers together. See the
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
 * for a detailed discussion of when `ngSubmit` may be triggered.
 * </div>
 *
 * @element form
 * @priority 0
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
 * ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example module="submitExample" name="ng-submit">
     <file name="index.html">
      <script>
        angular.module('submitExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.list = [];
            $scope.text = 'hello';
            $scope.submit = function() {
              if ($scope.text) {
                $scope.list.push(this.text);
                $scope.text = '';
              }
            };
          }]);
      </script>
      <form ng-submit="submit()" ng-controller="ExampleController">
        Enter text and hit enter:
        <input type="text" ng-model="text" name="text" />
        <input type="submit" id="submit" value="Submit" />
        <pre>list={{list}}</pre>
      </form>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-submit', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
         expect(element(by.model('text')).getAttribute('value')).toBe('');
       });
       it('should ignore empty strings', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
        });
     </file>
   </example>
 *//**
 * @ngdoc directive
 * @name ngFocus
 *
 * @description
 * Specify custom behavior on focus event.
 *
 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 *//**
 * @ngdoc directive
 * @name ngBlur
 *
 * @description
 * Specify custom behavior on blur event.
 *
 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
 * an element has lost focus.
 *
 * Note: As the `blur` event is executed synchronously also during DOM manipulations
 * (e.g. removing a focussed input),
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 *//**
 * @ngdoc directive
 * @name ngCopy
 *
 * @description
 * Specify custom behavior on copy event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-copy">
     <file name="index.html">
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
      copied: {{copied}}
     </file>
   </example>
 *//**
 * @ngdoc directive
 * @name ngCut
 *
 * @description
 * Specify custom behavior on cut event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-cut">
     <file name="index.html">
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
      cut: {{cut}}
     </file>
   </example>
 *//**
 * @ngdoc directive
 * @name ngPaste
 *
 * @description
 * Specify custom behavior on paste event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-paste">
     <file name="index.html">
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
      pasted: {{paste}}
     </file>
   </example>
 *//**
 * @ngdoc directive
 * @name ngIf
 * @restrict A
 * @multiElement
 *
 * @description
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
 * {expression}. If the expression assigned to `ngIf` evaluates to a false
 * value then the element is removed from the DOM, otherwise a clone of the
 * element is reinserted into the DOM.
 *
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
 * element in the DOM rather than changing its visibility via the `display` css property.  A common
 * case when this difference is significant is when using css selectors that rely on an element's
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
 *
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
 * is created when the element is restored.  The scope created within `ngIf` inherits from
 * its parent scope using
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
 * a javascript primitive defined in the parent scope. In this case any modifications made to the
 * variable within the child scope will override (hide) the value in the parent scope.
 *
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
 * is if an element's class attribute is directly modified after it's compiled, using something like
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
 * the added class will be lost because the original compiled state is used to regenerate the element.
 *
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
 * and `leave` effects.
 *
 * @animations
 * | Animation                        | Occurs                               |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#enter enter}  | just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container |
 * | {@link ng.$animate#leave leave}  | just before the `ngIf` contents are removed from the DOM |
 *
 * @element ANY
 * @scope
 * @priority 600
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
 *     element is added to the DOM tree.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-if">
    <file name="index.html">
      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
      Show when checked:
      <span ng-if="checked" class="animate-if">
        This is removed when the checkbox is unchecked.
      </span>
    </file>
    <file name="animations.css">
      .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

      .animate-if.ng-enter, .animate-if.ng-leave {
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

      .animate-if.ng-enter,
      .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

      .animate-if.ng-leave,
      .animate-if.ng-enter.ng-enter-active {
        opacity:1;
      }
    </file>
  </example>
 */var ngIfDirective=['$animate','$compile',function($animate,$compile){return{multiElement:true,transclude:'element',priority:600,terminal:true,restrict:'A',$$tlb:true,link:function($scope,$element,$attr,ctrl,$transclude){var block,childScope,previousElements;$scope.$watch($attr.ngIf,function ngIfWatchAction(value){if(value){if(!childScope){$transclude(function(clone,newScope){childScope=newScope;clone[clone.length++]=$compile.$$createComment('end ngIf',$attr.ngIf);// Note: We only need the first/last node of the cloned nodes.
// However, we need to keep the reference to the jqlite wrapper as it might be changed later
// by a directive with templateUrl when its template arrives.
block={clone:clone};$animate.enter(clone,$element.parent(),$element);});}}else{if(previousElements){previousElements.remove();previousElements=null;}if(childScope){childScope.$destroy();childScope=null;}if(block){previousElements=getBlockNodes(block.clone);$animate.leave(previousElements).done(function(response){if(response!==false)previousElements=null;});block=null;}}});}};}];/**
 * @ngdoc directive
 * @name ngInclude
 * @restrict ECA
 *
 * @description
 * Fetches, compiles and includes an external HTML fragment.
 *
 * By default, the template URL is restricted to the same domain and protocol as the
 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
 * ng.$sce Strict Contextual Escaping}.
 *
 * In addition, the browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy may further restrict whether the template is successfully loaded.
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
 * access on some browsers.
 *
 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#enter enter}  | when the expression changes, on the new include |
 * | {@link ng.$animate#leave leave}  | when the expression changes, on the old include |
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 *
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
 * @param {string=} onload Expression to evaluate when a new partial is loaded.
 *                  <div class="alert alert-warning">
 *                  **Note:** When using onload on SVG elements in IE11, the browser will try to call
 *                  a function with the name on the window element, which will usually throw a
 *                  "function is undefined" error. To fix this, you can instead use `data-onload` or a
 *                  different form that {@link guide/directive#normalization matches} `onload`.
 *                  </div>
   *
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
 *
 * @example
  <example module="includeExample" deps="angular-animate.js" animations="true" name="ng-include">
    <file name="index.html">
     <div ng-controller="ExampleController">
       <select ng-model="template" ng-options="t.name for t in templates">
        <option value="">(blank)</option>
       </select>
       url of the template: <code>{{template.url}}</code>
       <hr/>
       <div class="slide-animate-container">
         <div class="slide-animate" ng-include="template.url"></div>
       </div>
     </div>
    </file>
    <file name="script.js">
      angular.module('includeExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.templates =
            [{ name: 'template1.html', url: 'template1.html'},
             { name: 'template2.html', url: 'template2.html'}];
          $scope.template = $scope.templates[0];
        }]);
     </file>
    <file name="template1.html">
      Content of template1.html
    </file>
    <file name="template2.html">
      Content of template2.html
    </file>
    <file name="animations.css">
      .slide-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .slide-animate {
        padding:10px;
      }

      .slide-animate.ng-enter, .slide-animate.ng-leave {
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

      .slide-animate.ng-enter {
        top:-50px;
      }
      .slide-animate.ng-enter.ng-enter-active {
        top:0;
      }

      .slide-animate.ng-leave {
        top:0;
      }
      .slide-animate.ng-leave.ng-leave-active {
        top:50px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var templateSelect = element(by.model('template'));
      var includeElem = element(by.css('[ng-include]'));

      it('should load template1.html', function() {
        expect(includeElem.getText()).toMatch(/Content of template1.html/);
      });

      it('should load template2.html', function() {
        if (browser.params.browser === 'firefox') {
          // Firefox can't handle using selects
          // See https://github.com/angular/protractor/issues/480
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(2).click();
        expect(includeElem.getText()).toMatch(/Content of template2.html/);
      });

      it('should change to blank', function() {
        if (browser.params.browser === 'firefox') {
          // Firefox can't handle using selects
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(0).click();
        expect(includeElem.isPresent()).toBe(false);
      });
    </file>
  </example>
 *//**
 * @ngdoc event
 * @name ngInclude#$includeContentRequested
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted every time the ngInclude content is requested.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 *//**
 * @ngdoc event
 * @name ngInclude#$includeContentLoaded
 * @eventType emit on the current ngInclude scope
 * @description
 * Emitted every time the ngInclude content is reloaded.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 *//**
 * @ngdoc event
 * @name ngInclude#$includeContentError
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */var ngIncludeDirective=['$templateRequest','$anchorScroll','$animate',function($templateRequest,$anchorScroll,$animate){return{restrict:'ECA',priority:400,terminal:true,transclude:'element',controller:angular.noop,compile:function(element,attr){var srcExp=attr.ngInclude||attr.src,onloadExp=attr.onload||'',autoScrollExp=attr.autoscroll;return function(scope,$element,$attr,ctrl,$transclude){var changeCounter=0,currentScope,previousElement,currentElement;var cleanupLastIncludeContent=function(){if(previousElement){previousElement.remove();previousElement=null;}if(currentScope){currentScope.$destroy();currentScope=null;}if(currentElement){$animate.leave(currentElement).done(function(response){if(response!==false)previousElement=null;});previousElement=currentElement;currentElement=null;}};scope.$watch(srcExp,function ngIncludeWatchAction(src){var afterAnimation=function(response){if(response!==false&&isDefined(autoScrollExp)&&(!autoScrollExp||scope.$eval(autoScrollExp))){$anchorScroll();}};var thisChangeId=++changeCounter;if(src){//set the 2nd param to true to ignore the template request error so that the inner
//contents and scope can be cleaned up.
$templateRequest(src,true).then(function(response){if(scope.$$destroyed)return;if(thisChangeId!==changeCounter)return;var newScope=scope.$new();ctrl.template=response;// Note: This will also link all children of ng-include that were contained in the original
// html. If that content contains controllers, ... they could pollute/change the scope.
// However, using ng-include on an element with additional content does not make sense...
// Note: We can't remove them in the cloneAttchFn of $transclude as that
// function is called before linking the content, which would apply child
// directives to non existing elements.
var clone=$transclude(newScope,function(clone){cleanupLastIncludeContent();$animate.enter(clone,null,$element).done(afterAnimation);});currentScope=newScope;currentElement=clone;currentScope.$emit('$includeContentLoaded',src);scope.$eval(onloadExp);},function(){if(scope.$$destroyed)return;if(thisChangeId===changeCounter){cleanupLastIncludeContent();scope.$emit('$includeContentError',src);}});scope.$emit('$includeContentRequested',src);}else{cleanupLastIncludeContent();ctrl.template=null;}});};}};}];// This directive is called during the $transclude call of the first `ngInclude` directive.
// It will replace and compile the content of the element with the loaded template.
// We need this directive so that the element content is already filled when
// the link function of another directive on the same element as ngInclude
// is called.
var ngIncludeFillContentDirective=['$compile',function($compile){return{restrict:'ECA',priority:-400,require:'ngInclude',link:function(scope,$element,$attr,ctrl){if(toString.call($element[0]).match(/SVG/)){// WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
// support innerHTML, so detect this here and try to generate the contents
// specially.
$element.empty();$compile(jqLiteBuildFragment(ctrl.template,window.document).childNodes)(scope,function namespaceAdaptedClone(clone){$element.append(clone);},{futureParentElement:$element});return;}$element.html(ctrl.template);$compile($element.contents())(scope);}};}];/**
 * @ngdoc directive
 * @name ngInit
 * @restrict AC
 *
 * @description
 * The `ngInit` directive allows you to evaluate an expression in the
 * current scope.
 *
 * <div class="alert alert-danger">
 * This directive can be abused to add unnecessary amounts of logic into your templates.
 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via
 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}
 * rather than `ngInit` to initialize values on a scope.
 * </div>
 *
 * <div class="alert alert-warning">
 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
 * sure you have parentheses to ensure correct operator precedence:
 * <pre class="prettyprint">
 * `<div ng-init="test1 = ($index | toString)"></div>`
 * </pre>
 * </div>
 *
 * @priority 450
 *
 * @element ANY
 * @param {expression} ngInit {@link guide/expression Expression} to eval.
 *
 * @example
   <example module="initExample" name="ng-init">
     <file name="index.html">
   <script>
     angular.module('initExample', [])
       .controller('ExampleController', ['$scope', function($scope) {
         $scope.list = [['a', 'b'], ['c', 'd']];
       }]);
   </script>
   <div ng-controller="ExampleController">
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
       </div>
     </div>
   </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should alias index positions', function() {
         var elements = element.all(by.css('.example-init'));
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
       });
     </file>
   </example>
 */var ngInitDirective=ngDirective({priority:450,compile:function(){return{pre:function(scope,element,attrs){scope.$eval(attrs.ngInit);}};}});/**
 * @ngdoc directive
 * @name ngList
 *
 * @description
 * Text input that converts between a delimited string and an array of strings. The default
 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
 *
 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
 *   list item is respected. This implies that the user of the directive is responsible for
 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
 *   tab or newline character.
 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
 *   when joining the list items back together) and whitespace around each list item is stripped
 *   before it is added to the model.
 *
 * ### Example with Validation
 *
 * <example name="ngList-directive" module="listExample">
 *   <file name="app.js">
 *      angular.module('listExample', [])
 *        .controller('ExampleController', ['$scope', function($scope) {
 *          $scope.names = ['morpheus', 'neo', 'trinity'];
 *        }]);
 *   </file>
 *   <file name="index.html">
 *    <form name="myForm" ng-controller="ExampleController">
 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
 *      <span role="alert">
 *        <span class="error" ng-show="myForm.namesInput.$error.required">
 *        Required!</span>
 *      </span>
 *      <br>
 *      <tt>names = {{names}}</tt><br/>
 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
 *     </form>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var listInput = element(by.model('names'));
 *     var names = element(by.exactBinding('names'));
 *     var valid = element(by.binding('myForm.namesInput.$valid'));
 *     var error = element(by.css('span.error'));
 *
 *     it('should initialize to model', function() {
 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
 *       expect(valid.getText()).toContain('true');
 *       expect(error.getCssValue('display')).toBe('none');
 *     });
 *
 *     it('should be invalid if empty', function() {
 *       listInput.clear();
 *       listInput.sendKeys('');
 *
 *       expect(names.getText()).toContain('');
 *       expect(valid.getText()).toContain('false');
 *       expect(error.getCssValue('display')).not.toBe('none');
 *     });
 *   </file>
 * </example>
 *
 * ### Example - splitting on newline
 * <example name="ngList-directive-newlines">
 *   <file name="index.html">
 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
 *    <pre>{{ list | json }}</pre>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it("should split the text by newlines", function() {
 *       var listInput = element(by.model('list'));
 *       var output = element(by.binding('list | json'));
 *       listInput.sendKeys('abc\ndef\nghi');
 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
 *     });
 *   </file>
 * </example>
 *
 * @element input
 * @param {string=} ngList optional delimiter that should be used to split the value.
 */var ngListDirective=function(){return{restrict:'A',priority:100,require:'ngModel',link:function(scope,element,attr,ctrl){var ngList=attr.ngList||', ';var trimValues=attr.ngTrim!=='false';var separator=trimValues?trim(ngList):ngList;var parse=function(viewValue){// If the viewValue is invalid (say required but empty) it will be `undefined`
if(isUndefined(viewValue))return;var list=[];if(viewValue){forEach(viewValue.split(separator),function(value){if(value)list.push(trimValues?trim(value):value);});}return list;};ctrl.$parsers.push(parse);ctrl.$formatters.push(function(value){if(isArray(value)){return value.join(ngList);}return undefined;});// Override the standard $isEmpty because an empty array means the input is empty.
ctrl.$isEmpty=function(value){return!value||!value.length;};}};};/* global VALID_CLASS: true,
  INVALID_CLASS: true,
  PRISTINE_CLASS: true,
  DIRTY_CLASS: true,
  UNTOUCHED_CLASS: true,
  TOUCHED_CLASS: true,
  PENDING_CLASS: true,
  addSetValidityMethod: true,
  setupValidity: true,
  defaultModelOptions: false
*/var VALID_CLASS='ng-valid',INVALID_CLASS='ng-invalid',PRISTINE_CLASS='ng-pristine',DIRTY_CLASS='ng-dirty',UNTOUCHED_CLASS='ng-untouched',TOUCHED_CLASS='ng-touched',EMPTY_CLASS='ng-empty',NOT_EMPTY_CLASS='ng-not-empty';var ngModelMinErr=minErr('ngModel');/**
 * @ngdoc type
 * @name ngModel.NgModelController
 *
 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
 * is set.
 *
 * @property {*} $modelValue The value in the model that the control is bound to.
 *
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
 *  the control updates the ngModelController with a new {@link ngModel.NgModelController#$viewValue
    `$viewValue`} from the DOM, usually via user input.
    See {@link ngModel.NgModelController#$setViewValue `$setViewValue()`} for a detailed lifecycle explanation.
    Note that the `$parsers` are not called when the bound ngModel expression changes programmatically.

  The functions are called in array order, each passing
    its return value through to the next. The last return value is forwarded to the
    {@link ngModel.NgModelController#$validators `$validators`} collection.

  Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
    `$viewValue`}.

  Returning `undefined` from a parser means a parse error occurred. In that case,
    no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
    will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
    is set to `true`. The parse error is stored in `ngModel.$error.parse`.

  This simple example shows a parser that would convert text input value to lowercase:
 * ```js
 * function parse(value) {
 *   if (value) {
 *     return value.toLowerCase();
 *   }
 * }
 * ngModelController.$parsers.push(parse);
 * ```

 *
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
    the bound ngModel expression changes programmatically. The `$formatters` are not called when the
    value of the control is changed by user interaction.

  Formatters are used to format / convert the {@link ngModel.NgModelController#$modelValue
    `$modelValue`} for display in the control.

  The functions are called in reverse array order, each passing the value through to the
    next. The last return value is used as the actual DOM value.

  This simple example shows a formatter that would convert the model value to uppercase:

 * ```js
 * function format(value) {
 *   if (value) {
 *     return value.toUpperCase();
 *   }
 * }
 * ngModel.$formatters.push(format);
 * ```
 *
 * @property {Object.<string, function>} $validators A collection of validators that are applied
 *      whenever the model value changes. The key value within the object refers to the name of the
 *      validator while the function refers to the validation operation. The validation operation is
 *      provided with the model value as an argument and must return a true or false value depending
 *      on the response of that validation.
 *
 * ```js
 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *   return /[0-9]+/.test(value) &&
 *          /[a-z]+/.test(value) &&
 *          /[A-Z]+/.test(value) &&
 *          /\W+/.test(value);
 * };
 * ```
 *
 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
 *      is expected to return a promise when it is run during the model validation process. Once the promise
 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
 *      will only run once all synchronous validators have passed.
 *
 * Please note that if $http is used then it is important that the server returns a success HTTP response code
 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
 *
 * ```js
 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *
 *   // Lookup user by username
 *   return $http.get('/api/users/' + value).
 *      then(function resolved() {
 *        //username exists, this means validation fails
 *        return $q.reject('exists');
 *      }, function rejected() {
 *        //username does not exist, therefore this validation passes
 *        return true;
 *      });
 * };
 * ```
 *
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
 *     view value has changed. It is called with no arguments, and its return value is ignored.
 *     This can be used in place of additional $watches against the model value.
 *
 * @property {Object} $error An object hash with all failing validator ids as keys.
 * @property {Object} $pending An object hash with all pending validator ids as keys.
 *
 * @property {boolean} $untouched True if control has not lost focus yet.
 * @property {boolean} $touched True if control has lost focus.
 * @property {boolean} $pristine True if user has not interacted with the control yet.
 * @property {boolean} $dirty True if user has already interacted with the control.
 * @property {boolean} $valid True if there is no error.
 * @property {boolean} $invalid True if at least one error on the control.
 * @property {string} $name The name attribute of the control.
 *
 * @description
 *
 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
 * The controller contains services for data-binding, validation, CSS updates, and value formatting
 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
 * listening to DOM events.
 * Such DOM related logic should be provided by other directives which make use of
 * `NgModelController` for data-binding to control elements.
 * Angular provides this DOM logic for most {@link input `input`} elements.
 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
 *
 * @example
 * ### Custom Control Example
 * This example shows how to use `NgModelController` with a custom control to achieve
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
 * collaborate together to achieve the desired result.
 *
 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
 * contents be edited in place by the user.
 *
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
 * that content using the `$sce` service.
 *
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
    <file name="style.css">
      [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

      .ng-invalid {
        border: 1px solid red;
      }

    </file>
    <file name="script.js">
      angular.module('customControl', ['ngSanitize']).
        directive('contenteditable', ['$sce', function($sce) {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if (!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$evalAsync(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if (attrs.stripBr && html === '<br>') {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        }]);
    </file>
    <file name="index.html">
      <form name="myForm">
       <div contenteditable
            name="myWidget" ng-model="userContent"
            strip-br="true"
            required>Change me!</div>
        <span ng-show="myForm.myWidget.$error.required">Required!</span>
       <hr>
       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
    it('should data-bind and become invalid', function() {
      if (browser.params.browser === 'safari' || browser.params.browser === 'firefox') {
        // SafariDriver can't handle contenteditable
        // and Firefox driver can't clear contenteditables very well
        return;
      }
      var contentEditable = element(by.css('[contenteditable]'));
      var content = 'Change me!';

      expect(contentEditable.getText()).toEqual(content);

      contentEditable.clear();
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
      expect(contentEditable.getText()).toEqual('');
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
    });
    </file>
 * </example>
 *
 *
 */NgModelController.$inject=['$scope','$exceptionHandler','$attrs','$element','$parse','$animate','$timeout','$q','$interpolate'];function NgModelController($scope,$exceptionHandler,$attr,$element,$parse,$animate,$timeout,$q,$interpolate){this.$viewValue=Number.NaN;this.$modelValue=Number.NaN;this.$$rawModelValue=undefined;// stores the parsed modelValue / model set from scope regardless of validity.
this.$validators={};this.$asyncValidators={};this.$parsers=[];this.$formatters=[];this.$viewChangeListeners=[];this.$untouched=true;this.$touched=false;this.$pristine=true;this.$dirty=false;this.$valid=true;this.$invalid=false;this.$error={};// keep invalid keys here
this.$$success={};// keep valid keys here
this.$pending=undefined;// keep pending keys here
this.$name=$interpolate($attr.name||'',false)($scope);this.$$parentForm=nullFormCtrl;this.$options=defaultModelOptions;this.$$parsedNgModel=$parse($attr.ngModel);this.$$parsedNgModelAssign=this.$$parsedNgModel.assign;this.$$ngModelGet=this.$$parsedNgModel;this.$$ngModelSet=this.$$parsedNgModelAssign;this.$$pendingDebounce=null;this.$$parserValid=undefined;this.$$currentValidationRunId=0;// https://github.com/angular/angular.js/issues/15833
// Prevent `$$scope` from being iterated over by `copy` when NgModelController is deep watched
Object.defineProperty(this,'$$scope',{value:$scope});this.$$attr=$attr;this.$$element=$element;this.$$animate=$animate;this.$$timeout=$timeout;this.$$parse=$parse;this.$$q=$q;this.$$exceptionHandler=$exceptionHandler;setupValidity(this);setupModelWatcher(this);}NgModelController.prototype={$$initGetterSetters:function(){if(this.$options.getOption('getterSetter')){var invokeModelGetter=this.$$parse(this.$$attr.ngModel+'()'),invokeModelSetter=this.$$parse(this.$$attr.ngModel+'($$$p)');this.$$ngModelGet=function($scope){var modelValue=this.$$parsedNgModel($scope);if(isFunction(modelValue)){modelValue=invokeModelGetter($scope);}return modelValue;};this.$$ngModelSet=function($scope,newValue){if(isFunction(this.$$parsedNgModel($scope))){invokeModelSetter($scope,{$$$p:newValue});}else{this.$$parsedNgModelAssign($scope,newValue);}};}else if(!this.$$parsedNgModel.assign){throw ngModelMinErr('nonassign','Expression \'{0}\' is non-assignable. Element: {1}',this.$$attr.ngModel,startingTag(this.$$element));}},/**
   * @ngdoc method
   * @name ngModel.NgModelController#$render
   *
   * @description
   * Called when the view needs to be updated. It is expected that the user of the ng-model
   * directive will implement this method.
   *
   * The `$render()` method is invoked in the following situations:
   *
   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
   *   committed value then `$render()` is called to update the input control.
   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
   *   the `$viewValue` are different from last time.
   *
   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
   * `$modelValue` and `$viewValue` are actually different from their previous values. If `$modelValue`
   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
   * invoked if you only change a property on the objects.
   */$render:noop,/**
   * @ngdoc method
   * @name ngModel.NgModelController#$isEmpty
   *
   * @description
   * This is called when we need to determine if the value of an input is empty.
   *
   * For instance, the required directive does this to work out if the input has data or not.
   *
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
   *
   * You can override this for input directives whose concept of being empty is different from the
   * default. The `checkboxInputType` directive does this because in its case a value of `false`
   * implies empty.
   *
   * @param {*} value The value of the input to check for emptiness.
   * @returns {boolean} True if `value` is "empty".
   */$isEmpty:function(value){// eslint-disable-next-line no-self-compare
return isUndefined(value)||value===''||value===null||value!==value;},$$updateEmptyClasses:function(value){if(this.$isEmpty(value)){this.$$animate.removeClass(this.$$element,NOT_EMPTY_CLASS);this.$$animate.addClass(this.$$element,EMPTY_CLASS);}else{this.$$animate.removeClass(this.$$element,EMPTY_CLASS);this.$$animate.addClass(this.$$element,NOT_EMPTY_CLASS);}},/**
   * @ngdoc method
   * @name ngModel.NgModelController#$setPristine
   *
   * @description
   * Sets the control to its pristine state.
   *
   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
   * state (`ng-pristine` class). A model is considered to be pristine when the control
   * has not been changed from when first compiled.
   */$setPristine:function(){this.$dirty=false;this.$pristine=true;this.$$animate.removeClass(this.$$element,DIRTY_CLASS);this.$$animate.addClass(this.$$element,PRISTINE_CLASS);},/**
   * @ngdoc method
   * @name ngModel.NgModelController#$setDirty
   *
   * @description
   * Sets the control to its dirty state.
   *
   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
   * from when first compiled.
   */$setDirty:function(){this.$dirty=true;this.$pristine=false;this.$$animate.removeClass(this.$$element,PRISTINE_CLASS);this.$$animate.addClass(this.$$element,DIRTY_CLASS);this.$$parentForm.$setDirty();},/**
   * @ngdoc method
   * @name ngModel.NgModelController#$setUntouched
   *
   * @description
   * Sets the control to its untouched state.
   *
   * This method can be called to remove the `ng-touched` class and set the control to its
   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
   * by default, however this function can be used to restore that state if the model has
   * already been touched by the user.
   */$setUntouched:function(){this.$touched=false;this.$untouched=true;this.$$animate.setClass(this.$$element,UNTOUCHED_CLASS,TOUCHED_CLASS);},/**
   * @ngdoc method
   * @name ngModel.NgModelController#$setTouched
   *
   * @description
   * Sets the control to its touched state.
   *
   * This method can be called to remove the `ng-untouched` class and set the control to its
   * touched state (`ng-touched` class). A model is considered to be touched when the user has
   * first focused the control element and then shifted focus away from the control (blur event).
   */$setTouched:function(){this.$touched=true;this.$untouched=false;this.$$animate.setClass(this.$$element,TOUCHED_CLASS,UNTOUCHED_CLASS);},/**
   * @ngdoc method
   * @name ngModel.NgModelController#$rollbackViewValue
   *
   * @description
   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
   * which may be caused by a pending debounced event or because the input is waiting for some
   * future event.
   *
   * If you have an input that uses `ng-model-options` to set up debounced updates or updates that
   * depend on special events such as `blur`, there can be a period when the `$viewValue` is out of
   * sync with the ngModel's `$modelValue`.
   *
   * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update
   * and reset the input to the last committed view value.
   *
   * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`
   * programmatically before these debounced/future events have resolved/occurred, because Angular's
   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
   *
   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
   * input which may have such events pending. This is important in order to make sure that the
   * input field will be updated with the new model value and any pending operations are cancelled.
   *
   * <example name="ng-model-cancel-update" module="cancel-update-example">
   *   <file name="app.js">
   *     angular.module('cancel-update-example', [])
   *
   *     .controller('CancelUpdateController', ['$scope', function($scope) {
   *       $scope.model = {value1: '', value2: ''};
   *
   *       $scope.setEmpty = function(e, value, rollback) {
   *         if (e.keyCode === 27) {
   *           e.preventDefault();
   *           if (rollback) {
   *             $scope.myForm[value].$rollbackViewValue();
   *           }
   *           $scope.model[value] = '';
   *         }
   *       };
   *     }]);
   *   </file>
   *   <file name="index.html">
   *     <div ng-controller="CancelUpdateController">
   *       <p>Both of these inputs are only updated if they are blurred. Hitting escape should
   *       empty them. Follow these steps and observe the difference:</p>
   *       <ol>
   *         <li>Type something in the input. You will see that the model is not yet updated</li>
   *         <li>Press the Escape key.
   *           <ol>
   *             <li> In the first example, nothing happens, because the model is already '', and no
   *             update is detected. If you blur the input, the model will be set to the current view.
   *             </li>
   *             <li> In the second example, the pending update is cancelled, and the input is set back
   *             to the last committed view value (''). Blurring the input does nothing.
   *             </li>
   *           </ol>
   *         </li>
   *       </ol>
   *
   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
   *         <div>
   *           <p id="inputDescription1">Without $rollbackViewValue():</p>
   *           <input name="value1" aria-describedby="inputDescription1" ng-model="model.value1"
   *                  ng-keydown="setEmpty($event, 'value1')">
   *           value1: "{{ model.value1 }}"
   *         </div>
   *
   *         <div>
   *           <p id="inputDescription2">With $rollbackViewValue():</p>
   *           <input name="value2" aria-describedby="inputDescription2" ng-model="model.value2"
   *                  ng-keydown="setEmpty($event, 'value2', true)">
   *           value2: "{{ model.value2 }}"
   *         </div>
   *       </form>
   *     </div>
   *   </file>
       <file name="style.css">
          div {
            display: table-cell;
          }
          div:nth-child(1) {
            padding-right: 30px;
          }

        </file>
   * </example>
   */$rollbackViewValue:function(){this.$$timeout.cancel(this.$$pendingDebounce);this.$viewValue=this.$$lastCommittedViewValue;this.$render();},/**
   * @ngdoc method
   * @name ngModel.NgModelController#$validate
   *
   * @description
   * Runs each of the registered validators (first synchronous validators and then
   * asynchronous validators).
   * If the validity changes to invalid, the model will be set to `undefined`,
   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
   * If the validity changes to valid, it will set the model to the last available valid
   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
   */$validate:function(){// ignore $validate before model is initialized
if(isNumberNaN(this.$modelValue)){return;}var viewValue=this.$$lastCommittedViewValue;// Note: we use the $$rawModelValue as $modelValue might have been
// set to undefined during a view -> model update that found validation
// errors. We can't parse the view here, since that could change
// the model although neither viewValue nor the model on the scope changed
var modelValue=this.$$rawModelValue;var prevValid=this.$valid;var prevModelValue=this.$modelValue;var allowInvalid=this.$options.getOption('allowInvalid');var that=this;this.$$runValidators(modelValue,viewValue,function(allValid){// If there was no change in validity, don't update the model
// This prevents changing an invalid modelValue to undefined
if(!allowInvalid&&prevValid!==allValid){// Note: Don't check this.$valid here, as we could have
// external validators (e.g. calculated on the server),
// that just call $setValidity and need the model value
// to calculate their validity.
that.$modelValue=allValid?modelValue:undefined;if(that.$modelValue!==prevModelValue){that.$$writeModelToScope();}}});},$$runValidators:function(modelValue,viewValue,doneCallback){this.$$currentValidationRunId++;var localValidationRunId=this.$$currentValidationRunId;var that=this;// check parser error
if(!processParseErrors()){validationDone(false);return;}if(!processSyncValidators()){validationDone(false);return;}processAsyncValidators();function processParseErrors(){var errorKey=that.$$parserName||'parse';if(isUndefined(that.$$parserValid)){setValidity(errorKey,null);}else{if(!that.$$parserValid){forEach(that.$validators,function(v,name){setValidity(name,null);});forEach(that.$asyncValidators,function(v,name){setValidity(name,null);});}// Set the parse error last, to prevent unsetting it, should a $validators key == parserName
setValidity(errorKey,that.$$parserValid);return that.$$parserValid;}return true;}function processSyncValidators(){var syncValidatorsValid=true;forEach(that.$validators,function(validator,name){var result=Boolean(validator(modelValue,viewValue));syncValidatorsValid=syncValidatorsValid&&result;setValidity(name,result);});if(!syncValidatorsValid){forEach(that.$asyncValidators,function(v,name){setValidity(name,null);});return false;}return true;}function processAsyncValidators(){var validatorPromises=[];var allValid=true;forEach(that.$asyncValidators,function(validator,name){var promise=validator(modelValue,viewValue);if(!isPromiseLike(promise)){throw ngModelMinErr('nopromise','Expected asynchronous validator to return a promise but got \'{0}\' instead.',promise);}setValidity(name,undefined);validatorPromises.push(promise.then(function(){setValidity(name,true);},function(){allValid=false;setValidity(name,false);}));});if(!validatorPromises.length){validationDone(true);}else{that.$$q.all(validatorPromises).then(function(){validationDone(allValid);},noop);}}function setValidity(name,isValid){if(localValidationRunId===that.$$currentValidationRunId){that.$setValidity(name,isValid);}}function validationDone(allValid){if(localValidationRunId===that.$$currentValidationRunId){doneCallback(allValid);}}},/**
   * @ngdoc method
   * @name ngModel.NgModelController#$commitViewValue
   *
   * @description
   * Commit a pending update to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */$commitViewValue:function(){var viewValue=this.$viewValue;this.$$timeout.cancel(this.$$pendingDebounce);// If the view value has not changed then we should just exit, except in the case where there is
// a native validator on the element. In this case the validation state may have changed even though
// the viewValue has stayed empty.
if(this.$$lastCommittedViewValue===viewValue&&(viewValue!==''||!this.$$hasNativeValidators)){return;}this.$$updateEmptyClasses(viewValue);this.$$lastCommittedViewValue=viewValue;// change to dirty
if(this.$pristine){this.$setDirty();}this.$$parseAndValidate();},$$parseAndValidate:function(){var viewValue=this.$$lastCommittedViewValue;var modelValue=viewValue;var that=this;this.$$parserValid=isUndefined(modelValue)?undefined:true;if(this.$$parserValid){for(var i=0;i<this.$parsers.length;i++){modelValue=this.$parsers[i](modelValue);if(isUndefined(modelValue)){this.$$parserValid=false;break;}}}if(isNumberNaN(this.$modelValue)){// this.$modelValue has not been touched yet...
this.$modelValue=this.$$ngModelGet(this.$$scope);}var prevModelValue=this.$modelValue;var allowInvalid=this.$options.getOption('allowInvalid');this.$$rawModelValue=modelValue;if(allowInvalid){this.$modelValue=modelValue;writeToModelIfNeeded();}// Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
// This can happen if e.g. $setViewValue is called from inside a parser
this.$$runValidators(modelValue,this.$$lastCommittedViewValue,function(allValid){if(!allowInvalid){// Note: Don't check this.$valid here, as we could have
// external validators (e.g. calculated on the server),
// that just call $setValidity and need the model value
// to calculate their validity.
that.$modelValue=allValid?modelValue:undefined;writeToModelIfNeeded();}});function writeToModelIfNeeded(){if(that.$modelValue!==prevModelValue){that.$$writeModelToScope();}}},$$writeModelToScope:function(){this.$$ngModelSet(this.$$scope,this.$modelValue);forEach(this.$viewChangeListeners,function(listener){try{listener();}catch(e){// eslint-disable-next-line no-invalid-this
this.$$exceptionHandler(e);}},this);},/**
   * @ngdoc method
   * @name ngModel.NgModelController#$setViewValue
   *
   * @description
   * Update the view value.
   *
   * This method should be called when a control wants to change the view value; typically,
   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
   * directive calls it when the value of the input changes and {@link ng.directive:select select}
   * calls it when an option is selected.
   *
   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
   * value is sent directly for processing through the `$parsers` pipeline. After this, the `$validators` and
   * `$asyncValidators` are called and the value is applied to `$modelValue`.
   * Finally, the value is set to the **expression** specified in the `ng-model` attribute and
   * all the registered change listeners, in the `$viewChangeListeners` list are called.
   *
   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
   * and the `default` trigger is not listed, all those actions will remain pending until one of the
   * `updateOn` events is triggered on the DOM element.
   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
   * directive is used with a custom debounce for this particular event.
   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
   * is specified, once the timer runs out.
   *
   * When used with standard inputs, the view value will always be a string (which is in some cases
   * parsed into another type, such as a `Date` object for `input[date]`.)
   * However, custom controls might also pass objects to this method. In this case, we should make
   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
   * perform a deep watch of objects, it only looks for a change of identity. If you only change
   * the property of the object then ngModel will not realize that the object has changed and
   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
   * not change properties of the copy once it has been passed to `$setViewValue`.
   * Otherwise you may cause the model value on the scope to change incorrectly.
   *
   * <div class="alert alert-info">
   * In any case, the value passed to the method should always reflect the current value
   * of the control. For example, if you are calling `$setViewValue` for an input element,
   * you should pass the input DOM value. Otherwise, the control and the scope model become
   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
   * the control's DOM value in any way. If we want to change the control's DOM value
   * programmatically, we should update the `ngModel` scope expression. Its new value will be
   * picked up by the model controller, which will run it through the `$formatters`, `$render` it
   * to update the DOM, and finally call `$validate` on it.
   * </div>
   *
   * @param {*} value value from the view.
   * @param {string} trigger Event that triggered the update.
   */$setViewValue:function(value,trigger){this.$viewValue=value;if(this.$options.getOption('updateOnDefault')){this.$$debounceViewValueCommit(trigger);}},$$debounceViewValueCommit:function(trigger){var debounceDelay=this.$options.getOption('debounce');if(isNumber(debounceDelay[trigger])){debounceDelay=debounceDelay[trigger];}else if(isNumber(debounceDelay['default'])){debounceDelay=debounceDelay['default'];}this.$$timeout.cancel(this.$$pendingDebounce);var that=this;if(debounceDelay>0){// this fails if debounceDelay is an object
this.$$pendingDebounce=this.$$timeout(function(){that.$commitViewValue();},debounceDelay);}else if(this.$$scope.$root.$$phase){this.$commitViewValue();}else{this.$$scope.$apply(function(){that.$commitViewValue();});}},/**
   * @ngdoc method
   *
   * @name ngModel.NgModelController#$overrideModelOptions
   *
   * @description
   *
   * Override the current model options settings programmatically.
   *
   * The previous `ModelOptions` value will not be modified. Instead, a
   * new `ModelOptions` object will inherit from the previous one overriding
   * or inheriting settings that are defined in the given parameter.
   *
   * See {@link ngModelOptions} for information about what options can be specified
   * and how model option inheritance works.
   *
   * @param {Object} options a hash of settings to override the previous options
   *
   */$overrideModelOptions:function(options){this.$options=this.$options.createChild(options);}};function setupModelWatcher(ctrl){// model -> value
// Note: we cannot use a normal scope.$watch as we want to detect the following:
// 1. scope value is 'a'
// 2. user enters 'b'
// 3. ng-change kicks in and reverts scope value to 'a'
//    -> scope value did not change since the last digest as
//       ng-change executes in apply phase
// 4. view should be changed back to 'a'
ctrl.$$scope.$watch(function ngModelWatch(scope){var modelValue=ctrl.$$ngModelGet(scope);// if scope model value and ngModel value are out of sync
// TODO(perf): why not move this to the action fn?
if(modelValue!==ctrl.$modelValue&&(// checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
// eslint-disable-next-line no-self-compare
ctrl.$modelValue===ctrl.$modelValue||modelValue===modelValue)){ctrl.$modelValue=ctrl.$$rawModelValue=modelValue;ctrl.$$parserValid=undefined;var formatters=ctrl.$formatters,idx=formatters.length;var viewValue=modelValue;while(idx--){viewValue=formatters[idx](viewValue);}if(ctrl.$viewValue!==viewValue){ctrl.$$updateEmptyClasses(viewValue);ctrl.$viewValue=ctrl.$$lastCommittedViewValue=viewValue;ctrl.$render();// It is possible that model and view value have been updated during render
ctrl.$$runValidators(ctrl.$modelValue,ctrl.$viewValue,noop);}}return modelValue;});}/**
 * @ngdoc method
 * @name ngModel.NgModelController#$setValidity
 *
 * @description
 * Change the validity state, and notify the form.
 *
 * This method can be called within $parsers/$formatters or a custom validation implementation.
 * However, in most cases it should be sufficient to use the `ngModel.$validators` and
 * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
 *
 * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
 *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
 *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
 *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
 *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
 *        classes and can be bound to as `{{ someForm.someControl.$error.myError }}`.
 * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
 *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
 *                          Skipped is used by Angular when validators do not run because of parse errors and
 *                          when `$asyncValidators` do not run because any of the `$validators` failed.
 */addSetValidityMethod({clazz:NgModelController,set:function(object,property){object[property]=true;},unset:function(object,property){delete object[property];}});/**
 * @ngdoc directive
 * @name ngModel
 *
 * @element input
 * @priority 1
 *
 * @description
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
 * property on the scope using {@link ngModel.NgModelController NgModelController},
 * which is created and exposed by this directive.
 *
 * `ngModel` is responsible for:
 *
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
 *   require.
 * - Providing validation behavior (i.e. required, number, email, url).
 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`,
 *   `ng-untouched`, `ng-empty`, `ng-not-empty`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.
 *
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
 * current scope. If the property doesn't already exist on this scope, it will be created
 * implicitly and added to the scope.
 *
 * For best practices on using `ngModel`, see:
 *
 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
 *
 * For basic examples, how to use `ngModel`, see:
 *
 *  - {@link ng.directive:input input}
 *    - {@link input[text] text}
 *    - {@link input[checkbox] checkbox}
 *    - {@link input[radio] radio}
 *    - {@link input[number] number}
 *    - {@link input[email] email}
 *    - {@link input[url] url}
 *    - {@link input[date] date}
 *    - {@link input[datetime-local] datetime-local}
 *    - {@link input[time] time}
 *    - {@link input[month] month}
 *    - {@link input[week] week}
 *  - {@link ng.directive:select select}
 *  - {@link ng.directive:textarea textarea}
 *
 * # Complex Models (objects or collections)
 *
 * By default, `ngModel` watches the model by reference, not value. This is important to know when
 * binding inputs to models that are objects (e.g. `Date`) or collections (e.g. arrays). If only properties of the
 * object or collection change, `ngModel` will not be notified and so the input will not be  re-rendered.
 *
 * The model must be assigned an entirely new object or collection before a re-rendering will occur.
 *
 * Some directives have options that will cause them to use a custom `$watchCollection` on the model expression
 * - for example, `ngOptions` will do so when a `track by` clause is included in the comprehension expression or
 * if the select is given the `multiple` attribute.
 *
 * The `$watchCollection()` method only does a shallow comparison, meaning that changing properties deeper than the
 * first level of the object (or only changing the properties of an item in the collection if it's an array) will still
 * not trigger a re-rendering of the model.
 *
 * # CSS classes
 * The following CSS classes are added and removed on the associated input/select/textarea element
 * depending on the validity of the model.
 *
 *  - `ng-valid`: the model is valid
 *  - `ng-invalid`: the model is invalid
 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
 *  - `ng-pristine`: the control hasn't been interacted with yet
 *  - `ng-dirty`: the control has been interacted with
 *  - `ng-touched`: the control has been blurred
 *  - `ng-untouched`: the control hasn't been blurred
 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
 *  - `ng-empty`: the view does not contain a value or the value is deemed "empty", as defined
 *     by the {@link ngModel.NgModelController#$isEmpty} method
 *  - `ng-not-empty`: the view contains a non-empty value
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 * ## Animation Hooks
 *
 * Animations within models are triggered when any of the associated CSS classes are added and removed
 * on the input element which is attached to the model. These classes include: `.ng-pristine`, `.ng-dirty`,
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
 * The animations that are triggered within ngModel are similar to how they work in ngClass and
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style an input element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-input {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-input.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample" name="ng-model">
     <file name="index.html">
       <script>
        angular.module('inputExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.val = '1';
          }]);
       </script>
       <style>
         .my-input {
           transition:all linear 0.5s;
           background: transparent;
         }
         .my-input.ng-invalid {
           color:white;
           background: red;
         }
       </style>
       <p id="inputDescription">
        Update input to see transitions when valid/invalid.
        Integer is a valid value.
       </p>
       <form name="testForm" ng-controller="ExampleController">
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
                aria-describedby="inputDescription" />
       </form>
     </file>
 * </example>
 *
 * ## Binding to a getter/setter
 *
 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
 * function that returns a representation of the model when called with zero arguments, and sets
 * the internal state of a model when called with an argument. It's sometimes useful to use this
 * for models that have an internal representation that's different from what the model exposes
 * to the view.
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
 * frequently than other parts of your code.
 * </div>
 *
 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
 *
 * The following example shows how to use `ngModel` with a getter/setter:
 *
 * @example
 * <example name="ngModel-getter-setter" module="getterSetterExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <form name="userForm">
           <label>Name:
             <input type="text" name="userName"
                    ng-model="user.name"
                    ng-model-options="{ getterSetter: true }" />
           </label>
         </form>
         <pre>user.name = <span ng-bind="user.name()"></span></pre>
       </div>
     </file>
     <file name="app.js">
       angular.module('getterSetterExample', [])
         .controller('ExampleController', ['$scope', function($scope) {
           var _name = 'Brian';
           $scope.user = {
             name: function(newName) {
              // Note that newName can be undefined for two reasons:
              // 1. Because it is called as a getter and thus called with no arguments
              // 2. Because the property should actually be set to undefined. This happens e.g. if the
              //    input is invalid
              return arguments.length ? (_name = newName) : _name;
             }
           };
         }]);
     </file>
 * </example>
 */var ngModelDirective=['$rootScope',function($rootScope){return{restrict:'A',require:['ngModel','^?form','^?ngModelOptions'],controller:NgModelController,// Prelink needs to run before any input directive
// so that we can set the NgModelOptions in NgModelController
// before anyone else uses it.
priority:1,compile:function ngModelCompile(element){// Setup initial state of the control
element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);return{pre:function ngModelPreLink(scope,element,attr,ctrls){var modelCtrl=ctrls[0],formCtrl=ctrls[1]||modelCtrl.$$parentForm,optionsCtrl=ctrls[2];if(optionsCtrl){modelCtrl.$options=optionsCtrl.$options;}modelCtrl.$$initGetterSetters();// notify others, especially parent forms
formCtrl.$addControl(modelCtrl);attr.$observe('name',function(newValue){if(modelCtrl.$name!==newValue){modelCtrl.$$parentForm.$$renameControl(modelCtrl,newValue);}});scope.$on('$destroy',function(){modelCtrl.$$parentForm.$removeControl(modelCtrl);});},post:function ngModelPostLink(scope,element,attr,ctrls){var modelCtrl=ctrls[0];if(modelCtrl.$options.getOption('updateOn')){element.on(modelCtrl.$options.getOption('updateOn'),function(ev){modelCtrl.$$debounceViewValueCommit(ev&&ev.type);});}function setTouched(){modelCtrl.$setTouched();}element.on('blur',function(){if(modelCtrl.$touched)return;if($rootScope.$$phase){scope.$evalAsync(setTouched);}else{scope.$apply(setTouched);}});}};}};}];/* exported defaultModelOptions */var defaultModelOptions;var DEFAULT_REGEXP=/(\s+|^)default(\s+|$)/;/**
 * @ngdoc type
 * @name ModelOptions
 * @description
 * A container for the options set by the {@link ngModelOptions} directive
 */function ModelOptions(options){this.$$options=options;}ModelOptions.prototype={/**
   * @ngdoc method
   * @name ModelOptions#getOption
   * @param {string} name the name of the option to retrieve
   * @returns {*} the value of the option
   * @description
   * Returns the value of the given option
   */getOption:function(name){return this.$$options[name];},/**
   * @ngdoc method
   * @name ModelOptions#createChild
   * @param {Object} options a hash of options for the new child that will override the parent's options
   * @return {ModelOptions} a new `ModelOptions` object initialized with the given options.
   */createChild:function(options){var inheritAll=false;// make a shallow copy
options=extend({},options);// Inherit options from the parent if specified by the value `"$inherit"`
forEach(options,/* @this */function(option,key){if(option==='$inherit'){if(key==='*'){inheritAll=true;}else{options[key]=this.$$options[key];// `updateOn` is special so we must also inherit the `updateOnDefault` option
if(key==='updateOn'){options.updateOnDefault=this.$$options.updateOnDefault;}}}else{if(key==='updateOn'){// If the `updateOn` property contains the `default` event then we have to remove
// it from the event list and set the `updateOnDefault` flag.
options.updateOnDefault=false;options[key]=trim(option.replace(DEFAULT_REGEXP,function(){options.updateOnDefault=true;return' ';}));}}},this);if(inheritAll){// We have a property of the form: `"*": "$inherit"`
delete options['*'];defaults(options,this.$$options);}// Finally add in any missing defaults
defaults(options,defaultModelOptions.$$options);return new ModelOptions(options);}};defaultModelOptions=new ModelOptions({updateOn:'',updateOnDefault:true,debounce:0,getterSetter:false,allowInvalid:false,timezone:null});/**
 * @ngdoc directive
 * @name ngModelOptions
 *
 * @description
 * This directive allows you to modify the behaviour of {@link ngModel} directives within your
 * application. You can specify an `ngModelOptions` directive on any element. All {@link ngModel}
 * directives will use the options of their nearest `ngModelOptions` ancestor.
 *
 * The `ngModelOptions` settings are found by evaluating the value of the attribute directive as
 * an Angular expression. This expression should evaluate to an object, whose properties contain
 * the settings. For example: `<div "ng-model-options"="{ debounce: 100 }"`.
 *
 * ## Inheriting Options
 *
 * You can specify that an `ngModelOptions` setting should be inherited from a parent `ngModelOptions`
 * directive by giving it the value of `"$inherit"`.
 * Then it will inherit that setting from the first `ngModelOptions` directive found by traversing up the
 * DOM tree. If there is no ancestor element containing an `ngModelOptions` directive then default settings
 * will be used.
 *
 * For example given the following fragment of HTML
 *
 *
 * ```html
 * <div ng-model-options="{ allowInvalid: true, debounce: 200 }">
 *   <form ng-model-options="{ updateOn: 'blur', allowInvalid: '$inherit' }">
 *     <input ng-model-options="{ updateOn: 'default', allowInvalid: '$inherit' }" />
 *   </form>
 * </div>
 * ```
 *
 * the `input` element will have the following settings
 *
 * ```js
 * { allowInvalid: true, updateOn: 'default', debounce: 0 }
 * ```
 *
 * Notice that the `debounce` setting was not inherited and used the default value instead.
 *
 * You can specify that all undefined settings are automatically inherited from an ancestor by
 * including a property with key of `"*"` and value of `"$inherit"`.
 *
 * For example given the following fragment of HTML
 *
 *
 * ```html
 * <div ng-model-options="{ allowInvalid: true, debounce: 200 }">
 *   <form ng-model-options="{ updateOn: 'blur', "*": '$inherit' }">
 *     <input ng-model-options="{ updateOn: 'default', "*": '$inherit' }" />
 *   </form>
 * </div>
 * ```
 *
 * the `input` element will have the following settings
 *
 * ```js
 * { allowInvalid: true, updateOn: 'default', debounce: 200 }
 * ```
 *
 * Notice that the `debounce` setting now inherits the value from the outer `<div>` element.
 *
 * If you are creating a reusable component then you should be careful when using `"*": "$inherit"`
 * since you may inadvertently inherit a setting in the future that changes the behavior of your component.
 *
 *
 * ## Triggering and debouncing model updates
 *
 * The `updateOn` and `debounce` properties allow you to specify a custom list of events that will
 * trigger a model update and/or a debouncing delay so that the actual update only takes place when
 * a timer expires; this timer will be reset after another change takes place.
 *
 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
 * be different from the value in the actual model. This means that if you update the model you
 * should also invoke {@link ngModel.NgModelController#$rollbackViewValue} on the relevant input field in
 * order to make sure it is synchronized with the model and that any debounced action is canceled.
 *
 * The easiest way to reference the control's {@link ngModel.NgModelController#$rollbackViewValue}
 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
 * important because `form` controllers are published to the related scope under the name in their
 * `name` attribute.
 *
 * Any pending changes will take place immediately when an enclosing form is submitted via the
 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * The following example shows how to override immediate updates. Changes on the inputs within the
 * form will update the model only when the control loses focus (blur event). If `escape` key is
 * pressed while the input field is focused, the value is reset to the value in the current model.
 *
 * <example name="ngModelOptions-directive-blur" module="optionsExample">
 *   <file name="index.html">
 *     <div ng-controller="ExampleController">
 *       <form name="userForm">
 *         <label>
 *           Name:
 *           <input type="text" name="userName"
 *                  ng-model="user.name"
 *                  ng-model-options="{ updateOn: 'blur' }"
 *                  ng-keyup="cancel($event)" />
 *         </label><br />
 *         <label>
 *           Other data:
 *           <input type="text" ng-model="user.data" />
 *         </label><br />
 *       </form>
 *       <pre>user.name = <span ng-bind="user.name"></span></pre>
 *     </div>
 *   </file>
 *   <file name="app.js">
 *     angular.module('optionsExample', [])
 *       .controller('ExampleController', ['$scope', function($scope) {
 *         $scope.user = { name: 'say', data: '' };
 *
 *         $scope.cancel = function(e) {
 *           if (e.keyCode === 27) {
 *             $scope.userForm.userName.$rollbackViewValue();
 *           }
 *         };
 *       }]);
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var model = element(by.binding('user.name'));
 *     var input = element(by.model('user.name'));
 *     var other = element(by.model('user.data'));
 *
 *     it('should allow custom events', function() {
 *       input.sendKeys(' hello');
 *       input.click();
 *       expect(model.getText()).toEqual('say');
 *       other.click();
 *       expect(model.getText()).toEqual('say hello');
 *     });
 *
 *     it('should $rollbackViewValue when model changes', function() {
 *       input.sendKeys(' hello');
 *       expect(input.getAttribute('value')).toEqual('say hello');
 *       input.sendKeys(protractor.Key.ESCAPE);
 *       expect(input.getAttribute('value')).toEqual('say');
 *       other.click();
 *       expect(model.getText()).toEqual('say');
 *     });
 *   </file>
 * </example>
 *
 * The next example shows how to debounce model changes. Model will be updated only 1 sec after last change.
 * If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.
 *
 * <example name="ngModelOptions-directive-debounce" module="optionsExample">
 *   <file name="index.html">
 *     <div ng-controller="ExampleController">
 *       <form name="userForm">
 *         Name:
 *         <input type="text" name="userName"
 *                ng-model="user.name"
 *                ng-model-options="{ debounce: 1000 }" />
 *         <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button><br />
 *       </form>
 *       <pre>user.name = <span ng-bind="user.name"></span></pre>
 *     </div>
 *   </file>
 *   <file name="app.js">
 *     angular.module('optionsExample', [])
 *       .controller('ExampleController', ['$scope', function($scope) {
 *         $scope.user = { name: 'say' };
 *       }]);
 *   </file>
 * </example>
 *
 * ## Model updates and validation
 *
 * The default behaviour in `ngModel` is that the model value is set to `undefined` when the
 * validation determines that the value is invalid. By setting the `allowInvalid` property to true,
 * the model will still be updated even if the value is invalid.
 *
 *
 * ## Connecting to the scope
 *
 * By setting the `getterSetter` property to true you are telling ngModel that the `ngModel` expression
 * on the scope refers to a "getter/setter" function rather than the value itself.
 *
 * The following example shows how to bind to getter/setters:
 *
 * <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
 *   <file name="index.html">
 *     <div ng-controller="ExampleController">
 *       <form name="userForm">
 *         <label>
 *           Name:
 *           <input type="text" name="userName"
 *                  ng-model="user.name"
 *                  ng-model-options="{ getterSetter: true }" />
 *         </label>
 *       </form>
 *       <pre>user.name = <span ng-bind="user.name()"></span></pre>
 *     </div>
 *   </file>
 *   <file name="app.js">
 *     angular.module('getterSetterExample', [])
 *       .controller('ExampleController', ['$scope', function($scope) {
 *         var _name = 'Brian';
 *         $scope.user = {
 *           name: function(newName) {
 *             return angular.isDefined(newName) ? (_name = newName) : _name;
 *           }
 *         };
 *       }]);
 *   </file>
 * </example>
 *
 *
 * ## Specifying timezones
 *
 * You can specify the timezone that date/time input directives expect by providing its name in the
 * `timezone` property.
 *
 * @param {Object} ngModelOptions options to apply to {@link ngModel} directives on this element and
 *   and its descendents. Valid keys are:
 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
 *     events using an space delimited list. There is a special event called `default` that
 *     matches the default events belonging to the control.
 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
 *     custom value for each event. For example:
 *     ```
 *     ng-model-options="{
 *       updateOn: 'default blur',
 *       debounce: { 'default': 500, 'blur': 0 }
 *     }"
 *     ```
 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
 *     not validate correctly instead of the default behavior of setting the model to undefined.
 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
 *     `ngModel` as getters/setters.
 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
 *     `<input type="date" />`, `<input type="time" />`, ... . It understands UTC/GMT and the
 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
 *     If not specified, the timezone of the browser will be used.
 *
 */var ngModelOptionsDirective=function(){NgModelOptionsController.$inject=['$attrs','$scope'];function NgModelOptionsController($attrs,$scope){this.$$attrs=$attrs;this.$$scope=$scope;}NgModelOptionsController.prototype={$onInit:function(){var parentOptions=this.parentCtrl?this.parentCtrl.$options:defaultModelOptions;var modelOptionsDefinition=this.$$scope.$eval(this.$$attrs.ngModelOptions);this.$options=parentOptions.createChild(modelOptionsDefinition);}};return{restrict:'A',// ngModelOptions needs to run before ngModel and input directives
priority:10,require:{parentCtrl:'?^^ngModelOptions'},bindToController:true,controller:NgModelOptionsController};};// shallow copy over values from `src` that are not already specified on `dst`
function defaults(dst,src){forEach(src,function(value,key){if(!isDefined(dst[key])){dst[key]=value;}});}/**
 * @ngdoc directive
 * @name ngNonBindable
 * @restrict AC
 * @priority 1000
 *
 * @description
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
 * DOM element. This is useful if the element contains what appears to be Angular directives and
 * bindings but which should be ignored by Angular. This could be the case if you have a site that
 * displays snippets of code, for instance.
 *
 * @element ANY
 *
 * @example
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
 * but the one wrapped in `ngNonBindable` is left alone.
 *
 * @example
    <example name="ng-non-bindable">
      <file name="index.html">
        <div>Normal: {{1 + 2}}</div>
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
      </file>
      <file name="protractor.js" type="protractor">
       it('should check ng-non-bindable', function() {
         expect(element(by.binding('1 + 2')).getText()).toContain('3');
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
       });
      </file>
    </example>
 */var ngNonBindableDirective=ngDirective({terminal:true,priority:1000});/* exported ngOptionsDirective *//* global jqLiteRemove */var ngOptionsMinErr=minErr('ngOptions');/**
 * @ngdoc directive
 * @name ngOptions
 * @restrict A
 *
 * @description
 *
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
 * elements for the `<select>` element using the array or object obtained by evaluating the
 * `ngOptions` comprehension expression.
 *
 * In many cases, {@link ng.directive:ngRepeat ngRepeat} can be used on `<option>` elements instead of
 * `ngOptions` to achieve a similar result. However, `ngOptions` provides some benefits:
 * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
 * comprehension expression
 * - reduced memory consumption by not creating a new scope for each repeated instance
 * - increased render speed by creating the options in a documentFragment instead of individually
 *
 * When an item in the `<select>` menu is selected, the array element or object property
 * represented by the selected option will be bound to the model identified by the `ngModel`
 * directive.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * ## Complex Models (objects or collections)
 *
 * By default, `ngModel` watches the model by reference, not value. This is important to know when
 * binding the select to a model that is an object or a collection.
 *
 * One issue occurs if you want to preselect an option. For example, if you set
 * the model to an object that is equal to an object in your collection, `ngOptions` won't be able to set the selection,
 * because the objects are not identical. So by default, you should always reference the item in your collection
 * for preselections, e.g.: `$scope.selected = $scope.collection[3]`.
 *
 * Another solution is to use a `track by` clause, because then `ngOptions` will track the identity
 * of the item not by reference, but by the result of the `track by` expression. For example, if your
 * collection items have an id property, you would `track by item.id`.
 *
 * A different issue with objects or collections is that ngModel won't detect if an object property or
 * a collection item changes. For that reason, `ngOptions` additionally watches the model using
 * `$watchCollection`, when the expression contains a `track by` clause or the the select has the `multiple` attribute.
 * This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection
 * has not changed identity, but only a property on the object or an item in the collection changes.
 *
 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
 * if the model is an array). This means that changing a property deeper than the first level inside the
 * object/collection will not trigger a re-rendering.
 *
 * ## `select` **`as`**
 *
 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
 *
 *
 * ### `select` **`as`** and **`track by`**
 *
 * <div class="alert alert-warning">
 * Be careful when using `select` **`as`** and **`track by`** in the same expression.
 * </div>
 *
 * Given this array of items on the $scope:
 *
 * ```js
 * $scope.items = [{
 *   id: 1,
 *   label: 'aLabel',
 *   subItem: { name: 'aSubItem' }
 * }, {
 *   id: 2,
 *   label: 'bLabel',
 *   subItem: { name: 'bSubItem' }
 * }];
 * ```
 *
 * This will work:
 *
 * ```html
 * <select ng-options="item as item.label for item in items track by item.id" ng-model="selected"></select>
 * ```
 * ```js
 * $scope.selected = $scope.items[0];
 * ```
 *
 * but this will not work:
 *
 * ```html
 * <select ng-options="item.subItem as item.label for item in items track by item.id" ng-model="selected"></select>
 * ```
 * ```js
 * $scope.selected = $scope.items[0].subItem;
 * ```
 *
 * In both examples, the **`track by`** expression is applied successfully to each `item` in the
 * `items` array. Because the selected option has been set programmatically in the controller, the
 * **`track by`** expression is also applied to the `ngModel` value. In the first example, the
 * `ngModel` value is `items[0]` and the **`track by`** expression evaluates to `items[0].id` with
 * no issue. In the second example, the `ngModel` value is `items[0].subItem` and the **`track by`**
 * expression evaluates to `items[0].subItem.id` (which is undefined). As a result, the model value
 * is not matched against any `<option>` and the `<select>` appears as having no selected value.
 *
 *
 * @param {string} ngModel Assignable AngularJS expression to data-bind to.
 * @param {comprehension_expression} ngOptions in one of the following forms:
 *
 *   * for array data sources:
 *     * `label` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
 *        (for including a filter with `track by`)
 *   * for object data sources:
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`group by`** `group`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`disable when`** `disable`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *
 * Where:
 *
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
 *   * `value`: local variable which will refer to each item in the `array` or each property value
 *      of `object` during iteration.
 *   * `key`: local variable which will refer to a property name in `object` during iteration.
 *   * `label`: The result of this expression will be the label for `<option>` element. The
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
 *      element. If not specified, `select` expression will default to `value`.
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
 *      DOM element.
 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
 *      element. Return `true` to disable.
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
 *      even when the options are recreated (e.g. reloaded from the server).
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required The control is considered valid only if value is entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {string=} ngAttrSize sets the size of the select element dynamically. Uses the
 * {@link guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes ngAttr} directive.
 *
 * @example
    <example module="selectExample" name="select">
      <file name="index.html">
        <script>
        angular.module('selectExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.colors = [
              {name:'black', shade:'dark'},
              {name:'white', shade:'light', notAnOption: true},
              {name:'red', shade:'dark'},
              {name:'blue', shade:'dark', notAnOption: true},
              {name:'yellow', shade:'light', notAnOption: false}
            ];
            $scope.myColor = $scope.colors[2]; // red
          }]);
        </script>
        <div ng-controller="ExampleController">
          <ul>
            <li ng-repeat="color in colors">
              <label>Name: <input ng-model="color.name"></label>
              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
            </li>
            <li>
              <button ng-click="colors.push({})">add</button>
            </li>
          </ul>
          <hr/>
          <label>Color (null not allowed):
            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
          </label><br/>
          <label>Color (null allowed):
          <span  class="nullable">
            <select ng-model="myColor" ng-options="color.name for color in colors">
              <option value="">-- choose color --</option>
            </select>
          </span></label><br/>

          <label>Color grouped by shade:
            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
            </select>
          </label><br/>

          <label>Color grouped by shade, with some disabled:
            <select ng-model="myColor"
                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
            </select>
          </label><br/>



          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
          <br/>
          <hr/>
          Currently selected: {{ {selected_color:myColor} }}
          <div style="border:solid 1px black; height:20px"
               ng-style="{'background-color':myColor.name}">
          </div>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
         it('should check ng-options', function() {
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
           element.all(by.model('myColor')).first().click();
           element.all(by.css('select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
           element(by.css('.nullable select[ng-model="myColor"]')).click();
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
         });
      </file>
    </example>
 *//* eslint-disable max-len *///                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555000000000666666666666600000007777777777777000000000000000888888888800000000000000000009999999999
var NG_OPTIONS_REGEXP=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;// 1: value expression (valueFn)
// 2: label expression (displayFn)
// 3: group by expression (groupByFn)
// 4: disable when expression (disableWhenFn)
// 5: array item variable name
// 6: object item key variable name
// 7: object item value variable name
// 8: collection expression
// 9: track by expression
/* eslint-enable */var ngOptionsDirective=['$compile','$document','$parse',function($compile,$document,$parse){function parseOptionsExpression(optionsExp,selectElement,scope){var match=optionsExp.match(NG_OPTIONS_REGEXP);if(!match){throw ngOptionsMinErr('iexp','Expected expression in form of '+'\'_select_ (as _label_)? for (_key_,)?_value_ in _collection_\''+' but got \'{0}\'. Element: {1}',optionsExp,startingTag(selectElement));}// Extract the parts from the ngOptions expression
// The variable name for the value of the item in the collection
var valueName=match[5]||match[7];// The variable name for the key of the item in the collection
var keyName=match[6];// An expression that generates the viewValue for an option if there is a label expression
var selectAs=/ as /.test(match[0])&&match[1];// An expression that is used to track the id of each object in the options collection
var trackBy=match[9];// An expression that generates the viewValue for an option if there is no label expression
var valueFn=$parse(match[2]?match[1]:valueName);var selectAsFn=selectAs&&$parse(selectAs);var viewValueFn=selectAsFn||valueFn;var trackByFn=trackBy&&$parse(trackBy);// Get the value by which we are going to track the option
// if we have a trackFn then use that (passing scope and locals)
// otherwise just hash the given viewValue
var getTrackByValueFn=trackBy?function(value,locals){return trackByFn(scope,locals);}:function getHashOfValue(value){return hashKey(value);};var getTrackByValue=function(value,key){return getTrackByValueFn(value,getLocals(value,key));};var displayFn=$parse(match[2]||match[1]);var groupByFn=$parse(match[3]||'');var disableWhenFn=$parse(match[4]||'');var valuesFn=$parse(match[8]);var locals={};var getLocals=keyName?function(value,key){locals[keyName]=key;locals[valueName]=value;return locals;}:function(value){locals[valueName]=value;return locals;};function Option(selectValue,viewValue,label,group,disabled){this.selectValue=selectValue;this.viewValue=viewValue;this.label=label;this.group=group;this.disabled=disabled;}function getOptionValuesKeys(optionValues){var optionValuesKeys;if(!keyName&&isArrayLike(optionValues)){optionValuesKeys=optionValues;}else{// if object, extract keys, in enumeration order, unsorted
optionValuesKeys=[];for(var itemKey in optionValues){if(optionValues.hasOwnProperty(itemKey)&&itemKey.charAt(0)!=='$'){optionValuesKeys.push(itemKey);}}}return optionValuesKeys;}return{trackBy:trackBy,getTrackByValue:getTrackByValue,getWatchables:$parse(valuesFn,function(optionValues){// Create a collection of things that we would like to watch (watchedArray)
// so that they can all be watched using a single $watchCollection
// that only runs the handler once if anything changes
var watchedArray=[];optionValues=optionValues||[];var optionValuesKeys=getOptionValuesKeys(optionValues);var optionValuesLength=optionValuesKeys.length;for(var index=0;index<optionValuesLength;index++){var key=optionValues===optionValuesKeys?index:optionValuesKeys[index];var value=optionValues[key];var locals=getLocals(value,key);var selectValue=getTrackByValueFn(value,locals);watchedArray.push(selectValue);// Only need to watch the displayFn if there is a specific label expression
if(match[2]||match[1]){var label=displayFn(scope,locals);watchedArray.push(label);}// Only need to watch the disableWhenFn if there is a specific disable expression
if(match[4]){var disableWhen=disableWhenFn(scope,locals);watchedArray.push(disableWhen);}}return watchedArray;}),getOptions:function(){var optionItems=[];var selectValueMap={};// The option values were already computed in the `getWatchables` fn,
// which must have been called to trigger `getOptions`
var optionValues=valuesFn(scope)||[];var optionValuesKeys=getOptionValuesKeys(optionValues);var optionValuesLength=optionValuesKeys.length;for(var index=0;index<optionValuesLength;index++){var key=optionValues===optionValuesKeys?index:optionValuesKeys[index];var value=optionValues[key];var locals=getLocals(value,key);var viewValue=viewValueFn(scope,locals);var selectValue=getTrackByValueFn(viewValue,locals);var label=displayFn(scope,locals);var group=groupByFn(scope,locals);var disabled=disableWhenFn(scope,locals);var optionItem=new Option(selectValue,viewValue,label,group,disabled);optionItems.push(optionItem);selectValueMap[selectValue]=optionItem;}return{items:optionItems,selectValueMap:selectValueMap,getOptionFromViewValue:function(value){return selectValueMap[getTrackByValue(value)];},getViewValueFromOption:function(option){// If the viewValue could be an object that may be mutated by the application,
// we need to make a copy and not return the reference to the value on the option.
return trackBy?copy(option.viewValue):option.viewValue;}};}};}// Support: IE 9 only
// We can't just jqLite('<option>') since jqLite is not smart enough
// to create it in <select> and IE barfs otherwise.
var optionTemplate=window.document.createElement('option'),optGroupTemplate=window.document.createElement('optgroup');function ngOptionsPostLink(scope,selectElement,attr,ctrls){var selectCtrl=ctrls[0];var ngModelCtrl=ctrls[1];var multiple=attr.multiple;// The emptyOption allows the application developer to provide their own custom "empty"
// option when the viewValue does not match any of the option values.
for(var i=0,children=selectElement.children(),ii=children.length;i<ii;i++){if(children[i].value===''){selectCtrl.hasEmptyOption=true;selectCtrl.emptyOption=children.eq(i);break;}}// The empty option will be compiled and rendered before we first generate the options
selectElement.empty();var providedEmptyOption=!!selectCtrl.emptyOption;var unknownOption=jqLite(optionTemplate.cloneNode(false));unknownOption.val('?');var options;var ngOptions=parseOptionsExpression(attr.ngOptions,selectElement,scope);// This stores the newly created options before they are appended to the select.
// Since the contents are removed from the fragment when it is appended,
// we only need to create it once.
var listFragment=$document[0].createDocumentFragment();// Overwrite the implementation. ngOptions doesn't use hashes
selectCtrl.generateUnknownOptionValue=function(val){return'?';};// Update the controller methods for multiple selectable options
if(!multiple){selectCtrl.writeValue=function writeNgOptionsValue(value){// The options might not be defined yet when ngModel tries to render
if(!options)return;var selectedOption=selectElement[0].options[selectElement[0].selectedIndex];var option=options.getOptionFromViewValue(value);// Make sure to remove the selected attribute from the previously selected option
// Otherwise, screen readers might get confused
if(selectedOption)selectedOption.removeAttribute('selected');if(option){// Don't update the option when it is already selected.
// For example, the browser will select the first option by default. In that case,
// most properties are set automatically - except the `selected` attribute, which we
// set always
if(selectElement[0].value!==option.selectValue){selectCtrl.removeUnknownOption();selectElement[0].value=option.selectValue;option.element.selected=true;}option.element.setAttribute('selected','selected');}else{selectCtrl.selectUnknownOrEmptyOption(value);}};selectCtrl.readValue=function readNgOptionsValue(){var selectedOption=options.selectValueMap[selectElement.val()];if(selectedOption&&!selectedOption.disabled){selectCtrl.unselectEmptyOption();selectCtrl.removeUnknownOption();return options.getViewValueFromOption(selectedOption);}return null;};// If we are using `track by` then we must watch the tracked value on the model
// since ngModel only watches for object identity change
// FIXME: When a user selects an option, this watch will fire needlessly
if(ngOptions.trackBy){scope.$watch(function(){return ngOptions.getTrackByValue(ngModelCtrl.$viewValue);},function(){ngModelCtrl.$render();});}}else{selectCtrl.writeValue=function writeNgOptionsMultiple(values){// The options might not be defined yet when ngModel tries to render
if(!options)return;// Only set `<option>.selected` if necessary, in order to prevent some browsers from
// scrolling to `<option>` elements that are outside the `<select>` element's viewport.
var selectedOptions=values&&values.map(getAndUpdateSelectedOption)||[];options.items.forEach(function(option){if(option.element.selected&&!includes(selectedOptions,option)){option.element.selected=false;}});};selectCtrl.readValue=function readNgOptionsMultiple(){var selectedValues=selectElement.val()||[],selections=[];forEach(selectedValues,function(value){var option=options.selectValueMap[value];if(option&&!option.disabled)selections.push(options.getViewValueFromOption(option));});return selections;};// If we are using `track by` then we must watch these tracked values on the model
// since ngModel only watches for object identity change
if(ngOptions.trackBy){scope.$watchCollection(function(){if(isArray(ngModelCtrl.$viewValue)){return ngModelCtrl.$viewValue.map(function(value){return ngOptions.getTrackByValue(value);});}},function(){ngModelCtrl.$render();});}}if(providedEmptyOption){// compile the element since there might be bindings in it
$compile(selectCtrl.emptyOption)(scope);selectElement.prepend(selectCtrl.emptyOption);if(selectCtrl.emptyOption[0].nodeType===NODE_TYPE_COMMENT){// This means the empty option has currently no actual DOM node, probably because
// it has been modified by a transclusion directive.
selectCtrl.hasEmptyOption=false;// Redefine the registerOption function, which will catch
// options that are added by ngIf etc. (rendering of the node is async because of
// lazy transclusion)
selectCtrl.registerOption=function(optionScope,optionEl){if(optionEl.val()===''){selectCtrl.hasEmptyOption=true;selectCtrl.emptyOption=optionEl;selectCtrl.emptyOption.removeClass('ng-scope');// This ensures the new empty option is selected if previously no option was selected
ngModelCtrl.$render();optionEl.on('$destroy',function(){var needsRerender=selectCtrl.$isEmptyOptionSelected();selectCtrl.hasEmptyOption=false;selectCtrl.emptyOption=undefined;if(needsRerender)ngModelCtrl.$render();});}};}else{// remove the class, which is added automatically because we recompile the element and it
// becomes the compilation root
selectCtrl.emptyOption.removeClass('ng-scope');}}// We will re-render the option elements if the option values or labels change
scope.$watchCollection(ngOptions.getWatchables,updateOptions);// ------------------------------------------------------------------ //
function addOptionElement(option,parent){var optionElement=optionTemplate.cloneNode(false);parent.appendChild(optionElement);updateOptionElement(option,optionElement);}function getAndUpdateSelectedOption(viewValue){var option=options.getOptionFromViewValue(viewValue);var element=option&&option.element;if(element&&!element.selected)element.selected=true;return option;}function updateOptionElement(option,element){option.element=element;element.disabled=option.disabled;// Support: IE 11 only, Edge 12-13 only
// NOTE: The label must be set before the value, otherwise IE 11 & Edge create unresponsive
// selects in certain circumstances when multiple selects are next to each other and display
// the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
// See https://github.com/angular/angular.js/issues/11314 for more info.
// This is unfortunately untestable with unit / e2e tests
if(option.label!==element.label){element.label=option.label;element.textContent=option.label;}element.value=option.selectValue;}function updateOptions(){var previousValue=options&&selectCtrl.readValue();// We must remove all current options, but cannot simply set innerHTML = null
// since the providedEmptyOption might have an ngIf on it that inserts comments which we
// must preserve.
// Instead, iterate over the current option elements and remove them or their optgroup
// parents
if(options){for(var i=options.items.length-1;i>=0;i--){var option=options.items[i];if(isDefined(option.group)){jqLiteRemove(option.element.parentNode);}else{jqLiteRemove(option.element);}}}options=ngOptions.getOptions();var groupElementMap={};options.items.forEach(function addOption(option){var groupElement;if(isDefined(option.group)){// This option is to live in a group
// See if we have already created this group
groupElement=groupElementMap[option.group];if(!groupElement){groupElement=optGroupTemplate.cloneNode(false);listFragment.appendChild(groupElement);// Update the label on the group element
// "null" is special cased because of Safari
groupElement.label=option.group===null?'null':option.group;// Store it for use later
groupElementMap[option.group]=groupElement;}addOptionElement(option,groupElement);}else{// This option is not in a group
addOptionElement(option,listFragment);}});selectElement[0].appendChild(listFragment);ngModelCtrl.$render();// Check to see if the value has changed due to the update to the options
if(!ngModelCtrl.$isEmpty(previousValue)){var nextValue=selectCtrl.readValue();var isNotPrimitive=ngOptions.trackBy||multiple;if(isNotPrimitive?!equals(previousValue,nextValue):previousValue!==nextValue){ngModelCtrl.$setViewValue(nextValue);ngModelCtrl.$render();}}}}return{restrict:'A',terminal:true,require:['select','ngModel'],link:{pre:function ngOptionsPreLink(scope,selectElement,attr,ctrls){// Deactivate the SelectController.register method to prevent
// option directives from accidentally registering themselves
// (and unwanted $destroy handlers etc.)
ctrls[0].registerOption=noop;},post:ngOptionsPostLink}};}];/**
 * @ngdoc directive
 * @name ngPluralize
 * @restrict EA
 *
 * @description
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
 * These rules are bundled with angular.js, but can be overridden
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
 * by specifying the mappings between
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * and the strings to be displayed.
 *
 * # Plural categories and explicit number rules
 * There are two
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * in Angular's default en-US locale: "one" and "other".
 *
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
 * any number that is not 1), an explicit number rule can only match one number. For example, the
 * explicit number rule for "3" matches the number 3. There are examples of plural categories
 * and explicit number rules throughout the rest of this documentation.
 *
 * # Configuring ngPluralize
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
 * You can also provide an optional attribute, `offset`.
 *
 * The value of the `count` attribute can be either a string or an {@link guide/expression
 * Angular expression}; these are evaluated on the current scope for its bound value.
 *
 * The `when` attribute specifies the mappings between plural categories and the actual
 * string to be displayed. The value of the attribute should be a JSON object.
 *
 * The following example shows how to configure ngPluralize:
 *
 * ```html
 * <ng-pluralize count="personCount"
                 when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
 * </ng-pluralize>
 *```
 *
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
 * show "a dozen people are viewing".
 *
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
 * into pluralized strings. In the previous example, Angular will replace `{}` with
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
 * for <span ng-non-bindable>{{numberExpression}}</span>.
 *
 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
 *
 * # Configuring ngPluralize with offset
 * The `offset` attribute allows further customization of pluralized text, which can result in
 * a better user experience. For example, instead of the message "4 people are viewing this document",
 * you might display "John, Kate and 2 others are viewing this document".
 * The offset attribute allows you to offset a number by any desired value.
 * Let's take a look at an example:
 *
 * ```html
 * <ng-pluralize count="personCount" offset=2
 *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
 * </ng-pluralize>
 * ```
 *
 * Notice that we are still using two plural categories(one, other), but we added
 * three explicit number rules 0, 1 and 2.
 * When one person, perhaps John, views the document, "John is viewing" will be shown.
 * When three people view the document, no explicit number rule is found, so
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
 * is shown.
 *
 * Note that when you specify offsets, you must provide explicit number rules for
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
 * plural categories "one" and "other".
 *
 * @param {string|expression} count The variable to be bound to.
 * @param {string} when The mapping between plural category to its corresponding strings.
 * @param {number=} offset Offset to deduct from the total number.
 *
 * @example
    <example module="pluralizeExample" name="ng-pluralize">
      <file name="index.html">
        <script>
          angular.module('pluralizeExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.person1 = 'Igor';
              $scope.person2 = 'Misko';
              $scope.personCount = 1;
            }]);
        </script>
        <div ng-controller="ExampleController">
          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>

          <!--- Example with simple pluralization rules for en locale --->
          Without Offset:
          <ng-pluralize count="personCount"
                        when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
          </ng-pluralize><br>

          <!--- Example with offset --->
          With Offset(2):
          <ng-pluralize count="personCount" offset=2
                        when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
          </ng-pluralize>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
        it('should show correct pluralized string', function() {
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var countInput = element(by.model('personCount'));

          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
          expect(withOffset.getText()).toEqual('Igor is viewing.');

          countInput.clear();
          countInput.sendKeys('0');

          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
          expect(withOffset.getText()).toEqual('Nobody is viewing.');

          countInput.clear();
          countInput.sendKeys('2');

          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

          countInput.clear();
          countInput.sendKeys('3');

          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

          countInput.clear();
          countInput.sendKeys('4');

          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
        });
        it('should show data-bound names', function() {
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var personCount = element(by.model('personCount'));
          var person1 = element(by.model('person1'));
          var person2 = element(by.model('person2'));
          personCount.clear();
          personCount.sendKeys('4');
          person1.clear();
          person1.sendKeys('Di');
          person2.clear();
          person2.sendKeys('Vojta');
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
        });
      </file>
    </example>
 */var ngPluralizeDirective=['$locale','$interpolate','$log',function($locale,$interpolate,$log){var BRACE=/{}/g,IS_WHEN=/^when(Minus)?(.+)$/;return{link:function(scope,element,attr){var numberExp=attr.count,whenExp=attr.$attr.when&&element.attr(attr.$attr.when),// we have {{}} in attrs
offset=attr.offset||0,whens=scope.$eval(whenExp)||{},whensExpFns={},startSymbol=$interpolate.startSymbol(),endSymbol=$interpolate.endSymbol(),braceReplacement=startSymbol+numberExp+'-'+offset+endSymbol,watchRemover=angular.noop,lastCount;forEach(attr,function(expression,attributeName){var tmpMatch=IS_WHEN.exec(attributeName);if(tmpMatch){var whenKey=(tmpMatch[1]?'-':'')+lowercase(tmpMatch[2]);whens[whenKey]=element.attr(attr.$attr[attributeName]);}});forEach(whens,function(expression,key){whensExpFns[key]=$interpolate(expression.replace(BRACE,braceReplacement));});scope.$watch(numberExp,function ngPluralizeWatchAction(newVal){var count=parseFloat(newVal);var countIsNaN=isNumberNaN(count);if(!countIsNaN&&!(count in whens)){// If an explicit number rule such as 1, 2, 3... is defined, just use it.
// Otherwise, check it against pluralization rules in $locale service.
count=$locale.pluralCat(count-offset);}// If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
// In JS `NaN !== NaN`, so we have to explicitly check.
if(count!==lastCount&&!(countIsNaN&&isNumberNaN(lastCount))){watchRemover();var whenExpFn=whensExpFns[count];if(isUndefined(whenExpFn)){if(newVal!=null){$log.debug('ngPluralize: no rule defined for \''+count+'\' in '+whenExp);}watchRemover=noop;updateElementText();}else{watchRemover=scope.$watch(whenExpFn,updateElementText);}lastCount=count;}});function updateElementText(newText){element.text(newText||'');}}};}];/* exported ngRepeatDirective *//**
 * @ngdoc directive
 * @name ngRepeat
 * @multiElement
 * @restrict A
 *
 * @description
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
 * instance gets its own scope, where the given loop variable is set to the current collection item,
 * and `$index` is set to the item index or key.
 *
 * Special properties are exposed on the local scope of each template instance, including:
 *
 * | Variable  | Type            | Details                                                                     |
 * |-----------|-----------------|-----------------------------------------------------------------------------|
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
 *
 * <div class="alert alert-info">
 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
 *   This may be useful when, for instance, nesting ngRepeats.
 * </div>
 *
 *
 * # Iterating over object properties
 *
 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
 * syntax:
 *
 * ```js
 * <div ng-repeat="(key, value) in myObj"> ... </div>
 * ```
 *
 * However, there are a few limitations compared to array iteration:
 *
 * - The JavaScript specification does not define the order of keys
 *   returned for an object, so Angular relies on the order returned by the browser
 *   when running `for key in myObj`. Browsers generally follow the strategy of providing
 *   keys in the order in which they were defined, although there are exceptions when keys are deleted
 *   and reinstated. See the
 *   [MDN page on `delete` for more info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes).
 *
 * - `ngRepeat` will silently *ignore* object keys starting with `$`, because
 *   it's a prefix used by Angular for public (`$`) and private (`$$`) properties.
 *
 * - The built-in filters {@link ng.orderBy orderBy} and {@link ng.filter filter} do not work with
 *   objects, and will throw an error if used with one.
 *
 * If you are hitting any of these limitations, the recommended workaround is to convert your object into an array
 * that is sorted into the order that you prefer before providing it to `ngRepeat`. You could
 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
 * or implement a `$watch` on the object yourself.
 *
 *
 * # Tracking and Duplicates
 *
 * `ngRepeat` uses {@link $rootScope.Scope#$watchCollection $watchCollection} to detect changes in
 * the collection. When a change happens, `ngRepeat` then makes the corresponding changes to the DOM:
 *
 * * When an item is added, a new instance of the template is added to the DOM.
 * * When an item is removed, its template instance is removed from the DOM.
 * * When items are reordered, their respective templates are reordered in the DOM.
 *
 * To minimize creation of DOM elements, `ngRepeat` uses a function
 * to "keep track" of all items in the collection and their corresponding DOM elements.
 * For example, if an item is added to the collection, `ngRepeat` will know that all other items
 * already have DOM elements, and will not re-render them.
 *
 * The default tracking function (which tracks items by their identity) does not allow
 * duplicate items in arrays. This is because when there are duplicates, it is not possible
 * to maintain a one-to-one mapping between collection items and DOM elements.
 *
 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
 * with your own using the `track by` expression.
 *
 * For example, you may track items by the index of each item in the collection, using the
 * special scope property `$index`:
 * ```html
 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
 *      {{n}}
 *    </div>
 * ```
 *
 * You may also use arbitrary expressions in `track by`, including references to custom functions
 * on the scope:
 * ```html
 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
 *      {{n}}
 *    </div>
 * ```
 *
 * <div class="alert alert-success">
 * If you are working with objects that have a unique identifier property, you should track
 * by this identifier instead of the object instance. Should you reload your data later, `ngRepeat`
 * will not have to rebuild the DOM elements for items it has already rendered, even if the
 * JavaScript objects in the collection have been substituted for new ones. For large collections,
 * this significantly improves rendering performance. If you don't have a unique identifier,
 * `track by $index` can also provide a performance boost.
 * </div>
 *
 * ```html
 *    <div ng-repeat="model in collection track by model.id">
 *      {{model.name}}
 *    </div>
 * ```
 *
 * <br />
 * <div class="alert alert-warning">
 * Avoid using `track by $index` when the repeated template contains
 * {@link guide/expression#one-time-binding one-time bindings}. In such cases, the `nth` DOM
 * element will always be matched with the `nth` item of the array, so the bindings on that element
 * will not be updated even when the corresponding item changes, essentially causing the view to get
 * out-of-sync with the underlying data.
 * </div>
 *
 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
 * `$id` function, which tracks items by their identity:
 * ```html
 *    <div ng-repeat="obj in collection track by $id(obj)">
 *      {{obj.prop}}
 *    </div>
 * ```
 *
 * <br />
 * <div class="alert alert-warning">
 * **Note:** `track by` must always be the last expression:
 * </div>
 * ```
 *    <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
 *      {{model.name}}
 *    </div>
 * ```
 *
 *
 * # Special repeat start and end points
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
 *
 * The example below makes use of this feature:
 * ```html
 *   <header ng-repeat-start="item in items">
 *     Header {{ item }}
 *   </header>
 *   <div class="body">
 *     Body {{ item }}
 *   </div>
 *   <footer ng-repeat-end>
 *     Footer {{ item }}
 *   </footer>
 * ```
 *
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
 * ```html
 *   <header>
 *     Header A
 *   </header>
 *   <div class="body">
 *     Body A
 *   </div>
 *   <footer>
 *     Footer A
 *   </footer>
 *   <header>
 *     Header B
 *   </header>
 *   <div class="body">
 *     Body B
 *   </div>
 *   <footer>
 *     Footer B
 *   </footer>
 * ```
 *
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
 *
 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#enter enter} | when a new item is added to the list or when an item is revealed after a filter |
 * | {@link ng.$animate#leave leave} | when an item is removed from the list or when an item is filtered out |
 * | {@link ng.$animate#move move } | when an adjacent item is filtered out causing a reorder or when the item contents are reordered |
 *
 * See the example below for defining CSS animations with ngRepeat.
 *
 * @element ANY
 * @scope
 * @priority 1000
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
 *   formats are currently supported:
 *
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
 *     is a scope expression giving the collection to enumerate.
 *
 *     For example: `album in artist.albums`.
 *
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
 *     and `expression` is the scope expression giving the collection to enumerate.
 *
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
 *
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
 *     is specified, ng-repeat associates elements by identity. It is an error to have
 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)
 *
 *     <div class="alert alert-warning">
 *       <strong>Note:</strong> the `track by` expression must come last - after any filters, and the alias expression.
 *     </div>
 *
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.
 *
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
 *     element in the same way in the DOM.
 *
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
 *     property is same.
 *
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.
 *
 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
 *     when a filter is active on the repeater, but the filtered result set is empty.
 *
 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
 *     the items have been processed through the filter.
 *
 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
 *     (and not as operator, inside an expression).
 *
 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
 *
 * @example
 * This example uses `ngRepeat` to display a list of people. A filter is used to restrict the displayed
 * results by name or by age. New (entering) and removed (leaving) items are animated.
  <example module="ngRepeat" name="ngRepeat" deps="angular-animate.js" animations="true" name="ng-repeat">
    <file name="index.html">
      <div ng-controller="repeatController">
        I have {{friends.length}} friends. They are:
        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
          </li>
          <li class="animate-repeat" ng-if="results.length === 0">
            <strong>No results found...</strong>
          </li>
        </ul>
      </div>
    </file>
    <file name="script.js">
      angular.module('ngRepeat', ['ngAnimate']).controller('repeatController', function($scope) {
        $scope.friends = [
          {name:'John', age:25, gender:'boy'},
          {name:'Jessie', age:30, gender:'girl'},
          {name:'Johanna', age:28, gender:'girl'},
          {name:'Joy', age:15, gender:'girl'},
          {name:'Mary', age:28, gender:'girl'},
          {name:'Peter', age:95, gender:'boy'},
          {name:'Sebastian', age:50, gender:'boy'},
          {name:'Erika', age:27, gender:'girl'},
          {name:'Patrick', age:40, gender:'boy'},
          {name:'Samantha', age:60, gender:'girl'}
        ];
      });
    </file>
    <file name="animations.css">
      .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

      .animate-repeat {
        line-height:30px;
        list-style:none;
        box-sizing:border-box;
      }

      .animate-repeat.ng-move,
      .animate-repeat.ng-enter,
      .animate-repeat.ng-leave {
        transition:all linear 0.5s;
      }

      .animate-repeat.ng-leave.ng-leave-active,
      .animate-repeat.ng-move,
      .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

      .animate-repeat.ng-leave,
      .animate-repeat.ng-move.ng-move-active,
      .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:30px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var friends = element.all(by.repeater('friend in friends'));

      it('should render initial data set', function() {
        expect(friends.count()).toBe(10);
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
        expect(element(by.binding('friends.length')).getText())
            .toMatch("I have 10 friends. They are:");
      });

       it('should update repeater when filter predicate changes', function() {
         expect(friends.count()).toBe(10);

         element(by.model('q')).sendKeys('ma');

         expect(friends.count()).toBe(2);
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
       });
      </file>
    </example>
 */var ngRepeatDirective=['$parse','$animate','$compile',function($parse,$animate,$compile){var NG_REMOVED='$$NG_REMOVED';var ngRepeatMinErr=minErr('ngRepeat');var updateScope=function(scope,index,valueIdentifier,value,keyIdentifier,key,arrayLength){// TODO(perf): generate setters to shave off ~40ms or 1-1.5%
scope[valueIdentifier]=value;if(keyIdentifier)scope[keyIdentifier]=key;scope.$index=index;scope.$first=index===0;scope.$last=index===arrayLength-1;scope.$middle=!(scope.$first||scope.$last);// eslint-disable-next-line no-bitwise
scope.$odd=!(scope.$even=(index&1)===0);};var getBlockStart=function(block){return block.clone[0];};var getBlockEnd=function(block){return block.clone[block.clone.length-1];};return{restrict:'A',multiElement:true,transclude:'element',priority:1000,terminal:true,$$tlb:true,compile:function ngRepeatCompile($element,$attr){var expression=$attr.ngRepeat;var ngRepeatEndComment=$compile.$$createComment('end ngRepeat',expression);var match=expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!match){throw ngRepeatMinErr('iexp','Expected expression in form of \'_item_ in _collection_[ track by _id_]\' but got \'{0}\'.',expression);}var lhs=match[1];var rhs=match[2];var aliasAs=match[3];var trackByExp=match[4];match=lhs.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/);if(!match){throw ngRepeatMinErr('iidexp','\'_item_\' in \'_item_ in _collection_\' should be an identifier or \'(_key_, _value_)\' expression, but got \'{0}\'.',lhs);}var valueIdentifier=match[3]||match[1];var keyIdentifier=match[2];if(aliasAs&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))){throw ngRepeatMinErr('badident','alias \'{0}\' is invalid --- must be a valid JS identifier which is not a reserved name.',aliasAs);}var trackByExpGetter,trackByIdExpFn,trackByIdArrayFn,trackByIdObjFn;var hashFnLocals={$id:hashKey};if(trackByExp){trackByExpGetter=$parse(trackByExp);}else{trackByIdArrayFn=function(key,value){return hashKey(value);};trackByIdObjFn=function(key){return key;};}return function ngRepeatLink($scope,$element,$attr,ctrl,$transclude){if(trackByExpGetter){trackByIdExpFn=function(key,value,index){// assign key, value, and $index to the locals so that they can be used in hash functions
if(keyIdentifier)hashFnLocals[keyIdentifier]=key;hashFnLocals[valueIdentifier]=value;hashFnLocals.$index=index;return trackByExpGetter($scope,hashFnLocals);};}// Store a list of elements from previous run. This is a hash where key is the item from the
// iterator, and the value is objects with following properties.
//   - scope: bound scope
//   - clone: previous element.
//   - index: position
//
// We are using no-proto object so that we don't need to guard against inherited props via
// hasOwnProperty.
var lastBlockMap=createMap();//watch props
$scope.$watchCollection(rhs,function ngRepeatAction(collection){var index,length,previousNode=$element[0],// node that cloned nodes should be inserted after
// initialized to the comment node anchor
nextNode,// Same as lastBlockMap but it has the current state. It will become the
// lastBlockMap on the next iteration.
nextBlockMap=createMap(),collectionLength,key,value,// key/value of iteration
trackById,trackByIdFn,collectionKeys,block,// last object information {scope, element, id}
nextBlockOrder,elementsToRemove;if(aliasAs){$scope[aliasAs]=collection;}if(isArrayLike(collection)){collectionKeys=collection;trackByIdFn=trackByIdExpFn||trackByIdArrayFn;}else{trackByIdFn=trackByIdExpFn||trackByIdObjFn;// if object, extract keys, in enumeration order, unsorted
collectionKeys=[];for(var itemKey in collection){if(hasOwnProperty.call(collection,itemKey)&&itemKey.charAt(0)!=='$'){collectionKeys.push(itemKey);}}}collectionLength=collectionKeys.length;nextBlockOrder=new Array(collectionLength);// locate existing items
for(index=0;index<collectionLength;index++){key=collection===collectionKeys?index:collectionKeys[index];value=collection[key];trackById=trackByIdFn(key,value,index);if(lastBlockMap[trackById]){// found previously seen block
block=lastBlockMap[trackById];delete lastBlockMap[trackById];nextBlockMap[trackById]=block;nextBlockOrder[index]=block;}else if(nextBlockMap[trackById]){// if collision detected. restore lastBlockMap and throw an error
forEach(nextBlockOrder,function(block){if(block&&block.scope)lastBlockMap[block.id]=block;});throw ngRepeatMinErr('dupes','Duplicates in a repeater are not allowed. Use \'track by\' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}',expression,trackById,value);}else{// new never before seen block
nextBlockOrder[index]={id:trackById,scope:undefined,clone:undefined};nextBlockMap[trackById]=true;}}// remove leftover items
for(var blockKey in lastBlockMap){block=lastBlockMap[blockKey];elementsToRemove=getBlockNodes(block.clone);$animate.leave(elementsToRemove);if(elementsToRemove[0].parentNode){// if the element was not removed yet because of pending animation, mark it as deleted
// so that we can ignore it later
for(index=0,length=elementsToRemove.length;index<length;index++){elementsToRemove[index][NG_REMOVED]=true;}}block.scope.$destroy();}// we are not using forEach for perf reasons (trying to avoid #call)
for(index=0;index<collectionLength;index++){key=collection===collectionKeys?index:collectionKeys[index];value=collection[key];block=nextBlockOrder[index];if(block.scope){// if we have already seen this object, then we need to reuse the
// associated scope/element
nextNode=previousNode;// skip nodes that are already pending removal via leave animation
do{nextNode=nextNode.nextSibling;}while(nextNode&&nextNode[NG_REMOVED]);if(getBlockStart(block)!==nextNode){// existing item which got moved
$animate.move(getBlockNodes(block.clone),null,previousNode);}previousNode=getBlockEnd(block);updateScope(block.scope,index,valueIdentifier,value,keyIdentifier,key,collectionLength);}else{// new item which we don't know about
$transclude(function ngRepeatTransclude(clone,scope){block.scope=scope;// http://jsperf.com/clone-vs-createcomment
var endNode=ngRepeatEndComment.cloneNode(false);clone[clone.length++]=endNode;$animate.enter(clone,null,previousNode);previousNode=endNode;// Note: We only need the first/last node of the cloned nodes.
// However, we need to keep the reference to the jqlite wrapper as it might be changed later
// by a directive with templateUrl when its template arrives.
block.clone=clone;nextBlockMap[block.id]=block;updateScope(block.scope,index,valueIdentifier,value,keyIdentifier,key,collectionLength);});}}lastBlockMap=nextBlockMap;});};}};}];var NG_HIDE_CLASS='ng-hide';var NG_HIDE_IN_PROGRESS_CLASS='ng-hide-animate';/**
 * @ngdoc directive
 * @name ngShow
 * @multiElement
 *
 * @description
 * The `ngShow` directive shows or hides the given HTML element based on the expression provided to
 * the `ngShow` attribute.
 *
 * The element is shown or hidden by removing or adding the `.ng-hide` CSS class onto the element.
 * The `.ng-hide` CSS class is predefined in AngularJS and sets the display style to none (using an
 * `!important` flag). For CSP mode please add `angular-csp.css` to your HTML file (see
 * {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is visible) -->
 * <div ng-show="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is hidden) -->
 * <div ng-show="myValue" class="ng-hide"></div>
 * ```
 *
 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added
 * to the class attribute on the element causing it to become hidden. When truthy, the `.ng-hide`
 * CSS class is removed from the element causing the element not to appear hidden.
 *
 * ## Why is `!important` used?
 *
 * You may be wondering why `!important` is used for the `.ng-hide` CSS class. This is because the
 * `.ng-hide` selector can be easily overridden by heavier selectors. For example, something as
 * simple as changing the display style on a HTML list item would make hidden elements appear
 * visible. This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using `!important`, the show and hide behavior will work as expected despite any clash between
 * CSS selector specificity (when `!important` isn't used with any conflicting styles). If a
 * developer chooses to override the styling to change how to hide an element then it is just a
 * matter of using `!important` in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none !important`. If you
 * wish to change the hide behavior with `ngShow`/`ngHide`, you can simply overwrite the styles for
 * the `.ng-hide` CSS class. Note that the selector that needs to be used is actually
 * `.ng-hide:not(.ng-hide-animate)` to cope with extra animation classes that can be added.
 *
 * ```css
 * .ng-hide:not(.ng-hide-animate) {
 *   /&#42; These are just alternative ways of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override anything in CSS and the animations will work around the
 * display style.
 *
 * ## A note about animations with `ngShow`
 *
 * Animations in `ngShow`/`ngHide` work with the show and hide events that are triggered when the
 * directive expression is true and false. This system works like the animation system present with
 * `ngClass` except that you must also include the `!important` flag to override the display
 * property so that the elements are not actually hidden during the animation.
 *
 * ```css
 * /&#42; A working example can be found at the bottom of this page. &#42;/
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition: all 0.5s linear;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display property
 * to block during animation states - ngAnimate will automatically handle the style toggling for you.
 *
 * @animations
 * | Animation                                           | Occurs                                                                                                        |
 * |-----------------------------------------------------|---------------------------------------------------------------------------------------------------------------|
 * | {@link $animate#addClass addClass} `.ng-hide`       | After the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden. |
 * | {@link $animate#removeClass removeClass} `.ng-hide` | After the `ngShow` expression evaluates to a truthy value and just before contents are set to visible.        |
 *
 * @element ANY
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy/falsy then the
 *                            element is shown/hidden respectively.
 *
 * @example
 * A simple example, animating the element's opacity:
 *
  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-show-simple">
    <file name="index.html">
      Show: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br />
      <div class="check-element animate-show-hide" ng-show="checked">
        I show up when your checkbox is checked.
      </div>
    </file>
    <file name="animations.css">
      .animate-show-hide.ng-hide {
        opacity: 0;
      }

      .animate-show-hide.ng-hide-add,
      .animate-show-hide.ng-hide-remove {
        transition: all linear 0.5s;
      }

      .check-element {
        border: 1px solid black;
        opacity: 1;
        padding: 10px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      it('should check ngShow', function() {
        var checkbox = element(by.model('checked'));
        var checkElem = element(by.css('.check-element'));

        expect(checkElem.isDisplayed()).toBe(false);
        checkbox.click();
        expect(checkElem.isDisplayed()).toBe(true);
      });
    </file>
  </example>
 *
 * <hr />
 * @example
 * A more complex example, featuring different show/hide animations:
 *
  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-show-complex">
    <file name="index.html">
      Show: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br />
      <div class="check-element funky-show-hide" ng-show="checked">
        I show up when your checkbox is checked.
      </div>
    </file>
    <file name="animations.css">
      body {
        overflow: hidden;
        perspective: 1000px;
      }

      .funky-show-hide.ng-hide-add {
        transform: rotateZ(0);
        transform-origin: right;
        transition: all 0.5s ease-in-out;
      }

      .funky-show-hide.ng-hide-add.ng-hide-add-active {
        transform: rotateZ(-135deg);
      }

      .funky-show-hide.ng-hide-remove {
        transform: rotateY(90deg);
        transform-origin: left;
        transition: all 0.5s ease;
      }

      .funky-show-hide.ng-hide-remove.ng-hide-remove-active {
        transform: rotateY(0);
      }

      .check-element {
        border: 1px solid black;
        opacity: 1;
        padding: 10px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      it('should check ngShow', function() {
        var checkbox = element(by.model('checked'));
        var checkElem = element(by.css('.check-element'));

        expect(checkElem.isDisplayed()).toBe(false);
        checkbox.click();
        expect(checkElem.isDisplayed()).toBe(true);
      });
    </file>
  </example>
 */var ngShowDirective=['$animate',function($animate){return{restrict:'A',multiElement:true,link:function(scope,element,attr){scope.$watch(attr.ngShow,function ngShowWatchAction(value){// we're adding a temporary, animation-specific class for ng-hide since this way
// we can control when the element is actually displayed on screen without having
// to have a global/greedy CSS selector that breaks when other animations are run.
// Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
$animate[value?'removeClass':'addClass'](element,NG_HIDE_CLASS,{tempClasses:NG_HIDE_IN_PROGRESS_CLASS});});}};}];/**
 * @ngdoc directive
 * @name ngHide
 * @multiElement
 *
 * @description
 * The `ngHide` directive shows or hides the given HTML element based on the expression provided to
 * the `ngHide` attribute.
 *
 * The element is shown or hidden by removing or adding the `.ng-hide` CSS class onto the element.
 * The `.ng-hide` CSS class is predefined in AngularJS and sets the display style to none (using an
 * `!important` flag). For CSP mode please add `angular-csp.css` to your HTML file (see
 * {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is hidden) -->
 * <div ng-hide="myValue" class="ng-hide"></div>
 *
 * <!-- when $scope.myValue is falsy (element is visible) -->
 * <div ng-hide="myValue"></div>
 * ```
 *
 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added
 * to the class attribute on the element causing it to become hidden. When falsy, the `.ng-hide`
 * CSS class is removed from the element causing the element not to appear hidden.
 *
 * ## Why is `!important` used?
 *
 * You may be wondering why `!important` is used for the `.ng-hide` CSS class. This is because the
 * `.ng-hide` selector can be easily overridden by heavier selectors. For example, something as
 * simple as changing the display style on a HTML list item would make hidden elements appear
 * visible. This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using `!important`, the show and hide behavior will work as expected despite any clash between
 * CSS selector specificity (when `!important` isn't used with any conflicting styles). If a
 * developer chooses to override the styling to change how to hide an element then it is just a
 * matter of using `!important` in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none !important`. If you
 * wish to change the hide behavior with `ngShow`/`ngHide`, you can simply overwrite the styles for
 * the `.ng-hide` CSS class. Note that the selector that needs to be used is actually
 * `.ng-hide:not(.ng-hide-animate)` to cope with extra animation classes that can be added.
 *
 * ```css
 * .ng-hide:not(.ng-hide-animate) {
 *   /&#42; These are just alternative ways of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the
 * display style.
 *
 * ## A note about animations with `ngHide`
 *
 * Animations in `ngShow`/`ngHide` work with the show and hide events that are triggered when the
 * directive expression is true and false. This system works like the animation system present with
 * `ngClass` except that you must also include the `!important` flag to override the display
 * property so that the elements are not actually hidden during the animation.
 *
 * ```css
 * /&#42; A working example can be found at the bottom of this page. &#42;/
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition: all 0.5s linear;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display property
 * to block during animation states - ngAnimate will automatically handle the style toggling for you.
 *
 * @animations
 * | Animation                                           | Occurs                                                                                                     |
 * |-----------------------------------------------------|------------------------------------------------------------------------------------------------------------|
 * | {@link $animate#addClass addClass} `.ng-hide`       | After the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden.  |
 * | {@link $animate#removeClass removeClass} `.ng-hide` | After the `ngHide` expression evaluates to a non truthy value and just before contents are set to visible. |
 *
 *
 * @element ANY
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy/falsy then the
 *                            element is hidden/shown respectively.
 *
 * @example
 * A simple example, animating the element's opacity:
 *
  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-hide-simple">
    <file name="index.html">
      Hide: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br />
      <div class="check-element animate-show-hide" ng-hide="checked">
        I hide when your checkbox is checked.
      </div>
    </file>
    <file name="animations.css">
      .animate-show-hide.ng-hide {
        opacity: 0;
      }

      .animate-show-hide.ng-hide-add,
      .animate-show-hide.ng-hide-remove {
        transition: all linear 0.5s;
      }

      .check-element {
        border: 1px solid black;
        opacity: 1;
        padding: 10px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      it('should check ngHide', function() {
        var checkbox = element(by.model('checked'));
        var checkElem = element(by.css('.check-element'));

        expect(checkElem.isDisplayed()).toBe(true);
        checkbox.click();
        expect(checkElem.isDisplayed()).toBe(false);
      });
    </file>
  </example>
 *
 * <hr />
 * @example
 * A more complex example, featuring different show/hide animations:
 *
  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-hide-complex">
    <file name="index.html">
      Hide: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br />
      <div class="check-element funky-show-hide" ng-hide="checked">
        I hide when your checkbox is checked.
      </div>
    </file>
    <file name="animations.css">
      body {
        overflow: hidden;
        perspective: 1000px;
      }

      .funky-show-hide.ng-hide-add {
        transform: rotateZ(0);
        transform-origin: right;
        transition: all 0.5s ease-in-out;
      }

      .funky-show-hide.ng-hide-add.ng-hide-add-active {
        transform: rotateZ(-135deg);
      }

      .funky-show-hide.ng-hide-remove {
        transform: rotateY(90deg);
        transform-origin: left;
        transition: all 0.5s ease;
      }

      .funky-show-hide.ng-hide-remove.ng-hide-remove-active {
        transform: rotateY(0);
      }

      .check-element {
        border: 1px solid black;
        opacity: 1;
        padding: 10px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      it('should check ngHide', function() {
        var checkbox = element(by.model('checked'));
        var checkElem = element(by.css('.check-element'));

        expect(checkElem.isDisplayed()).toBe(true);
        checkbox.click();
        expect(checkElem.isDisplayed()).toBe(false);
      });
    </file>
  </example>
 */var ngHideDirective=['$animate',function($animate){return{restrict:'A',multiElement:true,link:function(scope,element,attr){scope.$watch(attr.ngHide,function ngHideWatchAction(value){// The comment inside of the ngShowDirective explains why we add and
// remove a temporary class for the show/hide animation
$animate[value?'addClass':'removeClass'](element,NG_HIDE_CLASS,{tempClasses:NG_HIDE_IN_PROGRESS_CLASS});});}};}];/**
 * @ngdoc directive
 * @name ngStyle
 * @restrict AC
 *
 * @description
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
 *
 * @knownIssue
 * You should not use {@link guide/interpolation interpolation} in the value of the `style`
 * attribute, when using the `ngStyle` directive on the same element.
 * See {@link guide/interpolation#known-issues here} for more info.
 *
 * @element ANY
 * @param {expression} ngStyle
 *
 * {@link guide/expression Expression} which evals to an
 * object whose keys are CSS style names and values are corresponding values for those CSS
 * keys.
 *
 * Since some CSS style names are not valid keys for an object, they must be quoted.
 * See the 'background-color' style in the example below.
 *
 * @example
   <example name="ng-style">
     <file name="index.html">
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
        <input type="button" value="clear" ng-click="myStyle={}">
        <br/>
        <span ng-style="myStyle">Sample Text</span>
        <pre>myStyle={{myStyle}}</pre>
     </file>
     <file name="style.css">
       span {
         color: black;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var colorSpan = element(by.css('span'));

       it('should check ng-style', function() {
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
         element(by.css('input[value=\'set color\']')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
         element(by.css('input[value=clear]')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
       });
     </file>
   </example>
 */var ngStyleDirective=ngDirective(function(scope,element,attr){scope.$watch(attr.ngStyle,function ngStyleWatchAction(newStyles,oldStyles){if(oldStyles&&newStyles!==oldStyles){forEach(oldStyles,function(val,style){element.css(style,'');});}if(newStyles)element.css(newStyles);},true);});/**
 * @ngdoc directive
 * @name ngSwitch
 * @restrict EA
 *
 * @description
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.
 *
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element
 * (where you place the directive), place an expression on the **`on="..."` attribute**
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.
 *
 * <div class="alert alert-info">
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
 * as literal string values to match against.
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
 * value of the expression `$scope.someVal`.
 * </div>

 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#enter enter}  | after the ngSwitch contents change and the matched child element is placed inside the container |
 * | {@link ng.$animate#leave leave}  | after the ngSwitch contents change and just before the former contents are removed from the DOM |
 *
 * @usage
 *
 * ```
 * <ANY ng-switch="expression">
 *   <ANY ng-switch-when="matchValue1">...</ANY>
 *   <ANY ng-switch-when="matchValue2">...</ANY>
 *   <ANY ng-switch-default>...</ANY>
 * </ANY>
 * ```
 *
 *
 * @scope
 * @priority 1200
 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
 * On child elements add:
 *
 * * `ngSwitchWhen`: the case statement to match against. If match then this
 *   case will be displayed. If the same match appears multiple times, all the
 *   elements will be displayed. It is possible to associate multiple values to
 *   the same `ngSwitchWhen` by defining the optional attribute
 *   `ngSwitchWhenSeparator`. The separator will be used to split the value of
 *   the `ngSwitchWhen` attribute into multiple tokens, and the element will show
 *   if any of the `ngSwitch` evaluates to any of these tokens.
 * * `ngSwitchDefault`: the default case when no other case match. If there
 *   are multiple default cases, all of them will be displayed when no other
 *   case match.
 *
 *
 * @example
  <example module="switchExample" deps="angular-animate.js" animations="true" name="ng-switch">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <select ng-model="selection" ng-options="item for item in items">
        </select>
        <code>selection={{selection}}</code>
        <hr/>
        <div class="animate-switch-container"
          ng-switch on="selection">
            <div class="animate-switch" ng-switch-when="settings|options" ng-switch-when-separator="|">Settings Div</div>
            <div class="animate-switch" ng-switch-when="home">Home Span</div>
            <div class="animate-switch" ng-switch-default>default</div>
        </div>
      </div>
    </file>
    <file name="script.js">
      angular.module('switchExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.items = ['settings', 'home', 'options', 'other'];
          $scope.selection = $scope.items[0];
        }]);
    </file>
    <file name="animations.css">
      .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .animate-switch {
        padding:10px;
      }

      .animate-switch.ng-animate {
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

      .animate-switch.ng-leave.ng-leave-active,
      .animate-switch.ng-enter {
        top:-50px;
      }
      .animate-switch.ng-leave,
      .animate-switch.ng-enter.ng-enter-active {
        top:0;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var switchElem = element(by.css('[ng-switch]'));
      var select = element(by.model('selection'));

      it('should start in settings', function() {
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
      it('should change to home', function() {
        select.all(by.css('option')).get(1).click();
        expect(switchElem.getText()).toMatch(/Home Span/);
      });
      it('should change to settings via "options"', function() {
        select.all(by.css('option')).get(2).click();
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
      it('should select default', function() {
        select.all(by.css('option')).get(3).click();
        expect(switchElem.getText()).toMatch(/default/);
      });
    </file>
  </example>
 */var ngSwitchDirective=['$animate','$compile',function($animate,$compile){return{require:'ngSwitch',// asks for $scope to fool the BC controller module
controller:['$scope',function NgSwitchController(){this.cases={};}],link:function(scope,element,attr,ngSwitchController){var watchExpr=attr.ngSwitch||attr.on,selectedTranscludes=[],selectedElements=[],previousLeaveAnimations=[],selectedScopes=[];var spliceFactory=function(array,index){return function(response){if(response!==false)array.splice(index,1);};};scope.$watch(watchExpr,function ngSwitchWatchAction(value){var i,ii;// Start with the last, in case the array is modified during the loop
while(previousLeaveAnimations.length){$animate.cancel(previousLeaveAnimations.pop());}for(i=0,ii=selectedScopes.length;i<ii;++i){var selected=getBlockNodes(selectedElements[i].clone);selectedScopes[i].$destroy();var runner=previousLeaveAnimations[i]=$animate.leave(selected);runner.done(spliceFactory(previousLeaveAnimations,i));}selectedElements.length=0;selectedScopes.length=0;if(selectedTranscludes=ngSwitchController.cases['!'+value]||ngSwitchController.cases['?']){forEach(selectedTranscludes,function(selectedTransclude){selectedTransclude.transclude(function(caseElement,selectedScope){selectedScopes.push(selectedScope);var anchor=selectedTransclude.element;caseElement[caseElement.length++]=$compile.$$createComment('end ngSwitchWhen');var block={clone:caseElement};selectedElements.push(block);$animate.enter(caseElement,anchor.parent(),anchor);});});}});}};}];var ngSwitchWhenDirective=ngDirective({transclude:'element',priority:1200,require:'^ngSwitch',multiElement:true,link:function(scope,element,attrs,ctrl,$transclude){var cases=attrs.ngSwitchWhen.split(attrs.ngSwitchWhenSeparator).sort().filter(// Filter duplicate cases
function(element,index,array){return array[index-1]!==element;});forEach(cases,function(whenCase){ctrl.cases['!'+whenCase]=ctrl.cases['!'+whenCase]||[];ctrl.cases['!'+whenCase].push({transclude:$transclude,element:element});});}});var ngSwitchDefaultDirective=ngDirective({transclude:'element',priority:1200,require:'^ngSwitch',multiElement:true,link:function(scope,element,attr,ctrl,$transclude){ctrl.cases['?']=ctrl.cases['?']||[];ctrl.cases['?'].push({transclude:$transclude,element:element});}});/**
 * @ngdoc directive
 * @name ngTransclude
 * @restrict EAC
 *
 * @description
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *
 * You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name
 * as the value of the `ng-transclude` or `ng-transclude-slot` attribute.
 *
 * If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing
 * content of this element will be removed before the transcluded content is inserted.
 * If the transcluded content is empty (or only whitespace), the existing content is left intact. This lets you provide fallback
 * content in the case that no transcluded content is provided.
 *
 * @element ANY
 *
 * @param {string} ngTransclude|ngTranscludeSlot the name of the slot to insert at this point. If this is not provided, is empty
 *                                               or its value is the same as the name of the attribute then the default slot is used.
 *
 * @example
 * ### Basic transclusion
 * This example demonstrates basic transclusion of content into a component directive.
 * <example name="simpleTranscludeExample" module="transcludeExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('transcludeExample', [])
 *        .directive('pane', function(){
 *           return {
 *             restrict: 'E',
 *             transclude: true,
 *             scope: { title:'@' },
 *             template: '<div style="border: 1px solid black;">' +
 *                         '<div style="background-color: gray">{{title}}</div>' +
 *                         '<ng-transclude></ng-transclude>' +
 *                       '</div>'
 *           };
 *       })
 *       .controller('ExampleController', ['$scope', function($scope) {
 *         $scope.title = 'Lorem Ipsum';
 *         $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
 *       }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <input ng-model="title" aria-label="title"> <br/>
 *       <textarea ng-model="text" aria-label="text"></textarea> <br/>
 *       <pane title="{{title}}"><span>{{text}}</span></pane>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *      it('should have transcluded', function() {
 *        var titleElement = element(by.model('title'));
 *        titleElement.clear();
 *        titleElement.sendKeys('TITLE');
 *        var textElement = element(by.model('text'));
 *        textElement.clear();
 *        textElement.sendKeys('TEXT');
 *        expect(element(by.binding('title')).getText()).toEqual('TITLE');
 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
 *      });
 *   </file>
 * </example>
 *
 * @example
 * ### Transclude fallback content
 * This example shows how to use `NgTransclude` with fallback content, that
 * is displayed if no transcluded content is provided.
 *
 * <example module="transcludeFallbackContentExample" name="ng-transclude">
 * <file name="index.html">
 * <script>
 * angular.module('transcludeFallbackContentExample', [])
 * .directive('myButton', function(){
 *             return {
 *               restrict: 'E',
 *               transclude: true,
 *               scope: true,
 *               template: '<button style="cursor: pointer;">' +
 *                           '<ng-transclude>' +
 *                             '<b style="color: red;">Button1</b>' +
 *                           '</ng-transclude>' +
 *                         '</button>'
 *             };
 *         });
 * </script>
 * <!-- fallback button content -->
 * <my-button id="fallback"></my-button>
 * <!-- modified button content -->
 * <my-button id="modified">
 *   <i style="color: green;">Button2</i>
 * </my-button>
 * </file>
 * <file name="protractor.js" type="protractor">
 * it('should have different transclude element content', function() {
 *          expect(element(by.id('fallback')).getText()).toBe('Button1');
 *          expect(element(by.id('modified')).getText()).toBe('Button2');
 *        });
 * </file>
 * </example>
 *
 * @example
 * ### Multi-slot transclusion
 * This example demonstrates using multi-slot transclusion in a component directive.
 * <example name="multiSlotTranscludeExample" module="multiSlotTranscludeExample">
 *   <file name="index.html">
 *    <style>
 *      .title, .footer {
 *        background-color: gray
 *      }
 *    </style>
 *    <div ng-controller="ExampleController">
 *      <input ng-model="title" aria-label="title"> <br/>
 *      <textarea ng-model="text" aria-label="text"></textarea> <br/>
 *      <pane>
 *        <pane-title><a ng-href="{{link}}">{{title}}</a></pane-title>
 *        <pane-body><p>{{text}}</p></pane-body>
 *      </pane>
 *    </div>
 *   </file>
 *   <file name="app.js">
 *    angular.module('multiSlotTranscludeExample', [])
 *     .directive('pane', function() {
 *        return {
 *          restrict: 'E',
 *          transclude: {
 *            'title': '?paneTitle',
 *            'body': 'paneBody',
 *            'footer': '?paneFooter'
 *          },
 *          template: '<div style="border: 1px solid black;">' +
 *                      '<div class="title" ng-transclude="title">Fallback Title</div>' +
 *                      '<div ng-transclude="body"></div>' +
 *                      '<div class="footer" ng-transclude="footer">Fallback Footer</div>' +
 *                    '</div>'
 *        };
 *    })
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.title = 'Lorem Ipsum';
 *      $scope.link = 'https://google.com';
 *      $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
 *    }]);
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *      it('should have transcluded the title and the body', function() {
 *        var titleElement = element(by.model('title'));
 *        titleElement.clear();
 *        titleElement.sendKeys('TITLE');
 *        var textElement = element(by.model('text'));
 *        textElement.clear();
 *        textElement.sendKeys('TEXT');
 *        expect(element(by.css('.title')).getText()).toEqual('TITLE');
 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
 *        expect(element(by.css('.footer')).getText()).toEqual('Fallback Footer');
 *      });
 *   </file>
 * </example>
 */var ngTranscludeMinErr=minErr('ngTransclude');var ngTranscludeDirective=['$compile',function($compile){return{restrict:'EAC',terminal:true,compile:function ngTranscludeCompile(tElement){// Remove and cache any original content to act as a fallback
var fallbackLinkFn=$compile(tElement.contents());tElement.empty();return function ngTranscludePostLink($scope,$element,$attrs,controller,$transclude){if(!$transclude){throw ngTranscludeMinErr('orphan','Illegal use of ngTransclude directive in the template! '+'No parent directive that requires a transclusion found. '+'Element: {0}',startingTag($element));}// If the attribute is of the form: `ng-transclude="ng-transclude"` then treat it like the default
if($attrs.ngTransclude===$attrs.$attr.ngTransclude){$attrs.ngTransclude='';}var slotName=$attrs.ngTransclude||$attrs.ngTranscludeSlot;// If the slot is required and no transclusion content is provided then this call will throw an error
$transclude(ngTranscludeCloneAttachFn,null,slotName);// If the slot is optional and no transclusion content is provided then use the fallback content
if(slotName&&!$transclude.isSlotFilled(slotName)){useFallbackContent();}function ngTranscludeCloneAttachFn(clone,transcludedScope){if(clone.length&&notWhitespace(clone)){$element.append(clone);}else{useFallbackContent();// There is nothing linked against the transcluded scope since no content was available,
// so it should be safe to clean up the generated scope.
transcludedScope.$destroy();}}function useFallbackContent(){// Since this is the fallback content rather than the transcluded content,
// we link against the scope of this directive rather than the transcluded scope
fallbackLinkFn($scope,function(clone){$element.append(clone);});}function notWhitespace(nodes){for(var i=0,ii=nodes.length;i<ii;i++){var node=nodes[i];if(node.nodeType!==NODE_TYPE_TEXT||node.nodeValue.trim()){return true;}}}};}};}];/**
 * @ngdoc directive
 * @name script
 * @restrict E
 *
 * @description
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
 *
 * @param {string} type Must be set to `'text/ng-template'`.
 * @param {string} id Cache name of the template.
 *
 * @example
  <example  name="script-tag">
    <file name="index.html">
      <script type="text/ng-template" id="/tpl.html">
        Content of the template.
      </script>

      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
      <div id="tpl-content" ng-include src="currentTpl"></div>
    </file>
    <file name="protractor.js" type="protractor">
      it('should load template defined inside script tag', function() {
        element(by.css('#tpl-link')).click();
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
      });
    </file>
  </example>
 */var scriptDirective=['$templateCache',function($templateCache){return{restrict:'E',terminal:true,compile:function(element,attr){if(attr.type==='text/ng-template'){var templateUrl=attr.id,text=element[0].text;$templateCache.put(templateUrl,text);}}};}];/* exported selectDirective, optionDirective */var noopNgModelController={$setViewValue:noop,$render:noop};function setOptionSelectedStatus(optionEl,value){optionEl.prop('selected',value);/**
   * When unselecting an option, setting the property to null / false should be enough
   * However, screenreaders might react to the selected attribute instead, see
   * https://github.com/angular/angular.js/issues/14419
   * Note: "selected" is a boolean attr and will be removed when the "value" arg in attr() is false
   * or null
   */optionEl.attr('selected',value);}/**
 * @ngdoc type
 * @name  select.SelectController
 *
 * @description
 * The controller for the {@link ng.select select} directive. The controller exposes
 * a few utility methods that can be used to augment the behavior of a regular or an
 * {@link ng.ngOptions ngOptions} select element.
 *
 * @example
 * ### Set a custom error when the unknown option is selected
 *
 * This example sets a custom error "unknownValue" on the ngModelController
 * when the select element's unknown option is selected, i.e. when the model is set to a value
 * that is not matched by any option.
 *
 * <example name="select-unknown-value-error" module="staticSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="testSelect"> Single select: </label><br>
 *     <select name="testSelect" ng-model="selected" unknown-value-error>
 *       <option value="option-1">Option 1</option>
 *       <option value="option-2">Option 2</option>
 *     </select><br>
 *     <span ng-if="myForm.testSelect.$error.unknownValue">Error: The current model doesn't match any option</span>
 *
 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
 *   </form>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('staticSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.selected = null;
 *
 *      $scope.forceUnknownOption = function() {
 *        $scope.selected = 'nonsense';
 *      };
 *   }])
 *   .directive('unknownValueError', function() {
 *     return {
 *       require: ['ngModel', 'select'],
 *       link: function(scope, element, attrs, ctrls) {
 *         var ngModelCtrl = ctrls[0];
 *         var selectCtrl = ctrls[1];
 *
 *         ngModelCtrl.$validators.unknownValue = function(modelValue, viewValue) {
 *           if (selectCtrl.$isUnknownOptionSelected()) {
 *             return false;
 *           }
 *
 *           return true;
 *         };
 *       }
 *
 *     };
 *   });
 * </file>
 *</example>
 *
 *
 * @example
 * ### Set the "required" error when the unknown option is selected.
 *
 * By default, the "required" error on the ngModelController is only set on a required select
 * when the empty option is selected. This example adds a custom directive that also sets the
 * error when the unknown option is selected.
 *
 * <example name="select-unknown-value-required" module="staticSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="testSelect"> Select: </label><br>
 *     <select name="testSelect" ng-model="selected" unknown-value-required>
 *       <option value="option-1">Option 1</option>
 *       <option value="option-2">Option 2</option>
 *     </select><br>
 *     <span ng-if="myForm.testSelect.$error.required">Error: Please select a value</span><br>
 *
 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
 *   </form>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('staticSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.selected = null;
 *
 *      $scope.forceUnknownOption = function() {
 *        $scope.selected = 'nonsense';
 *      };
 *   }])
 *   .directive('unknownValueRequired', function() {
 *     return {
 *       priority: 1, // This directive must run after the required directive has added its validator
 *       require: ['ngModel', 'select'],
 *       link: function(scope, element, attrs, ctrls) {
 *         var ngModelCtrl = ctrls[0];
 *         var selectCtrl = ctrls[1];
 *
 *         var originalRequiredValidator = ngModelCtrl.$validators.required;
 *
 *         ngModelCtrl.$validators.required = function() {
 *           if (attrs.required && selectCtrl.$isUnknownOptionSelected()) {
 *             return false;
 *           }
 *
 *           return originalRequiredValidator.apply(this, arguments);
 *         };
 *       }
 *     };
 *   });
 * </file>
 *</example>
 *
 *
 */var SelectController=['$element','$scope',/** @this */function($element,$scope){var self=this,optionsMap=new NgMap();self.selectValueMap={};// Keys are the hashed values, values the original values
// If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
self.ngModelCtrl=noopNgModelController;self.multiple=false;// The "unknown" option is one that is prepended to the list if the viewValue
// does not match any of the options. When it is rendered the value of the unknown
// option is '? XXX ?' where XXX is the hashKey of the value that is not known.
//
// Support: IE 9 only
// We can't just jqLite('<option>') since jqLite is not smart enough
// to create it in <select> and IE barfs otherwise.
self.unknownOption=jqLite(window.document.createElement('option'));// The empty option is an option with the value '' that the application developer can
// provide inside the select. It is always selectable and indicates that a "null" selection has
// been made by the user.
// If the select has an empty option, and the model of the select is set to "undefined" or "null",
// the empty option is selected.
// If the model is set to a different unmatched value, the unknown option is rendered and
// selected, i.e both are present, because a "null" selection and an unknown value are different.
self.hasEmptyOption=false;self.emptyOption=undefined;self.renderUnknownOption=function(val){var unknownVal=self.generateUnknownOptionValue(val);self.unknownOption.val(unknownVal);$element.prepend(self.unknownOption);setOptionSelectedStatus(self.unknownOption,true);$element.val(unknownVal);};self.updateUnknownOption=function(val){var unknownVal=self.generateUnknownOptionValue(val);self.unknownOption.val(unknownVal);setOptionSelectedStatus(self.unknownOption,true);$element.val(unknownVal);};self.generateUnknownOptionValue=function(val){return'? '+hashKey(val)+' ?';};self.removeUnknownOption=function(){if(self.unknownOption.parent())self.unknownOption.remove();};self.selectEmptyOption=function(){if(self.emptyOption){$element.val('');setOptionSelectedStatus(self.emptyOption,true);}};self.unselectEmptyOption=function(){if(self.hasEmptyOption){setOptionSelectedStatus(self.emptyOption,false);}};$scope.$on('$destroy',function(){// disable unknown option so that we don't do work when the whole select is being destroyed
self.renderUnknownOption=noop;});// Read the value of the select control, the implementation of this changes depending
// upon whether the select can have multiple values and whether ngOptions is at work.
self.readValue=function readSingleValue(){var val=$element.val();// ngValue added option values are stored in the selectValueMap, normal interpolations are not
var realVal=val in self.selectValueMap?self.selectValueMap[val]:val;if(self.hasOption(realVal)){return realVal;}return null;};// Write the value to the select control, the implementation of this changes depending
// upon whether the select can have multiple values and whether ngOptions is at work.
self.writeValue=function writeSingleValue(value){// Make sure to remove the selected attribute from the previously selected option
// Otherwise, screen readers might get confused
var currentlySelectedOption=$element[0].options[$element[0].selectedIndex];if(currentlySelectedOption)setOptionSelectedStatus(jqLite(currentlySelectedOption),false);if(self.hasOption(value)){self.removeUnknownOption();var hashedVal=hashKey(value);$element.val(hashedVal in self.selectValueMap?hashedVal:value);// Set selected attribute and property on selected option for screen readers
var selectedOption=$element[0].options[$element[0].selectedIndex];setOptionSelectedStatus(jqLite(selectedOption),true);}else{self.selectUnknownOrEmptyOption(value);}};// Tell the select control that an option, with the given value, has been added
self.addOption=function(value,element){// Skip comment nodes, as they only pollute the `optionsMap`
if(element[0].nodeType===NODE_TYPE_COMMENT)return;assertNotHasOwnProperty(value,'"option value"');if(value===''){self.hasEmptyOption=true;self.emptyOption=element;}var count=optionsMap.get(value)||0;optionsMap.set(value,count+1);// Only render at the end of a digest. This improves render performance when many options
// are added during a digest and ensures all relevant options are correctly marked as selected
scheduleRender();};// Tell the select control that an option, with the given value, has been removed
self.removeOption=function(value){var count=optionsMap.get(value);if(count){if(count===1){optionsMap.delete(value);if(value===''){self.hasEmptyOption=false;self.emptyOption=undefined;}}else{optionsMap.set(value,count-1);}}};// Check whether the select control has an option matching the given value
self.hasOption=function(value){return!!optionsMap.get(value);};/**
   * @ngdoc method
   * @name select.SelectController#$hasEmptyOption
   *
   * @description
   *
   * Returns `true` if the select element currently has an empty option
   * element, i.e. an option that signifies that the select is empty / the selection is null.
   *
   */self.$hasEmptyOption=function(){return self.hasEmptyOption;};/**
   * @ngdoc method
   * @name select.SelectController#$isUnknownOptionSelected
   *
   * @description
   *
   * Returns `true` if the select element's unknown option is selected. The unknown option is added
   * and automatically selected whenever the select model doesn't match any option.
   *
   */self.$isUnknownOptionSelected=function(){// Presence of the unknown option means it is selected
return $element[0].options[0]===self.unknownOption[0];};/**
   * @ngdoc method
   * @name select.SelectController#$isEmptyOptionSelected
   *
   * @description
   *
   * Returns `true` if the select element has an empty option and this empty option is currently
   * selected. Returns `false` if the select element has no empty option or it is not selected.
   *
   */self.$isEmptyOptionSelected=function(){return self.hasEmptyOption&&$element[0].options[$element[0].selectedIndex]===self.emptyOption[0];};self.selectUnknownOrEmptyOption=function(value){if(value==null&&self.emptyOption){self.removeUnknownOption();self.selectEmptyOption();}else if(self.unknownOption.parent().length){self.updateUnknownOption(value);}else{self.renderUnknownOption(value);}};var renderScheduled=false;function scheduleRender(){if(renderScheduled)return;renderScheduled=true;$scope.$$postDigest(function(){renderScheduled=false;self.ngModelCtrl.$render();});}var updateScheduled=false;function scheduleViewValueUpdate(renderAfter){if(updateScheduled)return;updateScheduled=true;$scope.$$postDigest(function(){if($scope.$$destroyed)return;updateScheduled=false;self.ngModelCtrl.$setViewValue(self.readValue());if(renderAfter)self.ngModelCtrl.$render();});}self.registerOption=function(optionScope,optionElement,optionAttrs,interpolateValueFn,interpolateTextFn){if(optionAttrs.$attr.ngValue){// The value attribute is set by ngValue
var oldVal,hashedVal=NaN;optionAttrs.$observe('value',function valueAttributeObserveAction(newVal){var removal;var previouslySelected=optionElement.prop('selected');if(isDefined(hashedVal)){self.removeOption(oldVal);delete self.selectValueMap[hashedVal];removal=true;}hashedVal=hashKey(newVal);oldVal=newVal;self.selectValueMap[hashedVal]=newVal;self.addOption(newVal,optionElement);// Set the attribute directly instead of using optionAttrs.$set - this stops the observer
// from firing a second time. Other $observers on value will also get the result of the
// ngValue expression, not the hashed value
optionElement.attr('value',hashedVal);if(removal&&previouslySelected){scheduleViewValueUpdate();}});}else if(interpolateValueFn){// The value attribute is interpolated
optionAttrs.$observe('value',function valueAttributeObserveAction(newVal){// This method is overwritten in ngOptions and has side-effects!
self.readValue();var removal;var previouslySelected=optionElement.prop('selected');if(isDefined(oldVal)){self.removeOption(oldVal);removal=true;}oldVal=newVal;self.addOption(newVal,optionElement);if(removal&&previouslySelected){scheduleViewValueUpdate();}});}else if(interpolateTextFn){// The text content is interpolated
optionScope.$watch(interpolateTextFn,function interpolateWatchAction(newVal,oldVal){optionAttrs.$set('value',newVal);var previouslySelected=optionElement.prop('selected');if(oldVal!==newVal){self.removeOption(oldVal);}self.addOption(newVal,optionElement);if(oldVal&&previouslySelected){scheduleViewValueUpdate();}});}else{// The value attribute is static
self.addOption(optionAttrs.value,optionElement);}optionAttrs.$observe('disabled',function(newVal){// Since model updates will also select disabled options (like ngOptions),
// we only have to handle options becoming disabled, not enabled
if(newVal==='true'||newVal&&optionElement.prop('selected')){if(self.multiple){scheduleViewValueUpdate(true);}else{self.ngModelCtrl.$setViewValue(null);self.ngModelCtrl.$render();}}});optionElement.on('$destroy',function(){var currentValue=self.readValue();var removeValue=optionAttrs.value;self.removeOption(removeValue);scheduleRender();if(self.multiple&&currentValue&&currentValue.indexOf(removeValue)!==-1||currentValue===removeValue){// When multiple (selected) options are destroyed at the same time, we don't want
// to run a model update for each of them. Instead, run a single update in the $$postDigest
scheduleViewValueUpdate(true);}});};}];/**
 * @ngdoc directive
 * @name select
 * @restrict E
 *
 * @description
 * HTML `select` element with angular data-binding.
 *
 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
 * between the scope and the `<select>` control (including setting default values).
 * It also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
 * {@link ngOptions `ngOptions`} directives.
 *
 * When an item in the `<select>` menu is selected, the value of the selected option will be bound
 * to the model identified by the `ngModel` directive. With static or repeated options, this is
 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
 * Value and textContent can be interpolated.
 *
 * The {@link select.SelectController select controller} exposes utility functions that can be used
 * to manipulate the select's behavior.
 *
 * ## Matching model and option values
 *
 * In general, the match between the model and an option is evaluated by strictly comparing the model
 * value against the value of the available options.
 *
 * If you are setting the option value with the option's `value` attribute, or textContent, the
 * value will always be a `string` which means that the model value must also be a string.
 * Otherwise the `select` directive cannot match them correctly.
 *
 * To bind the model to a non-string value, you can use one of the following strategies:
 * - the {@link ng.ngOptions `ngOptions`} directive
 *   ({@link ng.select#using-select-with-ngoptions-and-setting-a-default-value})
 * - the {@link ng.ngValue `ngValue`} directive, which allows arbitrary expressions to be
 *   option values ({@link ng.select#using-ngvalue-to-bind-the-model-to-an-array-of-objects Example})
 * - model $parsers / $formatters to convert the string value
 *   ({@link ng.select#binding-select-to-a-non-string-value-via-ngmodel-parsing-formatting Example})
 *
 * If the viewValue of `ngModel` does not match any of the options, then the control
 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * ## Choosing between `ngRepeat` and `ngOptions`
 *
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits:
 * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
 * comprehension expression
 * - reduced memory consumption by not creating a new scope for each repeated instance
 * - increased render speed by creating the options in a documentFragment instead of individually
 *
 * Specifically, select with repeated options slows down significantly starting at 2000 options in
 * Chrome and Internet Explorer / Edge.
 *
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} multiple Allows multiple options to be selected. The selected values will be
 *     bound to the model as an array.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds required attribute and required validation constraint to
 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
 * when you want to data-bind to the required attribute.
 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user
 *    interaction with the select element.
 * @param {string=} ngOptions sets the options that the select is populated with and defines what is
 * set on the model on selection. See {@link ngOptions `ngOptions`}.
 * @param {string=} ngAttrSize sets the size of the select element dynamically. Uses the
 * {@link guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes ngAttr} directive.
 *
 *
 * @knownIssue
 *
 * In Firefox, the select model is only updated when the select element is blurred. For example,
 * when switching between options with the keyboard, the select model is only set to the
 * currently selected option when the select is blurred, e.g via tab key or clicking the mouse
 * outside the select.
 *
 * This is due to an ambiguity in the select element specification. See the
 * [issue on the Firefox bug tracker](https://bugzilla.mozilla.org/show_bug.cgi?id=126379)
 * for more information, and this
 * [Github comment for a workaround](https://github.com/angular/angular.js/issues/9134#issuecomment-130800488)
 *
 * @example
 * ### Simple `select` elements with static options
 *
 * <example name="static-select" module="staticSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="singleSelect"> Single select: </label><br>
 *     <select name="singleSelect" ng-model="data.singleSelect">
 *       <option value="option-1">Option 1</option>
 *       <option value="option-2">Option 2</option>
 *     </select><br>
 *
 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
 *       <option value="">---Please select---</option> <!-- not selected / blank option -->
 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
 *       <option value="option-2">Option 2</option>
 *     </select><br>
 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
 *     <tt>singleSelect = {{data.singleSelect}}</tt>
 *
 *     <hr>
 *     <label for="multipleSelect"> Multiple select: </label><br>
 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
 *       <option value="option-1">Option 1</option>
 *       <option value="option-2">Option 2</option>
 *       <option value="option-3">Option 3</option>
 *     </select><br>
 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
 *   </form>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('staticSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       singleSelect: null,
 *       multipleSelect: [],
 *       option1: 'option-1'
 *      };
 *
 *      $scope.forceUnknownOption = function() {
 *        $scope.data.singleSelect = 'nonsense';
 *      };
 *   }]);
 * </file>
 *</example>
 *
 * ### Using `ngRepeat` to generate `select` options
 * <example name="select-ngrepeat" module="ngrepeatSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="repeatSelect"> Repeat select: </label>
 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.model">
 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
 *     </select>
 *   </form>
 *   <hr>
 *   <tt>model = {{data.model}}</tt><br/>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('ngrepeatSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       model: null,
 *       availableOptions: [
 *         {id: '1', name: 'Option A'},
 *         {id: '2', name: 'Option B'},
 *         {id: '3', name: 'Option C'}
 *       ]
 *      };
 *   }]);
 * </file>
 *</example>
 *
 * ### Using `ngValue` to bind the model to an array of objects
 * <example name="select-ngvalue" module="ngvalueSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="ngvalueselect"> ngvalue select: </label>
 *     <select size="6" name="ngvalueselect" ng-model="data.model" multiple>
 *       <option ng-repeat="option in data.availableOptions" ng-value="option.value">{{option.name}}</option>
 *     </select>
 *   </form>
 *   <hr>
 *   <pre>model = {{data.model | json}}</pre><br/>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('ngvalueSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       model: null,
 *       availableOptions: [
           {value: 'myString', name: 'string'},
           {value: 1, name: 'integer'},
           {value: true, name: 'boolean'},
           {value: null, name: 'null'},
           {value: {prop: 'value'}, name: 'object'},
           {value: ['a'], name: 'array'}
 *       ]
 *      };
 *   }]);
 * </file>
 *</example>
 *
 * ### Using `select` with `ngOptions` and setting a default value
 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
 *
 * <example name="select-with-default-values" module="defaultValueSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="mySelect">Make a choice:</label>
 *     <select name="mySelect" id="mySelect"
 *       ng-options="option.name for option in data.availableOptions track by option.id"
 *       ng-model="data.selectedOption"></select>
 *   </form>
 *   <hr>
 *   <tt>option = {{data.selectedOption}}</tt><br/>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('defaultValueSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       availableOptions: [
 *         {id: '1', name: 'Option A'},
 *         {id: '2', name: 'Option B'},
 *         {id: '3', name: 'Option C'}
 *       ],
 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
 *       };
 *   }]);
 * </file>
 *</example>
 *
 *
 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
 *
 * <example name="select-with-non-string-options" module="nonStringSelect">
 *   <file name="index.html">
 *     <select ng-model="model.id" convert-to-number>
 *       <option value="0">Zero</option>
 *       <option value="1">One</option>
 *       <option value="2">Two</option>
 *     </select>
 *     {{ model }}
 *   </file>
 *   <file name="app.js">
 *     angular.module('nonStringSelect', [])
 *       .run(function($rootScope) {
 *         $rootScope.model = { id: 2 };
 *       })
 *       .directive('convertToNumber', function() {
 *         return {
 *           require: 'ngModel',
 *           link: function(scope, element, attrs, ngModel) {
 *             ngModel.$parsers.push(function(val) {
 *               return parseInt(val, 10);
 *             });
 *             ngModel.$formatters.push(function(val) {
 *               return '' + val;
 *             });
 *           }
 *         };
 *       });
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should initialize to model', function() {
 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
 *     });
 *   </file>
 * </example>
 *
 */var selectDirective=function(){return{restrict:'E',require:['select','?ngModel'],controller:SelectController,priority:1,link:{pre:selectPreLink,post:selectPostLink}};function selectPreLink(scope,element,attr,ctrls){var selectCtrl=ctrls[0];var ngModelCtrl=ctrls[1];// if ngModel is not defined, we don't need to do anything but set the registerOption
// function to noop, so options don't get added internally
if(!ngModelCtrl){selectCtrl.registerOption=noop;return;}selectCtrl.ngModelCtrl=ngModelCtrl;// When the selected item(s) changes we delegate getting the value of the select control
// to the `readValue` method, which can be changed if the select can have multiple
// selected values or if the options are being generated by `ngOptions`
element.on('change',function(){selectCtrl.removeUnknownOption();scope.$apply(function(){ngModelCtrl.$setViewValue(selectCtrl.readValue());});});// If the select allows multiple values then we need to modify how we read and write
// values from and to the control; also what it means for the value to be empty and
// we have to add an extra watch since ngModel doesn't work well with arrays - it
// doesn't trigger rendering if only an item in the array changes.
if(attr.multiple){selectCtrl.multiple=true;// Read value now needs to check each option to see if it is selected
selectCtrl.readValue=function readMultipleValue(){var array=[];forEach(element.find('option'),function(option){if(option.selected&&!option.disabled){var val=option.value;array.push(val in selectCtrl.selectValueMap?selectCtrl.selectValueMap[val]:val);}});return array;};// Write value now needs to set the selected property of each matching option
selectCtrl.writeValue=function writeMultipleValue(value){forEach(element.find('option'),function(option){var shouldBeSelected=!!value&&(includes(value,option.value)||includes(value,selectCtrl.selectValueMap[option.value]));var currentlySelected=option.selected;// Support: IE 9-11 only, Edge 12-15+
// In IE and Edge adding options to the selection via shift+click/UP/DOWN
// will de-select already selected options if "selected" on those options was set
// more than once (i.e. when the options were already selected)
// So we only modify the selected property if necessary.
// Note: this behavior cannot be replicated via unit tests because it only shows in the
// actual user interface.
if(shouldBeSelected!==currentlySelected){setOptionSelectedStatus(jqLite(option),shouldBeSelected);}});};// we have to do it on each watch since ngModel watches reference, but
// we need to work of an array, so we need to see if anything was inserted/removed
var lastView,lastViewRef=NaN;scope.$watch(function selectMultipleWatch(){if(lastViewRef===ngModelCtrl.$viewValue&&!equals(lastView,ngModelCtrl.$viewValue)){lastView=shallowCopy(ngModelCtrl.$viewValue);ngModelCtrl.$render();}lastViewRef=ngModelCtrl.$viewValue;});// If we are a multiple select then value is now a collection
// so the meaning of $isEmpty changes
ngModelCtrl.$isEmpty=function(value){return!value||value.length===0;};}}function selectPostLink(scope,element,attrs,ctrls){// if ngModel is not defined, we don't need to do anything
var ngModelCtrl=ctrls[1];if(!ngModelCtrl)return;var selectCtrl=ctrls[0];// We delegate rendering to the `writeValue` method, which can be changed
// if the select can have multiple selected values or if the options are being
// generated by `ngOptions`.
// This must be done in the postLink fn to prevent $render to be called before
// all nodes have been linked correctly.
ngModelCtrl.$render=function(){selectCtrl.writeValue(ngModelCtrl.$viewValue);};}};// The option directive is purely designed to communicate the existence (or lack of)
// of dynamically created (and destroyed) option elements to their containing select
// directive via its controller.
var optionDirective=['$interpolate',function($interpolate){return{restrict:'E',priority:100,compile:function(element,attr){var interpolateValueFn,interpolateTextFn;if(isDefined(attr.ngValue)){// Will be handled by registerOption
}else if(isDefined(attr.value)){// If the value attribute is defined, check if it contains an interpolation
interpolateValueFn=$interpolate(attr.value,true);}else{// If the value attribute is not defined then we fall back to the
// text content of the option element, which may be interpolated
interpolateTextFn=$interpolate(element.text(),true);if(!interpolateTextFn){attr.$set('value',element.text());}}return function(scope,element,attr){// This is an optimization over using ^^ since we don't want to have to search
// all the way to the root of the DOM for every single option element
var selectCtrlName='$selectController',parent=element.parent(),selectCtrl=parent.data(selectCtrlName)||parent.parent().data(selectCtrlName);// in case we are in optgroup
if(selectCtrl){selectCtrl.registerOption(scope,element,attr,interpolateValueFn,interpolateTextFn);}};}};}];/**
 * @ngdoc directive
 * @name ngRequired
 * @restrict A
 *
 * @description
 *
 * ngRequired adds the required {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for {@link input `input`} and {@link select `select`} controls, but can also be
 * applied to custom controls.
 *
 * The directive sets the `required` attribute on the element if the Angular expression inside
 * `ngRequired` evaluates to true. A special directive for setting `required` is necessary because we
 * cannot use interpolation inside `required`. See the {@link guide/interpolation interpolation guide}
 * for more info.
 *
 * The validator will set the `required` error key to true if the `required` attribute is set and
 * calling {@link ngModel.NgModelController#$isEmpty `NgModelController.$isEmpty`} with the
 * {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`} returns `true`. For example, the
 * `$isEmpty()` implementation for `input[text]` checks the length of the `$viewValue`. When developing
 * custom controls, `$isEmpty()` can be overwritten to account for a $viewValue that is not string-based.
 *
 * @example
 * <example name="ngRequiredDirective" module="ngRequiredExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngRequiredExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.required = true;
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="required">Toggle required: </label>
 *         <input type="checkbox" ng-model="required" id="required" />
 *         <br>
 *         <label for="input">This input must be filled if `required` is true: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-required="required" /><br>
 *         <hr>
 *         required error set? = <code>{{form.input.$error.required}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var required = element(by.binding('form.input.$error.required'));
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should set the required error', function() {
         expect(required.getText()).toContain('true');

         input.sendKeys('123');
         expect(required.getText()).not.toContain('true');
         expect(model.getText()).toContain('123');
       });
 *   </file>
 * </example>
 */var requiredDirective=function(){return{restrict:'A',require:'?ngModel',link:function(scope,elm,attr,ctrl){if(!ctrl)return;attr.required=true;// force truthy in case we are on non input element
ctrl.$validators.required=function(modelValue,viewValue){return!attr.required||!ctrl.$isEmpty(viewValue);};attr.$observe('required',function(){ctrl.$validate();});}};};/**
 * @ngdoc directive
 * @name ngPattern
 *
 * @description
 *
 * ngPattern adds the pattern {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
 *
 * The validator sets the `pattern` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
 * does not match a RegExp which is obtained by evaluating the Angular expression given in the
 * `ngPattern` attribute value:
 * * If the expression evaluates to a RegExp object, then this is used directly.
 * * If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it
 * in `^` and `$` characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
 *
 * <div class="alert alert-info">
 * **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
 * start at the index of the last search's match, thus not taking the whole input value into
 * account.
 * </div>
 *
 * <div class="alert alert-info">
 * **Note:** This directive is also added when the plain `pattern` attribute is used, with two
 * differences:
 * <ol>
 *   <li>
 *     `ngPattern` does not set the `pattern` attribute and therefore HTML5 constraint validation is
 *     not available.
 *   </li>
 *   <li>
 *     The `ngPattern` attribute must be an expression, while the `pattern` value must be
 *     interpolated.
 *   </li>
 * </ol>
 * </div>
 *
 * @example
 * <example name="ngPatternDirective" module="ngPatternExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngPatternExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.regex = '\\d+';
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="regex">Set a pattern (regex string): </label>
 *         <input type="text" ng-model="regex" id="regex" />
 *         <br>
 *         <label for="input">This input is restricted by the current pattern: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-pattern="regex" /><br>
 *         <hr>
 *         input valid? = <code>{{form.input.$valid}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should validate the input with the default pattern', function() {
         input.sendKeys('aaa');
         expect(model.getText()).not.toContain('aaa');

         input.clear().then(function() {
           input.sendKeys('123');
           expect(model.getText()).toContain('123');
         });
       });
 *   </file>
 * </example>
 */var patternDirective=function(){return{restrict:'A',require:'?ngModel',link:function(scope,elm,attr,ctrl){if(!ctrl)return;var regexp,patternExp=attr.ngPattern||attr.pattern;attr.$observe('pattern',function(regex){if(isString(regex)&&regex.length>0){regex=new RegExp('^'+regex+'$');}if(regex&&!regex.test){throw minErr('ngPattern')('noregexp','Expected {0} to be a RegExp but was {1}. Element: {2}',patternExp,regex,startingTag(elm));}regexp=regex||undefined;ctrl.$validate();});ctrl.$validators.pattern=function(modelValue,viewValue){// HTML5 pattern constraint validates the input value, so we validate the viewValue
return ctrl.$isEmpty(viewValue)||isUndefined(regexp)||regexp.test(viewValue);};}};};/**
 * @ngdoc directive
 * @name ngMaxlength
 *
 * @description
 *
 * ngMaxlength adds the maxlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
 *
 * The validator sets the `maxlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
 * is longer than the integer obtained by evaluating the Angular expression given in the
 * `ngMaxlength` attribute value.
 *
 * <div class="alert alert-info">
 * **Note:** This directive is also added when the plain `maxlength` attribute is used, with two
 * differences:
 * <ol>
 *   <li>
 *     `ngMaxlength` does not set the `maxlength` attribute and therefore HTML5 constraint
 *     validation is not available.
 *   </li>
 *   <li>
 *     The `ngMaxlength` attribute must be an expression, while the `maxlength` value must be
 *     interpolated.
 *   </li>
 * </ol>
 * </div>
 *
 * @example
 * <example name="ngMaxlengthDirective" module="ngMaxlengthExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngMaxlengthExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.maxlength = 5;
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="maxlength">Set a maxlength: </label>
 *         <input type="number" ng-model="maxlength" id="maxlength" />
 *         <br>
 *         <label for="input">This input is restricted by the current maxlength: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-maxlength="maxlength" /><br>
 *         <hr>
 *         input valid? = <code>{{form.input.$valid}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should validate the input with the default maxlength', function() {
         input.sendKeys('abcdef');
         expect(model.getText()).not.toContain('abcdef');

         input.clear().then(function() {
           input.sendKeys('abcde');
           expect(model.getText()).toContain('abcde');
         });
       });
 *   </file>
 * </example>
 */var maxlengthDirective=function(){return{restrict:'A',require:'?ngModel',link:function(scope,elm,attr,ctrl){if(!ctrl)return;var maxlength=-1;attr.$observe('maxlength',function(value){var intVal=toInt(value);maxlength=isNumberNaN(intVal)?-1:intVal;ctrl.$validate();});ctrl.$validators.maxlength=function(modelValue,viewValue){return maxlength<0||ctrl.$isEmpty(viewValue)||viewValue.length<=maxlength;};}};};/**
 * @ngdoc directive
 * @name ngMinlength
 *
 * @description
 *
 * ngMinlength adds the minlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
 *
 * The validator sets the `minlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
 * is shorter than the integer obtained by evaluating the Angular expression given in the
 * `ngMinlength` attribute value.
 *
 * <div class="alert alert-info">
 * **Note:** This directive is also added when the plain `minlength` attribute is used, with two
 * differences:
 * <ol>
 *   <li>
 *     `ngMinlength` does not set the `minlength` attribute and therefore HTML5 constraint
 *     validation is not available.
 *   </li>
 *   <li>
 *     The `ngMinlength` value must be an expression, while the `minlength` value must be
 *     interpolated.
 *   </li>
 * </ol>
 * </div>
 *
 * @example
 * <example name="ngMinlengthDirective" module="ngMinlengthExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngMinlengthExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.minlength = 3;
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="minlength">Set a minlength: </label>
 *         <input type="number" ng-model="minlength" id="minlength" />
 *         <br>
 *         <label for="input">This input is restricted by the current minlength: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-minlength="minlength" /><br>
 *         <hr>
 *         input valid? = <code>{{form.input.$valid}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should validate the input with the default minlength', function() {
         input.sendKeys('ab');
         expect(model.getText()).not.toContain('ab');

         input.sendKeys('abc');
         expect(model.getText()).toContain('abc');
       });
 *   </file>
 * </example>
 */var minlengthDirective=function(){return{restrict:'A',require:'?ngModel',link:function(scope,elm,attr,ctrl){if(!ctrl)return;var minlength=0;attr.$observe('minlength',function(value){minlength=toInt(value)||0;ctrl.$validate();});ctrl.$validators.minlength=function(modelValue,viewValue){return ctrl.$isEmpty(viewValue)||viewValue.length>=minlength;};}};};if(window.angular.bootstrap){// AngularJS is already loaded, so we can return here...
if(window.console){console.log('WARNING: Tried to load angular more than once.');}return;}// try to bind to jquery now so that one can write jqLite(fn)
// but we will rebind on bootstrap again.
bindJQuery();publishExternalAPI(angular);angular.module("ngLocale",[],["$provide",function($provide){var PLURAL_CATEGORY={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};function getDecimals(n){n=n+'';var i=n.indexOf('.');return i==-1?0:n.length-i-1;}function getVF(n,opt_precision){var v=opt_precision;if(undefined===v){v=Math.min(getDecimals(n),3);}var base=Math.pow(10,v);var f=(n*base|0)%base;return{v:v,f:f};}$provide.value("$locale",{"DATETIME_FORMATS":{"AMPMS":["AM","PM"],"DAY":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"ERANAMES":["Before Christ","Anno Domini"],"ERAS":["BC","AD"],"FIRSTDAYOFWEEK":6,"MONTH":["January","February","March","April","May","June","July","August","September","October","November","December"],"SHORTDAY":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"SHORTMONTH":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"STANDALONEMONTH":["January","February","March","April","May","June","July","August","September","October","November","December"],"WEEKENDRANGE":[5,6],"fullDate":"EEEE, MMMM d, y","longDate":"MMMM d, y","medium":"MMM d, y h:mm:ss a","mediumDate":"MMM d, y","mediumTime":"h:mm:ss a","short":"M/d/yy h:mm a","shortDate":"M/d/yy","shortTime":"h:mm a"},"NUMBER_FORMATS":{"CURRENCY_SYM":"$","DECIMAL_SEP":".","GROUP_SEP":",","PATTERNS":[{"gSize":3,"lgSize":3,"maxFrac":3,"minFrac":0,"minInt":1,"negPre":"-","negSuf":"","posPre":"","posSuf":""},{"gSize":3,"lgSize":3,"maxFrac":2,"minFrac":2,"minInt":1,"negPre":"-\u00a4","negSuf":"","posPre":"\u00a4","posSuf":""}]},"id":"en-us","localeID":"en_US","pluralCat":function(n,opt_precision){var i=n|0;var vf=getVF(n,opt_precision);if(i==1&&vf.v==0){return PLURAL_CATEGORY.ONE;}return PLURAL_CATEGORY.OTHER;}});}]);jqLite(function(){angularInit(window.document,bootstrap);});})(window);!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function placeHoldersCount(b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
}

function byteLength(b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64);
}

function toByteArray(b64) {
  var i, l, tmp, placeHolders, arr;
  var len = b64.length;
  placeHolders = placeHoldersCount(b64);

  arr = new Arr(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0; i < l; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 0x3F];
    output += lookup[tmp << 2 & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('');
}

/***/ }),
/* 153 */
/***/ (function(module, exports) {

module.exports = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
};

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

var http = __webpack_require__(19);

var https = module.exports;

for (var key in http) {
    if (http.hasOwnProperty(key)) https[key] = http[key];
};

https.request = function (params, cb) {
    if (!params) params = {};
    params.scheme = 'https';
    params.protocol = 'https:';
    return http.request.call(this, params, cb);
};

/***/ }),
/* 155 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function (root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module && !module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
		root = freeGlobal;
	}

	/**
  * The `punycode` object.
  * @name punycode
  * @type Object
  */
	var punycode,


	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647,
	    // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	    tMin = 1,
	    tMax = 26,
	    skew = 38,
	    damp = 700,
	    initialBias = 72,
	    initialN = 128,
	    // 0x80
	delimiter = '-',
	    // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	    regexNonASCII = /[^\x20-\x7E]/,
	    // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
	    // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},


	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	    floor = Math.floor,
	    stringFromCharCode = String.fromCharCode,


	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
  * A generic error utility function.
  * @private
  * @param {String} type The error type.
  * @returns {Error} Throws a `RangeError` with the applicable error message.
  */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
  * A generic `Array#map` utility function.
  * @private
  * @param {Array} array The array to iterate over.
  * @param {Function} callback The function that gets called for every array
  * item.
  * @returns {Array} A new array of values returned by the callback function.
  */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
  * A simple `Array#map`-like wrapper to work with domain name strings or email
  * addresses.
  * @private
  * @param {String} domain The domain name or email address.
  * @param {Function} callback The function that gets called for every
  * character.
  * @returns {Array} A new string of characters returned by the callback
  * function.
  */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
  * Creates an array containing the numeric code points of each Unicode
  * character in the string. While JavaScript uses UCS-2 internally,
  * this function will convert a pair of surrogate halves (each of which
  * UCS-2 exposes as separate characters) into a single code point,
  * matching UTF-16.
  * @see `punycode.ucs2.encode`
  * @see <https://mathiasbynens.be/notes/javascript-encoding>
  * @memberOf punycode.ucs2
  * @name decode
  * @param {String} string The Unicode input string (UCS-2).
  * @returns {Array} The new array of code points.
  */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) {
					// low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
  * Creates a string based on an array of numeric code points.
  * @see `punycode.ucs2.decode`
  * @memberOf punycode.ucs2
  * @name encode
  * @param {Array} codePoints The array of numeric code points.
  * @returns {String} The new Unicode string (UCS-2).
  */
	function ucs2encode(array) {
		return map(array, function (value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
  * Converts a basic code point into a digit/integer.
  * @see `digitToBasic()`
  * @private
  * @param {Number} codePoint The basic numeric code point value.
  * @returns {Number} The numeric value of a basic code point (for use in
  * representing integers) in the range `0` to `base - 1`, or `base` if
  * the code point does not represent a value.
  */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
  * Converts a digit/integer into a basic code point.
  * @see `basicToDigit()`
  * @private
  * @param {Number} digit The numeric value of a basic code point.
  * @returns {Number} The basic code point whose value (when used for
  * representing integers) is `digit`, which needs to be in the range
  * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
  * used; else, the lowercase form is used. The behavior is undefined
  * if `flag` is non-zero and `digit` has no uppercase form.
  */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
  * Bias adaptation function as per section 3.4 of RFC 3492.
  * https://tools.ietf.org/html/rfc3492#section-3.4
  * @private
  */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
  * Converts a Punycode string of ASCII-only symbols to a string of Unicode
  * symbols.
  * @memberOf punycode
  * @param {String} input The Punycode string of ASCII-only symbols.
  * @returns {String} The resulting string of Unicode symbols.
  */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,

		/** Cached calculation results */
		baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base;; /* no condition */k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;
			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);
		}

		return ucs2encode(output);
	}

	/**
  * Converts a string of Unicode symbols (e.g. a domain name label) to a
  * Punycode string of ASCII-only symbols.
  * @memberOf punycode
  * @param {String} input The string of Unicode symbols.
  * @returns {String} The resulting Punycode string of ASCII-only symbols.
  */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],

		/** `inputLength` will hold the number of code points in `input`. */
		inputLength,

		/** Cached calculation results */
		handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base;; /* no condition */k += base) {
						t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;
		}
		return output.join('');
	}

	/**
  * Converts a Punycode string representing a domain name or an email address
  * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
  * it doesn't matter if you call it on a string that has already been
  * converted to Unicode.
  * @memberOf punycode
  * @param {String} input The Punycoded domain name or email address to
  * convert to Unicode.
  * @returns {String} The Unicode representation of the given Punycode
  * string.
  */
	function toUnicode(input) {
		return mapDomain(input, function (string) {
			return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
		});
	}

	/**
  * Converts a Unicode string representing a domain name or an email address to
  * Punycode. Only the non-ASCII parts of the domain name will be converted,
  * i.e. it doesn't matter if you call it with a domain that's already in
  * ASCII.
  * @memberOf punycode
  * @param {String} input The domain name or email address to convert, as a
  * Unicode string.
  * @returns {String} The Punycode representation of the given domain name or
  * email address.
  */
	function toASCII(input) {
		return mapDomain(input, function (string) {
			return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
   * A string representing the current Punycode.js version number.
   * @memberOf punycode
   * @type String
   */
		'version': '1.4.1',
		/**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode
   * @type Object
   */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (true) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
			return punycode;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}
})(this);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(168)(module), __webpack_require__(0)))

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function (qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr,
        vstr,
        k,
        v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function (v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function (obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map(xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(157);
exports.encode = exports.stringify = __webpack_require__(158);

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(14);

/*<replacement>*/
var util = __webpack_require__(5);
util.inherits = __webpack_require__(2);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Buffer = __webpack_require__(8).Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
        // Callback can either be a function or a string
        if (typeof callback !== "function") {
            callback = new Function("" + callback);
        }
        // Copy function arguments
        var args = new Array(arguments.length - 1);
        for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i + 1];
        }
        // Store and register the task
        var task = { callback: callback, args: args };
        tasksByHandle[nextHandle] = task;
        registerImmediate(nextHandle);
        return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
            case 0:
                callback();
                break;
            case 1:
                callback(args[0]);
                break;
            case 2:
                callback(args[0], args[1]);
                break;
            case 3:
                callback(args[0], args[1], args[2]);
                break;
            default:
                callback.apply(undefined, args);
                break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function (handle) {
            process.nextTick(function () {
                runIfPresent(handle);
            });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function () {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function (event) {
            if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function (handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function (event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function (handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function (handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function (handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();
    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();
    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();
    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();
    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(3)))

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer, global, process) {var capability = __webpack_require__(20);
var inherits = __webpack_require__(2);
var response = __webpack_require__(164);
var stream = __webpack_require__(18);
var toArrayBuffer = __webpack_require__(165);

var IncomingMessage = response.IncomingMessage;
var rStates = response.readyStates;

function decideMode(preferBinary, useFetch) {
	if (capability.fetch && useFetch) {
		return 'fetch';
	} else if (capability.mozchunkedarraybuffer) {
		return 'moz-chunked-arraybuffer';
	} else if (capability.msstream) {
		return 'ms-stream';
	} else if (capability.arraybuffer && preferBinary) {
		return 'arraybuffer';
	} else if (capability.vbArray && preferBinary) {
		return 'text:vbarray';
	} else {
		return 'text';
	}
}

var ClientRequest = module.exports = function (opts) {
	var self = this;
	stream.Writable.call(self);

	self._opts = opts;
	self._body = [];
	self._headers = {};
	if (opts.auth) self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));
	Object.keys(opts.headers).forEach(function (name) {
		self.setHeader(name, opts.headers[name]);
	});

	var preferBinary;
	var useFetch = true;
	if (opts.mode === 'disable-fetch' || 'timeout' in opts) {
		// If the use of XHR should be preferred and includes preserving the 'content-type' header.
		// Force XHR to be used since the Fetch API does not yet support timeouts.
		useFetch = false;
		preferBinary = true;
	} else if (opts.mode === 'prefer-streaming') {
		// If streaming is a high priority but binary compatibility and
		// the accuracy of the 'content-type' header aren't
		preferBinary = false;
	} else if (opts.mode === 'allow-wrong-content-type') {
		// If streaming is more important than preserving the 'content-type' header
		preferBinary = !capability.overrideMimeType;
	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
		// Use binary if text streaming may corrupt data or the content-type header, or for speed
		preferBinary = true;
	} else {
		throw new Error('Invalid value for opts.mode');
	}
	self._mode = decideMode(preferBinary, useFetch);

	self.on('finish', function () {
		self._onFinish();
	});
};

inherits(ClientRequest, stream.Writable);

ClientRequest.prototype.setHeader = function (name, value) {
	var self = this;
	var lowerName = name.toLowerCase();
	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	// http-browserify did it, so I will too.
	if (unsafeHeaders.indexOf(lowerName) !== -1) return;

	self._headers[lowerName] = {
		name: name,
		value: value
	};
};

ClientRequest.prototype.getHeader = function (name) {
	var header = this._headers[name.toLowerCase()];
	if (header) return header.value;
	return null;
};

ClientRequest.prototype.removeHeader = function (name) {
	var self = this;
	delete self._headers[name.toLowerCase()];
};

ClientRequest.prototype._onFinish = function () {
	var self = this;

	if (self._destroyed) return;
	var opts = self._opts;

	var headersObj = self._headers;
	var body = null;
	if (opts.method !== 'GET' && opts.method !== 'HEAD') {
		if (capability.blobConstructor) {
			body = new global.Blob(self._body.map(function (buffer) {
				return toArrayBuffer(buffer);
			}), {
				type: (headersObj['content-type'] || {}).value || ''
			});
		} else {
			// get utf8 string
			body = Buffer.concat(self._body).toString();
		}
	}

	// create flattened list of headers
	var headersList = [];
	Object.keys(headersObj).forEach(function (keyName) {
		var name = headersObj[keyName].name;
		var value = headersObj[keyName].value;
		if (Array.isArray(value)) {
			value.forEach(function (v) {
				headersList.push([name, v]);
			});
		} else {
			headersList.push([name, value]);
		}
	});

	if (self._mode === 'fetch') {
		global.fetch(self._opts.url, {
			method: self._opts.method,
			headers: headersList,
			body: body || undefined,
			mode: 'cors',
			credentials: opts.withCredentials ? 'include' : 'same-origin'
		}).then(function (response) {
			self._fetchResponse = response;
			self._connect();
		}, function (reason) {
			self.emit('error', reason);
		});
	} else {
		var xhr = self._xhr = new global.XMLHttpRequest();
		try {
			xhr.open(self._opts.method, self._opts.url, true);
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err);
			});
			return;
		}

		// Can't set responseType on really old browsers
		if ('responseType' in xhr) xhr.responseType = self._mode.split(':')[0];

		if ('withCredentials' in xhr) xhr.withCredentials = !!opts.withCredentials;

		if (self._mode === 'text' && 'overrideMimeType' in xhr) xhr.overrideMimeType('text/plain; charset=x-user-defined');

		if ('timeout' in opts) {
			xhr.timeout = opts.timeout;
			xhr.ontimeout = function () {
				self.emit('timeout');
			};
		}

		headersList.forEach(function (header) {
			xhr.setRequestHeader(header[0], header[1]);
		});

		self._response = null;
		xhr.onreadystatechange = function () {
			switch (xhr.readyState) {
				case rStates.LOADING:
				case rStates.DONE:
					self._onXHRProgress();
					break;
			}
		};
		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
		// in onprogress, not in onreadystatechange with xhr.readyState = 3
		if (self._mode === 'moz-chunked-arraybuffer') {
			xhr.onprogress = function () {
				self._onXHRProgress();
			};
		}

		xhr.onerror = function () {
			if (self._destroyed) return;
			self.emit('error', new Error('XHR error'));
		};

		try {
			xhr.send(body);
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err);
			});
			return;
		}
	}
};

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */
function statusValid(xhr) {
	try {
		var status = xhr.status;
		return status !== null && status !== 0;
	} catch (e) {
		return false;
	}
}

ClientRequest.prototype._onXHRProgress = function () {
	var self = this;

	if (!statusValid(self._xhr) || self._destroyed) return;

	if (!self._response) self._connect();

	self._response._onXHRProgress();
};

ClientRequest.prototype._connect = function () {
	var self = this;

	if (self._destroyed) return;

	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode);
	self._response.on('error', function (err) {
		self.emit('error', err);
	});

	self.emit('response', self._response);
};

ClientRequest.prototype._write = function (chunk, encoding, cb) {
	var self = this;

	self._body.push(chunk);
	cb();
};

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
	var self = this;
	self._destroyed = true;
	if (self._response) self._response._destroyed = true;
	if (self._xhr) self._xhr.abort();
	// Currently, there isn't a way to truly abort a fetch.
	// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
};

ClientRequest.prototype.end = function (data, encoding, cb) {
	var self = this;
	if (typeof data === 'function') {
		cb = data;
		data = undefined;
	}

	stream.Writable.prototype.end.call(self, data, encoding, cb);
};

ClientRequest.prototype.flushHeaders = function () {};
ClientRequest.prototype.setTimeout = function () {};
ClientRequest.prototype.setNoDelay = function () {};
ClientRequest.prototype.setSocketKeepAlive = function () {};

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = ['accept-charset', 'accept-encoding', 'access-control-request-headers', 'access-control-request-method', 'connection', 'content-length', 'cookie', 'cookie2', 'date', 'dnt', 'expect', 'host', 'keep-alive', 'origin', 'referer', 'te', 'trailer', 'transfer-encoding', 'upgrade', 'user-agent', 'via'];
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer, __webpack_require__(0), __webpack_require__(3)))

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, Buffer, global) {var capability = __webpack_require__(20);
var inherits = __webpack_require__(2);
var stream = __webpack_require__(18);

var rStates = exports.readyStates = {
	UNSENT: 0,
	OPENED: 1,
	HEADERS_RECEIVED: 2,
	LOADING: 3,
	DONE: 4
};

var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {
	var self = this;
	stream.Readable.call(self);

	self._mode = mode;
	self.headers = {};
	self.rawHeaders = [];
	self.trailers = {};
	self.rawTrailers = [];

	// Fake the 'close' event, but only once 'end' fires
	self.on('end', function () {
		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
		process.nextTick(function () {
			self.emit('close');
		});
	});

	if (mode === 'fetch') {
		self._fetchResponse = response;

		self.url = response.url;
		self.statusCode = response.status;
		self.statusMessage = response.statusText;

		response.headers.forEach(function (header, key) {
			self.headers[key.toLowerCase()] = header;
			self.rawHeaders.push(key, header);
		});

		// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
		var reader = response.body.getReader();
		function read() {
			reader.read().then(function (result) {
				if (self._destroyed) return;
				if (result.done) {
					self.push(null);
					return;
				}
				self.push(new Buffer(result.value));
				read();
			}).catch(function (err) {
				self.emit('error', err);
			});
		}
		read();
	} else {
		self._xhr = xhr;
		self._pos = 0;

		self.url = xhr.responseURL;
		self.statusCode = xhr.status;
		self.statusMessage = xhr.statusText;
		var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
		headers.forEach(function (header) {
			var matches = header.match(/^([^:]+):\s*(.*)/);
			if (matches) {
				var key = matches[1].toLowerCase();
				if (key === 'set-cookie') {
					if (self.headers[key] === undefined) {
						self.headers[key] = [];
					}
					self.headers[key].push(matches[2]);
				} else if (self.headers[key] !== undefined) {
					self.headers[key] += ', ' + matches[2];
				} else {
					self.headers[key] = matches[2];
				}
				self.rawHeaders.push(matches[1], matches[2]);
			}
		});

		self._charset = 'x-user-defined';
		if (!capability.overrideMimeType) {
			var mimeType = self.rawHeaders['mime-type'];
			if (mimeType) {
				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
				if (charsetMatch) {
					self._charset = charsetMatch[1].toLowerCase();
				}
			}
			if (!self._charset) self._charset = 'utf-8'; // best guess
		}
	}
};

inherits(IncomingMessage, stream.Readable);

IncomingMessage.prototype._read = function () {};

IncomingMessage.prototype._onXHRProgress = function () {
	var self = this;

	var xhr = self._xhr;

	var response = null;
	switch (self._mode) {
		case 'text:vbarray':
			// For IE9
			if (xhr.readyState !== rStates.DONE) break;
			try {
				// This fails in IE8
				response = new global.VBArray(xhr.responseBody).toArray();
			} catch (e) {}
			if (response !== null) {
				self.push(new Buffer(response));
				break;
			}
		// Falls through in IE8	
		case 'text':
			try {
				// This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
				response = xhr.responseText;
			} catch (e) {
				self._mode = 'text:vbarray';
				break;
			}
			if (response.length > self._pos) {
				var newData = response.substr(self._pos);
				if (self._charset === 'x-user-defined') {
					var buffer = new Buffer(newData.length);
					for (var i = 0; i < newData.length; i++) buffer[i] = newData.charCodeAt(i) & 0xff;

					self.push(buffer);
				} else {
					self.push(newData, self._charset);
				}
				self._pos = response.length;
			}
			break;
		case 'arraybuffer':
			if (xhr.readyState !== rStates.DONE || !xhr.response) break;
			response = xhr.response;
			self.push(new Buffer(new Uint8Array(response)));
			break;
		case 'moz-chunked-arraybuffer':
			// take whole
			response = xhr.response;
			if (xhr.readyState !== rStates.LOADING || !response) break;
			self.push(new Buffer(new Uint8Array(response)));
			break;
		case 'ms-stream':
			response = xhr.response;
			if (xhr.readyState !== rStates.LOADING) break;
			var reader = new global.MSStreamReader();
			reader.onprogress = function () {
				if (reader.result.byteLength > self._pos) {
					self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
					self._pos = reader.result.byteLength;
				}
			};
			reader.onload = function () {
				self.push(null);
			};
			// reader.onerror = ??? // TODO: this
			reader.readAsArrayBuffer(response);
			break;
	}

	// The ms-stream case handles end separately in reader.onload()
	if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
		self.push(null);
	}
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(1).Buffer, __webpack_require__(0)))

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(1).Buffer;

module.exports = function (buf) {
	// If the buffer is backed by a Uint8Array, a faster version will work
	if (buf instanceof Uint8Array) {
		// If the buffer isn't a subarray, return the underlying ArrayBuffer
		if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
			return buf.buffer;
		} else if (typeof buf.buffer.slice === 'function') {
			// Otherwise we need to get a proper copy
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		}
	}

	if (Buffer.isBuffer(buf)) {
		// This is the slow version that will work with any Buffer
		// implementation (even in old browsers)
		var arrayCopy = new Uint8Array(buf.length);
		var len = buf.length;
		for (var i = 0; i < len; i++) {
			arrayCopy[i] = buf[i];
		}
		return arrayCopy.buffer;
	} else {
		throw new Error('Argument must be a Buffer');
	}
};

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function (arg) {
    return typeof arg === 'string';
  },
  isObject: function (arg) {
    return typeof arg === 'object' && arg !== null;
  },
  isNull: function (arg) {
    return arg === null;
  },
  isNullOrUndefined: function (arg) {
    return arg == null;
  }
};

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate(fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config(name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 168 */
/***/ (function(module, exports) {

module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function () {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function () {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),
/* 169 */
/***/ (function(module, exports) {

module.exports = extend;

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {};

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }

    return target;
}

/***/ }),
/* 170 */
/***/ (function(module, exports) {

module.exports = "<div class=\"section-group\">\n    <h3 style=\"font-weight:bold;\">All Known Copies</h3>\n    <div class=\"row\">\n        <div class=\"col-xs-12\">\n            <div class=\"related-flex\">\n                <div class=\"related-item\" ng-repeat=\"copy in akc.work.related_works | filter:{type:'copy'}\">\n                    <span ng-if=\"copy.link\">\n                        <a ng-if=\"copy.link.indexOf('none') == -1\" href=\"{{ copy.link }}\" ng-bind-html=\"copy.displayTitle.trim() | markdown\"></a>\n                        <span ng-if=\"copy.link.indexOf('none') > -1\" ng-bind-html=\"copy.displayTitle.trim() | markdown\">\n                        </span>\n                    </span>\n                    <span style=\"font-weight:bold;\" ng-if=\"!copy.link && copy.displayTitle\" ng-bind-html=\"copy.displayTitle.trim() | markdown\"></span>\n                    <span ng-repeat=\"info in akc.getInfo(copy.info) track by $index\" ng-bind-html=\"info.trim() | markdown\"></span>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>";

/***/ }),
/* 171 */
/***/ (function(module, exports) {

module.exports = "<div class=\"section-group\">\n    <h3 style=\"font-weight:bold;\">All Known Related Items</h3>\n    <div class=\"row\">\n        <div class=\"col-xs-12\">\n            <div class=\"related-flex\">\n                <div class=\"related-item\" ng-repeat=\"copy in akri.work.related_works | filter:{type:'!copy'}\">\n                <span ng-if=\"copy.link\">\n                    <a href=\"{{ copy.link }}\" ng-bind-html=\"copy.displayTitle.trim() | markdown\"></a>\n                </span>\n                    <span style=\"font-weight:bold;\" ng-if=\"!copy.link && copy.displayTitle\" ng-bind-html=\"copy.displayTitle.trim() | markdown\"></span>\n                    <span ng-repeat=\"info in akri.getInfo(copy.info) track by $index\" ng-bind-html=\"info.trim() | markdown\"></span>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>";

/***/ }),
/* 172 */
/***/ (function(module, exports) {

module.exports = "<nav class=\"navbar navbar-default navbar-fixed-top\"\n  ng-class=\"{'menu-open':bm.rs.worksNavState, 'menu-closed': !bm.rs.worksNavState}\">\n  <div class=\"site-header-container\">\n    <div class=\"container-fluid site-header\">\n      <a class=\"navbar-brand\" ng-href=\"{{showmePage ? '':'/'}}\"><span class=\"name\">The William Blake Archive</span><span class=\"sig\"></span></a>\n      <span ng-if=\"bm.rs.persistentmode == 'gallery' && !bm.rs.showmePage\" class=\"gr-display\">GALLERY MODE</span>\n      <span ng-if=\"bm.rs.persistentmode == 'reading' && !bm.rs.showmePage\" class=\"gr-display\">READING MODE</span>\n      <span ng-if=\"bm.rs.showmePage && bm.rs.showmeType == 'text'\" class=\"gr-display\">DIPLOMATIC TRANSCRIPTION</span>\n      <span ng-if=\"bm.rs.showmePage && bm.rs.showmeType == 'desc'\" class=\"gr-display\">ILLUSTRATION DESCRIPTION</span>\n      <span ng-if=\"bm.rs.showmePage && bm.rs.showmeType == 'note'\" class=\"gr-display\">EDITORS' NOTES</span>\n      <span ng-if=\"bm.rs.showmePage && bm.rs.showmeType == 'enlargement'\" class=\"gr-display\">ENLARGEMENT</span>\n      <span ng-if=\"bm.rs.showmePage && bm.rs.showmeType == 'truesize'\" class=\"gr-display\">TRUE SIZE</span>\n      <button tooltip=\"Open/Close Table of Contents\" tooltip-placement=\"bottom\" ng-click=\"bm.rs.worksNavState = !bm.rs.worksNavState\" type=\"button\" class=\"collapse-archive\" ng-class=\"{'hidden':bm.rs.showmePage, 'menu-open':bm.rs.worksNavState, 'menu-closed': !bm.rs.worksNavState}\">\n        <span class=\"sr-only\">Toggle navigation</span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </button>\n\n\n      <div class=\"lightbox hidden-xs\" ng-class=\"{'hidden':showmePage}\" style=\"width:40px;\">\n        <a tooltip=\"Open Lightbox\" tooltip-placement=\"bottom\" class=\"lb-amount black-tooltip-arrow\" target=\"_lightbox\" href=\"/lightbox\">\n          <span ng-bind=\"bm.rs.cartItems.length\" class=\"ng-binding\">0</span></a>\n          <a tooltip=\"Clear Lightbox\" tooltip-placement=\"bottom\" class=\"black-tooltip-arrow\" id=\"clear-cart-link\" style=\"float:right;color: black;font-size: 12px;margin-top: -65%;font-weight:bold;\">X</a>\n      </div>\n      <!--\n      <div title=\"Lightbox\" class=\"lightbox hidden-xs\" ng-class=\"{'hidden':showmePage}\" style=\"width:40px;\">\n        <a class=\"lb-amount\" target=\"_lightbox\" href=\"/lightbox\">\n          <span ng-bind=\"bm.rs.cartItems.length\">0</span></a>\n          <a id=\"clear-cart-link\" class=\"lb-amount glyphicon glyphicon-remove\"\n            style=\"background-color: #a94442;float:right;display:inline;margin-top:-5%\"/>\n      </div>\n      -->\n\n\n      <div id=\"custom-tweet-button\" class=\"custom-tweet-button\"><a twitter-share href=\"\" onclick=\"window.open('https://twitter.com/share?text=@BlakeArchive','name','width=600,height=400')\"></a></div>\n\n      <!-- Use any element to open/show the overlay navigation menu -->\n      <work-title ng-if=\"bm.rs.showWorkTitle\"></work-title>\n    </div>\n  </div>\n  <!-- /.container -->\n  <nav class=\"navbar navbar-default\" role=\"navigation\" ng-class=\"{'hidden':bm.rs.showmePage}\">\n    <div class=\"container-fluid\">\n      <view-sub-menu ng-class=\"{'hidden':bm.rs.showmePage}\"></view-sub-menu>\n      <search-box/>\n      <nav-menu></nav-menu>\n    </div>\n  </nav>\n  <dpi ng-if=\"bm.rs.help != 'home' && bm.rs.help != 'work' && bm.rs.help != 'static' && bm.rs.help != 'search' && bm.rs.showmeType != 'text' && bm.rs.showmeType != 'desc' && bm.rs.showmeType != 'note' && bm.rs.showmeType != 'enlargement'\"></dpi>\n</nav>\n";

/***/ }),
/* 173 */
/***/ (function(module, exports) {

module.exports = "\n<div class=\"modal-header\">\n    <button type=\"button\" class=\"close\" ng-click=\"close()\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n    <h4 class=\"modal-title\">Client PPI</h4>\n</div>\n<div class=\"modal-body\">\n\n    <div class=\"row\">\n        <div class=\"col-xs-12\">\n            <p>To accurately display the true size of the object, the site must know the resolution and size of your monitor.</p>\n        </div>\n\n        <div class=\"col-xs-12 col-sm-6\">\n            <div class=\"row\">\n                <div class=\"col-xs-12\">\n                    <strong>Resolution:</strong>\n                </div>\n                <div class=\"col-xs-12 col-sm-5\">\n                    <input type=\"text\" class=\"form-control\" ng-model=\"ppi.config.x\" ng-change=\"ppi.updateConfig()\">\n                </div>\n                <!--{{ ppi.config.x }}-->\n                <div class=\"col-xs-12 col-sm-1\">X</div>\n                <div class=\"col-xs-12 col-sm-5\">\n                    <input type=\"text\" class=\"form-control\" ng-model=\"ppi.config.y\" ng-change=\"ppi.updateConfig()\">\n                </div>\n            </div>\n            <p>\n                <small>\n                    Common:\n                    <span ng-repeat=\"res in ppi.common.resolutions\">\n                        <a ng-click=\"ppi.updateConfig(res.x, res.y, 0)\">\n                            {{res.x}}x{{res.y}}\n                        </a>\n                    </span>\n                </small>\n            </p>\n        </div>\n\n        <div class=\"col-xs-12 col-sm-6\">\n            <div class=\"row\">\n                <div class=\"col-xs-12\">\n                    <strong>Diagonal:</strong>\n                </div>\n                <div class=\"col-xs-12 col-sm-5\">\n                    <input type=\"text\" class=\"form-control\" ng-model=\"ppi.config.d\">\n                </div>\n            </div>\n            <p>\n                <small>\n                    Common:\n                    <span ng-repeat=\"diag in ppi.common.diagonals\">\n                        <a ng-click=\"ppi.updateConfig(0,0,diag)\">\n                            {{diag}}\"\n                        </a>\n                    </span>\n                </small>\n            </p>\n        </div>\n\n        <div class=\"col-xs-12\">\n            <div class=\"text-center well\">\n                <p>Once you've set the values, the red line below should measure 1\" across.</p>\n\n                <div class=\"test-line\" ng-style=\"ppi.testLine\"></div>\n\n                <button class=\"btn btn-default\" ng-click=\"close(); ppi.savePpi()\" style=\"margin-top: 20px;\">Save Values on this Device</button>\n            </div>\n        </div>\n\n        <div class=\"col-xs-12\">\n            <accordion close-others=\"true\" id=\"client-dpi-accordion\">\n                <accordion-group id=\"known-devices\">\n                    <accordion-heading>\n                            Known Devices\n                    </accordion-heading>\n                    <input class=\"form-control\" placeholder=\"search for device...\" ng-model=\"ppi.screenQuery\">\n                    <table class=\"table\">\n                        <thead><tr><th>Device</th><th>Resolution</th><th>Diagonal Length</th></tr></thead>\n                        <tbody>\n                            <tr ng-repeat=\"device in ppi.screens | filter:ppi.screenQuery\">\n                                <td><a ng-click=\"ppi.updateConfig(device.w,device.h,device.d)\">{{device.name}}</a></td>\n                                <td>{{device.w}}x{{device.h}}</td>\n                                <td>{{device.d}}\"</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </accordion-group>\n                <!--\n                <accordion-group id=\"resolution-windows\">\n                    <accordion-heading>\n                        Find your resolution: Windows\n                    </accordion-heading>\n                    ...\n                </accordion-group>\n                <accordion-group id=\"resolution-Mac\">\n                    <accordion-heading>\n                        Find your resolution: Mac\n                    </accordion-heading>\n                    ...\n                </accordion-group>\n                <accordion-group id=\"diagonal-length\">\n                    <accordion-heading>\n                        Find your monitor's diagonal length\n                    </accordion-heading>\n                    ...\n                </accordion-group>\n                -->\n            </accordion>\n        </div>\n    </div>\n\n</div>\n\n\n";

/***/ }),
/* 174 */
/***/ (function(module, exports) {

module.exports = "<div ng-if=\"dl.infoObject['#text']\">\n\t<dt ng-if=\"dl.dt == 'Publisher'\" style=\"margin-top:-18px\">{{ dl.dt }} </dt>\n    <dt ng-if=\"dl.dt != 'Publisher'\">{{ dl.dt }} </dt>\n    <dd ng-bind-html=\"dl.infoObject['#text'].trim() | markdown | highlight:dl.highlight\"></dd>\n    <div ng-if=\"dl.infoObject.note\" class=\"indent-dl\">\n        <dt><li style=\"margin-left:90%\"></li></dt>\n        <dd ng-if=\"!dl.infoObject.note[0]\" ng-bind-html=\"dl.infoObject.note['#text'].trim() | markdown | highlight:dl.highlight\"></dd>\n    </div>\n    <div ng-if=\"dl.infoObject.note[0]\" class=\"indent-dl\">\n        <dt></dt>\n        <dd ng-if=\"dl.infoObject.note[0]\" ng-bind-html=\"dl.infoObject.note[0]['#text'].trim() | markdown | highlight:dl.highlight\"></dd>\n    </div>\n    <div ng-if=\"dl.infoObject.note[1]\" class=\"indent-dl\">\n        <dt><li style=\"margin-left:90%\"></li></dt>\n        <dd ng-if=\"dl.infoObject.note[1]\" ng-bind-html=\"dl.infoObject.note[1]['#text'].trim() | markdown | highlight:dl.highlight\"></dd>\n    </div>\n</div>\n";

/***/ }),
/* 175 */
/***/ (function(module, exports) {

module.exports = "<!--<header class=\"page-header\">\n    <p class=\"subhead\">Copy Information</p>\n    <h1>{{ info.getHeader().filedesc.titlestmt.title.main['#text'] }}</h1>\n</header>-->\n<div class=\"row\">\n    <div class=\"col-sm-6\">\n        <h3>Information</h3>\n        <dl>\n\n            <dt>Title</dt>\n            <dd ng-bind-html=\" info.getSource().objdescid.objtitle.title['#text'].trim() | markdown | highlight:info.highlight\"></dd>\n            <div ng-if=\"info.getSource().objdescid.objtitle.title.note\" class=\"indent-dl\">\n                    <dt><li style=\"margin-left:90%\"></li></dt>\n                    <dd ng-bind-html=\"info.getSource().objdescid.objtitle.title.note['#text'].trim() | markdown | highlight:info.highlight\"></dd>\n                </div>\n            \n            <div ng-repeat=\"origination in info.getOrigination() track by $index\">\n                <dt>Origination</dt>\n                <dd><span ng-bind-html=\"origination['#text'].trim() | markdown | highlight:info.highlight\"></span>: <span ng-bind-html=\"info.getOriginationRole(origination.role) | markdown | highlight:info.highlight\"></span></dd>\n                <div ng-if=\"origination.note\" class=\"indent-dl\">\n                    <dt><li style=\"margin-left:90%\"></li></dt>\n                    <dd ng-bind-html=\"origination.note['#text'].trim() | markdown | highlight:info.highlight\"></dd>\n                </div>\n            </div>\n\n            <span style=\"float:left;margin-left:-61px; color:#b0afaf\" ng-if=\"info.getSource().objdescid.imprint\">IMPRINT</span>\n            <div style=\"border-left:1px solid #b0afaf\">\n            <copy-info-dl dt=\"Publisher\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objdescid.imprint.publisher\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Place of Publication\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objdescid.imprint.pubplace\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Date\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objdescid.imprint.date\"></copy-info-dl>\n            </div>\n\n            <copy-info-dl dt=\"Composition Date\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objdescid.compdate\"></copy-info-dl>\n\n            <copy-info-dl ng-if=\"info.getSource().objinfo.printdate\" dt=\"Print Date\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.printdate\"></copy-info-dl>\n\n            <!--<div ng-if=\"copy.print_date\">\n                <dt>Print Date</dt>\n                <dd ng-bind-html=\"copy.print_date.trim() | markdown | highlight:info.highlight\"></dd>\n            </div>-->\n\n            <copy-info-dl dt=\"Number of Objects\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.numberobj\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Object Order\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.objorder\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Object Size\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.objsize\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Number of Leaves\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.numberleaves\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Leaf Size\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.leafsize\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Medium\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.medium\"></copy-info-dl>\n\n            <copy-info-dl ng-if=\"info.getSource().objinfo.medium[0]\" dt=\"Medium\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.medium[0]\"></copy-info-dl>\n\n             <copy-info-dl ng-if=\"info.getSource().objinfo.medium[1]\" dt=\"Medium\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.medium[1]\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Printing Style\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.printingstyle\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Ink Color\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.inkcolor\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Support\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.support\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Watermark\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.watermark\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Etched Numbers\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.etchednumbers\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Penned Numbers\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.pennednumbers\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Frame Lines\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.framelines\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Binding\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.binding\"></copy-info-dl>\n\n            <copy-info-dl dt=\"Stab Holes\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().objinfo.stabholes\"></copy-info-dl>\n\n        </dl>\n    </div>\n\n    <div class=\"col-sm-6\">\n        <h3>Provenance</h3>\n        <dl>\n            <copy-info-dl dt=\"Name\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().provenance.name\"></copy-info-dl>\n            <copy-info-dl dt=\"Date\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().provenance.date\"></copy-info-dl>\n            <copy-info-dl dt=\"Dealer\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().provenance.dealer\"></copy-info-dl>\n            <copy-info-dl dt=\"Price\" highlight=\"{{ info.highlight }}\" info-object=\"info.getSource().provenance.price\"></copy-info-dl>\n            <dt><li style=\"margin-left:90%\"></li></dt>\n            <dd><span ng-bind-html=\"info.getSource().provenance.note['#text'].trim() | markdown | highlight:info.highlight\"></span></dd>\n        </dl>\n\n        <h3>Present Location</h3>\n        <dl ng-if=\"info.getSource().repositories == null\">\n            <!--<dt>Address</dt>-->\n            <dd>\n                <dt>Institution </dt>\n                <dd ng-bind-html=\"info.getSource().repository.institution['#text'].trim() | highlight:info.highlight | markdown\"></dd>\n                <!--<span ng-bind-html=\"info.getSource().repository.addressline[0]['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"info.getSource().repository.addressline[0]\">\n                <span ng-bind-html=\"info.getSource().repository.addressline[1]['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"info.getSource().repository.addressline[1]\">\n                <span ng-bind-html=\"info.getSource().repository.addressline[2]['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"info.getSource().repository.addressline[2]\">\n                <span ng-if=\"info.getSource().repository.addressline[3]['#text'].indexOf(':') < 0\" ng-bind-html=\"info.getSource().repository.addressline[3]['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"info.getSource().repository.addressline[3]['#text'].indexOf(':') < 0\">\n                <span ng-if=\"info.getSource().repository.addressline[4]['#text'].indexOf(':') < 0 && info.getSource().repository.addressline[3]['#text'].indexOf(':') < 0\" ng-bind-html=\"info.getSource().repository.addressline[4]['#text'].trim() | highlight:info.highlight | markdown\"></span>-->\n            </dd>\n            <!--\n            <span ng-if=\"info.getSource().repository.addressline[3]['#text'].indexOf(':') > -1\">\n            <dt> {{ info.getSource().repository.addressline[3]['#text'].split(': ')[0] }}</dt>\n            <dd>\n                <span ng-bind-html=\"info.getSource().repository.addressline[3]['#text'].split(': ')[1].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"info.getSource().repository.addressline[3]['#text'].indexOf(':') < 0 || info.getSource().repository.addressline[3]['#text'].indexOf('Mail:') > -1\">\n                <span ng-if=\"info.getSource().repository.addressline[4]['#text'].indexOf(':') < 0\" ng-bind-html=\"info.getSource().repository.addressline[4]['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"info.getSource().repository.addressline[4]['#text'].indexOf(':') < 0\">\n                <span ng-if=\"info.getSource().repository.addressline[5]['#text'].indexOf(':') < 0\" ng-bind-html=\"info.getSource().repository.addressline[5]['#text'].trim() | highlight:info.highlight | markdown\"></span>\n\n\n            </dd>\n\n            </span>\n            \n            <span ng-if=\"info.getSource().repository.addressline[4]['#text'].indexOf(':') > -1\">\n            <dt> {{ info.getSource().repository.addressline[4]['#text'].split(': ')[0] }}</dt>\n            <dd ng-bind-html=\"info.getSource().repository.addressline[4]['#text'].split(': ')[1].trim() | highlight:info.highlight | markdown\"></dd>\n            </span>\n\n            <span ng-if=\"info.getSource().repository.addressline[5]['#text'] != null && info.getSource().repository.addressline[3]['#text'].indexOf('Mail:') < 0\">\n            <dt> {{ info.getSource().repository.addressline[5]['#text'].split(': ')[0] }}</dt>\n            <dd ng-bind-html=\"info.getSource().repository.addressline[5]['#text'].split(': ')[1].trim() | highlight:info.highlight | markdown\"></dd>\n            </span>\n\n            <span ng-if=\"info.getSource().repository.addressline[6]['#text'] != null\">\n            <dt> {{ info.getSource().repository.addressline[6]['#text'].split(': ')[0] }}</dt>\n            <dd ng-bind-html=\"info.getSource().repository.addressline[6]['#text'].split(': ')[1].trim() | highlight:info.highlight | markdown\"></dd>\n            </span>\n\n            <span ng-if=\"info.getSource().repository.addressline[7]['#text'] != null\">\n            <dt> {{ info.getSource().repository.addressline[7]['#text'].split(': ')[0] }}</dt>\n            <dd ng-bind-html=\"info.getSource().repository.addressline[7]['#text'].split(': ')[1].trim() | highlight:info.highlight | markdown\"></dd>\n            </span>\n\n            <span ng-if=\"info.getSource().repository.addressline[8]['#text'] != null\">\n            <dt> {{ info.getSource().repository.addressline[8]['#text'].split(': ')[0] }}</dt>\n            <dd ng-bind-html=\"info.getSource().repository.addressline[8]['#text'].split(': ')[1].trim() | highlight:info.highlight | markdown\"></dd>\n            </span>\n\n            <span ng-if=\"info.getSource().repository.addressline[9]['#text'] != null\">\n            <dt> {{ info.getSource().repository.addressline[9]['#text'].split(': ')[0] }}</dt>\n            <dd ng-bind-html=\"info.getSource().repository.addressline[9]['#text'].split(': ')[1].trim() | highlight:info.highlight | markdown\"></dd>\n            </span>\n            -->\n            <div ng-if=\"info.getSource().repository.department['#text']\">\n                <dt>Department</dt>\n                <dd ng-bind-html=\"info.getSource().repository.department['#text'].trim() | highlight:info.highlight | markdown\"></dd>\n            </div>\n            <div ng-if=\"info.getSource().repository.collection['#text']\">\n                <dt>Collection</dt>\n                <dd ng-bind-html=\"info.getSource().repository.collection['#text'].trim() | highlight:info.highlight | markdown\"></dd>\n            </div>\n            <div ng-if=\"info.getSource().repository.repositoryid['@label']\">\n                <dt>{{ info.getSource().repository.repositoryid['@label'] }}</dt>\n                <dd ng-bind-html=\"info.getSource().repository.repositoryid['#text'].trim() | highlight:info.highlight | markdown\"></dd>\n            </div>\n            <div ng-if=\"info.getSource().repository.repositoryid[0]['@label']\">\n                <dt>{{ info.getSource().repository.repositoryid[0]['@label'] }}</dt>\n                <dd ng-bind-html=\"info.getSource().repository.repositoryid[0]['#text'].trim() | highlight:info.highlight | markdown\"></dd>\n            </div>\n            <div ng-if=\"info.getSource().repository.repositoryid[1]['@label']\">\n                <dt>{{ info.getSource().repository.repositoryid[1]['@label'] }}</dt>\n                <dd ng-bind-html=\"info.getSource().repository.repositoryid[1]['#text'].trim() | highlight:info.highlight | markdown\"></dd>\n            </div>\n\n            <div>\n                <dt>Contact Information</dt>\n                <dd>See <a href=\"/staticpage/archiveataglance?p=contributingcollections\">Contributing Collections</a> under About the Archive</dd>\n            </div>\n\n        </dl>\n\n\n        <dl ng-if=\"info.getSource().repositories\" ng-repeat=\"r in info.getSource().repositories.repository track by $index\">\n            <!--<dt>Address</dt>-->\n        \n            <dd>\n                <dt>Institution </dt>\n                <dd ng-bind-html=\"r.institution['#text'].trim() | highlight:info.highlight | markdown\"></dd>\n                <!--<span ng-if=\"r.addressline\" ng-bind-html=\"r.addressline['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"r.addressline[0] == null\">\n                <span ng-bind-html=\"r.addressline[0]['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"r.addressline[0]\">\n                <span ng-bind-html=\"r.addressline[1]['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"r.addressline[1]\">\n                <span ng-if=\"r.addressline[2]['#text'].indexOf(':') < 0\" ng-bind-html=\"r.addressline[2]['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"r.addressline[2]['#text'].indexOf(':') < 0\">\n\n\n                <span ng-if=\"r.addressline[3]['#text'].indexOf(':') < 0\" ng-bind-html=\"r.addressline[3]['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"r.addressline[3]['#text'].indexOf(':') < 0\">\n                <span ng-if=\"r.addressline[4]['#text'].indexOf(':') < 0 && r.addressline[3]['#text'].indexOf(':') < 0\" ng-bind-html=\"r.addressline[4]['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"r.addressline[4]['#text'].indexOf(':') < 0\">\n                <span ng-if=\"r.addressline[5]['#text'].indexOf(':') < 0\" ng-bind-html=\"r.addressline[5]['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"r.addressline[5]['#text'].indexOf(':') < 0\">\n                <span ng-if=\"r.addressline[6]['#text'].indexOf(':') < 0\" ng-bind-html=\"r.addressline[6]['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"r.addressline[6]['#text'].indexOf(':') < 0\">\n                <span ng-if=\"r.addressline[7]['#text'].indexOf(':') < 0\" ng-bind-html=\"r.addressline[7]['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"r.addressline[7]['#text'].indexOf(':') < 0\">\n                -->\n            </dd>\n            <!--\n            <span ng-if=\"r.addressline[2]['#text'].indexOf(':') > -1\">\n                <dt ng-if=\"r.addressline[2]['#text'].indexOf(':') > -1\"> {{ r.addressline[2]['#text'].split(': ')[0] }}</dt>\n                     <dd ng-if=\"r.addressline[2]['#text'].indexOf(':') > -1\">\n                        <span ng-bind-html=\"r.addressline[2]['#text'].split(': ')[1].trim() | highlight:info.highlight | markdown\"></span>\n                    </dd>\n                   \n            </span>\n\n            <span ng-if=\"r.addressline[3]['#text'].indexOf(':') > -1\">\n            <dt> {{ r.addressline[3]['#text'].split(': ')[0] }}</dt>\n            <dd>\n                <span ng-bind-html=\"r.addressline[3]['#text'].split(': ')[1].trim() | highlight:info.highlight | markdown\"><br></span>\n                <span ng-if=\"r.addressline[4]['#text'].indexOf(':') < 0\" ng-bind-html=\"r.addressline[4]['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"r.addressline[4]['#text'].indexOf(':') < 0\">\n                <span ng-if=\"r.addressline[5]['#text'].indexOf(':') < 0\" ng-bind-html=\"r.addressline[5]['#text'].trim() | highlight:info.highlight | markdown\"></span><br ng-if=\"r.addressline[5]['#text'].indexOf(':') < 0\">\n\n\n            </dd>\n\n            </span>\n\n            <span ng-if=\"r.addressline[4]['#text'].indexOf(':') > -1\">\n            <dt> {{ r.addressline[4]['#text'].split(': ')[0] }}</dt>\n            <dd ng-bind-html=\"r.addressline[4]['#text'].split(': ')[1].trim() | highlight:info.highlight | markdown\"></dd>\n            </span>\n\n            <span ng-if=\"r.addressline[5]['#text'] != null && r.addressline[3]['#text'].indexOf('Mail:') < 0 && r.addressline[5]['#text'].indexOf(':') > -1\">\n            <dt> {{ r.addressline[5]['#text'].split(': ')[0] }}</dt>\n            <dd ng-bind-html=\"r.addressline[5]['#text'].split(': ')[1].trim() | highlight:info.highlight | markdown\"></dd>\n            </span>\n\n            <span ng-if=\"r.addressline[6]['#text'] != null && r.addressline[6]['#text'].indexOf(':') > -1\">\n            <dt> {{ r.addressline[6]['#text'].split(': ')[0] }}</dt>\n            <dd ng-bind-html=\"r.addressline[6]['#text'].split(': ')[1].trim() | highlight:info.highlight | markdown\"></dd>\n            </span>\n\n            <span ng-if=\"r.addressline[7]['#text'] != null r.addressline[7]['#text'].indexOf(':') > -1\">\n            <dt> {{ r.addressline[7]['#text'].split(': ')[0] }}</dt>\n            <dd ng-bind-html=\"r.addressline[7]['#text'].split(': ')[1].trim() | highlight:info.highlight | markdown\"></dd>\n            </span>\n\n            <span ng-if=\"r.addressline[8]['#text'] != null\">\n            <dt> {{ r.addressline[8]['#text'].split(': ')[0] }}</dt>\n            <dd ng-bind-html=\"r.addressline[8]['#text'].split(': ')[1].trim() | highlight:info.highlight | markdown\"></dd>\n            </span>\n\n            <span ng-if=\"r.addressline[9]['#text'] != null\">\n            <dt> {{ r.addressline[9]['#text'].split(': ')[0] }}</dt>\n            <dd ng-bind-html=\"r.addressline[9]['#text'].split(': ')[1].trim() | highlight:info.highlight | markdown\"></dd>\n            </span>\n            -->\n            <div ng-if=\"r.department['#text']\">\n                <dt>Department</dt>\n                <dd ng-bind-html=\"r.department['#text'].trim() | highlight:info.highlight | markdown\"></dd>\n            </div>\n            <div ng-if=\"r.collection['#text']\">\n                <dt>Collection</dt>\n                <dd ng-bind-html=\"r.collection['#text'].trim() | highlight:info.highlight | markdown\"></dd>\n            </div>\n            <div ng-if=\"r.repositoryid['@label']\">\n                <dt>{{ r.repositoryid['@label'] }}</dt>\n                <dd ng-bind-html=\"r.repositoryid['#text'].trim() | highlight:info.highlight | markdown\"></dd>\n            </div>\n            <div ng-if=\"r.repositoryid[0]['@label']\">\n                <dt>{{ r.repositoryid[0]['@label'] }}</dt>\n                <dd ng-bind-html=\"r.repositoryid[0]['#text'].trim() | highlight:info.highlight | markdown\"></dd>\n            </div>\n            <div ng-if=\"r.repositoryid[1]['@label']\">\n                <dt>{{ r.repositoryid[1]['@label'] }}</dt>\n                <dd ng-bind-html=\"r.repositoryid[1]['#text'].trim() | highlight:info.highlight | markdown\"></dd>\n            </div>\n\n            <div>\n                <dt>Contact Information</dt>\n                <dd>See <a href=\"/staticpage/archiveataglance?p=contributingcollections\">Contributing Collections</a> under About the Archive</dd>\n            </div>\n\n            <div ng-if=\"$index < info.getSource().repositories.repository.length - 1\" style=\"border-bottom:1px solid #f1f1f1; padding-top:14px\"></div>\n\n        </dl>\n\n\n    </div>\n</div>\n";

/***/ }),
/* 176 */
/***/ (function(module, exports) {

module.exports = "<div class=\"container-fluid tabs\">\n    <div class=\"container\">\n        <ul class=\"nav nav-tabs objects\" role=\"tablist\">\n            <li role=\"presentation\" ng-class=\"{active:tabs.selectedTab == '#objects-in-copy'}\">\n                <a href=\"\" ng-click=\"tabs.showTab('#objects-in-copy');\" role=\"tab\">Objects in {{ tabs.getCopyOrGroup() }}</a>\n            </li>\n            <li role=\"presentation\" ng-if=\"tabs.bds.object.matrix.length > 0\" ng-class=\"{active:tabs.selectedTab == '#objects-from-same-matrix'}\">\n                <a href=\"\" ng-click=\"tabs.showTab('#objects-from-same-matrix');\" role=\"tab\">Objects from the Same Matrix</a>\n            </li>\n            <li role=\"presentation\" ng-if=\"tabs.bds.object.sequence.length > 0\" ng-class=\"{active:tabs.selectedTab == '#objects-from-same-production-sequence'}\">\n                <a href=\"\" ng-click=\"tabs.showTab('#objects-from-same-production-sequence');\" role=\"tab\">Objects from the Same Production Sequence</a>\n            </li>\n            <li role=\"presentation\" ng-if=\"tabs.bds.object.motif.length > 0\" ng-class=\"{active:tabs.selectedTab == '#objects-with-same-motif'}\">\n                <a href=\"\" ng-click=\"tabs.showTab('#objects-with-same-motif');\" role=\"tab\">Objects with a Similar Design</a>\n            </li>\n\n            <li role=\"presentation\" ng-if=\"tabs.bds.object.textmatch.length > 0\" ng-class=\"{active:tabs.selectedTab == '#objects-with-text-matches'}\">\n                <a href=\"\" ng-click=\"tabs.showTab('#objects-with-text-matches');\" role=\"tab\">Objects from Other Works with Matching Text</a>\n            </li>\n            \n            <li role=\"presentation\"\n                ng-if=\"tabs.bds.object.text_ref.objects.length > 0 || tabs.bds.object.text_ref.copies.length > 0 || tabs.bds.object.text_ref.works.length > 0\"\n                ng-class=\"{active:tabs.selectedTab == '#text-reference'}\">\n                <a href=\"\" ng-click=\"tabs.showTab('#text-reference');\" role=\"tab\">Related Texts or Images</a>\n            </li>\n            <li ng-if=\"tabs.bds.work.medium != 'exhibit'\" role=\"presentation\" ng-class=\"{active:tabs.selectedTab == '#copy-info'}\">\n                <a href=\"\" ng-click=\"tabs.showTab('#copy-info')\" role=\"tab\">{{ tabs.getCopyOrWork() }} Information</a>\n            </li>\n            <li ng-if=\"tabs.bds.work.medium != 'exhibit'\" role=\"presentation\" ng-class=\"{active:tabs.selectedTab == '#ee-info'}\">\n                <a href=\"\" ng-click=\"tabs.showTab('#ee-info')\" role=\"tab\">Electronic Edition Information</a>\n            </li>\n\n        </ul>\n    </div>\n</div>\n<div class=\"container-fluid main\">\n    <div class=\"container\">\n        <div class=\"tab-content\">\n            <objects-in-copy-tab ng-show=\"tabs.selectedTab == '#objects-in-copy'\" />\n\n            <!-- SAME MATRIX -->\n            <div role=\"tabpanel\" class=\"fadeinout tab-pane active in\" ng-show=\"tabs.selectedTab == '#objects-from-same-matrix'\"  id=\"objects-from-same-matrix\">\n                <header class=\"page-header\">\n                    <!--<p class=\"subhead\">Objects from the Same Matrix</p>-->\n                </header>\n                <objects-from-same type=\"matrix\"></objects-from-same>\n            </div>\n\n            <!-- SAME SEQUENCE -->\n            <div role=\"tabpanel\" class=\"fadeinout tab-pane active in\" ng-show=\"tabs.selectedTab == '#objects-from-same-production-sequence'\"  id=\"objects-from-same-production-sequence\">\n                <header class=\"page-header\">\n                    <!--<p class=\"subhead\">Objects from the Same Production Sequence</p>-->\n                </header>\n                <objects-from-same type=\"sequence\"></objects-from-same>\n            </div>\n\n            <!-- SAME MOTIF -->\n            <div role=\"tabpanel\" class=\"fadeinout tab-pane active in\" ng-show=\"tabs.selectedTab == '#objects-with-same-motif'\" id=\"objects-with-same-motif\">\n                <header class=\"page-header\">\n                    <!--<p class=\"subhead\">Objects with the Same Motif</p>-->\n                </header>\n                <objects-from-same type=\"motif\"></objects-from-same>\n            </div>\n\n            <textual-reference-tab  ng-show=\"tabs.selectedTab == '#text-reference'\" />\n\n            <!-- TEXT MATCHES -->\n            <div role=\"tabpanel\" class=\"fadeinout tab-pane active in\" ng-show=\"tabs.selectedTab == '#objects-with-text-matches'\" id=\"objects-with-text-matches\">\n                <header class=\"page-header\">\n                    <!--<p class=\"subhead\">Objects with the Same Motif</p>-->\n                </header>\n                <objects-from-same type=\"textmatch\"></objects-from-same>\n            </div>\n\n            <!-- COPY INFO -->\n            <div role=\"tabpanel\" class=\"fadeinout tab-pane active in\" ng-show=\"tabs.selectedTab == '#copy-info'\" id=\"copy-info\">\n                <header class=\"page-header\">\n                    <!--<p class=\"subhead\">{{ tabs.getCopyOrWork() }} Information</p>-->\n                </header>\n                <copy-information copy=\"tabs.bds.copy\" object=\"tabs.bds.object\"></copy-information>\n            </div>\n\n            <!-- Electronic Edition Info-->\n            <electronic-edition-info-tab ng-show=\"tabs.selectedTab == '#ee-info'\"/>\n        </div>\n    </div>\n</div>";

/***/ }),
/* 177 */
/***/ (function(module, exports) {

module.exports = "<div id=\"cropper\" class=\"container\">\n  <img id=\"cropThisImg\" src=\"{{imageToCrop}}\" alt=\"Image\"\n    ng-cropper\n    ng-cropper-options=\"options\"\n    ng-cropper-show=\"'show.cropper'\"\n    ng-cropper-hide=\"'hide.cropper'\"\n    />\n</div>\n";

/***/ }),
/* 178 */
/***/ (function(module, exports) {

module.exports = "<div class=\"btn-group\" style=\"position:absolute;right:0\">\n        <button tooltip=\"For viewing on computer.\" tooltip-placement=\"bottom\" style=\"margin-left:-1px;line-height:0.5;border-radius:0px;height:21px\" ng-class=\"{'active':dpivalue == '100'}\" class=\"btn btn-gr-selection\" ng-click=\"dpi.reloadWith100or300('100')\">\n            <span class=\"gr-abbreviation\" style=\"height:21px;font-size:14px\">100 DPI</span>\n            <span class=\"gr-title\">View 100dpi images instead of 300dpi</span>\n        </button>\n        <button tooltip=\"For projection purposes. Performance might be slightly reduced.\" tooltip-placement=\"left\" style=\"margin-left:-1px;line-height:0.5;border-radius:0px;height:21px\" ng-class=\"{'active':dpivalue == '300'}\" class=\"btn btn-gr-selection\" ng-click=\"dpi.reloadWith100or300('300')\">\n            <span class=\"gr-abbreviation\" style=\"height:21px;font-size:14px\">300 DPI</span>\n            <span class=\"gr-title\">View 300dpi images instead of 100dpi</span>\n        </button>\n</div>";

/***/ }),
/* 179 */
/***/ (function(module, exports) {

module.exports = "<p><strong>Object</strong></p>\n\n<ul ng-if=\"noteCtrl.objectNotes()\">\n    <li ng-repeat=\"note in noteCtrl.object.notes | filter:{type:'desc'} track by $index\">\n    \t<span ng-bind-html=\"note.note.trim() | markdown | highlight:noteCtrl.highlight\"></span>\n    \t\n    \t<div ng-repeat=\"text_note_image_filename in note.text_note_image_filenames\" style=\"display:inline-flex;\">\n\t\t\t<img style=\"width:100%\" ng-src=\"/images/{{text_note_image_filename}}\">\n\t\t</div>\n\n    </li>\n</ul>\n<p ng-if=\"!noteCtrl.objectNotes()\"><em>[There are no object notes for this object.]</em></p>\n\n\n\n\n<p><strong>Text</strong></p>\n<ul ng-if=\"noteCtrl.textNotes()\">\n    <li ng-repeat=\"note in noteCtrl.object.notes | filter:{type:'text'} track by $index\">\n        Line {{ note.line }}: <span ng-bind-html=\"note.note.trim() | markdown | highlight:noteCtrl.highlight\"></span>\n\n        \n\t\t\t\t<div ng-repeat=\"text_note_image_filename in note.text_note_image_filenames\" style=\"display:inline-flex;\">\n\t\t\t\t\t<img style=\"width:100%\" ng-src=\"/images/{{text_note_image_filename}}\">\n\t\t\t\t</div>\n\t\t\n\n    </li>\n</ul>\n<p ng-if=\"!noteCtrl.textNotes()\"><em>[There are no textual notes for this object.]</em></p>\n";

/***/ }),
/* 180 */
/***/ (function(module, exports) {

module.exports = "<!-- Electronic Edition Info-->\n<div role=\"tabpanel\" class=\"fadeinout tab-pane active in\" id=\"ee-info\">\n    <header class=\"page-header\">\n        <!--<p class=\"subhead\">Electronic Edition Information</p>-->\n    </header>\n    <div class=\"row\">\n        <div class=\"col-xs-12\">\n            <div ng-bind-html=\"info.bds.copy.header_html\"></div>\n        </div>\n    </div>\n\n    <!-- regular copies -->\n    <div class=\"row\" ng-if=\"!info.bds.work.virtual\">\n        <div class=\"col-xs-12 text-center\">\n            <p><a href=\"/bad/{{ info.bds.copy.bad_id }}.xml\" target=\"_blank\">View XML</a> <small>(may not work in all browsers)</small></h4>\n        </div>\n    </div>\n\n    <!-- virtual works -->\n    <div class=\"row\" ng-if=\"info.bds.work.virtual && info.bds.work.bad_id != 'letters'\">\n        <div class=\"col-xs-12\">\n            <h4>Included Objects</h4>\n            <div class=\"well\" ng-repeat=\"obj in info.bds.copyObjects | filter:{supplemental:null} track by $index\">\n                <h4>{{ obj.full_object_id }}</h4>\n                <p><strong>Title:</strong> {{ obj.title }}</p>\n                <p><a href=\"/bad/{{ obj.copy_bad_id }}.xml\" target=\"_blank\">View XML</a> <small>(may not work in all browsers)</small></p>\n            </div>\n        </div>\n    </div>\n\n    <!-- letters -->\n    <div class=\"row\" ng-if=\"info.bds.work.virtual && info.bds.work.bad_id == 'letters'\">\n        <div class=\"col-xs-12\">\n            <h4>Included Objects</h4>\n            <div class=\"well\" ng-repeat=\"obj in info.bds.workCopies track by $index\">\n                <h4>{{ obj.object_group}}</h4>\n                <p><a href=\"/bad/{{ obj.copy_bad_id }}.xml\" target=\"_blank\">View XML</a> <small>(may not work in all browsers)</small></p>\n            </div>\n        </div>\n    </div>\n</div>";

/***/ }),
/* 181 */
/***/ (function(module, exports) {

module.exports = "<div class=\"handprint-block\">\n    <a ng-href=\"{{handprint.link}}\" ng-click=\"$root.showOverlay = false; handprint.action()\">\n        <span class=\"handprint-header\">{{handprint.header}}</span>\n        <span class=\"object-img\" style=\"background-image: url({{ handprint.imagePath }}{{ handprint.image }});\">\n            <span class=\"handprint-title\" ng-if=\"!handprint.image\">{{handprint.title}}</span>\n        </span>\n        <span class=\"description\" ng-bind-html=\"handprint.footer\"></span>\n        <span ng-if=\"handprint.textmatchstrings\" class=\"textmatchstrings\" ng-bind-html=\"handprint.textmatchstrings\"></span>\n    </a>\n</div>";

/***/ }),
/* 182 */
/***/ (function(module, exports) {

module.exports = "<div ng-if=\"descCtrl.object.components == ''\" class=\"tei-wrapper\">[There is no illustration description for this object.]</div>\n\n\n<div ng-if=\"descCtrl.object.components != ''\" ng-repeat=\"comp in descCtrl.object.components track by $index\">\n    <p style=\"font-size: 1.8rem; padding-top: 5px;\">\n        <strong>\n            Sector {{ comp.location }}<br>\n            <span class=\"text-capitalize\">{{ comp.type }} Illustration:</span>\n        </strong>\n    </p>\n    <p ng-bind-html=\"comp['#text'] | highlight:descCtrl.highlight\"></p>\n    <div ng-repeat=\"c in comp.components track by $index\">\n        <p><strong>Component (Sector {{ c.component['@location'] }})</strong></p>\n\n        <p ng-if=\"descCtrl.keywords != 'hidden'\" class=\"keywords\">Keywords:</p>\n        <ul class=\"list-inline\" ng-if=\"descCtrl.keywords != 'hidden'\">\n            <li ng-repeat=\"char in [].concat(c.component.characteristic) track by $index\">\n                <span ng-bind-html=\"char['#text'] | highlight:descCtrl.highlight\"></span>\n            </li>\n        </ul>\n        <p ng-if=\"descCtrl.keywords != 'only'\" ng-bind-html=\"c.component.illusobjdesc['#text'] | highlight:descCtrl.highlight | markdown\"></p>\n    </div>\n    <hr>\n</div>\n";

/***/ }),
/* 183 */
/***/ (function(module, exports) {

module.exports = "<a ng-click=\"imagetags.imageTagsOpen()\"><button tooltip=\"Searchable image tags\" tooltip-placement=\"bottom\" title=\"Searchable Image Tags\" style=\"background-color:blanchedalmond\" class=\"btn btn-default black-tooltip-arrow\" type=\"\">IT</button></a>";

/***/ }),
/* 184 */
/***/ (function(module, exports) {

module.exports = "<div id=\"object-detail-tray\" ng-style=\"{'min-height': tray.trayHeight}\">\n    <div tooltip-placement=\"right\" tooltip=\"Diplomatic Transcription, Illustration Description, Editors' Notes\" class=\"tray-toggle\" ng-click=\"tray.toggle()\">Open/Close Tray</div>\n    <div id=\"object-detail-tray-inner\" to-top-on-broadcast=\"change::selectedObject\" target=\".panel-body\">\n\n        <accordion close-others=\"true\" id=\"object-detail-tray-accordion\">\n            <accordion-group id=\"textual-transcription\" is-open=\"tray.open.text\">\n                <div ng-style=\"{'max-height': tray.trayBodyHeight}\">\n                    <accordion-heading>\n                        Diplomatic Transcription\n                        <a show-me=\"text\" object=\"tray.bds.object\" copy-bad=\"{{tray.bds.copy.bad_id}}\" class=\"new-window\" title=\"New Window\">New Window</a>\n                    </accordion-heading>\n                    <text-transcription object=\"tray.bds.object\"></text-transcription>\n                </div>\n            </accordion-group>\n\n            <accordion-group id=\"illustration-description\" is-open=\"tray.open.desc\">\n              <div ng-style=\"{'max-height': tray.trayBodyHeight}\">\n                  <accordion-heading>\n                      Illustration Description\n                      <a show-me=\"desc\" object=\"tray.bds.object\" copy-bad=\"{{tray.bds.copy.bad_id}}\" class=\"new-window\" title=\"New Window\">New Window</a>\n                  </accordion-heading>\n\n                  <illustration-description object=\"tray.bds.object\"></illustration-description>\n              </div>\n            </accordion-group>\n\n            <accordion-group id=\"editors-notes\" is-open=\"tray.open.notes\">\n              <div ng-style=\"{'max-height': tray.trayBodyHeight}\">\n                  <accordion-heading>\n                      Editors’ Notes\n                      <a show-me=\"note\" object=\"tray.bds.object\" copy-bad=\"{{tray.bds.copy.bad_id}}\" class=\"new-window\" title=\"New Window\">New Window</a>\n                  </accordion-heading>\n\n                  <editor-notes object=\"tray.bds.object\"></editor-notes>\n              </div>\n            </accordion-group>\n\n        </accordion>\n\n      </div>\n</div>";

/***/ }),
/* 185 */
/***/ (function(module, exports) {

module.exports = "<ul class=\"nav navbar-nav blake-menu\">\n  <li dropdown class=\"dropdown\"><a dropdown-toggle role=\"button\" aria-expanded=\"false\">Illuminated <span>Books</span></a>\n    <ul class=\"dropdown-menu\" role=\"menu\">\n      <li ng-repeat=\"menu_list in menu.lists.illuminated_books\"><a href=\"/work/{{ menu_list.bad_id }}\">{{ menu_list.menuTitle }}\n        (Composed {{ menu_list.composition_date_string }})</a></li>\n    </ul>\n  </li>\n  <li dropdown class=\"dropdown\"><a dropdown-toggle role=\"button\" aria-expanded=\"false\">Commercial Book <span>Illustrations</span></a>\n    <ul class=\"dropdown-menu\" role=\"menu\">\n      <li role=\"presentation\" class=\"dropdown-header\">Designed and Engraved by Blake</li>\n      <li ng-repeat=\"menu_list in menu.lists.book_illustration[0].designed_engraved\"><a\n          href=\"/work/{{ menu_list.bad_id }}\">{{ menu_list.menuTitle }} (Composed {{ menu_list.composition_date_string }})</a></li>\n      <li role=\"presentation\" class=\"dropdown-header\">Designed by Blake and Engraved by Other Engravers</li>\n      <li ng-repeat=\"menu_list in menu.lists.book_illustration[0].designed\"><a href=\"/work/{{ menu_list.bad_id }}\">{{ menu_list.menuTitle }}\n        (Composed {{ menu_list.composition_date_string }})</a></li>\n      <li role=\"presentation\" class=\"dropdown-header\">Engraved by Blake After Designs by Other Artists</li>\n      <li ng-repeat=\"menu_list in menu.lists.book_illustration[0].engraved\"><a href=\"/work/{{ menu_list.bad_id }}\">{{ menu_list.menuTitle }}\n        (Composed {{ menu_list.composition_date_string }})</a></li>\n      <li>&nbsp;</li>\n      <li>&nbsp;</li>\n    </ul>\n  </li>\n  <li dropdown class=\"dropdown\"><a dropdown-toggle role=\"button\" aria-expanded=\"false\">Separate Prints and <span>Prints in Series</span></a>\n    <ul class=\"dropdown-menu\" role=\"menu\">\n      <li role=\"presentation\" class=\"dropdown-header\">Designed and Engraved by Blake</li>\n      <li ng-repeat=\"menu_list in menu.lists.prints[0].designed_engraved\"><a href=\"/work/{{ menu_list.bad_id }}\">{{ menu_list.menuTitle }}\n        (Composed {{ menu_list.composition_date_string }})</a></li>\n      <li role=\"presentation\" class=\"dropdown-header\">Designed by Blake and Engraved by Other Engravers</li>\n      <!--<li class=\"empty-subcat\" ng-repeat=\"menu_list in menu.lists.prints[1].designed\">—</li>-->\n      <li class=\"empty-subcat\">—</li>\n      <li role=\"presentation\" class=\"dropdown-header\">Engraved by Blake After Designs by Other Artists</li>\n      <li ng-repeat=\"menu_list in menu.lists.prints[0].engraved\"><a href=\"/work/{{ menu_list.bad_id }}\">{{ menu_list.menuTitle }}\n        (Composed {{ menu_list.composition_date_string }})</a></li>\n      <li role=\"presentation\" class=\"dropdown-header\">Color Printed Drawings</li>\n      <li ng-repeat=\"menu_list in menu.lists.prints[0].drawings\"><a href=\"/work/{{ menu_list.bad_id }}\">{{ menu_list.menuTitle }}\n        (Composed {{ menu_list.composition_date_string }})</a></li>\n    </ul>\n  </li>\n  <li dropdown class=\"dropdown\"><a dropdown-toggle role=\"button\" aria-expanded=\"false\">Drawings and <span>Paintings</span></a>\n    <ul class=\"dropdown-menu\" role=\"menu\">\n      <li role=\"presentation\" class=\"dropdown-header\">Pencil Sketches</li>\n      <li ng-repeat=\"menu_list in menu.lists.drawings_paintings[0].pencil\"><a href=\"/work/{{ menu_list.bad_id }}\">{{ menu_list.menuTitle }}\n        (Composed {{ menu_list.composition_date_string }})</a></li>\n      <li role=\"presentation\" class=\"dropdown-header\">Pen and Ink Drawings</li>\n      <li ng-repeat=\"menu_list in menu.lists.drawings_paintings[0].pen\"><a href=\"/work/{{ menu_list.bad_id }}\">{{ menu_list.menuTitle }}\n        (Composed {{ menu_list.composition_date_string }})</a></li>\n      <li role=\"presentation\" class=\"dropdown-header\">Monochrome Wash Drawings</li>\n      <li ng-repeat=\"menu_list in menu.lists.drawings_paintings[0].monochrome\"><a\n          href=\"/work/{{ menu_list.bad_id }}\">{{ menu_list.menuTitle }} (Composed {{ menu_list.composition_date_string }})</a></li>\n      <li role=\"presentation\" class=\"dropdown-header\">Water Color Drawings</li>\n      <li ng-repeat=\"menu_list in menu.lists.drawings_paintings[0].wc\"><a href=\"/work/{{ menu_list.bad_id }}\">{{ menu_list.menuTitle }}\n        (Composed {{ menu_list.composition_date_string }})</a></li>\n      <li role=\"presentation\" class=\"dropdown-header\">Paintings</li>\n      <li ng-repeat=\"menu_list in menu.lists.drawings_paintings[0].paintings\"><a\n          href=\"/work/{{ menu_list.bad_id }}\">{{ menu_list.menuTitle }} (Composed {{ menu_list.composition_date_string }})</a></li>\n    </ul>\n  </li>\n  <li dropdown class=\"dropdown\"><a dropdown-toggle role=\"button\" aria-expanded=\"false\">Manuscripts\n    and <span>Typographic Works</span></a>\n    <ul class=\"dropdown-menu\" role=\"menu\">\n      <li role=\"presentation\" class=\"dropdown-header\">Manuscripts</li>\n      <li ng-repeat=\"menu_list in menu.lists.manuscripts_typo[0].manuscripts\"><a\n          href=\"/work/{{ menu_list.bad_id }}\">{{ menu_list.menuTitle }} (Composed {{ menu_list.composition_date_string }})</a></li>\n      <li role=\"presentation\" class=\"dropdown-header\">Letters</li>\n      <li ng-repeat=\"menu_list in menu.lists.manuscripts_typo[0].letters\"><a href=\"/work/{{ menu_list.bad_id }}\">{{ menu_list.menuTitle }}\n        (Composed {{ menu_list.composition_date_string }})</a></li>\n      <li role=\"presentation\" class=\"dropdown-header\">Typographic Editions</li>\n      <li ng-if=\"menu.lists.manuscripts_typo[0].typographic[0] != null\" ng-repeat=\"menu_list in menu.lists.manuscripts_typo[0].typographic\"><a href=\"/work/{{ menu_list.bad_id }}\">{{ menu_list.menuTitle }}\n        (Composed {{ menu_list.composition_date_string }})</a></li>\n      <li ng-if=\"menu.lists.manuscripts_typo[0].typographic[0] == null\" class=\"empty-subcat\">—</li>\n    </ul>\n  </li>\n  <li dropdown class=\"dropdown\"><a dropdown-toggle role=\"button\" aria-expanded=\"false\">All\n    <span>Works</span></a>\n    <ul class=\"dropdown-menu\" role=\"menu\">\n      <div style=\"height:65vh; overflow-y:scroll\">\n        <li role=\"presentation\" class=\"dropdown-header\">In Alphabetical Order</li>\n      <li ng-repeat=\"workAlpha in menu.allWorksAlpha\">\n        <a ng-if=\"workAlpha != false && workAlpha.medium != 'exhibit'\" style=\"color:#ccc\" href=\"/work/{{ workAlpha.bad_id }}\">{{ workAlpha.menuTitle }} (Composed {{ workAlpha.composition_date_string }})</a></li>\n      </div>\n      <div style=\"height:65vh; overflow-y:scroll\">\n        <li role=\"presentation\" class=\"dropdown-header\">In Order of Composition Date</li>\n      <li ng-repeat=\"workCompDateValue in menu.allWorksCompDateValue\">\n        <a ng-if=\"workCompDateValue != false && workCompDateValue.medium != 'exhibit'\" style=\"color:#ccc\" href=\"/work/{{ workCompDateValue.bad_id }}\">{{ workCompDateValue.menuTitle }} (Composed {{ workCompDateValue.composition_date_string }})</a></li>\n      </div>\n    </ul>\n  </li>\n</ul>";

/***/ }),
/* 186 */
/***/ (function(module, exports) {

module.exports = "\n<!-- compare -->\n<div id=\"compare\" class=\"scrollbar\">\n<!--<div id=\"compare\" class=\"scrollbar\" style=\"height: {{compare.viewerHeight}}px\">-->\n    <div class=\"featured-object\">\n        <div class=\"compare-inner\" ng-sortable=\"{ group: 'o', animation: 150 }\">\n            <div class=\"item\"\n                 ng-repeat=\"o in compare.cof.comparisonObjects\"\n                 ng-class=\"{active:compare.cof.isMain(o)}\"\n                 ng-click=\"compare.changeObject(o)\"\n                 ng-dblclick=\"compare.goToObject(o)\">\n                <!--<p class=\"object-title text-capitalize\"><a href=\"/copy/{{o.copy_bad_id}}?objectId={{o.object_id}}\">{{ o.copy_title }}</a></p>-->\n                <p ng-class=\"{active:compare.cof.isMain(o)}\" class=\"object-title\"><a href=\"/copy/{{o.copy_bad_id}}\">{{ o.copy_title }}</a></p>\n                <div class=\"compare-wrapper flex\" auto-height adjust=\"270\" breakpoint=\"768\">\n                    <div class=\"object-img-container\" ng-class=\"{hidden: view.scope == 'text'}\" ovp-image>\n                        <img ng-src=\"/images/{{ o.dbi }}.{{dpi}}.jpg\" magnify-image>\n                    </div>\n                    <div class=\"reading-copy\" ng-class=\"{hidden: view.scope == 'image'}\">\n                        <div class=\"reading-copy-inner\">\n                            <text-transcription ng-if=\"selectedTab != '#objects-with-text-matches'\" object=\"o\"></text-transcription>\n                            <text-transcription ng-if=\"selectedTab == '#objects-with-text-matches'\"\n                              object=\"o\" highlight=\"{{compare.bds.fragment_pairs}}\">\n\n                            </text-transcription>\n                        </div>\n                    </div>\n                </div>\n                <p class=\"object-subtitle text-capitalize\"><a href=\"/copy/{{o.copy_bad_id}}?descId={{o.desc_id}}\">{{ o.full_object_id }}, {{ o.copy_composition_date }}, {{ o.copy_institution }}</a></p>\n            </div>\n        </div>\n    </div>\n</div>\n<!--/.compare-->\n";

/***/ }),
/* 187 */
/***/ (function(module, exports) {

module.exports = "<!--Edit buttons-->\n<div id=\"object-tools\" class=\"hidden-xs\">\n    <div id=\"object-tools-inner\">\n        <div class=\"btn-group edit-object\" role=\"group\">\n            <button type=\"button\" class=\"btn btn-default add-lightbox hidden-sm\" ng-click=\"oeb.addToLightBox()\"><span class=\"edit-icon\"></span> Add To Lightbox</button>\n            <button type=\"button\" class=\"btn btn-default rotate\" ng-click=\"oeb.rotate(oeb.bds.object)\"><span class=\"edit-icon\"></span> Rotate</button>\n            <button type=\"button\" class=\"btn btn-default zoom hidden-sm\" ng-class=\"{hover: oeb.rs.zoom}\" ng-click=\"oeb.zoom()\" tooltip=\"Mouse over the image\"  tooltip-trigger=\"click\" tooltip-placement=\"top\"><span class=\"edit-icon\"></span> Magnify</button>\n            <button type=\"button\" class=\"btn btn-default true-size hidden-xs\" ng-click=\"oeb.trueSizeOpen(oeb.bds.object)\"><span class=\"edit-icon\"></span> True Size</button>\n            <button type=\"button\" class=\"btn btn-default new-window\" show-me=\"enlargement\" object=\"oeb.bds.object\" copy-bad=\"{{oeb.bds.copy.bad_id}}\"><span class=\"edit-icon\"></span> Enlargement</button>\n            <button type=\"button\" class=\"btn btn-default show-transcription hidden-sm\" ng-click=\"oeb.toggleTranscription()\"><span class=\"edit-icon\"></span> Diplomatic Transcription</button>\n            <button type=\"button\" class=\"btn btn-default show-supplemental\" ng-class=\"{hover: oeb.rs.supplemental}\" ng-if=\"oeb.bds.object.supplemental_objects.length && oeb.rs.view.mode != 'compare'\"  ng-click=\"oeb.toggleSupplemental()\"><span class=\"edit-icon\"></span> Supplemental Views</button>\n            <!--<button type=\"button\" class=\"btn btn-default cite\"><span class=\"edit-icon\"></span> Generate Citation</button>-->\n        </div>\n        <!--<div class=\"show-hide-tools\" ng-click=\"copyCtrl.toggleTools()\"><span>+</span></div>-->\n    </div>\n</div>\n";

/***/ }),
/* 188 */
/***/ (function(module, exports) {

module.exports = "<div id=\"OverlayCopyInfo\" class=\"overlay\" ng-show=\"$root.showOverlayCompareCopyInfo == true\" style=\"top:52px\">\n    <a style=\"text-decoration: none\" href=\"\" class=\"closebtnleft\" style=\"right:inherit\" ng-click=\"$root.showOverlayCompareCopyInfo = false\">&times;</a>\n    <header class=\"page-header\">\n        <p class=\"subhead\">COPY INFORMATION</p>\n        <h1 style=\"color:rgba(233,188,71,1)\">{{ read.compareCopy.title }} (Composed {{ read.compareCopy.composition_date_string }})</h1>\n    </header>\n    <div id=\"archive-tabs\" role=\"tabpanel\">\n        <div class=\"container-fluid overlaycopyinfo\">\n            <div class=\"container\">\n                <div class=\"tab-content\">\n                    <div role=\"tabpanel\" class=\"fadeinout tab-pane active in\">\n                        <copy-information copy=\"read.compareCopy\"></copy-information>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div id=\"OverlayCopyInfo2\" class=\"overlay\" ng-show=\"read.showOverlayRelatedCopyInfoFlag == true\" style=\"top:52px\">\n    <a style=\"text-decoration: none\" href=\"\" class=\"closebtnleft\" style=\"right:inherit\" ng-click=\"read.showOverlayRelatedCopyInfoFlag = false\">&times;</a>\n    <header class=\"page-header\">\n        <p class=\"subhead\">COPY INFORMATION</p>\n        <h1 style=\"color:rgba(233,188,71,1)\">{{ read.HoveredObject.copy_title }} (Composed {{ read.HoveredObject.copy_composition_date_string }})</h1>\n    </header>\n    <div id=\"archive-tabs\" role=\"tabpanel\">\n        <div class=\"container-fluid overlaycopyinfo\">\n            <div class=\"container\">\n                <div class=\"tab-content\">\n                    <div role=\"tabpanel\" class=\"fadeinout tab-pane active in\">\n                        <copy-information copy=\"read.RelatedCopy\"></copy-information>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<!--<div style=\"text-align:center\">\n    <div style=\"color:white; font-size:13 px; padding-top:1px\" ng-if=\"read.apparatus == 'comparewith'\"><span>Compared with </span><a scroll-to-top href=\"\" ng-click=\"$root.showOverlayCompareCopyInfo = true\" style=\"color:yellow;\">Copy {{read.compareCopyId}}</a> (Printed {{read.compareCopyPrintDateString}})</span>\n    </div>\n</div>-->\n<!--<p class=\"object-title\">{{ read.getOvpTitle() }}</p>-->\n<!-- compare -->\n<div ng-style=\"read.apparatus=='comparewith' ? { 'margin-top':'0px' } : { 'margin-top':'0px' }\" id=\"compare\" class=\"scrollbar\" ng-if=\"read.bds.copy.bad_id != 'illum'\" left-on-broadcast=\"viewSubMenu::readingMode\">\n    <div class=\"featured-object\">\n        <div class=\"compare-inner\" style=\"padding-bottom:6px;padding-top:10px;padding-left:0px;font-size:13px;\" ng-style=\"truesize ? { 'height':'83vh' } : { 'height':'inherit' }\">\n            <!-- for letters -->\n            <div class=\"item\" ng-repeat=\"o in read.bds.copyObjects | filter:{object_group: read.bds.object.object_group}:true track by $index\" ng-if=\"read.bds.copy.bad_id == 'letters'\">\n                <div ng-if=\"read.apparatus == 'transcriptions' || read.apparatus == 'illustrationdescriptions' || read.apparatus == 'editorsnotes' || read.apparatus == 'imagesonly' || read.apparatus == 'comparewith'\" class=\"btn-group edit-object\" role=\"group\" style=\"margin-bottom:0px;margin-left:28px\">\n                        <button type=\"button\" style=\"height:21px;line-height:0.6;background-image: url('/static/img/global/detail-tray-icons.png');background-repeat: no-repeat;background-position:2px 1px\" ng-class=\"{'hover':read.apparatusArray[$index] == 'transcriptions'}\" class=\"btn btn-default\" ng-click=\"read.showIndividualTranscriptions($index)\">\n                            <span class=\"gr-abbreviation\" style=\"height:21px;font-size:13px;\"></span>\n                            <span class=\"gr-title\">Show diplomatic transcriptions</span>\n                        </button>\n                        <button type=\"button\" style=\"height:21px;line-height:0.6;background-image: url('/static/img/global/detail-tray-icons.png');background-repeat: no-repeat;background-position:3px -121px\" ng-class=\"{'hover':read.apparatusArray[$index] == 'illustrationdescriptions'}\" class=\"btn btn-default\" ng-click=\"read.showIndividualIllustrationDescriptions($index)\">\n                            <span class=\"gr-abbreviation\" style=\"height:21px;font-size:14px\"></span>\n                            <span class=\"gr-title\">Show illustration descriptions</span>\n                        </button>\n                        <button type=\"button\" class=\"btn btn-default\" style=\"height:21px;line-height:0.6;background-image: url('/static/img/global/detail-tray-icons.png');background-repeat: no-repeat;background-position:3px -245px\" ng-class=\"{'hover':read.apparatusArray[$index] == 'editorsnotes'}\" class=\"btn btn-gr-selection\" ng-click=\"read.showIndividualEditorsNotes($index)\">\n                            <span class=\"gr-abbreviation\" style=\"height:21px;font-size:13px\"></span>\n                            <span class=\"gr-title\">Show editors' notes</span>\n                        </button>\n                    </div>\n                <div class=\"reading-wrapper\" auto-height adjust=\"150\" breakpoint=\"768\" id=\"{{ read.cssSafeId(o.desc_id) }}\">\n                    <img magnify-image ng-src=\"/images/{{ o.dbi }}.{{dpi}}.jpg\" ng-click=\"read.changeObject(o)\">\n                    <div class=\"reading-copy\">\n                        <div class=\"reading-copy-inner\" ng-show=\"(read.apparatus == 'transcriptions' || read.apparatusArray[$index] == 'transcriptions') && read.apparatusArray[$index] != 'illustrationdescriptions' && read.apparatusArray[$index] != 'editorsnotes' && read.apparatus != 'comparewith'\">\n                            <h4 ng-if=\"o.title\" ng-click=\"read.changeObject(o)\">{{o.title}}<br><span>{{ o.full_object_id }}</span></h4>\n                            <h4 ng-if=\"!o.title\" ng-click=\"read.changeObject(o)\"><span>{{ o.full_object_id }}</span></h4>\n                            <text-transcription object=\"o\"></text-transcription>\n                        </div>\n                        <div class=\"reading-copy-inner\" ng-show=\"(read.apparatus == 'illustrationdescriptions' || read.apparatusArray[$index] == 'illustrationdescriptions') && read.apparatusArray[$index] != 'transcriptions' && read.apparatusArray[$index] != 'editorsnotes' && read.apparatus != 'comparewith'\" style=\"width:10px\">\n                            <h4 ng-if=\"o.title\" ng-click=\"read.changeObject(o)\">{{o.title}}<br><span>{{ o.full_object_id }}</span></h4>\n                            <h4 ng-if=\"!o.title\" ng-click=\"read.changeObject(o)\"><span>{{ o.full_object_id }}</span></h4>\n                            <illustration-description object=\"o\"></illustration-description>\n                        </div>\n                        <div class=\"reading-copy-inner\" ng-show=\"(read.apparatus == 'editorsnotes' || read.apparatusArray[$index] == 'editorsnotes') && read.apparatusArray[$index] != 'illustrationdescriptions' && read.apparatusArray[$index] != 'transcriptions' && read.apparatus != 'comparewith'\" style=\"width:10px\">\n                            <h4 ng-if=\"o.title\" ng-click=\"read.changeObject(o)\">{{o.title}}<br><span>{{ o.full_object_id }}</span></h4>\n                            <h4 ng-if=\"!o.title\" ng-click=\"read.changeObject(o)\"><span>{{ o.full_object_id }}</span></h4>\n                            <editor-notes object=\"o\"></editor-notes>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <!-- for everything else -->\n            <div class=\"item\" ng-repeat=\"o in read.bds.copyObjects | filter:{supplemental:null} track by $index\" ng-if=\"read.bds.copy.bad_id != 'letters'\">\n                <div ng-if=\"read.apparatus == 'transcriptions' || read.apparatus == 'illustrationdescriptions' || read.apparatus == 'editorsnotes' || read.apparatus == 'imagesonly' || read.apparatus == 'comparewith'\" class=\"btn-group edit-object\" role=\"group\" style=\"margin-bottom:0px;margin-left:28px\">\n                        <button tooltip=\"Diplomatic Transcription\" tooltip-placement=\"bottom\" type=\"button\" style=\"height:21px;line-height:0.6;background-image: url('/static/img/global/detail-tray-icons.png');background-repeat: no-repeat;background-position:2px 1px\" ng-class=\"{'hover':read.apparatusArray[$index] == 'transcriptions'}\" class=\"btn btn-default black-tooltip-arrow\" ng-click=\"read.showIndividualTranscriptions($index)\">\n                            <span class=\"gr-abbreviation\" style=\"height:21px;font-size:13px;\"></span>\n                            <span class=\"gr-title\">Show diplomatic transcriptions</span>\n                        </button>\n                        <button tooltip=\"Illustration Description\" tooltip-placement=\"bottom\" type=\"button\" style=\"height:21px;line-height:0.6;background-image: url('/static/img/global/detail-tray-icons.png');background-repeat: no-repeat;background-position:3px -121px\" ng-class=\"{'hover':read.apparatusArray[$index] == 'illustrationdescriptions'}\" class=\"btn btn-default black-tooltip-arrow\" ng-click=\"read.showIndividualIllustrationDescriptions($index)\">\n                            <span class=\"gr-abbreviation\" style=\"height:21px;font-size:14px\"></span>\n                            <span class=\"gr-title\">Show illustration descriptions</span>\n                        </button>\n                        <button tooltip=\"Editors' Notes\" tooltip-placement=\"bottom\" type=\"button\" class=\"btn btn-default black-tooltip-arrow\" style=\"height:21px;line-height:0.6;background-image: url('/static/img/global/detail-tray-icons.png');background-repeat: no-repeat;background-position:3px -245px\" ng-class=\"{'hover':read.apparatusArray[$index] == 'editorsnotes'}\" class=\"btn btn-gr-selection\" ng-click=\"read.showIndividualEditorsNotes($index)\">\n                            <span class=\"gr-abbreviation\" style=\"height:21px;font-size:13px\"></span>\n                            <span class=\"gr-title\">Show editors' notes</span>\n                        </button>\n                        <button tooltip=\"Add to Lightbox\" tooltip-placement=\"bottom\" type=\"button \" class=\"btn btn-default black-tooltip-arrow\" style=\"height:21px;line-height:0.6;background-image: url('/static/img/global/edit-icons.png');background-repeat: no-repeat;background-position:2px 3px;background-size:20px\" ng-class=\"{ 'hover':read.apparatusArray[$index] == 'lightbox'} \" class=\"btn btn-gr-selection \" ng-click=\"read.addToLightBox(o) \">\n                            <span class=\"gr-abbreviation \" style=\"height:21px;font-size:13px \"></span>\n                            <span class=\"gr-title \">Add to lightbox</span>\n                        </button>\n\n                        <button ng-if=\"read.apparatus != 'comparewith'\" tooltip=\"Objects from the Same Matrix\" tooltip-placement=\"bottom\" type=\"button \" class=\"btn btn-default black-tooltip-arrow\" style=\"height:21px;line-height:0.6 \" ng-class=\"{ 'hover':read.apparatusArray[$index] == 'samematrix'} \" class=\"btn btn-gr-selection \" ng-click=\"read.showObjectsSameMatrix($index,o) \">\n                            <span class=\"gr-abbreviation \" style=\"height:21px;font-size:13px \">M</span>\n                            <span class=\"gr-title \">Show objects from the same matrix</span>\n                        </button>\n                        <button ng-if=\"read.apparatus != 'comparewith'\" tooltip=\"Objects from the Same Production Sequence\" tooltip-placement=\"bottom\" type=\"button \" class=\"btn btn-default black-tooltip-arrow\" style=\"height:21px;line-height:0.6 \" ng-class=\"{ 'hover':read.apparatusArray[$index] == 'productionsequence'} \" class=\"btn btn-gr-selection \" ng-click=\"read.showObjectsProductionSequence($index,o) \">\n                            <span class=\"gr-abbreviation \" style=\"height:21px;font-size:13px \">PS</span>\n                            <span class=\"gr-title \">Show objects from the same production sequence</span>\n                        </button>\n                        <button ng-if=\"read.apparatus != 'comparewith'\" tooltip=\"Objects with a Similar Design\" tooltip-placement=\"bottom\" type=\"button \" class=\"btn btn-default black-tooltip-arrow\" style=\"height:21px;line-height:0.6 \" ng-class=\"{ 'hover':read.apparatusArray[$index] == 'motif'} \" class=\"btn btn-gr-selection \" ng-click=\"read.showObjectsWithSimilarDesign($index,o) \">\n                            <span class=\"gr-abbreviation \" style=\"height:21px;font-size:13px \">D</span>\n                            <span class=\"gr-title \">Show objects with a similar design</span>\n                        </button>\n                        <button ng-if=\"read.apparatus != 'comparewith'\" tooltip=\"Related Texts or Images\" tooltip-placement=\"bottom\" type=\"button \" class=\"btn btn-default black-tooltip-arrow\" style=\"height:21px;line-height:0.6 \" ng-class=\"{ 'hover':read.apparatusArray[$index] == 'textreference'} \" class=\"btn btn-gr-selection \" ng-click=\"read.showObjectsTextReference($index,o) \">\n                            <span class=\"gr-abbreviation \" style=\"height:21px;font-size:13px \">T</span>\n                            <span class=\"gr-title \">Show objects with textual references</span>\n                        </button>\n\n                    </div>\n                    <div ng-if=\"read.apparatus == 'comparewith' && read.compareCopyObjects[o.desc_id] != null\" style=\"float:right;color:white\"><a scroll-to-top href=\"\" ng-click=\"$root.showOverlayCompareCopyInfo = true\" style=\"color:yellow;\">Copy {{read.compareCopyId}} (Printed {{read.compareCopyPrintDateString}})</a></div>\n\n                    <div style=\"float:right;color:white;font-size:9px;margin-right:2%\" ng-if=\"read.apparatusArray[$index] == 'motif' || read.apparatusArray[$index] == 'samematrix' || read.apparatusArray[$index] == 'productionsequence' || read.apparatusArray[$index] == 'textreference'\"><a scroll-to-top href=\"\" ng-click=\"read.showOverlayRelatedCopyInfo(read.HoveredObject.copy_bad_id)\" style=\"color:yellow;\">{{read.HoveredObject.copy_title}} {{read.HoveredObject.full_object_id}}</a></div>\n\n\n                <div class=\"reading-wrapper\" auto-height adjust=\"150\" breakpoint=\"768\" id=\"{{ read.cssSafeId(o.desc_id) }}\">\n                    <!--use the following for anchoring images\n                <div in-view=\"read.setActiveId($index)\" class=\"reading-wrapper\" auto-height adjust=\"150\" breakpoint=\"768\" id=\"{{ read.cssSafeId(o.desc_id) }}\">\n                -->\n                    <img id=\"{{read.getStrippedDescId(o.desc_id)}}\" magnify-image ng-mouseover=\"read.hover = true;\" ng-mouseleave=\"read.hover = false;\" ng-src=\"/images/{{ o.dbi }}.{{dpi}}.jpg\" ng-click=\"read.changeObject(o)\">\n                    \n                    <div class=\"reading-copy\">\n                        <div class=\"reading-copy-inner\" ng-show=\"(read.apparatus == 'transcriptions' || read.apparatusArray[$index] == 'transcriptions') && read.apparatusArray[$index] != 'illustrationdescriptions' && read.apparatusArray[$index] != 'editorsnotes' && read.apparatusArray[$index] != 'motif' && read.apparatusArray[$index] != 'samematrix' && read.apparatusArray[$index] != 'productionsequence' && read.apparatusArray[$index] != 'textreference'\">\n                            <h4 ng-if=\"o.title\" ng-click=\"read.changeObject(o)\">{{o.title}}<br><span>{{ o.full_object_id }}</span><span ng-if=\"truesize == true\">, {{o.physical_description.objsize['#text'] }}</span></h4>\n                            <h4 ng-if=\"!o.title\" ng-click=\"read.changeObject(o)\"><span>{{ o.full_object_id }}</span><span ng-if=\"truesize == true\">, {{o.physical_description.objsize['#text'] }}</span></h4>\n                            <text-transcription object=\"o\"></text-transcription>\n                        </div>\n                        <div class=\"reading-copy-inner\" ng-show=\"(read.apparatus == 'transcriptions' || read.apparatusArray[$index] == 'transcriptions') && read.apparatusArray[$index] != 'illustrationdescriptions' && read.apparatusArray[$index] != 'editorsnotes' && read.apparatusArray[$index] != 'motif' && read.apparatusArray[$index] != 'samematrix' && read.apparatusArray[$index] != 'productionsequence' && read.apparatusArray[$index] != 'textreference' && read.apparatus == 'comparewith' && read.compareCopyObjects[o.desc_id] != null\">\n                            <h4 ng-if=\"o.title\" ng-click=\"read.changeCopy(read.compareCopyObjects[o.desc_id].copy_bad_id,read.compareCopyObjects[o.desc_id].desc_id)\">{{read.compareCopyObjects[o.desc_id].title}}<br><span style=\"color:yellow\">{{ read.compareCopyObjects[o.desc_id].full_object_id }}</span><span ng-if=\"truesize == true\">, {{read.compareCopyObjects[o.desc_id].physical_description.objsize['#text'] }}</span></h4>\n                            <h4 ng-if=\"!o.title\" ng-click=\"read.changeCopy(read.compareCopyObjects[o.desc_id].copy_bad_id,read.compareCopyObjects[o.desc_id].desc_id)\"><span style=\"color:yellow\">{{ read.compareCopyObjects[o.desc_id].full_object_id }}</span><span ng-if=\"truesize == true\">, {{read.compareCopyObjects[o.desc_id].physical_description.objsize['#text'] }}</span></h4>\n                            <text-transcription object=\"read.compareCopyObjects[o.desc_id]\"></text-transcription>\n                        </div>\n                        \n                        <div class=\"reading-copy-inner\" ng-show=\"(read.apparatus == 'illustrationdescriptions' || read.apparatusArray[$index] == 'illustrationdescriptions') && read.apparatusArray[$index] != 'transcriptions' && read.apparatusArray[$index] != 'editorsnotes' && read.apparatusArray[$index] != 'motif' && read.apparatusArray[$index] != 'samematrix' && read.apparatusArray[$index] != 'productionsequence' && read.apparatusArray[$index] != 'textreference'\" style=\"width:10px\">\n                            <h4 ng-if=\"o.title\" ng-click=\"read.changeObject(o)\">{{o.title}}<br><span>{{ o.full_object_id }}</span><span ng-if=\"truesize == true\">, {{o.physical_description.objsize['#text'] }}</span></h4>\n                            <h4 ng-if=\"!o.title\" ng-click=\"read.changeObject(o)\"><span>{{ o.full_object_id }}</span><span ng-if=\"truesize == true\">, {{o.physical_description.objsize['#text'] }}</span></h4>\n                            <illustration-description object=\"o\"></illustration-description>\n                        </div>\n                        <div class=\"reading-copy-inner\" ng-show=\"(read.apparatus == 'illustrationdescriptions' || read.apparatusArray[$index] == 'illustrationdescriptions') && read.apparatusArray[$index] != 'transcriptions' && read.apparatusArray[$index] != 'editorsnotes' && read.apparatusArray[$index] != 'motif' && read.apparatusArray[$index] != 'samematrix' && read.apparatusArray[$index] != 'productionsequence' && read.apparatusArray[$index] != 'textreference' && read.apparatus == 'comparewith' && read.compareCopyObjects[o.desc_id] != null\" style=\"width:10px\">\n                            <h4 ng-if=\"o.title\" ng-click=\"read.changeCopy(read.compareCopyObjects[o.desc_id].copy_bad_id,read.compareCopyObjects[o.desc_id].desc_id)\">{{read.compareCopyObjects[o.desc_id].title}}<br><span style=\"color:yellow\">{{ read.compareCopyObjects[o.desc_id].full_object_id }}</span><span ng-if=\"truesize == true\">, {{read.compareCopyObjects[o.desc_id].physical_description.objsize['#text'] }}</span></h4>\n                            <h4 ng-if=\"!o.title\" ng-click=\"read.changeCopy(read.compareCopyObjects[o.desc_id].copy_bad_id,read.compareCopyObjects[o.desc_id].desc_id)\"><span style=\"color:yellow\">{{ read.compareCopyObjects[o.desc_id].full_object_id }}</span><span ng-if=\"truesize == true\">, {{read.compareCopyObjects[o.desc_id].physical_description.objsize['#text'] }}</span></h4>\n                            <illustration-description object=\"read.compareCopyObjects[o.desc_id]\"></illustration-description>\n                        </div>\n\n\n                        <div class=\"reading-copy-inner\" ng-show=\"(read.apparatus == 'editorsnotes' || read.apparatusArray[$index] == 'editorsnotes') && read.apparatusArray[$index] != 'illustrationdescriptions' && read.apparatusArray[$index] != 'transcriptions' && read.apparatusArray[$index] != 'motif' && read.apparatusArray[$index] != 'samematrix' && read.apparatusArray[$index] != 'productionsequence' && read.apparatusArray[$index] != 'textreference'\" style=\"width:10px\">\n                            <h4 ng-if=\"o.title\" ng-click=\"read.changeObject(o)\">{{o.title}}<br><span>{{ o.full_object_id }}</span><span ng-if=\"truesize == true\">, {{o.physical_description.objsize['#text'] }}</span></h4>\n                            <h4 ng-if=\"!o.title\" ng-click=\"read.changeObject(o)\"><span>{{ o.full_object_id }}</span><span ng-if=\"truesize == true\">, {{o.physical_description.objsize['#text'] }}</span></h4>\n                            <editor-notes object=\"o\"></editor-notes>\n                        </div>\n                        <div class=\"reading-copy-inner\" ng-show=\"(read.apparatus == 'editorsnotes' || read.apparatusArray[$index] == 'editorsnotes') && read.apparatusArray[$index] != 'illustrationdescriptions' && read.apparatusArray[$index] != 'transcriptions' && read.apparatusArray[$index] != 'motif' && read.apparatusArray[$index] != 'samematrix' && read.apparatusArray[$index] != 'productionsequence' && read.apparatusArray[$index] != 'textreference' && read.apparatus == 'comparewith' && read.compareCopyObjects[o.desc_id] != null\" style=\"width:10px\">\n                            <h4 ng-if=\"o.title\" ng-click=\"read.changeCopy(read.compareCopyObjects[o.desc_id].copy_bad_id,read.compareCopyObjects[o.desc_id].desc_id)\">{{read.compareCopyObjects[o.desc_id].title}}<br><span style=\"color:yellow\">{{ read.compareCopyObjects[o.desc_id].full_object_id }}</span><span ng-if=\"truesize == true\">, {{read.compareCopyObjects[o.desc_id].physical_description.objsize['#text'] }}</span></h4>\n                            <h4 ng-if=\"!o.title\" ng-click=\"read.changeCopy(read.compareCopyObjects[o.desc_id].copy_bad_id,read.compareCopyObjects[o.desc_id].desc_id)\"><span style=\"color:yellow\">{{ read.compareCopyObjects[o.desc_id].full_object_id }}</span><span ng-if=\"truesize == true\">, {{read.compareCopyObjects[o.desc_id].physical_description.objsize['#text'] }}</span></h4>\n                            <editor-notes object=\"read.compareCopyObjects[o.desc_id]\"></editor-notes>\n                        </div>\n\n\n                        <div auto-height adjust=\"150 \" breakpoint=\"768 \" class=\"reading-copy-inner\" ng-show=\"(read.apparatus == 'samematrix' || read.apparatusArray[$index] == 'samematrix') && read.apparatusArray[$index] != 'illustrationdescriptions' && read.apparatusArray[$index] != 'transcriptions' && read.apparatusArray[$index] != 'editorsnotes' && read.apparatusArray[$index] != 'motif' && read.apparatusArray[$index] != 'productionsequence' && read.apparatusArray[$index] != 'textreference' \" style=\"width:100%\">\n                            \n                            <div ng-if=\"read.objectsSameMatrix != null && read.done1 == true\" ng-mouseover=\"read.HoveredObject = sm\" style=\"height:100%\" ng-repeat=\"sm in read.objectsSameMatrix\">\n                            <img style=\"margin-bottom:10%\" ng-src=\"/images/{{ sm.dbi }}.{{dpi}}.jpg\" ng-click=\"read.changeCopy(sm.copy_bad_id,sm.desc_id)\">\n                            </div>\n\n                            <div ng-if=\"read.objectsSameMatrix == '' && read.done1 == true\">\n                                [NOT APPLICABLE]\n                            </div>\n\n                        </div>\n\n                        <div auto-height adjust=\"150 \" breakpoint=\"768 \" class=\"reading-copy-inner\" ng-show=\"(read.apparatus == 'motif' || read.apparatusArray[$index] == 'motif') && read.apparatusArray[$index] != 'illustrationdescriptions' && read.apparatusArray[$index] != 'transcriptions' && read.apparatusArray[$index] != 'editorsnotes' && read.apparatusArray[$index] != 'samematrix' && read.apparatusArray[$index] != 'productionsequence' && read.apparatusArray[$index] != 'textreference'\" style=\"width:100%\">\n                            \n                            <div ng-if=\"read.objectsWithSameMotif != null && read.done2 == true\" ng-mouseover=\"read.HoveredObject = owsm\" style=\"height:100%\" ng-repeat=\"owsm in read.objectsWithSameMotif\">\n                            <img style=\"margin-bottom:10%\" ng-src=\"/images/{{ owsm.dbi }}.{{dpi}}.jpg\" ng-click=\"read.changeCopy(owsm.copy_bad_id,sm.desc_id)\">\n                            </div>\n\n                            <div ng-if=\"read.objectsWithSameMotif == '' && read.done2 == true\">\n                                [NOT APPLICABLE]\n                            </div>\n\n                        </div>\n\n                         <div auto-height adjust=\"150 \" breakpoint=\"768 \" class=\"reading-copy-inner\" ng-show=\"(read.apparatus == 'productionsequence' || read.apparatusArray[$index] == 'productionsequence') && read.apparatusArray[$index] != 'illustrationdescriptions' && read.apparatusArray[$index] != 'transcriptions' && read.apparatusArray[$index] != 'editorsnotes' && read.apparatusArray[$index] != 'samematrix' && read.apparatusArray[$index] != 'textreference' && read.apparatusArray[$index] != 'motif'\" style=\"width:100%\">\n                            \n                            <div ng-if=\"read.objectsProductionSequence != null && read.done3 == true\" ng-mouseover=\"read.HoveredObject = ps\" style=\"height:100%\" ng-repeat=\"ps in read.objectsProductionSequence\">\n                            <img style=\"margin-bottom:10%\" ng-src=\"/images/{{ ps.dbi }}.{{dpi}}.jpg\" ng-click=\"read.changeCopy(ps.copy_bad_id,sm.desc_id)\">\n                            </div>\n\n                            <div ng-if=\"read.objectsProductionSequence == '' && read.done3 == true\">\n                                [NOT APPLICABLE]\n                            </div>\n\n                        </div>\n\n                         <div class=\"reading-copy-inner\" ng-show=\"(read.apparatus == 'textreference' || read.apparatusArray[$index] == 'textreference') && read.apparatusArray[$index] != 'illustrationdescriptions' && read.apparatusArray[$index] != 'transcriptions' && read.apparatusArray[$index] != 'editorsnotes' && read.apparatusArray[$index] != 'samematrix' && read.apparatusArray[$index] != 'productionsequence' && read.apparatusArray[$index] != 'motif'\" style=\"width:100%\">\n                            \n                            <div ng-if=\"read.objectsTextReference.objects != '' && read.done4 == true\" ng-mouseover=\"read.HoveredObject = tr\" style=\"height:100%\" ng-repeat=\"tr in read.objectsTextReference.objects\">\n                            <img style=\"margin-bottom:10%\" ng-src=\"/images/{{ tr.dbi }}.{{dpi}}.jpg\" ng-click=\"read.changeCopy(tr.copy_bad_id,sm.desc_id)\">\n                            </div>\n                            <div ng-if=\"read.objectsTextReference.copies != '' && read.done4 == true\" ng-mouseover=\"read.HoveredObject = tr\" style=\"height:100%\" ng-repeat=\"tr in read.objectsTextReference.copies\">\n                            <img style=\"margin-bottom:10%\" ng-src=\"/images/{{ tr.image }}.100.jpg\" ng-click=\"read.changeCopy(tr.copy_bad_id,sm.desc_id)\">\n                            </div>\n                            <div ng-if=\"read.objectsTextReference.works != '' && read.done4 == true\" ng-mouseover=\"read.HoveredObject = tr\" style=\"height:100%\" ng-repeat=\"tr in read.objectsTextReference.works\">\n                            <img style=\"margin-bottom:10%\" ng-src=\"/images/{{ tr.image }}.jpg\" ng-click=\"read.changeCopy(tr.copy_bad_id,sm.desc_id)\">\n                            </div>\n\n                            <div ng-if=\"read.objectsTextReference.objects == '' && read.objectsTextReference.copies == '' && read.objectsTextReference.works == '' && read.done4 == true\">\n                                [NOT APPLICABLE]\n                            </div>\n\n                        </div>\n\n\n\n                        <!--<div class=\"reading-copy-inner\" ng-show=\"(read.apparatusArray[$index] == 'editorsnotes' || read.apparatusArray[$index] == 'illustrationdescriptions' || read.apparatusArray[$index] == 'transcriptions') && read.apparatus == 'comparewith' && read.compareCopyObjects[o.desc_id] == null\" style=\"width:10px\">\n                            <h4>Copy {{read.compareCopyId}} contains no copy for this object.</h4>\n                        </div>-->\n\n\n                    </div>\n                    <img id=\"{{read.getStrippedDescId(read.compareCopyObjects[o.desc_id].desc_id)}}\" magnify-image style=\"padding-left:10px\" ng-if=\"read.apparatus == 'comparewith' && read.compareCopyObjects[o.desc_id] != null\" ng-mouseover=\"read.hover = true;\" ng-mouseleave=\"read.hover = false;\" ng-src=\"/images/{{ read.compareCopyObjects[o.desc_id].dbi }}.{{dpi}}.jpg\" ng-click=\"read.changeCopy(read.compareCopyObjects[o.desc_id].copy_bad_id,read.compareCopyObjects[o.desc_id].desc_id)\">\n                    <img style=\"padding-left:10px\" ng-if=\"read.apparatus == 'comparewith' && read.compareCopyObjects[o.desc_id] == null || read.apparatusArray[$index] == 'samematrix' || read.apparatusArray[$index] == 'motif' || read.apparatusArray[$index] == 'productionsequence' || read.apparatusArray[$index] == 'textreference'\" ng-src=\"\">\n                    <!--\n                    <div style=\"color:white; font-size:9px; text-align:center\" ng-if=\"read.apparatus == 'imagesonly' && truesize == false\">{{o.full_object_id}}</div>\n                    <div style=\"color:white; font-size:9px; text-align:center\" ng-if=\"read.apparatus == 'imagesonly' && truesize == true\">{{o.full_object_id}}</br>{{ o.physical_description.objsize['#text'] }}</div>\n                    -->\n                    <div style=\"color:white; font-size:7px;\" ng-if=\"read.apparatus == 'comparewith' && read.compareCopyObjects[o.desc_id] != null || read.apparatusArray[$index] == 'samematrix' || read.apparatusArray[$index] == 'motif' || read.apparatusArray[$index] == 'productionsequence' || read.apparatusArray[$index] == 'textreference'\"><span style=\"float:left\">{{o.full_object_id}}</span><span ng-if=\"truesize == true\" style=\"float:left\">, {{o.physical_description.objsize['#text'] }}</span><span ng-if=\"read.apparatus == 'comparewith' && read.compareCopyObjects[o.desc_id] != null && truesize == true\" style=\"color:yellow;float:right;\">{{read.compareCopyObjects[o.desc_id].full_object_id}}, {{ read.compareCopyObjects[o.desc_id].physical_description.objsize['#text'] }}</span><span ng-if=\"read.apparatus == 'comparewith' && read.compareCopyObjects[o.desc_id] != null && truesize == false\" style=\"color:yellow;float:right;\">{{read.compareCopyObjects[o.desc_id].full_object_id}}</span></div>\n\n                    <div style=\"color:white; font-size:7px;\" ng-if=\"read.apparatus == 'comparewith' && read.compareCopyObjects[o.desc_id] == null\"><span style=\"float:left\">{{o.full_object_id}}</span><span ng-if=\"truesize == true\" style=\"float:left\">, {{o.physical_description.objsize['#text'] }}</span></div>\n                    \n                </div>\n            </div>\n            <!--<span style=\"color:white;font-size:21px;position:absolute;top:50%;padding-left:30px\">END&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>-->\n        </div>\n    </div>\n</div>\n<!--for exhibits-->\n<div auto-height adjust=\"70\" breakpoint=\"768\" style=\"overflow-y:scroll; overflow-x:none; float:left; width:33%; background:white\" id=\"compare\" ng-if=\"read.bds.copy.bad_id == 'illum'\" \">\n    \n           \n                \n                    <ng-include src=\" '/static/html/illuminatedprinting.exhibit.html' \"></ng-include>\n                   \n   \n</div>\n<div style=\"float:right; width:67% \" id=\"compare \" class=\"scrollbar \" ng-if=\"read.bds.copy.bad_id=='illum' \" left-on-broadcast=\"viewSubMenu::readingMode \">\n    <div class=\"featured-object \">\n        <div class=\"compare-inner \">\n            <div class=\"item \" ng-repeat=\"o in read.bds.copyObjects | filter:{supplemental:null} \" ng-if=\"read.bds.copy.bad_id !='letters' \">\n                <div class=\"reading-wrapper \" auto-height adjust=\"150 \" breakpoint=\"768 \" id=\"{{ read.cssSafeId(o.desc_id) }} \">\n                    <img magnify-image ng-src=\"/images/{{ o.dbi }}.{{dpi}}.jpg \" ng-click=\"read.changeObject(o) \">\n                    <div class=\"reading-copy \">\n                        <div class=\"reading-copy-inner \">\n                            <h4 ng-if=\"o.title \" ng-click=\"read.changeObject(o) \">{{o.title}}<br><span>{{ o.full_object_id }}</span></h4>\n                            <h4 ng-if=\"!o.title \" ng-click=\"read.changeObject(o) \"><span>{{ o.full_object_id }}</span></h4>\n                            <text-transcription object=\"o \"></text-transcription>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div id=\"object-tools \" class=\"hidden-xs \">\n    <div id=\"object-tools-inner \" style=\"text-align:center \">\n        <div class=\"btn-group edit-object \" role=\"group \">\n        <button type=\"button \" style=\"height:21px;line-height:0.6;background-image: url('/static/img/global/detail-tray-icons.png');background-repeat: no-repeat;background-position:2px 1px \" ng-class=\"{ 'hover':activeapparatus=='transcriptions' } \" class=\"btn btn-default \" ng-click=\"read.showTranscriptions() \">\n            <span class=\"gr-abbreviation \" style=\"height:21px;font-size:13px; \">&nbsp;&nbsp;&nbsp;&nbsp;Diplomatic Transcriptions</span>\n            <span class=\"gr-title \">Show diplomatic transcriptions</span>\n        </button>\n        <button type=\"button \" style=\"height:21px;line-height:0.6;background-image: url('/static/img/global/detail-tray-icons.png');background-repeat: no-repeat;background-position:3px -121px \" ng-class=\"{ 'hover':activeapparatus=='illustrationdescriptions' } \" class=\"btn btn-default \" ng-click=\"read.showIllustrationDescriptions() \">\n            <span class=\"gr-abbreviation \" style=\"height:21px;font-size:14px \">&nbsp;&nbsp;&nbsp;&nbsp;Illustration Descriptions</span>\n            <span class=\"gr-title \">Show illustration descriptions</span>\n        </button>\n        <button type=\"button \" class=\"btn btn-default \" style=\"height:21px;line-height:0.6;background-image: url('/static/img/global/detail-tray-icons.png');background-repeat: no-repeat;background-position:3px -245px \" ng-class=\"{ 'hover':activeapparatus=='editorsnotes' } \" class=\"btn btn-gr-selection \" ng-click=\"read.showEditorsNotes() \">\n            <span class=\"gr-abbreviation \" style=\"height:21px;font-size:13px \">&nbsp;&nbsp;&nbsp;&nbsp;Editors' Notes</span>\n            <span class=\"gr-title \">Show editors' notes</span>\n        </button>\n        <button type=\"button \" class=\"btn btn-default \" style=\"height:21px;line-height:0.6 \" ng-class=\"{ 'hover':activeapparatus=='imagesonly' } \" class=\"btn btn-gr-selection \" ng-click=\"read.showImagesOnly() \">\n            <span class=\"gr-abbreviation \" style=\"height:21px;font-size:13px \">Images Only</span>\n            <span class=\"gr-title \">Show images only</span>\n        </button>\n        <button type=\"button \" class=\"btn btn-default \" style=\"height:21px;line-height:0.6 \" ng-class=\"{ 'hover':zoom==true, 'inactive':zoom==false} \" class=\"btn btn-default \" ng-click=\"read.zoom() \" tooltip=\"Mouse over an image \" tooltip-placement=\"top \" tooltip-trigger=\"click \">\n            <span class=\"gr-abbreviation \" style=\"height:21px;font-size:13px \">Magnify</span>\n        </button>\n        <button type=\"button \" class=\"btn btn-default \" style=\"height:21px;line-height:0.6 \" ng-class=\"{ 'hover':truesize==true, 'inactive':truesize==false} \" class=\"btn btn-gr-selection \" ng-click=\"read.showTrueSize() \">\n            <span class=\"gr-abbreviation \" style=\"height:21px;font-size:13px \">True Size</span>\n            <span class=\"gr-title \">True Size</span>\n        </button>\n       \n        \n        <span ng-if=\"read.bds.workCopies.length> 1 && read.bds.copy.virtual == false\" dropdown class=\"dropdown\">\n    <button ng-if=\"read.apparatus != 'comparewith'\" dropdown-toggle type=\"button\" class=\"btn btn-default\" style=\"height:21px;line-height:0.6;margin-bottom:1px;margin-right:1px;border-radius:0px;border-left:0px\" ng-class=\"{'hover':activeapparatus == 'comparewith'}\">\n        <span class=\"gr-abbreviation\" style=\"height:21px;font-size:13px\">Compare with Copy...</span>\n        <span class=\"gr-title\">Show compare with</span>\n    </button>\n    <button ng-if=\"read.apparatus == 'comparewith'\" dropdown-toggle type=\"button\" class=\"btn btn-default\" style=\"height:21px;line-height:0.6;margin-bottom:1px;margin-right:1px;border-radius:0px;border-left:0px\" ng-class=\"{'hover':activeapparatus == 'comparewith'}\">\n        <span class=\"gr-abbreviation\" style=\"height:21px;font-size:13px\">Compare with <span style=\"color:yellow;background:#1d1d1d\">Copy {{read.compareCopyId}} (Printed {{read.compareCopyPrintDateString}})</span></span>\n        <span class=\"gr-title\">Show compare with</span>\n    </button>\n    <ul class=\"dropdown-menu\" style=\"border-radius:0px;top:inherit;bottom:100%;margin:2px 0 2px\" role=\"menu\">\n        <li ng-repeat=\"copy in read.bds.workCopies track by $index\" ng-if=\"copy.archive_copy_id != read.bds.copy.archive_copy_id\">\n            <a ng-click=\"read.showCompareWithFaster(copy.bad_id)\">{{copy.archive_copy_id}} (Printed {{copy.print_date_string}})</a>\n        </li>\n    </ul>\n    </span>\n</div>\n</div>\n</div>\n<!--/.compare-->";

/***/ }),
/* 189 */
/***/ (function(module, exports) {

module.exports = "<div id=\"carousel-example-generic\" class=\"carousel slide\" data-ride=\"carousel\" data-interval=\"false\">\n    <div class=\"featured-object\">\n        <div class=\"carousel-inner\" role=\"listbox\">\n            <regular-object-viewer></regular-object-viewer>\n            <supplemental-image-viewer></supplemental-image-viewer>\n        </div>\n    </div>\n    <object-viewer-previous-next></object-viewer-previous-next>\n</div>\n\n";

/***/ }),
/* 190 */
/***/ (function(module, exports) {

module.exports = "<div class=\"featured-object-controls hidden-sm\" ng-if=\"ovpn.bds.object.objectsInGroup.length > 1 || ovpn.bds.copyObjects.length > 1\">\n    <a scroll-to-top ng-if=\"ovpn.ovs.getPreviousObject()\" class=\"left carousel-control\" role=\"button\" ng-click=\"ovpn.ovs.changeObject(ovpn.ovs.getPreviousObject())\" role=\"button\">\n        <span class=\"object-thumb\" style=\"background-image:url(/images/{{ ovpn.ovs.getPreviousObject().dbi }}.100.jpg)\"></span>\n\n        <!-- virtual -->\n        <span class=\"object-text\" ng-if=\"ovpn.bds.work.virtual\">{{ ovpn.ovs.getPreviousObject().title }}<br>{{ ovpn.ovs.getPreviousObject().full_object_id }}</span>\n        <!-- everything else -->\n        <span class=\"object-text\" ng-if=\"!ovpn.bds.work.virtual && !ovpn.ovs.getPreviousObject().title\">{{ ovpn.ovs.getPreviousObject().full_object_id }}</span>\n        <span class=\"object-text\" ng-if=\"!ovpn.bds.work.virtual && ovpn.ovs.getPreviousObject().title\">{{ovpn.ovs.getPreviousObject().title}}<br>{{ ovpn.ovs.getPreviousObject().full_object_id }}</span>\n\n\n        <span class=\"sr-only\">Previous</span>\n    </a>\n    <a scroll-to-top ng-if=\"ovpn.ovs.getNextObject()\" class=\"right carousel-control\" ng-click=\"ovpn.ovs.changeObject(ovpn.ovs.getNextObject())\" role=\"button\">\n        <span class=\"object-thumb\" style=\"background-image:url(/images/{{ ovpn.ovs.getNextObject().dbi }}.100.jpg)\"></span>\n\n        <!-- virtual -->\n        <span class=\"object-text\" ng-if=\"ovpn.bds.work.virtual\">{{ ovpn.ovs.getNextObject().title }}<br>{{ ovpn.ovs.getNextObject().full_object_id }}</span>\n        <!-- everything else -->\n        <span class=\"object-text\" ng-if=\"!ovpn.bds.work.virtual && !ovpn.ovs.getNextObject().title\">{{ ovpn.ovs.getNextObject().full_object_id }}</span>\n        <span class=\"object-text\" ng-if=\"!ovpn.bds.work.virtual && ovpn.ovs.getNextObject().title\">{{ovpn.ovs.getNextObject().title}}<br>{{ ovpn.ovs.getNextObject().full_object_id }}</span>\n\n        <span class=\"sr-only\">Next</span>\n    </a>\n</div>";

/***/ }),
/* 191 */
/***/ (function(module, exports) {

module.exports = "<!-- regular object viewer -->\n<div class=\"item col-xs-12 col-md-8 col-md-offset-2 active\" ng-class=\"{hidden:rov.rs.supplemental && rov.bds.object.supplemental_objects.length}\" ng-swipe-left=\"rov.ovs.changeObject(rov.ovs.getNextObject())\" ng-swipe-right=\"rov.ovs.changeObject(rov.ovs.getPreviousObject())\">\n    <div class=\"flex\" auto-height adjust=\"270\" breakpoint=\"992\">\n        <a href=\"/images/{{ rov.bds.object.dbi }}.{{rov.rs.dpivalue}}.jpg\" target=\"_blank\" class=\"object-img-container\" ng-class=\"{hidden: rov.rs.view.scope == 'text'}\" ovp-image>\n            <img ng-src=\"/images/{{ rov.bds.object.dbi }}.{{rov.rs.dpivalue}}.jpg\" magnify-image>\n        </a>\n        <div to-top-on-broadcast=\"change::selectedObject\" class=\"reading-copy\" ng-class=\"{hidden: rov.rs.view.scope == 'image'}\">\n            <div class=\"reading-copy-inner\">\n                <text-transcription object=\"rov.bds.object\"></text-transcription>\n            </div>\n        </div>\n    </div>\n    <p class=\"object-subtitle\">\n        <span ng-if=\"rov.bds.work.virtual && rov.bds.copy.bad_id != 'letters'\"><span>{{ rov.bds.object.title }}, </span><span class=\"object-no\">Object {{ rov.bds.object.object_number }}, {{rov.bds.object.source.objdescid.compdate['#text']}}, {{rov.bds.object.source.repository.institution['#text']}}, </span></span>\n        <span ng-if=\"rov.bds.work.virtual && rov.bds.copy.bad_id == 'letters'\"><span>{{ rov.bds.object.title }}, </span><span class=\"object-no\">Object {{ rov.bds.object.object_number }}, </span></span>\n        <span class=\"object-no\" ng-if=\"!rov.bds.work.virtual && !rov.bds.object.title\">{{ rov.bds.object.full_object_id }}, </span>\n        <span class=\"object-no\" ng-if=\"!rov.bds.work.virtual && rov.bds.object.title && rov.bds.work.medium != 'exhibit'\">{{rov.bds.object.title}}, {{ rov.bds.object.full_object_id }}, </span>\n        <span class=\"object-no\" ng-if=\"!rov.bds.work.virtual && rov.bds.object.title && rov.bds.work.medium == 'exhibit'\">{{rov.bds.object.title}}</span>\n        <span ng-if=\"rov.bds.work.medium != 'exhibit'\">{{ rov.bds.object.physical_description.objsize['#text'] }} </span>\n        <a ng-if=\"rov.bds.work.medium != 'exhibit'\" style=\"color:#168bc1\" ng-click=\"rov.ovs.userestrictOpen(rov.bds.copy,rov.bds.object)\">&#169;</a>\n    </p>\n</div>";

/***/ }),
/* 192 */
/***/ (function(module, exports) {

module.exports = "<!-- supplemental image viewer -->\n<div class=\"item col-xs-12 col-md-8 col-md-offset-2 active\" id=\"suppImages\" ng-class=\"{hidden: !siv.rs.supplemental || !siv.bds.object.supplemental_objects.length}\">\n    <div class=\"flexsupp\" auto-height adjust=\"270\" breakpoint=\"992\">\n        <!-- original image for supplemental view-->\n        <handprint-block ng-if=\"siv.bds.object.supplemental\" ng-repeat=\"obj in siv.bds.copyObjects | filter:{'desc_id': siv.bds.object.supplemental}:true\"\n                     action=\"siv.ovs.changeObject(obj); siv.ovs.toggleSupplemental();\"\n                     image=\"{{ obj.dbi }}.100.jpg\"\n                     footer=\"{{obj.full_object_id}}\">\n        </handprint-block>\n\n        <!-- original image for original view-->\n        <handprint-block ng-if=\"!siv.bds.object.supplemental\"\n                         action=\"siv.ovs.changeObject(siv.bds.object); siv.ovs.toggleSupplemental();\"\n                         image=\"{{ siv.bds.object.dbi }}.100.jpg\"\n                         footer=\"{{siv.bds.object.full_object_id}}\">\n        </handprint-block>\n\n        <!-- the supplemental views -->\n        <handprint-block ng-repeat=\"obj in siv.bds.object.supplemental_objects\"\n                         action=\"siv.ovs.changeObject(obj); siv.ovs.toggleSupplemental();\"\n                         image=\"{{ obj.dbi }}.100.jpg\"\n                         footer=\"{{ obj.full_object_id }}\">\n        </handprint-block>\n    </div>\n    <p ng-if=\"siv.bds.object.title\" class=\"object-subtitle\">{{siv.bds.object.title}}, {{ siv.bds.object.full_object_id }}, <span>{{ siv.bds.object.physical_description.objsize['#text'] }} </span>\n        <a style=\"color:#168bc1\" ng-click=\"siv.ovs.userestrictOpen(siv.bds.copy)\">&#169;</a>\n    </p>\n    <p ng-if=\"!siv.bds.object.title\" class=\"object-subtitle\">{{ siv.bds.object.full_object_id }}, <span>{{ siv.bds.object.physical_description.objsize['#text'] }} </span>\n        <a style=\"color:#168bc1\" ng-click=\"siv.ovs.userestrictOpen(siv.bds.copy)\">&#169;</a>\n    </p>\n</div>";

/***/ }),
/* 193 */
/***/ (function(module, exports) {

module.exports = "<!--use ng-if=\"fromSame.type != 'textmatch'\" in <div> if need be-->\n<div class=\"row\">\n    <!--<p class=\"text-center\"><em>Dates are the probable dates of {{ fromSame.bds.work.probable }}.</em></p>\n    <br>-->\n    <div class=\"col-sm-12 action-items\">\n        <div class=\"action-items-wrapper matrix\">\n            <ul class=\"list-unstyled list-inline\">\n                <li><a class=\"select-all-objects\" ng-click=\"fromSame.selectAll()\" ng-model=\"fromSame.selectedAll\">{{ fromSame.compareText }}</a></li>\n                <li><a href=\"\" ng-click=\"fromSame.activateCompare()\" class=\"compare-selected-objects\" scroll-to-top>Compare Selected Objects</a></li>\n            </ul>\n            \n        </div>\n    </div>\n</div>\n\n<!--use ng-if=\"fromSame.type != 'textmatch'\" in <div> if need be-->\n<div class=\"row\">\n    <div ng-repeat=\"obj in fromSame.bds.object[fromSame.type] track by $index\" class=\"col-sm-6 col-md-3 text-center\">\n        <div class=\"select-for-compare-wrapper\" ng-class=\"{'selected': fromSame.cof.isComparisonObject(obj,fromSame.type)}\" tooltip=\"Click in corner to select or deselect for comparison\"  tooltip-trigger=\"mouseenter\" tooltip-placement=\"top-right\">\n            <span class=\"selected\" ng-click=\"fromSame.selectOne(obj);\"><span class=\"icon\" ng-if=\"fromSame.cof.isComparisonObject(obj)\"></span></span>\n            <handprint-block ng-if=\"obj.virtualwork_title && !obj.copy_print_date_string\"\n                    link=\"/copy/{{ obj.virtualwork_id }}?descId={{ obj.desc_id }}\"\n                    image=\"{{ obj.dbi }}.100.jpg\"\n                    footer=\"<b>{{obj.virtualwork_title}}</b><br>{{obj.title}}, Composed {{obj.copy_composition_date_string}}<br>Object {{obj.object_number}}\"\n                    \n                >\n            </handprint-block>\n            <handprint-block ng-if=\"obj.virtualwork_title && obj.copy_print_date_string\"\n                    link=\"/copy/{{ obj.virtualwork_id }}?descId={{ obj.desc_id }}\"\n                    image=\"{{ obj.dbi }}.100.jpg\"\n                    footer=\"<b>{{obj.virtualwork_title}}</b><br>{{obj.title}}, Printed {{obj.copy_print_date_string}}<br>Object {{obj.object_number}}\"\n                    \n                >\n            </handprint-block>\n            <handprint-block ng-if=\"obj.title && !obj.virtualwork_title && obj.copy_print_date_string\"\n                    link=\"/copy/{{ obj.copy_bad_id }}?descId={{ obj.desc_id }}\"\n                    image=\"{{ obj.dbi }}.100.jpg\"\n                    footer=\"<b>{{obj.copy_title}}, Printed {{obj.copy_print_date_string}}</b><br>{{obj.title}}<br>{{obj.full_object_id}}\"\n                    \n                >\n            </handprint-block>\n            <handprint-block ng-if=\"obj.title && !obj.virtualwork_title && !obj.copy_print_date_string && !obj.source.repository.institution['#text']\"\n                    link=\"/copy/{{ obj.copy_bad_id }}?descId={{ obj.desc_id }}\"\n                    image=\"{{ obj.dbi }}.100.jpg\"\n                    footer=\"<b>{{obj.copy_title}}, Composed {{obj.copy_composition_date_string}}</b><br>{{obj.title}}<br>{{obj.full_object_id}}\"\n                    \n                >\n            </handprint-block>\n            <handprint-block ng-if=\"obj.title && !obj.virtualwork_title && !obj.copy_print_date_string && obj.source.repository.institution['#text']\"\n                    link=\"/copy/{{ obj.copy_bad_id }}?descId={{ obj.desc_id }}\"\n                    image=\"{{ obj.dbi }}.100.jpg\"\n                    footer=\"<b>{{obj.copy_title}}, Composed {{obj.copy_composition_date_string}}</b><br>{{obj.title}}<br>{{obj.full_object_id}}\"\n                    \n                >\n            </handprint-block>\n            <handprint-block ng-if=\"!obj.title && obj.copy_print_date_string\"\n                    link=\"/copy/{{ obj.copy_bad_id }}?descId={{ obj.desc_id }}\"\n                    image=\"{{ obj.dbi }}.100.jpg\"\n                    footer=\"<b>{{obj.copy_title}}, Printed {{obj.copy_print_date_string}}</b><br>{{obj.full_object_id}}\"\n                    textmatchstrings=\"{{obj.text_match_strings}}\"\n                    \n                >\n            </handprint-block>\n             <handprint-block ng-if=\"!obj.title && !obj.copy_print_date_string\"\n                    link=\"/copy/{{ obj.copy_bad_id }}?descId={{ obj.desc_id }}\"\n                    image=\"{{ obj.dbi }}.100.jpg\"\n                    footer=\"<b>{{obj.copy_title}}, Composed {{obj.copy_composition_date_string}}</b><br>{{obj.full_object_id}}\"\n                    \n                >\n            </handprint-block>\n        </div>\n    </div>\n</div>\n\n<!--\n<div ng-if=\"fromSame.type == 'textmatch'\" class=\"row\">\n    <div ng-repeat=\"obj in fromSame.bds.object[fromSame.type] track by $index\" class=\"col-sm-6 col-md-3 text-center\">\n        \n            <handprint-block ng-if=\"obj.virtualwork_title && !obj.copy_print_date_string\"\n                    link=\"/copy/{{ obj.virtualwork_id }}?descId={{ obj.desc_id }}\"\n                    image=\"{{ obj.dbi }}.100.jpg\"\n                    footer=\"<b>{{obj.virtualwork_title}}</b><br>{{obj.title}}, Composed {{obj.copy_composition_date_string}}<br>Object {{obj.object_number}}\"\n                    \n                >\n            </handprint-block>\n            <handprint-block ng-if=\"obj.virtualwork_title && obj.copy_print_date_string\"\n                    link=\"/copy/{{ obj.virtualwork_id }}?descId={{ obj.desc_id }}\"\n                    image=\"{{ obj.dbi }}.100.jpg\"\n                    footer=\"<b>{{obj.virtualwork_title}}</b><br>{{obj.title}}, Printed {{obj.copy_print_date_string}}<br>Object {{obj.object_number}}\"\n                    \n                >\n            </handprint-block>\n            <handprint-block ng-if=\"obj.title && !obj.virtualwork_title && obj.copy_print_date_string\"\n                    link=\"/copy/{{ obj.copy_bad_id }}?descId={{ obj.desc_id }}\"\n                    image=\"{{ obj.dbi }}.100.jpg\"\n                    footer=\"<b>{{obj.copy_title}}, Printed {{obj.copy_print_date_string}}</b><br>{{obj.title}}<br>{{obj.full_object_id}}\"\n                    \n                >\n            </handprint-block>\n            <handprint-block ng-if=\"obj.title && !obj.virtualwork_title && !obj.copy_print_date_string && !obj.source.repository.institution['#text']\"\n                    link=\"/copy/{{ obj.copy_bad_id }}?descId={{ obj.desc_id }}\"\n                    image=\"{{ obj.dbi }}.100.jpg\"\n                    footer=\"<b>{{obj.copy_title}}, Composed {{obj.copy_composition_date_string}}</b><br>{{obj.title}}<br>{{obj.full_object_id}}\"\n                    \n                >\n            </handprint-block>\n            <handprint-block ng-if=\"obj.title && !obj.virtualwork_title && !obj.copy_print_date_string && obj.source.repository.institution['#text']\"\n                    link=\"/copy/{{ obj.copy_bad_id }}?descId={{ obj.desc_id }}\"\n                    image=\"{{ obj.dbi }}.100.jpg\"\n                    footer=\"<b>{{obj.copy_title}}, Composed {{obj.copy_composition_date_string}}</b><br>{{obj.title}}<br>{{obj.full_object_id}}\"\n                    \n                >\n            </handprint-block>\n            <handprint-block ng-if=\"!obj.title && obj.copy_print_date_string\"\n                    link=\"/copy/{{ obj.copy_bad_id }}?descId={{ obj.desc_id }}\"\n                    image=\"{{ obj.dbi }}.100.jpg\"\n                    footer=\"<b>{{obj.copy_title}}, Printed {{obj.copy_print_date_string}}</b><br>{{obj.full_object_id}}\"\n                    textmatchstrings=\"{{obj.text_match_strings}}\"\n                    \n                >\n            </handprint-block>\n             <handprint-block ng-if=\"!obj.title && !obj.copy_print_date_string\"\n                    link=\"/copy/{{ obj.copy_bad_id }}?descId={{ obj.desc_id }}\"\n                    image=\"{{ obj.dbi }}.100.jpg\"\n                    footer=\"<b>{{obj.copy_title}}, Composed {{obj.copy_composition_date_string}}</b><br>{{obj.full_object_id}}\"\n                    \n                >\n            </handprint-block>\n    \n    </div>\n</div>\n-->\n";

/***/ }),
/* 194 */
/***/ (function(module, exports) {

module.exports = "<!-- OBJECTS IN COPY -->\n<div role=\"tabpanel\" class=\"fadeinout tab-pane active in\" id=\"objects-in-copy\">\n    <header class=\"page-header\">\n        <!--<p class=\"subhead\">Objects In {{ oic.getCopyOrGroup() }}</p>-->\n    </header>\n    <p ng-if=\"oic.bds.work.virtual && oic.bds.copy.bad_id != 'letters'\" class=\"text-center\"><em>Dates are the probable dates of {{ oic.bds.work.probable }}.</em></p>\n    <br>\n    <div class=\"row\">\n        <!-- for letters (multi object groups) -->\n        <div ng-repeat=\"obj in oic.bds.copyObjects | filter:{object_group: oic.bds.object.object_group}:true track by $index\" class=\"col-sm-6 col-md-3\" ng-if=\"oic.bds.copy.bad_id == 'letters'\">\n            <handprint-block scroll-to-top\n                             action=\"oic.changeObject(obj)\"\n                             image=\"{{ obj.dbi }}.100.jpg\"\n                             footer=\"{{ obj.title }}<br>{{ obj.full_object_id }}\">\n            </handprint-block>\n        </div>\n\n        <!-- for everything else -->\n        <div ng-repeat=\"obj in oic.bds.copyObjects | filter:{supplemental:null} track by $index\" class=\"col-sm-6 col-md-3\" ng-if=\"oic.bds.copy.bad_id != 'letters'\">\n                <span ng-if=\"oic.bds.work.probable == 'printing'\">\n                    <handprint-block scroll-to-top ng-if=\"!obj.title\"\n                                     action=\"oic.changeObject(obj)\"\n                                     image=\"{{ obj.dbi }}.100.jpg\"\n                                     footer=\"{{ obj.full_object_id }}\">\n                    </handprint-block>\n                    <handprint-block scroll-to-top ng-if=\"obj.title && !oic.bds.work.virtual\"\n                                     action=\"oic.changeObject(obj)\"\n                                     image=\"{{ obj.dbi }}.100.jpg\"\n                                     footer=\"{{obj.title}}<br>{{ obj.full_object_id }}\">\n                    </handprint-block>\n                    <handprint-block scroll-to-top ng-if=\"obj.title && oic.bds.work.virtual\"\n                                     action=\"oic.changeObject(obj)\"\n                                     image=\"{{ obj.dbi }}.100.jpg\"\n                                     footer=\"{{obj.title}}<br>{{ obj.full_object_id }}\">\n                    </handprint-block>\n                </span>\n                <span ng-if=\"oic.bds.work.probable != 'printing'\">\n                    <handprint-block scroll-to-top ng-if=\"!obj.title\"\n                                     action=\"oic.changeObject(obj)\"\n                                     image=\"{{ obj.dbi }}.100.jpg\"\n                                     footer=\"{{ obj.full_object_id }}\">\n                    </handprint-block>\n                    <handprint-block scroll-to-top ng-if=\"obj.title && !oic.bds.work.virtual\"\n                                     action=\"oic.changeObject(obj)\"\n                                     image=\"{{ obj.dbi }}.100.jpg\"\n                                     footer=\"{{obj.title}}<br>{{ obj.full_object_id }}\">\n                    </handprint-block>\n                    <handprint-block scroll-to-top ng-if=\"obj.title && oic.bds.work.virtual\"\n                                     action=\"oic.changeObject(obj)\"\n                                     image=\"{{ obj.dbi }}.100.jpg\"\n                                     footer=\"{{obj.title}}<br>{{ obj.full_object_id }}, {{obj.source.objdescid.compdate['#text']}}, {{obj.source.repository.institution['#text']}}\">\n                    </handprint-block>\n                </span>\n        </div>\n    </div>\n</div>";

/***/ }),
/* 195 */
/***/ (function(module, exports) {

module.exports = "<form class=\"navbar-form\" role=\"search\" ng-submit=\"sb.s.loadSearchPage()\">\n<div class=\"input-group\">\n  <input tooltip=\"Search titles, transcriptions, illustration descriptions, image tags, editors' notes, copy/set information, and work information\" tooltip-placement=\"bottom\" ng-model=\"sb.s.searchConfig.searchString\" type=\"text\" class=\"form-control black-tooltip-arrow\" placeholder=\"Search\" ng-click=\"sb.s.searchConfig.searchString = null\">\n  <span class=\"input-group-btn\">\n    <button class=\"btn btn-default\" type=\"submit\"><span class=\"glyphicon glyphicon-search\" aria-hidden=\"true\"></span></button>\n     <image-tags></image-tags>\n  </span>\n</div>\n</form>";

/***/ }),
/* 196 */
/***/ (function(module, exports) {

module.exports = "<!-- copies in work -->\n<div>\n    <div class=\"copies-in-work col-sm-12 text-center\" auto-width adjust=\"200\" breakpoint=\"992\" divide=\"3\">\n        <h5>Matching Copies</h5>\n        <br>\n        <div class=\"flex-wrap\">\n            <div class=\"handprint-block-small\"\n                 ng-repeat=\"copy in cw.results[cw.s.selectedWork][2] track by $index\"\n                 ng-class=\"{selected: cw.s.selectedCopy == $index}\"\n            >\n                <a ng-click=\"cw.s.showHighlight(cw.tree, $index)\">\n                    <span class=\"object-img\" style=\"background-image: url(/images/{{ copy[0].image }}.100.jpg);\"></span>\n                    <span class=\"description\">Copy {{copy[0].archive_copy_id}}</span>\n                </a>\n            </div>\n        </div>\n    </div>\n</div>";

/***/ }),
/* 197 */
/***/ (function(module, exports) {

module.exports = "<header class=\"page-header\">\n    <button class=\"close-copies\" ng-click=\"ph.s.selectedWork = -1\" scroll-to-element offset=\"454\"><span class=\"glyphicon glyphicon-remove\"></span></button>\n    <h1>\n        <a href=\"/work/{{ph.results[ph.s.selectedWork][0].bad_id}}\">{{ph.results[ph.s.selectedWork][0].title}} (Composed {{ph.results[ph.s.selectedWork][0].composition_date_string}})</a>&nbsp;\n        <span dropdown class=\"dropdown\" ng-if=\"ph.showCopiesDropdown()\">\n            <button class=\"dropdown-toggle\" dropdown-toggle role=\"button\" aria-expanded=\"false\">\n                <span>Copy {{ph.results[ph.s.selectedWork][2][ph.s.selectedCopy][0].archive_copy_id}}</span>&nbsp;\n                <span>(Printed {{ph.results[ph.s.selectedWork][2][ph.s.selectedCopy][0].print_date_string}})</span>&nbsp;\n                <span class=\"caret\"></span>\n            </button>\n            <ul class=\"dropdown-menu\" role=\"menu\">\n                <li ng-repeat=\"copy in ph.results[ph.s.selectedWork][2] track by $index\">\n                    <a ng-click=\"ph.s.showObjects($index)\">Copy {{copy[0].archive_copy_id}} (Printed {{copy[0].print_date_string}}) ({{copy[1]}} Objects)</a>\n                </li>\n            </ul>\n        </span>\n    </h1>\n</header>";

/***/ }),
/* 198 */
/***/ (function(module, exports) {

module.exports = "<div>\n    <div class=\"object-result-highlight col-sm-12\" auto-width adjust=\"100\" breakpoint=\"992\" divide=\"3\" to-top-on-broadcast=\"searchCtrl::changeResult\" ng-if=\"orh.tree != 'work'\">\n        <div ng-if=\"orh.type == 'title'\" class=\"text-center\">\n            <h5 class=\"text-center\">Title</h5>\n            <span ng-bind-html=\"orh.results[orh.s.selectedWork][2][orh.s.selectedCopy][2][orh.s.selectedObject][0].title | highlight:orh.s.highlight\"></span>\n        </div>\n\n        <div ng-if=\"orh.type == 'text'\">\n            <h5 class=\"text-center\">Transcription</h5>\n            <text-transcription object=\"orh.selectedObject()\" highlight=\"{{orh.s.highlight}}\"></text-transcription>\n        </div>\n\n        <div ng-if=\"orh.type == 'description'\">\n            <h5 class=\"text-center\">Illustration Description</h5>\n            <illustration-description object=\"orh.selectedObject()\" highlight=\"{{orh.s.highlight}}\" keywords=\"hidden\"></illustration-description>\n        </div>\n\n        <div ng-if=\"orh.type == 'notes'\">\n            <h5 class=\"text-center\">Editors' Notes</h5>\n            <editor-notes object=\"orh.selectedObject()\" highlight=\"{{orh.s.highlight}}\"></editor-notes>\n        </div>\n\n        <div ng-if=\"orh.type == 'tag'\">\n            <h5 class=\"text-center\">Image Tags</h5>\n            <illustration-description object=\"orh.selectedObject()\" highlight=\"{{orh.s.highlight}}\" keywords=\"only\"></illustration-description>\n        </div>\n\n        <div ng-if=\"orh.type == 'copy-info'\" id=\"searchResultCopyInfo\">\n             <h5 class=\"text-center\">Copy/Set Information</h5>\n            <copy-information copy=\"orh.selectedCopy()\" highlight=\"{{orh.s.highlight}}\"></copy-information>\n        </div>\n    </div>\n\n    <div class=\"object-result-highlight\" auto-width adjust=\"100\" breakpoint=\"992\" ng-if=\"orh.tree == 'work'\" class=\"text-center\" to-top-on-broadcast=\"searchCtrl::changeResult\">\n        <h5 class=\"text-center\">Work Information</h5>\n        <div ng-bind-html=\"orh.selectedWork().info | highlight:orh.s.highlight\"></div>\n    </div>\n</div>";

/***/ }),
/* 199 */
/***/ (function(module, exports) {

module.exports = "<!-- objects in copy -->\n<div>\n    <div class=\"objects-in-copy col-sm-12 text-center\" auto-width adjust=\"200\" breakpoint=\"992\" divide=\"3\">\n        <h5 style=\"\">Matching Objects</h5>\n        <br>\n        <div class=\"flex-wrap\">\n            <div class=\"handprint-block-small\"\n                 ng-repeat=\"object in oc.results[oc.s.selectedWork][2][oc.s.selectedCopy][2] track by $index\"\n                 ng-class=\"{selected: oc.s.selectedObject == $index}\"\n                >\n                <a ng-click=\"oc.s.showHighlight(oc.tree, $index)\">\n                    <span class=\"object-img\" style=\"background-image: url(/images/{{ object[0].dbi }}.100.jpg);\"></span>\n                    <span class=\"description\">{{object[0].title}}</span>\n                    <span class=\"description text-capitalize\">{{object[0].full_object_id}}</span>\n                </a>\n            </div>\n        </div>\n    </div>\n</div>";

/***/ }),
/* 200 */
/***/ (function(module, exports) {

module.exports = "<!-- objects in virtual work -->\n<div>\n    <div class=\"objects-in-copy col-sm-12 text-center\" auto-width adjust=\"200\" breakpoint=\"992\" divide=\"3\">\n        <h5 style=\"\">Matching Objects</h5>\n        <br>\n        <div class=\"flex-wrap\">\n            <div ng-repeat=\"copy in ovw.results[ovw.s.selectedWork][2] track by $index\">\n                <div class=\"handprint-block-small\"\n                     ng-repeat=\"object in copy[2] track by $index\"\n                     ng-class=\"{selected: ovw.s.selectedObject == $index && ovw.s.selectedCopy == $parent.$index}\">\n                    <a ng-click=\"ovw.s.showHighlight(ovw.tree, $index,$parent.$index)\">\n                        <span class=\"object-img\" style=\"background-image: url(/images/{{ object[0].dbi }}.100.jpg);\"></span>\n                        <span ng-if=\"ovw.results[ovw.s.selectedWork][0].bad_id == 'letters'\" class=\"description\">{{object[0].object_group}}</span>\n                        <span ng-if=\"object[0].title && ovw.results[ovw.s.selectedWork][0].bad_id != 'letters'\" class=\"description\">{{object[0].title}}</span>\n                        <span ng-if=\"ovw.results[ovw.s.selectedWork][0].bad_id != 'letters'\" class=\"description text-capitalize\">{{object[0].full_object_id.replace(\"Object 1\",\"\")}}</span>\n                        <span ng-if=\"ovw.results[ovw.s.selectedWork][0].bad_id == 'letters'\" class=\"description text-capitalize\">{{object[0].full_object_id}}</span>\n                    </a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>";

/***/ }),
/* 201 */
/***/ (function(module, exports) {

module.exports = "<!-- preview -->\n<div class=\"object-preview col-sm-12 text-center\" auto-width adjust=\"100\" breakpoint=\"992\" divide=\"3\">\n    <h5 ng-if=\"ps.s.type != 'copy-info'\" style=\"\">Selected Object</h5>\n    <h5 ng-if=\"ps.s.type == 'copy-info'\" style=\"\">Selected Copy/Set</h5>\n    <br>\n    <div class=\"object-img-container text-center\" auto-height adjust=\"350\" breakpoint=\"992\">\n        <a ng-href=\"/copy/{{ps.s.getPreviewHref(ps.tree, ps.results)}}\">\n            <img ng-src=\"/images/{{ ps.s.getPreviewImage(ps.tree, ps.results) }}.100.jpg\">\n            <p></p>\n            <p class=\"object-subtitle\">\n                <span ng-if=\"ps.tree == 'object' && ps.s.getPreviewTitle(ps.tree, ps.results) != null\" class=\"object-no\">{{ps.getPreviewTitle(ps.tree, ps.results)}}<br></span>\n                <span ng-if=\"ps.results[ps.s.selectedWork][0].virtual && ps.results[ps.s.selectedWork][0].bad_id != 'letters'\" class=\"object-no\">{{ps.s.getPreviewLabel(ps.tree, ps.results).replace(\"Object 1\",\"\")}}</span>\n                <span ng-if=\"ps.results[ps.s.selectedWork][0].virtual && ps.results[ps.s.selectedWork][0].bad_id == 'letters'\" class=\"object-no\">{{ps.s.getPreviewLabel(ps.tree, ps.results)}}</span>\n                <span ng-if=\"!ps.results[ps.s.selectedWork][0].virtual\" class=\"object-no\">{{ps.s.getPreviewLabel(ps.tree, ps.results)}}</span></p>\n        </a>\n        <button ng-if=\"ps.s.type != 'copy-info'\" tooltip=\"Add to Lightbox\" tooltip-placement=\"bottom\" type=\"button \" class=\"btn btn-default \" style=\"height:21px;line-height:0.6;background-image: url('/static/img/global/edit-icons.png');background-repeat: no-repeat;background-position:2px 3px;background-size:20px;position:absolute;top:45px;margin-left:5px;background-color:black\" ng-class=\"\" class=\"btn btn-gr-selection \" ng-click=\"ps.s.addToLightBox(ps.tree, ps.results)\">\n                        </button>\n    </div>\n</div>\n";

/***/ }),
/* 202 */
/***/ (function(module, exports) {

module.exports = "<!-- previous/next controls -->\n<div class=\"object-controls\" ng-if=\"pn.results.length > 1\">\n    <a class=\"left carousel-control\" role=\"button\" ng-click=\"pn.s.previousResult(pn.type, pn.results)\" ng-if=\"pn.showLeft()\">\n        <span class=\"glyphicon glyphicon-chevron-left\"></span>\n        <span class=\"sr-only\">Previous</span>\n    </a>\n    <a class=\"right carousel-control\" role=\"button\" ng-click=\"pn.s.nextResult(pn.type, pn.results)\" ng-if=\"pn.showRight()\">\n        <span class=\"glyphicon glyphicon-chevron-right\"></span>\n        <span class=\"sr-only\">Next</span>\n    </a>\n</div>";

/***/ }),
/* 203 */
/***/ (function(module, exports) {

module.exports = "<div class=\"col-xs-12 full-width copy-container-wrapper\" ng-class=\"{hidden: pb.hidden()}\" auto-height adjust=\"175\" breakpoint=\"992\">\n    <div class=\"copy-container\" id=\"{{ pb.type }}\">\n        <preview-header tree=\"pb.tree\" results=\"pb.results\"/>\n        <div id=\"result-preview-body\" class=\"flex-992\" auto-height adjust=\"275\" breakpoint=\"992\">\n            <objects-in-virtual-work-preview tree=\"pb.tree\" results=\"pb.results\" ng-if=\"pb.showObjectsInVirtualWorkPreview()\"/>\n            <objects-in-copy-preview tree=\"pb.tree\" results=\"pb.results\" ng-if=\"pb.showObjectsInCopyPreview()\"/>\n            <copies-in-work-preview tree=\"pb.tree\" results=\"pb.results\" ng-if=\"pb.showCopiesInWorkPreview()\" to-top-on-broadcast=\"searchCtrl::changeResult\"/>\n            <preview-selection tree=\"pb.tree\" results=\"pb.results\" ng-if=\"pb.tree != 'work'\"/>\n            <object-result-highlight type=\"pb.type\" tree=\"pb.tree\" results=\"pb.results\"/>\n        </div><!-- end flex results -->\n        <previous-next results=\"pb.results\" type=\"pb.type\"/>\n    </div>\n</div>";

/***/ }),
/* 204 */
/***/ (function(module, exports) {

module.exports = "<span dropdown class=\"dropdown\" ng-if=\"esr.results.length > 0\">\n    <button class=\"dropdown-toggle\" dropdown-toggle role=\"button\" aria-expanded=\"false\">\n        <span><h3 style=\"color:white\">{{ esr.label }} ({{ esr.results.length}})<span class=\"caret\"></span></h3></span>&nbsp;\n    </button>\n        <ul class=\"dropdown-menu\" role=\"menu\" style=\"z-index: 10000;\">\n            <li ng-repeat=\"work in esr.results track by $index\">\n                <a scroll-to-element=\"#{{esr.type}}\" offset=\"125\" ng-click=\"esr.s.showCopies(esr.type, esr.results, $index);\">{{work[0].title}} (Composed {{work[0].composition_date_string}})</a>\n            </li>\n        </ul>\n</span>\n\n<div class=\"row search-result-row\" ng-show=\"esr.results.length > 0\">\n    <div class=\"col-xs-12 full-width\">\n        <slide-box id=\"{{esr.type}}-slide-box\" type=\"esr.type\">\n            <div ng-repeat=\"(k,work) in esr.results\" class=\"search-result-item\" ng-class=\"{selected:k == esr.s.selectedWork && esr.type == esr.s.type}\">\n                <div scroll-to-element=\"#{{esr.type}}\" offset=\"125\">\n                    <!--to slide, put slideBox.scrollToResult($index); into action for handprint-blocks-->\n                    <handprint-block\n                        action=\"esr.s.showCopies(esr.type, esr.results, $index); slideBox.scrollToResult($index);\"\n                        image=\"{{ esr.s.getWorkImage(esr.tree, esr.results, $index) }}\"\n                        footer=\"{{ esr.s.getHandprintDescription(esr.tree, esr.results, $index, esr.label) }}\"\n                        ></handprint-block>\n                </div>\n            </div>\n        </slide-box>\n    </div>\n    <preview-box results=\"esr.results\" tree=\"esr.tree\" type=\"esr.type\"/>\n</div>";

/***/ }),
/* 205 */
/***/ (function(module, exports) {

module.exports = "<!-- date -->\n<li dropdown class=\"dropdown\" ng-click=\"$event.stopPropagation()\">\n    <a dropdown-toggle role=\"button\" aria-expanded=\"false\">Date <span class=\"caret\"></span></a>\n    <ul class=\"dropdown-menu\" role=\"menu\" ng-click=\"$event.stopPropagation()\">\n        <li class=\"list-header\">Restrict Date Range:</li>\n        <li>\n            <div range-slider min=\"1772\" max=\"1827\" show-values=\"true\" model-min=\"dsf.s.searchConfig.minDate\" model-max=\"dsf.s.searchConfig.maxDate\" on-handle-up=\"dsf.s.searchingFromFilter = true; dsf.s.search()\"></div>\n        </li>\n        <li class=\"divider\" role=\"separator\"></li>\n        <li>\n            <input type=\"checkbox\" ng-model=\"dsf.s.searchConfig.useCompDate\" ng-change=\"dsf.s.searchingFromFilter = true; dsf.s.search();\"> Composition Date\n        </li>\n        <li>\n            <input type=\"checkbox\" ng-model=\"dsf.s.searchConfig.usePrintDate\" ng-change=\"dsf.s.searchingFromFilter = true; dsf.s.search()\"> Printing Date\n        </li>\n    </ul>\n</li>";

/***/ }),
/* 206 */
/***/ (function(module, exports) {

module.exports = "<!-- search field -->\n<li dropdown class=\"dropdown\" ng-click=\"$event.stopPropagation()\">\n    <a dropdown-toggle role=\"button\" aria-expanded=\"false\">Type <span class=\"caret\"></span></a>\n    <ul class=\"dropdown-menu\" role=\"menu\">\n        <li>\n            <input type=\"checkbox\" ng-model=\"fsf.s.searchConfig.searchAllFields\" ng-change=\"fsf.s.allFields()\"> Any\n        </li>\n        <li>\n            <input type=\"checkbox\" ng-model=\"fsf.s.searchConfig.searchTitle\" ng-change=\"fsf.s.changeField()\"> Title\n        </li>\n        <li>\n            <input type=\"checkbox\" ng-model=\"fsf.s.searchConfig.searchText\" ng-change=\"fsf.s.changeField()\"> Transcription\n        </li>\n        <li>\n            <input type=\"checkbox\" ng-model=\"fsf.s.searchConfig.searchImageKeywords\" ng-change=\"fsf.s.changeField()\"> Image Tag\n        </li>\n        <li>\n            <input type=\"checkbox\" ng-model=\"fsf.s.searchConfig.searchNotes\" ng-change=\"fsf.s.changeField()\"> Editors' Note\n        </li>\n        <li>\n            <input type=\"checkbox\" ng-model=\"fsf.s.searchConfig.searchImageDescriptions\" ng-change=\"fsf.s.changeField()\"> Illustration\n            Description\n        </li>\n        <li>\n            <input type=\"checkbox\" ng-model=\"fsf.s.searchConfig.searchCopyInformation\" ng-change=\"fsf.s.changeField()\"> Copy/Set Information\n        </li>\n        <li>\n            <input type=\"checkbox\" ng-model=\"fsf.s.searchConfig.searchWorkInformation\" ng-change=\"fsf.s.changeField()\"> Work Information\n        </li>\n    </ul>\n</li>";

/***/ }),
/* 207 */
/***/ (function(module, exports) {

module.exports = "<!-- type -->\n<li dropdown class=\"dropdown\" ng-click=\"$event.stopPropagation()\">\n    <a dropdown-toggle role=\"button\" aria-expanded=\"false\">Medium <span class=\"caret\"></span></a>\n    <ul class=\"dropdown-menu\" role=\"menu\">\n        <li>\n            <input type=\"checkbox\" ng-model=\"msf.s.searchConfig.searchAllTypes\" ng-change=\"msf.s.allTypes()\"> Any\n        </li>\n        <li>\n            <input type=\"checkbox\" ng-model=\"msf.s.searchConfig.searchIlluminatedBooks\" ng-change=\"msf.s.changeType()\"> Illuminated Books\n        </li>\n        <li>\n            <input type=\"checkbox\" ng-model=\"msf.s.searchConfig.searchCommercialBookIllustrations\" ng-change=\"msf.s.changeType()\"> Commercial Book Illustrations\n        </li>\n        <li>\n            <input type=\"checkbox\" ng-model=\"msf.s.searchConfig.searchSeparatePrints\" ng-change=\"msf.s.changeType()\"> Separate Prints\n        </li>\n        <li>\n            <input type=\"checkbox\" ng-model=\"msf.s.searchConfig.searchDrawingsPaintings\" ng-change=\"msf.s.changeType()\"> Drawings and\n            Paintings\n        </li>\n        <li>\n            <input type=\"checkbox\" ng-model=\"msf.s.searchConfig.searchManuscripts\" ng-change=\"msf.s.changeType()\"> Manuscripts and\n            Typographic Editions\n        </li>\n        <li>\n            <input type=\"checkbox\" ng-model=\"msf.s.searchConfig.searchRelatedMaterials\" ng-change=\"msf.s.changeType()\"> Related Materials\n        </li>\n    </ul>\n</li>";

/***/ }),
/* 208 */
/***/ (function(module, exports) {

module.exports = "<div class=\"slide-box-viewport\">\n    <div class=\"slide-box-wrapper\" ng-style=\"{left:slideBox.leftOffset+'px'}\">\n        <ng-transclude></ng-transclude>\n    </div>\n    <div class=\"scroller scroller-left\" ng-class=\"{'hidden': !slideBox.scrollerLeft}\" ng-click=\"slideBox.scrollLeft()\">\n        <span class=\"glyphicon glyphicon-chevron-left\"></span>\n    </div>\n    <div class=\"scroller scroller-right\" ng-class=\"{'hidden': !slideBox.scrollerRight}\" ng-click=\"slideBox.scrollRight()\">\n        <span class=\"glyphicon glyphicon-chevron-right\"></span>\n    </div>\n</div>";

/***/ }),
/* 209 */
/***/ (function(module, exports) {

module.exports = "<div role=\"tabpanel\" class=\"fadeinout tab-pane active in\" id=\"text-match\">\n    <!-- OBJECTS -->\n    <div class=\"row\" ng-if=\"tr.bds.object.text_match.objects.length > 0\">\n        <h3>Objects</h3>\n        <div ng-repeat=\"obj in tr.bds.object.text_match.objects track by $index\" class=\"col-sm-6 col-md-3\">\n            <handprint-block ng-if=\"obj.object_group !== null\"\n                             link=\"/copy/letters?descId={{ obj.desc_id }}\"\n                             image=\"{{ obj.dbi }}.100.jpg\"\n                             footer=\"{{ obj.object_group }}\">\n            </handprint-block>\n        </div>\n    </div>\n</div>";

/***/ }),
/* 210 */
/***/ (function(module, exports) {

module.exports = "<!-- TEXTUAL REFERENCES -->\n<div role=\"tabpanel\" class=\"fadeinout tab-pane active in\" id=\"text-reference\">\n    <!-- OBJECTS -->\n    <div class=\"row\" ng-if=\"tr.bds.object.text_ref.objects.length > 0\">\n        <h3>Objects</h3>\n        <div ng-repeat=\"obj in tr.bds.object.text_ref.objects track by $index\" class=\"col-sm-6 col-md-3\">\n            <handprint-block ng-if=\"obj.object_group !== null\"\n                             link=\"/copy/letters?descId={{ obj.desc_id }}\"\n                             image=\"{{ obj.dbi }}.100.jpg\"\n                             footer=\"{{ obj.object_group }}\">\n            </handprint-block>\n\n            <!--copy permutations from objectsFromSame.html in the future-->\n            <handprint-block ng-if=\"obj.object_group === null\"\n                             link=\"/copy/{{ obj.copy_bad_id }}?descId={{ obj.desc_id }}\"\n                             image=\"{{ obj.dbi }}.100.jpg\"\n                             footer=\"<b>{{obj.copy_title}}, Composed {{obj.copy_composition_date_string}}</b><br>{{obj.full_object_id}}\">\n            </handprint-block>\n        </div>\n    </div>\n\n    <!-- COPIES -->\n    <div class=\"row\" ng-if=\"tr.bds.object.text_ref.copies.length > 0\">\n        <h3>Copies</h3>\n        <div ng-repeat=\"cp in tr.bds.object.text_ref.copies track by $index\" class=\"col-sm-6 col-md-3\">\n            <handprint-block link=\"/copy/{{cp.bad_id}}\"\n                             image=\"{{ cp.image }}.100.jpg\"\n                             footer=\"Copy {{cp.archive_copy_id}}, {{cp.source.objinfo.printdate['#text']}}, {{cp.institution}}\">\n            </handprint-block>\n        </div>\n    </div>\n\n    <!-- WORKS -->\n    <div class=\"row\" ng-if=\"tr.bds.object.text_ref.works.length > 0\">\n        <h3>Works</h3>\n        <div ng-repeat=\"wk in tr.bds.object.text_ref.works track by $index\" class=\"col-sm-6 col-md-3\">\n            <handprint-block link=\"/work/{{wk.bad_id}}\"\n                             image=\"{{ wk.image }}\"\n                             footer=\"{{ wk.title }}\">\n            </handprint-block>\n        </div>\n    </div>\n</div>";

/***/ }),
/* 211 */
/***/ (function(module, exports) {

module.exports = "<form id=\"gr-selection\" class=\"navbar-form\">\n    <div class=\"btn-group\">\n        <button tooltip=\"Gallery Mode: works open in Object View by default\" tooltip-placement=\"bottom\" class=\"btn btn-gr-selection black-tooltip-arrow\" ng-class=\"{'active':persistentmode == 'gallery'}\" ng-click=\"viewSubMenu.changeView('object','image')\">\n            <span class=\"gr-abbreviation\">G</span>\n        </button>\n        <button tooltip=\"Reading Mode: works open in Reading View by default\" tooltip-placement=\"bottom\" class=\"btn btn-gr-selection black-tooltip-arrow\" ng-class=\"{'active':persistentmode == 'reading'}\" ng-click=\"viewSubMenu.changeView('read','both')\">\n            <span class=\"gr-abbreviation\">R</span>\n        </button>\n    </div>\n        <button tooltip=\"Help for this page\" tooltip-placement=\"bottom\" style=\"background-color:rgb(61, 61, 60); color:#e9bc47\" class=\"btn btn-gr-selection black-tooltip-arrow\" ng-click=\"viewSubMenu.helpOpen()\">\n            <span class=\"gr-abbreviation\">?</span>\n        </button>\n</form>";

/***/ }),
/* 212 */
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\n\n\t<!-- For Non virtual groups -->\n\t<div ng-repeat=\"copy in workCopies.bds.workCopies\" class=\"col-sm-6 col-md-3\" ng-if=\"workCopies.bds.work.virtual == false && copy.source.objinfo.printdate['#text'] && copy.archive_copy_id && copy.archive_copy_id != 'mpi'\">\n\t\t<handprint-block\n\t\t\t\tlink=\"/copy/{{copy.bad_id}}\"\n\t\t\t\timage=\"{{ copy.image }}.100.jpg\"\n\t\t\t\tfooter=\"Copy {{copy.archive_copy_id}}, {{copy.source.objinfo.printdate['#text']}}, {{copy.institution}}<br>{{copy.number_of_objects}} object(s)\">\n\t\t</handprint-block>\n\t</div>\n\n\t<div ng-repeat=\"copy in workCopies.bds.workCopies\" class=\"col-sm-6 col-md-3\" ng-if=\"workCopies.bds.work.virtual == false && copy.source.objinfo.printdate['#text'] && copy.archive_copy_id == 'mpi'\">\n\t\t<handprint-block\n\t\t\t\tlink=\"/copy/{{copy.bad_id}}\"\n\t\t\t\timage=\"{{ copy.image }}.100.jpg\"\n\t\t\t\tfooter=\"Copy {{copy.archive_copy_id}}, {{copy.source.objinfo.printdate['#text']}}<br>{{copy.number_of_objects}} object(s)\">\n\t\t</handprint-block>\n\t</div>\n\n\t<div ng-repeat=\"copy in workCopies.bds.workCopies\" class=\"col-sm-6 col-md-3\" ng-if=\"workCopies.bds.work.virtual == false && copy.source.objinfo.printdate['#text'] && !copy.archive_copy_id\">\n\t\t<handprint-block\n\t\t\t\tlink=\"/copy/{{copy.bad_id}}\"\n\t\t\t\timage=\"{{ copy.image }}.100.jpg\"\n\t\t\t\tfooter=\"{{copy.source.objinfo.printdate['#text']}}, {{copy.institution}}<br>{{copy.number_of_objects}} object(s)\">\n\t\t</handprint-block>\n\t</div>\n\t<div ng-repeat=\"copy in workCopies.bds.workCopies\" class=\"col-sm-6 col-md-3\" ng-if=\"workCopies.bds.work.virtual == false && !copy.source.objinfo.printdate['#text'] && copy.archive_copy_id\">\n\t\t<handprint-block\n\t\t\t\tlink=\"/copy/{{copy.bad_id}}\"\n\t\t\t\timage=\"{{ copy.image }}.100.jpg\"\n\t\t\t\tfooter=\"Copy {{copy.archive_copy_id}}, {{copy.source.objdescid.compdate['#text']}}, {{copy.institution}}<br>{{copy.number_of_objects}} object(s)\">\n\t\t</handprint-block>\n\t</div>\n\t<div ng-repeat=\"copy in workCopies.bds.workCopies\" class=\"col-sm-6 col-md-3\" ng-if=\"workCopies.bds.work.virtual == false && !copy.source.objinfo.printdate['#text'] && !copy.archive_copy_id\">\n\t\t<handprint-block\n\t\t\t\tlink=\"/copy/{{copy.bad_id}}\"\n\t\t\t\timage=\"{{ copy.image }}.100.jpg\"\n\t\t\t\tfooter=\"{{copy.source.objdescid.compdate['#text']}}, {{copy.institution}}<br>{{copy.number_of_objects}} object(s)\">\n\t\t</handprint-block>\n\t</div>\n\n\t<!-- For Virtual Groups, except letters -->\n\t<div ng-repeat=\"obj in workCopies.bds.workCopies | filter:{supplemental:null}\" class=\"col-sm-6 col-md-3\" ng-if=\"workCopies.bds.work.virtual == true && workCopies.bds.work.bad_id != 'letters'\">\n\t\t<handprint-block\n\t\t\t\tlink=\"/copy/{{ workCopies.bds.work.bad_id }}?descId={{obj.desc_id}}\"\n\t\t\t\taction=\"workCopies.bds.changeObject(obj)\"\n\t\t\t\timage=\"{{ obj.dbi }}.100.jpg\"\n\t\t\t\tfooter=\"{{obj.title}}<br>{{obj.full_object_id}}, {{obj.source.objdescid.compdate['#text']}}, {{obj.source.provenance.name['#text']}}\">\n\t\t</handprint-block>\n\t</div>\n\n\t<!-- For Letters -->\n\t<div ng-repeat=\"obj in workCopies.bds.workCopies\" class=\"col-sm-6 col-md-3\" ng-if=\"workCopies.bds.work.bad_id == 'letters'\">\n\t\t<handprint-block\n\t\t\t\tlink=\"/copy/{{ workCopies.bds.work.bad_id }}?descId={{obj.desc_id}}\"\n\t\t\t\taction=\"workCopies.bds.changeObject(obj)\"\n\t\t\t\timage=\"{{ obj.dbi }}.100.jpg\"\n\t\t\t\tfooter=\"{{obj.object_group}}\">\n\t\t</handprint-block>\n\t</div>\n\n</div>";

/***/ }),
/* 213 */
/***/ (function(module, exports) {

module.exports = "<div id=\"Overlay\" class=\"overlay\" ng-if=\"$root.showOverlay == true\">\n\n    <div>\n    <a style=\"text-decoration: none\" href=\"\" class=\"closebtnleft\" ng-click=\"$root.showOverlay = false\">&times;</a>\n    <header class=\"page-header\">\n      <p class=\"subhead\">{{ workTitle.bds.work.medium_pretty }}</p>\n      <h1 style=\"color:rgba(233,188,71,1)\">{{ workTitle.bds.work.title }} (Composed {{ workTitle.bds.work.composition_date_string }})</h1>\n    </header>\n\n    <article class=\"categories\">\n\n      <div style=\"color:white\" class=\"container\">\n        <div class=\"section-group-workinfo\" ng-bind-html=\"workTitle.bds.work.info\"></div>\n        <hr>\n        <p class=\"text-center\"><em>Dates are the probable dates of {{ workTitle.bds.work.probable }}.</em></p>\n\n            <work-copies></work-copies>\n\n\n      </div>\n  </article>\n  </div>\n    <div class=\"containerForRelatedInOverlay\">\n        <!--<div class=\"section-group\">\n            <h2>Related Works</h2>\n            <p>Related works currently available in the William Blake Archive appear as links below. Works not currently available appear as plain text.</p>\n        </div>-->\n        <all-known-copies work=\"workTitle.bds.work\" ng-if=\"workTitle.bds.work.medium=='illbk'\"></all-known-copies>\n        <all-known-related-items work=\"workTitle.bds.work\" ng-class=\"workTitle.bds.work.related_works.length > 0 ? '' : 'hidden'\"></all-known-related-items>\n    </div>\n\n</div>\n\n<div id=\"OverlayCopyInfo\" class=\"overlay\" ng-show=\"$root.showOverlayCopyInfo == true\">\n\n    <a style=\"text-decoration: none\" href=\"\" class=\"closebtnleft\" ng-click=\"$root.showOverlayCopyInfo = false\">&times;</a>\n    <header ng-if=\"workTitle.bds.copy.archive_set_id == null\" class=\"page-header\">\n      <p class=\"subhead\">COPY INFORMATION</p>\n      <h1 style=\"color:rgba(233,188,71,1)\">{{ workTitle.bds.work.title }} {{workTitle.getCopyPhrase()}} (Composed {{ workTitle.bds.work.composition_date_string }})</h1>\n    </header>\n    <header ng-if=\"workTitle.bds.copy.archive_set_id != null\" class=\"page-header\">\n      <p class=\"subhead\">SET INFORMATION</p>\n      <h1 style=\"color:rgba(233,188,71,1)\">{{ workTitle.bds.work.title }} (Composed {{ workTitle.bds.work.composition_date_string }})</h1>\n    </header>\n    <div id=\"archive-tabs\" role=\"tabpanel\">\n    <div class=\"container-fluid overlaycopyinfo\">\n      <div class=\"container\">\n        <div class=\"tab-content\">\n          <div role=\"tabpanel\" class=\"fadeinout tab-pane active in\">\n          <copy-information ng-if=\"workTitle.bds.copy.virtual == false\" copy=\"workTitle.bds.copy\" object=\"tabs.bds.object\"></copy-information>\n          </div>\n        </div>\n      </div>\n    </div>\n    </div>\n</div>\n\n\n<div class=\"object-view-menu hidden-xs hidden-sm\">\n  <span ng-if=\"showWorkTitle == 'static'\" class=\"worktitle\" style=\"padding: 19px;\">\n        <a scroll-to-top href=\"\" style=\"color:white;\">{{ workTitle.getStaticPageTitle() }}</a>\n    </span>\n  <span ng-if=\"showWorkTitle == 'work'\" class=\"worktitle\" style=\"padding: 19px;\">\n        <span scroll-to-top style=\"color:white;\">{{ workTitle.getTitle() }} (Composed {{workTitle.bds.work.composition_date_string}})</span>\n    </span>\n\n  <span ng-if=\"showWorkTitle != 'work' && showWorkTitle != 'static' && $root.view.mode != 'compare'\" class=\"worktitle\" style=\"padding: 19px;\">\n    <span ng-if=\"workTitle.bds.copy.bad_id == 'letters'\">\n      <a scroll-to-top href=\"\" ng-click=\"$root.showOverlay = true\" style=\"color:white;\">Letters (Composed {{workTitle.bds.work.composition_date_string}})</a>: {{ workTitle.getTitle() }}\n    </span>\n    <span ng-if=\"workTitle.bds.copy.bad_id != 'letters' && workTitle.bds.work.medium != 'exhibit'\">\n      <a scroll-to-top href=\"\" ng-click=\"$root.showOverlay = true\" style=\"color:white;\">{{ workTitle.getTitle() }}</a> <a scroll-to-top href=\"\" ng-click=\"$root.showOverlayCopyInfo = true\" style=\"color:white;\">{{workTitle.getCopyPhrase()}}</a> ({{workTitle.getCompOrPrintDateString()}})\n    </span>\n    <span ng-if=\"workTitle.bds.copy.bad_id != 'letters' && workTitle.bds.work.medium == 'exhibit'\">\n      <a scroll-to-top href=\"\" ng-click=\"$root.showOverlay = true\" style=\"color:white;\">{{ workTitle.getTitle() }}</a>\n    </span>\n\n  </span>\n\n  <span ng-if=\"$root.view.mode == 'compare' && showWorkTitle != 'static' && showWorkTitle != 'work'\" class=\"worktitle\" style=\"padding: 19px; color:yellow\">\n    <a scroll-to-top href=\"\" ng-click=\"$root.showOverlay = true\" style=\"color:yellow;\">{{ workTitle.getTitle() }}</a> <a scroll-to-top href=\"\" ng-click=\"$root.showOverlayCopyInfo = true\" style=\"color:yellow;\">{{workTitle.getCopyPhrase()}}</a> ({{workTitle.getCompOrPrintDateString()}}) <span style=\"color:yellow\">(Selected)</span>\n  </span>\n\n</div>";

/***/ }),
/* 214 */
/***/ (function(module, exports) {

module.exports = "/*! markdown-it 8.1.0 https://github.com//markdown-it/markdown-it @license MIT */\n!function (e) {\n  if (\"object\" == typeof exports && \"undefined\" != typeof module) module.exports = e();else if (\"function\" == typeof define && define.amd) define([], e);else {\n    var r;r = \"undefined\" != typeof window ? window : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : this, r.markdownit = e();\n  }\n}(function () {\n  var e;return function e(r, t, n) {\n    function s(i, a) {\n      if (!t[i]) {\n        if (!r[i]) {\n          var c = \"function\" == typeof require && require;if (!a && c) return c(i, !0);if (o) return o(i, !0);var l = new Error(\"Cannot find module '\" + i + \"'\");throw l.code = \"MODULE_NOT_FOUND\", l;\n        }var u = t[i] = { exports: {} };r[i][0].call(u.exports, function (e) {\n          var t = r[i][1][e];return s(t ? t : e);\n        }, u, u.exports, e, r, t, n);\n      }return t[i].exports;\n    }for (var o = \"function\" == typeof require && require, i = 0; i < n.length; i++) s(n[i]);return s;\n  }({ 1: [function (e, r, t) {\n      \"use strict\";\n      r.exports = e(\"entities/maps/entities.json\");\n    }, { \"entities/maps/entities.json\": 52 }], 2: [function (e, r, t) {\n      \"use strict\";\n      r.exports = [\"address\", \"article\", \"aside\", \"base\", \"basefont\", \"blockquote\", \"body\", \"caption\", \"center\", \"col\", \"colgroup\", \"dd\", \"details\", \"dialog\", \"dir\", \"div\", \"dl\", \"dt\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"head\", \"header\", \"hr\", \"html\", \"iframe\", \"legend\", \"li\", \"link\", \"main\", \"menu\", \"menuitem\", \"meta\", \"nav\", \"noframes\", \"ol\", \"optgroup\", \"option\", \"p\", \"param\", \"pre\", \"section\", \"source\", \"title\", \"summary\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"track\", \"ul\"];\n    }, {}], 3: [function (e, r, t) {\n      \"use strict\";\n      var n = \"[a-zA-Z_:][a-zA-Z0-9:._-]*\",\n          s = \"[^\\\"'=<>`\\\\x00-\\\\x20]+\",\n          o = \"'[^']*'\",\n          i = '\"[^\"]*\"',\n          a = \"(?:\" + s + \"|\" + o + \"|\" + i + \")\",\n          c = \"(?:\\\\s+\" + n + \"(?:\\\\s*=\\\\s*\" + a + \")?)\",\n          l = \"<[A-Za-z][A-Za-z0-9\\\\-]*\" + c + \"*\\\\s*\\\\/?>\",\n          u = \"<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>\",\n          p = \"<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->\",\n          h = \"<[?].*?[?]>\",\n          f = \"<![A-Z]+\\\\s+[^>]*>\",\n          d = \"<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\",\n          m = new RegExp(\"^(?:\" + l + \"|\" + u + \"|\" + p + \"|\" + h + \"|\" + f + \"|\" + d + \")\"),\n          _ = new RegExp(\"^(?:\" + l + \"|\" + u + \")\");r.exports.HTML_TAG_RE = m, r.exports.HTML_OPEN_CLOSE_TAG_RE = _;\n    }, {}], 4: [function (e, r, t) {\n      \"use strict\";\n      function n(e) {\n        return Object.prototype.toString.call(e);\n      }function s(e) {\n        return \"[object String]\" === n(e);\n      }function o(e, r) {\n        return y.call(e, r);\n      }function i(e) {\n        var r = Array.prototype.slice.call(arguments, 1);return r.forEach(function (r) {\n          if (r) {\n            if (\"object\" != typeof r) throw new TypeError(r + \"must be object\");Object.keys(r).forEach(function (t) {\n              e[t] = r[t];\n            });\n          }\n        }), e;\n      }function a(e, r, t) {\n        return [].concat(e.slice(0, r), t, e.slice(r + 1));\n      }function c(e) {\n        return !(e >= 55296 && e <= 57343) && !(e >= 64976 && e <= 65007) && 65535 !== (65535 & e) && 65534 !== (65535 & e) && !(e >= 0 && e <= 8) && 11 !== e && !(e >= 14 && e <= 31) && !(e >= 127 && e <= 159) && !(e > 1114111);\n      }function l(e) {\n        if (e > 65535) {\n          e -= 65536;var r = 55296 + (e >> 10),\n              t = 56320 + (1023 & e);return String.fromCharCode(r, t);\n        }return String.fromCharCode(e);\n      }function u(e, r) {\n        var t = 0;return o(D, r) ? D[r] : 35 === r.charCodeAt(0) && w.test(r) && (t = \"x\" === r[1].toLowerCase() ? parseInt(r.slice(2), 16) : parseInt(r.slice(1), 10), c(t)) ? l(t) : e;\n      }function p(e) {\n        return e.indexOf(\"\\\\\") < 0 ? e : e.replace(x, \"$1\");\n      }function h(e) {\n        return e.indexOf(\"\\\\\") < 0 && e.indexOf(\"&\") < 0 ? e : e.replace(A, function (e, r, t) {\n          return r ? r : u(e, t);\n        });\n      }function f(e) {\n        return S[e];\n      }function d(e) {\n        return q.test(e) ? e.replace(E, f) : e;\n      }function m(e) {\n        return e.replace(F, \"\\\\$&\");\n      }function _(e) {\n        switch (e) {case 9:case 32:\n            return !0;}return !1;\n      }function g(e) {\n        if (e >= 8192 && e <= 8202) return !0;switch (e) {case 9:case 10:case 11:case 12:case 13:case 32:case 160:case 5760:case 8239:case 8287:case 12288:\n            return !0;}return !1;\n      }function b(e) {\n        return L.test(e);\n      }function k(e) {\n        switch (e) {case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 124:case 125:case 126:\n            return !0;default:\n            return !1;}\n      }function v(e) {\n        return e.trim().replace(/\\s+/g, \" \").toUpperCase();\n      }var y = Object.prototype.hasOwnProperty,\n          x = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g,\n          C = /&([a-z#][a-z0-9]{1,31});/gi,\n          A = new RegExp(x.source + \"|\" + C.source, \"gi\"),\n          w = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i,\n          D = e(\"./entities\"),\n          q = /[&<>\"]/,\n          E = /[&<>\"]/g,\n          S = { \"&\": \"&amp;\", \"<\": \"&lt;\", \">\": \"&gt;\", '\"': \"&quot;\" },\n          F = /[.?*+^$[\\]\\\\(){}|-]/g,\n          L = e(\"uc.micro/categories/P/regex\");t.lib = {}, t.lib.mdurl = e(\"mdurl\"), t.lib.ucmicro = e(\"uc.micro\"), t.assign = i, t.isString = s, t.has = o, t.unescapeMd = p, t.unescapeAll = h, t.isValidEntityCode = c, t.fromCodePoint = l, t.escapeHtml = d, t.arrayReplaceAt = a, t.isSpace = _, t.isWhiteSpace = g, t.isMdAsciiPunct = k, t.isPunctChar = b, t.escapeRE = m, t.normalizeReference = v;\n    }, { \"./entities\": 1, mdurl: 58, \"uc.micro\": 65, \"uc.micro/categories/P/regex\": 63 }], 5: [function (e, r, t) {\n      \"use strict\";\n      t.parseLinkLabel = e(\"./parse_link_label\"), t.parseLinkDestination = e(\"./parse_link_destination\"), t.parseLinkTitle = e(\"./parse_link_title\");\n    }, { \"./parse_link_destination\": 6, \"./parse_link_label\": 7, \"./parse_link_title\": 8 }], 6: [function (e, r, t) {\n      \"use strict\";\n      var n = e(\"../common/utils\").isSpace,\n          s = e(\"../common/utils\").unescapeAll;r.exports = function (e, r, t) {\n        var o,\n            i,\n            a = 0,\n            c = r,\n            l = { ok: !1, pos: 0, lines: 0, str: \"\" };if (60 === e.charCodeAt(r)) {\n          for (r++; r < t;) {\n            if (o = e.charCodeAt(r), 10 === o || n(o)) return l;if (62 === o) return l.pos = r + 1, l.str = s(e.slice(c + 1, r)), l.ok = !0, l;92 === o && r + 1 < t ? r += 2 : r++;\n          }return l;\n        }for (i = 0; r < t && (o = e.charCodeAt(r), 32 !== o) && !(o < 32 || 127 === o);) if (92 === o && r + 1 < t) r += 2;else {\n          if (40 === o && (i++, i > 1)) break;if (41 === o && (i--, i < 0)) break;r++;\n        }return c === r ? l : (l.str = s(e.slice(c, r)), l.lines = a, l.pos = r, l.ok = !0, l);\n      };\n    }, { \"../common/utils\": 4 }], 7: [function (e, r, t) {\n      \"use strict\";\n      r.exports = function (e, r, t) {\n        var n,\n            s,\n            o,\n            i,\n            a = -1,\n            c = e.posMax,\n            l = e.pos;for (e.pos = r + 1, n = 1; e.pos < c;) {\n          if (o = e.src.charCodeAt(e.pos), 93 === o && (n--, 0 === n)) {\n            s = !0;break;\n          }if (i = e.pos, e.md.inline.skipToken(e), 91 === o) if (i === e.pos - 1) n++;else if (t) return e.pos = l, -1;\n        }return s && (a = e.pos), e.pos = l, a;\n      };\n    }, {}], 8: [function (e, r, t) {\n      \"use strict\";\n      var n = e(\"../common/utils\").unescapeAll;r.exports = function (e, r, t) {\n        var s,\n            o,\n            i = 0,\n            a = r,\n            c = { ok: !1, pos: 0, lines: 0, str: \"\" };if (r >= t) return c;if (o = e.charCodeAt(r), 34 !== o && 39 !== o && 40 !== o) return c;for (r++, 40 === o && (o = 41); r < t;) {\n          if (s = e.charCodeAt(r), s === o) return c.pos = r + 1, c.lines = i, c.str = n(e.slice(a + 1, r)), c.ok = !0, c;10 === s ? i++ : 92 === s && r + 1 < t && (r++, 10 === e.charCodeAt(r) && i++), r++;\n        }return c;\n      };\n    }, { \"../common/utils\": 4 }], 9: [function (e, r, t) {\n      \"use strict\";\n      function n(e) {\n        var r = e.trim().toLowerCase();return !g.test(r) || !!b.test(r);\n      }function s(e) {\n        var r = d.parse(e, !0);if (r.hostname && (!r.protocol || k.indexOf(r.protocol) >= 0)) try {\n          r.hostname = m.toASCII(r.hostname);\n        } catch (e) {}return d.encode(d.format(r));\n      }function o(e) {\n        var r = d.parse(e, !0);if (r.hostname && (!r.protocol || k.indexOf(r.protocol) >= 0)) try {\n          r.hostname = m.toUnicode(r.hostname);\n        } catch (e) {}return d.decode(d.format(r));\n      }function i(e, r) {\n        return this instanceof i ? (r || a.isString(e) || (r = e || {}, e = \"default\"), this.inline = new h(), this.block = new p(), this.core = new u(), this.renderer = new l(), this.linkify = new f(), this.validateLink = n, this.normalizeLink = s, this.normalizeLinkText = o, this.utils = a, this.helpers = a.assign({}, c), this.options = {}, this.configure(e), void (r && this.set(r))) : new i(e, r);\n      }var a = e(\"./common/utils\"),\n          c = e(\"./helpers\"),\n          l = e(\"./renderer\"),\n          u = e(\"./parser_core\"),\n          p = e(\"./parser_block\"),\n          h = e(\"./parser_inline\"),\n          f = e(\"linkify-it\"),\n          d = e(\"mdurl\"),\n          m = e(\"punycode\"),\n          _ = { default: e(\"./presets/default\"), zero: e(\"./presets/zero\"), commonmark: e(\"./presets/commonmark\") },\n          g = /^(vbscript|javascript|file|data):/,\n          b = /^data:image\\/(gif|png|jpeg|webp);/,\n          k = [\"http:\", \"https:\", \"mailto:\"];i.prototype.set = function (e) {\n        return a.assign(this.options, e), this;\n      }, i.prototype.configure = function (e) {\n        var r,\n            t = this;if (a.isString(e) && (r = e, e = _[r], !e)) throw new Error('Wrong `markdown-it` preset \"' + r + '\", check name');if (!e) throw new Error(\"Wrong `markdown-it` preset, can't be empty\");return e.options && t.set(e.options), e.components && Object.keys(e.components).forEach(function (r) {\n          e.components[r].rules && t[r].ruler.enableOnly(e.components[r].rules), e.components[r].rules2 && t[r].ruler2.enableOnly(e.components[r].rules2);\n        }), this;\n      }, i.prototype.enable = function (e, r) {\n        var t = [];Array.isArray(e) || (e = [e]), [\"core\", \"block\", \"inline\"].forEach(function (r) {\n          t = t.concat(this[r].ruler.enable(e, !0));\n        }, this), t = t.concat(this.inline.ruler2.enable(e, !0));var n = e.filter(function (e) {\n          return t.indexOf(e) < 0;\n        });if (n.length && !r) throw new Error(\"MarkdownIt. Failed to enable unknown rule(s): \" + n);return this;\n      }, i.prototype.disable = function (e, r) {\n        var t = [];Array.isArray(e) || (e = [e]), [\"core\", \"block\", \"inline\"].forEach(function (r) {\n          t = t.concat(this[r].ruler.disable(e, !0));\n        }, this), t = t.concat(this.inline.ruler2.disable(e, !0));var n = e.filter(function (e) {\n          return t.indexOf(e) < 0;\n        });if (n.length && !r) throw new Error(\"MarkdownIt. Failed to disable unknown rule(s): \" + n);return this;\n      }, i.prototype.use = function (e) {\n        var r = [this].concat(Array.prototype.slice.call(arguments, 1));return e.apply(e, r), this;\n      }, i.prototype.parse = function (e, r) {\n        var t = new this.core.State(e, this, r);return this.core.process(t), t.tokens;\n      }, i.prototype.render = function (e, r) {\n        return r = r || {}, this.renderer.render(this.parse(e, r), this.options, r);\n      }, i.prototype.parseInline = function (e, r) {\n        var t = new this.core.State(e, this, r);return t.inlineMode = !0, this.core.process(t), t.tokens;\n      }, i.prototype.renderInline = function (e, r) {\n        return r = r || {}, this.renderer.render(this.parseInline(e, r), this.options, r);\n      }, r.exports = i;\n    }, { \"./common/utils\": 4, \"./helpers\": 5, \"./parser_block\": 10, \"./parser_core\": 11, \"./parser_inline\": 12, \"./presets/commonmark\": 13, \"./presets/default\": 14, \"./presets/zero\": 15, \"./renderer\": 16, \"linkify-it\": 53, mdurl: 58, punycode: 60 }], 10: [function (e, r, t) {\n      \"use strict\";\n      function n() {\n        this.ruler = new s();for (var e = 0; e < o.length; e++) this.ruler.push(o[e][0], o[e][1], { alt: (o[e][2] || []).slice() });\n      }var s = e(\"./ruler\"),\n          o = [[\"table\", e(\"./rules_block/table\"), [\"paragraph\", \"reference\"]], [\"code\", e(\"./rules_block/code\")], [\"fence\", e(\"./rules_block/fence\"), [\"paragraph\", \"reference\", \"blockquote\", \"list\"]], [\"blockquote\", e(\"./rules_block/blockquote\"), [\"paragraph\", \"reference\", \"list\"]], [\"hr\", e(\"./rules_block/hr\"), [\"paragraph\", \"reference\", \"blockquote\", \"list\"]], [\"list\", e(\"./rules_block/list\"), [\"paragraph\", \"reference\", \"blockquote\"]], [\"reference\", e(\"./rules_block/reference\")], [\"heading\", e(\"./rules_block/heading\"), [\"paragraph\", \"reference\", \"blockquote\"]], [\"lheading\", e(\"./rules_block/lheading\")], [\"html_block\", e(\"./rules_block/html_block\"), [\"paragraph\", \"reference\", \"blockquote\"]], [\"paragraph\", e(\"./rules_block/paragraph\")]];n.prototype.tokenize = function (e, r, t) {\n        for (var n, s, o = this.ruler.getRules(\"\"), i = o.length, a = r, c = !1, l = e.md.options.maxNesting; a < t && (e.line = a = e.skipEmptyLines(a), !(a >= t)) && !(e.sCount[a] < e.blkIndent);) {\n          if (e.level >= l) {\n            e.line = t;break;\n          }for (s = 0; s < i && !(n = o[s](e, a, t, !1)); s++);e.tight = !c, e.isEmpty(e.line - 1) && (c = !0), a = e.line, a < t && e.isEmpty(a) && (c = !0, a++, e.line = a);\n        }\n      }, n.prototype.parse = function (e, r, t, n) {\n        var s;e && (s = new this.State(e, r, t, n), this.tokenize(s, s.line, s.lineMax));\n      }, n.prototype.State = e(\"./rules_block/state_block\"), r.exports = n;\n    }, { \"./ruler\": 17, \"./rules_block/blockquote\": 18, \"./rules_block/code\": 19, \"./rules_block/fence\": 20, \"./rules_block/heading\": 21, \"./rules_block/hr\": 22, \"./rules_block/html_block\": 23, \"./rules_block/lheading\": 24, \"./rules_block/list\": 25, \"./rules_block/paragraph\": 26, \"./rules_block/reference\": 27, \"./rules_block/state_block\": 28, \"./rules_block/table\": 29 }], 11: [function (e, r, t) {\n      \"use strict\";\n      function n() {\n        this.ruler = new s();for (var e = 0; e < o.length; e++) this.ruler.push(o[e][0], o[e][1]);\n      }var s = e(\"./ruler\"),\n          o = [[\"normalize\", e(\"./rules_core/normalize\")], [\"block\", e(\"./rules_core/block\")], [\"inline\", e(\"./rules_core/inline\")], [\"linkify\", e(\"./rules_core/linkify\")], [\"replacements\", e(\"./rules_core/replacements\")], [\"smartquotes\", e(\"./rules_core/smartquotes\")]];n.prototype.process = function (e) {\n        var r, t, n;for (n = this.ruler.getRules(\"\"), r = 0, t = n.length; r < t; r++) n[r](e);\n      }, n.prototype.State = e(\"./rules_core/state_core\"), r.exports = n;\n    }, { \"./ruler\": 17, \"./rules_core/block\": 30, \"./rules_core/inline\": 31, \"./rules_core/linkify\": 32, \"./rules_core/normalize\": 33, \"./rules_core/replacements\": 34, \"./rules_core/smartquotes\": 35, \"./rules_core/state_core\": 36 }], 12: [function (e, r, t) {\n      \"use strict\";\n      function n() {\n        var e;for (this.ruler = new s(), e = 0; e < o.length; e++) this.ruler.push(o[e][0], o[e][1]);for (this.ruler2 = new s(), e = 0; e < i.length; e++) this.ruler2.push(i[e][0], i[e][1]);\n      }var s = e(\"./ruler\"),\n          o = [[\"text\", e(\"./rules_inline/text\")], [\"newline\", e(\"./rules_inline/newline\")], [\"escape\", e(\"./rules_inline/escape\")], [\"backticks\", e(\"./rules_inline/backticks\")], [\"strikethrough\", e(\"./rules_inline/strikethrough\").tokenize], [\"emphasis\", e(\"./rules_inline/emphasis\").tokenize], [\"link\", e(\"./rules_inline/link\")], [\"image\", e(\"./rules_inline/image\")], [\"autolink\", e(\"./rules_inline/autolink\")], [\"html_inline\", e(\"./rules_inline/html_inline\")], [\"entity\", e(\"./rules_inline/entity\")]],\n          i = [[\"balance_pairs\", e(\"./rules_inline/balance_pairs\")], [\"strikethrough\", e(\"./rules_inline/strikethrough\").postProcess], [\"emphasis\", e(\"./rules_inline/emphasis\").postProcess], [\"text_collapse\", e(\"./rules_inline/text_collapse\")]];n.prototype.skipToken = function (e) {\n        var r,\n            t,\n            n = e.pos,\n            s = this.ruler.getRules(\"\"),\n            o = s.length,\n            i = e.md.options.maxNesting,\n            a = e.cache;if (\"undefined\" != typeof a[n]) return void (e.pos = a[n]);if (e.level < i) for (t = 0; t < o && (e.level++, r = s[t](e, !0), e.level--, !r); t++);else e.pos = e.posMax;r || e.pos++, a[n] = e.pos;\n      }, n.prototype.tokenize = function (e) {\n        for (var r, t, n = this.ruler.getRules(\"\"), s = n.length, o = e.posMax, i = e.md.options.maxNesting; e.pos < o;) {\n          if (e.level < i) for (t = 0; t < s && !(r = n[t](e, !1)); t++);if (r) {\n            if (e.pos >= o) break;\n          } else e.pending += e.src[e.pos++];\n        }e.pending && e.pushPending();\n      }, n.prototype.parse = function (e, r, t, n) {\n        var s,\n            o,\n            i,\n            a = new this.State(e, r, t, n);for (this.tokenize(a), o = this.ruler2.getRules(\"\"), i = o.length, s = 0; s < i; s++) o[s](a);\n      }, n.prototype.State = e(\"./rules_inline/state_inline\"), r.exports = n;\n    }, { \"./ruler\": 17, \"./rules_inline/autolink\": 37, \"./rules_inline/backticks\": 38, \"./rules_inline/balance_pairs\": 39, \"./rules_inline/emphasis\": 40, \"./rules_inline/entity\": 41, \"./rules_inline/escape\": 42, \"./rules_inline/html_inline\": 43, \"./rules_inline/image\": 44, \"./rules_inline/link\": 45, \"./rules_inline/newline\": 46, \"./rules_inline/state_inline\": 47, \"./rules_inline/strikethrough\": 48, \"./rules_inline/text\": 49, \"./rules_inline/text_collapse\": 50 }], 13: [function (e, r, t) {\n      \"use strict\";\n      r.exports = { options: { html: !0, xhtmlOut: !0, breaks: !1, langPrefix: \"language-\", linkify: !1, typographer: !1, quotes: \"\\u201c\\u201d\\u2018\\u2019\", highlight: null, maxNesting: 20 }, components: { core: { rules: [\"normalize\", \"block\", \"inline\"] }, block: { rules: [\"blockquote\", \"code\", \"fence\", \"heading\", \"hr\", \"html_block\", \"lheading\", \"list\", \"reference\", \"paragraph\"] }, inline: { rules: [\"autolink\", \"backticks\", \"emphasis\", \"entity\", \"escape\", \"html_inline\", \"image\", \"link\", \"newline\", \"text\"], rules2: [\"balance_pairs\", \"emphasis\", \"text_collapse\"] } } };\n    }, {}], 14: [function (e, r, t) {\n      \"use strict\";\n      r.exports = { options: { html: !1, xhtmlOut: !1, breaks: !1, langPrefix: \"language-\", linkify: !1, typographer: !1, quotes: \"\\u201c\\u201d\\u2018\\u2019\", highlight: null, maxNesting: 100 }, components: { core: {}, block: {}, inline: {} } };\n    }, {}], 15: [function (e, r, t) {\n      \"use strict\";\n      r.exports = { options: { html: !1, xhtmlOut: !1, breaks: !1, langPrefix: \"language-\", linkify: !1, typographer: !1, quotes: \"\\u201c\\u201d\\u2018\\u2019\", highlight: null, maxNesting: 20 }, components: { core: { rules: [\"normalize\", \"block\", \"inline\"] }, block: { rules: [\"paragraph\"] }, inline: { rules: [\"text\"], rules2: [\"balance_pairs\", \"text_collapse\"] } } };\n    }, {}], 16: [function (e, r, t) {\n      \"use strict\";\n      function n() {\n        this.rules = s({}, a);\n      }var s = e(\"./common/utils\").assign,\n          o = e(\"./common/utils\").unescapeAll,\n          i = e(\"./common/utils\").escapeHtml,\n          a = {};a.code_inline = function (e, r, t, n, s) {\n        var o = e[r];return \"<code\" + s.renderAttrs(o) + \">\" + i(e[r].content) + \"</code>\";\n      }, a.code_block = function (e, r, t, n, s) {\n        var o = e[r];return \"<pre\" + s.renderAttrs(o) + \"><code>\" + i(e[r].content) + \"</code></pre>\\n\";\n      }, a.fence = function (e, r, t, n, s) {\n        var a,\n            c,\n            l,\n            u,\n            p = e[r],\n            h = p.info ? o(p.info).trim() : \"\",\n            f = \"\";return h && (f = h.split(/\\s+/g)[0]), a = t.highlight ? t.highlight(p.content, f) || i(p.content) : i(p.content), 0 === a.indexOf(\"<pre\") ? a + \"\\n\" : h ? (c = p.attrIndex(\"class\"), l = p.attrs ? p.attrs.slice() : [], c < 0 ? l.push([\"class\", t.langPrefix + f]) : l[c][1] += \" \" + t.langPrefix + f, u = { attrs: l }, \"<pre><code\" + s.renderAttrs(u) + \">\" + a + \"</code></pre>\\n\") : \"<pre><code\" + s.renderAttrs(p) + \">\" + a + \"</code></pre>\\n\";\n      }, a.image = function (e, r, t, n, s) {\n        var o = e[r];return o.attrs[o.attrIndex(\"alt\")][1] = s.renderInlineAsText(o.children, t, n), s.renderToken(e, r, t);\n      }, a.hardbreak = function (e, r, t) {\n        return t.xhtmlOut ? \"<br />\\n\" : \"<br>\\n\";\n      }, a.softbreak = function (e, r, t) {\n        return t.breaks ? t.xhtmlOut ? \"<br />\\n\" : \"<br>\\n\" : \"\\n\";\n      }, a.text = function (e, r) {\n        return i(e[r].content);\n      }, a.html_block = function (e, r) {\n        return e[r].content;\n      }, a.html_inline = function (e, r) {\n        return e[r].content;\n      }, n.prototype.renderAttrs = function (e) {\n        var r, t, n;if (!e.attrs) return \"\";for (n = \"\", r = 0, t = e.attrs.length; r < t; r++) n += \" \" + i(e.attrs[r][0]) + '=\"' + i(e.attrs[r][1]) + '\"';return n;\n      }, n.prototype.renderToken = function (e, r, t) {\n        var n,\n            s = \"\",\n            o = !1,\n            i = e[r];return i.hidden ? \"\" : (i.block && i.nesting !== -1 && r && e[r - 1].hidden && (s += \"\\n\"), s += (i.nesting === -1 ? \"</\" : \"<\") + i.tag, s += this.renderAttrs(i), 0 === i.nesting && t.xhtmlOut && (s += \" /\"), i.block && (o = !0, 1 === i.nesting && r + 1 < e.length && (n = e[r + 1], \"inline\" === n.type || n.hidden ? o = !1 : n.nesting === -1 && n.tag === i.tag && (o = !1))), s += o ? \">\\n\" : \">\");\n      }, n.prototype.renderInline = function (e, r, t) {\n        for (var n, s = \"\", o = this.rules, i = 0, a = e.length; i < a; i++) n = e[i].type, s += \"undefined\" != typeof o[n] ? o[n](e, i, r, t, this) : this.renderToken(e, i, r);return s;\n      }, n.prototype.renderInlineAsText = function (e, r, t) {\n        for (var n = \"\", s = 0, o = e.length; s < o; s++) \"text\" === e[s].type ? n += e[s].content : \"image\" === e[s].type && (n += this.renderInlineAsText(e[s].children, r, t));return n;\n      }, n.prototype.render = function (e, r, t) {\n        var n,\n            s,\n            o,\n            i = \"\",\n            a = this.rules;for (n = 0, s = e.length; n < s; n++) o = e[n].type, i += \"inline\" === o ? this.renderInline(e[n].children, r, t) : \"undefined\" != typeof a[o] ? a[e[n].type](e, n, r, t, this) : this.renderToken(e, n, r, t);return i;\n      }, r.exports = n;\n    }, { \"./common/utils\": 4 }], 17: [function (e, r, t) {\n      \"use strict\";\n      function n() {\n        this.__rules__ = [], this.__cache__ = null;\n      }n.prototype.__find__ = function (e) {\n        for (var r = 0; r < this.__rules__.length; r++) if (this.__rules__[r].name === e) return r;return -1;\n      }, n.prototype.__compile__ = function () {\n        var e = this,\n            r = [\"\"];e.__rules__.forEach(function (e) {\n          e.enabled && e.alt.forEach(function (e) {\n            r.indexOf(e) < 0 && r.push(e);\n          });\n        }), e.__cache__ = {}, r.forEach(function (r) {\n          e.__cache__[r] = [], e.__rules__.forEach(function (t) {\n            t.enabled && (r && t.alt.indexOf(r) < 0 || e.__cache__[r].push(t.fn));\n          });\n        });\n      }, n.prototype.at = function (e, r, t) {\n        var n = this.__find__(e),\n            s = t || {};if (n === -1) throw new Error(\"Parser rule not found: \" + e);this.__rules__[n].fn = r, this.__rules__[n].alt = s.alt || [], this.__cache__ = null;\n      }, n.prototype.before = function (e, r, t, n) {\n        var s = this.__find__(e),\n            o = n || {};if (s === -1) throw new Error(\"Parser rule not found: \" + e);this.__rules__.splice(s, 0, { name: r, enabled: !0, fn: t, alt: o.alt || [] }), this.__cache__ = null;\n      }, n.prototype.after = function (e, r, t, n) {\n        var s = this.__find__(e),\n            o = n || {};if (s === -1) throw new Error(\"Parser rule not found: \" + e);this.__rules__.splice(s + 1, 0, { name: r, enabled: !0, fn: t, alt: o.alt || [] }), this.__cache__ = null;\n      }, n.prototype.push = function (e, r, t) {\n        var n = t || {};this.__rules__.push({ name: e, enabled: !0, fn: r, alt: n.alt || [] }), this.__cache__ = null;\n      }, n.prototype.enable = function (e, r) {\n        Array.isArray(e) || (e = [e]);var t = [];return e.forEach(function (e) {\n          var n = this.__find__(e);if (n < 0) {\n            if (r) return;throw new Error(\"Rules manager: invalid rule name \" + e);\n          }this.__rules__[n].enabled = !0, t.push(e);\n        }, this), this.__cache__ = null, t;\n      }, n.prototype.enableOnly = function (e, r) {\n        Array.isArray(e) || (e = [e]), this.__rules__.forEach(function (e) {\n          e.enabled = !1;\n        }), this.enable(e, r);\n      }, n.prototype.disable = function (e, r) {\n        Array.isArray(e) || (e = [e]);var t = [];return e.forEach(function (e) {\n          var n = this.__find__(e);if (n < 0) {\n            if (r) return;throw new Error(\"Rules manager: invalid rule name \" + e);\n          }this.__rules__[n].enabled = !1, t.push(e);\n        }, this), this.__cache__ = null, t;\n      }, n.prototype.getRules = function (e) {\n        return null === this.__cache__ && this.__compile__(), this.__cache__[e] || [];\n      }, r.exports = n;\n    }, {}], 18: [function (e, r, t) {\n      \"use strict\";\n      var n = e(\"../common/utils\").isSpace;r.exports = function (e, r, t, s) {\n        var o,\n            i,\n            a,\n            c,\n            l,\n            u,\n            p,\n            h,\n            f,\n            d,\n            m,\n            _,\n            g,\n            b,\n            k,\n            v,\n            y,\n            x,\n            C,\n            A = e.bMarks[r] + e.tShift[r],\n            w = e.eMarks[r];if (62 !== e.src.charCodeAt(A++)) return !1;if (s) return !0;for (_ = e.blkIndent, e.blkIndent = 0, c = f = e.sCount[r] + A - (e.bMarks[r] + e.tShift[r]), 32 === e.src.charCodeAt(A) ? (A++, c++, f++, o = !1, v = !0) : 9 === e.src.charCodeAt(A) ? (v = !0, (e.bsCount[r] + f) % 4 === 3 ? (A++, c++, f++, o = !1) : o = !0) : v = !1, d = [e.bMarks[r]], e.bMarks[r] = A; A < w && (i = e.src.charCodeAt(A), n(i));) 9 === i ? f += 4 - (f + e.bsCount[r] + (o ? 1 : 0)) % 4 : f++, A++;for (m = [e.bsCount[r]], e.bsCount[r] = e.sCount[r] + 1 + (v ? 1 : 0), u = A >= w, b = [e.sCount[r]], e.sCount[r] = f - c, k = [e.tShift[r]], e.tShift[r] = A - e.bMarks[r], x = e.md.block.ruler.getRules(\"blockquote\"), g = e.parentType, e.parentType = \"blockquote\", h = r + 1; h < t && !(e.sCount[h] < _) && (A = e.bMarks[h] + e.tShift[h], w = e.eMarks[h], !(A >= w)); h++) if (62 !== e.src.charCodeAt(A++)) {\n          if (u) break;for (y = !1, a = 0, l = x.length; a < l; a++) if (x[a](e, h, t, !0)) {\n            y = !0;break;\n          }if (y) break;d.push(e.bMarks[h]), m.push(e.bsCount[h]), k.push(e.tShift[h]), b.push(e.sCount[h]), e.sCount[h] = -1;\n        } else {\n          for (c = f = e.sCount[h] + A - (e.bMarks[h] + e.tShift[h]), 32 === e.src.charCodeAt(A) ? (A++, c++, f++, o = !1, v = !0) : 9 === e.src.charCodeAt(A) ? (v = !0, (e.bsCount[h] + f) % 4 === 3 ? (A++, c++, f++, o = !1) : o = !0) : v = !1, d.push(e.bMarks[h]), e.bMarks[h] = A; A < w && (i = e.src.charCodeAt(A), n(i));) 9 === i ? f += 4 - (f + e.bsCount[h] + (o ? 1 : 0)) % 4 : f++, A++;u = A >= w, m.push(e.bsCount[h]), e.bsCount[h] = e.sCount[h] + 1 + (v ? 1 : 0), b.push(e.sCount[h]), e.sCount[h] = f - c, k.push(e.tShift[h]), e.tShift[h] = A - e.bMarks[h];\n        }for (C = e.push(\"blockquote_open\", \"blockquote\", 1), C.markup = \">\", C.map = p = [r, 0], e.md.block.tokenize(e, r, h), C = e.push(\"blockquote_close\", \"blockquote\", -1), C.markup = \">\", e.parentType = g, p[1] = e.line, a = 0; a < k.length; a++) e.bMarks[a + r] = d[a], e.tShift[a + r] = k[a], e.sCount[a + r] = b[a], e.bsCount[a + r] = m[a];return e.blkIndent = _, !0;\n      };\n    }, { \"../common/utils\": 4 }], 19: [function (e, r, t) {\n      \"use strict\";\n      r.exports = function (e, r, t) {\n        var n, s, o;if (e.sCount[r] - e.blkIndent < 4) return !1;for (s = n = r + 1; n < t;) if (e.isEmpty(n)) n++;else {\n          if (!(e.sCount[n] - e.blkIndent >= 4)) break;n++, s = n;\n        }return e.line = s, o = e.push(\"code_block\", \"code\", 0), o.content = e.getLines(r, s, 4 + e.blkIndent, !0), o.map = [r, e.line], !0;\n      };\n    }, {}], 20: [function (e, r, t) {\n      \"use strict\";\n      r.exports = function (e, r, t, n) {\n        var s,\n            o,\n            i,\n            a,\n            c,\n            l,\n            u,\n            p = !1,\n            h = e.bMarks[r] + e.tShift[r],\n            f = e.eMarks[r];if (h + 3 > f) return !1;if (s = e.src.charCodeAt(h), 126 !== s && 96 !== s) return !1;if (c = h, h = e.skipChars(h, s), o = h - c, o < 3) return !1;if (u = e.src.slice(c, h), i = e.src.slice(h, f), i.indexOf(\"`\") >= 0) return !1;if (n) return !0;for (a = r; (a++, !(a >= t)) && (h = c = e.bMarks[a] + e.tShift[a], f = e.eMarks[a], !(h < f && e.sCount[a] < e.blkIndent));) if (e.src.charCodeAt(h) === s && !(e.sCount[a] - e.blkIndent >= 4 || (h = e.skipChars(h, s), h - c < o || (h = e.skipSpaces(h), h < f)))) {\n          p = !0;break;\n        }return o = e.sCount[r], e.line = a + (p ? 1 : 0), l = e.push(\"fence\", \"code\", 0), l.info = i, l.content = e.getLines(r + 1, a, o, !0), l.markup = u, l.map = [r, e.line], !0;\n      };\n    }, {}], 21: [function (e, r, t) {\n      \"use strict\";\n      var n = e(\"../common/utils\").isSpace;r.exports = function (e, r, t, s) {\n        var o,\n            i,\n            a,\n            c,\n            l = e.bMarks[r] + e.tShift[r],\n            u = e.eMarks[r];if (o = e.src.charCodeAt(l), 35 !== o || l >= u) return !1;for (i = 1, o = e.src.charCodeAt(++l); 35 === o && l < u && i <= 6;) i++, o = e.src.charCodeAt(++l);return !(i > 6 || l < u && !n(o)) && (!!s || (u = e.skipSpacesBack(u, l), a = e.skipCharsBack(u, 35, l), a > l && n(e.src.charCodeAt(a - 1)) && (u = a), e.line = r + 1, c = e.push(\"heading_open\", \"h\" + String(i), 1), c.markup = \"########\".slice(0, i), c.map = [r, e.line], c = e.push(\"inline\", \"\", 0), c.content = e.src.slice(l, u).trim(), c.map = [r, e.line], c.children = [], c = e.push(\"heading_close\", \"h\" + String(i), -1), c.markup = \"########\".slice(0, i), !0));\n      };\n    }, { \"../common/utils\": 4 }], 22: [function (e, r, t) {\n      \"use strict\";\n      var n = e(\"../common/utils\").isSpace;r.exports = function (e, r, t, s) {\n        var o,\n            i,\n            a,\n            c,\n            l = e.bMarks[r] + e.tShift[r],\n            u = e.eMarks[r];if (o = e.src.charCodeAt(l++), 42 !== o && 45 !== o && 95 !== o) return !1;for (i = 1; l < u;) {\n          if (a = e.src.charCodeAt(l++), a !== o && !n(a)) return !1;a === o && i++;\n        }return !(i < 3) && (!!s || (e.line = r + 1, c = e.push(\"hr\", \"hr\", 0), c.map = [r, e.line], c.markup = Array(i + 1).join(String.fromCharCode(o)), !0));\n      };\n    }, { \"../common/utils\": 4 }], 23: [function (e, r, t) {\n      \"use strict\";\n      var n = e(\"../common/html_blocks\"),\n          s = e(\"../common/html_re\").HTML_OPEN_CLOSE_TAG_RE,\n          o = [[/^<(script|pre|style)(?=(\\s|>|$))/i, /<\\/(script|pre|style)>/i, !0], [/^<!--/, /-->/, !0], [/^<\\?/, /\\?>/, !0], [/^<![A-Z]/, />/, !0], [/^<!\\[CDATA\\[/, /\\]\\]>/, !0], [new RegExp(\"^</?(\" + n.join(\"|\") + \")(?=(\\\\s|/?>|$))\", \"i\"), /^$/, !0], [new RegExp(s.source + \"\\\\s*$\"), /^$/, !1]];r.exports = function (e, r, t, n) {\n        var s,\n            i,\n            a,\n            c,\n            l = e.bMarks[r] + e.tShift[r],\n            u = e.eMarks[r];if (!e.md.options.html) return !1;if (60 !== e.src.charCodeAt(l)) return !1;for (c = e.src.slice(l, u), s = 0; s < o.length && !o[s][0].test(c); s++);if (s === o.length) return !1;if (n) return o[s][2];if (i = r + 1, !o[s][1].test(c)) for (; i < t && !(e.sCount[i] < e.blkIndent); i++) if (l = e.bMarks[i] + e.tShift[i], u = e.eMarks[i], c = e.src.slice(l, u), o[s][1].test(c)) {\n          0 !== c.length && i++;break;\n        }return e.line = i, a = e.push(\"html_block\", \"\", 0), a.map = [r, i], a.content = e.getLines(r, i, e.blkIndent, !0), !0;\n      };\n    }, { \"../common/html_blocks\": 2, \"../common/html_re\": 3 }], 24: [function (e, r, t) {\n      \"use strict\";\n      r.exports = function (e, r, t) {\n        var n,\n            s,\n            o,\n            i,\n            a,\n            c,\n            l,\n            u,\n            p,\n            h,\n            f = r + 1,\n            d = e.md.block.ruler.getRules(\"paragraph\");for (h = e.parentType, e.parentType = \"paragraph\"; f < t && !e.isEmpty(f); f++) if (!(e.sCount[f] - e.blkIndent > 3)) {\n          if (e.sCount[f] >= e.blkIndent && (c = e.bMarks[f] + e.tShift[f], l = e.eMarks[f], c < l && (p = e.src.charCodeAt(c), (45 === p || 61 === p) && (c = e.skipChars(c, p), c = e.skipSpaces(c), c >= l)))) {\n            u = 61 === p ? 1 : 2;break;\n          }if (!(e.sCount[f] < 0)) {\n            for (s = !1, o = 0, i = d.length; o < i; o++) if (d[o](e, f, t, !0)) {\n              s = !0;break;\n            }if (s) break;\n          }\n        }return !!u && (n = e.getLines(r, f, e.blkIndent, !1).trim(), e.line = f + 1, a = e.push(\"heading_open\", \"h\" + String(u), 1), a.markup = String.fromCharCode(p), a.map = [r, e.line], a = e.push(\"inline\", \"\", 0), a.content = n, a.map = [r, e.line - 1], a.children = [], a = e.push(\"heading_close\", \"h\" + String(u), -1), a.markup = String.fromCharCode(p), e.parentType = h, !0);\n      };\n    }, {}], 25: [function (e, r, t) {\n      \"use strict\";\n      function n(e, r) {\n        var t, n, s, o;return n = e.bMarks[r] + e.tShift[r], s = e.eMarks[r], t = e.src.charCodeAt(n++), 42 !== t && 45 !== t && 43 !== t ? -1 : n < s && (o = e.src.charCodeAt(n), !i(o)) ? -1 : n;\n      }function s(e, r) {\n        var t,\n            n = e.bMarks[r] + e.tShift[r],\n            s = n,\n            o = e.eMarks[r];if (s + 1 >= o) return -1;if (t = e.src.charCodeAt(s++), t < 48 || t > 57) return -1;for (;;) {\n          if (s >= o) return -1;t = e.src.charCodeAt(s++);{\n            if (!(t >= 48 && t <= 57)) {\n              if (41 === t || 46 === t) break;return -1;\n            }if (s - n >= 10) return -1;\n          }\n        }return s < o && (t = e.src.charCodeAt(s), !i(t)) ? -1 : s;\n      }function o(e, r) {\n        var t,\n            n,\n            s = e.level + 2;for (t = r + 2, n = e.tokens.length - 2; t < n; t++) e.tokens[t].level === s && \"paragraph_open\" === e.tokens[t].type && (e.tokens[t + 2].hidden = !0, e.tokens[t].hidden = !0, t += 2);\n      }var i = e(\"../common/utils\").isSpace;r.exports = function (e, r, t, a) {\n        var c,\n            l,\n            u,\n            p,\n            h,\n            f,\n            d,\n            m,\n            _,\n            g,\n            b,\n            k,\n            v,\n            y,\n            x,\n            C,\n            A,\n            w,\n            D,\n            q,\n            E,\n            S,\n            F,\n            L,\n            z,\n            T,\n            R,\n            M,\n            I = !1,\n            B = !0;if (a && \"paragraph\" === e.parentType && e.tShift[r] >= e.blkIndent && (I = !0), (F = s(e, r)) >= 0) {\n          if (d = !0, z = e.bMarks[r] + e.tShift[r], v = Number(e.src.substr(z, F - z - 1)), I && 1 !== v) return !1;\n        } else {\n          if (!((F = n(e, r)) >= 0)) return !1;d = !1;\n        }if (I && e.skipSpaces(F) >= e.eMarks[r]) return !1;if (k = e.src.charCodeAt(F - 1), a) return !0;for (b = e.tokens.length, d ? (M = e.push(\"ordered_list_open\", \"ol\", 1), 1 !== v && (M.attrs = [[\"start\", v]])) : M = e.push(\"bullet_list_open\", \"ul\", 1), M.map = g = [r, 0], M.markup = String.fromCharCode(k), x = r, L = !1, R = e.md.block.ruler.getRules(\"list\"), D = e.parentType, e.parentType = \"list\"; x < t;) {\n          for (S = F, y = e.eMarks[x], f = C = e.sCount[x] + F - (e.bMarks[r] + e.tShift[r]); S < y && (c = e.src.charCodeAt(S), i(c));) 9 === c ? C += 4 - (C + e.bsCount[x]) % 4 : C++, S++;if (l = S, h = l >= y ? 1 : C - f, h > 4 && (h = 1), p = f + h, M = e.push(\"list_item_open\", \"li\", 1), M.markup = String.fromCharCode(k), M.map = m = [r, 0], A = e.blkIndent, E = e.tight, q = e.tShift[r], w = e.sCount[r], e.blkIndent = p, e.tight = !0, e.tShift[r] = l - e.bMarks[r], e.sCount[r] = C, l >= y && e.isEmpty(r + 1) ? e.line = Math.min(e.line + 2, t) : e.md.block.tokenize(e, r, t, !0), e.tight && !L || (B = !1), L = e.line - r > 1 && e.isEmpty(e.line - 1), e.blkIndent = A, e.tShift[r] = q, e.sCount[r] = w, e.tight = E, M = e.push(\"list_item_close\", \"li\", -1), M.markup = String.fromCharCode(k), x = r = e.line, m[1] = x, l = e.bMarks[r], x >= t) break;if (e.sCount[x] < e.blkIndent) break;for (T = !1, u = 0, _ = R.length; u < _; u++) if (R[u](e, x, t, !0)) {\n            T = !0;break;\n          }if (T) break;if (d) {\n            if (F = s(e, x), F < 0) break;\n          } else if (F = n(e, x), F < 0) break;if (k !== e.src.charCodeAt(F - 1)) break;\n        }return M = d ? e.push(\"ordered_list_close\", \"ol\", -1) : e.push(\"bullet_list_close\", \"ul\", -1), M.markup = String.fromCharCode(k), g[1] = x, e.line = x, e.parentType = D, B && o(e, b), !0;\n      };\n    }, { \"../common/utils\": 4 }], 26: [function (e, r, t) {\n      \"use strict\";\n      r.exports = function (e, r) {\n        var t,\n            n,\n            s,\n            o,\n            i,\n            a,\n            c = r + 1,\n            l = e.md.block.ruler.getRules(\"paragraph\"),\n            u = e.lineMax;for (a = e.parentType, e.parentType = \"paragraph\"; c < u && !e.isEmpty(c); c++) if (!(e.sCount[c] - e.blkIndent > 3 || e.sCount[c] < 0)) {\n          for (n = !1, s = 0, o = l.length; s < o; s++) if (l[s](e, c, u, !0)) {\n            n = !0;break;\n          }if (n) break;\n        }return t = e.getLines(r, c, e.blkIndent, !1).trim(), e.line = c, i = e.push(\"paragraph_open\", \"p\", 1), i.map = [r, e.line], i = e.push(\"inline\", \"\", 0), i.content = t, i.map = [r, e.line], i.children = [], i = e.push(\"paragraph_close\", \"p\", -1), e.parentType = a, !0;\n      };\n    }, {}], 27: [function (e, r, t) {\n      \"use strict\";\n      var n = e(\"../common/utils\").normalizeReference,\n          s = e(\"../common/utils\").isSpace;r.exports = function (e, r, t, o) {\n        var i,\n            a,\n            c,\n            l,\n            u,\n            p,\n            h,\n            f,\n            d,\n            m,\n            _,\n            g,\n            b,\n            k,\n            v,\n            y,\n            x = 0,\n            C = e.bMarks[r] + e.tShift[r],\n            A = e.eMarks[r],\n            w = r + 1;if (91 !== e.src.charCodeAt(C)) return !1;for (; ++C < A;) if (93 === e.src.charCodeAt(C) && 92 !== e.src.charCodeAt(C - 1)) {\n          if (C + 1 === A) return !1;if (58 !== e.src.charCodeAt(C + 1)) return !1;break;\n        }for (l = e.lineMax, v = e.md.block.ruler.getRules(\"reference\"), m = e.parentType, e.parentType = \"reference\"; w < l && !e.isEmpty(w); w++) if (!(e.sCount[w] - e.blkIndent > 3 || e.sCount[w] < 0)) {\n          for (k = !1, p = 0, h = v.length; p < h; p++) if (v[p](e, w, l, !0)) {\n            k = !0;break;\n          }if (k) break;\n        }for (b = e.getLines(r, w, e.blkIndent, !1).trim(), A = b.length, C = 1; C < A; C++) {\n          if (i = b.charCodeAt(C), 91 === i) return !1;if (93 === i) {\n            d = C;break;\n          }10 === i ? x++ : 92 === i && (C++, C < A && 10 === b.charCodeAt(C) && x++);\n        }if (d < 0 || 58 !== b.charCodeAt(d + 1)) return !1;for (C = d + 2; C < A; C++) if (i = b.charCodeAt(C), 10 === i) x++;else if (!s(i)) break;if (_ = e.md.helpers.parseLinkDestination(b, C, A), !_.ok) return !1;if (u = e.md.normalizeLink(_.str), !e.md.validateLink(u)) return !1;for (C = _.pos, x += _.lines, a = C, c = x, g = C; C < A; C++) if (i = b.charCodeAt(C), 10 === i) x++;else if (!s(i)) break;for (_ = e.md.helpers.parseLinkTitle(b, C, A), C < A && g !== C && _.ok ? (y = _.str, C = _.pos, x += _.lines) : (y = \"\", C = a, x = c); C < A && (i = b.charCodeAt(C), s(i));) C++;if (C < A && 10 !== b.charCodeAt(C) && y) for (y = \"\", C = a, x = c; C < A && (i = b.charCodeAt(C), s(i));) C++;return !(C < A && 10 !== b.charCodeAt(C)) && !!(f = n(b.slice(1, d))) && (!!o || (\"undefined\" == typeof e.env.references && (e.env.references = {}), \"undefined\" == typeof e.env.references[f] && (e.env.references[f] = { title: y, href: u }), e.parentType = m, e.line = r + x + 1, !0));\n      };\n    }, { \"../common/utils\": 4 }], 28: [function (e, r, t) {\n      \"use strict\";\n      function n(e, r, t, n) {\n        var s, i, a, c, l, u, p, h;for (this.src = e, this.md = r, this.env = t, this.tokens = n, this.bMarks = [], this.eMarks = [], this.tShift = [], this.sCount = [], this.bsCount = [], this.blkIndent = 0, this.line = 0, this.lineMax = 0, this.tight = !1, this.ddIndent = -1, this.parentType = \"root\", this.level = 0, this.result = \"\", i = this.src, h = !1, a = c = u = p = 0, l = i.length; c < l; c++) {\n          if (s = i.charCodeAt(c), !h) {\n            if (o(s)) {\n              u++, 9 === s ? p += 4 - p % 4 : p++;continue;\n            }h = !0;\n          }10 !== s && c !== l - 1 || (10 !== s && c++, this.bMarks.push(a), this.eMarks.push(c), this.tShift.push(u), this.sCount.push(p), this.bsCount.push(0), h = !1, u = 0, p = 0, a = c + 1);\n        }this.bMarks.push(i.length), this.eMarks.push(i.length), this.tShift.push(0), this.sCount.push(0), this.bsCount.push(0), this.lineMax = this.bMarks.length - 1;\n      }var s = e(\"../token\"),\n          o = e(\"../common/utils\").isSpace;n.prototype.push = function (e, r, t) {\n        var n = new s(e, r, t);return n.block = !0, t < 0 && this.level--, n.level = this.level, t > 0 && this.level++, this.tokens.push(n), n;\n      }, n.prototype.isEmpty = function (e) {\n        return this.bMarks[e] + this.tShift[e] >= this.eMarks[e];\n      }, n.prototype.skipEmptyLines = function (e) {\n        for (var r = this.lineMax; e < r && !(this.bMarks[e] + this.tShift[e] < this.eMarks[e]); e++);return e;\n      }, n.prototype.skipSpaces = function (e) {\n        for (var r, t = this.src.length; e < t && (r = this.src.charCodeAt(e), o(r)); e++);return e;\n      }, n.prototype.skipSpacesBack = function (e, r) {\n        if (e <= r) return e;for (; e > r;) if (!o(this.src.charCodeAt(--e))) return e + 1;return e;\n      }, n.prototype.skipChars = function (e, r) {\n        for (var t = this.src.length; e < t && this.src.charCodeAt(e) === r; e++);return e;\n      }, n.prototype.skipCharsBack = function (e, r, t) {\n        if (e <= t) return e;for (; e > t;) if (r !== this.src.charCodeAt(--e)) return e + 1;return e;\n      }, n.prototype.getLines = function (e, r, t, n) {\n        var s,\n            i,\n            a,\n            c,\n            l,\n            u,\n            p,\n            h = e;if (e >= r) return \"\";for (u = new Array(r - e), s = 0; h < r; h++, s++) {\n          for (i = 0, p = c = this.bMarks[h], l = h + 1 < r || n ? this.eMarks[h] + 1 : this.eMarks[h]; c < l && i < t;) {\n            if (a = this.src.charCodeAt(c), o(a)) 9 === a ? i += 4 - (i + this.bsCount[h]) % 4 : i++;else {\n              if (!(c - p < this.tShift[h])) break;i++;\n            }c++;\n          }i > t ? u[s] = new Array(i - t + 1).join(\" \") + this.src.slice(c, l) : u[s] = this.src.slice(c, l);\n        }return u.join(\"\");\n      }, n.prototype.Token = s, r.exports = n;\n    }, { \"../common/utils\": 4, \"../token\": 51 }], 29: [function (e, r, t) {\n      \"use strict\";\n      function n(e, r) {\n        var t = e.bMarks[r] + e.blkIndent,\n            n = e.eMarks[r];\n        return e.src.substr(t, n - t);\n      }function s(e) {\n        var r,\n            t = [],\n            n = 0,\n            s = e.length,\n            o = 0,\n            i = 0,\n            a = !1,\n            c = 0;for (r = e.charCodeAt(n); n < s;) 96 === r && o % 2 === 0 ? (a = !a, c = n) : 124 !== r || o % 2 !== 0 || a ? 92 === r ? o++ : o = 0 : (t.push(e.substring(i, n)), i = n + 1), n++, n === s && a && (a = !1, n = c + 1), r = e.charCodeAt(n);return t.push(e.substring(i)), t;\n      }var o = e(\"../common/utils\").isSpace;r.exports = function (e, r, t, i) {\n        var a, c, l, u, p, h, f, d, m, _, g, b;if (r + 2 > t) return !1;if (p = r + 1, e.sCount[p] < e.blkIndent) return !1;if (l = e.bMarks[p] + e.tShift[p], l >= e.eMarks[p]) return !1;if (a = e.src.charCodeAt(l++), 124 !== a && 45 !== a && 58 !== a) return !1;for (; l < e.eMarks[p];) {\n          if (a = e.src.charCodeAt(l), 124 !== a && 45 !== a && 58 !== a && !o(a)) return !1;l++;\n        }for (c = n(e, r + 1), h = c.split(\"|\"), m = [], u = 0; u < h.length; u++) {\n          if (_ = h[u].trim(), !_) {\n            if (0 === u || u === h.length - 1) continue;return !1;\n          }if (!/^:?-+:?$/.test(_)) return !1;58 === _.charCodeAt(_.length - 1) ? m.push(58 === _.charCodeAt(0) ? \"center\" : \"right\") : 58 === _.charCodeAt(0) ? m.push(\"left\") : m.push(\"\");\n        }if (c = n(e, r).trim(), c.indexOf(\"|\") === -1) return !1;if (h = s(c.replace(/^\\||\\|$/g, \"\")), f = h.length, f > m.length) return !1;if (i) return !0;for (d = e.push(\"table_open\", \"table\", 1), d.map = g = [r, 0], d = e.push(\"thead_open\", \"thead\", 1), d.map = [r, r + 1], d = e.push(\"tr_open\", \"tr\", 1), d.map = [r, r + 1], u = 0; u < h.length; u++) d = e.push(\"th_open\", \"th\", 1), d.map = [r, r + 1], m[u] && (d.attrs = [[\"style\", \"text-align:\" + m[u]]]), d = e.push(\"inline\", \"\", 0), d.content = h[u].trim(), d.map = [r, r + 1], d.children = [], d = e.push(\"th_close\", \"th\", -1);for (d = e.push(\"tr_close\", \"tr\", -1), d = e.push(\"thead_close\", \"thead\", -1), d = e.push(\"tbody_open\", \"tbody\", 1), d.map = b = [r + 2, 0], p = r + 2; p < t && !(e.sCount[p] < e.blkIndent) && (c = n(e, p), c.indexOf(\"|\") !== -1); p++) {\n          for (h = s(c.replace(/^\\||\\|\\s*$/g, \"\")), d = e.push(\"tr_open\", \"tr\", 1), u = 0; u < f; u++) d = e.push(\"td_open\", \"td\", 1), m[u] && (d.attrs = [[\"style\", \"text-align:\" + m[u]]]), d = e.push(\"inline\", \"\", 0), d.content = h[u] ? h[u].trim() : \"\", d.children = [], d = e.push(\"td_close\", \"td\", -1);d = e.push(\"tr_close\", \"tr\", -1);\n        }return d = e.push(\"tbody_close\", \"tbody\", -1), d = e.push(\"table_close\", \"table\", -1), g[1] = b[1] = p, e.line = p, !0;\n      };\n    }, { \"../common/utils\": 4 }], 30: [function (e, r, t) {\n      \"use strict\";\n      r.exports = function (e) {\n        var r;e.inlineMode ? (r = new e.Token(\"inline\", \"\", 0), r.content = e.src, r.map = [0, 1], r.children = [], e.tokens.push(r)) : e.md.block.parse(e.src, e.md, e.env, e.tokens);\n      };\n    }, {}], 31: [function (e, r, t) {\n      \"use strict\";\n      r.exports = function (e) {\n        var r,\n            t,\n            n,\n            s = e.tokens;for (t = 0, n = s.length; t < n; t++) r = s[t], \"inline\" === r.type && e.md.inline.parse(r.content, e.md, e.env, r.children);\n      };\n    }, {}], 32: [function (e, r, t) {\n      \"use strict\";\n      function n(e) {\n        return (/^<a[>\\s]/i.test(e)\n        );\n      }function s(e) {\n        return (/^<\\/a\\s*>/i.test(e)\n        );\n      }var o = e(\"../common/utils\").arrayReplaceAt;r.exports = function (e) {\n        var r,\n            t,\n            i,\n            a,\n            c,\n            l,\n            u,\n            p,\n            h,\n            f,\n            d,\n            m,\n            _,\n            g,\n            b,\n            k,\n            v,\n            y = e.tokens;if (e.md.options.linkify) for (t = 0, i = y.length; t < i; t++) if (\"inline\" === y[t].type && e.md.linkify.pretest(y[t].content)) for (a = y[t].children, _ = 0, r = a.length - 1; r >= 0; r--) if (l = a[r], \"link_close\" !== l.type) {\n          if (\"html_inline\" === l.type && (n(l.content) && _ > 0 && _--, s(l.content) && _++), !(_ > 0) && \"text\" === l.type && e.md.linkify.test(l.content)) {\n            for (h = l.content, v = e.md.linkify.match(h), u = [], m = l.level, d = 0, p = 0; p < v.length; p++) g = v[p].url, b = e.md.normalizeLink(g), e.md.validateLink(b) && (k = v[p].text, k = v[p].schema ? \"mailto:\" !== v[p].schema || /^mailto:/i.test(k) ? e.md.normalizeLinkText(k) : e.md.normalizeLinkText(\"mailto:\" + k).replace(/^mailto:/, \"\") : e.md.normalizeLinkText(\"http://\" + k).replace(/^http:\\/\\//, \"\"), f = v[p].index, f > d && (c = new e.Token(\"text\", \"\", 0), c.content = h.slice(d, f), c.level = m, u.push(c)), c = new e.Token(\"link_open\", \"a\", 1), c.attrs = [[\"href\", b]], c.level = m++, c.markup = \"linkify\", c.info = \"auto\", u.push(c), c = new e.Token(\"text\", \"\", 0), c.content = k, c.level = m, u.push(c), c = new e.Token(\"link_close\", \"a\", -1), c.level = --m, c.markup = \"linkify\", c.info = \"auto\", u.push(c), d = v[p].lastIndex);d < h.length && (c = new e.Token(\"text\", \"\", 0), c.content = h.slice(d), c.level = m, u.push(c)), y[t].children = a = o(a, r, u);\n          }\n        } else for (r--; a[r].level !== l.level && \"link_open\" !== a[r].type;) r--;\n      };\n    }, { \"../common/utils\": 4 }], 33: [function (e, r, t) {\n      \"use strict\";\n      var n = /\\r[\\n\\u0085]?|[\\u2424\\u2028\\u0085]/g,\n          s = /\\u0000/g;r.exports = function (e) {\n        var r;r = e.src.replace(n, \"\\n\"), r = r.replace(s, \"\\ufffd\"), e.src = r;\n      };\n    }, {}], 34: [function (e, r, t) {\n      \"use strict\";\n      function n(e, r) {\n        return l[r.toLowerCase()];\n      }function s(e) {\n        var r,\n            t,\n            s = 0;for (r = e.length - 1; r >= 0; r--) t = e[r], \"text\" !== t.type || s || (t.content = t.content.replace(c, n)), \"link_open\" === t.type && \"auto\" === t.info && s--, \"link_close\" === t.type && \"auto\" === t.info && s++;\n      }function o(e) {\n        var r,\n            t,\n            n = 0;for (r = e.length - 1; r >= 0; r--) t = e[r], \"text\" !== t.type || n || i.test(t.content) && (t.content = t.content.replace(/\\+-/g, \"\\xb1\").replace(/\\.{2,}/g, \"\\u2026\").replace(/([?!])\\u2026/g, \"$1..\").replace(/([?!]){4,}/g, \"$1$1$1\").replace(/,{2,}/g, \",\").replace(/(^|[^-])---([^-]|$)/gm, \"$1\\u2014$2\").replace(/(^|\\s)--(\\s|$)/gm, \"$1\\u2013$2\").replace(/(^|[^-\\s])--([^-\\s]|$)/gm, \"$1\\u2013$2\")), \"link_open\" === t.type && \"auto\" === t.info && n--, \"link_close\" === t.type && \"auto\" === t.info && n++;\n      }var i = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/,\n          a = /\\((c|tm|r|p)\\)/i,\n          c = /\\((c|tm|r|p)\\)/gi,\n          l = { c: \"\\xa9\", r: \"\\xae\", p: \"\\xa7\", tm: \"\\u2122\" };r.exports = function (e) {\n        var r;if (e.md.options.typographer) for (r = e.tokens.length - 1; r >= 0; r--) \"inline\" === e.tokens[r].type && (a.test(e.tokens[r].content) && s(e.tokens[r].children), i.test(e.tokens[r].content) && o(e.tokens[r].children));\n      };\n    }, {}], 35: [function (e, r, t) {\n      \"use strict\";\n      function n(e, r, t) {\n        return e.substr(0, r) + t + e.substr(r + 1);\n      }function s(e, r) {\n        var t, s, c, p, h, f, d, m, _, g, b, k, v, y, x, C, A, w, D, q, E;for (D = [], t = 0; t < e.length; t++) {\n          for (s = e[t], d = e[t].level, A = D.length - 1; A >= 0 && !(D[A].level <= d); A--);if (D.length = A + 1, \"text\" === s.type) {\n            c = s.content, h = 0, f = c.length;e: for (; h < f && (l.lastIndex = h, p = l.exec(c));) {\n              if (x = C = !0, h = p.index + 1, w = \"'\" === p[0], _ = 32, p.index - 1 >= 0) _ = c.charCodeAt(p.index - 1);else for (A = t - 1; A >= 0; A--) if (\"text\" === e[A].type) {\n                _ = e[A].content.charCodeAt(e[A].content.length - 1);break;\n              }if (g = 32, h < f) g = c.charCodeAt(h);else for (A = t + 1; A < e.length; A++) if (\"text\" === e[A].type) {\n                g = e[A].content.charCodeAt(0);break;\n              }if (b = a(_) || i(String.fromCharCode(_)), k = a(g) || i(String.fromCharCode(g)), v = o(_), y = o(g), y ? x = !1 : k && (v || b || (x = !1)), v ? C = !1 : b && (y || k || (C = !1)), 34 === g && '\"' === p[0] && _ >= 48 && _ <= 57 && (C = x = !1), x && C && (x = !1, C = k), x || C) {\n                if (C) for (A = D.length - 1; A >= 0 && (m = D[A], !(D[A].level < d)); A--) if (m.single === w && D[A].level === d) {\n                  m = D[A], w ? (q = r.md.options.quotes[2], E = r.md.options.quotes[3]) : (q = r.md.options.quotes[0], E = r.md.options.quotes[1]), s.content = n(s.content, p.index, E), e[m.token].content = n(e[m.token].content, m.pos, q), h += E.length - 1, m.token === t && (h += q.length - 1), c = s.content, f = c.length, D.length = A;continue e;\n                }x ? D.push({ token: t, pos: p.index, single: w, level: d }) : C && w && (s.content = n(s.content, p.index, u));\n              } else w && (s.content = n(s.content, p.index, u));\n            }\n          }\n        }\n      }var o = e(\"../common/utils\").isWhiteSpace,\n          i = e(\"../common/utils\").isPunctChar,\n          a = e(\"../common/utils\").isMdAsciiPunct,\n          c = /['\"]/,\n          l = /['\"]/g,\n          u = \"\\u2019\";r.exports = function (e) {\n        var r;if (e.md.options.typographer) for (r = e.tokens.length - 1; r >= 0; r--) \"inline\" === e.tokens[r].type && c.test(e.tokens[r].content) && s(e.tokens[r].children, e);\n      };\n    }, { \"../common/utils\": 4 }], 36: [function (e, r, t) {\n      \"use strict\";\n      function n(e, r, t) {\n        this.src = e, this.env = t, this.tokens = [], this.inlineMode = !1, this.md = r;\n      }var s = e(\"../token\");n.prototype.Token = s, r.exports = n;\n    }, { \"../token\": 51 }], 37: [function (e, r, t) {\n      \"use strict\";\n      var n = /^<([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/,\n          s = /^<([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)>/;r.exports = function (e, r) {\n        var t,\n            o,\n            i,\n            a,\n            c,\n            l,\n            u = e.pos;return 60 === e.src.charCodeAt(u) && (t = e.src.slice(u), !(t.indexOf(\">\") < 0) && (s.test(t) ? (o = t.match(s), a = o[0].slice(1, -1), c = e.md.normalizeLink(a), !!e.md.validateLink(c) && (r || (l = e.push(\"link_open\", \"a\", 1), l.attrs = [[\"href\", c]], l.markup = \"autolink\", l.info = \"auto\", l = e.push(\"text\", \"\", 0), l.content = e.md.normalizeLinkText(a), l = e.push(\"link_close\", \"a\", -1), l.markup = \"autolink\", l.info = \"auto\"), e.pos += o[0].length, !0)) : !!n.test(t) && (i = t.match(n), a = i[0].slice(1, -1), c = e.md.normalizeLink(\"mailto:\" + a), !!e.md.validateLink(c) && (r || (l = e.push(\"link_open\", \"a\", 1), l.attrs = [[\"href\", c]], l.markup = \"autolink\", l.info = \"auto\", l = e.push(\"text\", \"\", 0), l.content = e.md.normalizeLinkText(a), l = e.push(\"link_close\", \"a\", -1), l.markup = \"autolink\", l.info = \"auto\"), e.pos += i[0].length, !0))));\n      };\n    }, {}], 38: [function (e, r, t) {\n      \"use strict\";\n      r.exports = function (e, r) {\n        var t,\n            n,\n            s,\n            o,\n            i,\n            a,\n            c = e.pos,\n            l = e.src.charCodeAt(c);if (96 !== l) return !1;for (t = c, c++, n = e.posMax; c < n && 96 === e.src.charCodeAt(c);) c++;for (s = e.src.slice(t, c), o = i = c; (o = e.src.indexOf(\"`\", i)) !== -1;) {\n          for (i = o + 1; i < n && 96 === e.src.charCodeAt(i);) i++;if (i - o === s.length) return r || (a = e.push(\"code_inline\", \"code\", 0), a.markup = s, a.content = e.src.slice(c, o).replace(/[ \\n]+/g, \" \").trim()), e.pos = i, !0;\n        }return r || (e.pending += s), e.pos += s.length, !0;\n      };\n    }, {}], 39: [function (e, r, t) {\n      \"use strict\";\n      r.exports = function (e) {\n        var r,\n            t,\n            n,\n            s,\n            o = e.delimiters,\n            i = e.delimiters.length;for (r = 0; r < i; r++) if (n = o[r], n.close) for (t = r - n.jump - 1; t >= 0;) {\n          if (s = o[t], s.open && s.marker === n.marker && s.end < 0 && s.level === n.level) {\n            var a = (s.close || n.open) && \"undefined\" != typeof s.length && \"undefined\" != typeof n.length && (s.length + n.length) % 3 === 0;if (!a) {\n              n.jump = r - t, n.open = !1, s.end = r, s.jump = 0;break;\n            }\n          }t -= s.jump + 1;\n        }\n      };\n    }, {}], 40: [function (e, r, t) {\n      \"use strict\";\n      r.exports.tokenize = function (e, r) {\n        var t,\n            n,\n            s,\n            o = e.pos,\n            i = e.src.charCodeAt(o);if (r) return !1;if (95 !== i && 42 !== i) return !1;for (n = e.scanDelims(e.pos, 42 === i), t = 0; t < n.length; t++) s = e.push(\"text\", \"\", 0), s.content = String.fromCharCode(i), e.delimiters.push({ marker: i, length: n.length, jump: t, token: e.tokens.length - 1, level: e.level, end: -1, open: n.can_open, close: n.can_close });return e.pos += n.length, !0;\n      }, r.exports.postProcess = function (e) {\n        var r,\n            t,\n            n,\n            s,\n            o,\n            i,\n            a = e.delimiters,\n            c = e.delimiters.length;for (r = 0; r < c; r++) t = a[r], 95 !== t.marker && 42 !== t.marker || t.end !== -1 && (n = a[t.end], i = r + 1 < c && a[r + 1].end === t.end - 1 && a[r + 1].token === t.token + 1 && a[t.end - 1].token === n.token - 1 && a[r + 1].marker === t.marker, o = String.fromCharCode(t.marker), s = e.tokens[t.token], s.type = i ? \"strong_open\" : \"em_open\", s.tag = i ? \"strong\" : \"em\", s.nesting = 1, s.markup = i ? o + o : o, s.content = \"\", s = e.tokens[n.token], s.type = i ? \"strong_close\" : \"em_close\", s.tag = i ? \"strong\" : \"em\", s.nesting = -1, s.markup = i ? o + o : o, s.content = \"\", i && (e.tokens[a[r + 1].token].content = \"\", e.tokens[a[t.end - 1].token].content = \"\", r++));\n      };\n    }, {}], 41: [function (e, r, t) {\n      \"use strict\";\n      var n = e(\"../common/entities\"),\n          s = e(\"../common/utils\").has,\n          o = e(\"../common/utils\").isValidEntityCode,\n          i = e(\"../common/utils\").fromCodePoint,\n          a = /^&#((?:x[a-f0-9]{1,8}|[0-9]{1,8}));/i,\n          c = /^&([a-z][a-z0-9]{1,31});/i;r.exports = function (e, r) {\n        var t,\n            l,\n            u,\n            p = e.pos,\n            h = e.posMax;if (38 !== e.src.charCodeAt(p)) return !1;if (p + 1 < h) if (t = e.src.charCodeAt(p + 1), 35 === t) {\n          if (u = e.src.slice(p).match(a)) return r || (l = \"x\" === u[1][0].toLowerCase() ? parseInt(u[1].slice(1), 16) : parseInt(u[1], 10), e.pending += i(o(l) ? l : 65533)), e.pos += u[0].length, !0;\n        } else if (u = e.src.slice(p).match(c), u && s(n, u[1])) return r || (e.pending += n[u[1]]), e.pos += u[0].length, !0;return r || (e.pending += \"&\"), e.pos++, !0;\n      };\n    }, { \"../common/entities\": 1, \"../common/utils\": 4 }], 42: [function (e, r, t) {\n      \"use strict\";\n      for (var n = e(\"../common/utils\").isSpace, s = [], o = 0; o < 256; o++) s.push(0);\"\\\\!\\\"#$%&'()*+,./:;<=>?@[]^_`{|}~-\".split(\"\").forEach(function (e) {\n        s[e.charCodeAt(0)] = 1;\n      }), r.exports = function (e, r) {\n        var t,\n            o = e.pos,\n            i = e.posMax;if (92 !== e.src.charCodeAt(o)) return !1;if (o++, o < i) {\n          if (t = e.src.charCodeAt(o), t < 256 && 0 !== s[t]) return r || (e.pending += e.src[o]), e.pos += 2, !0;if (10 === t) {\n            for (r || e.push(\"hardbreak\", \"br\", 0), o++; o < i && (t = e.src.charCodeAt(o), n(t));) o++;return e.pos = o, !0;\n          }\n        }return r || (e.pending += \"\\\\\"), e.pos++, !0;\n      };\n    }, { \"../common/utils\": 4 }], 43: [function (e, r, t) {\n      \"use strict\";\n      function n(e) {\n        var r = 32 | e;return r >= 97 && r <= 122;\n      }var s = e(\"../common/html_re\").HTML_TAG_RE;r.exports = function (e, r) {\n        var t,\n            o,\n            i,\n            a,\n            c = e.pos;return !!e.md.options.html && (i = e.posMax, !(60 !== e.src.charCodeAt(c) || c + 2 >= i) && (t = e.src.charCodeAt(c + 1), !(33 !== t && 63 !== t && 47 !== t && !n(t)) && !!(o = e.src.slice(c).match(s)) && (r || (a = e.push(\"html_inline\", \"\", 0), a.content = e.src.slice(c, c + o[0].length)), e.pos += o[0].length, !0)));\n      };\n    }, { \"../common/html_re\": 3 }], 44: [function (e, r, t) {\n      \"use strict\";\n      var n = e(\"../common/utils\").normalizeReference,\n          s = e(\"../common/utils\").isSpace;r.exports = function (e, r) {\n        var t,\n            o,\n            i,\n            a,\n            c,\n            l,\n            u,\n            p,\n            h,\n            f,\n            d,\n            m,\n            _,\n            g = \"\",\n            b = e.pos,\n            k = e.posMax;if (33 !== e.src.charCodeAt(e.pos)) return !1;if (91 !== e.src.charCodeAt(e.pos + 1)) return !1;if (l = e.pos + 2, c = e.md.helpers.parseLinkLabel(e, e.pos + 1, !1), c < 0) return !1;if (u = c + 1, u < k && 40 === e.src.charCodeAt(u)) {\n          for (u++; u < k && (o = e.src.charCodeAt(u), s(o) || 10 === o); u++);if (u >= k) return !1;for (_ = u, h = e.md.helpers.parseLinkDestination(e.src, u, e.posMax), h.ok && (g = e.md.normalizeLink(h.str), e.md.validateLink(g) ? u = h.pos : g = \"\"), _ = u; u < k && (o = e.src.charCodeAt(u), s(o) || 10 === o); u++);if (h = e.md.helpers.parseLinkTitle(e.src, u, e.posMax), u < k && _ !== u && h.ok) for (f = h.str, u = h.pos; u < k && (o = e.src.charCodeAt(u), s(o) || 10 === o); u++);else f = \"\";if (u >= k || 41 !== e.src.charCodeAt(u)) return e.pos = b, !1;u++;\n        } else {\n          if (\"undefined\" == typeof e.env.references) return !1;if (u < k && 91 === e.src.charCodeAt(u) ? (_ = u + 1, u = e.md.helpers.parseLinkLabel(e, u), u >= 0 ? a = e.src.slice(_, u++) : u = c + 1) : u = c + 1, a || (a = e.src.slice(l, c)), p = e.env.references[n(a)], !p) return e.pos = b, !1;g = p.href, f = p.title;\n        }return r || (i = e.src.slice(l, c), e.md.inline.parse(i, e.md, e.env, m = []), d = e.push(\"image\", \"img\", 0), d.attrs = t = [[\"src\", g], [\"alt\", \"\"]], d.children = m, d.content = i, f && t.push([\"title\", f])), e.pos = u, e.posMax = k, !0;\n      };\n    }, { \"../common/utils\": 4 }], 45: [function (e, r, t) {\n      \"use strict\";\n      var n = e(\"../common/utils\").normalizeReference,\n          s = e(\"../common/utils\").isSpace;r.exports = function (e, r) {\n        var t,\n            o,\n            i,\n            a,\n            c,\n            l,\n            u,\n            p,\n            h,\n            f,\n            d = \"\",\n            m = e.pos,\n            _ = e.posMax,\n            g = e.pos;if (91 !== e.src.charCodeAt(e.pos)) return !1;if (c = e.pos + 1, a = e.md.helpers.parseLinkLabel(e, e.pos, !0), a < 0) return !1;if (l = a + 1, l < _ && 40 === e.src.charCodeAt(l)) {\n          for (l++; l < _ && (o = e.src.charCodeAt(l), s(o) || 10 === o); l++);if (l >= _) return !1;for (g = l, u = e.md.helpers.parseLinkDestination(e.src, l, e.posMax), u.ok && (d = e.md.normalizeLink(u.str), e.md.validateLink(d) ? l = u.pos : d = \"\"), g = l; l < _ && (o = e.src.charCodeAt(l), s(o) || 10 === o); l++);if (u = e.md.helpers.parseLinkTitle(e.src, l, e.posMax), l < _ && g !== l && u.ok) for (h = u.str, l = u.pos; l < _ && (o = e.src.charCodeAt(l), s(o) || 10 === o); l++);else h = \"\";if (l >= _ || 41 !== e.src.charCodeAt(l)) return e.pos = m, !1;l++;\n        } else {\n          if (\"undefined\" == typeof e.env.references) return !1;if (l < _ && 91 === e.src.charCodeAt(l) ? (g = l + 1, l = e.md.helpers.parseLinkLabel(e, l), l >= 0 ? i = e.src.slice(g, l++) : l = a + 1) : l = a + 1, i || (i = e.src.slice(c, a)), p = e.env.references[n(i)], !p) return e.pos = m, !1;d = p.href, h = p.title;\n        }return r || (e.pos = c, e.posMax = a, f = e.push(\"link_open\", \"a\", 1), f.attrs = t = [[\"href\", d]], h && t.push([\"title\", h]), e.md.inline.tokenize(e), f = e.push(\"link_close\", \"a\", -1)), e.pos = l, e.posMax = _, !0;\n      };\n    }, { \"../common/utils\": 4 }], 46: [function (e, r, t) {\n      \"use strict\";\n      r.exports = function (e, r) {\n        var t,\n            n,\n            s = e.pos;if (10 !== e.src.charCodeAt(s)) return !1;for (t = e.pending.length - 1, n = e.posMax, r || (t >= 0 && 32 === e.pending.charCodeAt(t) ? t >= 1 && 32 === e.pending.charCodeAt(t - 1) ? (e.pending = e.pending.replace(/ +$/, \"\"), e.push(\"hardbreak\", \"br\", 0)) : (e.pending = e.pending.slice(0, -1), e.push(\"softbreak\", \"br\", 0)) : e.push(\"softbreak\", \"br\", 0)), s++; s < n && 32 === e.src.charCodeAt(s);) s++;return e.pos = s, !0;\n      };\n    }, {}], 47: [function (e, r, t) {\n      \"use strict\";\n      function n(e, r, t, n) {\n        this.src = e, this.env = t, this.md = r, this.tokens = n, this.pos = 0, this.posMax = this.src.length, this.level = 0, this.pending = \"\", this.pendingLevel = 0, this.cache = {}, this.delimiters = [];\n      }var s = e(\"../token\"),\n          o = e(\"../common/utils\").isWhiteSpace,\n          i = e(\"../common/utils\").isPunctChar,\n          a = e(\"../common/utils\").isMdAsciiPunct;n.prototype.pushPending = function () {\n        var e = new s(\"text\", \"\", 0);return e.content = this.pending, e.level = this.pendingLevel, this.tokens.push(e), this.pending = \"\", e;\n      }, n.prototype.push = function (e, r, t) {\n        this.pending && this.pushPending();var n = new s(e, r, t);return t < 0 && this.level--, n.level = this.level, t > 0 && this.level++, this.pendingLevel = this.level, this.tokens.push(n), n;\n      }, n.prototype.scanDelims = function (e, r) {\n        var t,\n            n,\n            s,\n            c,\n            l,\n            u,\n            p,\n            h,\n            f,\n            d = e,\n            m = !0,\n            _ = !0,\n            g = this.posMax,\n            b = this.src.charCodeAt(e);for (t = e > 0 ? this.src.charCodeAt(e - 1) : 32; d < g && this.src.charCodeAt(d) === b;) d++;return s = d - e, n = d < g ? this.src.charCodeAt(d) : 32, p = a(t) || i(String.fromCharCode(t)), f = a(n) || i(String.fromCharCode(n)), u = o(t), h = o(n), h ? m = !1 : f && (u || p || (m = !1)), u ? _ = !1 : p && (h || f || (_ = !1)), r ? (c = m, l = _) : (c = m && (!_ || p), l = _ && (!m || f)), { can_open: c, can_close: l, length: s };\n      }, n.prototype.Token = s, r.exports = n;\n    }, { \"../common/utils\": 4, \"../token\": 51 }], 48: [function (e, r, t) {\n      \"use strict\";\n      r.exports.tokenize = function (e, r) {\n        var t,\n            n,\n            s,\n            o,\n            i,\n            a = e.pos,\n            c = e.src.charCodeAt(a);if (r) return !1;if (126 !== c) return !1;if (n = e.scanDelims(e.pos, !0), o = n.length, i = String.fromCharCode(c), o < 2) return !1;for (o % 2 && (s = e.push(\"text\", \"\", 0), s.content = i, o--), t = 0; t < o; t += 2) s = e.push(\"text\", \"\", 0), s.content = i + i, e.delimiters.push({ marker: c, jump: t, token: e.tokens.length - 1, level: e.level, end: -1, open: n.can_open, close: n.can_close });return e.pos += n.length, !0;\n      }, r.exports.postProcess = function (e) {\n        var r,\n            t,\n            n,\n            s,\n            o,\n            i = [],\n            a = e.delimiters,\n            c = e.delimiters.length;for (r = 0; r < c; r++) n = a[r], 126 === n.marker && n.end !== -1 && (s = a[n.end], o = e.tokens[n.token], o.type = \"s_open\", o.tag = \"s\", o.nesting = 1, o.markup = \"~~\", o.content = \"\", o = e.tokens[s.token], o.type = \"s_close\", o.tag = \"s\", o.nesting = -1, o.markup = \"~~\", o.content = \"\", \"text\" === e.tokens[s.token - 1].type && \"~\" === e.tokens[s.token - 1].content && i.push(s.token - 1));for (; i.length;) {\n          for (r = i.pop(), t = r + 1; t < e.tokens.length && \"s_close\" === e.tokens[t].type;) t++;t--, r !== t && (o = e.tokens[t], e.tokens[t] = e.tokens[r], e.tokens[r] = o);\n        }\n      };\n    }, {}], 49: [function (e, r, t) {\n      \"use strict\";\n      function n(e) {\n        switch (e) {case 10:case 33:case 35:case 36:case 37:case 38:case 42:case 43:case 45:case 58:case 60:case 61:case 62:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 125:case 126:\n            return !0;default:\n            return !1;}\n      }r.exports = function (e, r) {\n        for (var t = e.pos; t < e.posMax && !n(e.src.charCodeAt(t));) t++;return t !== e.pos && (r || (e.pending += e.src.slice(e.pos, t)), e.pos = t, !0);\n      };\n    }, {}], 50: [function (e, r, t) {\n      \"use strict\";\n      r.exports = function (e) {\n        var r,\n            t,\n            n = 0,\n            s = e.tokens,\n            o = e.tokens.length;for (r = t = 0; r < o; r++) n += s[r].nesting, s[r].level = n, \"text\" === s[r].type && r + 1 < o && \"text\" === s[r + 1].type ? s[r + 1].content = s[r].content + s[r + 1].content : (r !== t && (s[t] = s[r]), t++);r !== t && (s.length = t);\n      };\n    }, {}], 51: [function (e, r, t) {\n      \"use strict\";\n      function n(e, r, t) {\n        this.type = e, this.tag = r, this.attrs = null, this.map = null, this.nesting = t, this.level = 0, this.children = null, this.content = \"\", this.markup = \"\", this.info = \"\", this.meta = null, this.block = !1, this.hidden = !1;\n      }n.prototype.attrIndex = function (e) {\n        var r, t, n;if (!this.attrs) return -1;for (r = this.attrs, t = 0, n = r.length; t < n; t++) if (r[t][0] === e) return t;return -1;\n      }, n.prototype.attrPush = function (e) {\n        this.attrs ? this.attrs.push(e) : this.attrs = [e];\n      }, n.prototype.attrSet = function (e, r) {\n        var t = this.attrIndex(e),\n            n = [e, r];t < 0 ? this.attrPush(n) : this.attrs[t] = n;\n      }, n.prototype.attrGet = function (e) {\n        var r = this.attrIndex(e),\n            t = null;return r >= 0 && (t = this.attrs[r][1]), t;\n      }, n.prototype.attrJoin = function (e, r) {\n        var t = this.attrIndex(e);t < 0 ? this.attrPush([e, r]) : this.attrs[t][1] = this.attrs[t][1] + \" \" + r;\n      }, r.exports = n;\n    }, {}], 52: [function (e, r, t) {\n      r.exports = { Aacute: \"\\xc1\", aacute: \"\\xe1\", Abreve: \"\\u0102\", abreve: \"\\u0103\", ac: \"\\u223e\", acd: \"\\u223f\", acE: \"\\u223e\\u0333\", Acirc: \"\\xc2\", acirc: \"\\xe2\", acute: \"\\xb4\", Acy: \"\\u0410\", acy: \"\\u0430\", AElig: \"\\xc6\", aelig: \"\\xe6\", af: \"\\u2061\", Afr: \"\\ud835\\udd04\", afr: \"\\ud835\\udd1e\", Agrave: \"\\xc0\", agrave: \"\\xe0\", alefsym: \"\\u2135\", aleph: \"\\u2135\", Alpha: \"\\u0391\", alpha: \"\\u03b1\", Amacr: \"\\u0100\", amacr: \"\\u0101\", amalg: \"\\u2a3f\", amp: \"&\", AMP: \"&\", andand: \"\\u2a55\", And: \"\\u2a53\", and: \"\\u2227\", andd: \"\\u2a5c\", andslope: \"\\u2a58\", andv: \"\\u2a5a\", ang: \"\\u2220\", ange: \"\\u29a4\", angle: \"\\u2220\", angmsdaa: \"\\u29a8\", angmsdab: \"\\u29a9\", angmsdac: \"\\u29aa\", angmsdad: \"\\u29ab\", angmsdae: \"\\u29ac\", angmsdaf: \"\\u29ad\", angmsdag: \"\\u29ae\", angmsdah: \"\\u29af\", angmsd: \"\\u2221\", angrt: \"\\u221f\", angrtvb: \"\\u22be\", angrtvbd: \"\\u299d\", angsph: \"\\u2222\", angst: \"\\xc5\", angzarr: \"\\u237c\", Aogon: \"\\u0104\", aogon: \"\\u0105\", Aopf: \"\\ud835\\udd38\", aopf: \"\\ud835\\udd52\", apacir: \"\\u2a6f\", ap: \"\\u2248\", apE: \"\\u2a70\", ape: \"\\u224a\", apid: \"\\u224b\", apos: \"'\", ApplyFunction: \"\\u2061\", approx: \"\\u2248\", approxeq: \"\\u224a\", Aring: \"\\xc5\", aring: \"\\xe5\", Ascr: \"\\ud835\\udc9c\", ascr: \"\\ud835\\udcb6\", Assign: \"\\u2254\", ast: \"*\", asymp: \"\\u2248\", asympeq: \"\\u224d\", Atilde: \"\\xc3\", atilde: \"\\xe3\", Auml: \"\\xc4\", auml: \"\\xe4\", awconint: \"\\u2233\", awint: \"\\u2a11\", backcong: \"\\u224c\", backepsilon: \"\\u03f6\", backprime: \"\\u2035\", backsim: \"\\u223d\", backsimeq: \"\\u22cd\", Backslash: \"\\u2216\", Barv: \"\\u2ae7\", barvee: \"\\u22bd\", barwed: \"\\u2305\", Barwed: \"\\u2306\", barwedge: \"\\u2305\", bbrk: \"\\u23b5\", bbrktbrk: \"\\u23b6\", bcong: \"\\u224c\", Bcy: \"\\u0411\", bcy: \"\\u0431\", bdquo: \"\\u201e\", becaus: \"\\u2235\", because: \"\\u2235\", Because: \"\\u2235\", bemptyv: \"\\u29b0\", bepsi: \"\\u03f6\", bernou: \"\\u212c\", Bernoullis: \"\\u212c\", Beta: \"\\u0392\", beta: \"\\u03b2\", beth: \"\\u2136\", between: \"\\u226c\", Bfr: \"\\ud835\\udd05\", bfr: \"\\ud835\\udd1f\", bigcap: \"\\u22c2\", bigcirc: \"\\u25ef\", bigcup: \"\\u22c3\", bigodot: \"\\u2a00\", bigoplus: \"\\u2a01\", bigotimes: \"\\u2a02\", bigsqcup: \"\\u2a06\", bigstar: \"\\u2605\", bigtriangledown: \"\\u25bd\", bigtriangleup: \"\\u25b3\", biguplus: \"\\u2a04\", bigvee: \"\\u22c1\", bigwedge: \"\\u22c0\", bkarow: \"\\u290d\", blacklozenge: \"\\u29eb\", blacksquare: \"\\u25aa\", blacktriangle: \"\\u25b4\", blacktriangledown: \"\\u25be\", blacktriangleleft: \"\\u25c2\", blacktriangleright: \"\\u25b8\", blank: \"\\u2423\", blk12: \"\\u2592\", blk14: \"\\u2591\", blk34: \"\\u2593\", block: \"\\u2588\", bne: \"=\\u20e5\", bnequiv: \"\\u2261\\u20e5\", bNot: \"\\u2aed\", bnot: \"\\u2310\", Bopf: \"\\ud835\\udd39\", bopf: \"\\ud835\\udd53\", bot: \"\\u22a5\", bottom: \"\\u22a5\", bowtie: \"\\u22c8\", boxbox: \"\\u29c9\", boxdl: \"\\u2510\", boxdL: \"\\u2555\", boxDl: \"\\u2556\", boxDL: \"\\u2557\", boxdr: \"\\u250c\", boxdR: \"\\u2552\", boxDr: \"\\u2553\", boxDR: \"\\u2554\", boxh: \"\\u2500\", boxH: \"\\u2550\", boxhd: \"\\u252c\", boxHd: \"\\u2564\", boxhD: \"\\u2565\", boxHD: \"\\u2566\", boxhu: \"\\u2534\", boxHu: \"\\u2567\", boxhU: \"\\u2568\", boxHU: \"\\u2569\", boxminus: \"\\u229f\", boxplus: \"\\u229e\", boxtimes: \"\\u22a0\", boxul: \"\\u2518\", boxuL: \"\\u255b\", boxUl: \"\\u255c\", boxUL: \"\\u255d\", boxur: \"\\u2514\", boxuR: \"\\u2558\", boxUr: \"\\u2559\", boxUR: \"\\u255a\", boxv: \"\\u2502\", boxV: \"\\u2551\", boxvh: \"\\u253c\", boxvH: \"\\u256a\", boxVh: \"\\u256b\", boxVH: \"\\u256c\", boxvl: \"\\u2524\", boxvL: \"\\u2561\", boxVl: \"\\u2562\", boxVL: \"\\u2563\", boxvr: \"\\u251c\", boxvR: \"\\u255e\", boxVr: \"\\u255f\", boxVR: \"\\u2560\", bprime: \"\\u2035\", breve: \"\\u02d8\", Breve: \"\\u02d8\", brvbar: \"\\xa6\", bscr: \"\\ud835\\udcb7\", Bscr: \"\\u212c\", bsemi: \"\\u204f\", bsim: \"\\u223d\", bsime: \"\\u22cd\", bsolb: \"\\u29c5\", bsol: \"\\\\\", bsolhsub: \"\\u27c8\", bull: \"\\u2022\", bullet: \"\\u2022\", bump: \"\\u224e\", bumpE: \"\\u2aae\", bumpe: \"\\u224f\", Bumpeq: \"\\u224e\", bumpeq: \"\\u224f\", Cacute: \"\\u0106\", cacute: \"\\u0107\", capand: \"\\u2a44\", capbrcup: \"\\u2a49\", capcap: \"\\u2a4b\", cap: \"\\u2229\", Cap: \"\\u22d2\", capcup: \"\\u2a47\", capdot: \"\\u2a40\", CapitalDifferentialD: \"\\u2145\", caps: \"\\u2229\\ufe00\", caret: \"\\u2041\", caron: \"\\u02c7\", Cayleys: \"\\u212d\", ccaps: \"\\u2a4d\", Ccaron: \"\\u010c\", ccaron: \"\\u010d\", Ccedil: \"\\xc7\", ccedil: \"\\xe7\", Ccirc: \"\\u0108\", ccirc: \"\\u0109\", Cconint: \"\\u2230\", ccups: \"\\u2a4c\", ccupssm: \"\\u2a50\", Cdot: \"\\u010a\", cdot: \"\\u010b\", cedil: \"\\xb8\", Cedilla: \"\\xb8\", cemptyv: \"\\u29b2\", cent: \"\\xa2\", centerdot: \"\\xb7\", CenterDot: \"\\xb7\", cfr: \"\\ud835\\udd20\", Cfr: \"\\u212d\", CHcy: \"\\u0427\", chcy: \"\\u0447\", check: \"\\u2713\", checkmark: \"\\u2713\", Chi: \"\\u03a7\", chi: \"\\u03c7\", circ: \"\\u02c6\", circeq: \"\\u2257\", circlearrowleft: \"\\u21ba\", circlearrowright: \"\\u21bb\", circledast: \"\\u229b\", circledcirc: \"\\u229a\", circleddash: \"\\u229d\", CircleDot: \"\\u2299\", circledR: \"\\xae\", circledS: \"\\u24c8\", CircleMinus: \"\\u2296\", CirclePlus: \"\\u2295\", CircleTimes: \"\\u2297\", cir: \"\\u25cb\", cirE: \"\\u29c3\", cire: \"\\u2257\", cirfnint: \"\\u2a10\", cirmid: \"\\u2aef\", cirscir: \"\\u29c2\", ClockwiseContourIntegral: \"\\u2232\", CloseCurlyDoubleQuote: \"\\u201d\", CloseCurlyQuote: \"\\u2019\", clubs: \"\\u2663\", clubsuit: \"\\u2663\", colon: \":\", Colon: \"\\u2237\", Colone: \"\\u2a74\", colone: \"\\u2254\", coloneq: \"\\u2254\", comma: \",\", commat: \"@\", comp: \"\\u2201\", compfn: \"\\u2218\", complement: \"\\u2201\", complexes: \"\\u2102\", cong: \"\\u2245\", congdot: \"\\u2a6d\", Congruent: \"\\u2261\", conint: \"\\u222e\", Conint: \"\\u222f\", ContourIntegral: \"\\u222e\", copf: \"\\ud835\\udd54\", Copf: \"\\u2102\", coprod: \"\\u2210\", Coproduct: \"\\u2210\", copy: \"\\xa9\", COPY: \"\\xa9\", copysr: \"\\u2117\", CounterClockwiseContourIntegral: \"\\u2233\", crarr: \"\\u21b5\", cross: \"\\u2717\", Cross: \"\\u2a2f\", Cscr: \"\\ud835\\udc9e\", cscr: \"\\ud835\\udcb8\", csub: \"\\u2acf\", csube: \"\\u2ad1\", csup: \"\\u2ad0\", csupe: \"\\u2ad2\", ctdot: \"\\u22ef\", cudarrl: \"\\u2938\", cudarrr: \"\\u2935\", cuepr: \"\\u22de\", cuesc: \"\\u22df\", cularr: \"\\u21b6\", cularrp: \"\\u293d\", cupbrcap: \"\\u2a48\", cupcap: \"\\u2a46\", CupCap: \"\\u224d\", cup: \"\\u222a\", Cup: \"\\u22d3\", cupcup: \"\\u2a4a\", cupdot: \"\\u228d\", cupor: \"\\u2a45\", cups: \"\\u222a\\ufe00\", curarr: \"\\u21b7\", curarrm: \"\\u293c\", curlyeqprec: \"\\u22de\", curlyeqsucc: \"\\u22df\", curlyvee: \"\\u22ce\", curlywedge: \"\\u22cf\", curren: \"\\xa4\", curvearrowleft: \"\\u21b6\", curvearrowright: \"\\u21b7\", cuvee: \"\\u22ce\", cuwed: \"\\u22cf\", cwconint: \"\\u2232\", cwint: \"\\u2231\", cylcty: \"\\u232d\", dagger: \"\\u2020\", Dagger: \"\\u2021\", daleth: \"\\u2138\", darr: \"\\u2193\", Darr: \"\\u21a1\", dArr: \"\\u21d3\", dash: \"\\u2010\", Dashv: \"\\u2ae4\", dashv: \"\\u22a3\", dbkarow: \"\\u290f\", dblac: \"\\u02dd\", Dcaron: \"\\u010e\", dcaron: \"\\u010f\", Dcy: \"\\u0414\", dcy: \"\\u0434\", ddagger: \"\\u2021\", ddarr: \"\\u21ca\", DD: \"\\u2145\", dd: \"\\u2146\", DDotrahd: \"\\u2911\", ddotseq: \"\\u2a77\", deg: \"\\xb0\", Del: \"\\u2207\", Delta: \"\\u0394\", delta: \"\\u03b4\", demptyv: \"\\u29b1\", dfisht: \"\\u297f\", Dfr: \"\\ud835\\udd07\", dfr: \"\\ud835\\udd21\", dHar: \"\\u2965\", dharl: \"\\u21c3\", dharr: \"\\u21c2\", DiacriticalAcute: \"\\xb4\", DiacriticalDot: \"\\u02d9\", DiacriticalDoubleAcute: \"\\u02dd\", DiacriticalGrave: \"`\", DiacriticalTilde: \"\\u02dc\", diam: \"\\u22c4\", diamond: \"\\u22c4\", Diamond: \"\\u22c4\", diamondsuit: \"\\u2666\", diams: \"\\u2666\", die: \"\\xa8\", DifferentialD: \"\\u2146\", digamma: \"\\u03dd\", disin: \"\\u22f2\", div: \"\\xf7\", divide: \"\\xf7\", divideontimes: \"\\u22c7\", divonx: \"\\u22c7\", DJcy: \"\\u0402\", djcy: \"\\u0452\", dlcorn: \"\\u231e\", dlcrop: \"\\u230d\", dollar: \"$\", Dopf: \"\\ud835\\udd3b\", dopf: \"\\ud835\\udd55\", Dot: \"\\xa8\", dot: \"\\u02d9\", DotDot: \"\\u20dc\", doteq: \"\\u2250\", doteqdot: \"\\u2251\", DotEqual: \"\\u2250\", dotminus: \"\\u2238\", dotplus: \"\\u2214\", dotsquare: \"\\u22a1\", doublebarwedge: \"\\u2306\", DoubleContourIntegral: \"\\u222f\", DoubleDot: \"\\xa8\", DoubleDownArrow: \"\\u21d3\", DoubleLeftArrow: \"\\u21d0\", DoubleLeftRightArrow: \"\\u21d4\", DoubleLeftTee: \"\\u2ae4\", DoubleLongLeftArrow: \"\\u27f8\", DoubleLongLeftRightArrow: \"\\u27fa\", DoubleLongRightArrow: \"\\u27f9\", DoubleRightArrow: \"\\u21d2\", DoubleRightTee: \"\\u22a8\", DoubleUpArrow: \"\\u21d1\", DoubleUpDownArrow: \"\\u21d5\", DoubleVerticalBar: \"\\u2225\", DownArrowBar: \"\\u2913\", downarrow: \"\\u2193\", DownArrow: \"\\u2193\", Downarrow: \"\\u21d3\", DownArrowUpArrow: \"\\u21f5\", DownBreve: \"\\u0311\", downdownarrows: \"\\u21ca\", downharpoonleft: \"\\u21c3\", downharpoonright: \"\\u21c2\", DownLeftRightVector: \"\\u2950\", DownLeftTeeVector: \"\\u295e\", DownLeftVectorBar: \"\\u2956\", DownLeftVector: \"\\u21bd\", DownRightTeeVector: \"\\u295f\", DownRightVectorBar: \"\\u2957\", DownRightVector: \"\\u21c1\", DownTeeArrow: \"\\u21a7\", DownTee: \"\\u22a4\", drbkarow: \"\\u2910\", drcorn: \"\\u231f\", drcrop: \"\\u230c\", Dscr: \"\\ud835\\udc9f\", dscr: \"\\ud835\\udcb9\", DScy: \"\\u0405\", dscy: \"\\u0455\", dsol: \"\\u29f6\", Dstrok: \"\\u0110\", dstrok: \"\\u0111\", dtdot: \"\\u22f1\", dtri: \"\\u25bf\", dtrif: \"\\u25be\", duarr: \"\\u21f5\", duhar: \"\\u296f\", dwangle: \"\\u29a6\", DZcy: \"\\u040f\", dzcy: \"\\u045f\", dzigrarr: \"\\u27ff\", Eacute: \"\\xc9\", eacute: \"\\xe9\", easter: \"\\u2a6e\", Ecaron: \"\\u011a\", ecaron: \"\\u011b\", Ecirc: \"\\xca\", ecirc: \"\\xea\", ecir: \"\\u2256\", ecolon: \"\\u2255\", Ecy: \"\\u042d\", ecy: \"\\u044d\", eDDot: \"\\u2a77\", Edot: \"\\u0116\", edot: \"\\u0117\", eDot: \"\\u2251\", ee: \"\\u2147\", efDot: \"\\u2252\", Efr: \"\\ud835\\udd08\", efr: \"\\ud835\\udd22\", eg: \"\\u2a9a\", Egrave: \"\\xc8\", egrave: \"\\xe8\", egs: \"\\u2a96\", egsdot: \"\\u2a98\", el: \"\\u2a99\", Element: \"\\u2208\", elinters: \"\\u23e7\", ell: \"\\u2113\", els: \"\\u2a95\", elsdot: \"\\u2a97\", Emacr: \"\\u0112\", emacr: \"\\u0113\", empty: \"\\u2205\", emptyset: \"\\u2205\", EmptySmallSquare: \"\\u25fb\", emptyv: \"\\u2205\", EmptyVerySmallSquare: \"\\u25ab\", emsp13: \"\\u2004\", emsp14: \"\\u2005\", emsp: \"\\u2003\", ENG: \"\\u014a\", eng: \"\\u014b\", ensp: \"\\u2002\", Eogon: \"\\u0118\", eogon: \"\\u0119\", Eopf: \"\\ud835\\udd3c\", eopf: \"\\ud835\\udd56\", epar: \"\\u22d5\", eparsl: \"\\u29e3\", eplus: \"\\u2a71\", epsi: \"\\u03b5\", Epsilon: \"\\u0395\", epsilon: \"\\u03b5\", epsiv: \"\\u03f5\", eqcirc: \"\\u2256\", eqcolon: \"\\u2255\", eqsim: \"\\u2242\", eqslantgtr: \"\\u2a96\", eqslantless: \"\\u2a95\", Equal: \"\\u2a75\", equals: \"=\", EqualTilde: \"\\u2242\", equest: \"\\u225f\", Equilibrium: \"\\u21cc\", equiv: \"\\u2261\", equivDD: \"\\u2a78\", eqvparsl: \"\\u29e5\", erarr: \"\\u2971\", erDot: \"\\u2253\", escr: \"\\u212f\", Escr: \"\\u2130\", esdot: \"\\u2250\", Esim: \"\\u2a73\", esim: \"\\u2242\", Eta: \"\\u0397\", eta: \"\\u03b7\", ETH: \"\\xd0\", eth: \"\\xf0\", Euml: \"\\xcb\", euml: \"\\xeb\", euro: \"\\u20ac\", excl: \"!\", exist: \"\\u2203\", Exists: \"\\u2203\", expectation: \"\\u2130\", exponentiale: \"\\u2147\", ExponentialE: \"\\u2147\", fallingdotseq: \"\\u2252\", Fcy: \"\\u0424\", fcy: \"\\u0444\", female: \"\\u2640\", ffilig: \"\\ufb03\", fflig: \"\\ufb00\", ffllig: \"\\ufb04\", Ffr: \"\\ud835\\udd09\", ffr: \"\\ud835\\udd23\", filig: \"\\ufb01\", FilledSmallSquare: \"\\u25fc\", FilledVerySmallSquare: \"\\u25aa\", fjlig: \"fj\", flat: \"\\u266d\", fllig: \"\\ufb02\", fltns: \"\\u25b1\", fnof: \"\\u0192\", Fopf: \"\\ud835\\udd3d\", fopf: \"\\ud835\\udd57\", forall: \"\\u2200\", ForAll: \"\\u2200\", fork: \"\\u22d4\", forkv: \"\\u2ad9\", Fouriertrf: \"\\u2131\", fpartint: \"\\u2a0d\", frac12: \"\\xbd\", frac13: \"\\u2153\", frac14: \"\\xbc\", frac15: \"\\u2155\", frac16: \"\\u2159\", frac18: \"\\u215b\", frac23: \"\\u2154\", frac25: \"\\u2156\", frac34: \"\\xbe\", frac35: \"\\u2157\", frac38: \"\\u215c\", frac45: \"\\u2158\", frac56: \"\\u215a\", frac58: \"\\u215d\", frac78: \"\\u215e\", frasl: \"\\u2044\", frown: \"\\u2322\", fscr: \"\\ud835\\udcbb\", Fscr: \"\\u2131\", gacute: \"\\u01f5\", Gamma: \"\\u0393\", gamma: \"\\u03b3\", Gammad: \"\\u03dc\", gammad: \"\\u03dd\", gap: \"\\u2a86\", Gbreve: \"\\u011e\", gbreve: \"\\u011f\", Gcedil: \"\\u0122\", Gcirc: \"\\u011c\", gcirc: \"\\u011d\", Gcy: \"\\u0413\", gcy: \"\\u0433\", Gdot: \"\\u0120\", gdot: \"\\u0121\", ge: \"\\u2265\", gE: \"\\u2267\", gEl: \"\\u2a8c\", gel: \"\\u22db\", geq: \"\\u2265\", geqq: \"\\u2267\", geqslant: \"\\u2a7e\", gescc: \"\\u2aa9\", ges: \"\\u2a7e\", gesdot: \"\\u2a80\", gesdoto: \"\\u2a82\", gesdotol: \"\\u2a84\", gesl: \"\\u22db\\ufe00\", gesles: \"\\u2a94\", Gfr: \"\\ud835\\udd0a\", gfr: \"\\ud835\\udd24\", gg: \"\\u226b\", Gg: \"\\u22d9\", ggg: \"\\u22d9\", gimel: \"\\u2137\", GJcy: \"\\u0403\", gjcy: \"\\u0453\", gla: \"\\u2aa5\", gl: \"\\u2277\", glE: \"\\u2a92\", glj: \"\\u2aa4\", gnap: \"\\u2a8a\", gnapprox: \"\\u2a8a\", gne: \"\\u2a88\", gnE: \"\\u2269\", gneq: \"\\u2a88\", gneqq: \"\\u2269\", gnsim: \"\\u22e7\", Gopf: \"\\ud835\\udd3e\", gopf: \"\\ud835\\udd58\", grave: \"`\", GreaterEqual: \"\\u2265\", GreaterEqualLess: \"\\u22db\", GreaterFullEqual: \"\\u2267\", GreaterGreater: \"\\u2aa2\", GreaterLess: \"\\u2277\", GreaterSlantEqual: \"\\u2a7e\", GreaterTilde: \"\\u2273\", Gscr: \"\\ud835\\udca2\", gscr: \"\\u210a\", gsim: \"\\u2273\", gsime: \"\\u2a8e\", gsiml: \"\\u2a90\", gtcc: \"\\u2aa7\", gtcir: \"\\u2a7a\", gt: \">\", GT: \">\", Gt: \"\\u226b\", gtdot: \"\\u22d7\", gtlPar: \"\\u2995\", gtquest: \"\\u2a7c\", gtrapprox: \"\\u2a86\", gtrarr: \"\\u2978\", gtrdot: \"\\u22d7\", gtreqless: \"\\u22db\", gtreqqless: \"\\u2a8c\", gtrless: \"\\u2277\", gtrsim: \"\\u2273\", gvertneqq: \"\\u2269\\ufe00\", gvnE: \"\\u2269\\ufe00\", Hacek: \"\\u02c7\", hairsp: \"\\u200a\", half: \"\\xbd\", hamilt: \"\\u210b\", HARDcy: \"\\u042a\", hardcy: \"\\u044a\", harrcir: \"\\u2948\", harr: \"\\u2194\", hArr: \"\\u21d4\", harrw: \"\\u21ad\", Hat: \"^\", hbar: \"\\u210f\", Hcirc: \"\\u0124\", hcirc: \"\\u0125\", hearts: \"\\u2665\", heartsuit: \"\\u2665\", hellip: \"\\u2026\", hercon: \"\\u22b9\", hfr: \"\\ud835\\udd25\", Hfr: \"\\u210c\", HilbertSpace: \"\\u210b\", hksearow: \"\\u2925\", hkswarow: \"\\u2926\", hoarr: \"\\u21ff\", homtht: \"\\u223b\", hookleftarrow: \"\\u21a9\", hookrightarrow: \"\\u21aa\", hopf: \"\\ud835\\udd59\", Hopf: \"\\u210d\", horbar: \"\\u2015\", HorizontalLine: \"\\u2500\", hscr: \"\\ud835\\udcbd\", Hscr: \"\\u210b\", hslash: \"\\u210f\", Hstrok: \"\\u0126\", hstrok: \"\\u0127\", HumpDownHump: \"\\u224e\", HumpEqual: \"\\u224f\", hybull: \"\\u2043\", hyphen: \"\\u2010\", Iacute: \"\\xcd\", iacute: \"\\xed\", ic: \"\\u2063\", Icirc: \"\\xce\", icirc: \"\\xee\", Icy: \"\\u0418\", icy: \"\\u0438\", Idot: \"\\u0130\", IEcy: \"\\u0415\", iecy: \"\\u0435\", iexcl: \"\\xa1\", iff: \"\\u21d4\", ifr: \"\\ud835\\udd26\", Ifr: \"\\u2111\", Igrave: \"\\xcc\", igrave: \"\\xec\", ii: \"\\u2148\", iiiint: \"\\u2a0c\", iiint: \"\\u222d\", iinfin: \"\\u29dc\", iiota: \"\\u2129\", IJlig: \"\\u0132\", ijlig: \"\\u0133\", Imacr: \"\\u012a\", imacr: \"\\u012b\", image: \"\\u2111\", ImaginaryI: \"\\u2148\", imagline: \"\\u2110\", imagpart: \"\\u2111\", imath: \"\\u0131\", Im: \"\\u2111\", imof: \"\\u22b7\", imped: \"\\u01b5\", Implies: \"\\u21d2\", incare: \"\\u2105\", in: \"\\u2208\", infin: \"\\u221e\", infintie: \"\\u29dd\", inodot: \"\\u0131\", intcal: \"\\u22ba\", int: \"\\u222b\", Int: \"\\u222c\", integers: \"\\u2124\", Integral: \"\\u222b\", intercal: \"\\u22ba\", Intersection: \"\\u22c2\", intlarhk: \"\\u2a17\", intprod: \"\\u2a3c\", InvisibleComma: \"\\u2063\", InvisibleTimes: \"\\u2062\", IOcy: \"\\u0401\", iocy: \"\\u0451\", Iogon: \"\\u012e\", iogon: \"\\u012f\", Iopf: \"\\ud835\\udd40\", iopf: \"\\ud835\\udd5a\", Iota: \"\\u0399\", iota: \"\\u03b9\", iprod: \"\\u2a3c\", iquest: \"\\xbf\", iscr: \"\\ud835\\udcbe\", Iscr: \"\\u2110\", isin: \"\\u2208\", isindot: \"\\u22f5\", isinE: \"\\u22f9\", isins: \"\\u22f4\", isinsv: \"\\u22f3\", isinv: \"\\u2208\", it: \"\\u2062\", Itilde: \"\\u0128\", itilde: \"\\u0129\", Iukcy: \"\\u0406\", iukcy: \"\\u0456\", Iuml: \"\\xcf\", iuml: \"\\xef\", Jcirc: \"\\u0134\", jcirc: \"\\u0135\", Jcy: \"\\u0419\", jcy: \"\\u0439\", Jfr: \"\\ud835\\udd0d\", jfr: \"\\ud835\\udd27\", jmath: \"\\u0237\", Jopf: \"\\ud835\\udd41\", jopf: \"\\ud835\\udd5b\", Jscr: \"\\ud835\\udca5\", jscr: \"\\ud835\\udcbf\", Jsercy: \"\\u0408\", jsercy: \"\\u0458\", Jukcy: \"\\u0404\", jukcy: \"\\u0454\", Kappa: \"\\u039a\", kappa: \"\\u03ba\", kappav: \"\\u03f0\", Kcedil: \"\\u0136\", kcedil: \"\\u0137\", Kcy: \"\\u041a\", kcy: \"\\u043a\", Kfr: \"\\ud835\\udd0e\", kfr: \"\\ud835\\udd28\", kgreen: \"\\u0138\", KHcy: \"\\u0425\", khcy: \"\\u0445\", KJcy: \"\\u040c\", kjcy: \"\\u045c\", Kopf: \"\\ud835\\udd42\", kopf: \"\\ud835\\udd5c\", Kscr: \"\\ud835\\udca6\", kscr: \"\\ud835\\udcc0\", lAarr: \"\\u21da\", Lacute: \"\\u0139\", lacute: \"\\u013a\", laemptyv: \"\\u29b4\", lagran: \"\\u2112\", Lambda: \"\\u039b\", lambda: \"\\u03bb\", lang: \"\\u27e8\",\n        Lang: \"\\u27ea\", langd: \"\\u2991\", langle: \"\\u27e8\", lap: \"\\u2a85\", Laplacetrf: \"\\u2112\", laquo: \"\\xab\", larrb: \"\\u21e4\", larrbfs: \"\\u291f\", larr: \"\\u2190\", Larr: \"\\u219e\", lArr: \"\\u21d0\", larrfs: \"\\u291d\", larrhk: \"\\u21a9\", larrlp: \"\\u21ab\", larrpl: \"\\u2939\", larrsim: \"\\u2973\", larrtl: \"\\u21a2\", latail: \"\\u2919\", lAtail: \"\\u291b\", lat: \"\\u2aab\", late: \"\\u2aad\", lates: \"\\u2aad\\ufe00\", lbarr: \"\\u290c\", lBarr: \"\\u290e\", lbbrk: \"\\u2772\", lbrace: \"{\", lbrack: \"[\", lbrke: \"\\u298b\", lbrksld: \"\\u298f\", lbrkslu: \"\\u298d\", Lcaron: \"\\u013d\", lcaron: \"\\u013e\", Lcedil: \"\\u013b\", lcedil: \"\\u013c\", lceil: \"\\u2308\", lcub: \"{\", Lcy: \"\\u041b\", lcy: \"\\u043b\", ldca: \"\\u2936\", ldquo: \"\\u201c\", ldquor: \"\\u201e\", ldrdhar: \"\\u2967\", ldrushar: \"\\u294b\", ldsh: \"\\u21b2\", le: \"\\u2264\", lE: \"\\u2266\", LeftAngleBracket: \"\\u27e8\", LeftArrowBar: \"\\u21e4\", leftarrow: \"\\u2190\", LeftArrow: \"\\u2190\", Leftarrow: \"\\u21d0\", LeftArrowRightArrow: \"\\u21c6\", leftarrowtail: \"\\u21a2\", LeftCeiling: \"\\u2308\", LeftDoubleBracket: \"\\u27e6\", LeftDownTeeVector: \"\\u2961\", LeftDownVectorBar: \"\\u2959\", LeftDownVector: \"\\u21c3\", LeftFloor: \"\\u230a\", leftharpoondown: \"\\u21bd\", leftharpoonup: \"\\u21bc\", leftleftarrows: \"\\u21c7\", leftrightarrow: \"\\u2194\", LeftRightArrow: \"\\u2194\", Leftrightarrow: \"\\u21d4\", leftrightarrows: \"\\u21c6\", leftrightharpoons: \"\\u21cb\", leftrightsquigarrow: \"\\u21ad\", LeftRightVector: \"\\u294e\", LeftTeeArrow: \"\\u21a4\", LeftTee: \"\\u22a3\", LeftTeeVector: \"\\u295a\", leftthreetimes: \"\\u22cb\", LeftTriangleBar: \"\\u29cf\", LeftTriangle: \"\\u22b2\", LeftTriangleEqual: \"\\u22b4\", LeftUpDownVector: \"\\u2951\", LeftUpTeeVector: \"\\u2960\", LeftUpVectorBar: \"\\u2958\", LeftUpVector: \"\\u21bf\", LeftVectorBar: \"\\u2952\", LeftVector: \"\\u21bc\", lEg: \"\\u2a8b\", leg: \"\\u22da\", leq: \"\\u2264\", leqq: \"\\u2266\", leqslant: \"\\u2a7d\", lescc: \"\\u2aa8\", les: \"\\u2a7d\", lesdot: \"\\u2a7f\", lesdoto: \"\\u2a81\", lesdotor: \"\\u2a83\", lesg: \"\\u22da\\ufe00\", lesges: \"\\u2a93\", lessapprox: \"\\u2a85\", lessdot: \"\\u22d6\", lesseqgtr: \"\\u22da\", lesseqqgtr: \"\\u2a8b\", LessEqualGreater: \"\\u22da\", LessFullEqual: \"\\u2266\", LessGreater: \"\\u2276\", lessgtr: \"\\u2276\", LessLess: \"\\u2aa1\", lesssim: \"\\u2272\", LessSlantEqual: \"\\u2a7d\", LessTilde: \"\\u2272\", lfisht: \"\\u297c\", lfloor: \"\\u230a\", Lfr: \"\\ud835\\udd0f\", lfr: \"\\ud835\\udd29\", lg: \"\\u2276\", lgE: \"\\u2a91\", lHar: \"\\u2962\", lhard: \"\\u21bd\", lharu: \"\\u21bc\", lharul: \"\\u296a\", lhblk: \"\\u2584\", LJcy: \"\\u0409\", ljcy: \"\\u0459\", llarr: \"\\u21c7\", ll: \"\\u226a\", Ll: \"\\u22d8\", llcorner: \"\\u231e\", Lleftarrow: \"\\u21da\", llhard: \"\\u296b\", lltri: \"\\u25fa\", Lmidot: \"\\u013f\", lmidot: \"\\u0140\", lmoustache: \"\\u23b0\", lmoust: \"\\u23b0\", lnap: \"\\u2a89\", lnapprox: \"\\u2a89\", lne: \"\\u2a87\", lnE: \"\\u2268\", lneq: \"\\u2a87\", lneqq: \"\\u2268\", lnsim: \"\\u22e6\", loang: \"\\u27ec\", loarr: \"\\u21fd\", lobrk: \"\\u27e6\", longleftarrow: \"\\u27f5\", LongLeftArrow: \"\\u27f5\", Longleftarrow: \"\\u27f8\", longleftrightarrow: \"\\u27f7\", LongLeftRightArrow: \"\\u27f7\", Longleftrightarrow: \"\\u27fa\", longmapsto: \"\\u27fc\", longrightarrow: \"\\u27f6\", LongRightArrow: \"\\u27f6\", Longrightarrow: \"\\u27f9\", looparrowleft: \"\\u21ab\", looparrowright: \"\\u21ac\", lopar: \"\\u2985\", Lopf: \"\\ud835\\udd43\", lopf: \"\\ud835\\udd5d\", loplus: \"\\u2a2d\", lotimes: \"\\u2a34\", lowast: \"\\u2217\", lowbar: \"_\", LowerLeftArrow: \"\\u2199\", LowerRightArrow: \"\\u2198\", loz: \"\\u25ca\", lozenge: \"\\u25ca\", lozf: \"\\u29eb\", lpar: \"(\", lparlt: \"\\u2993\", lrarr: \"\\u21c6\", lrcorner: \"\\u231f\", lrhar: \"\\u21cb\", lrhard: \"\\u296d\", lrm: \"\\u200e\", lrtri: \"\\u22bf\", lsaquo: \"\\u2039\", lscr: \"\\ud835\\udcc1\", Lscr: \"\\u2112\", lsh: \"\\u21b0\", Lsh: \"\\u21b0\", lsim: \"\\u2272\", lsime: \"\\u2a8d\", lsimg: \"\\u2a8f\", lsqb: \"[\", lsquo: \"\\u2018\", lsquor: \"\\u201a\", Lstrok: \"\\u0141\", lstrok: \"\\u0142\", ltcc: \"\\u2aa6\", ltcir: \"\\u2a79\", lt: \"<\", LT: \"<\", Lt: \"\\u226a\", ltdot: \"\\u22d6\", lthree: \"\\u22cb\", ltimes: \"\\u22c9\", ltlarr: \"\\u2976\", ltquest: \"\\u2a7b\", ltri: \"\\u25c3\", ltrie: \"\\u22b4\", ltrif: \"\\u25c2\", ltrPar: \"\\u2996\", lurdshar: \"\\u294a\", luruhar: \"\\u2966\", lvertneqq: \"\\u2268\\ufe00\", lvnE: \"\\u2268\\ufe00\", macr: \"\\xaf\", male: \"\\u2642\", malt: \"\\u2720\", maltese: \"\\u2720\", Map: \"\\u2905\", map: \"\\u21a6\", mapsto: \"\\u21a6\", mapstodown: \"\\u21a7\", mapstoleft: \"\\u21a4\", mapstoup: \"\\u21a5\", marker: \"\\u25ae\", mcomma: \"\\u2a29\", Mcy: \"\\u041c\", mcy: \"\\u043c\", mdash: \"\\u2014\", mDDot: \"\\u223a\", measuredangle: \"\\u2221\", MediumSpace: \"\\u205f\", Mellintrf: \"\\u2133\", Mfr: \"\\ud835\\udd10\", mfr: \"\\ud835\\udd2a\", mho: \"\\u2127\", micro: \"\\xb5\", midast: \"*\", midcir: \"\\u2af0\", mid: \"\\u2223\", middot: \"\\xb7\", minusb: \"\\u229f\", minus: \"\\u2212\", minusd: \"\\u2238\", minusdu: \"\\u2a2a\", MinusPlus: \"\\u2213\", mlcp: \"\\u2adb\", mldr: \"\\u2026\", mnplus: \"\\u2213\", models: \"\\u22a7\", Mopf: \"\\ud835\\udd44\", mopf: \"\\ud835\\udd5e\", mp: \"\\u2213\", mscr: \"\\ud835\\udcc2\", Mscr: \"\\u2133\", mstpos: \"\\u223e\", Mu: \"\\u039c\", mu: \"\\u03bc\", multimap: \"\\u22b8\", mumap: \"\\u22b8\", nabla: \"\\u2207\", Nacute: \"\\u0143\", nacute: \"\\u0144\", nang: \"\\u2220\\u20d2\", nap: \"\\u2249\", napE: \"\\u2a70\\u0338\", napid: \"\\u224b\\u0338\", napos: \"\\u0149\", napprox: \"\\u2249\", natural: \"\\u266e\", naturals: \"\\u2115\", natur: \"\\u266e\", nbsp: \"\\xa0\", nbump: \"\\u224e\\u0338\", nbumpe: \"\\u224f\\u0338\", ncap: \"\\u2a43\", Ncaron: \"\\u0147\", ncaron: \"\\u0148\", Ncedil: \"\\u0145\", ncedil: \"\\u0146\", ncong: \"\\u2247\", ncongdot: \"\\u2a6d\\u0338\", ncup: \"\\u2a42\", Ncy: \"\\u041d\", ncy: \"\\u043d\", ndash: \"\\u2013\", nearhk: \"\\u2924\", nearr: \"\\u2197\", neArr: \"\\u21d7\", nearrow: \"\\u2197\", ne: \"\\u2260\", nedot: \"\\u2250\\u0338\", NegativeMediumSpace: \"\\u200b\", NegativeThickSpace: \"\\u200b\", NegativeThinSpace: \"\\u200b\", NegativeVeryThinSpace: \"\\u200b\", nequiv: \"\\u2262\", nesear: \"\\u2928\", nesim: \"\\u2242\\u0338\", NestedGreaterGreater: \"\\u226b\", NestedLessLess: \"\\u226a\", NewLine: \"\\n\", nexist: \"\\u2204\", nexists: \"\\u2204\", Nfr: \"\\ud835\\udd11\", nfr: \"\\ud835\\udd2b\", ngE: \"\\u2267\\u0338\", nge: \"\\u2271\", ngeq: \"\\u2271\", ngeqq: \"\\u2267\\u0338\", ngeqslant: \"\\u2a7e\\u0338\", nges: \"\\u2a7e\\u0338\", nGg: \"\\u22d9\\u0338\", ngsim: \"\\u2275\", nGt: \"\\u226b\\u20d2\", ngt: \"\\u226f\", ngtr: \"\\u226f\", nGtv: \"\\u226b\\u0338\", nharr: \"\\u21ae\", nhArr: \"\\u21ce\", nhpar: \"\\u2af2\", ni: \"\\u220b\", nis: \"\\u22fc\", nisd: \"\\u22fa\", niv: \"\\u220b\", NJcy: \"\\u040a\", njcy: \"\\u045a\", nlarr: \"\\u219a\", nlArr: \"\\u21cd\", nldr: \"\\u2025\", nlE: \"\\u2266\\u0338\", nle: \"\\u2270\", nleftarrow: \"\\u219a\", nLeftarrow: \"\\u21cd\", nleftrightarrow: \"\\u21ae\", nLeftrightarrow: \"\\u21ce\", nleq: \"\\u2270\", nleqq: \"\\u2266\\u0338\", nleqslant: \"\\u2a7d\\u0338\", nles: \"\\u2a7d\\u0338\", nless: \"\\u226e\", nLl: \"\\u22d8\\u0338\", nlsim: \"\\u2274\", nLt: \"\\u226a\\u20d2\", nlt: \"\\u226e\", nltri: \"\\u22ea\", nltrie: \"\\u22ec\", nLtv: \"\\u226a\\u0338\", nmid: \"\\u2224\", NoBreak: \"\\u2060\", NonBreakingSpace: \"\\xa0\", nopf: \"\\ud835\\udd5f\", Nopf: \"\\u2115\", Not: \"\\u2aec\", not: \"\\xac\", NotCongruent: \"\\u2262\", NotCupCap: \"\\u226d\", NotDoubleVerticalBar: \"\\u2226\", NotElement: \"\\u2209\", NotEqual: \"\\u2260\", NotEqualTilde: \"\\u2242\\u0338\", NotExists: \"\\u2204\", NotGreater: \"\\u226f\", NotGreaterEqual: \"\\u2271\", NotGreaterFullEqual: \"\\u2267\\u0338\", NotGreaterGreater: \"\\u226b\\u0338\", NotGreaterLess: \"\\u2279\", NotGreaterSlantEqual: \"\\u2a7e\\u0338\", NotGreaterTilde: \"\\u2275\", NotHumpDownHump: \"\\u224e\\u0338\", NotHumpEqual: \"\\u224f\\u0338\", notin: \"\\u2209\", notindot: \"\\u22f5\\u0338\", notinE: \"\\u22f9\\u0338\", notinva: \"\\u2209\", notinvb: \"\\u22f7\", notinvc: \"\\u22f6\", NotLeftTriangleBar: \"\\u29cf\\u0338\", NotLeftTriangle: \"\\u22ea\", NotLeftTriangleEqual: \"\\u22ec\", NotLess: \"\\u226e\", NotLessEqual: \"\\u2270\", NotLessGreater: \"\\u2278\", NotLessLess: \"\\u226a\\u0338\", NotLessSlantEqual: \"\\u2a7d\\u0338\", NotLessTilde: \"\\u2274\", NotNestedGreaterGreater: \"\\u2aa2\\u0338\", NotNestedLessLess: \"\\u2aa1\\u0338\", notni: \"\\u220c\", notniva: \"\\u220c\", notnivb: \"\\u22fe\", notnivc: \"\\u22fd\", NotPrecedes: \"\\u2280\", NotPrecedesEqual: \"\\u2aaf\\u0338\", NotPrecedesSlantEqual: \"\\u22e0\", NotReverseElement: \"\\u220c\", NotRightTriangleBar: \"\\u29d0\\u0338\", NotRightTriangle: \"\\u22eb\", NotRightTriangleEqual: \"\\u22ed\", NotSquareSubset: \"\\u228f\\u0338\", NotSquareSubsetEqual: \"\\u22e2\", NotSquareSuperset: \"\\u2290\\u0338\", NotSquareSupersetEqual: \"\\u22e3\", NotSubset: \"\\u2282\\u20d2\", NotSubsetEqual: \"\\u2288\", NotSucceeds: \"\\u2281\", NotSucceedsEqual: \"\\u2ab0\\u0338\", NotSucceedsSlantEqual: \"\\u22e1\", NotSucceedsTilde: \"\\u227f\\u0338\", NotSuperset: \"\\u2283\\u20d2\", NotSupersetEqual: \"\\u2289\", NotTilde: \"\\u2241\", NotTildeEqual: \"\\u2244\", NotTildeFullEqual: \"\\u2247\", NotTildeTilde: \"\\u2249\", NotVerticalBar: \"\\u2224\", nparallel: \"\\u2226\", npar: \"\\u2226\", nparsl: \"\\u2afd\\u20e5\", npart: \"\\u2202\\u0338\", npolint: \"\\u2a14\", npr: \"\\u2280\", nprcue: \"\\u22e0\", nprec: \"\\u2280\", npreceq: \"\\u2aaf\\u0338\", npre: \"\\u2aaf\\u0338\", nrarrc: \"\\u2933\\u0338\", nrarr: \"\\u219b\", nrArr: \"\\u21cf\", nrarrw: \"\\u219d\\u0338\", nrightarrow: \"\\u219b\", nRightarrow: \"\\u21cf\", nrtri: \"\\u22eb\", nrtrie: \"\\u22ed\", nsc: \"\\u2281\", nsccue: \"\\u22e1\", nsce: \"\\u2ab0\\u0338\", Nscr: \"\\ud835\\udca9\", nscr: \"\\ud835\\udcc3\", nshortmid: \"\\u2224\", nshortparallel: \"\\u2226\", nsim: \"\\u2241\", nsime: \"\\u2244\", nsimeq: \"\\u2244\", nsmid: \"\\u2224\", nspar: \"\\u2226\", nsqsube: \"\\u22e2\", nsqsupe: \"\\u22e3\", nsub: \"\\u2284\", nsubE: \"\\u2ac5\\u0338\", nsube: \"\\u2288\", nsubset: \"\\u2282\\u20d2\", nsubseteq: \"\\u2288\", nsubseteqq: \"\\u2ac5\\u0338\", nsucc: \"\\u2281\", nsucceq: \"\\u2ab0\\u0338\", nsup: \"\\u2285\", nsupE: \"\\u2ac6\\u0338\", nsupe: \"\\u2289\", nsupset: \"\\u2283\\u20d2\", nsupseteq: \"\\u2289\", nsupseteqq: \"\\u2ac6\\u0338\", ntgl: \"\\u2279\", Ntilde: \"\\xd1\", ntilde: \"\\xf1\", ntlg: \"\\u2278\", ntriangleleft: \"\\u22ea\", ntrianglelefteq: \"\\u22ec\", ntriangleright: \"\\u22eb\", ntrianglerighteq: \"\\u22ed\", Nu: \"\\u039d\", nu: \"\\u03bd\", num: \"#\", numero: \"\\u2116\", numsp: \"\\u2007\", nvap: \"\\u224d\\u20d2\", nvdash: \"\\u22ac\", nvDash: \"\\u22ad\", nVdash: \"\\u22ae\", nVDash: \"\\u22af\", nvge: \"\\u2265\\u20d2\", nvgt: \">\\u20d2\", nvHarr: \"\\u2904\", nvinfin: \"\\u29de\", nvlArr: \"\\u2902\", nvle: \"\\u2264\\u20d2\", nvlt: \"<\\u20d2\", nvltrie: \"\\u22b4\\u20d2\", nvrArr: \"\\u2903\", nvrtrie: \"\\u22b5\\u20d2\", nvsim: \"\\u223c\\u20d2\", nwarhk: \"\\u2923\", nwarr: \"\\u2196\", nwArr: \"\\u21d6\", nwarrow: \"\\u2196\", nwnear: \"\\u2927\", Oacute: \"\\xd3\", oacute: \"\\xf3\", oast: \"\\u229b\", Ocirc: \"\\xd4\", ocirc: \"\\xf4\", ocir: \"\\u229a\", Ocy: \"\\u041e\", ocy: \"\\u043e\", odash: \"\\u229d\", Odblac: \"\\u0150\", odblac: \"\\u0151\", odiv: \"\\u2a38\", odot: \"\\u2299\", odsold: \"\\u29bc\", OElig: \"\\u0152\", oelig: \"\\u0153\", ofcir: \"\\u29bf\", Ofr: \"\\ud835\\udd12\", ofr: \"\\ud835\\udd2c\", ogon: \"\\u02db\", Ograve: \"\\xd2\", ograve: \"\\xf2\", ogt: \"\\u29c1\", ohbar: \"\\u29b5\", ohm: \"\\u03a9\", oint: \"\\u222e\", olarr: \"\\u21ba\", olcir: \"\\u29be\", olcross: \"\\u29bb\", oline: \"\\u203e\", olt: \"\\u29c0\", Omacr: \"\\u014c\", omacr: \"\\u014d\", Omega: \"\\u03a9\", omega: \"\\u03c9\", Omicron: \"\\u039f\", omicron: \"\\u03bf\", omid: \"\\u29b6\", ominus: \"\\u2296\", Oopf: \"\\ud835\\udd46\", oopf: \"\\ud835\\udd60\", opar: \"\\u29b7\", OpenCurlyDoubleQuote: \"\\u201c\", OpenCurlyQuote: \"\\u2018\", operp: \"\\u29b9\", oplus: \"\\u2295\", orarr: \"\\u21bb\", Or: \"\\u2a54\", or: \"\\u2228\", ord: \"\\u2a5d\", order: \"\\u2134\", orderof: \"\\u2134\", ordf: \"\\xaa\", ordm: \"\\xba\", origof: \"\\u22b6\", oror: \"\\u2a56\", orslope: \"\\u2a57\", orv: \"\\u2a5b\", oS: \"\\u24c8\", Oscr: \"\\ud835\\udcaa\", oscr: \"\\u2134\", Oslash: \"\\xd8\", oslash: \"\\xf8\", osol: \"\\u2298\", Otilde: \"\\xd5\", otilde: \"\\xf5\", otimesas: \"\\u2a36\", Otimes: \"\\u2a37\", otimes: \"\\u2297\", Ouml: \"\\xd6\", ouml: \"\\xf6\", ovbar: \"\\u233d\", OverBar: \"\\u203e\", OverBrace: \"\\u23de\", OverBracket: \"\\u23b4\", OverParenthesis: \"\\u23dc\", para: \"\\xb6\", parallel: \"\\u2225\", par: \"\\u2225\", parsim: \"\\u2af3\", parsl: \"\\u2afd\", part: \"\\u2202\", PartialD: \"\\u2202\", Pcy: \"\\u041f\", pcy: \"\\u043f\", percnt: \"%\", period: \".\", permil: \"\\u2030\", perp: \"\\u22a5\", pertenk: \"\\u2031\", Pfr: \"\\ud835\\udd13\", pfr: \"\\ud835\\udd2d\", Phi: \"\\u03a6\", phi: \"\\u03c6\", phiv: \"\\u03d5\", phmmat: \"\\u2133\", phone: \"\\u260e\", Pi: \"\\u03a0\", pi: \"\\u03c0\", pitchfork: \"\\u22d4\", piv: \"\\u03d6\", planck: \"\\u210f\", planckh: \"\\u210e\", plankv: \"\\u210f\", plusacir: \"\\u2a23\", plusb: \"\\u229e\", pluscir: \"\\u2a22\", plus: \"+\", plusdo: \"\\u2214\", plusdu: \"\\u2a25\", pluse: \"\\u2a72\", PlusMinus: \"\\xb1\", plusmn: \"\\xb1\", plussim: \"\\u2a26\", plustwo: \"\\u2a27\", pm: \"\\xb1\", Poincareplane: \"\\u210c\", pointint: \"\\u2a15\", popf: \"\\ud835\\udd61\", Popf: \"\\u2119\", pound: \"\\xa3\", prap: \"\\u2ab7\", Pr: \"\\u2abb\", pr: \"\\u227a\", prcue: \"\\u227c\", precapprox: \"\\u2ab7\", prec: \"\\u227a\", preccurlyeq: \"\\u227c\", Precedes: \"\\u227a\", PrecedesEqual: \"\\u2aaf\", PrecedesSlantEqual: \"\\u227c\", PrecedesTilde: \"\\u227e\", preceq: \"\\u2aaf\", precnapprox: \"\\u2ab9\", precneqq: \"\\u2ab5\", precnsim: \"\\u22e8\", pre: \"\\u2aaf\", prE: \"\\u2ab3\", precsim: \"\\u227e\", prime: \"\\u2032\", Prime: \"\\u2033\", primes: \"\\u2119\", prnap: \"\\u2ab9\", prnE: \"\\u2ab5\", prnsim: \"\\u22e8\", prod: \"\\u220f\", Product: \"\\u220f\", profalar: \"\\u232e\", profline: \"\\u2312\", profsurf: \"\\u2313\", prop: \"\\u221d\", Proportional: \"\\u221d\", Proportion: \"\\u2237\", propto: \"\\u221d\", prsim: \"\\u227e\", prurel: \"\\u22b0\", Pscr: \"\\ud835\\udcab\", pscr: \"\\ud835\\udcc5\", Psi: \"\\u03a8\", psi: \"\\u03c8\", puncsp: \"\\u2008\", Qfr: \"\\ud835\\udd14\", qfr: \"\\ud835\\udd2e\", qint: \"\\u2a0c\", qopf: \"\\ud835\\udd62\", Qopf: \"\\u211a\", qprime: \"\\u2057\", Qscr: \"\\ud835\\udcac\", qscr: \"\\ud835\\udcc6\", quaternions: \"\\u210d\", quatint: \"\\u2a16\", quest: \"?\", questeq: \"\\u225f\", quot: '\"', QUOT: '\"', rAarr: \"\\u21db\", race: \"\\u223d\\u0331\", Racute: \"\\u0154\", racute: \"\\u0155\", radic: \"\\u221a\", raemptyv: \"\\u29b3\", rang: \"\\u27e9\", Rang: \"\\u27eb\", rangd: \"\\u2992\", range: \"\\u29a5\", rangle: \"\\u27e9\", raquo: \"\\xbb\", rarrap: \"\\u2975\", rarrb: \"\\u21e5\", rarrbfs: \"\\u2920\", rarrc: \"\\u2933\", rarr: \"\\u2192\", Rarr: \"\\u21a0\", rArr: \"\\u21d2\", rarrfs: \"\\u291e\", rarrhk: \"\\u21aa\", rarrlp: \"\\u21ac\", rarrpl: \"\\u2945\", rarrsim: \"\\u2974\", Rarrtl: \"\\u2916\", rarrtl: \"\\u21a3\", rarrw: \"\\u219d\", ratail: \"\\u291a\", rAtail: \"\\u291c\", ratio: \"\\u2236\", rationals: \"\\u211a\", rbarr: \"\\u290d\", rBarr: \"\\u290f\", RBarr: \"\\u2910\", rbbrk: \"\\u2773\", rbrace: \"}\", rbrack: \"]\", rbrke: \"\\u298c\", rbrksld: \"\\u298e\", rbrkslu: \"\\u2990\", Rcaron: \"\\u0158\", rcaron: \"\\u0159\", Rcedil: \"\\u0156\", rcedil: \"\\u0157\", rceil: \"\\u2309\", rcub: \"}\", Rcy: \"\\u0420\", rcy: \"\\u0440\", rdca: \"\\u2937\", rdldhar: \"\\u2969\", rdquo: \"\\u201d\", rdquor: \"\\u201d\", rdsh: \"\\u21b3\", real: \"\\u211c\", realine: \"\\u211b\", realpart: \"\\u211c\", reals: \"\\u211d\", Re: \"\\u211c\", rect: \"\\u25ad\", reg: \"\\xae\", REG: \"\\xae\", ReverseElement: \"\\u220b\", ReverseEquilibrium: \"\\u21cb\", ReverseUpEquilibrium: \"\\u296f\", rfisht: \"\\u297d\", rfloor: \"\\u230b\", rfr: \"\\ud835\\udd2f\", Rfr: \"\\u211c\", rHar: \"\\u2964\", rhard: \"\\u21c1\", rharu: \"\\u21c0\", rharul: \"\\u296c\", Rho: \"\\u03a1\", rho: \"\\u03c1\", rhov: \"\\u03f1\", RightAngleBracket: \"\\u27e9\", RightArrowBar: \"\\u21e5\", rightarrow: \"\\u2192\", RightArrow: \"\\u2192\", Rightarrow: \"\\u21d2\", RightArrowLeftArrow: \"\\u21c4\", rightarrowtail: \"\\u21a3\", RightCeiling: \"\\u2309\", RightDoubleBracket: \"\\u27e7\", RightDownTeeVector: \"\\u295d\", RightDownVectorBar: \"\\u2955\", RightDownVector: \"\\u21c2\", RightFloor: \"\\u230b\", rightharpoondown: \"\\u21c1\", rightharpoonup: \"\\u21c0\", rightleftarrows: \"\\u21c4\", rightleftharpoons: \"\\u21cc\", rightrightarrows: \"\\u21c9\", rightsquigarrow: \"\\u219d\", RightTeeArrow: \"\\u21a6\", RightTee: \"\\u22a2\", RightTeeVector: \"\\u295b\", rightthreetimes: \"\\u22cc\", RightTriangleBar: \"\\u29d0\", RightTriangle: \"\\u22b3\", RightTriangleEqual: \"\\u22b5\", RightUpDownVector: \"\\u294f\", RightUpTeeVector: \"\\u295c\", RightUpVectorBar: \"\\u2954\", RightUpVector: \"\\u21be\", RightVectorBar: \"\\u2953\", RightVector: \"\\u21c0\", ring: \"\\u02da\", risingdotseq: \"\\u2253\", rlarr: \"\\u21c4\", rlhar: \"\\u21cc\", rlm: \"\\u200f\", rmoustache: \"\\u23b1\", rmoust: \"\\u23b1\", rnmid: \"\\u2aee\", roang: \"\\u27ed\", roarr: \"\\u21fe\", robrk: \"\\u27e7\", ropar: \"\\u2986\", ropf: \"\\ud835\\udd63\", Ropf: \"\\u211d\", roplus: \"\\u2a2e\", rotimes: \"\\u2a35\", RoundImplies: \"\\u2970\", rpar: \")\", rpargt: \"\\u2994\", rppolint: \"\\u2a12\", rrarr: \"\\u21c9\", Rrightarrow: \"\\u21db\", rsaquo: \"\\u203a\", rscr: \"\\ud835\\udcc7\", Rscr: \"\\u211b\", rsh: \"\\u21b1\", Rsh: \"\\u21b1\", rsqb: \"]\", rsquo: \"\\u2019\", rsquor: \"\\u2019\", rthree: \"\\u22cc\", rtimes: \"\\u22ca\", rtri: \"\\u25b9\", rtrie: \"\\u22b5\", rtrif: \"\\u25b8\", rtriltri: \"\\u29ce\", RuleDelayed: \"\\u29f4\", ruluhar: \"\\u2968\", rx: \"\\u211e\", Sacute: \"\\u015a\", sacute: \"\\u015b\", sbquo: \"\\u201a\", scap: \"\\u2ab8\", Scaron: \"\\u0160\", scaron: \"\\u0161\", Sc: \"\\u2abc\", sc: \"\\u227b\", sccue: \"\\u227d\", sce: \"\\u2ab0\", scE: \"\\u2ab4\", Scedil: \"\\u015e\", scedil: \"\\u015f\", Scirc: \"\\u015c\", scirc: \"\\u015d\", scnap: \"\\u2aba\", scnE: \"\\u2ab6\", scnsim: \"\\u22e9\", scpolint: \"\\u2a13\", scsim: \"\\u227f\", Scy: \"\\u0421\", scy: \"\\u0441\", sdotb: \"\\u22a1\", sdot: \"\\u22c5\", sdote: \"\\u2a66\", searhk: \"\\u2925\", searr: \"\\u2198\", seArr: \"\\u21d8\", searrow: \"\\u2198\", sect: \"\\xa7\", semi: \";\", seswar: \"\\u2929\", setminus: \"\\u2216\", setmn: \"\\u2216\", sext: \"\\u2736\", Sfr: \"\\ud835\\udd16\", sfr: \"\\ud835\\udd30\", sfrown: \"\\u2322\", sharp: \"\\u266f\", SHCHcy: \"\\u0429\", shchcy: \"\\u0449\", SHcy: \"\\u0428\", shcy: \"\\u0448\", ShortDownArrow: \"\\u2193\", ShortLeftArrow: \"\\u2190\", shortmid: \"\\u2223\", shortparallel: \"\\u2225\", ShortRightArrow: \"\\u2192\", ShortUpArrow: \"\\u2191\", shy: \"\\xad\", Sigma: \"\\u03a3\", sigma: \"\\u03c3\", sigmaf: \"\\u03c2\", sigmav: \"\\u03c2\", sim: \"\\u223c\", simdot: \"\\u2a6a\", sime: \"\\u2243\", simeq: \"\\u2243\", simg: \"\\u2a9e\", simgE: \"\\u2aa0\", siml: \"\\u2a9d\", simlE: \"\\u2a9f\", simne: \"\\u2246\", simplus: \"\\u2a24\", simrarr: \"\\u2972\", slarr: \"\\u2190\", SmallCircle: \"\\u2218\", smallsetminus: \"\\u2216\", smashp: \"\\u2a33\", smeparsl: \"\\u29e4\", smid: \"\\u2223\", smile: \"\\u2323\", smt: \"\\u2aaa\", smte: \"\\u2aac\", smtes: \"\\u2aac\\ufe00\", SOFTcy: \"\\u042c\", softcy: \"\\u044c\", solbar: \"\\u233f\", solb: \"\\u29c4\", sol: \"/\", Sopf: \"\\ud835\\udd4a\", sopf: \"\\ud835\\udd64\", spades: \"\\u2660\", spadesuit: \"\\u2660\", spar: \"\\u2225\", sqcap: \"\\u2293\", sqcaps: \"\\u2293\\ufe00\", sqcup: \"\\u2294\", sqcups: \"\\u2294\\ufe00\", Sqrt: \"\\u221a\", sqsub: \"\\u228f\", sqsube: \"\\u2291\", sqsubset: \"\\u228f\", sqsubseteq: \"\\u2291\", sqsup: \"\\u2290\", sqsupe: \"\\u2292\", sqsupset: \"\\u2290\", sqsupseteq: \"\\u2292\", square: \"\\u25a1\", Square: \"\\u25a1\", SquareIntersection: \"\\u2293\", SquareSubset: \"\\u228f\", SquareSubsetEqual: \"\\u2291\", SquareSuperset: \"\\u2290\", SquareSupersetEqual: \"\\u2292\", SquareUnion: \"\\u2294\", squarf: \"\\u25aa\", squ: \"\\u25a1\", squf: \"\\u25aa\", srarr: \"\\u2192\", Sscr: \"\\ud835\\udcae\", sscr: \"\\ud835\\udcc8\", ssetmn: \"\\u2216\", ssmile: \"\\u2323\", sstarf: \"\\u22c6\", Star: \"\\u22c6\", star: \"\\u2606\", starf: \"\\u2605\", straightepsilon: \"\\u03f5\", straightphi: \"\\u03d5\", strns: \"\\xaf\", sub: \"\\u2282\", Sub: \"\\u22d0\", subdot: \"\\u2abd\", subE: \"\\u2ac5\", sube: \"\\u2286\", subedot: \"\\u2ac3\", submult: \"\\u2ac1\", subnE: \"\\u2acb\", subne: \"\\u228a\", subplus: \"\\u2abf\", subrarr: \"\\u2979\", subset: \"\\u2282\", Subset: \"\\u22d0\", subseteq: \"\\u2286\", subseteqq: \"\\u2ac5\", SubsetEqual: \"\\u2286\", subsetneq: \"\\u228a\", subsetneqq: \"\\u2acb\", subsim: \"\\u2ac7\", subsub: \"\\u2ad5\", subsup: \"\\u2ad3\", succapprox: \"\\u2ab8\", succ: \"\\u227b\", succcurlyeq: \"\\u227d\", Succeeds: \"\\u227b\", SucceedsEqual: \"\\u2ab0\", SucceedsSlantEqual: \"\\u227d\", SucceedsTilde: \"\\u227f\", succeq: \"\\u2ab0\", succnapprox: \"\\u2aba\", succneqq: \"\\u2ab6\", succnsim: \"\\u22e9\", succsim: \"\\u227f\", SuchThat: \"\\u220b\", sum: \"\\u2211\", Sum: \"\\u2211\", sung: \"\\u266a\", sup1: \"\\xb9\", sup2: \"\\xb2\", sup3: \"\\xb3\", sup: \"\\u2283\", Sup: \"\\u22d1\", supdot: \"\\u2abe\", supdsub: \"\\u2ad8\", supE: \"\\u2ac6\", supe: \"\\u2287\", supedot: \"\\u2ac4\", Superset: \"\\u2283\", SupersetEqual: \"\\u2287\", suphsol: \"\\u27c9\", suphsub: \"\\u2ad7\", suplarr: \"\\u297b\", supmult: \"\\u2ac2\", supnE: \"\\u2acc\", supne: \"\\u228b\", supplus: \"\\u2ac0\", supset: \"\\u2283\", Supset: \"\\u22d1\", supseteq: \"\\u2287\", supseteqq: \"\\u2ac6\", supsetneq: \"\\u228b\", supsetneqq: \"\\u2acc\", supsim: \"\\u2ac8\", supsub: \"\\u2ad4\", supsup: \"\\u2ad6\", swarhk: \"\\u2926\", swarr: \"\\u2199\", swArr: \"\\u21d9\", swarrow: \"\\u2199\", swnwar: \"\\u292a\", szlig: \"\\xdf\", Tab: \"\\t\", target: \"\\u2316\", Tau: \"\\u03a4\", tau: \"\\u03c4\", tbrk: \"\\u23b4\", Tcaron: \"\\u0164\", tcaron: \"\\u0165\", Tcedil: \"\\u0162\", tcedil: \"\\u0163\", Tcy: \"\\u0422\", tcy: \"\\u0442\", tdot: \"\\u20db\", telrec: \"\\u2315\", Tfr: \"\\ud835\\udd17\", tfr: \"\\ud835\\udd31\", there4: \"\\u2234\", therefore: \"\\u2234\", Therefore: \"\\u2234\", Theta: \"\\u0398\", theta: \"\\u03b8\", thetasym: \"\\u03d1\", thetav: \"\\u03d1\", thickapprox: \"\\u2248\", thicksim: \"\\u223c\", ThickSpace: \"\\u205f\\u200a\", ThinSpace: \"\\u2009\", thinsp: \"\\u2009\", thkap: \"\\u2248\", thksim: \"\\u223c\", THORN: \"\\xde\", thorn: \"\\xfe\", tilde: \"\\u02dc\", Tilde: \"\\u223c\", TildeEqual: \"\\u2243\", TildeFullEqual: \"\\u2245\", TildeTilde: \"\\u2248\", timesbar: \"\\u2a31\", timesb: \"\\u22a0\", times: \"\\xd7\", timesd: \"\\u2a30\", tint: \"\\u222d\", toea: \"\\u2928\", topbot: \"\\u2336\", topcir: \"\\u2af1\", top: \"\\u22a4\", Topf: \"\\ud835\\udd4b\", topf: \"\\ud835\\udd65\", topfork: \"\\u2ada\", tosa: \"\\u2929\", tprime: \"\\u2034\", trade: \"\\u2122\", TRADE: \"\\u2122\", triangle: \"\\u25b5\", triangledown: \"\\u25bf\", triangleleft: \"\\u25c3\", trianglelefteq: \"\\u22b4\", triangleq: \"\\u225c\", triangleright: \"\\u25b9\", trianglerighteq: \"\\u22b5\", tridot: \"\\u25ec\", trie: \"\\u225c\", triminus: \"\\u2a3a\", TripleDot: \"\\u20db\", triplus: \"\\u2a39\", trisb: \"\\u29cd\", tritime: \"\\u2a3b\", trpezium: \"\\u23e2\", Tscr: \"\\ud835\\udcaf\", tscr: \"\\ud835\\udcc9\", TScy: \"\\u0426\", tscy: \"\\u0446\", TSHcy: \"\\u040b\", tshcy: \"\\u045b\", Tstrok: \"\\u0166\", tstrok: \"\\u0167\", twixt: \"\\u226c\", twoheadleftarrow: \"\\u219e\", twoheadrightarrow: \"\\u21a0\", Uacute: \"\\xda\", uacute: \"\\xfa\", uarr: \"\\u2191\", Uarr: \"\\u219f\", uArr: \"\\u21d1\", Uarrocir: \"\\u2949\", Ubrcy: \"\\u040e\", ubrcy: \"\\u045e\", Ubreve: \"\\u016c\", ubreve: \"\\u016d\", Ucirc: \"\\xdb\", ucirc: \"\\xfb\", Ucy: \"\\u0423\", ucy: \"\\u0443\", udarr: \"\\u21c5\", Udblac: \"\\u0170\", udblac: \"\\u0171\", udhar: \"\\u296e\", ufisht: \"\\u297e\", Ufr: \"\\ud835\\udd18\", ufr: \"\\ud835\\udd32\", Ugrave: \"\\xd9\", ugrave: \"\\xf9\", uHar: \"\\u2963\", uharl: \"\\u21bf\", uharr: \"\\u21be\", uhblk: \"\\u2580\", ulcorn: \"\\u231c\", ulcorner: \"\\u231c\", ulcrop: \"\\u230f\", ultri: \"\\u25f8\", Umacr: \"\\u016a\", umacr: \"\\u016b\", uml: \"\\xa8\", UnderBar: \"_\", UnderBrace: \"\\u23df\", UnderBracket: \"\\u23b5\", UnderParenthesis: \"\\u23dd\", Union: \"\\u22c3\", UnionPlus: \"\\u228e\", Uogon: \"\\u0172\", uogon: \"\\u0173\", Uopf: \"\\ud835\\udd4c\", uopf: \"\\ud835\\udd66\", UpArrowBar: \"\\u2912\", uparrow: \"\\u2191\", UpArrow: \"\\u2191\", Uparrow: \"\\u21d1\", UpArrowDownArrow: \"\\u21c5\", updownarrow: \"\\u2195\", UpDownArrow: \"\\u2195\", Updownarrow: \"\\u21d5\", UpEquilibrium: \"\\u296e\", upharpoonleft: \"\\u21bf\", upharpoonright: \"\\u21be\", uplus: \"\\u228e\", UpperLeftArrow: \"\\u2196\", UpperRightArrow: \"\\u2197\", upsi: \"\\u03c5\", Upsi: \"\\u03d2\", upsih: \"\\u03d2\", Upsilon: \"\\u03a5\", upsilon: \"\\u03c5\", UpTeeArrow: \"\\u21a5\", UpTee: \"\\u22a5\", upuparrows: \"\\u21c8\", urcorn: \"\\u231d\", urcorner: \"\\u231d\", urcrop: \"\\u230e\", Uring: \"\\u016e\", uring: \"\\u016f\", urtri: \"\\u25f9\", Uscr: \"\\ud835\\udcb0\", uscr: \"\\ud835\\udcca\", utdot: \"\\u22f0\", Utilde: \"\\u0168\", utilde: \"\\u0169\", utri: \"\\u25b5\", utrif: \"\\u25b4\", uuarr: \"\\u21c8\", Uuml: \"\\xdc\", uuml: \"\\xfc\", uwangle: \"\\u29a7\", vangrt: \"\\u299c\", varepsilon: \"\\u03f5\", varkappa: \"\\u03f0\", varnothing: \"\\u2205\", varphi: \"\\u03d5\", varpi: \"\\u03d6\", varpropto: \"\\u221d\", varr: \"\\u2195\", vArr: \"\\u21d5\", varrho: \"\\u03f1\", varsigma: \"\\u03c2\", varsubsetneq: \"\\u228a\\ufe00\", varsubsetneqq: \"\\u2acb\\ufe00\", varsupsetneq: \"\\u228b\\ufe00\", varsupsetneqq: \"\\u2acc\\ufe00\", vartheta: \"\\u03d1\", vartriangleleft: \"\\u22b2\", vartriangleright: \"\\u22b3\", vBar: \"\\u2ae8\", Vbar: \"\\u2aeb\", vBarv: \"\\u2ae9\", Vcy: \"\\u0412\", vcy: \"\\u0432\", vdash: \"\\u22a2\", vDash: \"\\u22a8\", Vdash: \"\\u22a9\", VDash: \"\\u22ab\", Vdashl: \"\\u2ae6\", veebar: \"\\u22bb\", vee: \"\\u2228\", Vee: \"\\u22c1\", veeeq: \"\\u225a\", vellip: \"\\u22ee\", verbar: \"|\", Verbar: \"\\u2016\", vert: \"|\", Vert: \"\\u2016\", VerticalBar: \"\\u2223\", VerticalLine: \"|\", VerticalSeparator: \"\\u2758\", VerticalTilde: \"\\u2240\", VeryThinSpace: \"\\u200a\", Vfr: \"\\ud835\\udd19\", vfr: \"\\ud835\\udd33\", vltri: \"\\u22b2\", vnsub: \"\\u2282\\u20d2\", vnsup: \"\\u2283\\u20d2\", Vopf: \"\\ud835\\udd4d\", vopf: \"\\ud835\\udd67\", vprop: \"\\u221d\", vrtri: \"\\u22b3\", Vscr: \"\\ud835\\udcb1\", vscr: \"\\ud835\\udccb\", vsubnE: \"\\u2acb\\ufe00\", vsubne: \"\\u228a\\ufe00\", vsupnE: \"\\u2acc\\ufe00\", vsupne: \"\\u228b\\ufe00\", Vvdash: \"\\u22aa\", vzigzag: \"\\u299a\", Wcirc: \"\\u0174\", wcirc: \"\\u0175\", wedbar: \"\\u2a5f\", wedge: \"\\u2227\", Wedge: \"\\u22c0\", wedgeq: \"\\u2259\", weierp: \"\\u2118\", Wfr: \"\\ud835\\udd1a\", wfr: \"\\ud835\\udd34\", Wopf: \"\\ud835\\udd4e\", wopf: \"\\ud835\\udd68\", wp: \"\\u2118\", wr: \"\\u2240\", wreath: \"\\u2240\", Wscr: \"\\ud835\\udcb2\", wscr: \"\\ud835\\udccc\", xcap: \"\\u22c2\", xcirc: \"\\u25ef\", xcup: \"\\u22c3\", xdtri: \"\\u25bd\", Xfr: \"\\ud835\\udd1b\", xfr: \"\\ud835\\udd35\", xharr: \"\\u27f7\", xhArr: \"\\u27fa\", Xi: \"\\u039e\", xi: \"\\u03be\", xlarr: \"\\u27f5\", xlArr: \"\\u27f8\", xmap: \"\\u27fc\", xnis: \"\\u22fb\", xodot: \"\\u2a00\", Xopf: \"\\ud835\\udd4f\", xopf: \"\\ud835\\udd69\", xoplus: \"\\u2a01\", xotime: \"\\u2a02\", xrarr: \"\\u27f6\", xrArr: \"\\u27f9\", Xscr: \"\\ud835\\udcb3\", xscr: \"\\ud835\\udccd\", xsqcup: \"\\u2a06\", xuplus: \"\\u2a04\", xutri: \"\\u25b3\", xvee: \"\\u22c1\", xwedge: \"\\u22c0\", Yacute: \"\\xdd\", yacute: \"\\xfd\", YAcy: \"\\u042f\", yacy: \"\\u044f\", Ycirc: \"\\u0176\", ycirc: \"\\u0177\", Ycy: \"\\u042b\", ycy: \"\\u044b\", yen: \"\\xa5\", Yfr: \"\\ud835\\udd1c\", yfr: \"\\ud835\\udd36\", YIcy: \"\\u0407\", yicy: \"\\u0457\", Yopf: \"\\ud835\\udd50\", yopf: \"\\ud835\\udd6a\", Yscr: \"\\ud835\\udcb4\", yscr: \"\\ud835\\udcce\", YUcy: \"\\u042e\", yucy: \"\\u044e\", yuml: \"\\xff\", Yuml: \"\\u0178\", Zacute: \"\\u0179\", zacute: \"\\u017a\", Zcaron: \"\\u017d\", zcaron: \"\\u017e\", Zcy: \"\\u0417\", zcy: \"\\u0437\", Zdot: \"\\u017b\", zdot: \"\\u017c\", zeetrf: \"\\u2128\", ZeroWidthSpace: \"\\u200b\", Zeta: \"\\u0396\", zeta: \"\\u03b6\", zfr: \"\\ud835\\udd37\", Zfr: \"\\u2128\", ZHcy: \"\\u0416\", zhcy: \"\\u0436\", zigrarr: \"\\u21dd\", zopf: \"\\ud835\\udd6b\", Zopf: \"\\u2124\", Zscr: \"\\ud835\\udcb5\", zscr: \"\\ud835\\udccf\", zwj: \"\\u200d\", zwnj: \"\\u200c\" };\n    }, {}], 53: [function (e, r, t) {\n      \"use strict\";\n      function n(e) {\n        var r = Array.prototype.slice.call(arguments, 1);return r.forEach(function (r) {\n          r && Object.keys(r).forEach(function (t) {\n            e[t] = r[t];\n          });\n        }), e;\n      }function s(e) {\n        return Object.prototype.toString.call(e);\n      }function o(e) {\n        return \"[object String]\" === s(e);\n      }function i(e) {\n        return \"[object Object]\" === s(e);\n      }function a(e) {\n        return \"[object RegExp]\" === s(e);\n      }function c(e) {\n        return \"[object Function]\" === s(e);\n      }function l(e) {\n        return e.replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"\\\\$&\");\n      }function u(e) {\n        return Object.keys(e || {}).reduce(function (e, r) {\n          return e || b.hasOwnProperty(r);\n        }, !1);\n      }function p(e) {\n        e.__index__ = -1, e.__text_cache__ = \"\";\n      }function h(e) {\n        return function (r, t) {\n          var n = r.slice(t);return e.test(n) ? n.match(e)[0].length : 0;\n        };\n      }function f() {\n        return function (e, r) {\n          r.normalize(e);\n        };\n      }function d(r) {\n        function t(e) {\n          return e.replace(\"%TLDS%\", s.src_tlds);\n        }function n(e, r) {\n          throw new Error('(LinkifyIt) Invalid schema \"' + e + '\": ' + r);\n        }var s = r.re = e(\"./lib/re\")(r.__opts__),\n            u = r.__tlds__.slice();r.onCompile(), r.__tlds_replaced__ || u.push(v), u.push(s.src_xn), s.src_tlds = u.join(\"|\"), s.email_fuzzy = RegExp(t(s.tpl_email_fuzzy), \"i\"), s.link_fuzzy = RegExp(t(s.tpl_link_fuzzy), \"i\"), s.link_no_ip_fuzzy = RegExp(t(s.tpl_link_no_ip_fuzzy), \"i\"), s.host_fuzzy_test = RegExp(t(s.tpl_host_fuzzy_test), \"i\");var d = [];r.__compiled__ = {}, Object.keys(r.__schemas__).forEach(function (e) {\n          var t = r.__schemas__[e];if (null !== t) {\n            var s = { validate: null, link: null };return r.__compiled__[e] = s, i(t) ? (a(t.validate) ? s.validate = h(t.validate) : c(t.validate) ? s.validate = t.validate : n(e, t), void (c(t.normalize) ? s.normalize = t.normalize : t.normalize ? n(e, t) : s.normalize = f())) : o(t) ? void d.push(e) : void n(e, t);\n          }\n        }), d.forEach(function (e) {\n          r.__compiled__[r.__schemas__[e]] && (r.__compiled__[e].validate = r.__compiled__[r.__schemas__[e]].validate, r.__compiled__[e].normalize = r.__compiled__[r.__schemas__[e]].normalize);\n        }), r.__compiled__[\"\"] = { validate: null, normalize: f() };var m = Object.keys(r.__compiled__).filter(function (e) {\n          return e.length > 0 && r.__compiled__[e];\n        }).map(l).join(\"|\");r.re.schema_test = RegExp(\"(^|(?!_)(?:[><]|\" + s.src_ZPCc + \"))(\" + m + \")\", \"i\"), r.re.schema_search = RegExp(\"(^|(?!_)(?:[><]|\" + s.src_ZPCc + \"))(\" + m + \")\", \"ig\"), r.re.pretest = RegExp(\"(\" + r.re.schema_test.source + \")|(\" + r.re.host_fuzzy_test.source + \")|@\", \"i\"), p(r);\n      }function m(e, r) {\n        var t = e.__index__,\n            n = e.__last_index__,\n            s = e.__text_cache__.slice(t, n);this.schema = e.__schema__.toLowerCase(), this.index = t + r, this.lastIndex = n + r, this.raw = s, this.text = s, this.url = s;\n      }function _(e, r) {\n        var t = new m(e, r);return e.__compiled__[t.schema].normalize(t, e), t;\n      }function g(e, r) {\n        return this instanceof g ? (r || u(e) && (r = e, e = {}), this.__opts__ = n({}, b, r), this.__index__ = -1, this.__last_index__ = -1, this.__schema__ = \"\", this.__text_cache__ = \"\", this.__schemas__ = n({}, k, e), this.__compiled__ = {}, this.__tlds__ = y, this.__tlds_replaced__ = !1, this.re = {}, void d(this)) : new g(e, r);\n      }var b = { fuzzyLink: !0, fuzzyEmail: !0, fuzzyIP: !1 },\n          k = { \"http:\": { validate: function (e, r, t) {\n            var n = e.slice(r);return t.re.http || (t.re.http = new RegExp(\"^\\\\/\\\\/\" + t.re.src_auth + t.re.src_host_port_strict + t.re.src_path, \"i\")), t.re.http.test(n) ? n.match(t.re.http)[0].length : 0;\n          } }, \"https:\": \"http:\", \"ftp:\": \"http:\", \"//\": { validate: function (e, r, t) {\n            var n = e.slice(r);return t.re.no_http || (t.re.no_http = new RegExp(\"^\" + t.re.src_auth + \"(?:localhost|(?:(?:\" + t.re.src_domain + \")\\\\.)+\" + t.re.src_domain_root + \")\" + t.re.src_port + t.re.src_host_terminator + t.re.src_path, \"i\")), t.re.no_http.test(n) ? r >= 3 && \":\" === e[r - 3] ? 0 : r >= 3 && \"/\" === e[r - 3] ? 0 : n.match(t.re.no_http)[0].length : 0;\n          } }, \"mailto:\": { validate: function (e, r, t) {\n            var n = e.slice(r);return t.re.mailto || (t.re.mailto = new RegExp(\"^\" + t.re.src_email_name + \"@\" + t.re.src_host_strict, \"i\")), t.re.mailto.test(n) ? n.match(t.re.mailto)[0].length : 0;\n          } } },\n          v = \"a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]\",\n          y = \"biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\\u0440\\u0444\".split(\"|\");g.prototype.add = function (e, r) {\n        return this.__schemas__[e] = r, d(this), this;\n      }, g.prototype.set = function (e) {\n        return this.__opts__ = n(this.__opts__, e), this;\n      }, g.prototype.test = function (e) {\n        if (this.__text_cache__ = e, this.__index__ = -1, !e.length) return !1;var r, t, n, s, o, i, a, c, l;if (this.re.schema_test.test(e)) for (a = this.re.schema_search, a.lastIndex = 0; null !== (r = a.exec(e));) if (s = this.testSchemaAt(e, r[2], a.lastIndex)) {\n          this.__schema__ = r[2], this.__index__ = r.index + r[1].length, this.__last_index__ = r.index + r[0].length + s;break;\n        }return this.__opts__.fuzzyLink && this.__compiled__[\"http:\"] && (c = e.search(this.re.host_fuzzy_test), c >= 0 && (this.__index__ < 0 || c < this.__index__) && null !== (t = e.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) && (o = t.index + t[1].length, (this.__index__ < 0 || o < this.__index__) && (this.__schema__ = \"\", this.__index__ = o, this.__last_index__ = t.index + t[0].length))), this.__opts__.fuzzyEmail && this.__compiled__[\"mailto:\"] && (l = e.indexOf(\"@\"), l >= 0 && null !== (n = e.match(this.re.email_fuzzy)) && (o = n.index + n[1].length, i = n.index + n[0].length, (this.__index__ < 0 || o < this.__index__ || o === this.__index__ && i > this.__last_index__) && (this.__schema__ = \"mailto:\", this.__index__ = o, this.__last_index__ = i))), this.__index__ >= 0;\n      }, g.prototype.pretest = function (e) {\n        return this.re.pretest.test(e);\n      }, g.prototype.testSchemaAt = function (e, r, t) {\n        return this.__compiled__[r.toLowerCase()] ? this.__compiled__[r.toLowerCase()].validate(e, t, this) : 0;\n      }, g.prototype.match = function (e) {\n        var r = 0,\n            t = [];this.__index__ >= 0 && this.__text_cache__ === e && (t.push(_(this, r)), r = this.__last_index__);for (var n = r ? e.slice(r) : e; this.test(n);) t.push(_(this, r)), n = n.slice(this.__last_index__), r += this.__last_index__;return t.length ? t : null;\n      }, g.prototype.tlds = function (e, r) {\n        return e = Array.isArray(e) ? e : [e], r ? (this.__tlds__ = this.__tlds__.concat(e).sort().filter(function (e, r, t) {\n          return e !== t[r - 1];\n        }).reverse(), d(this), this) : (this.__tlds__ = e.slice(), this.__tlds_replaced__ = !0, d(this), this);\n      }, g.prototype.normalize = function (e) {\n        e.schema || (e.url = \"http://\" + e.url), \"mailto:\" !== e.schema || /^mailto:/i.test(e.url) || (e.url = \"mailto:\" + e.url);\n      }, g.prototype.onCompile = function () {}, r.exports = g;\n    }, { \"./lib/re\": 54 }], 54: [function (e, r, t) {\n      \"use strict\";\n      r.exports = function (r) {\n        var t = {};return t.src_Any = e(\"uc.micro/properties/Any/regex\").source, t.src_Cc = e(\"uc.micro/categories/Cc/regex\").source, t.src_Z = e(\"uc.micro/categories/Z/regex\").source, t.src_P = e(\"uc.micro/categories/P/regex\").source, t.src_ZPCc = [t.src_Z, t.src_P, t.src_Cc].join(\"|\"), t.src_ZCc = [t.src_Z, t.src_Cc].join(\"|\"), t.src_pseudo_letter = \"(?:(?!>|<|\" + t.src_ZPCc + \")\" + t.src_Any + \")\", t.src_ip4 = \"(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\", t.src_auth = \"(?:(?:(?!\" + t.src_ZCc + \"|[@/\\\\[\\\\]()]).)+@)?\", t.src_port = \"(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?\", t.src_host_terminator = \"(?=$|>|<|\" + t.src_ZPCc + \")(?!-|_|:\\\\d|\\\\.-|\\\\.(?!$|\" + t.src_ZPCc + \"))\", t.src_path = \"(?:[/?#](?:(?!\" + t.src_ZCc + \"|[()[\\\\]{}.,\\\"'?!\\\\-<>]).|\\\\[(?:(?!\" + t.src_ZCc + \"|\\\\]).)*\\\\]|\\\\((?:(?!\" + t.src_ZCc + \"|[)]).)*\\\\)|\\\\{(?:(?!\" + t.src_ZCc + '|[}]).)*\\\\}|\\\\\"(?:(?!' + t.src_ZCc + '|[\"]).)+\\\\\"|\\\\\\'(?:(?!' + t.src_ZCc + \"|[']).)+\\\\'|\\\\'(?=\" + t.src_pseudo_letter + \"|[-]).|\\\\.{2,3}[a-zA-Z0-9%/]|\\\\.(?!\" + t.src_ZCc + \"|[.]).|\" + (r && r[\"---\"] ? \"\\\\-(?!--(?:[^-]|$))(?:-*)|\" : \"\\\\-+|\") + \"\\\\,(?!\" + t.src_ZCc + \").|\\\\!(?!\" + t.src_ZCc + \"|[!]).|\\\\?(?!\" + t.src_ZCc + \"|[?]).)+|\\\\/)?\", t.src_email_name = '[\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]+', t.src_xn = \"xn--[a-z0-9\\\\-]{1,59}\", t.src_domain_root = \"(?:\" + t.src_xn + \"|\" + t.src_pseudo_letter + \"{1,63})\", t.src_domain = \"(?:\" + t.src_xn + \"|(?:\" + t.src_pseudo_letter + \")|(?:\" + t.src_pseudo_letter + \"(?:-(?!-)|\" + t.src_pseudo_letter + \"){0,61}\" + t.src_pseudo_letter + \"))\", t.src_host = \"(?:(?:(?:(?:\" + t.src_domain + \")\\\\.)*\" + t.src_domain + \"))\", t.tpl_host_fuzzy = \"(?:\" + t.src_ip4 + \"|(?:(?:(?:\" + t.src_domain + \")\\\\.)+(?:%TLDS%)))\", t.tpl_host_no_ip_fuzzy = \"(?:(?:(?:\" + t.src_domain + \")\\\\.)+(?:%TLDS%))\", t.src_host_strict = t.src_host + t.src_host_terminator, t.tpl_host_fuzzy_strict = t.tpl_host_fuzzy + t.src_host_terminator, t.src_host_port_strict = t.src_host + t.src_port + t.src_host_terminator, t.tpl_host_port_fuzzy_strict = t.tpl_host_fuzzy + t.src_port + t.src_host_terminator, t.tpl_host_port_no_ip_fuzzy_strict = t.tpl_host_no_ip_fuzzy + t.src_port + t.src_host_terminator, t.tpl_host_fuzzy_test = \"localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:\" + t.src_ZPCc + \"|>|$))\", t.tpl_email_fuzzy = \"(^|<|>|\\\\(|\" + t.src_ZCc + \")(\" + t.src_email_name + \"@\" + t.tpl_host_fuzzy_strict + \")\", t.tpl_link_fuzzy = \"(^|(?![.:/\\\\-_@])(?:[$+<=>^`|]|\" + t.src_ZPCc + \"))((?![$+<=>^`|])\" + t.tpl_host_port_fuzzy_strict + t.src_path + \")\", t.tpl_link_no_ip_fuzzy = \"(^|(?![.:/\\\\-_@])(?:[$+<=>^`|]|\" + t.src_ZPCc + \"))((?![$+<=>^`|])\" + t.tpl_host_port_no_ip_fuzzy_strict + t.src_path + \")\", t;\n      };\n    }, { \"uc.micro/categories/Cc/regex\": 61, \"uc.micro/categories/P/regex\": 63, \"uc.micro/categories/Z/regex\": 64, \"uc.micro/properties/Any/regex\": 66 }], 55: [function (e, r, t) {\n      \"use strict\";\n      function n(e) {\n        var r,\n            t,\n            n = o[e];if (n) return n;for (n = o[e] = [], r = 0; r < 128; r++) t = String.fromCharCode(r), n.push(t);for (r = 0; r < e.length; r++) t = e.charCodeAt(r), n[t] = \"%\" + (\"0\" + t.toString(16).toUpperCase()).slice(-2);return n;\n      }function s(e, r) {\n        var t;return \"string\" != typeof r && (r = s.defaultChars), t = n(r), e.replace(/(%[a-f0-9]{2})+/gi, function (e) {\n          var r,\n              n,\n              s,\n              o,\n              i,\n              a,\n              c,\n              l = \"\";for (r = 0, n = e.length; r < n; r += 3) s = parseInt(e.slice(r + 1, r + 3), 16), s < 128 ? l += t[s] : 192 === (224 & s) && r + 3 < n && (o = parseInt(e.slice(r + 4, r + 6), 16), 128 === (192 & o)) ? (c = s << 6 & 1984 | 63 & o, l += c < 128 ? \"\\ufffd\\ufffd\" : String.fromCharCode(c), r += 3) : 224 === (240 & s) && r + 6 < n && (o = parseInt(e.slice(r + 4, r + 6), 16), i = parseInt(e.slice(r + 7, r + 9), 16), 128 === (192 & o) && 128 === (192 & i)) ? (c = s << 12 & 61440 | o << 6 & 4032 | 63 & i, l += c < 2048 || c >= 55296 && c <= 57343 ? \"\\ufffd\\ufffd\\ufffd\" : String.fromCharCode(c), r += 6) : 240 === (248 & s) && r + 9 < n && (o = parseInt(e.slice(r + 4, r + 6), 16), i = parseInt(e.slice(r + 7, r + 9), 16), a = parseInt(e.slice(r + 10, r + 12), 16), 128 === (192 & o) && 128 === (192 & i) && 128 === (192 & a)) ? (c = s << 18 & 1835008 | o << 12 & 258048 | i << 6 & 4032 | 63 & a, c < 65536 || c > 1114111 ? l += \"\\ufffd\\ufffd\\ufffd\\ufffd\" : (c -= 65536, l += String.fromCharCode(55296 + (c >> 10), 56320 + (1023 & c))), r += 9) : l += \"\\ufffd\";return l;\n        });\n      }var o = {};s.defaultChars = \";/?:@&=+$,#\", s.componentChars = \"\", r.exports = s;\n    }, {}], 56: [function (e, r, t) {\n      \"use strict\";\n      function n(e) {\n        var r,\n            t,\n            n = o[e];if (n) return n;for (n = o[e] = [], r = 0; r < 128; r++) t = String.fromCharCode(r), /^[0-9a-z]$/i.test(t) ? n.push(t) : n.push(\"%\" + (\"0\" + r.toString(16).toUpperCase()).slice(-2));for (r = 0; r < e.length; r++) n[e.charCodeAt(r)] = e[r];return n;\n      }function s(e, r, t) {\n        var o,\n            i,\n            a,\n            c,\n            l,\n            u = \"\";for (\"string\" != typeof r && (t = r, r = s.defaultChars), \"undefined\" == typeof t && (t = !0), l = n(r), o = 0, i = e.length; o < i; o++) if (a = e.charCodeAt(o), t && 37 === a && o + 2 < i && /^[0-9a-f]{2}$/i.test(e.slice(o + 1, o + 3))) u += e.slice(o, o + 3), o += 2;else if (a < 128) u += l[a];else if (a >= 55296 && a <= 57343) {\n          if (a >= 55296 && a <= 56319 && o + 1 < i && (c = e.charCodeAt(o + 1), c >= 56320 && c <= 57343)) {\n            u += encodeURIComponent(e[o] + e[o + 1]), o++;continue;\n          }u += \"%EF%BF%BD\";\n        } else u += encodeURIComponent(e[o]);return u;\n      }var o = {};s.defaultChars = \";/?:@&=+$,-_.!~*'()#\", s.componentChars = \"-_.!~*'()\", r.exports = s;\n    }, {}], 57: [function (e, r, t) {\n      \"use strict\";\n      r.exports = function (e) {\n        var r = \"\";return r += e.protocol || \"\", r += e.slashes ? \"//\" : \"\", r += e.auth ? e.auth + \"@\" : \"\", r += e.hostname && e.hostname.indexOf(\":\") !== -1 ? \"[\" + e.hostname + \"]\" : e.hostname || \"\", r += e.port ? \":\" + e.port : \"\", r += e.pathname || \"\", r += e.search || \"\", r += e.hash || \"\";\n      };\n    }, {}], 58: [function (e, r, t) {\n      \"use strict\";\n      r.exports.encode = e(\"./encode\"), r.exports.decode = e(\"./decode\"), r.exports.format = e(\"./format\"), r.exports.parse = e(\"./parse\");\n    }, { \"./decode\": 55, \"./encode\": 56, \"./format\": 57, \"./parse\": 59 }], 59: [function (e, r, t) {\n      \"use strict\";\n      function n() {\n        this.protocol = null, this.slashes = null, this.auth = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.pathname = null;\n      }function s(e, r) {\n        if (e && e instanceof n) return e;var t = new n();return t.parse(e, r), t;\n      }var o = /^([a-z0-9.+-]+:)/i,\n          i = /:[0-9]*$/,\n          a = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n          c = [\"<\", \">\", '\"', \"`\", \" \", \"\\r\", \"\\n\", \"\\t\"],\n          l = [\"{\", \"}\", \"|\", \"\\\\\", \"^\", \"`\"].concat(c),\n          u = [\"'\"].concat(l),\n          p = [\"%\", \"/\", \"?\", \";\", \"#\"].concat(u),\n          h = [\"/\", \"?\", \"#\"],\n          f = 255,\n          d = /^[+a-z0-9A-Z_-]{0,63}$/,\n          m = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n          _ = { javascript: !0, \"javascript:\": !0 },\n          g = { http: !0, https: !0, ftp: !0, gopher: !0, file: !0, \"http:\": !0, \"https:\": !0, \"ftp:\": !0, \"gopher:\": !0, \"file:\": !0 };n.prototype.parse = function (e, r) {\n        var t,\n            n,\n            s,\n            i,\n            c,\n            l = e;if (l = l.trim(), !r && 1 === e.split(\"#\").length) {\n          var u = a.exec(l);if (u) return this.pathname = u[1], u[2] && (this.search = u[2]), this;\n        }var b = o.exec(l);if (b && (b = b[0], s = b.toLowerCase(), this.protocol = b, l = l.substr(b.length)), (r || b || l.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) && (c = \"//\" === l.substr(0, 2), !c || b && _[b] || (l = l.substr(2), this.slashes = !0)), !_[b] && (c || b && !g[b])) {\n          var k = -1;for (t = 0; t < h.length; t++) i = l.indexOf(h[t]), i !== -1 && (k === -1 || i < k) && (k = i);var v, y;for (y = k === -1 ? l.lastIndexOf(\"@\") : l.lastIndexOf(\"@\", k), y !== -1 && (v = l.slice(0, y), l = l.slice(y + 1), this.auth = v), k = -1, t = 0; t < p.length; t++) i = l.indexOf(p[t]), i !== -1 && (k === -1 || i < k) && (k = i);k === -1 && (k = l.length), \":\" === l[k - 1] && k--;var x = l.slice(0, k);l = l.slice(k), this.parseHost(x), this.hostname = this.hostname || \"\";var C = \"[\" === this.hostname[0] && \"]\" === this.hostname[this.hostname.length - 1];if (!C) {\n            var A = this.hostname.split(/\\./);for (t = 0, n = A.length; t < n; t++) {\n              var w = A[t];if (w && !w.match(d)) {\n                for (var D = \"\", q = 0, E = w.length; q < E; q++) D += w.charCodeAt(q) > 127 ? \"x\" : w[q];if (!D.match(d)) {\n                  var S = A.slice(0, t),\n                      F = A.slice(t + 1),\n                      L = w.match(m);L && (S.push(L[1]), F.unshift(L[2])), F.length && (l = F.join(\".\") + l), this.hostname = S.join(\".\");break;\n                }\n              }\n            }\n          }this.hostname.length > f && (this.hostname = \"\"), C && (this.hostname = this.hostname.substr(1, this.hostname.length - 2));\n        }var z = l.indexOf(\"#\");z !== -1 && (this.hash = l.substr(z), l = l.slice(0, z));var T = l.indexOf(\"?\");return T !== -1 && (this.search = l.substr(T), l = l.slice(0, T)), l && (this.pathname = l), g[s] && this.hostname && !this.pathname && (this.pathname = \"\"), this;\n      }, n.prototype.parseHost = function (e) {\n        var r = i.exec(e);r && (r = r[0], \":\" !== r && (this.port = r.substr(1)), e = e.substr(0, e.length - r.length)), e && (this.hostname = e);\n      }, r.exports = s;\n    }, {}], 60: [function (r, t, n) {\n      (function (r) {\n        !function (s) {\n          function o(e) {\n            throw new RangeError(R[e]);\n          }function i(e, r) {\n            for (var t = e.length, n = []; t--;) n[t] = r(e[t]);return n;\n          }function a(e, r) {\n            var t = e.split(\"@\"),\n                n = \"\";t.length > 1 && (n = t[0] + \"@\", e = t[1]), e = e.replace(T, \".\");var s = e.split(\".\"),\n                o = i(s, r).join(\".\");return n + o;\n          }function c(e) {\n            for (var r, t, n = [], s = 0, o = e.length; s < o;) r = e.charCodeAt(s++), r >= 55296 && r <= 56319 && s < o ? (t = e.charCodeAt(s++), 56320 == (64512 & t) ? n.push(((1023 & r) << 10) + (1023 & t) + 65536) : (n.push(r), s--)) : n.push(r);return n;\n          }function l(e) {\n            return i(e, function (e) {\n              var r = \"\";return e > 65535 && (e -= 65536, r += B(e >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), r += B(e);\n            }).join(\"\");\n          }function u(e) {\n            return e - 48 < 10 ? e - 22 : e - 65 < 26 ? e - 65 : e - 97 < 26 ? e - 97 : C;\n          }function p(e, r) {\n            return e + 22 + 75 * (e < 26) - ((0 != r) << 5);\n          }function h(e, r, t) {\n            var n = 0;for (e = t ? I(e / q) : e >> 1, e += I(e / r); e > M * w >> 1; n += C) e = I(e / M);return I(n + (M + 1) * e / (e + D));\n          }function f(e) {\n            var r,\n                t,\n                n,\n                s,\n                i,\n                a,\n                c,\n                p,\n                f,\n                d,\n                m = [],\n                _ = e.length,\n                g = 0,\n                b = S,\n                k = E;for (t = e.lastIndexOf(F), t < 0 && (t = 0), n = 0; n < t; ++n) e.charCodeAt(n) >= 128 && o(\"not-basic\"), m.push(e.charCodeAt(n));for (s = t > 0 ? t + 1 : 0; s < _;) {\n              for (i = g, a = 1, c = C; s >= _ && o(\"invalid-input\"), p = u(e.charCodeAt(s++)), (p >= C || p > I((x - g) / a)) && o(\"overflow\"), g += p * a, f = c <= k ? A : c >= k + w ? w : c - k, !(p < f); c += C) d = C - f, a > I(x / d) && o(\"overflow\"), a *= d;r = m.length + 1, k = h(g - i, r, 0 == i), I(g / r) > x - b && o(\"overflow\"), b += I(g / r), g %= r, m.splice(g++, 0, b);\n            }return l(m);\n          }function d(e) {\n            var r,\n                t,\n                n,\n                s,\n                i,\n                a,\n                l,\n                u,\n                f,\n                d,\n                m,\n                _,\n                g,\n                b,\n                k,\n                v = [];for (e = c(e), _ = e.length, r = S, t = 0, i = E, a = 0; a < _; ++a) m = e[a], m < 128 && v.push(B(m));for (n = s = v.length, s && v.push(F); n < _;) {\n              for (l = x, a = 0; a < _; ++a) m = e[a], m >= r && m < l && (l = m);for (g = n + 1, l - r > I((x - t) / g) && o(\"overflow\"), t += (l - r) * g, r = l, a = 0; a < _; ++a) if (m = e[a], m < r && ++t > x && o(\"overflow\"), m == r) {\n                for (u = t, f = C; d = f <= i ? A : f >= i + w ? w : f - i, !(u < d); f += C) k = u - d, b = C - d, v.push(B(p(d + k % b, 0))), u = I(k / b);v.push(B(p(u, 0))), i = h(t, g, n == s), t = 0, ++n;\n              }++t, ++r;\n            }return v.join(\"\");\n          }function m(e) {\n            return a(e, function (e) {\n              return L.test(e) ? f(e.slice(4).toLowerCase()) : e;\n            });\n          }function _(e) {\n            return a(e, function (e) {\n              return z.test(e) ? \"xn--\" + d(e) : e;\n            });\n          }var g = \"object\" == typeof n && n && !n.nodeType && n,\n              b = \"object\" == typeof t && t && !t.nodeType && t,\n              k = \"object\" == typeof r && r;k.global !== k && k.window !== k && k.self !== k || (s = k);var v,\n              y,\n              x = 2147483647,\n              C = 36,\n              A = 1,\n              w = 26,\n              D = 38,\n              q = 700,\n              E = 72,\n              S = 128,\n              F = \"-\",\n              L = /^xn--/,\n              z = /[^\\x20-\\x7E]/,\n              T = /[\\x2E\\u3002\\uFF0E\\uFF61]/g,\n              R = { overflow: \"Overflow: input needs wider integers to process\", \"not-basic\": \"Illegal input >= 0x80 (not a basic code point)\", \"invalid-input\": \"Invalid input\" },\n              M = C - A,\n              I = Math.floor,\n              B = String.fromCharCode;if (v = { version: \"1.4.1\", ucs2: { decode: c, encode: l }, decode: f, encode: d, toASCII: _, toUnicode: m }, \"function\" == typeof e && \"object\" == typeof e.amd && e.amd) e(\"punycode\", function () {\n            return v;\n          });else if (g && b) {\n            if (t.exports == g) b.exports = v;else for (y in v) v.hasOwnProperty(y) && (g[y] = v[y]);\n          } else s.punycode = v;\n        }(this);\n      }).call(this, \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : {});\n    }, {}], 61: [function (e, r, t) {\n      r.exports = /[\\0-\\x1F\\x7F-\\x9F]/;\n    }, {}], 62: [function (e, r, t) {\n      r.exports = /[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804\\uDCBD|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/;\n    }, {}], 63: [function (e, r, t) {\n      r.exports = /[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E44\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/;\n    }, {}], 64: [function (e, r, t) {\n      r.exports = /[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\n    }, {}], 65: [function (e, r, t) {\n      \"use strict\";\n      t.Any = e(\"./properties/Any/regex\"), t.Cc = e(\"./categories/Cc/regex\"), t.Cf = e(\"./categories/Cf/regex\"), t.P = e(\"./categories/P/regex\"), t.Z = e(\"./categories/Z/regex\");\n    }, { \"./categories/Cc/regex\": 61, \"./categories/Cf/regex\": 62, \"./categories/P/regex\": 63, \"./categories/Z/regex\": 64, \"./properties/Any/regex\": 66 }], 66: [function (e, r, t) {\n      r.exports = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n    }, {}], 67: [function (e, r, t) {\n      \"use strict\";\n      r.exports = e(\"./lib/\");\n    }, { \"./lib/\": 9 }] }, {}, [67])(67);\n});"

/***/ }),
/* 215 */
/***/ (function(module, exports) {

module.exports = "/*!\n * jQuery JavaScript Library v3.2.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2017-03-20T18:59Z\n */\n(function (global, factory) {\n\n\t\"use strict\";\n\n\tif (typeof module === \"object\" && typeof module.exports === \"object\") {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ? factory(global, true) : function (w) {\n\t\t\tif (!w.document) {\n\t\t\t\tthrow new Error(\"jQuery requires a window with a document\");\n\t\t\t}\n\t\t\treturn factory(w);\n\t\t};\n\t} else {\n\t\tfactory(global);\n\t}\n\n\t// Pass this if window is not defined yet\n})(typeof window !== \"undefined\" ? window : this, function (window, noGlobal) {\n\n\t// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n\t// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n\t// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n\t// enough that all such attempts are guarded in a try block.\n\t\"use strict\";\n\n\tvar arr = [];\n\n\tvar document = window.document;\n\n\tvar getProto = Object.getPrototypeOf;\n\n\tvar slice = arr.slice;\n\n\tvar concat = arr.concat;\n\n\tvar push = arr.push;\n\n\tvar indexOf = arr.indexOf;\n\n\tvar class2type = {};\n\n\tvar toString = class2type.toString;\n\n\tvar hasOwn = class2type.hasOwnProperty;\n\n\tvar fnToString = hasOwn.toString;\n\n\tvar ObjectFunctionString = fnToString.call(Object);\n\n\tvar support = {};\n\n\tfunction DOMEval(code, doc) {\n\t\tdoc = doc || document;\n\n\t\tvar script = doc.createElement(\"script\");\n\n\t\tscript.text = code;\n\t\tdoc.head.appendChild(script).parentNode.removeChild(script);\n\t}\n\t/* global Symbol */\n\t// Defining this global in .eslintrc.json would create a danger of using the global\n\t// unguarded in another place, it seems safer to define global only for this module\n\n\n\tvar version = \"3.2.1\",\n\n\n\t// Define a local copy of jQuery\n\tjQuery = function (selector, context) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init(selector, context);\n\t},\n\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\t    rdashAlpha = /-([a-z])/g,\n\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function (all, letter) {\n\t\treturn letter.toUpperCase();\n\t};\n\n\tjQuery.fn = jQuery.prototype = {\n\n\t\t// The current version of jQuery being used\n\t\tjquery: version,\n\n\t\tconstructor: jQuery,\n\n\t\t// The default length of a jQuery object is 0\n\t\tlength: 0,\n\n\t\ttoArray: function () {\n\t\t\treturn slice.call(this);\n\t\t},\n\n\t\t// Get the Nth element in the matched element set OR\n\t\t// Get the whole matched element set as a clean array\n\t\tget: function (num) {\n\n\t\t\t// Return all the elements in a clean array\n\t\t\tif (num == null) {\n\t\t\t\treturn slice.call(this);\n\t\t\t}\n\n\t\t\t// Return just the one element from the set\n\t\t\treturn num < 0 ? this[num + this.length] : this[num];\n\t\t},\n\n\t\t// Take an array of elements and push it onto the stack\n\t\t// (returning the new matched element set)\n\t\tpushStack: function (elems) {\n\n\t\t\t// Build a new jQuery matched element set\n\t\t\tvar ret = jQuery.merge(this.constructor(), elems);\n\n\t\t\t// Add the old object onto the stack (as a reference)\n\t\t\tret.prevObject = this;\n\n\t\t\t// Return the newly-formed element set\n\t\t\treturn ret;\n\t\t},\n\n\t\t// Execute a callback for every element in the matched set.\n\t\teach: function (callback) {\n\t\t\treturn jQuery.each(this, callback);\n\t\t},\n\n\t\tmap: function (callback) {\n\t\t\treturn this.pushStack(jQuery.map(this, function (elem, i) {\n\t\t\t\treturn callback.call(elem, i, elem);\n\t\t\t}));\n\t\t},\n\n\t\tslice: function () {\n\t\t\treturn this.pushStack(slice.apply(this, arguments));\n\t\t},\n\n\t\tfirst: function () {\n\t\t\treturn this.eq(0);\n\t\t},\n\n\t\tlast: function () {\n\t\t\treturn this.eq(-1);\n\t\t},\n\n\t\teq: function (i) {\n\t\t\tvar len = this.length,\n\t\t\t    j = +i + (i < 0 ? len : 0);\n\t\t\treturn this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n\t\t},\n\n\t\tend: function () {\n\t\t\treturn this.prevObject || this.constructor();\n\t\t},\n\n\t\t// For internal use only.\n\t\t// Behaves like an Array's method, not like a jQuery method.\n\t\tpush: push,\n\t\tsort: arr.sort,\n\t\tsplice: arr.splice\n\t};\n\n\tjQuery.extend = jQuery.fn.extend = function () {\n\t\tvar options,\n\t\t    name,\n\t\t    src,\n\t\t    copy,\n\t\t    copyIsArray,\n\t\t    clone,\n\t\t    target = arguments[0] || {},\n\t\t    i = 1,\n\t\t    length = arguments.length,\n\t\t    deep = false;\n\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === \"boolean\") {\n\t\t\tdeep = target;\n\n\t\t\t// Skip the boolean and the target\n\t\t\ttarget = arguments[i] || {};\n\t\t\ti++;\n\t\t}\n\n\t\t// Handle case when target is a string or something (possible in deep copy)\n\t\tif (typeof target !== \"object\" && !jQuery.isFunction(target)) {\n\t\t\ttarget = {};\n\t\t}\n\n\t\t// Extend jQuery itself if only one argument is passed\n\t\tif (i === length) {\n\t\t\ttarget = this;\n\t\t\ti--;\n\t\t}\n\n\t\tfor (; i < length; i++) {\n\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif ((options = arguments[i]) != null) {\n\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target === copy) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && Array.isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && jQuery.isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = jQuery.extend(deep, clone, copy);\n\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (copy !== undefined) {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\n\tjQuery.extend({\n\n\t\t// Unique for each copy of jQuery on the page\n\t\texpando: \"jQuery\" + (version + Math.random()).replace(/\\D/g, \"\"),\n\n\t\t// Assume jQuery is ready without the ready module\n\t\tisReady: true,\n\n\t\terror: function (msg) {\n\t\t\tthrow new Error(msg);\n\t\t},\n\n\t\tnoop: function () {},\n\n\t\tisFunction: function (obj) {\n\t\t\treturn jQuery.type(obj) === \"function\";\n\t\t},\n\n\t\tisWindow: function (obj) {\n\t\t\treturn obj != null && obj === obj.window;\n\t\t},\n\n\t\tisNumeric: function (obj) {\n\n\t\t\t// As of jQuery 3.0, isNumeric is limited to\n\t\t\t// strings and numbers (primitives or objects)\n\t\t\t// that can be coerced to finite numbers (gh-2662)\n\t\t\tvar type = jQuery.type(obj);\n\t\t\treturn (type === \"number\" || type === \"string\") &&\n\n\t\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t\t// subtraction forces infinities to NaN\n\t\t\t!isNaN(obj - parseFloat(obj));\n\t\t},\n\n\t\tisPlainObject: function (obj) {\n\t\t\tvar proto, Ctor;\n\n\t\t\t// Detect obvious negatives\n\t\t\t// Use toString instead of jQuery.type to catch host objects\n\t\t\tif (!obj || toString.call(obj) !== \"[object Object]\") {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tproto = getProto(obj);\n\n\t\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\t\tif (!proto) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\t\tCtor = hasOwn.call(proto, \"constructor\") && proto.constructor;\n\t\t\treturn typeof Ctor === \"function\" && fnToString.call(Ctor) === ObjectFunctionString;\n\t\t},\n\n\t\tisEmptyObject: function (obj) {\n\n\t\t\t/* eslint-disable no-unused-vars */\n\t\t\t// See https://github.com/eslint/eslint/issues/6125\n\t\t\tvar name;\n\n\t\t\tfor (name in obj) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\ttype: function (obj) {\n\t\t\tif (obj == null) {\n\t\t\t\treturn obj + \"\";\n\t\t\t}\n\n\t\t\t// Support: Android <=2.3 only (functionish RegExp)\n\t\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ? class2type[toString.call(obj)] || \"object\" : typeof obj;\n\t\t},\n\n\t\t// Evaluates a script in a global context\n\t\tglobalEval: function (code) {\n\t\t\tDOMEval(code);\n\t\t},\n\n\t\t// Convert dashed to camelCase; used by the css and data modules\n\t\t// Support: IE <=9 - 11, Edge 12 - 13\n\t\t// Microsoft forgot to hump their vendor prefix (#9572)\n\t\tcamelCase: function (string) {\n\t\t\treturn string.replace(rmsPrefix, \"ms-\").replace(rdashAlpha, fcamelCase);\n\t\t},\n\n\t\teach: function (obj, callback) {\n\t\t\tvar length,\n\t\t\t    i = 0;\n\n\t\t\tif (isArrayLike(obj)) {\n\t\t\t\tlength = obj.length;\n\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\tif (callback.call(obj[i], i, obj[i]) === false) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (i in obj) {\n\t\t\t\t\tif (callback.call(obj[i], i, obj[i]) === false) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t},\n\n\t\t// Support: Android <=4.0 only\n\t\ttrim: function (text) {\n\t\t\treturn text == null ? \"\" : (text + \"\").replace(rtrim, \"\");\n\t\t},\n\n\t\t// results is for internal usage only\n\t\tmakeArray: function (arr, results) {\n\t\t\tvar ret = results || [];\n\n\t\t\tif (arr != null) {\n\t\t\t\tif (isArrayLike(Object(arr))) {\n\t\t\t\t\tjQuery.merge(ret, typeof arr === \"string\" ? [arr] : arr);\n\t\t\t\t} else {\n\t\t\t\t\tpush.call(ret, arr);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t},\n\n\t\tinArray: function (elem, arr, i) {\n\t\t\treturn arr == null ? -1 : indexOf.call(arr, elem, i);\n\t\t},\n\n\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\tmerge: function (first, second) {\n\t\t\tvar len = +second.length,\n\t\t\t    j = 0,\n\t\t\t    i = first.length;\n\n\t\t\tfor (; j < len; j++) {\n\t\t\t\tfirst[i++] = second[j];\n\t\t\t}\n\n\t\t\tfirst.length = i;\n\n\t\t\treturn first;\n\t\t},\n\n\t\tgrep: function (elems, callback, invert) {\n\t\t\tvar callbackInverse,\n\t\t\t    matches = [],\n\t\t\t    i = 0,\n\t\t\t    length = elems.length,\n\t\t\t    callbackExpect = !invert;\n\n\t\t\t// Go through the array, only saving the items\n\t\t\t// that pass the validator function\n\t\t\tfor (; i < length; i++) {\n\t\t\t\tcallbackInverse = !callback(elems[i], i);\n\t\t\t\tif (callbackInverse !== callbackExpect) {\n\t\t\t\t\tmatches.push(elems[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn matches;\n\t\t},\n\n\t\t// arg is for internal usage only\n\t\tmap: function (elems, callback, arg) {\n\t\t\tvar length,\n\t\t\t    value,\n\t\t\t    i = 0,\n\t\t\t    ret = [];\n\n\t\t\t// Go through the array, translating each of the items to their new values\n\t\t\tif (isArrayLike(elems)) {\n\t\t\t\tlength = elems.length;\n\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\tvalue = callback(elems[i], i, arg);\n\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tret.push(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Go through every key on the object,\n\t\t\t} else {\n\t\t\t\tfor (i in elems) {\n\t\t\t\t\tvalue = callback(elems[i], i, arg);\n\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tret.push(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Flatten any nested arrays\n\t\t\treturn concat.apply([], ret);\n\t\t},\n\n\t\t// A global GUID counter for objects\n\t\tguid: 1,\n\n\t\t// Bind a function to a context, optionally partially applying any\n\t\t// arguments.\n\t\tproxy: function (fn, context) {\n\t\t\tvar tmp, args, proxy;\n\n\t\t\tif (typeof context === \"string\") {\n\t\t\t\ttmp = fn[context];\n\t\t\t\tcontext = fn;\n\t\t\t\tfn = tmp;\n\t\t\t}\n\n\t\t\t// Quick check to determine if target is callable, in the spec\n\t\t\t// this throws a TypeError, but we will just return undefined.\n\t\t\tif (!jQuery.isFunction(fn)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Simulated bind\n\t\t\targs = slice.call(arguments, 2);\n\t\t\tproxy = function () {\n\t\t\t\treturn fn.apply(context || this, args.concat(slice.call(arguments)));\n\t\t\t};\n\n\t\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\t\treturn proxy;\n\t\t},\n\n\t\tnow: Date.now,\n\n\t\t// jQuery.support is not used in Core but other projects attach their\n\t\t// properties to it so it needs to exist.\n\t\tsupport: support\n\t});\n\n\tif (typeof Symbol === \"function\") {\n\t\tjQuery.fn[Symbol.iterator] = arr[Symbol.iterator];\n\t}\n\n\t// Populate the class2type map\n\tjQuery.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (i, name) {\n\t\tclass2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n\t});\n\n\tfunction isArrayLike(obj) {\n\n\t\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t\t// `in` check used to prevent JIT error (gh-2145)\n\t\t// hasOwn isn't used here due to false negatives\n\t\t// regarding Nodelist length in IE\n\t\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\t    type = jQuery.type(obj);\n\n\t\tif (type === \"function\" || jQuery.isWindow(obj)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn type === \"array\" || length === 0 || typeof length === \"number\" && length > 0 && length - 1 in obj;\n\t}\n\tvar Sizzle =\n\t/*!\n  * Sizzle CSS Selector Engine v2.3.3\n  * https://sizzlejs.com/\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license\n  * http://jquery.org/license\n  *\n  * Date: 2016-08-08\n  */\n\tfunction (window) {\n\n\t\tvar i,\n\t\t    support,\n\t\t    Expr,\n\t\t    getText,\n\t\t    isXML,\n\t\t    tokenize,\n\t\t    compile,\n\t\t    select,\n\t\t    outermostContext,\n\t\t    sortInput,\n\t\t    hasDuplicate,\n\n\n\t\t// Local document vars\n\t\tsetDocument,\n\t\t    document,\n\t\t    docElem,\n\t\t    documentIsHTML,\n\t\t    rbuggyQSA,\n\t\t    rbuggyMatches,\n\t\t    matches,\n\t\t    contains,\n\n\n\t\t// Instance-specific data\n\t\texpando = \"sizzle\" + 1 * new Date(),\n\t\t    preferredDoc = window.document,\n\t\t    dirruns = 0,\n\t\t    done = 0,\n\t\t    classCache = createCache(),\n\t\t    tokenCache = createCache(),\n\t\t    compilerCache = createCache(),\n\t\t    sortOrder = function (a, b) {\n\t\t\tif (a === b) {\n\t\t\t\thasDuplicate = true;\n\t\t\t}\n\t\t\treturn 0;\n\t\t},\n\n\n\t\t// Instance methods\n\t\thasOwn = {}.hasOwnProperty,\n\t\t    arr = [],\n\t\t    pop = arr.pop,\n\t\t    push_native = arr.push,\n\t\t    push = arr.push,\n\t\t    slice = arr.slice,\n\n\t\t// Use a stripped-down indexOf as it's faster than native\n\t\t// https://jsperf.com/thor-indexof-vs-for/5\n\t\tindexOf = function (list, elem) {\n\t\t\tvar i = 0,\n\t\t\t    len = list.length;\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (list[i] === elem) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t},\n\t\t    booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\n\t\t// Regular expressions\n\n\t\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\t\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\n\t\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\t\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\n\t\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\t\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace + \"*\\\\]\",\n\t\t    pseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" + \")\\\\)|)\",\n\n\n\t\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\t\trwhitespace = new RegExp(whitespace + \"+\", \"g\"),\n\t\t    rtrim = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\"),\n\t\t    rcomma = new RegExp(\"^\" + whitespace + \"*,\" + whitespace + \"*\"),\n\t\t    rcombinators = new RegExp(\"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\"),\n\t\t    rattributeQuotes = new RegExp(\"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\"),\n\t\t    rpseudo = new RegExp(pseudos),\n\t\t    ridentifier = new RegExp(\"^\" + identifier + \"$\"),\n\t\t    matchExpr = {\n\t\t\t\"ID\": new RegExp(\"^#(\" + identifier + \")\"),\n\t\t\t\"CLASS\": new RegExp(\"^\\\\.(\" + identifier + \")\"),\n\t\t\t\"TAG\": new RegExp(\"^(\" + identifier + \"|[*])\"),\n\t\t\t\"ATTR\": new RegExp(\"^\" + attributes),\n\t\t\t\"PSEUDO\": new RegExp(\"^\" + pseudos),\n\t\t\t\"CHILD\": new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\"),\n\t\t\t\"bool\": new RegExp(\"^(?:\" + booleans + \")$\", \"i\"),\n\t\t\t// For use in libraries implementing .is()\n\t\t\t// We use this for POS matching in `select`\n\t\t\t\"needsContext\": new RegExp(\"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n\t\t},\n\t\t    rinputs = /^(?:input|select|textarea|button)$/i,\n\t\t    rheader = /^h\\d$/i,\n\t\t    rnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\n\t\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\t\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\t\t    rsibling = /[+~]/,\n\n\n\t\t// CSS escapes\n\t\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\t\trunescape = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\"),\n\t\t    funescape = function (_, escaped, escapedWhitespace) {\n\t\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t\t// NaN means non-codepoint\n\t\t\t// Support: Firefox<24\n\t\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\t\treturn high !== high || escapedWhitespace ? escaped : high < 0 ?\n\t\t\t// BMP codepoint\n\t\t\tString.fromCharCode(high + 0x10000) :\n\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\tString.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n\t\t},\n\n\n\t\t// CSS string/identifier serialization\n\t\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\t\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\t\t    fcssescape = function (ch, asCodePoint) {\n\t\t\tif (asCodePoint) {\n\n\t\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\t\tif (ch === \"\\0\") {\n\t\t\t\t\treturn \"\\uFFFD\";\n\t\t\t\t}\n\n\t\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\t\treturn ch.slice(0, -1) + \"\\\\\" + ch.charCodeAt(ch.length - 1).toString(16) + \" \";\n\t\t\t}\n\n\t\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\t\treturn \"\\\\\" + ch;\n\t\t},\n\n\n\t\t// Used for iframes\n\t\t// See setDocument()\n\t\t// Removing the function wrapper causes a \"Permission Denied\"\n\t\t// error in IE\n\t\tunloadHandler = function () {\n\t\t\tsetDocument();\n\t\t},\n\t\t    disabledAncestor = addCombinator(function (elem) {\n\t\t\treturn elem.disabled === true && (\"form\" in elem || \"label\" in elem);\n\t\t}, { dir: \"parentNode\", next: \"legend\" });\n\n\t\t// Optimize for push.apply( _, NodeList )\n\t\ttry {\n\t\t\tpush.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);\n\t\t\t// Support: Android<4.0\n\t\t\t// Detect silently failing push.apply\n\t\t\tarr[preferredDoc.childNodes.length].nodeType;\n\t\t} catch (e) {\n\t\t\tpush = { apply: arr.length ?\n\n\t\t\t\t// Leverage slice if possible\n\t\t\t\tfunction (target, els) {\n\t\t\t\t\tpush_native.apply(target, slice.call(els));\n\t\t\t\t} :\n\n\t\t\t\t// Support: IE<9\n\t\t\t\t// Otherwise append directly\n\t\t\t\tfunction (target, els) {\n\t\t\t\t\tvar j = target.length,\n\t\t\t\t\t    i = 0;\n\t\t\t\t\t// Can't trust NodeList.length\n\t\t\t\t\twhile (target[j++] = els[i++]) {}\n\t\t\t\t\ttarget.length = j - 1;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction Sizzle(selector, context, results, seed) {\n\t\t\tvar m,\n\t\t\t    i,\n\t\t\t    elem,\n\t\t\t    nid,\n\t\t\t    match,\n\t\t\t    groups,\n\t\t\t    newSelector,\n\t\t\t    newContext = context && context.ownerDocument,\n\n\n\t\t\t// nodeType defaults to 9, since context defaults to document\n\t\t\tnodeType = context ? context.nodeType : 9;\n\n\t\t\tresults = results || [];\n\n\t\t\t// Return early from calls with invalid selector or context\n\t\t\tif (typeof selector !== \"string\" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\n\n\t\t\t\treturn results;\n\t\t\t}\n\n\t\t\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\t\t\tif (!seed) {\n\n\t\t\t\tif ((context ? context.ownerDocument || context : preferredDoc) !== document) {\n\t\t\t\t\tsetDocument(context);\n\t\t\t\t}\n\t\t\t\tcontext = context || document;\n\n\t\t\t\tif (documentIsHTML) {\n\n\t\t\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\t\t\tif (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\n\n\t\t\t\t\t\t// ID selector\n\t\t\t\t\t\tif (m = match[1]) {\n\n\t\t\t\t\t\t\t// Document context\n\t\t\t\t\t\t\tif (nodeType === 9) {\n\t\t\t\t\t\t\t\tif (elem = context.getElementById(m)) {\n\n\t\t\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\t\t\tif (elem.id === m) {\n\t\t\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Element context\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\t\tif (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {\n\n\t\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Type selector\n\t\t\t\t\t\t} else if (match[2]) {\n\t\t\t\t\t\t\tpush.apply(results, context.getElementsByTagName(selector));\n\t\t\t\t\t\t\treturn results;\n\n\t\t\t\t\t\t\t// Class selector\n\t\t\t\t\t\t} else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {\n\n\t\t\t\t\t\t\tpush.apply(results, context.getElementsByClassName(m));\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Take advantage of querySelectorAll\n\t\t\t\t\tif (support.qsa && !compilerCache[selector + \" \"] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {\n\n\t\t\t\t\t\tif (nodeType !== 1) {\n\t\t\t\t\t\t\tnewContext = context;\n\t\t\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t\t\t\t// Support: IE <=8\n\t\t\t\t\t\t\t// Exclude object elements\n\t\t\t\t\t\t} else if (context.nodeName.toLowerCase() !== \"object\") {\n\n\t\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\t\tif (nid = context.getAttribute(\"id\")) {\n\t\t\t\t\t\t\t\tnid = nid.replace(rcssescape, fcssescape);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontext.setAttribute(\"id\", nid = expando);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\t\t\tgroups = tokenize(selector);\n\t\t\t\t\t\t\ti = groups.length;\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector(groups[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tnewSelector = groups.join(\",\");\n\n\t\t\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\t\t\tnewContext = rsibling.test(selector) && testContext(context.parentNode) || context;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (newSelector) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tpush.apply(results, newContext.querySelectorAll(newSelector));\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t} catch (qsaError) {} finally {\n\t\t\t\t\t\t\t\tif (nid === expando) {\n\t\t\t\t\t\t\t\t\tcontext.removeAttribute(\"id\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// All others\n\t\t\treturn select(selector.replace(rtrim, \"$1\"), context, results, seed);\n\t\t}\n\n\t\t/**\n   * Create key-value caches of limited size\n   * @returns {function(string, object)} Returns the Object data after storing it on itself with\n   *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n   *\tdeleting the oldest entry\n   */\n\t\tfunction createCache() {\n\t\t\tvar keys = [];\n\n\t\t\tfunction cache(key, value) {\n\t\t\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\t\t\tif (keys.push(key + \" \") > Expr.cacheLength) {\n\t\t\t\t\t// Only keep the most recent entries\n\t\t\t\t\tdelete cache[keys.shift()];\n\t\t\t\t}\n\t\t\t\treturn cache[key + \" \"] = value;\n\t\t\t}\n\t\t\treturn cache;\n\t\t}\n\n\t\t/**\n   * Mark a function for special use by Sizzle\n   * @param {Function} fn The function to mark\n   */\n\t\tfunction markFunction(fn) {\n\t\t\tfn[expando] = true;\n\t\t\treturn fn;\n\t\t}\n\n\t\t/**\n   * Support testing using an element\n   * @param {Function} fn Passed the created element and returns a boolean result\n   */\n\t\tfunction assert(fn) {\n\t\t\tvar el = document.createElement(\"fieldset\");\n\n\t\t\ttry {\n\t\t\t\treturn !!fn(el);\n\t\t\t} catch (e) {\n\t\t\t\treturn false;\n\t\t\t} finally {\n\t\t\t\t// Remove from its parent by default\n\t\t\t\tif (el.parentNode) {\n\t\t\t\t\tel.parentNode.removeChild(el);\n\t\t\t\t}\n\t\t\t\t// release memory in IE\n\t\t\t\tel = null;\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * Adds the same handler for all of the specified attrs\n   * @param {String} attrs Pipe-separated list of attributes\n   * @param {Function} handler The method that will be applied\n   */\n\t\tfunction addHandle(attrs, handler) {\n\t\t\tvar arr = attrs.split(\"|\"),\n\t\t\t    i = arr.length;\n\n\t\t\twhile (i--) {\n\t\t\t\tExpr.attrHandle[arr[i]] = handler;\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * Checks document order of two siblings\n   * @param {Element} a\n   * @param {Element} b\n   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n   */\n\t\tfunction siblingCheck(a, b) {\n\t\t\tvar cur = b && a,\n\t\t\t    diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;\n\n\t\t\t// Use IE sourceIndex if available on both nodes\n\t\t\tif (diff) {\n\t\t\t\treturn diff;\n\t\t\t}\n\n\t\t\t// Check if b follows a\n\t\t\tif (cur) {\n\t\t\t\twhile (cur = cur.nextSibling) {\n\t\t\t\t\tif (cur === b) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn a ? 1 : -1;\n\t\t}\n\n\t\t/**\n   * Returns a function to use in pseudos for input types\n   * @param {String} type\n   */\n\t\tfunction createInputPseudo(type) {\n\t\t\treturn function (elem) {\n\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\treturn name === \"input\" && elem.type === type;\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * Returns a function to use in pseudos for buttons\n   * @param {String} type\n   */\n\t\tfunction createButtonPseudo(type) {\n\t\t\treturn function (elem) {\n\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * Returns a function to use in pseudos for :enabled/:disabled\n   * @param {Boolean} disabled true for :disabled; false for :enabled\n   */\n\t\tfunction createDisabledPseudo(disabled) {\n\n\t\t\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\t\t\treturn function (elem) {\n\n\t\t\t\t// Only certain elements can match :enabled or :disabled\n\t\t\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\t\t\tif (\"form\" in elem) {\n\n\t\t\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t\t\t// * option elements in a disabled optgroup\n\t\t\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t\t\t// All such elements have a \"form\" property.\n\t\t\t\t\tif (elem.parentNode && elem.disabled === false) {\n\n\t\t\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\t\t\tif (\"label\" in elem) {\n\t\t\t\t\t\t\tif (\"label\" in elem.parentNode) {\n\t\t\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\t\telem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn elem.disabled === disabled;\n\n\t\t\t\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t\t\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t\t\t\t// even exist on them, let alone have a boolean value.\n\t\t\t\t} else if (\"label\" in elem) {\n\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t}\n\n\t\t\t\t// Remaining elements are neither :enabled nor :disabled\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * Returns a function to use in pseudos for positionals\n   * @param {Function} fn\n   */\n\t\tfunction createPositionalPseudo(fn) {\n\t\t\treturn markFunction(function (argument) {\n\t\t\t\targument = +argument;\n\t\t\t\treturn markFunction(function (seed, matches) {\n\t\t\t\t\tvar j,\n\t\t\t\t\t    matchIndexes = fn([], seed.length, argument),\n\t\t\t\t\t    i = matchIndexes.length;\n\n\t\t\t\t\t// Match elements found at the specified indexes\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (seed[j = matchIndexes[i]]) {\n\t\t\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n   * Checks a node for validity as a Sizzle context\n   * @param {Element|Object=} context\n   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n   */\n\t\tfunction testContext(context) {\n\t\t\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n\t\t}\n\n\t\t// Expose support vars for convenience\n\t\tsupport = Sizzle.support = {};\n\n\t\t/**\n   * Detects XML nodes\n   * @param {Element|Object} elem An element or a document\n   * @returns {Boolean} True iff elem is a non-HTML XML node\n   */\n\t\tisXML = Sizzle.isXML = function (elem) {\n\t\t\t// documentElement is verified for cases where it doesn't yet exist\n\t\t\t// (such as loading iframes in IE - #4833)\n\t\t\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\t\t\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n\t\t};\n\n\t\t/**\n   * Sets document-related variables once based on the current document\n   * @param {Element|Object} [doc] An element or document object to use to set the document\n   * @returns {Object} Returns the current document\n   */\n\t\tsetDocument = Sizzle.setDocument = function (node) {\n\t\t\tvar hasCompare,\n\t\t\t    subWindow,\n\t\t\t    doc = node ? node.ownerDocument || node : preferredDoc;\n\n\t\t\t// Return early if doc is invalid or already selected\n\t\t\tif (doc === document || doc.nodeType !== 9 || !doc.documentElement) {\n\t\t\t\treturn document;\n\t\t\t}\n\n\t\t\t// Update global variables\n\t\t\tdocument = doc;\n\t\t\tdocElem = document.documentElement;\n\t\t\tdocumentIsHTML = !isXML(document);\n\n\t\t\t// Support: IE 9-11, Edge\n\t\t\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\t\t\tif (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {\n\n\t\t\t\t// Support: IE 11, Edge\n\t\t\t\tif (subWindow.addEventListener) {\n\t\t\t\t\tsubWindow.addEventListener(\"unload\", unloadHandler, false);\n\n\t\t\t\t\t// Support: IE 9 - 10 only\n\t\t\t\t} else if (subWindow.attachEvent) {\n\t\t\t\t\tsubWindow.attachEvent(\"onunload\", unloadHandler);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Attributes\n   ---------------------------------------------------------------------- */\n\n\t\t\t// Support: IE<8\n\t\t\t// Verify that getAttribute really returns attributes and not properties\n\t\t\t// (excepting IE8 booleans)\n\t\t\tsupport.attributes = assert(function (el) {\n\t\t\t\tel.className = \"i\";\n\t\t\t\treturn !el.getAttribute(\"className\");\n\t\t\t});\n\n\t\t\t/* getElement(s)By*\n   ---------------------------------------------------------------------- */\n\n\t\t\t// Check if getElementsByTagName(\"*\") returns only elements\n\t\t\tsupport.getElementsByTagName = assert(function (el) {\n\t\t\t\tel.appendChild(document.createComment(\"\"));\n\t\t\t\treturn !el.getElementsByTagName(\"*\").length;\n\t\t\t});\n\n\t\t\t// Support: IE<9\n\t\t\tsupport.getElementsByClassName = rnative.test(document.getElementsByClassName);\n\n\t\t\t// Support: IE<10\n\t\t\t// Check if getElementById returns elements by name\n\t\t\t// The broken getElementById methods don't pick up programmatically-set names,\n\t\t\t// so use a roundabout getElementsByName test\n\t\t\tsupport.getById = assert(function (el) {\n\t\t\t\tdocElem.appendChild(el).id = expando;\n\t\t\t\treturn !document.getElementsByName || !document.getElementsByName(expando).length;\n\t\t\t});\n\n\t\t\t// ID filter and find\n\t\t\tif (support.getById) {\n\t\t\t\tExpr.filter[\"ID\"] = function (id) {\n\t\t\t\t\tvar attrId = id.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\tExpr.find[\"ID\"] = function (id, context) {\n\t\t\t\t\tif (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n\t\t\t\t\t\tvar elem = context.getElementById(id);\n\t\t\t\t\t\treturn elem ? [elem] : [];\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tExpr.filter[\"ID\"] = function (id) {\n\t\t\t\t\tvar attrId = id.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" && elem.getAttributeNode(\"id\");\n\t\t\t\t\t\treturn node && node.value === attrId;\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Support: IE 6 - 7 only\n\t\t\t\t// getElementById is not reliable as a find shortcut\n\t\t\t\tExpr.find[\"ID\"] = function (id, context) {\n\t\t\t\t\tif (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n\t\t\t\t\t\tvar node,\n\t\t\t\t\t\t    i,\n\t\t\t\t\t\t    elems,\n\t\t\t\t\t\t    elem = context.getElementById(id);\n\n\t\t\t\t\t\tif (elem) {\n\n\t\t\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\t\tif (node && node.value === id) {\n\t\t\t\t\t\t\t\treturn [elem];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\t\t\telems = context.getElementsByName(id);\n\t\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\t\twhile (elem = elems[i++]) {\n\t\t\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\t\t\tif (node && node.value === id) {\n\t\t\t\t\t\t\t\t\treturn [elem];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Tag\n\t\t\tExpr.find[\"TAG\"] = support.getElementsByTagName ? function (tag, context) {\n\t\t\t\tif (typeof context.getElementsByTagName !== \"undefined\") {\n\t\t\t\t\treturn context.getElementsByTagName(tag);\n\n\t\t\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t\t} else if (support.qsa) {\n\t\t\t\t\treturn context.querySelectorAll(tag);\n\t\t\t\t}\n\t\t\t} : function (tag, context) {\n\t\t\t\tvar elem,\n\t\t\t\t    tmp = [],\n\t\t\t\t    i = 0,\n\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName(tag);\n\n\t\t\t\t// Filter out possible comments\n\t\t\t\tif (tag === \"*\") {\n\t\t\t\t\twhile (elem = results[i++]) {\n\t\t\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\t\t\ttmp.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn tmp;\n\t\t\t\t}\n\t\t\t\treturn results;\n\t\t\t};\n\n\t\t\t// Class\n\t\t\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function (className, context) {\n\t\t\t\tif (typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML) {\n\t\t\t\t\treturn context.getElementsByClassName(className);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/* QSA/matchesSelector\n   ---------------------------------------------------------------------- */\n\n\t\t\t// QSA and matchesSelector support\n\n\t\t\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\t\t\trbuggyMatches = [];\n\n\t\t\t// qSa(:focus) reports false when true (Chrome 21)\n\t\t\t// We allow this because of a bug in IE8/9 that throws an error\n\t\t\t// whenever `document.activeElement` is accessed on an iframe\n\t\t\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t\t\t// See https://bugs.jquery.com/ticket/13378\n\t\t\trbuggyQSA = [];\n\n\t\t\tif (support.qsa = rnative.test(document.querySelectorAll)) {\n\t\t\t\t// Build QSA regex\n\t\t\t\t// Regex strategy adopted from Diego Perini\n\t\t\t\tassert(function (el) {\n\t\t\t\t\t// Select is set to empty string on purpose\n\t\t\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t\t\t// setting a boolean content attribute,\n\t\t\t\t\t// since its presence should be enough\n\t\t\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\t\t\tdocElem.appendChild(el).innerHTML = \"<a id='\" + expando + \"'></a>\" + \"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" + \"<option selected=''></option></select>\";\n\n\t\t\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\t\t\tif (el.querySelectorAll(\"[msallowcapture^='']\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: IE8\n\t\t\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\t\t\tif (!el.querySelectorAll(\"[selected]\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\t\t\tif (!el.querySelectorAll(\"[id~=\" + expando + \"-]\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t\t\t// IE8 throws error here and will not see later tests\n\t\t\t\t\tif (!el.querySelectorAll(\":checked\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\t\t\tif (!el.querySelectorAll(\"a#\" + expando + \"+*\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tassert(function (el) {\n\t\t\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" + \"<select disabled='disabled'><option/></select>\";\n\n\t\t\t\t\t// Support: Windows 8 Native Apps\n\t\t\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\t\t\tvar input = document.createElement(\"input\");\n\t\t\t\t\tinput.setAttribute(\"type\", \"hidden\");\n\t\t\t\t\tel.appendChild(input).setAttribute(\"name\", \"D\");\n\n\t\t\t\t\t// Support: IE8\n\t\t\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\t\t\tif (el.querySelectorAll(\"[name=d]\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"name\" + whitespace + \"*[*^$|!~]?=\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t\t\t// IE8 throws error here and will not see later tests\n\t\t\t\t\tif (el.querySelectorAll(\":enabled\").length !== 2) {\n\t\t\t\t\t\trbuggyQSA.push(\":enabled\", \":disabled\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: IE9-11+\n\t\t\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\t\t\tdocElem.appendChild(el).disabled = true;\n\t\t\t\t\tif (el.querySelectorAll(\":disabled\").length !== 2) {\n\t\t\t\t\t\trbuggyQSA.push(\":enabled\", \":disabled\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\t\t\trbuggyQSA.push(\",.*:\");\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n\n\t\t\t\tassert(function (el) {\n\t\t\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t\t\t// on a disconnected node (IE 9)\n\t\t\t\t\tsupport.disconnectedMatch = matches.call(el, \"*\");\n\n\t\t\t\t\t// This should fail with an exception\n\t\t\t\t\t// Gecko does not error, returns false instead\n\t\t\t\t\tmatches.call(el, \"[s!='']:x\");\n\t\t\t\t\trbuggyMatches.push(\"!=\", pseudos);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\trbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join(\"|\"));\n\t\t\trbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join(\"|\"));\n\n\t\t\t/* Contains\n   ---------------------------------------------------------------------- */\n\t\t\thasCompare = rnative.test(docElem.compareDocumentPosition);\n\n\t\t\t// Element contains another\n\t\t\t// Purposefully self-exclusive\n\t\t\t// As in, an element does not contain itself\n\t\t\tcontains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\n\t\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\t    bup = b && b.parentNode;\n\t\t\t\treturn a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n\t\t\t} : function (a, b) {\n\t\t\t\tif (b) {\n\t\t\t\t\twhile (b = b.parentNode) {\n\t\t\t\t\t\tif (b === a) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t};\n\n\t\t\t/* Sorting\n   ---------------------------------------------------------------------- */\n\n\t\t\t// Document order sorting\n\t\t\tsortOrder = hasCompare ? function (a, b) {\n\n\t\t\t\t// Flag for duplicate removal\n\t\t\t\tif (a === b) {\n\t\t\t\t\thasDuplicate = true;\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\t\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\t\t\tif (compare) {\n\t\t\t\t\treturn compare;\n\t\t\t\t}\n\n\t\t\t\t// Calculate position if both inputs belong to the same document\n\t\t\t\tcompare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :\n\n\t\t\t\t// Otherwise we know they are disconnected\n\t\t\t\t1;\n\n\t\t\t\t// Disconnected nodes\n\t\t\t\tif (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\n\n\t\t\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t\t\tif (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Maintain original order\n\t\t\t\t\treturn sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n\t\t\t\t}\n\n\t\t\t\treturn compare & 4 ? -1 : 1;\n\t\t\t} : function (a, b) {\n\t\t\t\t// Exit early if the nodes are identical\n\t\t\t\tif (a === b) {\n\t\t\t\t\thasDuplicate = true;\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tvar cur,\n\t\t\t\t    i = 0,\n\t\t\t\t    aup = a.parentNode,\n\t\t\t\t    bup = b.parentNode,\n\t\t\t\t    ap = [a],\n\t\t\t\t    bp = [b];\n\n\t\t\t\t// Parentless nodes are either documents or disconnected\n\t\t\t\tif (!aup || !bup) {\n\t\t\t\t\treturn a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n\n\t\t\t\t\t// If the nodes are siblings, we can do a quick check\n\t\t\t\t} else if (aup === bup) {\n\t\t\t\t\treturn siblingCheck(a, b);\n\t\t\t\t}\n\n\t\t\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\t\t\tcur = a;\n\t\t\t\twhile (cur = cur.parentNode) {\n\t\t\t\t\tap.unshift(cur);\n\t\t\t\t}\n\t\t\t\tcur = b;\n\t\t\t\twhile (cur = cur.parentNode) {\n\t\t\t\t\tbp.unshift(cur);\n\t\t\t\t}\n\n\t\t\t\t// Walk down the tree looking for a discrepancy\n\t\t\t\twhile (ap[i] === bp[i]) {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\n\t\t\t\treturn i ?\n\t\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\t\tsiblingCheck(ap[i], bp[i]) :\n\n\t\t\t\t// Otherwise nodes in our document sort first\n\t\t\t\tap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;\n\t\t\t};\n\n\t\t\treturn document;\n\t\t};\n\n\t\tSizzle.matches = function (expr, elements) {\n\t\t\treturn Sizzle(expr, null, null, elements);\n\t\t};\n\n\t\tSizzle.matchesSelector = function (elem, expr) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((elem.ownerDocument || elem) !== document) {\n\t\t\t\tsetDocument(elem);\n\t\t\t}\n\n\t\t\t// Make sure that attribute selectors are quoted\n\t\t\texpr = expr.replace(rattributeQuotes, \"='$1']\");\n\n\t\t\tif (support.matchesSelector && documentIsHTML && !compilerCache[expr + \" \"] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\n\n\t\t\t\ttry {\n\t\t\t\t\tvar ret = matches.call(elem, expr);\n\n\t\t\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\t\t\tif (ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11) {\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\treturn Sizzle(expr, document, null, [elem]).length > 0;\n\t\t};\n\n\t\tSizzle.contains = function (context, elem) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((context.ownerDocument || context) !== document) {\n\t\t\t\tsetDocument(context);\n\t\t\t}\n\t\t\treturn contains(context, elem);\n\t\t};\n\n\t\tSizzle.attr = function (elem, name) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((elem.ownerDocument || elem) !== document) {\n\t\t\t\tsetDocument(elem);\n\t\t\t}\n\n\t\t\tvar fn = Expr.attrHandle[name.toLowerCase()],\n\n\t\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\t\tval = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\n\n\t\t\treturn val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n\t\t};\n\n\t\tSizzle.escape = function (sel) {\n\t\t\treturn (sel + \"\").replace(rcssescape, fcssescape);\n\t\t};\n\n\t\tSizzle.error = function (msg) {\n\t\t\tthrow new Error(\"Syntax error, unrecognized expression: \" + msg);\n\t\t};\n\n\t\t/**\n   * Document sorting and removing duplicates\n   * @param {ArrayLike} results\n   */\n\t\tSizzle.uniqueSort = function (results) {\n\t\t\tvar elem,\n\t\t\t    duplicates = [],\n\t\t\t    j = 0,\n\t\t\t    i = 0;\n\n\t\t\t// Unless we *know* we can detect duplicates, assume their presence\n\t\t\thasDuplicate = !support.detectDuplicates;\n\t\t\tsortInput = !support.sortStable && results.slice(0);\n\t\t\tresults.sort(sortOrder);\n\n\t\t\tif (hasDuplicate) {\n\t\t\t\twhile (elem = results[i++]) {\n\t\t\t\t\tif (elem === results[i]) {\n\t\t\t\t\t\tj = duplicates.push(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (j--) {\n\t\t\t\t\tresults.splice(duplicates[j], 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Clear input after sorting to release objects\n\t\t\t// See https://github.com/jquery/sizzle/pull/225\n\t\t\tsortInput = null;\n\n\t\t\treturn results;\n\t\t};\n\n\t\t/**\n   * Utility function for retrieving the text value of an array of DOM nodes\n   * @param {Array|Element} elem\n   */\n\t\tgetText = Sizzle.getText = function (elem) {\n\t\t\tvar node,\n\t\t\t    ret = \"\",\n\t\t\t    i = 0,\n\t\t\t    nodeType = elem.nodeType;\n\n\t\t\tif (!nodeType) {\n\t\t\t\t// If no nodeType, this is expected to be an array\n\t\t\t\twhile (node = elem[i++]) {\n\t\t\t\t\t// Do not traverse comment nodes\n\t\t\t\t\tret += getText(node);\n\t\t\t\t}\n\t\t\t} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n\t\t\t\t// Use textContent for elements\n\t\t\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\t\t\tif (typeof elem.textContent === \"string\") {\n\t\t\t\t\treturn elem.textContent;\n\t\t\t\t} else {\n\t\t\t\t\t// Traverse its children\n\t\t\t\t\tfor (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n\t\t\t\t\t\tret += getText(elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (nodeType === 3 || nodeType === 4) {\n\t\t\t\treturn elem.nodeValue;\n\t\t\t}\n\t\t\t// Do not include comment or processing instruction nodes\n\n\t\t\treturn ret;\n\t\t};\n\n\t\tExpr = Sizzle.selectors = {\n\n\t\t\t// Can be adjusted by the user\n\t\t\tcacheLength: 50,\n\n\t\t\tcreatePseudo: markFunction,\n\n\t\t\tmatch: matchExpr,\n\n\t\t\tattrHandle: {},\n\n\t\t\tfind: {},\n\n\t\t\trelative: {\n\t\t\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\t\t\" \": { dir: \"parentNode\" },\n\t\t\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\t\t\"~\": { dir: \"previousSibling\" }\n\t\t\t},\n\n\t\t\tpreFilter: {\n\t\t\t\t\"ATTR\": function (match) {\n\t\t\t\t\tmatch[1] = match[1].replace(runescape, funescape);\n\n\t\t\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\t\t\tmatch[3] = (match[3] || match[4] || match[5] || \"\").replace(runescape, funescape);\n\n\t\t\t\t\tif (match[2] === \"~=\") {\n\t\t\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match.slice(0, 4);\n\t\t\t\t},\n\n\t\t\t\t\"CHILD\": function (match) {\n\t\t\t\t\t/* matches from matchExpr[\"CHILD\"]\n     \t1 type (only|nth|...)\n     \t2 what (child|of-type)\n     \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n     \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n     \t5 sign of xn-component\n     \t6 x of xn-component\n     \t7 sign of y-component\n     \t8 y of y-component\n     */\n\t\t\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\t\t\tif (match[1].slice(0, 3) === \"nth\") {\n\t\t\t\t\t\t// nth-* requires argument\n\t\t\t\t\t\tif (!match[3]) {\n\t\t\t\t\t\t\tSizzle.error(match[0]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\t\t\tmatch[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === \"even\" || match[3] === \"odd\"));\n\t\t\t\t\t\tmatch[5] = +(match[7] + match[8] || match[3] === \"odd\");\n\n\t\t\t\t\t\t// other types prohibit arguments\n\t\t\t\t\t} else if (match[3]) {\n\t\t\t\t\t\tSizzle.error(match[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match;\n\t\t\t\t},\n\n\t\t\t\t\"PSEUDO\": function (match) {\n\t\t\t\t\tvar excess,\n\t\t\t\t\t    unquoted = !match[6] && match[2];\n\n\t\t\t\t\tif (matchExpr[\"CHILD\"].test(match[0])) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Accept quoted arguments as-is\n\t\t\t\t\tif (match[3]) {\n\t\t\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t\t\t} else if (unquoted && rpseudo.test(unquoted) && (\n\t\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t\texcess = tokenize(unquoted, true)) && (\n\t\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t\texcess = unquoted.indexOf(\")\", unquoted.length - excess) - unquoted.length)) {\n\n\t\t\t\t\t\t// excess is a negative index\n\t\t\t\t\t\tmatch[0] = match[0].slice(0, excess);\n\t\t\t\t\t\tmatch[2] = unquoted.slice(0, excess);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\t\t\treturn match.slice(0, 3);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tfilter: {\n\n\t\t\t\t\"TAG\": function (nodeNameSelector) {\n\t\t\t\t\tvar nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\n\t\t\t\t\treturn nodeNameSelector === \"*\" ? function () {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} : function (elem) {\n\t\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t\"CLASS\": function (className) {\n\t\t\t\t\tvar pattern = classCache[className + \" \"];\n\n\t\t\t\t\treturn pattern || (pattern = new RegExp(\"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\")) && classCache(className, function (elem) {\n\t\t\t\t\t\treturn pattern.test(typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\");\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\t\"ATTR\": function (name, operator, check) {\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar result = Sizzle.attr(elem, name);\n\n\t\t\t\t\t\tif (result == null) {\n\t\t\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!operator) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult += \"\";\n\n\t\t\t\t\t\treturn operator === \"=\" ? result === check : operator === \"!=\" ? result !== check : operator === \"^=\" ? check && result.indexOf(check) === 0 : operator === \"*=\" ? check && result.indexOf(check) > -1 : operator === \"$=\" ? check && result.slice(-check.length) === check : operator === \"~=\" ? (\" \" + result.replace(rwhitespace, \" \") + \" \").indexOf(check) > -1 : operator === \"|=\" ? result === check || result.slice(0, check.length + 1) === check + \"-\" : false;\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t\"CHILD\": function (type, what, argument, first, last) {\n\t\t\t\t\tvar simple = type.slice(0, 3) !== \"nth\",\n\t\t\t\t\t    forward = type.slice(-4) !== \"last\",\n\t\t\t\t\t    ofType = what === \"of-type\";\n\n\t\t\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\t\tfunction (elem) {\n\t\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t\t} : function (elem, context, xml) {\n\t\t\t\t\t\tvar cache,\n\t\t\t\t\t\t    uniqueCache,\n\t\t\t\t\t\t    outerCache,\n\t\t\t\t\t\t    node,\n\t\t\t\t\t\t    nodeIndex,\n\t\t\t\t\t\t    start,\n\t\t\t\t\t\t    dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\t    parent = elem.parentNode,\n\t\t\t\t\t\t    name = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\t    useCache = !xml && !ofType,\n\t\t\t\t\t\t    diff = false;\n\n\t\t\t\t\t\tif (parent) {\n\n\t\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\t\tif (simple) {\n\t\t\t\t\t\t\t\twhile (dir) {\n\t\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\t\twhile (node = node[dir]) {\n\t\t\t\t\t\t\t\t\t\tif (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tstart = [forward ? parent.firstChild : parent.lastChild];\n\n\t\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\t\tif (forward && useCache) {\n\n\t\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\t\touterCache = node[expando] || (node[expando] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[type] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[0] === dirruns && cache[1];\n\t\t\t\t\t\t\t\tdiff = nodeIndex && cache[2];\n\t\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[nodeIndex];\n\n\t\t\t\t\t\t\t\twhile (node = ++nodeIndex && node && node[dir] || (\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\tdiff = nodeIndex = 0) || start.pop()) {\n\n\t\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\t\tif (node.nodeType === 1 && ++diff && node === elem) {\n\t\t\t\t\t\t\t\t\t\tuniqueCache[type] = [dirruns, nodeIndex, diff];\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\t\tif (useCache) {\n\t\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\t\touterCache = node[expando] || (node[expando] = {});\n\n\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n\n\t\t\t\t\t\t\t\t\tcache = uniqueCache[type] || [];\n\t\t\t\t\t\t\t\t\tnodeIndex = cache[0] === dirruns && cache[1];\n\t\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\t\tif (diff === false) {\n\t\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\t\twhile (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n\n\t\t\t\t\t\t\t\t\t\tif ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n\n\t\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\t\tif (useCache) {\n\t\t\t\t\t\t\t\t\t\t\t\touterCache = node[expando] || (node[expando] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t\tuniqueCache[type] = [dirruns, diff];\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tif (node === elem) {\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\t\treturn diff === first || diff % first === 0 && diff / first >= 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t\"PSEUDO\": function (pseudo, argument) {\n\t\t\t\t\t// pseudo-class names are case-insensitive\n\t\t\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\t\t\tvar args,\n\t\t\t\t\t    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\"unsupported pseudo: \" + pseudo);\n\n\t\t\t\t\t// The user may use createPseudo to indicate that\n\t\t\t\t\t// arguments are needed to create the filter function\n\t\t\t\t\t// just as Sizzle does\n\t\t\t\t\tif (fn[expando]) {\n\t\t\t\t\t\treturn fn(argument);\n\t\t\t\t\t}\n\n\t\t\t\t\t// But maintain support for old signatures\n\t\t\t\t\tif (fn.length > 1) {\n\t\t\t\t\t\targs = [pseudo, pseudo, \"\", argument];\n\t\t\t\t\t\treturn Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n\t\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\t    matched = fn(seed, argument),\n\t\t\t\t\t\t\t    i = matched.length;\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tidx = indexOf(seed, matched[i]);\n\t\t\t\t\t\t\t\tseed[idx] = !(matches[idx] = matched[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}) : function (elem) {\n\t\t\t\t\t\t\treturn fn(elem, 0, args);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn fn;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tpseudos: {\n\t\t\t\t// Potentially complex pseudos\n\t\t\t\t\"not\": markFunction(function (selector) {\n\t\t\t\t\t// Trim the selector passed to compile\n\t\t\t\t\t// to avoid treating leading and trailing\n\t\t\t\t\t// spaces as combinators\n\t\t\t\t\tvar input = [],\n\t\t\t\t\t    results = [],\n\t\t\t\t\t    matcher = compile(selector.replace(rtrim, \"$1\"));\n\n\t\t\t\t\treturn matcher[expando] ? markFunction(function (seed, matches, context, xml) {\n\t\t\t\t\t\tvar elem,\n\t\t\t\t\t\t    unmatched = matcher(seed, null, xml, []),\n\t\t\t\t\t\t    i = seed.length;\n\n\t\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tif (elem = unmatched[i]) {\n\t\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}) : function (elem, context, xml) {\n\t\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\t\tmatcher(input, null, xml, results);\n\t\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\t\tinput[0] = null;\n\t\t\t\t\t\treturn !results.pop();\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t\"has\": markFunction(function (selector) {\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn Sizzle(selector, elem).length > 0;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t\"contains\": markFunction(function (text) {\n\t\t\t\t\ttext = text.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t// \"Whether an element is represented by a :lang() selector\n\t\t\t\t// is based solely on the element's language value\n\t\t\t\t// being equal to the identifier C,\n\t\t\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t\t\t// The identifier C does not have to be a valid language name.\"\n\t\t\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\t\t\"lang\": markFunction(function (lang) {\n\t\t\t\t\t// lang value must be a valid identifier\n\t\t\t\t\tif (!ridentifier.test(lang || \"\")) {\n\t\t\t\t\t\tSizzle.error(\"unsupported lang: \" + lang);\n\t\t\t\t\t}\n\t\t\t\t\tlang = lang.replace(runescape, funescape).toLowerCase();\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar elemLang;\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tif (elemLang = documentIsHTML ? elem.lang : elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) {\n\n\t\t\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf(lang + \"-\") === 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while ((elem = elem.parentNode) && elem.nodeType === 1);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t// Miscellaneous\n\t\t\t\t\"target\": function (elem) {\n\t\t\t\t\tvar hash = window.location && window.location.hash;\n\t\t\t\t\treturn hash && hash.slice(1) === elem.id;\n\t\t\t\t},\n\n\t\t\t\t\"root\": function (elem) {\n\t\t\t\t\treturn elem === docElem;\n\t\t\t\t},\n\n\t\t\t\t\"focus\": function (elem) {\n\t\t\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t\t\t},\n\n\t\t\t\t// Boolean properties\n\t\t\t\t\"enabled\": createDisabledPseudo(false),\n\t\t\t\t\"disabled\": createDisabledPseudo(true),\n\n\t\t\t\t\"checked\": function (elem) {\n\t\t\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\t\t\treturn nodeName === \"input\" && !!elem.checked || nodeName === \"option\" && !!elem.selected;\n\t\t\t\t},\n\n\t\t\t\t\"selected\": function (elem) {\n\t\t\t\t\t// Accessing this property makes selected-by-default\n\t\t\t\t\t// options in Safari work properly\n\t\t\t\t\tif (elem.parentNode) {\n\t\t\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn elem.selected === true;\n\t\t\t\t},\n\n\t\t\t\t// Contents\n\t\t\t\t\"empty\": function (elem) {\n\t\t\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\t\t\tfor (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n\t\t\t\t\t\tif (elem.nodeType < 6) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\n\t\t\t\t\"parent\": function (elem) {\n\t\t\t\t\treturn !Expr.pseudos[\"empty\"](elem);\n\t\t\t\t},\n\n\t\t\t\t// Element/input types\n\t\t\t\t\"header\": function (elem) {\n\t\t\t\t\treturn rheader.test(elem.nodeName);\n\t\t\t\t},\n\n\t\t\t\t\"input\": function (elem) {\n\t\t\t\t\treturn rinputs.test(elem.nodeName);\n\t\t\t\t},\n\n\t\t\t\t\"button\": function (elem) {\n\t\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t\t\t},\n\n\t\t\t\t\"text\": function (elem) {\n\t\t\t\t\tvar attr;\n\t\t\t\t\treturn elem.nodeName.toLowerCase() === \"input\" && elem.type === \"text\" && (\n\n\t\t\t\t\t// Support: IE<8\n\t\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t\t(attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\");\n\t\t\t\t},\n\n\t\t\t\t// Position-in-collection\n\t\t\t\t\"first\": createPositionalPseudo(function () {\n\t\t\t\t\treturn [0];\n\t\t\t\t}),\n\n\t\t\t\t\"last\": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\treturn [length - 1];\n\t\t\t\t}),\n\n\t\t\t\t\"eq\": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\treturn [argument < 0 ? argument + length : argument];\n\t\t\t\t}),\n\n\t\t\t\t\"even\": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\tvar i = 0;\n\t\t\t\t\tfor (; i < length; i += 2) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t\"odd\": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\tvar i = 1;\n\t\t\t\t\tfor (; i < length; i += 2) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t\"lt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\t\t\tfor (; --i >= 0;) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t\"gt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\t\t\tfor (; ++i < length;) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t})\n\t\t\t}\n\t\t};\n\n\t\tExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n\t\t// Add button/input type pseudos\n\t\tfor (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {\n\t\t\tExpr.pseudos[i] = createInputPseudo(i);\n\t\t}\n\t\tfor (i in { submit: true, reset: true }) {\n\t\t\tExpr.pseudos[i] = createButtonPseudo(i);\n\t\t}\n\n\t\t// Easy API for creating new setFilters\n\t\tfunction setFilters() {}\n\t\tsetFilters.prototype = Expr.filters = Expr.pseudos;\n\t\tExpr.setFilters = new setFilters();\n\n\t\ttokenize = Sizzle.tokenize = function (selector, parseOnly) {\n\t\t\tvar matched,\n\t\t\t    match,\n\t\t\t    tokens,\n\t\t\t    type,\n\t\t\t    soFar,\n\t\t\t    groups,\n\t\t\t    preFilters,\n\t\t\t    cached = tokenCache[selector + \" \"];\n\n\t\t\tif (cached) {\n\t\t\t\treturn parseOnly ? 0 : cached.slice(0);\n\t\t\t}\n\n\t\t\tsoFar = selector;\n\t\t\tgroups = [];\n\t\t\tpreFilters = Expr.preFilter;\n\n\t\t\twhile (soFar) {\n\n\t\t\t\t// Comma and first run\n\t\t\t\tif (!matched || (match = rcomma.exec(soFar))) {\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\t\t\tsoFar = soFar.slice(match[0].length) || soFar;\n\t\t\t\t\t}\n\t\t\t\t\tgroups.push(tokens = []);\n\t\t\t\t}\n\n\t\t\t\tmatched = false;\n\n\t\t\t\t// Combinators\n\t\t\t\tif (match = rcombinators.exec(soFar)) {\n\t\t\t\t\tmatched = match.shift();\n\t\t\t\t\ttokens.push({\n\t\t\t\t\t\tvalue: matched,\n\t\t\t\t\t\t// Cast descendant combinators to space\n\t\t\t\t\t\ttype: match[0].replace(rtrim, \" \")\n\t\t\t\t\t});\n\t\t\t\t\tsoFar = soFar.slice(matched.length);\n\t\t\t\t}\n\n\t\t\t\t// Filters\n\t\t\t\tfor (type in Expr.filter) {\n\t\t\t\t\tif ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n\t\t\t\t\t\tmatched = match.shift();\n\t\t\t\t\t\ttokens.push({\n\t\t\t\t\t\t\tvalue: matched,\n\t\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\t\tmatches: match\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsoFar = soFar.slice(matched.length);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!matched) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Return the length of the invalid excess\n\t\t\t// if we're just parsing\n\t\t\t// Otherwise, throw an error or return tokens\n\t\t\treturn parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache(selector, groups).slice(0);\n\t\t};\n\n\t\tfunction toSelector(tokens) {\n\t\t\tvar i = 0,\n\t\t\t    len = tokens.length,\n\t\t\t    selector = \"\";\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tselector += tokens[i].value;\n\t\t\t}\n\t\t\treturn selector;\n\t\t}\n\n\t\tfunction addCombinator(matcher, combinator, base) {\n\t\t\tvar dir = combinator.dir,\n\t\t\t    skip = combinator.next,\n\t\t\t    key = skip || dir,\n\t\t\t    checkNonElements = base && key === \"parentNode\",\n\t\t\t    doneName = done++;\n\n\t\t\treturn combinator.first ?\n\t\t\t// Check against closest ancestor/preceding element\n\t\t\tfunction (elem, context, xml) {\n\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\treturn matcher(elem, context, xml);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t} :\n\n\t\t\t// Check against all ancestor/preceding elements\n\t\t\tfunction (elem, context, xml) {\n\t\t\t\tvar oldCache,\n\t\t\t\t    uniqueCache,\n\t\t\t\t    outerCache,\n\t\t\t\t    newCache = [dirruns, doneName];\n\n\t\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\t\tif (xml) {\n\t\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\t\tif (matcher(elem, context, xml)) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\t\touterCache = elem[expando] || (elem[expando] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});\n\n\t\t\t\t\t\t\tif (skip && skip === elem.nodeName.toLowerCase()) {\n\t\t\t\t\t\t\t\telem = elem[dir] || elem;\n\t\t\t\t\t\t\t} else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\n\n\t\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\t\treturn newCache[2] = oldCache[2];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\t\tuniqueCache[key] = newCache;\n\n\t\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\t\tif (newCache[2] = matcher(elem, context, xml)) {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}\n\n\t\tfunction elementMatcher(matchers) {\n\t\t\treturn matchers.length > 1 ? function (elem, context, xml) {\n\t\t\t\tvar i = matchers.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tif (!matchers[i](elem, context, xml)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} : matchers[0];\n\t\t}\n\n\t\tfunction multipleContexts(selector, contexts, results) {\n\t\t\tvar i = 0,\n\t\t\t    len = contexts.length;\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tSizzle(selector, contexts[i], results);\n\t\t\t}\n\t\t\treturn results;\n\t\t}\n\n\t\tfunction condense(unmatched, map, filter, context, xml) {\n\t\t\tvar elem,\n\t\t\t    newUnmatched = [],\n\t\t\t    i = 0,\n\t\t\t    len = unmatched.length,\n\t\t\t    mapped = map != null;\n\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (elem = unmatched[i]) {\n\t\t\t\t\tif (!filter || filter(elem, context, xml)) {\n\t\t\t\t\t\tnewUnmatched.push(elem);\n\t\t\t\t\t\tif (mapped) {\n\t\t\t\t\t\t\tmap.push(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn newUnmatched;\n\t\t}\n\n\t\tfunction setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n\t\t\tif (postFilter && !postFilter[expando]) {\n\t\t\t\tpostFilter = setMatcher(postFilter);\n\t\t\t}\n\t\t\tif (postFinder && !postFinder[expando]) {\n\t\t\t\tpostFinder = setMatcher(postFinder, postSelector);\n\t\t\t}\n\t\t\treturn markFunction(function (seed, results, context, xml) {\n\t\t\t\tvar temp,\n\t\t\t\t    i,\n\t\t\t\t    elem,\n\t\t\t\t    preMap = [],\n\t\t\t\t    postMap = [],\n\t\t\t\t    preexisting = results.length,\n\n\n\t\t\t\t// Get initial elements from seed or context\n\t\t\t\telems = seed || multipleContexts(selector || \"*\", context.nodeType ? [context] : context, []),\n\n\n\t\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\t\tmatcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n\t\t\t\t    matcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || (seed ? preFilter : preexisting || postFilter) ?\n\n\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t[] :\n\n\t\t\t\t// ...otherwise use results directly\n\t\t\t\tresults : matcherIn;\n\n\t\t\t\t// Find primary matches\n\t\t\t\tif (matcher) {\n\t\t\t\t\tmatcher(matcherIn, matcherOut, context, xml);\n\t\t\t\t}\n\n\t\t\t\t// Apply postFilter\n\t\t\t\tif (postFilter) {\n\t\t\t\t\ttemp = condense(matcherOut, postMap);\n\t\t\t\t\tpostFilter(temp, [], context, xml);\n\n\t\t\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\t\t\ti = temp.length;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (elem = temp[i]) {\n\t\t\t\t\t\t\tmatcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (seed) {\n\t\t\t\t\tif (postFinder || preFilter) {\n\t\t\t\t\t\tif (postFinder) {\n\t\t\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\t\t\ttemp = [];\n\t\t\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tif (elem = matcherOut[i]) {\n\t\t\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\t\t\ttemp.push(matcherIn[i] = elem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpostFinder(null, matcherOut = [], temp, xml);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tif ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\n\n\t\t\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add elements to results, through postFinder if defined\n\t\t\t\t} else {\n\t\t\t\t\tmatcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\t\t\t\t\tif (postFinder) {\n\t\t\t\t\t\tpostFinder(null, results, matcherOut, xml);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpush.apply(results, matcherOut);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfunction matcherFromTokens(tokens) {\n\t\t\tvar checkContext,\n\t\t\t    matcher,\n\t\t\t    j,\n\t\t\t    len = tokens.length,\n\t\t\t    leadingRelative = Expr.relative[tokens[0].type],\n\t\t\t    implicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\t\t    i = leadingRelative ? 1 : 0,\n\n\n\t\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\t\tmatchContext = addCombinator(function (elem) {\n\t\t\t\treturn elem === checkContext;\n\t\t\t}, implicitRelative, true),\n\t\t\t    matchAnyContext = addCombinator(function (elem) {\n\t\t\t\treturn indexOf(checkContext, elem) > -1;\n\t\t\t}, implicitRelative, true),\n\t\t\t    matchers = [function (elem, context, xml) {\n\t\t\t\tvar ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));\n\t\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\t\tcheckContext = null;\n\t\t\t\treturn ret;\n\t\t\t}];\n\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (matcher = Expr.relative[tokens[i].type]) {\n\t\t\t\t\tmatchers = [addCombinator(elementMatcher(matchers), matcher)];\n\t\t\t\t} else {\n\t\t\t\t\tmatcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);\n\n\t\t\t\t\t// Return special upon seeing a positional matcher\n\t\t\t\t\tif (matcher[expando]) {\n\t\t\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\t\t\tj = ++i;\n\t\t\t\t\t\tfor (; j < len; j++) {\n\t\t\t\t\t\t\tif (Expr.relative[tokens[j].type]) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === \" \" ? \"*\" : \"\" })).replace(rtrim, \"$1\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n\t\t\t\t\t}\n\t\t\t\t\tmatchers.push(matcher);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn elementMatcher(matchers);\n\t\t}\n\n\t\tfunction matcherFromGroupMatchers(elementMatchers, setMatchers) {\n\t\t\tvar bySet = setMatchers.length > 0,\n\t\t\t    byElement = elementMatchers.length > 0,\n\t\t\t    superMatcher = function (seed, context, xml, results, outermost) {\n\t\t\t\tvar elem,\n\t\t\t\t    j,\n\t\t\t\t    matcher,\n\t\t\t\t    matchedCount = 0,\n\t\t\t\t    i = \"0\",\n\t\t\t\t    unmatched = seed && [],\n\t\t\t\t    setMatched = [],\n\t\t\t\t    contextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"](\"*\", outermost),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\n\t\t\t\t    len = elems.length;\n\n\t\t\t\tif (outermost) {\n\t\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t\t}\n\n\t\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t\t// Support: IE<9, Safari\n\t\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\t\tfor (; i !== len && (elem = elems[i]) != null; i++) {\n\t\t\t\t\tif (byElement && elem) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\tif (!context && elem.ownerDocument !== document) {\n\t\t\t\t\t\t\tsetDocument(elem);\n\t\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (matcher = elementMatchers[j++]) {\n\t\t\t\t\t\t\tif (matcher(elem, context || document, xml)) {\n\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (outermost) {\n\t\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\t\tif (bySet) {\n\t\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\t\tif (elem = !matcher && elem) {\n\t\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\t\tif (seed) {\n\t\t\t\t\t\t\tunmatched.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t\t// makes the latter nonnegative.\n\t\t\t\tmatchedCount += i;\n\n\t\t\t\t// Apply set filters to unmatched elements\n\t\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t\t// no element matchers and no seed.\n\t\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t\t// numerically zero.\n\t\t\t\tif (bySet && i !== matchedCount) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile (matcher = setMatchers[j++]) {\n\t\t\t\t\t\tmatcher(unmatched, setMatched, context, xml);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (seed) {\n\t\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\t\tif (matchedCount > 0) {\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tif (!(unmatched[i] || setMatched[i])) {\n\t\t\t\t\t\t\t\t\tsetMatched[i] = pop.call(results);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\t\tsetMatched = condense(setMatched);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add matches to results\n\t\t\t\t\tpush.apply(results, setMatched);\n\n\t\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\t\tif (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n\n\t\t\t\t\t\tSizzle.uniqueSort(results);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override manipulation of globals by nested matchers\n\t\t\t\tif (outermost) {\n\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\toutermostContext = contextBackup;\n\t\t\t\t}\n\n\t\t\t\treturn unmatched;\n\t\t\t};\n\n\t\t\treturn bySet ? markFunction(superMatcher) : superMatcher;\n\t\t}\n\n\t\tcompile = Sizzle.compile = function (selector, match /* Internal Use Only */) {\n\t\t\tvar i,\n\t\t\t    setMatchers = [],\n\t\t\t    elementMatchers = [],\n\t\t\t    cached = compilerCache[selector + \" \"];\n\n\t\t\tif (!cached) {\n\t\t\t\t// Generate a function of recursive functions that can be used to check each element\n\t\t\t\tif (!match) {\n\t\t\t\t\tmatch = tokenize(selector);\n\t\t\t\t}\n\t\t\t\ti = match.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tcached = matcherFromTokens(match[i]);\n\t\t\t\t\tif (cached[expando]) {\n\t\t\t\t\t\tsetMatchers.push(cached);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telementMatchers.push(cached);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Cache the compiled function\n\t\t\t\tcached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));\n\n\t\t\t\t// Save selector and tokenization\n\t\t\t\tcached.selector = selector;\n\t\t\t}\n\t\t\treturn cached;\n\t\t};\n\n\t\t/**\n   * A low-level selection function that works with Sizzle's compiled\n   *  selector functions\n   * @param {String|Function} selector A selector or a pre-compiled\n   *  selector function built with Sizzle.compile\n   * @param {Element} context\n   * @param {Array} [results]\n   * @param {Array} [seed] A set of elements to match against\n   */\n\t\tselect = Sizzle.select = function (selector, context, results, seed) {\n\t\t\tvar i,\n\t\t\t    tokens,\n\t\t\t    token,\n\t\t\t    type,\n\t\t\t    find,\n\t\t\t    compiled = typeof selector === \"function\" && selector,\n\t\t\t    match = !seed && tokenize(selector = compiled.selector || selector);\n\n\t\t\tresults = results || [];\n\n\t\t\t// Try to minimize operations if there is only one selector in the list and no seed\n\t\t\t// (the latter of which guarantees us context)\n\t\t\tif (match.length === 1) {\n\n\t\t\t\t// Reduce context if the leading compound selector is an ID\n\t\t\t\ttokens = match[0] = match[0].slice(0);\n\t\t\t\tif (tokens.length > 2 && (token = tokens[0]).type === \"ID\" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\n\n\t\t\t\t\tcontext = (Expr.find[\"ID\"](token.matches[0].replace(runescape, funescape), context) || [])[0];\n\t\t\t\t\tif (!context) {\n\t\t\t\t\t\treturn results;\n\n\t\t\t\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t\t\t} else if (compiled) {\n\t\t\t\t\t\tcontext = context.parentNode;\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = selector.slice(tokens.shift().value.length);\n\t\t\t\t}\n\n\t\t\t\t// Fetch a seed set for right-to-left matching\n\t\t\t\ti = matchExpr[\"needsContext\"].test(selector) ? 0 : tokens.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\ttoken = tokens[i];\n\n\t\t\t\t\t// Abort if we hit a combinator\n\t\t\t\t\tif (Expr.relative[type = token.type]) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (find = Expr.find[type]) {\n\t\t\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\t\t\tif (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\n\n\t\t\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\t\t\ttokens.splice(i, 1);\n\t\t\t\t\t\t\tselector = seed.length && toSelector(tokens);\n\t\t\t\t\t\t\tif (!selector) {\n\t\t\t\t\t\t\t\tpush.apply(results, seed);\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Compile and execute a filtering function if one is not provided\n\t\t\t// Provide `match` to avoid retokenization if we modified the selector above\n\t\t\t(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);\n\t\t\treturn results;\n\t\t};\n\n\t\t// One-time assignments\n\n\t\t// Sort stability\n\t\tsupport.sortStable = expando.split(\"\").sort(sortOrder).join(\"\") === expando;\n\n\t\t// Support: Chrome 14-35+\n\t\t// Always assume duplicates if they aren't passed to the comparison function\n\t\tsupport.detectDuplicates = !!hasDuplicate;\n\n\t\t// Initialize against the default document\n\t\tsetDocument();\n\n\t\t// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n\t\t// Detached nodes confoundingly follow *each other*\n\t\tsupport.sortDetached = assert(function (el) {\n\t\t\t// Should return 1, but returns 4 (following)\n\t\t\treturn el.compareDocumentPosition(document.createElement(\"fieldset\")) & 1;\n\t\t});\n\n\t\t// Support: IE<8\n\t\t// Prevent attribute/property \"interpolation\"\n\t\t// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\t\tif (!assert(function (el) {\n\t\t\tel.innerHTML = \"<a href='#'></a>\";\n\t\t\treturn el.firstChild.getAttribute(\"href\") === \"#\";\n\t\t})) {\n\t\t\taddHandle(\"type|href|height|width\", function (elem, name, isXML) {\n\t\t\t\tif (!isXML) {\n\t\t\t\t\treturn elem.getAttribute(name, name.toLowerCase() === \"type\" ? 1 : 2);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// Use defaultValue in place of getAttribute(\"value\")\n\t\tif (!support.attributes || !assert(function (el) {\n\t\t\tel.innerHTML = \"<input/>\";\n\t\t\tel.firstChild.setAttribute(\"value\", \"\");\n\t\t\treturn el.firstChild.getAttribute(\"value\") === \"\";\n\t\t})) {\n\t\t\taddHandle(\"value\", function (elem, name, isXML) {\n\t\t\t\tif (!isXML && elem.nodeName.toLowerCase() === \"input\") {\n\t\t\t\t\treturn elem.defaultValue;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// Use getAttributeNode to fetch booleans when getAttribute lies\n\t\tif (!assert(function (el) {\n\t\t\treturn el.getAttribute(\"disabled\") == null;\n\t\t})) {\n\t\t\taddHandle(booleans, function (elem, name, isXML) {\n\t\t\t\tvar val;\n\t\t\t\tif (!isXML) {\n\t\t\t\t\treturn elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn Sizzle;\n\t}(window);\n\n\tjQuery.find = Sizzle;\n\tjQuery.expr = Sizzle.selectors;\n\n\t// Deprecated\n\tjQuery.expr[\":\"] = jQuery.expr.pseudos;\n\tjQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\n\tjQuery.text = Sizzle.getText;\n\tjQuery.isXMLDoc = Sizzle.isXML;\n\tjQuery.contains = Sizzle.contains;\n\tjQuery.escapeSelector = Sizzle.escape;\n\n\tvar dir = function (elem, dir, until) {\n\t\tvar matched = [],\n\t\t    truncate = until !== undefined;\n\n\t\twhile ((elem = elem[dir]) && elem.nodeType !== 9) {\n\t\t\tif (elem.nodeType === 1) {\n\t\t\t\tif (truncate && jQuery(elem).is(until)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tmatched.push(elem);\n\t\t\t}\n\t\t}\n\t\treturn matched;\n\t};\n\n\tvar siblings = function (n, elem) {\n\t\tvar matched = [];\n\n\t\tfor (; n; n = n.nextSibling) {\n\t\t\tif (n.nodeType === 1 && n !== elem) {\n\t\t\t\tmatched.push(n);\n\t\t\t}\n\t\t}\n\n\t\treturn matched;\n\t};\n\n\tvar rneedsContext = jQuery.expr.match.needsContext;\n\n\tfunction nodeName(elem, name) {\n\n\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t};\n\tvar rsingleTag = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;\n\n\tvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n\t// Implement the identical functionality for filter and not\n\tfunction winnow(elements, qualifier, not) {\n\t\tif (jQuery.isFunction(qualifier)) {\n\t\t\treturn jQuery.grep(elements, function (elem, i) {\n\t\t\t\treturn !!qualifier.call(elem, i, elem) !== not;\n\t\t\t});\n\t\t}\n\n\t\t// Single element\n\t\tif (qualifier.nodeType) {\n\t\t\treturn jQuery.grep(elements, function (elem) {\n\t\t\t\treturn elem === qualifier !== not;\n\t\t\t});\n\t\t}\n\n\t\t// Arraylike of elements (jQuery, arguments, Array)\n\t\tif (typeof qualifier !== \"string\") {\n\t\t\treturn jQuery.grep(elements, function (elem) {\n\t\t\t\treturn indexOf.call(qualifier, elem) > -1 !== not;\n\t\t\t});\n\t\t}\n\n\t\t// Simple selector that can be filtered directly, removing non-Elements\n\t\tif (risSimple.test(qualifier)) {\n\t\t\treturn jQuery.filter(qualifier, elements, not);\n\t\t}\n\n\t\t// Complex selector, compare the two sets, removing non-Elements\n\t\tqualifier = jQuery.filter(qualifier, elements);\n\t\treturn jQuery.grep(elements, function (elem) {\n\t\t\treturn indexOf.call(qualifier, elem) > -1 !== not && elem.nodeType === 1;\n\t\t});\n\t}\n\n\tjQuery.filter = function (expr, elems, not) {\n\t\tvar elem = elems[0];\n\n\t\tif (not) {\n\t\t\texpr = \":not(\" + expr + \")\";\n\t\t}\n\n\t\tif (elems.length === 1 && elem.nodeType === 1) {\n\t\t\treturn jQuery.find.matchesSelector(elem, expr) ? [elem] : [];\n\t\t}\n\n\t\treturn jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\n\t\t\treturn elem.nodeType === 1;\n\t\t}));\n\t};\n\n\tjQuery.fn.extend({\n\t\tfind: function (selector) {\n\t\t\tvar i,\n\t\t\t    ret,\n\t\t\t    len = this.length,\n\t\t\t    self = this;\n\n\t\t\tif (typeof selector !== \"string\") {\n\t\t\t\treturn this.pushStack(jQuery(selector).filter(function () {\n\t\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\t\tif (jQuery.contains(self[i], this)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tret = this.pushStack([]);\n\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tjQuery.find(selector, self[i], ret);\n\t\t\t}\n\n\t\t\treturn len > 1 ? jQuery.uniqueSort(ret) : ret;\n\t\t},\n\t\tfilter: function (selector) {\n\t\t\treturn this.pushStack(winnow(this, selector || [], false));\n\t\t},\n\t\tnot: function (selector) {\n\t\t\treturn this.pushStack(winnow(this, selector || [], true));\n\t\t},\n\t\tis: function (selector) {\n\t\t\treturn !!winnow(this,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\n\t\t}\n\t});\n\n\t// Initialize a jQuery object\n\n\n\t// A central reference to the root jQuery(document)\n\tvar rootjQuery,\n\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\t    init = jQuery.fn.init = function (selector, context, root) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif (!selector) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif (typeof selector === \"string\") {\n\t\t\tif (selector[0] === \"<\" && selector[selector.length - 1] === \">\" && selector.length >= 3) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [null, selector, null];\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec(selector);\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif (match && (match[1] || !context)) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif (match[1]) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[0] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n\t\t\t\t\t\tfor (match in context) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif (jQuery.isFunction(this[match])) {\n\t\t\t\t\t\t\t\tthis[match](context[match]);\n\n\t\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr(match, context[match]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById(match[2]);\n\n\t\t\t\t\tif (elem) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[0] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if (!context || context.jquery) {\n\t\t\t\treturn (context || root).find(selector);\n\n\t\t\t\t// HANDLE: $(expr, context)\n\t\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor(context).find(selector);\n\t\t\t}\n\n\t\t\t// HANDLE: $(DOMElement)\n\t\t} else if (selector.nodeType) {\n\t\t\tthis[0] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t\t// HANDLE: $(function)\n\t\t\t// Shortcut for document ready\n\t\t} else if (jQuery.isFunction(selector)) {\n\t\t\treturn root.ready !== undefined ? root.ready(selector) :\n\n\t\t\t// Execute immediately if ready is not present\n\t\t\tselector(jQuery);\n\t\t}\n\n\t\treturn jQuery.makeArray(selector, this);\n\t};\n\n\t// Give the init function the jQuery prototype for later instantiation\n\tinit.prototype = jQuery.fn;\n\n\t// Initialize central reference\n\trootjQuery = jQuery(document);\n\n\tvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\n\tjQuery.fn.extend({\n\t\thas: function (target) {\n\t\t\tvar targets = jQuery(target, this),\n\t\t\t    l = targets.length;\n\n\t\t\treturn this.filter(function () {\n\t\t\t\tvar i = 0;\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tif (jQuery.contains(this, targets[i])) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tclosest: function (selectors, context) {\n\t\t\tvar cur,\n\t\t\t    i = 0,\n\t\t\t    l = this.length,\n\t\t\t    matched = [],\n\t\t\t    targets = typeof selectors !== \"string\" && jQuery(selectors);\n\n\t\t\t// Positional selectors never match, since there's no _selection_ context\n\t\t\tif (!rneedsContext.test(selectors)) {\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tfor (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\n\n\t\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\t\tif (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\n\n\t\t\t\t\t\t\tmatched.push(cur);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);\n\t\t},\n\n\t\t// Determine the position of an element within the set\n\t\tindex: function (elem) {\n\n\t\t\t// No argument, return index in parent\n\t\t\tif (!elem) {\n\t\t\t\treturn this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n\t\t\t}\n\n\t\t\t// Index in selector\n\t\t\tif (typeof elem === \"string\") {\n\t\t\t\treturn indexOf.call(jQuery(elem), this[0]);\n\t\t\t}\n\n\t\t\t// Locate the position of the desired element\n\t\t\treturn indexOf.call(this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[0] : elem);\n\t\t},\n\n\t\tadd: function (selector, context) {\n\t\t\treturn this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));\n\t\t},\n\n\t\taddBack: function (selector) {\n\t\t\treturn this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n\t\t}\n\t});\n\n\tfunction sibling(cur, dir) {\n\t\twhile ((cur = cur[dir]) && cur.nodeType !== 1) {}\n\t\treturn cur;\n\t}\n\n\tjQuery.each({\n\t\tparent: function (elem) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t\t},\n\t\tparents: function (elem) {\n\t\t\treturn dir(elem, \"parentNode\");\n\t\t},\n\t\tparentsUntil: function (elem, i, until) {\n\t\t\treturn dir(elem, \"parentNode\", until);\n\t\t},\n\t\tnext: function (elem) {\n\t\t\treturn sibling(elem, \"nextSibling\");\n\t\t},\n\t\tprev: function (elem) {\n\t\t\treturn sibling(elem, \"previousSibling\");\n\t\t},\n\t\tnextAll: function (elem) {\n\t\t\treturn dir(elem, \"nextSibling\");\n\t\t},\n\t\tprevAll: function (elem) {\n\t\t\treturn dir(elem, \"previousSibling\");\n\t\t},\n\t\tnextUntil: function (elem, i, until) {\n\t\t\treturn dir(elem, \"nextSibling\", until);\n\t\t},\n\t\tprevUntil: function (elem, i, until) {\n\t\t\treturn dir(elem, \"previousSibling\", until);\n\t\t},\n\t\tsiblings: function (elem) {\n\t\t\treturn siblings((elem.parentNode || {}).firstChild, elem);\n\t\t},\n\t\tchildren: function (elem) {\n\t\t\treturn siblings(elem.firstChild);\n\t\t},\n\t\tcontents: function (elem) {\n\t\t\tif (nodeName(elem, \"iframe\")) {\n\t\t\t\treturn elem.contentDocument;\n\t\t\t}\n\n\t\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t\t// Treat the template element as a regular one in browsers that\n\t\t\t// don't support it.\n\t\t\tif (nodeName(elem, \"template\")) {\n\t\t\t\telem = elem.content || elem;\n\t\t\t}\n\n\t\t\treturn jQuery.merge([], elem.childNodes);\n\t\t}\n\t}, function (name, fn) {\n\t\tjQuery.fn[name] = function (until, selector) {\n\t\t\tvar matched = jQuery.map(this, fn, until);\n\n\t\t\tif (name.slice(-5) !== \"Until\") {\n\t\t\t\tselector = until;\n\t\t\t}\n\n\t\t\tif (selector && typeof selector === \"string\") {\n\t\t\t\tmatched = jQuery.filter(selector, matched);\n\t\t\t}\n\n\t\t\tif (this.length > 1) {\n\n\t\t\t\t// Remove duplicates\n\t\t\t\tif (!guaranteedUnique[name]) {\n\t\t\t\t\tjQuery.uniqueSort(matched);\n\t\t\t\t}\n\n\t\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\t\tif (rparentsprev.test(name)) {\n\t\t\t\t\tmatched.reverse();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.pushStack(matched);\n\t\t};\n\t});\n\tvar rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\n\n\t// Convert String-formatted options into Object-formatted ones\n\tfunction createOptions(options) {\n\t\tvar object = {};\n\t\tjQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {\n\t\t\tobject[flag] = true;\n\t\t});\n\t\treturn object;\n\t}\n\n\t/*\n  * Create a callback list using the following parameters:\n  *\n  *\toptions: an optional list of space-separated options that will change how\n  *\t\t\tthe callback list behaves or a more traditional option object\n  *\n  * By default a callback list will act like an event callback list and can be\n  * \"fired\" multiple times.\n  *\n  * Possible options:\n  *\n  *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n  *\n  *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n  *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n  *\t\t\t\t\tvalues (like a Deferred)\n  *\n  *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n  *\n  *\tstopOnFalse:\tinterrupt callings when a callback returns false\n  *\n  */\n\tjQuery.Callbacks = function (options) {\n\n\t\t// Convert options from String-formatted to Object-formatted if needed\n\t\t// (we check in cache first)\n\t\toptions = typeof options === \"string\" ? createOptions(options) : jQuery.extend({}, options);\n\n\t\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\n\t\t// Fire callbacks\n\t\tfire = function () {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor (; queue.length; firingIndex = -1) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile (++firingIndex < list.length) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif (!options.memory) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif (locked) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif (memory) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function () {\n\t\t\t\tif (list) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif (memory && !firing) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push(memory);\n\t\t\t\t\t}\n\n\t\t\t\t\t(function add(args) {\n\t\t\t\t\t\tjQuery.each(args, function (_, arg) {\n\t\t\t\t\t\t\tif (jQuery.isFunction(arg)) {\n\t\t\t\t\t\t\t\tif (!options.unique || !self.has(arg)) {\n\t\t\t\t\t\t\t\t\tlist.push(arg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (arg && arg.length && jQuery.type(arg) !== \"string\") {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd(arg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t})(arguments);\n\n\t\t\t\t\tif (memory && !firing) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function () {\n\t\t\t\tjQuery.each(arguments, function (_, arg) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ((index = jQuery.inArray(arg, list, index)) > -1) {\n\t\t\t\t\t\tlist.splice(index, 1);\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif (index <= firingIndex) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function (fn) {\n\t\t\t\treturn fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function () {\n\t\t\t\tif (list) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function () {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function () {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function () {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif (!memory && !firing) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function () {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function (context, args) {\n\t\t\t\tif (!locked) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [context, args.slice ? args.slice() : args];\n\t\t\t\t\tqueue.push(args);\n\t\t\t\t\tif (!firing) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function () {\n\t\t\t\tself.fireWith(this, arguments);\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function () {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\t\treturn self;\n\t};\n\n\tfunction Identity(v) {\n\t\treturn v;\n\t}\n\tfunction Thrower(ex) {\n\t\tthrow ex;\n\t}\n\n\tfunction adoptValue(value, resolve, reject, noValue) {\n\t\tvar method;\n\n\t\ttry {\n\n\t\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\t\tif (value && jQuery.isFunction(method = value.promise)) {\n\t\t\t\tmethod.call(value).done(resolve).fail(reject);\n\n\t\t\t\t// Other thenables\n\t\t\t} else if (value && jQuery.isFunction(method = value.then)) {\n\t\t\t\tmethod.call(value, resolve, reject);\n\n\t\t\t\t// Other non-thenables\n\t\t\t} else {\n\n\t\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\t\tresolve.apply(undefined, [value].slice(noValue));\n\t\t\t}\n\n\t\t\t// For Promises/A+, convert exceptions into rejections\n\t\t\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t\t\t// Deferred#then to conditionally suppress rejection.\n\t\t} catch (value) {\n\n\t\t\t// Support: Android 4.0 only\n\t\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\t\treject.apply(undefined, [value]);\n\t\t}\n\t}\n\n\tjQuery.extend({\n\n\t\tDeferred: function (func) {\n\t\t\tvar tuples = [\n\n\t\t\t// action, add listener, callbacks,\n\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t[\"notify\", \"progress\", jQuery.Callbacks(\"memory\"), jQuery.Callbacks(\"memory\"), 2], [\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), 0, \"resolved\"], [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), 1, \"rejected\"]],\n\t\t\t    state = \"pending\",\n\t\t\t    promise = {\n\t\t\t\tstate: function () {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function () {\n\t\t\t\t\tdeferred.done(arguments).fail(arguments);\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function (fn) {\n\t\t\t\t\treturn promise.then(null, fn);\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function () /* fnDone, fnFail, fnProgress */{\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred(function (newDefer) {\n\t\t\t\t\t\tjQuery.each(tuples, function (i, tuple) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[tuple[1]](function () {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply(this, arguments);\n\t\t\t\t\t\t\t\tif (returned && jQuery.isFunction(returned.promise)) {\n\t\t\t\t\t\t\t\t\treturned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[tuple[0] + \"With\"](this, fn ? [returned] : arguments);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t}).promise();\n\t\t\t\t},\n\t\t\t\tthen: function (onFulfilled, onRejected, onProgress) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve(depth, deferred, handler, special) {\n\t\t\t\t\t\treturn function () {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t    args = arguments,\n\t\t\t\t\t\t\t    mightThrow = function () {\n\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\tif (depth < maxDepth) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturned = handler.apply(that, args);\n\n\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\tif (returned === deferred.promise()) {\n\t\t\t\t\t\t\t\t\tthrow new TypeError(\"Thenable self-resolution\");\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\tthen = returned && (\n\n\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\ttypeof returned === \"object\" || typeof returned === \"function\") && returned.then;\n\n\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\tif (jQuery.isFunction(then)) {\n\n\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\tif (special) {\n\t\t\t\t\t\t\t\t\t\tthen.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\tthen.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\tif (handler !== Identity) {\n\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\targs = [returned];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t(special || deferred.resolveWith)(that, args);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\n\n\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\tprocess = special ? mightThrow : function () {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t} catch (e) {\n\n\t\t\t\t\t\t\t\t\tif (jQuery.Deferred.exceptionHook) {\n\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook(e, process.stackTrace);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\tif (depth + 1 >= maxDepth) {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif (handler !== Thrower) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [e];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith(that, args);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif (depth) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif (jQuery.Deferred.getStackHook) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout(process);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred(function (newDefer) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[0][3].add(resolve(0, newDefer, jQuery.isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[1][3].add(resolve(0, newDefer, jQuery.isFunction(onFulfilled) ? onFulfilled : Identity));\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[2][3].add(resolve(0, newDefer, jQuery.isFunction(onRejected) ? onRejected : Thrower));\n\t\t\t\t\t}).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function (obj) {\n\t\t\t\t\treturn obj != null ? jQuery.extend(obj, promise) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\t    deferred = {};\n\n\t\t\t// Add list-specific methods\n\t\t\tjQuery.each(tuples, function (i, tuple) {\n\t\t\t\tvar list = tuple[2],\n\t\t\t\t    stateString = tuple[5];\n\n\t\t\t\t// promise.progress = list.add\n\t\t\t\t// promise.done = list.add\n\t\t\t\t// promise.fail = list.add\n\t\t\t\tpromise[tuple[1]] = list.add;\n\n\t\t\t\t// Handle state\n\t\t\t\tif (stateString) {\n\t\t\t\t\tlist.add(function () {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[3 - i][2].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[0][2].lock);\n\t\t\t\t}\n\n\t\t\t\t// progress_handlers.fire\n\t\t\t\t// fulfilled_handlers.fire\n\t\t\t\t// rejected_handlers.fire\n\t\t\t\tlist.add(tuple[3].fire);\n\n\t\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\t\tdeferred[tuple[0]] = function () {\n\t\t\t\t\tdeferred[tuple[0] + \"With\"](this === deferred ? undefined : this, arguments);\n\t\t\t\t\treturn this;\n\t\t\t\t};\n\n\t\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\t\tdeferred[tuple[0] + \"With\"] = list.fireWith;\n\t\t\t});\n\n\t\t\t// Make the deferred a promise\n\t\t\tpromise.promise(deferred);\n\n\t\t\t// Call given func if any\n\t\t\tif (func) {\n\t\t\t\tfunc.call(deferred, deferred);\n\t\t\t}\n\n\t\t\t// All done!\n\t\t\treturn deferred;\n\t\t},\n\n\t\t// Deferred helper\n\t\twhen: function (singleValue) {\n\t\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array(i),\n\t\t\t    resolveValues = slice.call(arguments),\n\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function (i) {\n\t\t\t\treturn function (value) {\n\t\t\t\t\tresolveContexts[i] = this;\n\t\t\t\t\tresolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;\n\t\t\t\t\tif (! --remaining) {\n\t\t\t\t\t\tmaster.resolveWith(resolveContexts, resolveValues);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\t\tif (remaining <= 1) {\n\t\t\t\tadoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);\n\n\t\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\t\tif (master.state() === \"pending\" || jQuery.isFunction(resolveValues[i] && resolveValues[i].then)) {\n\n\t\t\t\t\treturn master.then();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\t\twhile (i--) {\n\t\t\t\tadoptValue(resolveValues[i], updateFunc(i), master.reject);\n\t\t\t}\n\n\t\t\treturn master.promise();\n\t\t}\n\t});\n\n\t// These usually indicate a programmer mistake during development,\n\t// warn about them ASAP rather than swallowing them by default.\n\tvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\n\tjQuery.Deferred.exceptionHook = function (error, stack) {\n\n\t\t// Support: IE 8 - 9 only\n\t\t// Console exists when dev tools are open, which can happen at any time\n\t\tif (window.console && window.console.warn && error && rerrorNames.test(error.name)) {\n\t\t\twindow.console.warn(\"jQuery.Deferred exception: \" + error.message, error.stack, stack);\n\t\t}\n\t};\n\n\tjQuery.readyException = function (error) {\n\t\twindow.setTimeout(function () {\n\t\t\tthrow error;\n\t\t});\n\t};\n\n\t// The deferred used on DOM ready\n\tvar readyList = jQuery.Deferred();\n\n\tjQuery.fn.ready = function (fn) {\n\n\t\treadyList.then(fn)\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch(function (error) {\n\t\t\tjQuery.readyException(error);\n\t\t});\n\n\t\treturn this;\n\t};\n\n\tjQuery.extend({\n\n\t\t// Is the DOM ready to be used? Set to true once it occurs.\n\t\tisReady: false,\n\n\t\t// A counter to track how many items to wait for before\n\t\t// the ready event fires. See #6781\n\t\treadyWait: 1,\n\n\t\t// Handle when the DOM is ready\n\t\tready: function (wait) {\n\n\t\t\t// Abort if there are pending holds or we're already ready\n\t\t\tif (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Remember that the DOM is ready\n\t\t\tjQuery.isReady = true;\n\n\t\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\t\tif (wait !== true && --jQuery.readyWait > 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If there are functions bound, to execute\n\t\t\treadyList.resolveWith(document, [jQuery]);\n\t\t}\n\t});\n\n\tjQuery.ready.then = readyList.then;\n\n\t// The ready event handler and self cleanup method\n\tfunction completed() {\n\t\tdocument.removeEventListener(\"DOMContentLoaded\", completed);\n\t\twindow.removeEventListener(\"load\", completed);\n\t\tjQuery.ready();\n\t}\n\n\t// Catch cases where $(document).ready() is called\n\t// after the browser event has already occurred.\n\t// Support: IE <=9 - 10 only\n\t// Older IE sometimes signals \"interactive\" too soon\n\tif (document.readyState === \"complete\" || document.readyState !== \"loading\" && !document.documentElement.doScroll) {\n\n\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\t\twindow.setTimeout(jQuery.ready);\n\t} else {\n\n\t\t// Use the handy event callback\n\t\tdocument.addEventListener(\"DOMContentLoaded\", completed);\n\n\t\t// A fallback to window.onload, that will always work\n\t\twindow.addEventListener(\"load\", completed);\n\t}\n\n\t// Multifunctional method to get and set values of a collection\n\t// The value/s can optionally be executed if it's a function\n\tvar access = function (elems, fn, key, value, chainable, emptyGet, raw) {\n\t\tvar i = 0,\n\t\t    len = elems.length,\n\t\t    bulk = key == null;\n\n\t\t// Sets many values\n\t\tif (jQuery.type(key) === \"object\") {\n\t\t\tchainable = true;\n\t\t\tfor (i in key) {\n\t\t\t\taccess(elems, fn, i, key[i], true, emptyGet, raw);\n\t\t\t}\n\n\t\t\t// Sets one value\n\t\t} else if (value !== undefined) {\n\t\t\tchainable = true;\n\n\t\t\tif (!jQuery.isFunction(value)) {\n\t\t\t\traw = true;\n\t\t\t}\n\n\t\t\tif (bulk) {\n\n\t\t\t\t// Bulk operations run against the entire set\n\t\t\t\tif (raw) {\n\t\t\t\t\tfn.call(elems, value);\n\t\t\t\t\tfn = null;\n\n\t\t\t\t\t// ...except when executing function values\n\t\t\t\t} else {\n\t\t\t\t\tbulk = fn;\n\t\t\t\t\tfn = function (elem, key, value) {\n\t\t\t\t\t\treturn bulk.call(jQuery(elem), value);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (fn) {\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\tfn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (chainable) {\n\t\t\treturn elems;\n\t\t}\n\n\t\t// Gets\n\t\tif (bulk) {\n\t\t\treturn fn.call(elems);\n\t\t}\n\n\t\treturn len ? fn(elems[0], key) : emptyGet;\n\t};\n\tvar acceptData = function (owner) {\n\n\t\t// Accepts only:\n\t\t//  - Node\n\t\t//    - Node.ELEMENT_NODE\n\t\t//    - Node.DOCUMENT_NODE\n\t\t//  - Object\n\t\t//    - Any\n\t\treturn owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\n\t};\n\n\tfunction Data() {\n\t\tthis.expando = jQuery.expando + Data.uid++;\n\t}\n\n\tData.uid = 1;\n\n\tData.prototype = {\n\n\t\tcache: function (owner) {\n\n\t\t\t// Check if the owner object already has a cache\n\t\t\tvar value = owner[this.expando];\n\n\t\t\t// If not, create one\n\t\t\tif (!value) {\n\t\t\t\tvalue = {};\n\n\t\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t\t// but we should not, see #8335.\n\t\t\t\t// Always return an empty object.\n\t\t\t\tif (acceptData(owner)) {\n\n\t\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t\t// use plain assignment\n\t\t\t\t\tif (owner.nodeType) {\n\t\t\t\t\t\towner[this.expando] = value;\n\n\t\t\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t\t\t// deleted when data is removed\n\t\t\t\t\t} else {\n\t\t\t\t\t\tObject.defineProperty(owner, this.expando, {\n\t\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn value;\n\t\t},\n\t\tset: function (owner, data, value) {\n\t\t\tvar prop,\n\t\t\t    cache = this.cache(owner);\n\n\t\t\t// Handle: [ owner, key, value ] args\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\tif (typeof data === \"string\") {\n\t\t\t\tcache[jQuery.camelCase(data)] = value;\n\n\t\t\t\t// Handle: [ owner, { properties } ] args\n\t\t\t} else {\n\n\t\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\t\tfor (prop in data) {\n\t\t\t\t\tcache[jQuery.camelCase(prop)] = data[prop];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn cache;\n\t\t},\n\t\tget: function (owner, key) {\n\t\t\treturn key === undefined ? this.cache(owner) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[this.expando] && owner[this.expando][jQuery.camelCase(key)];\n\t\t},\n\t\taccess: function (owner, key, value) {\n\n\t\t\t// In cases where either:\n\t\t\t//\n\t\t\t//   1. No key was specified\n\t\t\t//   2. A string key was specified, but no value provided\n\t\t\t//\n\t\t\t// Take the \"read\" path and allow the get method to determine\n\t\t\t// which value to return, respectively either:\n\t\t\t//\n\t\t\t//   1. The entire cache object\n\t\t\t//   2. The data stored at the key\n\t\t\t//\n\t\t\tif (key === undefined || key && typeof key === \"string\" && value === undefined) {\n\n\t\t\t\treturn this.get(owner, key);\n\t\t\t}\n\n\t\t\t// When the key is not a string, or both a key and value\n\t\t\t// are specified, set or extend (existing objects) with either:\n\t\t\t//\n\t\t\t//   1. An object of properties\n\t\t\t//   2. A key and value\n\t\t\t//\n\t\t\tthis.set(owner, key, value);\n\n\t\t\t// Since the \"set\" path can have two possible entry points\n\t\t\t// return the expected data based on which path was taken[*]\n\t\t\treturn value !== undefined ? value : key;\n\t\t},\n\t\tremove: function (owner, key) {\n\t\t\tvar i,\n\t\t\t    cache = owner[this.expando];\n\n\t\t\tif (cache === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (key !== undefined) {\n\n\t\t\t\t// Support array or space separated string of keys\n\t\t\t\tif (Array.isArray(key)) {\n\n\t\t\t\t\t// If key is an array of keys...\n\t\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\t\tkey = key.map(jQuery.camelCase);\n\t\t\t\t} else {\n\t\t\t\t\tkey = jQuery.camelCase(key);\n\n\t\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\t\tkey = key in cache ? [key] : key.match(rnothtmlwhite) || [];\n\t\t\t\t}\n\n\t\t\t\ti = key.length;\n\n\t\t\t\twhile (i--) {\n\t\t\t\t\tdelete cache[key[i]];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove the expando if there's no more data\n\t\t\tif (key === undefined || jQuery.isEmptyObject(cache)) {\n\n\t\t\t\t// Support: Chrome <=35 - 45\n\t\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\t\tif (owner.nodeType) {\n\t\t\t\t\towner[this.expando] = undefined;\n\t\t\t\t} else {\n\t\t\t\t\tdelete owner[this.expando];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\thasData: function (owner) {\n\t\t\tvar cache = owner[this.expando];\n\t\t\treturn cache !== undefined && !jQuery.isEmptyObject(cache);\n\t\t}\n\t};\n\tvar dataPriv = new Data();\n\n\tvar dataUser = new Data();\n\n\t//\tImplementation Summary\n\t//\n\t//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n\t//\t2. Improve the module's maintainability by reducing the storage\n\t//\t\tpaths to a single mechanism.\n\t//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n\t//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n\t//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n\t//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\n\tvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\t    rmultiDash = /[A-Z]/g;\n\n\tfunction getData(data) {\n\t\tif (data === \"true\") {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (data === \"false\") {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (data === \"null\") {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Only convert to a number if it doesn't change the string\n\t\tif (data === +data + \"\") {\n\t\t\treturn +data;\n\t\t}\n\n\t\tif (rbrace.test(data)) {\n\t\t\treturn JSON.parse(data);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tfunction dataAttr(elem, key, data) {\n\t\tvar name;\n\n\t\t// If nothing was found internally, try to fetch any\n\t\t// data from the HTML5 data-* attribute\n\t\tif (data === undefined && elem.nodeType === 1) {\n\t\t\tname = \"data-\" + key.replace(rmultiDash, \"-$&\").toLowerCase();\n\t\t\tdata = elem.getAttribute(name);\n\n\t\t\tif (typeof data === \"string\") {\n\t\t\t\ttry {\n\t\t\t\t\tdata = getData(data);\n\t\t\t\t} catch (e) {}\n\n\t\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\t\tdataUser.set(elem, key, data);\n\t\t\t} else {\n\t\t\t\tdata = undefined;\n\t\t\t}\n\t\t}\n\t\treturn data;\n\t}\n\n\tjQuery.extend({\n\t\thasData: function (elem) {\n\t\t\treturn dataUser.hasData(elem) || dataPriv.hasData(elem);\n\t\t},\n\n\t\tdata: function (elem, name, data) {\n\t\t\treturn dataUser.access(elem, name, data);\n\t\t},\n\n\t\tremoveData: function (elem, name) {\n\t\t\tdataUser.remove(elem, name);\n\t\t},\n\n\t\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t\t// with direct calls to dataPriv methods, these can be deprecated.\n\t\t_data: function (elem, name, data) {\n\t\t\treturn dataPriv.access(elem, name, data);\n\t\t},\n\n\t\t_removeData: function (elem, name) {\n\t\t\tdataPriv.remove(elem, name);\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tdata: function (key, value) {\n\t\t\tvar i,\n\t\t\t    name,\n\t\t\t    data,\n\t\t\t    elem = this[0],\n\t\t\t    attrs = elem && elem.attributes;\n\n\t\t\t// Gets all values\n\t\t\tif (key === undefined) {\n\t\t\t\tif (this.length) {\n\t\t\t\t\tdata = dataUser.get(elem);\n\n\t\t\t\t\tif (elem.nodeType === 1 && !dataPriv.get(elem, \"hasDataAttrs\")) {\n\t\t\t\t\t\ti = attrs.length;\n\t\t\t\t\t\twhile (i--) {\n\n\t\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\t\tif (attrs[i]) {\n\t\t\t\t\t\t\t\tname = attrs[i].name;\n\t\t\t\t\t\t\t\tif (name.indexOf(\"data-\") === 0) {\n\t\t\t\t\t\t\t\t\tname = jQuery.camelCase(name.slice(5));\n\t\t\t\t\t\t\t\t\tdataAttr(elem, name, data[name]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdataPriv.set(elem, \"hasDataAttrs\", true);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Sets multiple values\n\t\t\tif (typeof key === \"object\") {\n\t\t\t\treturn this.each(function () {\n\t\t\t\t\tdataUser.set(this, key);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn access(this, function (value) {\n\t\t\t\tvar data;\n\n\t\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\t\tif (elem && value === undefined) {\n\n\t\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\t\tdata = dataUser.get(elem, key);\n\t\t\t\t\tif (data !== undefined) {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\t\tdata = dataAttr(elem, key);\n\t\t\t\t\tif (data !== undefined) {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\n\t\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Set the data...\n\t\t\t\tthis.each(function () {\n\n\t\t\t\t\t// We always store the camelCased key\n\t\t\t\t\tdataUser.set(this, key, value);\n\t\t\t\t});\n\t\t\t}, null, value, arguments.length > 1, null, true);\n\t\t},\n\n\t\tremoveData: function (key) {\n\t\t\treturn this.each(function () {\n\t\t\t\tdataUser.remove(this, key);\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tqueue: function (elem, type, data) {\n\t\t\tvar queue;\n\n\t\t\tif (elem) {\n\t\t\t\ttype = (type || \"fx\") + \"queue\";\n\t\t\t\tqueue = dataPriv.get(elem, type);\n\n\t\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\t\tif (data) {\n\t\t\t\t\tif (!queue || Array.isArray(data)) {\n\t\t\t\t\t\tqueue = dataPriv.access(elem, type, jQuery.makeArray(data));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqueue.push(data);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn queue || [];\n\t\t\t}\n\t\t},\n\n\t\tdequeue: function (elem, type) {\n\t\t\ttype = type || \"fx\";\n\n\t\t\tvar queue = jQuery.queue(elem, type),\n\t\t\t    startLength = queue.length,\n\t\t\t    fn = queue.shift(),\n\t\t\t    hooks = jQuery._queueHooks(elem, type),\n\t\t\t    next = function () {\n\t\t\t\tjQuery.dequeue(elem, type);\n\t\t\t};\n\n\t\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\t\tif (fn === \"inprogress\") {\n\t\t\t\tfn = queue.shift();\n\t\t\t\tstartLength--;\n\t\t\t}\n\n\t\t\tif (fn) {\n\n\t\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t\t// automatically dequeued\n\t\t\t\tif (type === \"fx\") {\n\t\t\t\t\tqueue.unshift(\"inprogress\");\n\t\t\t\t}\n\n\t\t\t\t// Clear up the last queue stop function\n\t\t\t\tdelete hooks.stop;\n\t\t\t\tfn.call(elem, next, hooks);\n\t\t\t}\n\n\t\t\tif (!startLength && hooks) {\n\t\t\t\thooks.empty.fire();\n\t\t\t}\n\t\t},\n\n\t\t// Not public - generate a queueHooks object, or return the current one\n\t\t_queueHooks: function (elem, type) {\n\t\t\tvar key = type + \"queueHooks\";\n\t\t\treturn dataPriv.get(elem, key) || dataPriv.access(elem, key, {\n\t\t\t\tempty: jQuery.Callbacks(\"once memory\").add(function () {\n\t\t\t\t\tdataPriv.remove(elem, [type + \"queue\", key]);\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tqueue: function (type, data) {\n\t\t\tvar setter = 2;\n\n\t\t\tif (typeof type !== \"string\") {\n\t\t\t\tdata = type;\n\t\t\t\ttype = \"fx\";\n\t\t\t\tsetter--;\n\t\t\t}\n\n\t\t\tif (arguments.length < setter) {\n\t\t\t\treturn jQuery.queue(this[0], type);\n\t\t\t}\n\n\t\t\treturn data === undefined ? this : this.each(function () {\n\t\t\t\tvar queue = jQuery.queue(this, type, data);\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks(this, type);\n\n\t\t\t\tif (type === \"fx\" && queue[0] !== \"inprogress\") {\n\t\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tdequeue: function (type) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t});\n\t\t},\n\t\tclearQueue: function (type) {\n\t\t\treturn this.queue(type || \"fx\", []);\n\t\t},\n\n\t\t// Get a promise resolved when queues of a certain type\n\t\t// are emptied (fx is the type by default)\n\t\tpromise: function (type, obj) {\n\t\t\tvar tmp,\n\t\t\t    count = 1,\n\t\t\t    defer = jQuery.Deferred(),\n\t\t\t    elements = this,\n\t\t\t    i = this.length,\n\t\t\t    resolve = function () {\n\t\t\t\tif (! --count) {\n\t\t\t\t\tdefer.resolveWith(elements, [elements]);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (typeof type !== \"string\") {\n\t\t\t\tobj = type;\n\t\t\t\ttype = undefined;\n\t\t\t}\n\t\t\ttype = type || \"fx\";\n\n\t\t\twhile (i--) {\n\t\t\t\ttmp = dataPriv.get(elements[i], type + \"queueHooks\");\n\t\t\t\tif (tmp && tmp.empty) {\n\t\t\t\t\tcount++;\n\t\t\t\t\ttmp.empty.add(resolve);\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolve();\n\t\t\treturn defer.promise(obj);\n\t\t}\n\t});\n\tvar pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;\n\n\tvar rcssNum = new RegExp(\"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\");\n\n\tvar cssExpand = [\"Top\", \"Right\", \"Bottom\", \"Left\"];\n\n\tvar isHiddenWithinTree = function (elem, el) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" || elem.style.display === \"\" &&\n\n\t\t// Otherwise, check computed style\n\t\t// Support: Firefox <=43 - 45\n\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t// in the document.\n\t\tjQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, \"display\") === \"none\";\n\t};\n\n\tvar swap = function (elem, options, callback, args) {\n\t\tvar ret,\n\t\t    name,\n\t\t    old = {};\n\n\t\t// Remember the old values, and insert the new ones\n\t\tfor (name in options) {\n\t\t\told[name] = elem.style[name];\n\t\t\telem.style[name] = options[name];\n\t\t}\n\n\t\tret = callback.apply(elem, args || []);\n\n\t\t// Revert the old values\n\t\tfor (name in options) {\n\t\t\telem.style[name] = old[name];\n\t\t}\n\n\t\treturn ret;\n\t};\n\n\tfunction adjustCSS(elem, prop, valueParts, tween) {\n\t\tvar adjusted,\n\t\t    scale = 1,\n\t\t    maxIterations = 20,\n\t\t    currentValue = tween ? function () {\n\t\t\treturn tween.cur();\n\t\t} : function () {\n\t\t\treturn jQuery.css(elem, prop, \"\");\n\t\t},\n\t\t    initial = currentValue(),\n\t\t    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? \"\" : \"px\"),\n\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = (jQuery.cssNumber[prop] || unit !== \"px\" && +initial) && rcssNum.exec(jQuery.css(elem, prop));\n\n\t\tif (initialInUnit && initialInUnit[3] !== unit) {\n\n\t\t\t// Trust units reported by jQuery.css\n\t\t\tunit = unit || initialInUnit[3];\n\n\t\t\t// Make sure we update the tween properties later on\n\t\t\tvalueParts = valueParts || [];\n\n\t\t\t// Iteratively approximate from a nonzero starting point\n\t\t\tinitialInUnit = +initial || 1;\n\n\t\t\tdo {\n\n\t\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\t\tscale = scale || \".5\";\n\n\t\t\t\t// Adjust and apply\n\t\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\t\tjQuery.style(elem, prop, initialInUnit + unit);\n\n\t\t\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t\t} while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);\n\t\t}\n\n\t\tif (valueParts) {\n\t\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t\t// Apply relative offset (+=/-=) if specified\n\t\t\tadjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];\n\t\t\tif (tween) {\n\t\t\t\ttween.unit = unit;\n\t\t\t\ttween.start = initialInUnit;\n\t\t\t\ttween.end = adjusted;\n\t\t\t}\n\t\t}\n\t\treturn adjusted;\n\t}\n\n\tvar defaultDisplayMap = {};\n\n\tfunction getDefaultDisplay(elem) {\n\t\tvar temp,\n\t\t    doc = elem.ownerDocument,\n\t\t    nodeName = elem.nodeName,\n\t\t    display = defaultDisplayMap[nodeName];\n\n\t\tif (display) {\n\t\t\treturn display;\n\t\t}\n\n\t\ttemp = doc.body.appendChild(doc.createElement(nodeName));\n\t\tdisplay = jQuery.css(temp, \"display\");\n\n\t\ttemp.parentNode.removeChild(temp);\n\n\t\tif (display === \"none\") {\n\t\t\tdisplay = \"block\";\n\t\t}\n\t\tdefaultDisplayMap[nodeName] = display;\n\n\t\treturn display;\n\t}\n\n\tfunction showHide(elements, show) {\n\t\tvar display,\n\t\t    elem,\n\t\t    values = [],\n\t\t    index = 0,\n\t\t    length = elements.length;\n\n\t\t// Determine new display value for elements that need to change\n\t\tfor (; index < length; index++) {\n\t\t\telem = elements[index];\n\t\t\tif (!elem.style) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tdisplay = elem.style.display;\n\t\t\tif (show) {\n\n\t\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t\t// inline or about-to-be-restored)\n\t\t\t\tif (display === \"none\") {\n\t\t\t\t\tvalues[index] = dataPriv.get(elem, \"display\") || null;\n\t\t\t\t\tif (!values[index]) {\n\t\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (elem.style.display === \"\" && isHiddenWithinTree(elem)) {\n\t\t\t\t\tvalues[index] = getDefaultDisplay(elem);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (display !== \"none\") {\n\t\t\t\t\tvalues[index] = \"none\";\n\n\t\t\t\t\t// Remember what we're overwriting\n\t\t\t\t\tdataPriv.set(elem, \"display\", display);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set the display of the elements in a second loop to avoid constant reflow\n\t\tfor (index = 0; index < length; index++) {\n\t\t\tif (values[index] != null) {\n\t\t\t\telements[index].style.display = values[index];\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n\n\tjQuery.fn.extend({\n\t\tshow: function () {\n\t\t\treturn showHide(this, true);\n\t\t},\n\t\thide: function () {\n\t\t\treturn showHide(this);\n\t\t},\n\t\ttoggle: function (state) {\n\t\t\tif (typeof state === \"boolean\") {\n\t\t\t\treturn state ? this.show() : this.hide();\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tif (isHiddenWithinTree(this)) {\n\t\t\t\t\tjQuery(this).show();\n\t\t\t\t} else {\n\t\t\t\t\tjQuery(this).hide();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\tvar rcheckableType = /^(?:checkbox|radio)$/i;\n\n\tvar rtagName = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i;\n\n\tvar rscriptType = /^$|\\/(?:java|ecma)script/i;\n\n\t// We have to close these tags to support XHTML (#13200)\n\tvar wrapMap = {\n\n\t\t// Support: IE <=9 only\n\t\toption: [1, \"<select multiple='multiple'>\", \"</select>\"],\n\n\t\t// XHTML parsers do not magically insert elements in the\n\t\t// same way that tag soup parsers do. So we cannot shorten\n\t\t// this by omitting <tbody> or other required elements.\n\t\tthead: [1, \"<table>\", \"</table>\"],\n\t\tcol: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n\t\ttr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n\t\ttd: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n\n\t\t_default: [0, \"\", \"\"]\n\t};\n\n\t// Support: IE <=9 only\n\twrapMap.optgroup = wrapMap.option;\n\n\twrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n\twrapMap.th = wrapMap.td;\n\n\tfunction getAll(context, tag) {\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\t\tvar ret;\n\n\t\tif (typeof context.getElementsByTagName !== \"undefined\") {\n\t\t\tret = context.getElementsByTagName(tag || \"*\");\n\t\t} else if (typeof context.querySelectorAll !== \"undefined\") {\n\t\t\tret = context.querySelectorAll(tag || \"*\");\n\t\t} else {\n\t\t\tret = [];\n\t\t}\n\n\t\tif (tag === undefined || tag && nodeName(context, tag)) {\n\t\t\treturn jQuery.merge([context], ret);\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\t// Mark scripts as having already been evaluated\n\tfunction setGlobalEval(elems, refElements) {\n\t\tvar i = 0,\n\t\t    l = elems.length;\n\n\t\tfor (; i < l; i++) {\n\t\t\tdataPriv.set(elems[i], \"globalEval\", !refElements || dataPriv.get(refElements[i], \"globalEval\"));\n\t\t}\n\t}\n\n\tvar rhtml = /<|&#?\\w+;/;\n\n\tfunction buildFragment(elems, context, scripts, selection, ignored) {\n\t\tvar elem,\n\t\t    tmp,\n\t\t    tag,\n\t\t    wrap,\n\t\t    contains,\n\t\t    j,\n\t\t    fragment = context.createDocumentFragment(),\n\t\t    nodes = [],\n\t\t    i = 0,\n\t\t    l = elems.length;\n\n\t\tfor (; i < l; i++) {\n\t\t\telem = elems[i];\n\n\t\t\tif (elem || elem === 0) {\n\n\t\t\t\t// Add nodes directly\n\t\t\t\tif (jQuery.type(elem) === \"object\") {\n\n\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\tjQuery.merge(nodes, elem.nodeType ? [elem] : elem);\n\n\t\t\t\t\t// Convert non-html into a text node\n\t\t\t\t} else if (!rhtml.test(elem)) {\n\t\t\t\t\tnodes.push(context.createTextNode(elem));\n\n\t\t\t\t\t// Convert html into DOM nodes\n\t\t\t\t} else {\n\t\t\t\t\ttmp = tmp || fragment.appendChild(context.createElement(\"div\"));\n\n\t\t\t\t\t// Deserialize a standard representation\n\t\t\t\t\ttag = (rtagName.exec(elem) || [\"\", \"\"])[1].toLowerCase();\n\t\t\t\t\twrap = wrapMap[tag] || wrapMap._default;\n\t\t\t\t\ttmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];\n\n\t\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\t\tj = wrap[0];\n\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\tjQuery.merge(nodes, tmp.childNodes);\n\n\t\t\t\t\t// Remember the top-level container\n\t\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\t\ttmp.textContent = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remove wrapper from fragment\n\t\tfragment.textContent = \"\";\n\n\t\ti = 0;\n\t\twhile (elem = nodes[i++]) {\n\n\t\t\t// Skip elements already in the context collection (trac-4087)\n\t\t\tif (selection && jQuery.inArray(elem, selection) > -1) {\n\t\t\t\tif (ignored) {\n\t\t\t\t\tignored.push(elem);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcontains = jQuery.contains(elem.ownerDocument, elem);\n\n\t\t\t// Append to fragment\n\t\t\ttmp = getAll(fragment.appendChild(elem), \"script\");\n\n\t\t\t// Preserve script evaluation history\n\t\t\tif (contains) {\n\t\t\t\tsetGlobalEval(tmp);\n\t\t\t}\n\n\t\t\t// Capture executables\n\t\t\tif (scripts) {\n\t\t\t\tj = 0;\n\t\t\t\twhile (elem = tmp[j++]) {\n\t\t\t\t\tif (rscriptType.test(elem.type || \"\")) {\n\t\t\t\t\t\tscripts.push(elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn fragment;\n\t}\n\n\t(function () {\n\t\tvar fragment = document.createDocumentFragment(),\n\t\t    div = fragment.appendChild(document.createElement(\"div\")),\n\t\t    input = document.createElement(\"input\");\n\n\t\t// Support: Android 4.0 - 4.3 only\n\t\t// Check state lost if the name is set (#11217)\n\t\t// Support: Windows Web Apps (WWA)\n\t\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\t\tinput.setAttribute(\"type\", \"radio\");\n\t\tinput.setAttribute(\"checked\", \"checked\");\n\t\tinput.setAttribute(\"name\", \"t\");\n\n\t\tdiv.appendChild(input);\n\n\t\t// Support: Android <=4.1 only\n\t\t// Older WebKit doesn't clone checked state correctly in fragments\n\t\tsupport.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;\n\n\t\t// Support: IE <=11 only\n\t\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\t\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\t\tsupport.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;\n\t})();\n\tvar documentElement = document.documentElement;\n\n\tvar rkeyEvent = /^key/,\n\t    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\t    rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\n\tfunction returnTrue() {\n\t\treturn true;\n\t}\n\n\tfunction returnFalse() {\n\t\treturn false;\n\t}\n\n\t// Support: IE <=9 only\n\t// See #13393 for more info\n\tfunction safeActiveElement() {\n\t\ttry {\n\t\t\treturn document.activeElement;\n\t\t} catch (err) {}\n\t}\n\n\tfunction on(elem, types, selector, data, fn, one) {\n\t\tvar origFn, type;\n\n\t\t// Types can be a map of types/handlers\n\t\tif (typeof types === \"object\") {\n\n\t\t\t// ( types-Object, selector, data )\n\t\t\tif (typeof selector !== \"string\") {\n\n\t\t\t\t// ( types-Object, data )\n\t\t\t\tdata = data || selector;\n\t\t\t\tselector = undefined;\n\t\t\t}\n\t\t\tfor (type in types) {\n\t\t\t\ton(elem, type, selector, data, types[type], one);\n\t\t\t}\n\t\t\treturn elem;\n\t\t}\n\n\t\tif (data == null && fn == null) {\n\n\t\t\t// ( types, fn )\n\t\t\tfn = selector;\n\t\t\tdata = selector = undefined;\n\t\t} else if (fn == null) {\n\t\t\tif (typeof selector === \"string\") {\n\n\t\t\t\t// ( types, selector, fn )\n\t\t\t\tfn = data;\n\t\t\t\tdata = undefined;\n\t\t\t} else {\n\n\t\t\t\t// ( types, data, fn )\n\t\t\t\tfn = data;\n\t\t\t\tdata = selector;\n\t\t\t\tselector = undefined;\n\t\t\t}\n\t\t}\n\t\tif (fn === false) {\n\t\t\tfn = returnFalse;\n\t\t} else if (!fn) {\n\t\t\treturn elem;\n\t\t}\n\n\t\tif (one === 1) {\n\t\t\torigFn = fn;\n\t\t\tfn = function (event) {\n\n\t\t\t\t// Can use an empty set, since event contains the info\n\t\t\t\tjQuery().off(event);\n\t\t\t\treturn origFn.apply(this, arguments);\n\t\t\t};\n\n\t\t\t// Use same guid so caller can remove using origFn\n\t\t\tfn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n\t\t}\n\t\treturn elem.each(function () {\n\t\t\tjQuery.event.add(this, types, fn, data, selector);\n\t\t});\n\t}\n\n\t/*\n  * Helper functions for managing events -- not part of the public interface.\n  * Props to Dean Edwards' addEvent library for many of the ideas.\n  */\n\tjQuery.event = {\n\n\t\tglobal: {},\n\n\t\tadd: function (elem, types, handler, data, selector) {\n\n\t\t\tvar handleObjIn,\n\t\t\t    eventHandle,\n\t\t\t    tmp,\n\t\t\t    events,\n\t\t\t    t,\n\t\t\t    handleObj,\n\t\t\t    special,\n\t\t\t    handlers,\n\t\t\t    type,\n\t\t\t    namespaces,\n\t\t\t    origType,\n\t\t\t    elemData = dataPriv.get(elem);\n\n\t\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\t\tif (!elemData) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\t\tif (handler.handler) {\n\t\t\t\thandleObjIn = handler;\n\t\t\t\thandler = handleObjIn.handler;\n\t\t\t\tselector = handleObjIn.selector;\n\t\t\t}\n\n\t\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\t\tif (selector) {\n\t\t\t\tjQuery.find.matchesSelector(documentElement, selector);\n\t\t\t}\n\n\t\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\t\tif (!handler.guid) {\n\t\t\t\thandler.guid = jQuery.guid++;\n\t\t\t}\n\n\t\t\t// Init the element's event structure and main handler, if this is the first\n\t\t\tif (!(events = elemData.events)) {\n\t\t\t\tevents = elemData.events = {};\n\t\t\t}\n\t\t\tif (!(eventHandle = elemData.handle)) {\n\t\t\t\teventHandle = elemData.handle = function (e) {\n\n\t\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Handle multiple events separated by a space\n\t\t\ttypes = (types || \"\").match(rnothtmlwhite) || [\"\"];\n\t\t\tt = types.length;\n\t\t\twhile (t--) {\n\t\t\t\ttmp = rtypenamespace.exec(types[t]) || [];\n\t\t\t\ttype = origType = tmp[1];\n\t\t\t\tnamespaces = (tmp[2] || \"\").split(\".\").sort();\n\n\t\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\t\tif (!type) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\n\t\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\t\ttype = (selector ? special.delegateType : special.bindType) || type;\n\n\t\t\t\t// Update special based on newly reset type\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\n\t\t\t\t// handleObj is passed to all event handlers\n\t\t\t\thandleObj = jQuery.extend({\n\t\t\t\t\ttype: type,\n\t\t\t\t\torigType: origType,\n\t\t\t\t\tdata: data,\n\t\t\t\t\thandler: handler,\n\t\t\t\t\tguid: handler.guid,\n\t\t\t\t\tselector: selector,\n\t\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test(selector),\n\t\t\t\t\tnamespace: namespaces.join(\".\")\n\t\t\t\t}, handleObjIn);\n\n\t\t\t\t// Init the event handler queue if we're the first\n\t\t\t\tif (!(handlers = events[type])) {\n\t\t\t\t\thandlers = events[type] = [];\n\t\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\t\tif (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n\n\t\t\t\t\t\tif (elem.addEventListener) {\n\t\t\t\t\t\t\telem.addEventListener(type, eventHandle);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (special.add) {\n\t\t\t\t\tspecial.add.call(elem, handleObj);\n\n\t\t\t\t\tif (!handleObj.handler.guid) {\n\t\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Add to the element's handler list, delegates in front\n\t\t\t\tif (selector) {\n\t\t\t\t\thandlers.splice(handlers.delegateCount++, 0, handleObj);\n\t\t\t\t} else {\n\t\t\t\t\thandlers.push(handleObj);\n\t\t\t\t}\n\n\t\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\t\tjQuery.event.global[type] = true;\n\t\t\t}\n\t\t},\n\n\t\t// Detach an event or set of events from an element\n\t\tremove: function (elem, types, handler, selector, mappedTypes) {\n\n\t\t\tvar j,\n\t\t\t    origCount,\n\t\t\t    tmp,\n\t\t\t    events,\n\t\t\t    t,\n\t\t\t    handleObj,\n\t\t\t    special,\n\t\t\t    handlers,\n\t\t\t    type,\n\t\t\t    namespaces,\n\t\t\t    origType,\n\t\t\t    elemData = dataPriv.hasData(elem) && dataPriv.get(elem);\n\n\t\t\tif (!elemData || !(events = elemData.events)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Once for each type.namespace in types; type may be omitted\n\t\t\ttypes = (types || \"\").match(rnothtmlwhite) || [\"\"];\n\t\t\tt = types.length;\n\t\t\twhile (t--) {\n\t\t\t\ttmp = rtypenamespace.exec(types[t]) || [];\n\t\t\t\ttype = origType = tmp[1];\n\t\t\t\tnamespaces = (tmp[2] || \"\").split(\".\").sort();\n\n\t\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\t\tif (!type) {\n\t\t\t\t\tfor (type in events) {\n\t\t\t\t\t\tjQuery.event.remove(elem, type + types[t], handler, selector, true);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\t\t\t\ttype = (selector ? special.delegateType : special.bindType) || type;\n\t\t\t\thandlers = events[type] || [];\n\t\t\t\ttmp = tmp[2] && new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\");\n\n\t\t\t\t// Remove matching events\n\t\t\t\torigCount = j = handlers.length;\n\t\t\t\twhile (j--) {\n\t\t\t\t\thandleObj = handlers[j];\n\n\t\t\t\t\tif ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector)) {\n\t\t\t\t\t\thandlers.splice(j, 1);\n\n\t\t\t\t\t\tif (handleObj.selector) {\n\t\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (special.remove) {\n\t\t\t\t\t\t\tspecial.remove.call(elem, handleObj);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\t\tif (origCount && !handlers.length) {\n\t\t\t\t\tif (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n\n\t\t\t\t\t\tjQuery.removeEvent(elem, type, elemData.handle);\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete events[type];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove data and the expando if it's no longer used\n\t\t\tif (jQuery.isEmptyObject(events)) {\n\t\t\t\tdataPriv.remove(elem, \"handle events\");\n\t\t\t}\n\t\t},\n\n\t\tdispatch: function (nativeEvent) {\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tvar event = jQuery.event.fix(nativeEvent);\n\n\t\t\tvar i,\n\t\t\t    j,\n\t\t\t    ret,\n\t\t\t    matched,\n\t\t\t    handleObj,\n\t\t\t    handlerQueue,\n\t\t\t    args = new Array(arguments.length),\n\t\t\t    handlers = (dataPriv.get(this, \"events\") || {})[event.type] || [],\n\t\t\t    special = jQuery.event.special[event.type] || {};\n\n\t\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\t\targs[0] = event;\n\n\t\t\tfor (i = 1; i < arguments.length; i++) {\n\t\t\t\targs[i] = arguments[i];\n\t\t\t}\n\n\t\t\tevent.delegateTarget = this;\n\n\t\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\t\tif (special.preDispatch && special.preDispatch.call(this, event) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Determine handlers\n\t\t\thandlerQueue = jQuery.event.handlers.call(this, event, handlers);\n\n\t\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\t\ti = 0;\n\t\t\twhile ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n\t\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\t\tj = 0;\n\t\t\t\twhile ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n\n\t\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\t\tif (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {\n\n\t\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\t\tret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n\n\t\t\t\t\t\tif (ret !== undefined) {\n\t\t\t\t\t\t\tif ((event.result = ret) === false) {\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Call the postDispatch hook for the mapped type\n\t\t\tif (special.postDispatch) {\n\t\t\t\tspecial.postDispatch.call(this, event);\n\t\t\t}\n\n\t\t\treturn event.result;\n\t\t},\n\n\t\thandlers: function (event, handlers) {\n\t\t\tvar i,\n\t\t\t    handleObj,\n\t\t\t    sel,\n\t\t\t    matchedHandlers,\n\t\t\t    matchedSelectors,\n\t\t\t    handlerQueue = [],\n\t\t\t    delegateCount = handlers.delegateCount,\n\t\t\t    cur = event.target;\n\n\t\t\t// Find delegate handlers\n\t\t\tif (delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!(event.type === \"click\" && event.button >= 1)) {\n\n\t\t\t\tfor (; cur !== this; cur = cur.parentNode || this) {\n\n\t\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\t\tif (cur.nodeType === 1 && !(event.type === \"click\" && cur.disabled === true)) {\n\t\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\t\tfor (i = 0; i < delegateCount; i++) {\n\t\t\t\t\t\t\thandleObj = handlers[i];\n\n\t\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\t\tif (matchedSelectors[sel] === undefined) {\n\t\t\t\t\t\t\t\tmatchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (matchedSelectors[sel]) {\n\t\t\t\t\t\t\t\tmatchedHandlers.push(handleObj);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (matchedHandlers.length) {\n\t\t\t\t\t\t\thandlerQueue.push({ elem: cur, handlers: matchedHandlers });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the remaining (directly-bound) handlers\n\t\t\tcur = this;\n\t\t\tif (delegateCount < handlers.length) {\n\t\t\t\thandlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) });\n\t\t\t}\n\n\t\t\treturn handlerQueue;\n\t\t},\n\n\t\taddProp: function (name, hook) {\n\t\t\tObject.defineProperty(jQuery.Event.prototype, name, {\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true,\n\n\t\t\t\tget: jQuery.isFunction(hook) ? function () {\n\t\t\t\t\tif (this.originalEvent) {\n\t\t\t\t\t\treturn hook(this.originalEvent);\n\t\t\t\t\t}\n\t\t\t\t} : function () {\n\t\t\t\t\tif (this.originalEvent) {\n\t\t\t\t\t\treturn this.originalEvent[name];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tset: function (value) {\n\t\t\t\t\tObject.defineProperty(this, name, {\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t\twritable: true,\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tfix: function (originalEvent) {\n\t\t\treturn originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);\n\t\t},\n\n\t\tspecial: {\n\t\t\tload: {\n\n\t\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\t\tnoBubble: true\n\t\t\t},\n\t\t\tfocus: {\n\n\t\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\t\ttrigger: function () {\n\t\t\t\t\tif (this !== safeActiveElement() && this.focus) {\n\t\t\t\t\t\tthis.focus();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdelegateType: \"focusin\"\n\t\t\t},\n\t\t\tblur: {\n\t\t\t\ttrigger: function () {\n\t\t\t\t\tif (this === safeActiveElement() && this.blur) {\n\t\t\t\t\t\tthis.blur();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdelegateType: \"focusout\"\n\t\t\t},\n\t\t\tclick: {\n\n\t\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\t\ttrigger: function () {\n\t\t\t\t\tif (this.type === \"checkbox\" && this.click && nodeName(this, \"input\")) {\n\t\t\t\t\t\tthis.click();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t\t_default: function (event) {\n\t\t\t\t\treturn nodeName(event.target, \"a\");\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tbeforeunload: {\n\t\t\t\tpostDispatch: function (event) {\n\n\t\t\t\t\t// Support: Firefox 20+\n\t\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\t\tif (event.result !== undefined && event.originalEvent) {\n\t\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.removeEvent = function (elem, type, handle) {\n\n\t\t// This \"if\" is needed for plain objects\n\t\tif (elem.removeEventListener) {\n\t\t\telem.removeEventListener(type, handle);\n\t\t}\n\t};\n\n\tjQuery.Event = function (src, props) {\n\n\t\t// Allow instantiation without the 'new' keyword\n\t\tif (!(this instanceof jQuery.Event)) {\n\t\t\treturn new jQuery.Event(src, props);\n\t\t}\n\n\t\t// Event object\n\t\tif (src && src.type) {\n\t\t\tthis.originalEvent = src;\n\t\t\tthis.type = src.type;\n\n\t\t\t// Events bubbling up the document may have been marked as prevented\n\t\t\t// by a handler lower down the tree; reflect the correct value.\n\t\t\tthis.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&\n\n\t\t\t// Support: Android <=2.3 only\n\t\t\tsrc.returnValue === false ? returnTrue : returnFalse;\n\n\t\t\t// Create target properties\n\t\t\t// Support: Safari <=6 - 7 only\n\t\t\t// Target should not be a text node (#504, #13143)\n\t\t\tthis.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;\n\n\t\t\tthis.currentTarget = src.currentTarget;\n\t\t\tthis.relatedTarget = src.relatedTarget;\n\n\t\t\t// Event type\n\t\t} else {\n\t\t\tthis.type = src;\n\t\t}\n\n\t\t// Put explicitly provided properties onto the event object\n\t\tif (props) {\n\t\t\tjQuery.extend(this, props);\n\t\t}\n\n\t\t// Create a timestamp if incoming event doesn't have one\n\t\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t\t// Mark it as fixed\n\t\tthis[jQuery.expando] = true;\n\t};\n\n\t// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n\t// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\tjQuery.Event.prototype = {\n\t\tconstructor: jQuery.Event,\n\t\tisDefaultPrevented: returnFalse,\n\t\tisPropagationStopped: returnFalse,\n\t\tisImmediatePropagationStopped: returnFalse,\n\t\tisSimulated: false,\n\n\t\tpreventDefault: function () {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\t\tif (e && !this.isSimulated) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t},\n\t\tstopPropagation: function () {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isPropagationStopped = returnTrue;\n\n\t\t\tif (e && !this.isSimulated) {\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\t\t},\n\t\tstopImmediatePropagation: function () {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\t\tif (e && !this.isSimulated) {\n\t\t\t\te.stopImmediatePropagation();\n\t\t\t}\n\n\t\t\tthis.stopPropagation();\n\t\t}\n\t};\n\n\t// Includes all common event props including KeyEvent and MouseEvent specific props\n\tjQuery.each({\n\t\taltKey: true,\n\t\tbubbles: true,\n\t\tcancelable: true,\n\t\tchangedTouches: true,\n\t\tctrlKey: true,\n\t\tdetail: true,\n\t\teventPhase: true,\n\t\tmetaKey: true,\n\t\tpageX: true,\n\t\tpageY: true,\n\t\tshiftKey: true,\n\t\tview: true,\n\t\t\"char\": true,\n\t\tcharCode: true,\n\t\tkey: true,\n\t\tkeyCode: true,\n\t\tbutton: true,\n\t\tbuttons: true,\n\t\tclientX: true,\n\t\tclientY: true,\n\t\toffsetX: true,\n\t\toffsetY: true,\n\t\tpointerId: true,\n\t\tpointerType: true,\n\t\tscreenX: true,\n\t\tscreenY: true,\n\t\ttargetTouches: true,\n\t\ttoElement: true,\n\t\ttouches: true,\n\n\t\twhich: function (event) {\n\t\t\tvar button = event.button;\n\n\t\t\t// Add which for key events\n\t\t\tif (event.which == null && rkeyEvent.test(event.type)) {\n\t\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t\t}\n\n\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\t\tif (!event.which && button !== undefined && rmouseEvent.test(event.type)) {\n\t\t\t\tif (button & 1) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\n\t\t\t\tif (button & 2) {\n\t\t\t\t\treturn 3;\n\t\t\t\t}\n\n\t\t\t\tif (button & 4) {\n\t\t\t\t\treturn 2;\n\t\t\t\t}\n\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\treturn event.which;\n\t\t}\n\t}, jQuery.event.addProp);\n\n\t// Create mouseenter/leave events using mouseover/out and event-time checks\n\t// so that event delegation works in jQuery.\n\t// Do the same for pointerenter/pointerleave and pointerover/pointerout\n\t//\n\t// Support: Safari 7 only\n\t// Safari sends mouseenter too often; see:\n\t// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n\t// for the description of the bug (it existed in older Chrome versions as well).\n\tjQuery.each({\n\t\tmouseenter: \"mouseover\",\n\t\tmouseleave: \"mouseout\",\n\t\tpointerenter: \"pointerover\",\n\t\tpointerleave: \"pointerout\"\n\t}, function (orig, fix) {\n\t\tjQuery.event.special[orig] = {\n\t\t\tdelegateType: fix,\n\t\t\tbindType: fix,\n\n\t\t\thandle: function (event) {\n\t\t\t\tvar ret,\n\t\t\t\t    target = this,\n\t\t\t\t    related = event.relatedTarget,\n\t\t\t\t    handleObj = event.handleObj;\n\n\t\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\t\tif (!related || related !== target && !jQuery.contains(target, related)) {\n\t\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\t\tret = handleObj.handler.apply(this, arguments);\n\t\t\t\t\tevent.type = fix;\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t};\n\t});\n\n\tjQuery.fn.extend({\n\n\t\ton: function (types, selector, data, fn) {\n\t\t\treturn on(this, types, selector, data, fn);\n\t\t},\n\t\tone: function (types, selector, data, fn) {\n\t\t\treturn on(this, types, selector, data, fn, 1);\n\t\t},\n\t\toff: function (types, selector, fn) {\n\t\t\tvar handleObj, type;\n\t\t\tif (types && types.preventDefault && types.handleObj) {\n\n\t\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\t\thandleObj = types.handleObj;\n\t\t\t\tjQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif (typeof types === \"object\") {\n\n\t\t\t\t// ( types-object [, selector] )\n\t\t\t\tfor (type in types) {\n\t\t\t\t\tthis.off(type, selector, types[type]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif (selector === false || typeof selector === \"function\") {\n\n\t\t\t\t// ( types [, fn] )\n\t\t\t\tfn = selector;\n\t\t\t\tselector = undefined;\n\t\t\t}\n\t\t\tif (fn === false) {\n\t\t\t\tfn = returnFalse;\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.remove(this, types, fn, selector);\n\t\t\t});\n\t\t}\n\t});\n\n\tvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\t    rscriptTypeMasked = /^true\\/(.*)/,\n\t    rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n\t// Prefer a tbody over its parent table for containing new rows\n\tfunction manipulationTarget(elem, content) {\n\t\tif (nodeName(elem, \"table\") && nodeName(content.nodeType !== 11 ? content : content.firstChild, \"tr\")) {\n\n\t\t\treturn jQuery(\">tbody\", elem)[0] || elem;\n\t\t}\n\n\t\treturn elem;\n\t}\n\n\t// Replace/restore the type attribute of script elements for safe DOM manipulation\n\tfunction disableScript(elem) {\n\t\telem.type = (elem.getAttribute(\"type\") !== null) + \"/\" + elem.type;\n\t\treturn elem;\n\t}\n\tfunction restoreScript(elem) {\n\t\tvar match = rscriptTypeMasked.exec(elem.type);\n\n\t\tif (match) {\n\t\t\telem.type = match[1];\n\t\t} else {\n\t\t\telem.removeAttribute(\"type\");\n\t\t}\n\n\t\treturn elem;\n\t}\n\n\tfunction cloneCopyEvent(src, dest) {\n\t\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\t\tif (dest.nodeType !== 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t// 1. Copy private data: events, handlers, etc.\n\t\tif (dataPriv.hasData(src)) {\n\t\t\tpdataOld = dataPriv.access(src);\n\t\t\tpdataCur = dataPriv.set(dest, pdataOld);\n\t\t\tevents = pdataOld.events;\n\n\t\t\tif (events) {\n\t\t\t\tdelete pdataCur.handle;\n\t\t\t\tpdataCur.events = {};\n\n\t\t\t\tfor (type in events) {\n\t\t\t\t\tfor (i = 0, l = events[type].length; i < l; i++) {\n\t\t\t\t\t\tjQuery.event.add(dest, type, events[type][i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 2. Copy user data\n\t\tif (dataUser.hasData(src)) {\n\t\t\tudataOld = dataUser.access(src);\n\t\t\tudataCur = jQuery.extend({}, udataOld);\n\n\t\t\tdataUser.set(dest, udataCur);\n\t\t}\n\t}\n\n\t// Fix IE bugs, see support tests\n\tfunction fixInput(src, dest) {\n\t\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\t\tif (nodeName === \"input\" && rcheckableType.test(src.type)) {\n\t\t\tdest.checked = src.checked;\n\n\t\t\t// Fails to return the selected option to the default selected state when cloning options\n\t\t} else if (nodeName === \"input\" || nodeName === \"textarea\") {\n\t\t\tdest.defaultValue = src.defaultValue;\n\t\t}\n\t}\n\n\tfunction domManip(collection, args, callback, ignored) {\n\n\t\t// Flatten any nested arrays\n\t\targs = concat.apply([], args);\n\n\t\tvar fragment,\n\t\t    first,\n\t\t    scripts,\n\t\t    hasScripts,\n\t\t    node,\n\t\t    doc,\n\t\t    i = 0,\n\t\t    l = collection.length,\n\t\t    iNoClone = l - 1,\n\t\t    value = args[0],\n\t\t    isFunction = jQuery.isFunction(value);\n\n\t\t// We can't cloneNode fragments that contain checked, in WebKit\n\t\tif (isFunction || l > 1 && typeof value === \"string\" && !support.checkClone && rchecked.test(value)) {\n\t\t\treturn collection.each(function (index) {\n\t\t\t\tvar self = collection.eq(index);\n\t\t\t\tif (isFunction) {\n\t\t\t\t\targs[0] = value.call(this, index, self.html());\n\t\t\t\t}\n\t\t\t\tdomManip(self, args, callback, ignored);\n\t\t\t});\n\t\t}\n\n\t\tif (l) {\n\t\t\tfragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);\n\t\t\tfirst = fragment.firstChild;\n\n\t\t\tif (fragment.childNodes.length === 1) {\n\t\t\t\tfragment = first;\n\t\t\t}\n\n\t\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\t\tif (first || ignored) {\n\t\t\t\tscripts = jQuery.map(getAll(fragment, \"script\"), disableScript);\n\t\t\t\thasScripts = scripts.length;\n\n\t\t\t\t// Use the original fragment for the last item\n\t\t\t\t// instead of the first because it can end up\n\t\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tnode = fragment;\n\n\t\t\t\t\tif (i !== iNoClone) {\n\t\t\t\t\t\tnode = jQuery.clone(node, true, true);\n\n\t\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\t\tif (hasScripts) {\n\n\t\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\t\tjQuery.merge(scripts, getAll(node, \"script\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcallback.call(collection[i], node, i);\n\t\t\t\t}\n\n\t\t\t\tif (hasScripts) {\n\t\t\t\t\tdoc = scripts[scripts.length - 1].ownerDocument;\n\n\t\t\t\t\t// Reenable scripts\n\t\t\t\t\tjQuery.map(scripts, restoreScript);\n\n\t\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\t\tfor (i = 0; i < hasScripts; i++) {\n\t\t\t\t\t\tnode = scripts[i];\n\t\t\t\t\t\tif (rscriptType.test(node.type || \"\") && !dataPriv.access(node, \"globalEval\") && jQuery.contains(doc, node)) {\n\n\t\t\t\t\t\t\tif (node.src) {\n\n\t\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\t\tif (jQuery._evalUrl) {\n\t\t\t\t\t\t\t\t\tjQuery._evalUrl(node.src);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tDOMEval(node.textContent.replace(rcleanScript, \"\"), doc);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn collection;\n\t}\n\n\tfunction remove(elem, selector, keepData) {\n\t\tvar node,\n\t\t    nodes = selector ? jQuery.filter(selector, elem) : elem,\n\t\t    i = 0;\n\n\t\tfor (; (node = nodes[i]) != null; i++) {\n\t\t\tif (!keepData && node.nodeType === 1) {\n\t\t\t\tjQuery.cleanData(getAll(node));\n\t\t\t}\n\n\t\t\tif (node.parentNode) {\n\t\t\t\tif (keepData && jQuery.contains(node.ownerDocument, node)) {\n\t\t\t\t\tsetGlobalEval(getAll(node, \"script\"));\n\t\t\t\t}\n\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t}\n\t\t}\n\n\t\treturn elem;\n\t}\n\n\tjQuery.extend({\n\t\thtmlPrefilter: function (html) {\n\t\t\treturn html.replace(rxhtmlTag, \"<$1></$2>\");\n\t\t},\n\n\t\tclone: function (elem, dataAndEvents, deepDataAndEvents) {\n\t\t\tvar i,\n\t\t\t    l,\n\t\t\t    srcElements,\n\t\t\t    destElements,\n\t\t\t    clone = elem.cloneNode(true),\n\t\t\t    inPage = jQuery.contains(elem.ownerDocument, elem);\n\n\t\t\t// Fix IE cloning issues\n\t\t\tif (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n\n\t\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\t\tdestElements = getAll(clone);\n\t\t\t\tsrcElements = getAll(elem);\n\n\t\t\t\tfor (i = 0, l = srcElements.length; i < l; i++) {\n\t\t\t\t\tfixInput(srcElements[i], destElements[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Copy the events from the original to the clone\n\t\t\tif (dataAndEvents) {\n\t\t\t\tif (deepDataAndEvents) {\n\t\t\t\t\tsrcElements = srcElements || getAll(elem);\n\t\t\t\t\tdestElements = destElements || getAll(clone);\n\n\t\t\t\t\tfor (i = 0, l = srcElements.length; i < l; i++) {\n\t\t\t\t\t\tcloneCopyEvent(srcElements[i], destElements[i]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcloneCopyEvent(elem, clone);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Preserve script evaluation history\n\t\t\tdestElements = getAll(clone, \"script\");\n\t\t\tif (destElements.length > 0) {\n\t\t\t\tsetGlobalEval(destElements, !inPage && getAll(elem, \"script\"));\n\t\t\t}\n\n\t\t\t// Return the cloned set\n\t\t\treturn clone;\n\t\t},\n\n\t\tcleanData: function (elems) {\n\t\t\tvar data,\n\t\t\t    elem,\n\t\t\t    type,\n\t\t\t    special = jQuery.event.special,\n\t\t\t    i = 0;\n\n\t\t\tfor (; (elem = elems[i]) !== undefined; i++) {\n\t\t\t\tif (acceptData(elem)) {\n\t\t\t\t\tif (data = elem[dataPriv.expando]) {\n\t\t\t\t\t\tif (data.events) {\n\t\t\t\t\t\t\tfor (type in data.events) {\n\t\t\t\t\t\t\t\tif (special[type]) {\n\t\t\t\t\t\t\t\t\tjQuery.event.remove(elem, type);\n\n\t\t\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tjQuery.removeEvent(elem, type, data.handle);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\t\telem[dataPriv.expando] = undefined;\n\t\t\t\t\t}\n\t\t\t\t\tif (elem[dataUser.expando]) {\n\n\t\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\t\telem[dataUser.expando] = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tdetach: function (selector) {\n\t\t\treturn remove(this, selector, true);\n\t\t},\n\n\t\tremove: function (selector) {\n\t\t\treturn remove(this, selector);\n\t\t},\n\n\t\ttext: function (value) {\n\t\t\treturn access(this, function (value) {\n\t\t\t\treturn value === undefined ? jQuery.text(this) : this.empty().each(function () {\n\t\t\t\t\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, null, value, arguments.length);\n\t\t},\n\n\t\tappend: function () {\n\t\t\treturn domManip(this, arguments, function (elem) {\n\t\t\t\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n\t\t\t\t\tvar target = manipulationTarget(this, elem);\n\t\t\t\t\ttarget.appendChild(elem);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tprepend: function () {\n\t\t\treturn domManip(this, arguments, function (elem) {\n\t\t\t\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n\t\t\t\t\tvar target = manipulationTarget(this, elem);\n\t\t\t\t\ttarget.insertBefore(elem, target.firstChild);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tbefore: function () {\n\t\t\treturn domManip(this, arguments, function (elem) {\n\t\t\t\tif (this.parentNode) {\n\t\t\t\t\tthis.parentNode.insertBefore(elem, this);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tafter: function () {\n\t\t\treturn domManip(this, arguments, function (elem) {\n\t\t\t\tif (this.parentNode) {\n\t\t\t\t\tthis.parentNode.insertBefore(elem, this.nextSibling);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tempty: function () {\n\t\t\tvar elem,\n\t\t\t    i = 0;\n\n\t\t\tfor (; (elem = this[i]) != null; i++) {\n\t\t\t\tif (elem.nodeType === 1) {\n\n\t\t\t\t\t// Prevent memory leaks\n\t\t\t\t\tjQuery.cleanData(getAll(elem, false));\n\n\t\t\t\t\t// Remove any remaining nodes\n\t\t\t\t\telem.textContent = \"\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tclone: function (dataAndEvents, deepDataAndEvents) {\n\t\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\t\treturn this.map(function () {\n\t\t\t\treturn jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n\t\t\t});\n\t\t},\n\n\t\thtml: function (value) {\n\t\t\treturn access(this, function (value) {\n\t\t\t\tvar elem = this[0] || {},\n\t\t\t\t    i = 0,\n\t\t\t\t    l = this.length;\n\n\t\t\t\tif (value === undefined && elem.nodeType === 1) {\n\t\t\t\t\treturn elem.innerHTML;\n\t\t\t\t}\n\n\t\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\t\tif (typeof value === \"string\" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [\"\", \"\"])[1].toLowerCase()]) {\n\n\t\t\t\t\tvalue = jQuery.htmlPrefilter(value);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\t\t\telem = this[i] || {};\n\n\t\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\t\t\t\tjQuery.cleanData(getAll(elem, false));\n\t\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\telem = 0;\n\n\t\t\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\n\t\t\t\tif (elem) {\n\t\t\t\t\tthis.empty().append(value);\n\t\t\t\t}\n\t\t\t}, null, value, arguments.length);\n\t\t},\n\n\t\treplaceWith: function () {\n\t\t\tvar ignored = [];\n\n\t\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\t\treturn domManip(this, arguments, function (elem) {\n\t\t\t\tvar parent = this.parentNode;\n\n\t\t\t\tif (jQuery.inArray(this, ignored) < 0) {\n\t\t\t\t\tjQuery.cleanData(getAll(this));\n\t\t\t\t\tif (parent) {\n\t\t\t\t\t\tparent.replaceChild(elem, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Force callback invocation\n\t\t\t}, ignored);\n\t\t}\n\t});\n\n\tjQuery.each({\n\t\tappendTo: \"append\",\n\t\tprependTo: \"prepend\",\n\t\tinsertBefore: \"before\",\n\t\tinsertAfter: \"after\",\n\t\treplaceAll: \"replaceWith\"\n\t}, function (name, original) {\n\t\tjQuery.fn[name] = function (selector) {\n\t\t\tvar elems,\n\t\t\t    ret = [],\n\t\t\t    insert = jQuery(selector),\n\t\t\t    last = insert.length - 1,\n\t\t\t    i = 0;\n\n\t\t\tfor (; i <= last; i++) {\n\t\t\t\telems = i === last ? this : this.clone(true);\n\t\t\t\tjQuery(insert[i])[original](elems);\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tpush.apply(ret, elems.get());\n\t\t\t}\n\n\t\t\treturn this.pushStack(ret);\n\t\t};\n\t});\n\tvar rmargin = /^margin/;\n\n\tvar rnumnonpx = new RegExp(\"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\");\n\n\tvar getStyles = function (elem) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif (!view || !view.opener) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle(elem);\n\t};\n\n\t(function () {\n\n\t\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t\t// so they're executed at the same time to save the second computation.\n\t\tfunction computeStyleTests() {\n\n\t\t\t// This is a singleton, we need to execute it only once\n\t\t\tif (!div) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdiv.style.cssText = \"box-sizing:border-box;\" + \"position:relative;display:block;\" + \"margin:auto;border:1px;padding:1px;\" + \"top:1%;width:50%\";\n\t\t\tdiv.innerHTML = \"\";\n\t\t\tdocumentElement.appendChild(container);\n\n\t\t\tvar divStyle = window.getComputedStyle(div);\n\t\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\t\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n\t\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\t\t// Support: Android 4.0 - 4.3 only\n\t\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\t\tdiv.style.marginRight = \"50%\";\n\t\t\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\n\n\t\t\tdocumentElement.removeChild(container);\n\n\t\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t\t// it will also be a sign that checks already performed\n\t\t\tdiv = null;\n\t\t}\n\n\t\tvar pixelPositionVal,\n\t\t    boxSizingReliableVal,\n\t\t    pixelMarginRightVal,\n\t\t    reliableMarginLeftVal,\n\t\t    container = document.createElement(\"div\"),\n\t\t    div = document.createElement(\"div\");\n\n\t\t// Finish early in limited (non-browser) environments\n\t\tif (!div.style) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// Style of cloned element affects source element cloned (#8908)\n\t\tdiv.style.backgroundClip = \"content-box\";\n\t\tdiv.cloneNode(true).style.backgroundClip = \"\";\n\t\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\t\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" + \"padding:0;margin-top:1px;position:absolute\";\n\t\tcontainer.appendChild(div);\n\n\t\tjQuery.extend(support, {\n\t\t\tpixelPosition: function () {\n\t\t\t\tcomputeStyleTests();\n\t\t\t\treturn pixelPositionVal;\n\t\t\t},\n\t\t\tboxSizingReliable: function () {\n\t\t\t\tcomputeStyleTests();\n\t\t\t\treturn boxSizingReliableVal;\n\t\t\t},\n\t\t\tpixelMarginRight: function () {\n\t\t\t\tcomputeStyleTests();\n\t\t\t\treturn pixelMarginRightVal;\n\t\t\t},\n\t\t\treliableMarginLeft: function () {\n\t\t\t\tcomputeStyleTests();\n\t\t\t\treturn reliableMarginLeftVal;\n\t\t\t}\n\t\t});\n\t})();\n\n\tfunction curCSS(elem, name, computed) {\n\t\tvar width,\n\t\t    minWidth,\n\t\t    maxWidth,\n\t\t    ret,\n\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\t\tcomputed = computed || getStyles(elem);\n\n\t\t// getPropertyValue is needed for:\n\t\t//   .css('filter') (IE 9 only, #12537)\n\t\t//   .css('--customProperty) (#3144)\n\t\tif (computed) {\n\t\t\tret = computed.getPropertyValue(name) || computed[name];\n\n\t\t\tif (ret === \"\" && !jQuery.contains(elem.ownerDocument, elem)) {\n\t\t\t\tret = jQuery.style(elem, name);\n\t\t\t}\n\n\t\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t\t// Android Browser returns percentage for some values,\n\t\t\t// but width seems to be reliably pixels.\n\t\t\t// This is against the CSSOM draft spec:\n\t\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\t\tif (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {\n\n\t\t\t\t// Remember the original values\n\t\t\t\twidth = style.width;\n\t\t\t\tminWidth = style.minWidth;\n\t\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t\t// Put in the new values to get a computed value out\n\t\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\t\tret = computed.width;\n\n\t\t\t\t// Revert the changed values\n\t\t\t\tstyle.width = width;\n\t\t\t\tstyle.minWidth = minWidth;\n\t\t\t\tstyle.maxWidth = maxWidth;\n\t\t\t}\n\t\t}\n\n\t\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" : ret;\n\t}\n\n\tfunction addGetHookIf(conditionFn, hookFn) {\n\n\t\t// Define the hook, we'll check on the first run if it's really needed.\n\t\treturn {\n\t\t\tget: function () {\n\t\t\t\tif (conditionFn()) {\n\n\t\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t\t// to missing dependency), remove it.\n\t\t\t\t\tdelete this.get;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\t\treturn (this.get = hookFn).apply(this, arguments);\n\t\t\t}\n\t\t};\n\t}\n\n\tvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\t    rcustomProp = /^--/,\n\t    cssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\t    cssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\t    cssPrefixes = [\"Webkit\", \"Moz\", \"ms\"],\n\t    emptyStyle = document.createElement(\"div\").style;\n\n\t// Return a css property mapped to a potentially vendor prefixed property\n\tfunction vendorPropName(name) {\n\n\t\t// Shortcut for names that are not vendor prefixed\n\t\tif (name in emptyStyle) {\n\t\t\treturn name;\n\t\t}\n\n\t\t// Check for vendor prefixed names\n\t\tvar capName = name[0].toUpperCase() + name.slice(1),\n\t\t    i = cssPrefixes.length;\n\n\t\twhile (i--) {\n\t\t\tname = cssPrefixes[i] + capName;\n\t\t\tif (name in emptyStyle) {\n\t\t\t\treturn name;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return a property mapped along what jQuery.cssProps suggests or to\n\t// a vendor prefixed property.\n\tfunction finalPropName(name) {\n\t\tvar ret = jQuery.cssProps[name];\n\t\tif (!ret) {\n\t\t\tret = jQuery.cssProps[name] = vendorPropName(name) || name;\n\t\t}\n\t\treturn ret;\n\t}\n\n\tfunction setPositiveNumber(elem, value, subtract) {\n\n\t\t// Any relative (+/-) values have already been\n\t\t// normalized at this point\n\t\tvar matches = rcssNum.exec(value);\n\t\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max(0, matches[2] - (subtract || 0)) + (matches[3] || \"px\") : value;\n\t}\n\n\tfunction augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {\n\t\tvar i,\n\t\t    val = 0;\n\n\t\t// If we already have the right measurement, avoid augmentation\n\t\tif (extra === (isBorderBox ? \"border\" : \"content\")) {\n\t\t\ti = 4;\n\n\t\t\t// Otherwise initialize for horizontal or vertical properties\n\t\t} else {\n\t\t\ti = name === \"width\" ? 1 : 0;\n\t\t}\n\n\t\tfor (; i < 4; i += 2) {\n\n\t\t\t// Both box models exclude margin, so add it if we want it\n\t\t\tif (extra === \"margin\") {\n\t\t\t\tval += jQuery.css(elem, extra + cssExpand[i], true, styles);\n\t\t\t}\n\n\t\t\tif (isBorderBox) {\n\n\t\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\t\tif (extra === \"content\") {\n\t\t\t\t\tval -= jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n\t\t\t\t}\n\n\t\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\t\tif (extra !== \"margin\") {\n\t\t\t\t\tval -= jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// At this point, extra isn't content, so add padding\n\t\t\t\tval += jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n\n\t\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\t\tif (extra !== \"padding\") {\n\t\t\t\t\tval += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn val;\n\t}\n\n\tfunction getWidthOrHeight(elem, name, extra) {\n\n\t\t// Start with computed style\n\t\tvar valueIsBorderBox,\n\t\t    styles = getStyles(elem),\n\t\t    val = curCSS(elem, name, styles),\n\t\t    isBorderBox = jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\";\n\n\t\t// Computed unit is not pixels. Stop here and return.\n\t\tif (rnumnonpx.test(val)) {\n\t\t\treturn val;\n\t\t}\n\n\t\t// Check for style in case a browser which returns unreliable values\n\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\tvalueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);\n\n\t\t// Fall back to offsetWidth/Height when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tif (val === \"auto\") {\n\t\t\tval = elem[\"offset\" + name[0].toUpperCase() + name.slice(1)];\n\t\t}\n\n\t\t// Normalize \"\", auto, and prepare for extra\n\t\tval = parseFloat(val) || 0;\n\n\t\t// Use the active box-sizing model to add/subtract irrelevant styles\n\t\treturn val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? \"border\" : \"content\"), valueIsBorderBox, styles) + \"px\";\n\t}\n\n\tjQuery.extend({\n\n\t\t// Add in style property hooks for overriding the default\n\t\t// behavior of getting and setting a style property\n\t\tcssHooks: {\n\t\t\topacity: {\n\t\t\t\tget: function (elem, computed) {\n\t\t\t\t\tif (computed) {\n\n\t\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\t\tvar ret = curCSS(elem, \"opacity\");\n\t\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Don't automatically add \"px\" to these possibly-unitless properties\n\t\tcssNumber: {\n\t\t\t\"animationIterationCount\": true,\n\t\t\t\"columnCount\": true,\n\t\t\t\"fillOpacity\": true,\n\t\t\t\"flexGrow\": true,\n\t\t\t\"flexShrink\": true,\n\t\t\t\"fontWeight\": true,\n\t\t\t\"lineHeight\": true,\n\t\t\t\"opacity\": true,\n\t\t\t\"order\": true,\n\t\t\t\"orphans\": true,\n\t\t\t\"widows\": true,\n\t\t\t\"zIndex\": true,\n\t\t\t\"zoom\": true\n\t\t},\n\n\t\t// Add in properties whose names you wish to fix before\n\t\t// setting or getting the value\n\t\tcssProps: {\n\t\t\t\"float\": \"cssFloat\"\n\t\t},\n\n\t\t// Get and set the style property on a DOM Node\n\t\tstyle: function (elem, name, value, extra) {\n\n\t\t\t// Don't set styles on text and comment nodes\n\t\t\tif (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure that we're working with the right name\n\t\t\tvar ret,\n\t\t\t    type,\n\t\t\t    hooks,\n\t\t\t    origName = jQuery.camelCase(name),\n\t\t\t    isCustomProp = rcustomProp.test(name),\n\t\t\t    style = elem.style;\n\n\t\t\t// Make sure that we're working with the right name. We don't\n\t\t\t// want to query the value if it is a CSS custom property\n\t\t\t// since they are user-defined.\n\t\t\tif (!isCustomProp) {\n\t\t\t\tname = finalPropName(origName);\n\t\t\t}\n\n\t\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\t\thooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n\t\t\t// Check if we're setting a value\n\t\t\tif (value !== undefined) {\n\t\t\t\ttype = typeof value;\n\n\t\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\t\tif (type === \"string\" && (ret = rcssNum.exec(value)) && ret[1]) {\n\t\t\t\t\tvalue = adjustCSS(elem, name, ret);\n\n\t\t\t\t\t// Fixes bug #9237\n\t\t\t\t\ttype = \"number\";\n\t\t\t\t}\n\n\t\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\t\tif (value == null || value !== value) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t\tif (type === \"number\") {\n\t\t\t\t\tvalue += ret && ret[3] || (jQuery.cssNumber[origName] ? \"\" : \"px\");\n\t\t\t\t}\n\n\t\t\t\t// background-* props affect original clone's values\n\t\t\t\tif (!support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0) {\n\t\t\t\t\tstyle[name] = \"inherit\";\n\t\t\t\t}\n\n\t\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\t\tif (!hooks || !(\"set\" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n\n\t\t\t\t\tif (isCustomProp) {\n\t\t\t\t\t\tstyle.setProperty(name, value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstyle[name] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\t\tif (hooks && \"get\" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise just get the value from the style object\n\t\t\t\treturn style[name];\n\t\t\t}\n\t\t},\n\n\t\tcss: function (elem, name, extra, styles) {\n\t\t\tvar val,\n\t\t\t    num,\n\t\t\t    hooks,\n\t\t\t    origName = jQuery.camelCase(name),\n\t\t\t    isCustomProp = rcustomProp.test(name);\n\n\t\t\t// Make sure that we're working with the right name. We don't\n\t\t\t// want to modify the value if it is a CSS custom property\n\t\t\t// since they are user-defined.\n\t\t\tif (!isCustomProp) {\n\t\t\t\tname = finalPropName(origName);\n\t\t\t}\n\n\t\t\t// Try prefixed name followed by the unprefixed name\n\t\t\thooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n\t\t\t// If a hook was provided get the computed value from there\n\t\t\tif (hooks && \"get\" in hooks) {\n\t\t\t\tval = hooks.get(elem, true, extra);\n\t\t\t}\n\n\t\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\t\tif (val === undefined) {\n\t\t\t\tval = curCSS(elem, name, styles);\n\t\t\t}\n\n\t\t\t// Convert \"normal\" to computed value\n\t\t\tif (val === \"normal\" && name in cssNormalTransform) {\n\t\t\t\tval = cssNormalTransform[name];\n\t\t\t}\n\n\t\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\t\tif (extra === \"\" || extra) {\n\t\t\t\tnum = parseFloat(val);\n\t\t\t\treturn extra === true || isFinite(num) ? num || 0 : val;\n\t\t\t}\n\n\t\t\treturn val;\n\t\t}\n\t});\n\n\tjQuery.each([\"height\", \"width\"], function (i, name) {\n\t\tjQuery.cssHooks[name] = {\n\t\t\tget: function (elem, computed, extra) {\n\t\t\t\tif (computed) {\n\n\t\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\t\treturn rdisplayswap.test(jQuery.css(elem, \"display\")) && (\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {\n\t\t\t\t\t\treturn getWidthOrHeight(elem, name, extra);\n\t\t\t\t\t}) : getWidthOrHeight(elem, name, extra);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tset: function (elem, value, extra) {\n\t\t\t\tvar matches,\n\t\t\t\t    styles = extra && getStyles(elem),\n\t\t\t\t    subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\", styles);\n\n\t\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\t\tif (subtract && (matches = rcssNum.exec(value)) && (matches[3] || \"px\") !== \"px\") {\n\n\t\t\t\t\telem.style[name] = value;\n\t\t\t\t\tvalue = jQuery.css(elem, name);\n\t\t\t\t}\n\n\t\t\t\treturn setPositiveNumber(elem, value, subtract);\n\t\t\t}\n\t\t};\n\t});\n\n\tjQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {\n\t\tif (computed) {\n\t\t\treturn (parseFloat(curCSS(elem, \"marginLeft\")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {\n\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t})) + \"px\";\n\t\t}\n\t});\n\n\t// These hooks are used by animate to expand properties\n\tjQuery.each({\n\t\tmargin: \"\",\n\t\tpadding: \"\",\n\t\tborder: \"Width\"\n\t}, function (prefix, suffix) {\n\t\tjQuery.cssHooks[prefix + suffix] = {\n\t\t\texpand: function (value) {\n\t\t\t\tvar i = 0,\n\t\t\t\t    expanded = {},\n\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split(\" \") : [value];\n\n\t\t\t\tfor (; i < 4; i++) {\n\t\t\t\t\texpanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n\t\t\t\t}\n\n\t\t\t\treturn expanded;\n\t\t\t}\n\t\t};\n\n\t\tif (!rmargin.test(prefix)) {\n\t\t\tjQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tcss: function (name, value) {\n\t\t\treturn access(this, function (elem, name, value) {\n\t\t\t\tvar styles,\n\t\t\t\t    len,\n\t\t\t\t    map = {},\n\t\t\t\t    i = 0;\n\n\t\t\t\tif (Array.isArray(name)) {\n\t\t\t\t\tstyles = getStyles(elem);\n\t\t\t\t\tlen = name.length;\n\n\t\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\t\tmap[name[i]] = jQuery.css(elem, name[i], false, styles);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn map;\n\t\t\t\t}\n\n\t\t\t\treturn value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n\t\t\t}, name, value, arguments.length > 1);\n\t\t}\n\t});\n\n\tfunction Tween(elem, options, prop, end, easing) {\n\t\treturn new Tween.prototype.init(elem, options, prop, end, easing);\n\t}\n\tjQuery.Tween = Tween;\n\n\tTween.prototype = {\n\t\tconstructor: Tween,\n\t\tinit: function (elem, options, prop, end, easing, unit) {\n\t\t\tthis.elem = elem;\n\t\t\tthis.prop = prop;\n\t\t\tthis.easing = easing || jQuery.easing._default;\n\t\t\tthis.options = options;\n\t\t\tthis.start = this.now = this.cur();\n\t\t\tthis.end = end;\n\t\t\tthis.unit = unit || (jQuery.cssNumber[prop] ? \"\" : \"px\");\n\t\t},\n\t\tcur: function () {\n\t\t\tvar hooks = Tween.propHooks[this.prop];\n\n\t\t\treturn hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n\t\t},\n\t\trun: function (percent) {\n\t\t\tvar eased,\n\t\t\t    hooks = Tween.propHooks[this.prop];\n\n\t\t\tif (this.options.duration) {\n\t\t\t\tthis.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n\t\t\t} else {\n\t\t\t\tthis.pos = eased = percent;\n\t\t\t}\n\t\t\tthis.now = (this.end - this.start) * eased + this.start;\n\n\t\t\tif (this.options.step) {\n\t\t\t\tthis.options.step.call(this.elem, this.now, this);\n\t\t\t}\n\n\t\t\tif (hooks && hooks.set) {\n\t\t\t\thooks.set(this);\n\t\t\t} else {\n\t\t\t\tTween.propHooks._default.set(this);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t};\n\n\tTween.prototype.init.prototype = Tween.prototype;\n\n\tTween.propHooks = {\n\t\t_default: {\n\t\t\tget: function (tween) {\n\t\t\t\tvar result;\n\n\t\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t\t// or when there is no matching style property that exists.\n\t\t\t\tif (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {\n\t\t\t\t\treturn tween.elem[tween.prop];\n\t\t\t\t}\n\n\t\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\t\tresult = jQuery.css(tween.elem, tween.prop, \"\");\n\n\t\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t\t},\n\t\t\tset: function (tween) {\n\n\t\t\t\t// Use step hook for back compat.\n\t\t\t\t// Use cssHook if its there.\n\t\t\t\t// Use .style if available and use plain properties where available.\n\t\t\t\tif (jQuery.fx.step[tween.prop]) {\n\t\t\t\t\tjQuery.fx.step[tween.prop](tween);\n\t\t\t\t} else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {\n\t\t\t\t\tjQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n\t\t\t\t} else {\n\t\t\t\t\ttween.elem[tween.prop] = tween.now;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// Support: IE <=9 only\n\t// Panic based approach to setting things on disconnected nodes\n\tTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\t\tset: function (tween) {\n\t\t\tif (tween.elem.nodeType && tween.elem.parentNode) {\n\t\t\t\ttween.elem[tween.prop] = tween.now;\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.easing = {\n\t\tlinear: function (p) {\n\t\t\treturn p;\n\t\t},\n\t\tswing: function (p) {\n\t\t\treturn 0.5 - Math.cos(p * Math.PI) / 2;\n\t\t},\n\t\t_default: \"swing\"\n\t};\n\n\tjQuery.fx = Tween.prototype.init;\n\n\t// Back compat <1.8 extension point\n\tjQuery.fx.step = {};\n\n\tvar fxNow,\n\t    inProgress,\n\t    rfxtypes = /^(?:toggle|show|hide)$/,\n\t    rrun = /queueHooks$/;\n\n\tfunction schedule() {\n\t\tif (inProgress) {\n\t\t\tif (document.hidden === false && window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(schedule);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(schedule, jQuery.fx.interval);\n\t\t\t}\n\n\t\t\tjQuery.fx.tick();\n\t\t}\n\t}\n\n\t// Animations created synchronously will run synchronously\n\tfunction createFxNow() {\n\t\twindow.setTimeout(function () {\n\t\t\tfxNow = undefined;\n\t\t});\n\t\treturn fxNow = jQuery.now();\n\t}\n\n\t// Generate parameters to create a standard animation\n\tfunction genFx(type, includeWidth) {\n\t\tvar which,\n\t\t    i = 0,\n\t\t    attrs = { height: type };\n\n\t\t// If we include width, step value is 1 to do all cssExpand values,\n\t\t// otherwise step value is 2 to skip over Left and Right\n\t\tincludeWidth = includeWidth ? 1 : 0;\n\t\tfor (; i < 4; i += 2 - includeWidth) {\n\t\t\twhich = cssExpand[i];\n\t\t\tattrs[\"margin\" + which] = attrs[\"padding\" + which] = type;\n\t\t}\n\n\t\tif (includeWidth) {\n\t\t\tattrs.opacity = attrs.width = type;\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\tfunction createTween(value, prop, animation) {\n\t\tvar tween,\n\t\t    collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners[\"*\"]),\n\t\t    index = 0,\n\t\t    length = collection.length;\n\t\tfor (; index < length; index++) {\n\t\t\tif (tween = collection[index].call(animation, prop, value)) {\n\n\t\t\t\t// We're done with this property\n\t\t\t\treturn tween;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction defaultPrefilter(elem, props, opts) {\n\t\tvar prop,\n\t\t    value,\n\t\t    toggle,\n\t\t    hooks,\n\t\t    oldfire,\n\t\t    propTween,\n\t\t    restoreDisplay,\n\t\t    display,\n\t\t    isBox = \"width\" in props || \"height\" in props,\n\t\t    anim = this,\n\t\t    orig = {},\n\t\t    style = elem.style,\n\t\t    hidden = elem.nodeType && isHiddenWithinTree(elem),\n\t\t    dataShow = dataPriv.get(elem, \"fxshow\");\n\n\t\t// Queue-skipping animations hijack the fx hooks\n\t\tif (!opts.queue) {\n\t\t\thooks = jQuery._queueHooks(elem, \"fx\");\n\t\t\tif (hooks.unqueued == null) {\n\t\t\t\thooks.unqueued = 0;\n\t\t\t\toldfire = hooks.empty.fire;\n\t\t\t\thooks.empty.fire = function () {\n\t\t\t\t\tif (!hooks.unqueued) {\n\t\t\t\t\t\toldfire();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\thooks.unqueued++;\n\n\t\t\tanim.always(function () {\n\n\t\t\t\t// Ensure the complete handler is called before this completes\n\t\t\t\tanim.always(function () {\n\t\t\t\t\thooks.unqueued--;\n\t\t\t\t\tif (!jQuery.queue(elem, \"fx\").length) {\n\t\t\t\t\t\thooks.empty.fire();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// Detect show/hide animations\n\t\tfor (prop in props) {\n\t\t\tvalue = props[prop];\n\t\t\tif (rfxtypes.test(value)) {\n\t\t\t\tdelete props[prop];\n\t\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\t\tif (value === (hidden ? \"hide\" : \"show\")) {\n\n\t\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\t\tif (value === \"show\" && dataShow && dataShow[prop] !== undefined) {\n\t\t\t\t\t\thidden = true;\n\n\t\t\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\torig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\n\t\t\t}\n\t\t}\n\n\t\t// Bail out if this is a no-op like .hide().hide()\n\t\tpropTween = !jQuery.isEmptyObject(props);\n\t\tif (!propTween && jQuery.isEmptyObject(orig)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Restrict \"overflow\" and \"display\" styles during box animations\n\t\tif (isBox && elem.nodeType === 1) {\n\n\t\t\t// Support: IE <=9 - 11, Edge 12 - 13\n\t\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t\t// from identically-valued overflowX and overflowY\n\t\t\topts.overflow = [style.overflow, style.overflowX, style.overflowY];\n\n\t\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\t\trestoreDisplay = dataShow && dataShow.display;\n\t\t\tif (restoreDisplay == null) {\n\t\t\t\trestoreDisplay = dataPriv.get(elem, \"display\");\n\t\t\t}\n\t\t\tdisplay = jQuery.css(elem, \"display\");\n\t\t\tif (display === \"none\") {\n\t\t\t\tif (restoreDisplay) {\n\t\t\t\t\tdisplay = restoreDisplay;\n\t\t\t\t} else {\n\n\t\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\t\tshowHide([elem], true);\n\t\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\t\tdisplay = jQuery.css(elem, \"display\");\n\t\t\t\t\tshowHide([elem]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Animate inline elements as inline-block\n\t\t\tif (display === \"inline\" || display === \"inline-block\" && restoreDisplay != null) {\n\t\t\t\tif (jQuery.css(elem, \"float\") === \"none\") {\n\n\t\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\t\tif (!propTween) {\n\t\t\t\t\t\tanim.done(function () {\n\t\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (restoreDisplay == null) {\n\t\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (opts.overflow) {\n\t\t\tstyle.overflow = \"hidden\";\n\t\t\tanim.always(function () {\n\t\t\t\tstyle.overflow = opts.overflow[0];\n\t\t\t\tstyle.overflowX = opts.overflow[1];\n\t\t\t\tstyle.overflowY = opts.overflow[2];\n\t\t\t});\n\t\t}\n\n\t\t// Implement show/hide animations\n\t\tpropTween = false;\n\t\tfor (prop in orig) {\n\n\t\t\t// General show/hide setup for this element animation\n\t\t\tif (!propTween) {\n\t\t\t\tif (dataShow) {\n\t\t\t\t\tif (\"hidden\" in dataShow) {\n\t\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdataShow = dataPriv.access(elem, \"fxshow\", { display: restoreDisplay });\n\t\t\t\t}\n\n\t\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\t\tif (toggle) {\n\t\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t\t}\n\n\t\t\t\t// Show elements before animating them\n\t\t\t\tif (hidden) {\n\t\t\t\t\tshowHide([elem], true);\n\t\t\t\t}\n\n\t\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\t\tanim.done(function () {\n\n\t\t\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\t\tif (!hidden) {\n\t\t\t\t\t\tshowHide([elem]);\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.remove(elem, \"fxshow\");\n\t\t\t\t\tfor (prop in orig) {\n\t\t\t\t\t\tjQuery.style(elem, prop, orig[prop]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Per-property setup\n\t\t\tpropTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\n\t\t\tif (!(prop in dataShow)) {\n\t\t\t\tdataShow[prop] = propTween.start;\n\t\t\t\tif (hidden) {\n\t\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\t\tpropTween.start = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction propFilter(props, specialEasing) {\n\t\tvar index, name, easing, value, hooks;\n\n\t\t// camelCase, specialEasing and expand cssHook pass\n\t\tfor (index in props) {\n\t\t\tname = jQuery.camelCase(index);\n\t\t\teasing = specialEasing[name];\n\t\t\tvalue = props[index];\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\teasing = value[1];\n\t\t\t\tvalue = props[index] = value[0];\n\t\t\t}\n\n\t\t\tif (index !== name) {\n\t\t\t\tprops[name] = value;\n\t\t\t\tdelete props[index];\n\t\t\t}\n\n\t\t\thooks = jQuery.cssHooks[name];\n\t\t\tif (hooks && \"expand\" in hooks) {\n\t\t\t\tvalue = hooks.expand(value);\n\t\t\t\tdelete props[name];\n\n\t\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\t\tfor (index in value) {\n\t\t\t\t\tif (!(index in props)) {\n\t\t\t\t\t\tprops[index] = value[index];\n\t\t\t\t\t\tspecialEasing[index] = easing;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tspecialEasing[name] = easing;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction Animation(elem, properties, options) {\n\t\tvar result,\n\t\t    stopped,\n\t\t    index = 0,\n\t\t    length = Animation.prefilters.length,\n\t\t    deferred = jQuery.Deferred().always(function () {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t}),\n\t\t    tick = function () {\n\t\t\tif (stopped) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n\n\n\t\t\t// Support: Android 2.3 only\n\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t    percent = 1 - temp,\n\t\t\t    index = 0,\n\t\t\t    length = animation.tweens.length;\n\n\t\t\tfor (; index < length; index++) {\n\t\t\t\tanimation.tweens[index].run(percent);\n\t\t\t}\n\n\t\t\tdeferred.notifyWith(elem, [animation, percent, remaining]);\n\n\t\t\t// If there's more to do, yield\n\t\t\tif (percent < 1 && length) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif (!length) {\n\t\t\t\tdeferred.notifyWith(elem, [animation, 1, 0]);\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith(elem, [animation]);\n\t\t\treturn false;\n\t\t},\n\t\t    animation = deferred.promise({\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend({}, properties),\n\t\t\topts: jQuery.extend(true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function (prop, end) {\n\t\t\t\tvar tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n\t\t\t\tanimation.tweens.push(tween);\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function (gotoEnd) {\n\t\t\t\tvar index = 0,\n\n\n\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t// otherwise we skip this part\n\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif (stopped) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor (; index < length; index++) {\n\t\t\t\t\tanimation.tweens[index].run(1);\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif (gotoEnd) {\n\t\t\t\t\tdeferred.notifyWith(elem, [animation, 1, 0]);\n\t\t\t\t\tdeferred.resolveWith(elem, [animation, gotoEnd]);\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith(elem, [animation, gotoEnd]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}),\n\t\t    props = animation.props;\n\n\t\tpropFilter(props, animation.opts.specialEasing);\n\n\t\tfor (; index < length; index++) {\n\t\t\tresult = Animation.prefilters[index].call(animation, elem, props, animation.opts);\n\t\t\tif (result) {\n\t\t\t\tif (jQuery.isFunction(result.stop)) {\n\t\t\t\t\tjQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tjQuery.map(props, createTween, animation);\n\n\t\tif (jQuery.isFunction(animation.opts.start)) {\n\t\t\tanimation.opts.start.call(elem, animation);\n\t\t}\n\n\t\t// Attach callbacks from options\n\t\tanimation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n\n\t\tjQuery.fx.timer(jQuery.extend(tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t}));\n\n\t\treturn animation;\n\t}\n\n\tjQuery.Animation = jQuery.extend(Animation, {\n\n\t\ttweeners: {\n\t\t\t\"*\": [function (prop, value) {\n\t\t\t\tvar tween = this.createTween(prop, value);\n\t\t\t\tadjustCSS(tween.elem, prop, rcssNum.exec(value), tween);\n\t\t\t\treturn tween;\n\t\t\t}]\n\t\t},\n\n\t\ttweener: function (props, callback) {\n\t\t\tif (jQuery.isFunction(props)) {\n\t\t\t\tcallback = props;\n\t\t\t\tprops = [\"*\"];\n\t\t\t} else {\n\t\t\t\tprops = props.match(rnothtmlwhite);\n\t\t\t}\n\n\t\t\tvar prop,\n\t\t\t    index = 0,\n\t\t\t    length = props.length;\n\n\t\t\tfor (; index < length; index++) {\n\t\t\t\tprop = props[index];\n\t\t\t\tAnimation.tweeners[prop] = Animation.tweeners[prop] || [];\n\t\t\t\tAnimation.tweeners[prop].unshift(callback);\n\t\t\t}\n\t\t},\n\n\t\tprefilters: [defaultPrefilter],\n\n\t\tprefilter: function (callback, prepend) {\n\t\t\tif (prepend) {\n\t\t\t\tAnimation.prefilters.unshift(callback);\n\t\t\t} else {\n\t\t\t\tAnimation.prefilters.push(callback);\n\t\t\t}\n\t\t}\n\t});\n\n\tjQuery.speed = function (speed, easing, fn) {\n\t\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend({}, speed) : {\n\t\t\tcomplete: fn || !fn && easing || jQuery.isFunction(speed) && speed,\n\t\t\tduration: speed,\n\t\t\teasing: fn && easing || easing && !jQuery.isFunction(easing) && easing\n\t\t};\n\n\t\t// Go to the end state if fx are off\n\t\tif (jQuery.fx.off) {\n\t\t\topt.duration = 0;\n\t\t} else {\n\t\t\tif (typeof opt.duration !== \"number\") {\n\t\t\t\tif (opt.duration in jQuery.fx.speeds) {\n\t\t\t\t\topt.duration = jQuery.fx.speeds[opt.duration];\n\t\t\t\t} else {\n\t\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\t\tif (opt.queue == null || opt.queue === true) {\n\t\t\topt.queue = \"fx\";\n\t\t}\n\n\t\t// Queueing\n\t\topt.old = opt.complete;\n\n\t\topt.complete = function () {\n\t\t\tif (jQuery.isFunction(opt.old)) {\n\t\t\t\topt.old.call(this);\n\t\t\t}\n\n\t\t\tif (opt.queue) {\n\t\t\t\tjQuery.dequeue(this, opt.queue);\n\t\t\t}\n\t\t};\n\n\t\treturn opt;\n\t};\n\n\tjQuery.fn.extend({\n\t\tfadeTo: function (speed, to, easing, callback) {\n\n\t\t\t// Show any hidden elements after setting opacity to 0\n\t\t\treturn this.filter(isHiddenWithinTree).css(\"opacity\", 0).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate({ opacity: to }, speed, easing, callback);\n\t\t},\n\t\tanimate: function (prop, speed, easing, callback) {\n\t\t\tvar empty = jQuery.isEmptyObject(prop),\n\t\t\t    optall = jQuery.speed(speed, easing, callback),\n\t\t\t    doAnimation = function () {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation(this, jQuery.extend({}, prop), optall);\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif (empty || dataPriv.get(this, \"finish\")) {\n\t\t\t\t\tanim.stop(true);\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\t\treturn empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n\t\t},\n\t\tstop: function (type, clearQueue, gotoEnd) {\n\t\t\tvar stopQueue = function (hooks) {\n\t\t\t\tvar stop = hooks.stop;\n\t\t\t\tdelete hooks.stop;\n\t\t\t\tstop(gotoEnd);\n\t\t\t};\n\n\t\t\tif (typeof type !== \"string\") {\n\t\t\t\tgotoEnd = clearQueue;\n\t\t\t\tclearQueue = type;\n\t\t\t\ttype = undefined;\n\t\t\t}\n\t\t\tif (clearQueue && type !== false) {\n\t\t\t\tthis.queue(type || \"fx\", []);\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar dequeue = true,\n\t\t\t\t    index = type != null && type + \"queueHooks\",\n\t\t\t\t    timers = jQuery.timers,\n\t\t\t\t    data = dataPriv.get(this);\n\n\t\t\t\tif (index) {\n\t\t\t\t\tif (data[index] && data[index].stop) {\n\t\t\t\t\t\tstopQueue(data[index]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (index in data) {\n\t\t\t\t\t\tif (data[index] && data[index].stop && rrun.test(index)) {\n\t\t\t\t\t\t\tstopQueue(data[index]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (index = timers.length; index--;) {\n\t\t\t\t\tif (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n\n\t\t\t\t\t\ttimers[index].anim.stop(gotoEnd);\n\t\t\t\t\t\tdequeue = false;\n\t\t\t\t\t\ttimers.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\t\tif (dequeue || !gotoEnd) {\n\t\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tfinish: function (type) {\n\t\t\tif (type !== false) {\n\t\t\t\ttype = type || \"fx\";\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tvar index,\n\t\t\t\t    data = dataPriv.get(this),\n\t\t\t\t    queue = data[type + \"queue\"],\n\t\t\t\t    hooks = data[type + \"queueHooks\"],\n\t\t\t\t    timers = jQuery.timers,\n\t\t\t\t    length = queue ? queue.length : 0;\n\n\t\t\t\t// Enable finishing flag on private data\n\t\t\t\tdata.finish = true;\n\n\t\t\t\t// Empty the queue first\n\t\t\t\tjQuery.queue(this, type, []);\n\n\t\t\t\tif (hooks && hooks.stop) {\n\t\t\t\t\thooks.stop.call(this, true);\n\t\t\t\t}\n\n\t\t\t\t// Look for any active animations, and finish them\n\t\t\t\tfor (index = timers.length; index--;) {\n\t\t\t\t\tif (timers[index].elem === this && timers[index].queue === type) {\n\t\t\t\t\t\ttimers[index].anim.stop(true);\n\t\t\t\t\t\ttimers.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Look for any animations in the old queue and finish them\n\t\t\t\tfor (index = 0; index < length; index++) {\n\t\t\t\t\tif (queue[index] && queue[index].finish) {\n\t\t\t\t\t\tqueue[index].finish.call(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Turn off finishing flag\n\t\t\t\tdelete data.finish;\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.each([\"toggle\", \"show\", \"hide\"], function (i, name) {\n\t\tvar cssFn = jQuery.fn[name];\n\t\tjQuery.fn[name] = function (speed, easing, callback) {\n\t\t\treturn speed == null || typeof speed === \"boolean\" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n\t\t};\n\t});\n\n\t// Generate shortcuts for custom animations\n\tjQuery.each({\n\t\tslideDown: genFx(\"show\"),\n\t\tslideUp: genFx(\"hide\"),\n\t\tslideToggle: genFx(\"toggle\"),\n\t\tfadeIn: { opacity: \"show\" },\n\t\tfadeOut: { opacity: \"hide\" },\n\t\tfadeToggle: { opacity: \"toggle\" }\n\t}, function (name, props) {\n\t\tjQuery.fn[name] = function (speed, easing, callback) {\n\t\t\treturn this.animate(props, speed, easing, callback);\n\t\t};\n\t});\n\n\tjQuery.timers = [];\n\tjQuery.fx.tick = function () {\n\t\tvar timer,\n\t\t    i = 0,\n\t\t    timers = jQuery.timers;\n\n\t\tfxNow = jQuery.now();\n\n\t\tfor (; i < timers.length; i++) {\n\t\t\ttimer = timers[i];\n\n\t\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\t\tif (!timer() && timers[i] === timer) {\n\t\t\t\ttimers.splice(i--, 1);\n\t\t\t}\n\t\t}\n\n\t\tif (!timers.length) {\n\t\t\tjQuery.fx.stop();\n\t\t}\n\t\tfxNow = undefined;\n\t};\n\n\tjQuery.fx.timer = function (timer) {\n\t\tjQuery.timers.push(timer);\n\t\tjQuery.fx.start();\n\t};\n\n\tjQuery.fx.interval = 13;\n\tjQuery.fx.start = function () {\n\t\tif (inProgress) {\n\t\t\treturn;\n\t\t}\n\n\t\tinProgress = true;\n\t\tschedule();\n\t};\n\n\tjQuery.fx.stop = function () {\n\t\tinProgress = null;\n\t};\n\n\tjQuery.fx.speeds = {\n\t\tslow: 600,\n\t\tfast: 200,\n\n\t\t// Default speed\n\t\t_default: 400\n\t};\n\n\t// Based off of the plugin by Clint Helfers, with permission.\n\t// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\n\tjQuery.fn.delay = function (time, type) {\n\t\ttime = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n\t\ttype = type || \"fx\";\n\n\t\treturn this.queue(type, function (next, hooks) {\n\t\t\tvar timeout = window.setTimeout(next, time);\n\t\t\thooks.stop = function () {\n\t\t\t\twindow.clearTimeout(timeout);\n\t\t\t};\n\t\t});\n\t};\n\n\t(function () {\n\t\tvar input = document.createElement(\"input\"),\n\t\t    select = document.createElement(\"select\"),\n\t\t    opt = select.appendChild(document.createElement(\"option\"));\n\n\t\tinput.type = \"checkbox\";\n\n\t\t// Support: Android <=4.3 only\n\t\t// Default value for a checkbox should be \"on\"\n\t\tsupport.checkOn = input.value !== \"\";\n\n\t\t// Support: IE <=11 only\n\t\t// Must access selectedIndex to make default options select\n\t\tsupport.optSelected = opt.selected;\n\n\t\t// Support: IE <=11 only\n\t\t// An input loses its value after becoming a radio\n\t\tinput = document.createElement(\"input\");\n\t\tinput.value = \"t\";\n\t\tinput.type = \"radio\";\n\t\tsupport.radioValue = input.value === \"t\";\n\t})();\n\n\tvar boolHook,\n\t    attrHandle = jQuery.expr.attrHandle;\n\n\tjQuery.fn.extend({\n\t\tattr: function (name, value) {\n\t\t\treturn access(this, jQuery.attr, name, value, arguments.length > 1);\n\t\t},\n\n\t\tremoveAttr: function (name) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.removeAttr(this, name);\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tattr: function (elem, name, value) {\n\t\t\tvar ret,\n\t\t\t    hooks,\n\t\t\t    nType = elem.nodeType;\n\n\t\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\t\tif (nType === 3 || nType === 8 || nType === 2) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fallback to prop when attributes are not supported\n\t\t\tif (typeof elem.getAttribute === \"undefined\") {\n\t\t\t\treturn jQuery.prop(elem, name, value);\n\t\t\t}\n\n\t\t\t// Attribute hooks are determined by the lowercase version\n\t\t\t// Grab necessary hook if one is defined\n\t\t\tif (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n\t\t\t\thooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);\n\t\t\t}\n\n\t\t\tif (value !== undefined) {\n\t\t\t\tif (value === null) {\n\t\t\t\t\tjQuery.removeAttr(elem, name);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\telem.setAttribute(name, value + \"\");\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tif (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\tret = jQuery.find.attr(elem, name);\n\n\t\t\t// Non-existent attributes return null, we normalize to undefined\n\t\t\treturn ret == null ? undefined : ret;\n\t\t},\n\n\t\tattrHooks: {\n\t\t\ttype: {\n\t\t\t\tset: function (elem, value) {\n\t\t\t\t\tif (!support.radioValue && value === \"radio\" && nodeName(elem, \"input\")) {\n\t\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\t\telem.setAttribute(\"type\", value);\n\t\t\t\t\t\tif (val) {\n\t\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tremoveAttr: function (elem, value) {\n\t\t\tvar name,\n\t\t\t    i = 0,\n\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match(rnothtmlwhite);\n\n\t\t\tif (attrNames && elem.nodeType === 1) {\n\t\t\t\twhile (name = attrNames[i++]) {\n\t\t\t\t\telem.removeAttribute(name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Hooks for boolean attributes\n\tboolHook = {\n\t\tset: function (elem, value, name) {\n\t\t\tif (value === false) {\n\n\t\t\t\t// Remove boolean attributes when set to false\n\t\t\t\tjQuery.removeAttr(elem, name);\n\t\t\t} else {\n\t\t\t\telem.setAttribute(name, name);\n\t\t\t}\n\t\t\treturn name;\n\t\t}\n\t};\n\n\tjQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g), function (i, name) {\n\t\tvar getter = attrHandle[name] || jQuery.find.attr;\n\n\t\tattrHandle[name] = function (elem, name, isXML) {\n\t\t\tvar ret,\n\t\t\t    handle,\n\t\t\t    lowercaseName = name.toLowerCase();\n\n\t\t\tif (!isXML) {\n\n\t\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\t\thandle = attrHandle[lowercaseName];\n\t\t\t\tattrHandle[lowercaseName] = ret;\n\t\t\t\tret = getter(elem, name, isXML) != null ? lowercaseName : null;\n\t\t\t\tattrHandle[lowercaseName] = handle;\n\t\t\t}\n\t\t\treturn ret;\n\t\t};\n\t});\n\n\tvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\t    rclickable = /^(?:a|area)$/i;\n\n\tjQuery.fn.extend({\n\t\tprop: function (name, value) {\n\t\t\treturn access(this, jQuery.prop, name, value, arguments.length > 1);\n\t\t},\n\n\t\tremoveProp: function (name) {\n\t\t\treturn this.each(function () {\n\t\t\t\tdelete this[jQuery.propFix[name] || name];\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tprop: function (elem, name, value) {\n\t\t\tvar ret,\n\t\t\t    hooks,\n\t\t\t    nType = elem.nodeType;\n\n\t\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\t\tif (nType === 3 || nType === 8 || nType === 2) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n\n\t\t\t\t// Fix name and attach hooks\n\t\t\t\tname = jQuery.propFix[name] || name;\n\t\t\t\thooks = jQuery.propHooks[name];\n\t\t\t}\n\n\t\t\tif (value !== undefined) {\n\t\t\t\tif (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\treturn elem[name] = value;\n\t\t\t}\n\n\t\t\tif (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn elem[name];\n\t\t},\n\n\t\tpropHooks: {\n\t\t\ttabIndex: {\n\t\t\t\tget: function (elem) {\n\n\t\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\t\tvar tabindex = jQuery.find.attr(elem, \"tabindex\");\n\n\t\t\t\t\tif (tabindex) {\n\t\t\t\t\t\treturn parseInt(tabindex, 10);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tpropFix: {\n\t\t\t\"for\": \"htmlFor\",\n\t\t\t\"class\": \"className\"\n\t\t}\n\t});\n\n\t// Support: IE <=11 only\n\t// Accessing the selectedIndex property\n\t// forces the browser to respect setting selected\n\t// on the option\n\t// The getter ensures a default option is selected\n\t// when in an optgroup\n\t// eslint rule \"no-unused-expressions\" is disabled for this code\n\t// since it considers such accessions noop\n\tif (!support.optSelected) {\n\t\tjQuery.propHooks.selected = {\n\t\t\tget: function (elem) {\n\n\t\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\t\tvar parent = elem.parentNode;\n\t\t\t\tif (parent && parent.parentNode) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\tset: function (elem) {\n\n\t\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\t\tvar parent = elem.parentNode;\n\t\t\t\tif (parent) {\n\t\t\t\t\tparent.selectedIndex;\n\n\t\t\t\t\tif (parent.parentNode) {\n\t\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tjQuery.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n\t\tjQuery.propFix[this.toLowerCase()] = this;\n\t});\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace\n\tfunction stripAndCollapse(value) {\n\t\tvar tokens = value.match(rnothtmlwhite) || [];\n\t\treturn tokens.join(\" \");\n\t}\n\n\tfunction getClass(elem) {\n\t\treturn elem.getAttribute && elem.getAttribute(\"class\") || \"\";\n\t}\n\n\tjQuery.fn.extend({\n\t\taddClass: function (value) {\n\t\t\tvar classes,\n\t\t\t    elem,\n\t\t\t    cur,\n\t\t\t    curValue,\n\t\t\t    clazz,\n\t\t\t    j,\n\t\t\t    finalValue,\n\t\t\t    i = 0;\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (j) {\n\t\t\t\t\tjQuery(this).addClass(value.call(this, j, getClass(this)));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (typeof value === \"string\" && value) {\n\t\t\t\tclasses = value.match(rnothtmlwhite) || [];\n\n\t\t\t\twhile (elem = this[i++]) {\n\t\t\t\t\tcurValue = getClass(elem);\n\t\t\t\t\tcur = elem.nodeType === 1 && \" \" + stripAndCollapse(curValue) + \" \";\n\n\t\t\t\t\tif (cur) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (clazz = classes[j++]) {\n\t\t\t\t\t\t\tif (cur.indexOf(\" \" + clazz + \" \") < 0) {\n\t\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\t\tfinalValue = stripAndCollapse(cur);\n\t\t\t\t\t\tif (curValue !== finalValue) {\n\t\t\t\t\t\t\telem.setAttribute(\"class\", finalValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tremoveClass: function (value) {\n\t\t\tvar classes,\n\t\t\t    elem,\n\t\t\t    cur,\n\t\t\t    curValue,\n\t\t\t    clazz,\n\t\t\t    j,\n\t\t\t    finalValue,\n\t\t\t    i = 0;\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (j) {\n\t\t\t\t\tjQuery(this).removeClass(value.call(this, j, getClass(this)));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this.attr(\"class\", \"\");\n\t\t\t}\n\n\t\t\tif (typeof value === \"string\" && value) {\n\t\t\t\tclasses = value.match(rnothtmlwhite) || [];\n\n\t\t\t\twhile (elem = this[i++]) {\n\t\t\t\t\tcurValue = getClass(elem);\n\n\t\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\t\tcur = elem.nodeType === 1 && \" \" + stripAndCollapse(curValue) + \" \";\n\n\t\t\t\t\tif (cur) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (clazz = classes[j++]) {\n\n\t\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\t\twhile (cur.indexOf(\" \" + clazz + \" \") > -1) {\n\t\t\t\t\t\t\t\tcur = cur.replace(\" \" + clazz + \" \", \" \");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\t\tfinalValue = stripAndCollapse(cur);\n\t\t\t\t\t\tif (curValue !== finalValue) {\n\t\t\t\t\t\t\telem.setAttribute(\"class\", finalValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\ttoggleClass: function (value, stateVal) {\n\t\t\tvar type = typeof value;\n\n\t\t\tif (typeof stateVal === \"boolean\" && type === \"string\") {\n\t\t\t\treturn stateVal ? this.addClass(value) : this.removeClass(value);\n\t\t\t}\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar className, i, self, classNames;\n\n\t\t\t\tif (type === \"string\") {\n\n\t\t\t\t\t// Toggle individual class names\n\t\t\t\t\ti = 0;\n\t\t\t\t\tself = jQuery(this);\n\t\t\t\t\tclassNames = value.match(rnothtmlwhite) || [];\n\n\t\t\t\t\twhile (className = classNames[i++]) {\n\n\t\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\t\tif (self.hasClass(className)) {\n\t\t\t\t\t\t\tself.removeClass(className);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.addClass(className);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Toggle whole class name\n\t\t\t\t} else if (value === undefined || type === \"boolean\") {\n\t\t\t\t\tclassName = getClass(this);\n\t\t\t\t\tif (className) {\n\n\t\t\t\t\t\t// Store className if set\n\t\t\t\t\t\tdataPriv.set(this, \"__className__\", className);\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\t\tif (this.setAttribute) {\n\t\t\t\t\t\tthis.setAttribute(\"class\", className || value === false ? \"\" : dataPriv.get(this, \"__className__\") || \"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\thasClass: function (selector) {\n\t\t\tvar className,\n\t\t\t    elem,\n\t\t\t    i = 0;\n\n\t\t\tclassName = \" \" + selector + \" \";\n\t\t\twhile (elem = this[i++]) {\n\t\t\t\tif (elem.nodeType === 1 && (\" \" + stripAndCollapse(getClass(elem)) + \" \").indexOf(className) > -1) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t});\n\n\tvar rreturn = /\\r/g;\n\n\tjQuery.fn.extend({\n\t\tval: function (value) {\n\t\t\tvar hooks,\n\t\t\t    ret,\n\t\t\t    isFunction,\n\t\t\t    elem = this[0];\n\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (elem) {\n\t\t\t\t\thooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n\n\t\t\t\t\tif (hooks && \"get\" in hooks && (ret = hooks.get(elem, \"value\")) !== undefined) {\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\n\t\t\t\t\tret = elem.value;\n\n\t\t\t\t\t// Handle most common string cases\n\t\t\t\t\tif (typeof ret === \"string\") {\n\t\t\t\t\t\treturn ret.replace(rreturn, \"\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tisFunction = jQuery.isFunction(value);\n\n\t\t\treturn this.each(function (i) {\n\t\t\t\tvar val;\n\n\t\t\t\tif (this.nodeType !== 1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isFunction) {\n\t\t\t\t\tval = value.call(this, i, jQuery(this).val());\n\t\t\t\t} else {\n\t\t\t\t\tval = value;\n\t\t\t\t}\n\n\t\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\t\tif (val == null) {\n\t\t\t\t\tval = \"\";\n\t\t\t\t} else if (typeof val === \"number\") {\n\t\t\t\t\tval += \"\";\n\t\t\t\t} else if (Array.isArray(val)) {\n\t\t\t\t\tval = jQuery.map(val, function (value) {\n\t\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\thooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];\n\n\t\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\t\tif (!hooks || !(\"set\" in hooks) || hooks.set(this, val, \"value\") === undefined) {\n\t\t\t\t\tthis.value = val;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tvalHooks: {\n\t\t\toption: {\n\t\t\t\tget: function (elem) {\n\n\t\t\t\t\tvar val = jQuery.find.attr(elem, \"value\");\n\t\t\t\t\treturn val != null ? val :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse(jQuery.text(elem));\n\t\t\t\t}\n\t\t\t},\n\t\t\tselect: {\n\t\t\t\tget: function (elem) {\n\t\t\t\t\tvar value,\n\t\t\t\t\t    option,\n\t\t\t\t\t    i,\n\t\t\t\t\t    options = elem.options,\n\t\t\t\t\t    index = elem.selectedIndex,\n\t\t\t\t\t    one = elem.type === \"select-one\",\n\t\t\t\t\t    values = one ? null : [],\n\t\t\t\t\t    max = one ? index + 1 : options.length;\n\n\t\t\t\t\tif (index < 0) {\n\t\t\t\t\t\ti = max;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Loop through all the selected options\n\t\t\t\t\tfor (; i < max; i++) {\n\t\t\t\t\t\toption = options[i];\n\n\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\t\tif ((option.selected || i === index) &&\n\n\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t!option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, \"optgroup\"))) {\n\n\t\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\t\tvalue = jQuery(option).val();\n\n\t\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\t\tif (one) {\n\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn values;\n\t\t\t\t},\n\n\t\t\t\tset: function (elem, value) {\n\t\t\t\t\tvar optionSet,\n\t\t\t\t\t    option,\n\t\t\t\t\t    options = elem.options,\n\t\t\t\t\t    values = jQuery.makeArray(value),\n\t\t\t\t\t    i = options.length;\n\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\toption = options[i];\n\n\t\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\t\tif (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {\n\t\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t\t}\n\n\t\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\t\tif (!optionSet) {\n\t\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t\t}\n\t\t\t\t\treturn values;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Radios and checkboxes getter/setter\n\tjQuery.each([\"radio\", \"checkbox\"], function () {\n\t\tjQuery.valHooks[this] = {\n\t\t\tset: function (elem, value) {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\treturn elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tif (!support.checkOn) {\n\t\t\tjQuery.valHooks[this].get = function (elem) {\n\t\t\t\treturn elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\n\t\t\t};\n\t\t}\n\t});\n\n\t// Return jQuery for attributes-only inclusion\n\n\n\tvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\n\tjQuery.extend(jQuery.event, {\n\n\t\ttrigger: function (event, data, elem, onlyHandlers) {\n\n\t\t\tvar i,\n\t\t\t    cur,\n\t\t\t    tmp,\n\t\t\t    bubbleType,\n\t\t\t    ontype,\n\t\t\t    handle,\n\t\t\t    special,\n\t\t\t    eventPath = [elem || document],\n\t\t\t    type = hasOwn.call(event, \"type\") ? event.type : event,\n\t\t\t    namespaces = hasOwn.call(event, \"namespace\") ? event.namespace.split(\".\") : [];\n\n\t\t\tcur = tmp = elem = elem || document;\n\n\t\t\t// Don't do events on text and comment nodes\n\t\t\tif (elem.nodeType === 3 || elem.nodeType === 8) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\t\tif (rfocusMorph.test(type + jQuery.event.triggered)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (type.indexOf(\".\") > -1) {\n\n\t\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\t\tnamespaces = type.split(\".\");\n\t\t\t\ttype = namespaces.shift();\n\t\t\t\tnamespaces.sort();\n\t\t\t}\n\t\t\tontype = type.indexOf(\":\") < 0 && \"on\" + type;\n\n\t\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\t\tevent = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === \"object\" && event);\n\n\t\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\t\tevent.namespace = namespaces.join(\".\");\n\t\t\tevent.rnamespace = event.namespace ? new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null;\n\n\t\t\t// Clean up the event in case it is being reused\n\t\t\tevent.result = undefined;\n\t\t\tif (!event.target) {\n\t\t\t\tevent.target = elem;\n\t\t\t}\n\n\t\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\t\tdata = data == null ? [event] : jQuery.makeArray(data, [event]);\n\n\t\t\t// Allow special events to draw outside the lines\n\t\t\tspecial = jQuery.event.special[type] || {};\n\t\t\tif (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\t\tif (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {\n\n\t\t\t\tbubbleType = special.delegateType || type;\n\t\t\t\tif (!rfocusMorph.test(bubbleType + type)) {\n\t\t\t\t\tcur = cur.parentNode;\n\t\t\t\t}\n\t\t\t\tfor (; cur; cur = cur.parentNode) {\n\t\t\t\t\teventPath.push(cur);\n\t\t\t\t\ttmp = cur;\n\t\t\t\t}\n\n\t\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\t\tif (tmp === (elem.ownerDocument || document)) {\n\t\t\t\t\teventPath.push(tmp.defaultView || tmp.parentWindow || window);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fire handlers on the event path\n\t\t\ti = 0;\n\t\t\twhile ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n\n\t\t\t\tevent.type = i > 1 ? bubbleType : special.bindType || type;\n\n\t\t\t\t// jQuery handler\n\t\t\t\thandle = (dataPriv.get(cur, \"events\") || {})[event.type] && dataPriv.get(cur, \"handle\");\n\t\t\t\tif (handle) {\n\t\t\t\t\thandle.apply(cur, data);\n\t\t\t\t}\n\n\t\t\t\t// Native handler\n\t\t\t\thandle = ontype && cur[ontype];\n\t\t\t\tif (handle && handle.apply && acceptData(cur)) {\n\t\t\t\t\tevent.result = handle.apply(cur, data);\n\t\t\t\t\tif (event.result === false) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tevent.type = type;\n\n\t\t\t// If nobody prevented the default action, do it now\n\t\t\tif (!onlyHandlers && !event.isDefaultPrevented()) {\n\n\t\t\t\tif ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {\n\n\t\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\t\tif (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {\n\n\t\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\t\ttmp = elem[ontype];\n\n\t\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\t\telem[ontype] = null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\t\telem[type]();\n\t\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\t\telem[ontype] = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn event.result;\n\t\t},\n\n\t\t// Piggyback on a donor event to simulate a different one\n\t\t// Used only for `focus(in | out)` events\n\t\tsimulate: function (type, elem, event) {\n\t\t\tvar e = jQuery.extend(new jQuery.Event(), event, {\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t});\n\n\t\t\tjQuery.event.trigger(e, null, elem);\n\t\t}\n\n\t});\n\n\tjQuery.fn.extend({\n\n\t\ttrigger: function (type, data) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.trigger(type, data, this);\n\t\t\t});\n\t\t},\n\t\ttriggerHandler: function (type, data) {\n\t\t\tvar elem = this[0];\n\t\t\tif (elem) {\n\t\t\t\treturn jQuery.event.trigger(type, data, elem, true);\n\t\t\t}\n\t\t}\n\t});\n\n\tjQuery.each((\"blur focus focusin focusout resize scroll click dblclick \" + \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" + \"change select submit keydown keypress keyup contextmenu\").split(\" \"), function (i, name) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[name] = function (data, fn) {\n\t\t\treturn arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n\t\t};\n\t});\n\n\tjQuery.fn.extend({\n\t\thover: function (fnOver, fnOut) {\n\t\t\treturn this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n\t\t}\n\t});\n\n\tsupport.focusin = \"onfocusin\" in window;\n\n\t// Support: Firefox <=44\n\t// Firefox doesn't have focus(in | out) events\n\t// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n\t//\n\t// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n\t// focus(in | out) events fire after focus & blur events,\n\t// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n\t// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n\tif (!support.focusin) {\n\t\tjQuery.each({ focus: \"focusin\", blur: \"focusout\" }, function (orig, fix) {\n\n\t\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\t\tvar handler = function (event) {\n\t\t\t\tjQuery.event.simulate(fix, event.target, jQuery.event.fix(event));\n\t\t\t};\n\n\t\t\tjQuery.event.special[fix] = {\n\t\t\t\tsetup: function () {\n\t\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\t    attaches = dataPriv.access(doc, fix);\n\n\t\t\t\t\tif (!attaches) {\n\t\t\t\t\t\tdoc.addEventListener(orig, handler, true);\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.access(doc, fix, (attaches || 0) + 1);\n\t\t\t\t},\n\t\t\t\tteardown: function () {\n\t\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\t    attaches = dataPriv.access(doc, fix) - 1;\n\n\t\t\t\t\tif (!attaches) {\n\t\t\t\t\t\tdoc.removeEventListener(orig, handler, true);\n\t\t\t\t\t\tdataPriv.remove(doc, fix);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdataPriv.access(doc, fix, attaches);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\tvar location = window.location;\n\n\tvar nonce = jQuery.now();\n\n\tvar rquery = /\\?/;\n\n\t// Cross-browser xml parsing\n\tjQuery.parseXML = function (data) {\n\t\tvar xml;\n\t\tif (!data || typeof data !== \"string\") {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only\n\t\t// IE throws on parseFromString with invalid input.\n\t\ttry {\n\t\t\txml = new window.DOMParser().parseFromString(data, \"text/xml\");\n\t\t} catch (e) {\n\t\t\txml = undefined;\n\t\t}\n\n\t\tif (!xml || xml.getElementsByTagName(\"parsererror\").length) {\n\t\t\tjQuery.error(\"Invalid XML: \" + data);\n\t\t}\n\t\treturn xml;\n\t};\n\n\tvar rbracket = /\\[\\]$/,\n\t    rCRLF = /\\r?\\n/g,\n\t    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\t    rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n\tfunction buildParams(prefix, obj, traditional, add) {\n\t\tvar name;\n\n\t\tif (Array.isArray(obj)) {\n\n\t\t\t// Serialize array item.\n\t\t\tjQuery.each(obj, function (i, v) {\n\t\t\t\tif (traditional || rbracket.test(prefix)) {\n\n\t\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\t\tadd(prefix, v);\n\t\t\t\t} else {\n\n\t\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\t\tbuildParams(prefix + \"[\" + (typeof v === \"object\" && v != null ? i : \"\") + \"]\", v, traditional, add);\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (!traditional && jQuery.type(obj) === \"object\") {\n\n\t\t\t// Serialize object item.\n\t\t\tfor (name in obj) {\n\t\t\t\tbuildParams(prefix + \"[\" + name + \"]\", obj[name], traditional, add);\n\t\t\t}\n\t\t} else {\n\n\t\t\t// Serialize scalar item.\n\t\t\tadd(prefix, obj);\n\t\t}\n\t}\n\n\t// Serialize an array of form elements or a set of\n\t// key/values into a query string\n\tjQuery.param = function (a, traditional) {\n\t\tvar prefix,\n\t\t    s = [],\n\t\t    add = function (key, valueOrFunction) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = jQuery.isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;\n\n\t\t\ts[s.length] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value == null ? \"\" : value);\n\t\t};\n\n\t\t// If an array was passed in, assume that it is an array of form elements.\n\t\tif (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n\n\t\t\t// Serialize the form elements\n\t\t\tjQuery.each(a, function () {\n\t\t\t\tadd(this.name, this.value);\n\t\t\t});\n\t\t} else {\n\n\t\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t\t// did it), otherwise encode params recursively.\n\t\t\tfor (prefix in a) {\n\t\t\t\tbuildParams(prefix, a[prefix], traditional, add);\n\t\t\t}\n\t\t}\n\n\t\t// Return the resulting serialization\n\t\treturn s.join(\"&\");\n\t};\n\n\tjQuery.fn.extend({\n\t\tserialize: function () {\n\t\t\treturn jQuery.param(this.serializeArray());\n\t\t},\n\t\tserializeArray: function () {\n\t\t\treturn this.map(function () {\n\n\t\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\t\tvar elements = jQuery.prop(this, \"elements\");\n\t\t\t\treturn elements ? jQuery.makeArray(elements) : this;\n\t\t\t}).filter(function () {\n\t\t\t\tvar type = this.type;\n\n\t\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\t\treturn this.name && !jQuery(this).is(\":disabled\") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n\t\t\t}).map(function (i, elem) {\n\t\t\t\tvar val = jQuery(this).val();\n\n\t\t\t\tif (val == null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif (Array.isArray(val)) {\n\t\t\t\t\treturn jQuery.map(val, function (val) {\n\t\t\t\t\t\treturn { name: elem.name, value: val.replace(rCRLF, \"\\r\\n\") };\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn { name: elem.name, value: val.replace(rCRLF, \"\\r\\n\") };\n\t\t\t}).get();\n\t\t}\n\t});\n\n\tvar r20 = /%20/g,\n\t    rhash = /#.*$/,\n\t    rantiCache = /([?&])_=[^&]*/,\n\t    rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\t    rnoContent = /^(?:GET|HEAD)$/,\n\t    rprotocol = /^\\/\\//,\n\n\n\t/* Prefilters\n  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n  * 2) These are called:\n  *    - BEFORE asking for a transport\n  *    - AFTER param serialization (s.data is a string if s.processData is true)\n  * 3) key is the dataType\n  * 4) the catchall symbol \"*\" can be used\n  * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n  */\n\tprefilters = {},\n\n\n\t/* Transports bindings\n  * 1) key is the dataType\n  * 2) the catchall symbol \"*\" can be used\n  * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n  */\n\ttransports = {},\n\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat(\"*\"),\n\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement(\"a\");\n\toriginAnchor.href = location.href;\n\n\t// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n\tfunction addToPrefiltersOrTransports(structure) {\n\n\t\t// dataTypeExpression is optional and defaults to \"*\"\n\t\treturn function (dataTypeExpression, func) {\n\n\t\t\tif (typeof dataTypeExpression !== \"string\") {\n\t\t\t\tfunc = dataTypeExpression;\n\t\t\t\tdataTypeExpression = \"*\";\n\t\t\t}\n\n\t\t\tvar dataType,\n\t\t\t    i = 0,\n\t\t\t    dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];\n\n\t\t\tif (jQuery.isFunction(func)) {\n\n\t\t\t\t// For each dataType in the dataTypeExpression\n\t\t\t\twhile (dataType = dataTypes[i++]) {\n\n\t\t\t\t\t// Prepend if requested\n\t\t\t\t\tif (dataType[0] === \"+\") {\n\t\t\t\t\t\tdataType = dataType.slice(1) || \"*\";\n\t\t\t\t\t\t(structure[dataType] = structure[dataType] || []).unshift(func);\n\n\t\t\t\t\t\t// Otherwise append\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(structure[dataType] = structure[dataType] || []).push(func);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t// Base inspection function for prefilters and transports\n\tfunction inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n\n\t\tvar inspected = {},\n\t\t    seekingTransport = structure === transports;\n\n\t\tfunction inspect(dataType) {\n\t\t\tvar selected;\n\t\t\tinspected[dataType] = true;\n\t\t\tjQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n\t\t\t\tvar dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n\t\t\t\tif (typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n\n\t\t\t\t\toptions.dataTypes.unshift(dataTypeOrTransport);\n\t\t\t\t\tinspect(dataTypeOrTransport);\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (seekingTransport) {\n\t\t\t\t\treturn !(selected = dataTypeOrTransport);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn selected;\n\t\t}\n\n\t\treturn inspect(options.dataTypes[0]) || !inspected[\"*\"] && inspect(\"*\");\n\t}\n\n\t// A special extend for ajax options\n\t// that takes \"flat\" options (not to be deep extended)\n\t// Fixes #9887\n\tfunction ajaxExtend(target, src) {\n\t\tvar key,\n\t\t    deep,\n\t\t    flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\t\tfor (key in src) {\n\t\t\tif (src[key] !== undefined) {\n\t\t\t\t(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n\t\t\t}\n\t\t}\n\t\tif (deep) {\n\t\t\tjQuery.extend(true, target, deep);\n\t\t}\n\n\t\treturn target;\n\t}\n\n\t/* Handles responses to an ajax request:\n  * - finds the right dataType (mediates between content-type and expected dataType)\n  * - returns the corresponding response\n  */\n\tfunction ajaxHandleResponses(s, jqXHR, responses) {\n\n\t\tvar ct,\n\t\t    type,\n\t\t    finalDataType,\n\t\t    firstDataType,\n\t\t    contents = s.contents,\n\t\t    dataTypes = s.dataTypes;\n\n\t\t// Remove auto dataType and get content-type in the process\n\t\twhile (dataTypes[0] === \"*\") {\n\t\t\tdataTypes.shift();\n\t\t\tif (ct === undefined) {\n\t\t\t\tct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n\t\t\t}\n\t\t}\n\n\t\t// Check if we're dealing with a known content-type\n\t\tif (ct) {\n\t\t\tfor (type in contents) {\n\t\t\t\tif (contents[type] && contents[type].test(ct)) {\n\t\t\t\t\tdataTypes.unshift(type);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check to see if we have a response for the expected dataType\n\t\tif (dataTypes[0] in responses) {\n\t\t\tfinalDataType = dataTypes[0];\n\t\t} else {\n\n\t\t\t// Try convertible dataTypes\n\t\t\tfor (type in responses) {\n\t\t\t\tif (!dataTypes[0] || s.converters[type + \" \" + dataTypes[0]]) {\n\t\t\t\t\tfinalDataType = type;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!firstDataType) {\n\t\t\t\t\tfirstDataType = type;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Or just use first one\n\t\t\tfinalDataType = finalDataType || firstDataType;\n\t\t}\n\n\t\t// If we found a dataType\n\t\t// We add the dataType to the list if needed\n\t\t// and return the corresponding response\n\t\tif (finalDataType) {\n\t\t\tif (finalDataType !== dataTypes[0]) {\n\t\t\t\tdataTypes.unshift(finalDataType);\n\t\t\t}\n\t\t\treturn responses[finalDataType];\n\t\t}\n\t}\n\n\t/* Chain conversions given the request and the original response\n  * Also sets the responseXXX fields on the jqXHR instance\n  */\n\tfunction ajaxConvert(s, response, jqXHR, isSuccess) {\n\t\tvar conv2,\n\t\t    current,\n\t\t    conv,\n\t\t    tmp,\n\t\t    prev,\n\t\t    converters = {},\n\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t\t// Create converters map with lowercased keys\n\t\tif (dataTypes[1]) {\n\t\t\tfor (conv in s.converters) {\n\t\t\t\tconverters[conv.toLowerCase()] = s.converters[conv];\n\t\t\t}\n\t\t}\n\n\t\tcurrent = dataTypes.shift();\n\n\t\t// Convert to each sequential dataType\n\t\twhile (current) {\n\n\t\t\tif (s.responseFields[current]) {\n\t\t\t\tjqXHR[s.responseFields[current]] = response;\n\t\t\t}\n\n\t\t\t// Apply the dataFilter if provided\n\t\t\tif (!prev && isSuccess && s.dataFilter) {\n\t\t\t\tresponse = s.dataFilter(response, s.dataType);\n\t\t\t}\n\n\t\t\tprev = current;\n\t\t\tcurrent = dataTypes.shift();\n\n\t\t\tif (current) {\n\n\t\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\t\tif (current === \"*\") {\n\n\t\t\t\t\tcurrent = prev;\n\n\t\t\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t\t} else if (prev !== \"*\" && prev !== current) {\n\n\t\t\t\t\t// Seek a direct converter\n\t\t\t\t\tconv = converters[prev + \" \" + current] || converters[\"* \" + current];\n\n\t\t\t\t\t// If none found, seek a pair\n\t\t\t\t\tif (!conv) {\n\t\t\t\t\t\tfor (conv2 in converters) {\n\n\t\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\t\ttmp = conv2.split(\" \");\n\t\t\t\t\t\t\tif (tmp[1] === current) {\n\n\t\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\t\tconv = converters[prev + \" \" + tmp[0]] || converters[\"* \" + tmp[0]];\n\t\t\t\t\t\t\t\tif (conv) {\n\n\t\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\t\tif (conv === true) {\n\t\t\t\t\t\t\t\t\t\tconv = converters[conv2];\n\n\t\t\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t\t} else if (converters[conv2] !== true) {\n\t\t\t\t\t\t\t\t\t\tcurrent = tmp[0];\n\t\t\t\t\t\t\t\t\t\tdataTypes.unshift(tmp[1]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\t\tif (conv !== true) {\n\n\t\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\t\tif (conv && s.throws) {\n\t\t\t\t\t\t\tresponse = conv(response);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tresponse = conv(response);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { state: \"success\", data: response };\n\t}\n\n\tjQuery.extend({\n\n\t\t// Counter for holding the number of active queries\n\t\tactive: 0,\n\n\t\t// Last-Modified header cache for next request\n\t\tlastModified: {},\n\t\tetag: {},\n\n\t\tajaxSettings: {\n\t\t\turl: location.href,\n\t\t\ttype: \"GET\",\n\t\t\tisLocal: rlocalProtocol.test(location.protocol),\n\t\t\tglobal: true,\n\t\t\tprocessData: true,\n\t\t\tasync: true,\n\t\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t\t/*\n   timeout: 0,\n   data: null,\n   dataType: null,\n   username: null,\n   password: null,\n   cache: null,\n   throws: false,\n   traditional: false,\n   headers: {},\n   */\n\n\t\t\taccepts: {\n\t\t\t\t\"*\": allTypes,\n\t\t\t\ttext: \"text/plain\",\n\t\t\t\thtml: \"text/html\",\n\t\t\t\txml: \"application/xml, text/xml\",\n\t\t\t\tjson: \"application/json, text/javascript\"\n\t\t\t},\n\n\t\t\tcontents: {\n\t\t\t\txml: /\\bxml\\b/,\n\t\t\t\thtml: /\\bhtml/,\n\t\t\t\tjson: /\\bjson\\b/\n\t\t\t},\n\n\t\t\tresponseFields: {\n\t\t\t\txml: \"responseXML\",\n\t\t\t\ttext: \"responseText\",\n\t\t\t\tjson: \"responseJSON\"\n\t\t\t},\n\n\t\t\t// Data converters\n\t\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\t\tconverters: {\n\n\t\t\t\t// Convert anything to text\n\t\t\t\t\"* text\": String,\n\n\t\t\t\t// Text to html (true = no transformation)\n\t\t\t\t\"text html\": true,\n\n\t\t\t\t// Evaluate text as a json expression\n\t\t\t\t\"text json\": JSON.parse,\n\n\t\t\t\t// Parse text as xml\n\t\t\t\t\"text xml\": jQuery.parseXML\n\t\t\t},\n\n\t\t\t// For options that shouldn't be deep extended:\n\t\t\t// you can add your own custom options here if\n\t\t\t// and when you create one that shouldn't be\n\t\t\t// deep extended (see ajaxExtend)\n\t\t\tflatOptions: {\n\t\t\t\turl: true,\n\t\t\t\tcontext: true\n\t\t\t}\n\t\t},\n\n\t\t// Creates a full fledged settings object into target\n\t\t// with both ajaxSettings and settings fields.\n\t\t// If target is omitted, writes into ajaxSettings.\n\t\tajaxSetup: function (target, settings) {\n\t\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend(jQuery.ajaxSettings, target);\n\t\t},\n\n\t\tajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n\t\tajaxTransport: addToPrefiltersOrTransports(transports),\n\n\t\t// Main method\n\t\tajax: function (url, options) {\n\n\t\t\t// If url is an object, simulate pre-1.5 signature\n\t\t\tif (typeof url === \"object\") {\n\t\t\t\toptions = url;\n\t\t\t\turl = undefined;\n\t\t\t}\n\n\t\t\t// Force options to be an object\n\t\t\toptions = options || {};\n\n\t\t\tvar transport,\n\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\t    responseHeaders,\n\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup({}, options),\n\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\t    completeDeferred = jQuery.Callbacks(\"once memory\"),\n\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\t    requestHeadersNames = {},\n\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function (key) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif (completed) {\n\t\t\t\t\t\tif (!responseHeaders) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile (match = rheaders.exec(responseHeadersString)) {\n\t\t\t\t\t\t\t\tresponseHeaders[match[1].toLowerCase()] = match[2];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[key.toLowerCase()];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function () {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function (name, value) {\n\t\t\t\t\tif (completed == null) {\n\t\t\t\t\t\tname = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;\n\t\t\t\t\t\trequestHeaders[name] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function (type) {\n\t\t\t\t\tif (completed == null) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function (map) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif (map) {\n\t\t\t\t\t\tif (completed) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always(map[jqXHR.status]);\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor (code in map) {\n\t\t\t\t\t\t\t\tstatusCode[code] = [statusCode[code], map[code]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function (statusText) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif (transport) {\n\t\t\t\t\t\ttransport.abort(finalText);\n\t\t\t\t\t}\n\t\t\t\t\tdone(0, finalText);\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Attach deferreds\n\t\t\tdeferred.promise(jqXHR);\n\n\t\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t\t// We also use the url parameter if available\n\t\t\ts.url = ((url || s.url || location.href) + \"\").replace(rprotocol, location.protocol + \"//\");\n\n\t\t\t// Alias method option to type as per ticket #12004\n\t\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t\t// Extract dataTypes list\n\t\t\ts.dataTypes = (s.dataType || \"*\").toLowerCase().match(rnothtmlwhite) || [\"\"];\n\n\t\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\t\tif (s.crossDomain == null) {\n\t\t\t\turlAnchor = document.createElement(\"a\");\n\n\t\t\t\t// Support: IE <=8 - 11, Edge 12 - 13\n\t\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t\t// e.g. http://example.com:80x/\n\t\t\t\ttry {\n\t\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !== urlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t\t} catch (e) {\n\n\t\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\t\ts.crossDomain = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Convert data if not already a string\n\t\t\tif (s.data && s.processData && typeof s.data !== \"string\") {\n\t\t\t\ts.data = jQuery.param(s.data, s.traditional);\n\t\t\t}\n\n\t\t\t// Apply prefilters\n\t\t\tinspectPrefiltersOrTransports(prefilters, s, options, jqXHR);\n\n\t\t\t// If request was aborted inside a prefilter, stop there\n\t\t\tif (completed) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// We can fire global events as of now if asked to\n\t\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t\t// Watch for a new set of requests\n\t\t\tif (fireGlobals && jQuery.active++ === 0) {\n\t\t\t\tjQuery.event.trigger(\"ajaxStart\");\n\t\t\t}\n\n\t\t\t// Uppercase the type\n\t\t\ts.type = s.type.toUpperCase();\n\n\t\t\t// Determine if request has content\n\t\t\ts.hasContent = !rnoContent.test(s.type);\n\n\t\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t\t// and/or If-None-Match header later on\n\t\t\t// Remove hash to simplify url manipulation\n\t\t\tcacheURL = s.url.replace(rhash, \"\");\n\n\t\t\t// More options handling for requests with no content\n\t\t\tif (!s.hasContent) {\n\n\t\t\t\t// Remember the hash so we can put it back\n\t\t\t\tuncached = s.url.slice(cacheURL.length);\n\n\t\t\t\t// If data is available, append data to url\n\t\t\t\tif (s.data) {\n\t\t\t\t\tcacheURL += (rquery.test(cacheURL) ? \"&\" : \"?\") + s.data;\n\n\t\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\t\tdelete s.data;\n\t\t\t\t}\n\n\t\t\t\t// Add or update anti-cache param if needed\n\t\t\t\tif (s.cache === false) {\n\t\t\t\t\tcacheURL = cacheURL.replace(rantiCache, \"$1\");\n\t\t\t\t\tuncached = (rquery.test(cacheURL) ? \"&\" : \"?\") + \"_=\" + nonce++ + uncached;\n\t\t\t\t}\n\n\t\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\t\ts.url = cacheURL + uncached;\n\n\t\t\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t\t} else if (s.data && s.processData && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0) {\n\t\t\t\ts.data = s.data.replace(r20, \"+\");\n\t\t\t}\n\n\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\tif (s.ifModified) {\n\t\t\t\tif (jQuery.lastModified[cacheURL]) {\n\t\t\t\t\tjqXHR.setRequestHeader(\"If-Modified-Since\", jQuery.lastModified[cacheURL]);\n\t\t\t\t}\n\t\t\t\tif (jQuery.etag[cacheURL]) {\n\t\t\t\t\tjqXHR.setRequestHeader(\"If-None-Match\", jQuery.etag[cacheURL]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set the correct header, if data is being sent\n\t\t\tif (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n\t\t\t\tjqXHR.setRequestHeader(\"Content-Type\", s.contentType);\n\t\t\t}\n\n\t\t\t// Set the Accepts header for the server, depending on the dataType\n\t\t\tjqXHR.setRequestHeader(\"Accept\", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\") : s.accepts[\"*\"]);\n\n\t\t\t// Check for headers option\n\t\t\tfor (i in s.headers) {\n\t\t\t\tjqXHR.setRequestHeader(i, s.headers[i]);\n\t\t\t}\n\n\t\t\t// Allow custom headers/mimetypes and early abort\n\t\t\tif (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {\n\n\t\t\t\t// Abort if not done already and return\n\t\t\t\treturn jqXHR.abort();\n\t\t\t}\n\n\t\t\t// Aborting is no longer a cancellation\n\t\t\tstrAbort = \"abort\";\n\n\t\t\t// Install callbacks on deferreds\n\t\t\tcompleteDeferred.add(s.complete);\n\t\t\tjqXHR.done(s.success);\n\t\t\tjqXHR.fail(s.error);\n\n\t\t\t// Get transport\n\t\t\ttransport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);\n\n\t\t\t// If no transport, we auto-abort\n\t\t\tif (!transport) {\n\t\t\t\tdone(-1, \"No Transport\");\n\t\t\t} else {\n\t\t\t\tjqXHR.readyState = 1;\n\n\t\t\t\t// Send global event\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(\"ajaxSend\", [jqXHR, s]);\n\t\t\t\t}\n\n\t\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\t\tif (completed) {\n\t\t\t\t\treturn jqXHR;\n\t\t\t\t}\n\n\t\t\t\t// Timeout\n\t\t\t\tif (s.async && s.timeout > 0) {\n\t\t\t\t\ttimeoutTimer = window.setTimeout(function () {\n\t\t\t\t\t\tjqXHR.abort(\"timeout\");\n\t\t\t\t\t}, s.timeout);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tcompleted = false;\n\t\t\t\t\ttransport.send(requestHeaders, done);\n\t\t\t\t} catch (e) {\n\n\t\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\t\tif (completed) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Propagate others as results\n\t\t\t\t\tdone(-1, e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Callback for when everything is done\n\t\t\tfunction done(status, nativeStatusText, responses, headers) {\n\t\t\t\tvar isSuccess,\n\t\t\t\t    success,\n\t\t\t\t    error,\n\t\t\t\t    response,\n\t\t\t\t    modified,\n\t\t\t\t    statusText = nativeStatusText;\n\n\t\t\t\t// Ignore repeat invocations\n\t\t\t\tif (completed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcompleted = true;\n\n\t\t\t\t// Clear timeout if it exists\n\t\t\t\tif (timeoutTimer) {\n\t\t\t\t\twindow.clearTimeout(timeoutTimer);\n\t\t\t\t}\n\n\t\t\t\t// Dereference transport for early garbage collection\n\t\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\t\ttransport = undefined;\n\n\t\t\t\t// Cache response headers\n\t\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t\t// Set readyState\n\t\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t\t// Determine if successful\n\t\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t\t// Get response data\n\t\t\t\tif (responses) {\n\t\t\t\t\tresponse = ajaxHandleResponses(s, jqXHR, responses);\n\t\t\t\t}\n\n\t\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\t\tresponse = ajaxConvert(s, response, jqXHR, isSuccess);\n\n\t\t\t\t// If successful, handle type chaining\n\t\t\t\tif (isSuccess) {\n\n\t\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\t\tif (s.ifModified) {\n\t\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"Last-Modified\");\n\t\t\t\t\t\tif (modified) {\n\t\t\t\t\t\t\tjQuery.lastModified[cacheURL] = modified;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"etag\");\n\t\t\t\t\t\tif (modified) {\n\t\t\t\t\t\t\tjQuery.etag[cacheURL] = modified;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// if no content\n\t\t\t\t\tif (status === 204 || s.type === \"HEAD\") {\n\t\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t\t\t// if not modified\n\t\t\t\t\t} else if (status === 304) {\n\t\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t\t\t// If we have data, let's convert it\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\t\terror = response.error;\n\t\t\t\t\t\tisSuccess = !error;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\t\terror = statusText;\n\t\t\t\t\tif (status || !statusText) {\n\t\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\t\tif (status < 0) {\n\t\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Set data for the fake xhr object\n\t\t\t\tjqXHR.status = status;\n\t\t\t\tjqXHR.statusText = (nativeStatusText || statusText) + \"\";\n\n\t\t\t\t// Success/Error\n\t\t\t\tif (isSuccess) {\n\t\t\t\t\tdeferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n\t\t\t\t}\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tjqXHR.statusCode(statusCode);\n\t\t\t\tstatusCode = undefined;\n\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(isSuccess ? \"ajaxSuccess\" : \"ajaxError\", [jqXHR, s, isSuccess ? success : error]);\n\t\t\t\t}\n\n\t\t\t\t// Complete\n\t\t\t\tcompleteDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(\"ajaxComplete\", [jqXHR, s]);\n\n\t\t\t\t\t// Handle the global AJAX counter\n\t\t\t\t\tif (! --jQuery.active) {\n\t\t\t\t\t\tjQuery.event.trigger(\"ajaxStop\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn jqXHR;\n\t\t},\n\n\t\tgetJSON: function (url, data, callback) {\n\t\t\treturn jQuery.get(url, data, callback, \"json\");\n\t\t},\n\n\t\tgetScript: function (url, callback) {\n\t\t\treturn jQuery.get(url, undefined, callback, \"script\");\n\t\t}\n\t});\n\n\tjQuery.each([\"get\", \"post\"], function (i, method) {\n\t\tjQuery[method] = function (url, data, callback, type) {\n\n\t\t\t// Shift arguments if data argument was omitted\n\t\t\tif (jQuery.isFunction(data)) {\n\t\t\t\ttype = type || callback;\n\t\t\t\tcallback = data;\n\t\t\t\tdata = undefined;\n\t\t\t}\n\n\t\t\t// The url can be an options object (which then must have .url)\n\t\t\treturn jQuery.ajax(jQuery.extend({\n\t\t\t\turl: url,\n\t\t\t\ttype: method,\n\t\t\t\tdataType: type,\n\t\t\t\tdata: data,\n\t\t\t\tsuccess: callback\n\t\t\t}, jQuery.isPlainObject(url) && url));\n\t\t};\n\t});\n\n\tjQuery._evalUrl = function (url) {\n\t\treturn jQuery.ajax({\n\t\t\turl: url,\n\n\t\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\t\ttype: \"GET\",\n\t\t\tdataType: \"script\",\n\t\t\tcache: true,\n\t\t\tasync: false,\n\t\t\tglobal: false,\n\t\t\t\"throws\": true\n\t\t});\n\t};\n\n\tjQuery.fn.extend({\n\t\twrapAll: function (html) {\n\t\t\tvar wrap;\n\n\t\t\tif (this[0]) {\n\t\t\t\tif (jQuery.isFunction(html)) {\n\t\t\t\t\thtml = html.call(this[0]);\n\t\t\t\t}\n\n\t\t\t\t// The elements to wrap the target around\n\t\t\t\twrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n\n\t\t\t\tif (this[0].parentNode) {\n\t\t\t\t\twrap.insertBefore(this[0]);\n\t\t\t\t}\n\n\t\t\t\twrap.map(function () {\n\t\t\t\t\tvar elem = this;\n\n\t\t\t\t\twhile (elem.firstElementChild) {\n\t\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn elem;\n\t\t\t\t}).append(this);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\twrapInner: function (html) {\n\t\t\tif (jQuery.isFunction(html)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).wrapInner(html.call(this, i));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar self = jQuery(this),\n\t\t\t\t    contents = self.contents();\n\n\t\t\t\tif (contents.length) {\n\t\t\t\t\tcontents.wrapAll(html);\n\t\t\t\t} else {\n\t\t\t\t\tself.append(html);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\twrap: function (html) {\n\t\t\tvar isFunction = jQuery.isFunction(html);\n\n\t\t\treturn this.each(function (i) {\n\t\t\t\tjQuery(this).wrapAll(isFunction ? html.call(this, i) : html);\n\t\t\t});\n\t\t},\n\n\t\tunwrap: function (selector) {\n\t\t\tthis.parent(selector).not(\"body\").each(function () {\n\t\t\t\tjQuery(this).replaceWith(this.childNodes);\n\t\t\t});\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tjQuery.expr.pseudos.hidden = function (elem) {\n\t\treturn !jQuery.expr.pseudos.visible(elem);\n\t};\n\tjQuery.expr.pseudos.visible = function (elem) {\n\t\treturn !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\n\t};\n\n\tjQuery.ajaxSettings.xhr = function () {\n\t\ttry {\n\t\t\treturn new window.XMLHttpRequest();\n\t\t} catch (e) {}\n\t};\n\n\tvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\t    xhrSupported = jQuery.ajaxSettings.xhr();\n\n\tsupport.cors = !!xhrSupported && \"withCredentials\" in xhrSupported;\n\tsupport.ajax = xhrSupported = !!xhrSupported;\n\n\tjQuery.ajaxTransport(function (options) {\n\t\tvar callback, errorCallback;\n\n\t\t// Cross domain only allowed if supported through XMLHttpRequest\n\t\tif (support.cors || xhrSupported && !options.crossDomain) {\n\t\t\treturn {\n\t\t\t\tsend: function (headers, complete) {\n\t\t\t\t\tvar i,\n\t\t\t\t\t    xhr = options.xhr();\n\n\t\t\t\t\txhr.open(options.type, options.url, options.async, options.username, options.password);\n\n\t\t\t\t\t// Apply custom fields if provided\n\t\t\t\t\tif (options.xhrFields) {\n\t\t\t\t\t\tfor (i in options.xhrFields) {\n\t\t\t\t\t\t\txhr[i] = options.xhrFields[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Override mime type if needed\n\t\t\t\t\tif (options.mimeType && xhr.overrideMimeType) {\n\t\t\t\t\t\txhr.overrideMimeType(options.mimeType);\n\t\t\t\t\t}\n\n\t\t\t\t\t// X-Requested-With header\n\t\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\t\tif (!options.crossDomain && !headers[\"X-Requested-With\"]) {\n\t\t\t\t\t\theaders[\"X-Requested-With\"] = \"XMLHttpRequest\";\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set headers\n\t\t\t\t\tfor (i in headers) {\n\t\t\t\t\t\txhr.setRequestHeader(i, headers[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Callback\n\t\t\t\t\tcallback = function (type) {\n\t\t\t\t\t\treturn function () {\n\t\t\t\t\t\t\tif (callback) {\n\t\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\t\tif (type === \"abort\") {\n\t\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t\t} else if (type === \"error\") {\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\t\tif (typeof xhr.status !== \"number\") {\n\t\t\t\t\t\t\t\t\t\tcomplete(0, \"error\");\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status, xhr.statusText);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t(xhr.responseType || \"text\") !== \"text\" || typeof xhr.responseText !== \"string\" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\t\t// Listen to events\n\t\t\t\t\txhr.onload = callback();\n\t\t\t\t\terrorCallback = xhr.onerror = callback(\"error\");\n\n\t\t\t\t\t// Support: IE 9 only\n\t\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t\t// to handle uncaught aborts\n\t\t\t\t\tif (xhr.onabort !== undefined) {\n\t\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t\t} else {\n\t\t\t\t\t\txhr.onreadystatechange = function () {\n\n\t\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\t\tif (xhr.readyState === 4) {\n\n\t\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\t\twindow.setTimeout(function () {\n\t\t\t\t\t\t\t\t\tif (callback) {\n\t\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Create the abort callback\n\t\t\t\t\tcallback = callback(\"abort\");\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\t\txhr.send(options.hasContent && options.data || null);\n\t\t\t\t\t} catch (e) {\n\n\t\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\t\tif (callback) {\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tabort: function () {\n\t\t\t\t\tif (callback) {\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\n\t// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\n\tjQuery.ajaxPrefilter(function (s) {\n\t\tif (s.crossDomain) {\n\t\t\ts.contents.script = false;\n\t\t}\n\t});\n\n\t// Install script dataType\n\tjQuery.ajaxSetup({\n\t\taccepts: {\n\t\t\tscript: \"text/javascript, application/javascript, \" + \"application/ecmascript, application/x-ecmascript\"\n\t\t},\n\t\tcontents: {\n\t\t\tscript: /\\b(?:java|ecma)script\\b/\n\t\t},\n\t\tconverters: {\n\t\t\t\"text script\": function (text) {\n\t\t\t\tjQuery.globalEval(text);\n\t\t\t\treturn text;\n\t\t\t}\n\t\t}\n\t});\n\n\t// Handle cache's special case and crossDomain\n\tjQuery.ajaxPrefilter(\"script\", function (s) {\n\t\tif (s.cache === undefined) {\n\t\t\ts.cache = false;\n\t\t}\n\t\tif (s.crossDomain) {\n\t\t\ts.type = \"GET\";\n\t\t}\n\t});\n\n\t// Bind script tag hack transport\n\tjQuery.ajaxTransport(\"script\", function (s) {\n\n\t\t// This transport only deals with cross domain requests\n\t\tif (s.crossDomain) {\n\t\t\tvar script, callback;\n\t\t\treturn {\n\t\t\t\tsend: function (_, complete) {\n\t\t\t\t\tscript = jQuery(\"<script>\").prop({\n\t\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\t\tsrc: s.url\n\t\t\t\t\t}).on(\"load error\", callback = function (evt) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif (evt) {\n\t\t\t\t\t\t\tcomplete(evt.type === \"error\" ? 404 : 200, evt.type);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\t\tdocument.head.appendChild(script[0]);\n\t\t\t\t},\n\t\t\t\tabort: function () {\n\t\t\t\t\tif (callback) {\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\n\tvar oldCallbacks = [],\n\t    rjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n\t// Default jsonp settings\n\tjQuery.ajaxSetup({\n\t\tjsonp: \"callback\",\n\t\tjsonpCallback: function () {\n\t\t\tvar callback = oldCallbacks.pop() || jQuery.expando + \"_\" + nonce++;\n\t\t\tthis[callback] = true;\n\t\t\treturn callback;\n\t\t}\n\t});\n\n\t// Detect, normalize options and install callbacks for jsonp requests\n\tjQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n\n\t\tvar callbackName,\n\t\t    overwritten,\n\t\t    responseContainer,\n\t\t    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0 && rjsonp.test(s.data) && \"data\");\n\n\t\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\t\tif (jsonProp || s.dataTypes[0] === \"jsonp\") {\n\n\t\t\t// Get callback name, remembering preexisting value associated with it\n\t\t\tcallbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;\n\n\t\t\t// Insert callback into url or form data\n\t\t\tif (jsonProp) {\n\t\t\t\ts[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\n\t\t\t} else if (s.jsonp !== false) {\n\t\t\t\ts.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n\t\t\t}\n\n\t\t\t// Use data converter to retrieve json after script execution\n\t\t\ts.converters[\"script json\"] = function () {\n\t\t\t\tif (!responseContainer) {\n\t\t\t\t\tjQuery.error(callbackName + \" was not called\");\n\t\t\t\t}\n\t\t\t\treturn responseContainer[0];\n\t\t\t};\n\n\t\t\t// Force json dataType\n\t\t\ts.dataTypes[0] = \"json\";\n\n\t\t\t// Install callback\n\t\t\toverwritten = window[callbackName];\n\t\t\twindow[callbackName] = function () {\n\t\t\t\tresponseContainer = arguments;\n\t\t\t};\n\n\t\t\t// Clean-up function (fires after converters)\n\t\t\tjqXHR.always(function () {\n\n\t\t\t\t// If previous value didn't exist - remove it\n\t\t\t\tif (overwritten === undefined) {\n\t\t\t\t\tjQuery(window).removeProp(callbackName);\n\n\t\t\t\t\t// Otherwise restore preexisting value\n\t\t\t\t} else {\n\t\t\t\t\twindow[callbackName] = overwritten;\n\t\t\t\t}\n\n\t\t\t\t// Save back as free\n\t\t\t\tif (s[callbackName]) {\n\n\t\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t\t// Save the callback name for future use\n\t\t\t\t\toldCallbacks.push(callbackName);\n\t\t\t\t}\n\n\t\t\t\t// Call if it was a function and we have a response\n\t\t\t\tif (responseContainer && jQuery.isFunction(overwritten)) {\n\t\t\t\t\toverwritten(responseContainer[0]);\n\t\t\t\t}\n\n\t\t\t\tresponseContainer = overwritten = undefined;\n\t\t\t});\n\n\t\t\t// Delegate to script\n\t\t\treturn \"script\";\n\t\t}\n\t});\n\n\t// Support: Safari 8 only\n\t// In Safari 8 documents created via document.implementation.createHTMLDocument\n\t// collapse sibling forms: the second one becomes a child of the first one.\n\t// Because of that, this security measure has to be disabled in Safari 8.\n\t// https://bugs.webkit.org/show_bug.cgi?id=137337\n\tsupport.createHTMLDocument = function () {\n\t\tvar body = document.implementation.createHTMLDocument(\"\").body;\n\t\tbody.innerHTML = \"<form></form><form></form>\";\n\t\treturn body.childNodes.length === 2;\n\t}();\n\n\t// Argument \"data\" should be string of html\n\t// context (optional): If specified, the fragment will be created in this context,\n\t// defaults to document\n\t// keepScripts (optional): If true, will include scripts passed in the html string\n\tjQuery.parseHTML = function (data, context, keepScripts) {\n\t\tif (typeof data !== \"string\") {\n\t\t\treturn [];\n\t\t}\n\t\tif (typeof context === \"boolean\") {\n\t\t\tkeepScripts = context;\n\t\t\tcontext = false;\n\t\t}\n\n\t\tvar base, parsed, scripts;\n\n\t\tif (!context) {\n\n\t\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t\t// by using document.implementation\n\t\t\tif (support.createHTMLDocument) {\n\t\t\t\tcontext = document.implementation.createHTMLDocument(\"\");\n\n\t\t\t\t// Set the base href for the created document\n\t\t\t\t// so any parsed elements with URLs\n\t\t\t\t// are based on the document's URL (gh-2965)\n\t\t\t\tbase = context.createElement(\"base\");\n\t\t\t\tbase.href = document.location.href;\n\t\t\t\tcontext.head.appendChild(base);\n\t\t\t} else {\n\t\t\t\tcontext = document;\n\t\t\t}\n\t\t}\n\n\t\tparsed = rsingleTag.exec(data);\n\t\tscripts = !keepScripts && [];\n\n\t\t// Single tag\n\t\tif (parsed) {\n\t\t\treturn [context.createElement(parsed[1])];\n\t\t}\n\n\t\tparsed = buildFragment([data], context, scripts);\n\n\t\tif (scripts && scripts.length) {\n\t\t\tjQuery(scripts).remove();\n\t\t}\n\n\t\treturn jQuery.merge([], parsed.childNodes);\n\t};\n\n\t/**\n  * Load a url into a page\n  */\n\tjQuery.fn.load = function (url, params, callback) {\n\t\tvar selector,\n\t\t    type,\n\t\t    response,\n\t\t    self = this,\n\t\t    off = url.indexOf(\" \");\n\n\t\tif (off > -1) {\n\t\t\tselector = stripAndCollapse(url.slice(off));\n\t\t\turl = url.slice(0, off);\n\t\t}\n\n\t\t// If it's a function\n\t\tif (jQuery.isFunction(params)) {\n\n\t\t\t// We assume that it's the callback\n\t\t\tcallback = params;\n\t\t\tparams = undefined;\n\n\t\t\t// Otherwise, build a param string\n\t\t} else if (params && typeof params === \"object\") {\n\t\t\ttype = \"POST\";\n\t\t}\n\n\t\t// If we have elements to modify, make the request\n\t\tif (self.length > 0) {\n\t\t\tjQuery.ajax({\n\t\t\t\turl: url,\n\n\t\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t\t// Make value of this field explicit since\n\t\t\t\t// user can override it through ajaxSetup method\n\t\t\t\ttype: type || \"GET\",\n\t\t\t\tdataType: \"html\",\n\t\t\t\tdata: params\n\t\t\t}).done(function (responseText) {\n\n\t\t\t\t// Save response for use in complete callback\n\t\t\t\tresponse = arguments;\n\n\t\t\t\tself.html(selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery(\"<div>\").append(jQuery.parseHTML(responseText)).find(selector) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText);\n\n\t\t\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t\t\t// but they are ignored because response was set above.\n\t\t\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t\t}).always(callback && function (jqXHR, status) {\n\t\t\t\tself.each(function () {\n\t\t\t\t\tcallback.apply(this, response || [jqXHR.responseText, status, jqXHR]);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t// Attach a bunch of functions for handling common AJAX events\n\tjQuery.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (i, type) {\n\t\tjQuery.fn[type] = function (fn) {\n\t\t\treturn this.on(type, fn);\n\t\t};\n\t});\n\n\tjQuery.expr.pseudos.animated = function (elem) {\n\t\treturn jQuery.grep(jQuery.timers, function (fn) {\n\t\t\treturn elem === fn.elem;\n\t\t}).length;\n\t};\n\n\tjQuery.offset = {\n\t\tsetOffset: function (elem, options, i) {\n\t\t\tvar curPosition,\n\t\t\t    curLeft,\n\t\t\t    curCSSTop,\n\t\t\t    curTop,\n\t\t\t    curOffset,\n\t\t\t    curCSSLeft,\n\t\t\t    calculatePosition,\n\t\t\t    position = jQuery.css(elem, \"position\"),\n\t\t\t    curElem = jQuery(elem),\n\t\t\t    props = {};\n\n\t\t\t// Set position first, in-case top/left are set even on static elem\n\t\t\tif (position === \"static\") {\n\t\t\t\telem.style.position = \"relative\";\n\t\t\t}\n\n\t\t\tcurOffset = curElem.offset();\n\t\t\tcurCSSTop = jQuery.css(elem, \"top\");\n\t\t\tcurCSSLeft = jQuery.css(elem, \"left\");\n\t\t\tcalculatePosition = (position === \"absolute\" || position === \"fixed\") && (curCSSTop + curCSSLeft).indexOf(\"auto\") > -1;\n\n\t\t\t// Need to be able to calculate position if either\n\t\t\t// top or left is auto and position is either absolute or fixed\n\t\t\tif (calculatePosition) {\n\t\t\t\tcurPosition = curElem.position();\n\t\t\t\tcurTop = curPosition.top;\n\t\t\t\tcurLeft = curPosition.left;\n\t\t\t} else {\n\t\t\t\tcurTop = parseFloat(curCSSTop) || 0;\n\t\t\t\tcurLeft = parseFloat(curCSSLeft) || 0;\n\t\t\t}\n\n\t\t\tif (jQuery.isFunction(options)) {\n\n\t\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\t\toptions = options.call(elem, i, jQuery.extend({}, curOffset));\n\t\t\t}\n\n\t\t\tif (options.top != null) {\n\t\t\t\tprops.top = options.top - curOffset.top + curTop;\n\t\t\t}\n\t\t\tif (options.left != null) {\n\t\t\t\tprops.left = options.left - curOffset.left + curLeft;\n\t\t\t}\n\n\t\t\tif (\"using\" in options) {\n\t\t\t\toptions.using.call(elem, props);\n\t\t\t} else {\n\t\t\t\tcurElem.css(props);\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.fn.extend({\n\t\toffset: function (options) {\n\n\t\t\t// Preserve chaining for setter\n\t\t\tif (arguments.length) {\n\t\t\t\treturn options === undefined ? this : this.each(function (i) {\n\t\t\t\t\tjQuery.offset.setOffset(this, options, i);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tvar doc,\n\t\t\t    docElem,\n\t\t\t    rect,\n\t\t\t    win,\n\t\t\t    elem = this[0];\n\n\t\t\tif (!elem) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t\t// Support: IE <=11 only\n\t\t\t// Running getBoundingClientRect on a\n\t\t\t// disconnected node in IE throws an error\n\t\t\tif (!elem.getClientRects().length) {\n\t\t\t\treturn { top: 0, left: 0 };\n\t\t\t}\n\n\t\t\trect = elem.getBoundingClientRect();\n\n\t\t\tdoc = elem.ownerDocument;\n\t\t\tdocElem = doc.documentElement;\n\t\t\twin = doc.defaultView;\n\n\t\t\treturn {\n\t\t\t\ttop: rect.top + win.pageYOffset - docElem.clientTop,\n\t\t\t\tleft: rect.left + win.pageXOffset - docElem.clientLeft\n\t\t\t};\n\t\t},\n\n\t\tposition: function () {\n\t\t\tif (!this[0]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar offsetParent,\n\t\t\t    offset,\n\t\t\t    elem = this[0],\n\t\t\t    parentOffset = { top: 0, left: 0 };\n\n\t\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n\t\t\t// because it is its only offset parent\n\t\t\tif (jQuery.css(elem, \"position\") === \"fixed\") {\n\n\t\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\t\toffset = elem.getBoundingClientRect();\n\t\t\t} else {\n\n\t\t\t\t// Get *real* offsetParent\n\t\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t\t// Get correct offsets\n\t\t\t\toffset = this.offset();\n\t\t\t\tif (!nodeName(offsetParent[0], \"html\")) {\n\t\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t\t}\n\n\t\t\t\t// Add offsetParent borders\n\t\t\t\tparentOffset = {\n\t\t\t\t\ttop: parentOffset.top + jQuery.css(offsetParent[0], \"borderTopWidth\", true),\n\t\t\t\t\tleft: parentOffset.left + jQuery.css(offsetParent[0], \"borderLeftWidth\", true)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Subtract parent offsets and element margins\n\t\t\treturn {\n\t\t\t\ttop: offset.top - parentOffset.top - jQuery.css(elem, \"marginTop\", true),\n\t\t\t\tleft: offset.left - parentOffset.left - jQuery.css(elem, \"marginLeft\", true)\n\t\t\t};\n\t\t},\n\n\t\t// This method will return documentElement in the following cases:\n\t\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t\t//    documentElement of the parent window\n\t\t// 2) For the hidden or detached element\n\t\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t\t//\n\t\t// but those exceptions were never presented as a real life use-cases\n\t\t// and might be considered as more preferable results.\n\t\t//\n\t\t// This logic, however, is not guaranteed and can change at any point in the future\n\t\toffsetParent: function () {\n\t\t\treturn this.map(function () {\n\t\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\t\twhile (offsetParent && jQuery.css(offsetParent, \"position\") === \"static\") {\n\t\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t\t}\n\n\t\t\t\treturn offsetParent || documentElement;\n\t\t\t});\n\t\t}\n\t});\n\n\t// Create scrollLeft and scrollTop methods\n\tjQuery.each({ scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function (method, prop) {\n\t\tvar top = \"pageYOffset\" === prop;\n\n\t\tjQuery.fn[method] = function (val) {\n\t\t\treturn access(this, function (elem, method, val) {\n\n\t\t\t\t// Coalesce documents and windows\n\t\t\t\tvar win;\n\t\t\t\tif (jQuery.isWindow(elem)) {\n\t\t\t\t\twin = elem;\n\t\t\t\t} else if (elem.nodeType === 9) {\n\t\t\t\t\twin = elem.defaultView;\n\t\t\t\t}\n\n\t\t\t\tif (val === undefined) {\n\t\t\t\t\treturn win ? win[prop] : elem[method];\n\t\t\t\t}\n\n\t\t\t\tif (win) {\n\t\t\t\t\twin.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);\n\t\t\t\t} else {\n\t\t\t\t\telem[method] = val;\n\t\t\t\t}\n\t\t\t}, method, val, arguments.length);\n\t\t};\n\t});\n\n\t// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n\t// Add the top/left cssHooks using jQuery.fn.position\n\t// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n\t// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n\t// getComputedStyle returns percent when specified for top/left/bottom/right;\n\t// rather than make the css module depend on the offset module, just check for it here\n\tjQuery.each([\"top\", \"left\"], function (i, prop) {\n\t\tjQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\n\t\t\tif (computed) {\n\t\t\t\tcomputed = curCSS(elem, prop);\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + \"px\" : computed;\n\t\t\t}\n\t\t});\n\t});\n\n\t// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n\tjQuery.each({ Height: \"height\", Width: \"width\" }, function (name, type) {\n\t\tjQuery.each({ padding: \"inner\" + name, content: type, \"\": \"outer\" + name }, function (defaultExtra, funcName) {\n\n\t\t\t// Margin is only for outerHeight, outerWidth\n\t\t\tjQuery.fn[funcName] = function (margin, value) {\n\t\t\t\tvar chainable = arguments.length && (defaultExtra || typeof margin !== \"boolean\"),\n\t\t\t\t    extra = defaultExtra || (margin === true || value === true ? \"margin\" : \"border\");\n\n\t\t\t\treturn access(this, function (elem, type, value) {\n\t\t\t\t\tvar doc;\n\n\t\t\t\t\tif (jQuery.isWindow(elem)) {\n\n\t\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\t\treturn funcName.indexOf(\"outer\") === 0 ? elem[\"inner\" + name] : elem.document.documentElement[\"client\" + name];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Get document width or height\n\t\t\t\t\tif (elem.nodeType === 9) {\n\t\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t\t// whichever is greatest\n\t\t\t\t\t\treturn Math.max(elem.body[\"scroll\" + name], doc[\"scroll\" + name], elem.body[\"offset\" + name], doc[\"offset\" + name], doc[\"client\" + name]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css(elem, type, extra) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style(elem, type, value, extra);\n\t\t\t\t}, type, chainable ? margin : undefined, chainable);\n\t\t\t};\n\t\t});\n\t});\n\n\tjQuery.fn.extend({\n\n\t\tbind: function (types, data, fn) {\n\t\t\treturn this.on(types, null, data, fn);\n\t\t},\n\t\tunbind: function (types, fn) {\n\t\t\treturn this.off(types, null, fn);\n\t\t},\n\n\t\tdelegate: function (selector, types, data, fn) {\n\t\t\treturn this.on(types, selector, data, fn);\n\t\t},\n\t\tundelegate: function (selector, types, fn) {\n\n\t\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\t\treturn arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\n\t\t}\n\t});\n\n\tjQuery.holdReady = function (hold) {\n\t\tif (hold) {\n\t\t\tjQuery.readyWait++;\n\t\t} else {\n\t\t\tjQuery.ready(true);\n\t\t}\n\t};\n\tjQuery.isArray = Array.isArray;\n\tjQuery.parseJSON = JSON.parse;\n\tjQuery.nodeName = nodeName;\n\n\t// Register as a named AMD module, since jQuery can be concatenated with other\n\t// files that may use define, but not via a proper concatenation script that\n\t// understands anonymous AMD modules. A named AMD is safest and most robust\n\t// way to register. Lowercase jquery is used because AMD module names are\n\t// derived from file names, and jQuery is normally delivered in a lowercase\n\t// file name. Do this after creating the global so that if an AMD module wants\n\t// to call noConflict to hide this version of jQuery, it will work.\n\n\t// Note that for maximum portability, libraries that are not jQuery should\n\t// declare themselves as anonymous modules, and avoid setting a global if an\n\t// AMD loader is present. jQuery is a special case. For more information, see\n\t// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\n\tif (typeof define === \"function\" && define.amd) {\n\t\tdefine(\"jquery\", [], function () {\n\t\t\treturn jQuery;\n\t\t});\n\t}\n\n\tvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\n\tjQuery.noConflict = function (deep) {\n\t\tif (window.$ === jQuery) {\n\t\t\twindow.$ = _$;\n\t\t}\n\n\t\tif (deep && window.jQuery === jQuery) {\n\t\t\twindow.jQuery = _jQuery;\n\t\t}\n\n\t\treturn jQuery;\n\t};\n\n\t// Expose jQuery and $ identifiers, even in AMD\n\t// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n\t// and CommonJS for browser emulators (#13566)\n\tif (!noGlobal) {\n\t\twindow.jQuery = window.$ = jQuery;\n\t}\n\n\treturn jQuery;\n});"

/***/ }),
/* 216 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 217 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 218 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 219 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })
/******/ ]);